filename: grep_regex-multif_20170915.txt
http://www.linuxnix.com/grep-command-usage-linux/

18+ grep command examples in Linux/Unix
Jul 6, 2011

   GREP is a command line search utility or tool to filter the input given to it. Grep got its name from
   ed editor as g/re/p (global / regular expression / print). Grep command can improve a command output
   by filtering out the required information. Grep will become a killer command when we combined it with
   regular expressions. In this post, we will see how to use grep command in a basic way and then move
   on some advanced and rarely used options. In our next couple of posts, we will see what grep can do
   with the help of [47]regular expressions.

   GREP command syntax
grep [options] [searchterm] filename

   or
command | grep [options] [searchterm]

   Before starting to grep command examples, I used below file which contains following content.
cat file1.txt

   Output:
surendra 31 IBM Chennai
Steve 45 BOA London
Barbi 25 EasyCMDB Christchurch
Max 25 Easy CMDB Christchurch
Nathan 20 Wipro Newyark
David 20 ai Newyark

Search single file using grep
   Example 1: Search for a word “nathan” in file1.txt
grep nathan file1.txt

   You don’t get any output, as the word nathan is not there. By this type you should know grep is a
   case sensitive command. If you want specifically Nathan, use caps N in nathan and try once again.

   Example 2: Search for exact word “Nathan”
[email protected]:~# grep Nathan file1.txt
 Nathan 20 Wipro Newyark

   Example 3: Search for a word which has either capital or small letters in it, no confusion between
   nathan or Nathan. The -i for ignoring case.
[email protected]:~# grep -i Nathan file1.txt
 Nathan 20 Wipro Newyark

   Example 4: I suggest you always use single quotes for your search term. This will avoid confusions to
   gerp. Suppose if you want to search for “Easy CMDB” in a file, it will be difficult to search without
   single quotes. Try below examples.

   Without quotes:
[email protected]:~# grep Easy CMDB file1.txt
 grep: CMDB: No such file or directory
 file1.txt:Barbi 25 EasyCMDB Christchurch
 file1.txt:Max 25 Easy CMDB Christchurch

What grep did?
   If you observe, you got an error stating that there is no file called CMDB. That is true; there is no
   such file. This output has two issues
   1) Grep is considering the second word in the command as file
   2) Grep is thinking just “Easy” as a search term.

   Example 5: Search for exact search term using single quotes.
[email protected]:~# grep 'Easy CMDB' file1.txt
 Max 25 Easy CMDB Christchurch

   You may get doubt why single quotes and not double quotes. You can use double quotes as well when you
   want to send bash variable into search term.

   Example 6: Search for a shell variable in a file. My shell is NAME1 which is assigned with Nathan.
   See below examples of single and double quotes.
[email protected]:~# NAME1=Nathan
[email protected]:~# grep '$NAME1' file1.txt

   No output, now try with double quotes
[email protected]:~# grep "$NAME1" file1.txt
 Nathan 20 Wipro Newyark
[email protected]:~#

   See the difference? So it depends on when you want to use single quotes and double quotes. If you
   want to pass shell variables to grep use double quotes and remaining time always use single quotes.

   Example 7: If you want to inverse your search criteria, ie, to display all the lines which do not
   contain your search term then use -v option. The -v option will show all the lines which do not
   contain your search term. Suppose list all the lines which do not contain Nathan in the file.
[email protected]:~# grep -v 'Nathan' file1.txt
 surendra 31 IBM Chennai
 Steve 45 BOA London
 Barbi 25 EasyCMDB Christchurch
 Max 25 Easy CMDB Christchurch
 David 20 ai Newyark

   Example 8: How about getting the count of a word in a file? Search for word ‘Easy’ and tell me how
   many times it is there in the file.
[email protected]:~# grep -c 'Easy' file1.txt
 2

   Example 9: Ok, finding some occurrences is okay, how about displaying line number as well for our
   search term? Search for Easy and display line number where that word is present.
[email protected]:~# grep -n 'Easy' file1.txt
 3:Barbi 25 EasyCMDB Christchurch
 4:Max 25 Easy CMDB Christchurch

   Example 10: Some times you want to find exact word instead of finding an occurrence of a word
   sequence. Suppose you want to find is a word in a file, this will grep “this” as well as “this”
   contains “is” in it. Grep has a Technic to do this with the help of -w which filter out this type of
   stuff. Suppose I want to search for ai in our file, with standard grep it will print first and last
   lines as both contain ai in them. Use -w for avoiding this stuff.

   With out -w option:
[email protected]:~# grep 'ai' file1.txt
 surendra 31 IBM Chennai
 David 20 ai Newyark

   With -w option:
[email protected]:~# grep -w 'ai' file1.txt
 David 20 ai Newyark

   Example 11: Grep has a unique feature which can print lines before, after and between for a search
   term. Suppose if you want to print two lines before to the search, use below example. Search for Max
   and below example prints two lines above search term as well. This will be handy when searching for
   log files.
[email protected]:~# grep -B 2 'Max' file1.txt
 Steve 45 BOA London
 Barbi 25 EasyCMDB Christchurch
 Max 25 Easy CMDB Christchurch

   Example 12: Search for a word and print two lines after to this search
[email protected]:~# grep -A 2 'Barbi' file1.txt
 Barbi 25 EasyCMDB Christchurch
 Max 25 Easy CMDB Christchurch
 Nathan 20 Wipro Newyark

   Example 13: Search for a word and print one line Before and after center to this search term
[email protected]:~# grep -C 1 'Max' file1.txt
 Barbi 25 EasyCMDB Christchurch
 Max 25 Easy CMDB Christchurch
 Nathan 20 Wipro Newyark

Search multiple files using grep
   Example 14: Grep has one more feature which allows searching multiple files at a time. We no need to
   use grep for each file. Suppose you want to search for Nathan in /root folder recursively use below
   example.
[email protected]:~# grep -r 'Nathan' /root/
 Nathan 20 Wipro Newyark

   This will not display which file contain Nathan who may confuse you. We do not know from which file
   Nathan came. To avoid this confusion use below example.

   Example 15: Search for a word and just list the file names which contain it with in a directory.
[email protected]:~# grep -l 'Nathan' /root/
 file1.txt

   Example 16: Ok, again this command do not show the line which is again a confusion. To search
   multiple files and display their contents which match our search criteria use combination of -r and
   -n
[email protected]:~# grep -rn 'Nathan' /root/
 file1.txt:5:Nathan 20 Wipro Newyark
 test.txt:1:Nathan abc xyz who

   Example 17: Restrict your search to specific files. Suppose search only txt files.
[email protected]:~# grep -rn 'Nathan' *.txt
 file1.txt:5:Nathan 20 Wipro Newyark
 test.txt:1:Nathan abc xyz who

   Example 18: Some times you may see below error when opening log files.
Binary file <input-file> matches.

   This error is because grep thinks it is a binary file. But our log files are never a binary one. This
   error is due to the null value found in the log file. To read such files, you have to use -a which
   tell grep to read this file as a binary file.
grep -a xyz abc.txt

   In our next two posts, we will see how to use grep with regular expressions.


---
http://www.linuxnix.com/grep-command-regular-expressions-examples-ii/

8 Grep command basic Regex examples in Linux/Unix
Aug 3, 2011
 
   In the previous post we saw how to use grep to search for words and played across different
   options. In this post, we will see how to use Basic regular expressions to increase the power of grep
   command.

   Basic regular expressions:

^ -- Caret symbol, Match beginning of the line.

$ -- Match End of the line

* -- Match 0 or more occurrence of the previous character

. – Match Any single character

[] – Match Range of characters, just single occurrence.

            [a-z] –Match small letters

            [A-Z] –Match cap letters

            [0-9] – Match numerical.

[^] – Match Negate a sequence

 -- Match Escape character.

   If we learn any new thing with the example, it will be there for a long time in our mind. Now we will
   see one example each regular expression what we have given above.

   Example1: Find all the lines which start with “Mr”
grep ‘^Mr’ filename

   Example2: Find all the lines which end with ‘sh’
grep ‘sh$’ filename

   Example3: Display all the lines in a file expect empty lines.
grep –v ‘^$’ filename

   Note:-v option is used to negate the search term, here ^$ indicates empty line, so our grep –v is
   filtering blank lines in the output.

   Example4: Search for words which are bash, baash, bsh, baaash, baaaaash,
grep ‘ba*s’ filename

   The above grep command will search for words which have a between b and s zero or more times.

   Example5: Search for all words which start with b and h
grep ‘b.*h’ filename

   Example6: Search for a word which is having three letters in it and starts with x and ends with m.
grep ‘x[a-z]m’ filename

   This search will return all the three letter words which start with x and ends with m.

   Example7: Search words do not contain ‘ac’ in a file.
grep ‘[^ac]’ filename

   Example8: Search for a ‘[‘ in a file

   Note: The “[“ is a special character, you cannot search with regular grep we have to use escape
   character () to negate it. So use ‘[‘ to search for [. This is applicable for all the special
   characters mentioned above.
grep ‘[’ filename

   Please feel free to comment on this, if you have more thoughts. Stay tuned to our next grep post on
   how to use extended regular expressions.


---
http://www.linuxnix.com/grep-command-regular-expressions-examples-iii/

7 Grep command examples with extended regex in Linux/Unix
Aug 4, 2011

   In the previous post we saw how to use Basic regular expression along with grepping to search
   for words and played across different basic regular expressions. In this post, we will see how to use
   extended regular expressions to increase the power of grep command even better than Basic regular
   expression.

   Extended regular expressions:

+ --Match one or more occurrences of the previous character.

| -- Match Either character

? – Match 0 or 1 occurrence of the previous character.

() –match a group of characters

{number} –Match number of occurrence of a character

{1, 3} –Match a character which is 1 to 3 times repetition

{5, } –Match a repeated character which is repeated 5 or more times.

   Note1: To use this extended regular expressions we have to use –E option give grep the capability to
   understand Extended regular expressions.

   Note2: egrep command is nothing but grep with –E option, so please don’t learn it. If the grep
   command it self can do the work for you, why to learn new Linux command?

   Examples:

   Example1: Search for a word which contains one or more occurrence of ‘b’ between a and c. The below
   command will search for words like abc, abbc, abbbc etc.
grep –E ‘ab+c’ filename

   Example2: Search for a word which contains zero or one occurrence of b between a and c. The below
   command will search for ac, abc. This is a bit tricky as the first search ac do not contain b. As ?
   states, it searches for zero or one occurrence of a character.
grep –E ‘ab?c’ filename

   Example3: Search for multiple words with single grep command.

   Suppose you want to search for john and you want to search for marry as well. Do not use two grep
   commands as shown.
grep john filename

grep marry filename

   Instead of using two grep commands, use -E options to search multiple words with single grep command.
grep –E ‘john|marry’ filename

   How about searching three words with single grep command?
grep -E 'john|marry|tony' filename

   Example4: Search for a word which contains either a or b, but not both a and b between d, e
   characters
grep –E ‘d(a|b)e’ filename

Interval regular expressions with grep
   Example5: Search for a word which contains only 2 ‘b’ between a and c character
grep –E ‘ab{2}c’ filename

   Example6: Search for a word which contains 3 to 4 ‘b’ between a and c character. so this will search
   for abbc, abbbc, and abbbbc as well.
grep –E ‘ab{2,4}c’ filename

   Example7: Search for a word which contains 3 or more ‘b’ between a and c character. This will search
   for abbbc, abbbbc, and so on.
grep –E ‘ab{3, }c’ filename

   Note: When we are using {} we have to give a range, but in this example, we did not provide range we
   just started the range but did not end the range which indicates infinity.
