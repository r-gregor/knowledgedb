filename: sed_programming-tutorial-multif_20180413.txt
http://www.yourownlinux.com/2015/04/sed-command-in-linux-print-lines-in-file.html

Sed Command in Linux - Print Lines in a File
12 April 2015

   This is the first article of the "Super sed' Series", in which we will learn how to print lines in a
   file using line numbers and regular expressions.

   Before we directly jump to the main content, every learner should know what sed is. Here is the brief
   introduction of the Super sed:
     * sed stand for Stream EDitor and it being based on the ed editor, it borrows most of the commands
       from the ed. It was developed by Lee E. McMahon of Bell Labs.
     * sed offers large range of text transformations that include printing lines, deleting lines,
       editing line in-place, search and replace, appending and inserting lines, etc.
     * sed is useful whenever you need to perform common editing operations on multiple lines without
       using 'vi' editor.
     * Whenever sed is executed on an input file or on the contents from stdin, sed reads the file
       line-by-line and after removing the trailing newline, places it in the "Pattern space", where the
       commands are executed on them after conditions (as in case of regex matching) are verified, and
       then printed on the stdout.

Printing Lines from a File using sed
   Before we start, just remember two points:
    1. sed "p" command lets us print specific lines based on the line number or regex provided.
    2. sed with option -n will suppress automatic printing of pattern buffer/space. So, we would want to
       use this option. (Explained in later section)

   For our better understanding, let us have a file sedtest.txt with contents as follows:
$ cat sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

A. sed - Print Lines with Line Number
1. Print 'N'th line

   This will print 'N'th line in the FILE.txt.
   Syntax:
sed -n 'Np' FILE.txt

   Example:
   To print 1st line,
$ sed -n '1p' sedtest.txt
This is line #1

   While, to print last line,
$ sed -n '$p' sedtest.txt
This is line #10

   Let us see, what if we had not used option -n, what would have been the result.
$ sed '5p' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

   You can easily see that 5th line is printed twice, one from pattern buffer/space and other is the
   result of sed '5p'.

2. Print all Lines starting from 'M'th up to 'N'th

   This will print the block of lines starting at line number M and ending at line number N.
   Syntax:
sed -n 'M,Np' FILE.txt

   Example:
   To print 3rd line to 8th line.
$ sed -n '3,8p' sedtest.txt
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8

   Similarly, in order to print lines starting from 5th up to last line, you would run-
$ sed -n '5,$p' sedtest.txt
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

3. Print Every 'N'th Line Starting from 'M'th Line

   This will print Mth line and every Nth line coming after that.
   Syntax:
sed -n 'M~Np' FILE.txt

   Example:
   To print every alternate line staring from 2nd one.
sed -n '2~2p' sedtest.txt
This is line #2
This is line #4
This is line #6
This is line #8
This is line #10

B. sed - Print Lines with Regular Expression/Pattern
1. Print lines containing a Pattern

   This will print the line that contains the pattern provided.
   Syntax:
sed -n '/PATTERN/p' FILE.txt

   Example:
$ sed -n '/4/p' sedtest.txt
This is line #4

2. Print lines excluding a Pattern
   This will print all those lines which do not contain the pattern provided.
   Syntax:
sed -n '/PATTERN/!p' FILE.txt

   Example:
$ sed -n '/4/!p' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

3. Print Block of lines starting from pattern matching line
   This will start printing the lines from the one where pattern matches, till 'N'th line.
   Syntax:
sed -n '/PATTERN/,Np' FILE.txt

   Example:
$ sed -n '/5/,8p' sedtest.txt
This is line #5
This is line #6
This is line #7
This is line #8

   Of course, in order to print all the lines starting from pattern matching line till the end, you
   would use '/PATTERN/,$p' as follows -
$ sed -n '/5/,$p' sedtest.txt
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

4. Print Block of lines ending at pattern matching line
   This will start printing the lines starting from the 'N'th line, till the one where pattern matches.
   Syntax:
sed -n 'N,/PATTERN/p' FILE.txt

   Example:
$ sed -n '4,/9/p' sedtest.txt
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9

   So, here, if you wish to start from first line and end at a line matching a pattern, you would use -
$ sed -n '1,/6/p' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6

5. Print Block of lines between two Pattern matches
   This will start printing lines from 1st pattern match till 2nd pattern match.
   Syntax:
sed -n '/PATTERN1/,/PATTERN2/p' FILE.txt

   Example:
$ sed -n '/5/,/8/p' sedtest.txt
This is line #5
This is line #6
This is line #7
This is line #8


---
http://www.yourownlinux.com/2015/04/sed-command-in-linux-append-and-insert-lines-to-file.html

Sed Command in Linux - Append and Insert Lines to a File
19 April 2015

   This is the second article of the "Super sed' Series", in which we will learn how to append and
   insert lines to a file using line numbers and regular expressions. In the previous article in the
   series, we learned to [19]print lines in a file using sed command.

   Before we directly jump to the main content, every learner should know what sed is. Here is the brief
   introduction of the Super sed:
     * sed stand for Stream EDitor and it being based on the ed editor, it borrows most of the commands
       from the ed. It was developed by Lee E. McMahon of Bell Labs.
     * sed offers large range of text transformations that include printing lines, deleting lines,
       editing line in-place, search and replace, appending and inserting lines, etc.
     * sed is useful whenever you need to perform common editing operations on multiple lines without
       using 'vi' editor.
     * Whenever sed is executed on an input file or on the contents from stdin, sed reads the file
       line-by-line and after removing the trailing newline, places it in the "Pattern space", where the
       commands are executed on them after conditions (as in case of regex matching) are verified, and
       then printed on the stdout.

   Before we start, just remember two points:
    1. sed "a" command lets us append lines to a file, based on the line number or regex provided. So,
       the lines will be added to the file AFTER the line where condition matches.
    2.  sed "i" command lets us insert lines in a file, based on the line number or regex provided. So,
       the lines will be added to the file AT the location where line number matches or BEFORE the line
       where pattern matches.
    3. sed with option -i will edit the file in place, i.e. unless you use the option -i, the changes
       will not be written to the file. (Explained in later section)

sed - Appending Lines to a File
    For our better understanding, let us have a file sedtest.txt with contents as follows:
$ cat sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

1. Append a line after 'N'th line
   This will add a line after 'N'th line in the FILE.txt.
   Syntax:
sed 'N a <LINE-TO-BE-ADDED>' FILE.txt

   Example:
   To append a line #This is just a commented line after 1st line,
$ sed '1 a #This is just a commented line' sedtest.txt
This is line #1
#This is just a commented line
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

   While, to append a line after last line,
$ sed '$ a This is the last line' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10
This is the last line

   If you run above commands and inspect the file sedtest.txt, you would find that, the original
   contents of that file would not change. In case you wish to append lines in the file and save the
   changes (i.e. edit the file in place), you will have to use the option -i.
   Lets check it for the latest command we have run to append lines after the last line of the file. Has
   it made any changes to the file?
$ cat sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

   No, the original file remains the same. But, I wanted to save the changes to the file. So, I should
   have used the option -i.
$ sed -i '$ a This is the last line' sedtest.txt
$ cat sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10
This is the last line

   Yes, now changes are written to the file. Just remember this.

2. Append Line using Regular Expression/Pattern
   This will append the line after the line where pattern match is found.
   Syntax:
sed '/PATTERN/ a <LINE-TO-BE-ADDED>' FILE.txt

   Example:
$ sed '/5/ a #Next line is the 6th line, not this' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
#Next line is the 6th line, not this
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

sed - Inserting Lines in a File
1. Insert line using the Line number
   This will insert the line before the line at line number 'N'.
   Syntax:
sed 'N i <LINE-TO-BE-ADDED>' FILE.txt

   Example:
$ sed '4 i #This is the extra line' sedtest.txt
This is line #1
This is line #2
This is line #3
#This is the extra line
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
This is line #10

   While, to insert a line before last line,
$ sed '$ i #Next line will be last line' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #4
This is line #5
This is line #6
This is line #7
This is line #8
This is line #9
#Next line will be last line
This is line #10

2. Insert lines using Regular expression
   This will insert the line before every line where pattern match is found.
   Syntax:
sed '/PATTERN/ i <LINE-TO-BE-ADDED>' FILE.txt

   Example:
$ sed '/8/ i #This line is inserted using sed' sedtest.txt
This is line #1
This is line #2
This is line #3
This is line #5
This is line #6
This is line #7
#This line is inserted using sed
This is line #8
This is line #9
This is line #10


---
http://www.yourownlinux.com/2015/04/sed-command-in-linux-delete-lines-from-file.html

Sed Command in Linux - Delete Lines from a File
20 April 2015

       This is the third article of the "Super sed' Series", in which we will learn how to delete lines
   from a file using line numbers and regular expressions. In the first two articles, we have learned,
   how to [19]print lines using sed and how to [20]append and insert lines in a file using sed. If you
   are familiar with sed print syntaxes, then this article would be pretty easy to understand.

   For those learners who are new to sed, let's have a brief introduction of the Super sed:
     * sed stand for Stream EDitor and it being based on the ed editor, it borrows most of the commands
       from the ed. It was developed by Lee E. McMahon of Bell Labs.
     * sed offers large range of text transformations that include printing lines, deleting lines,
       editing line in-place, search and replace, appending and inserting lines, etc.
     * sed is useful whenever you need to perform common editing operations on multiple lines without
       using 'vi' editor.
     * Whenever sed is executed on an input file or on the contents from stdin, sed reads the file
       line-by-line and after removing the trailing newline, places it in the "Pattern space", where the
       commands are executed on them after conditions (as in case of regex matching) are verified, and
       then printed on the stdout.

Deleting Lines from a File using sed
   Before we start, just remember two points:
    1. sed "d" command lets us print specific lines based on the line number or regex provided.
    2. When ^ means beginning of the line and $ denotes end of the line, ^$ makes a "Blank Line", very
       useful while removing empty lines from a file.

   For our better understanding, let us have a file sedtest.txt with contents as follows:
$ cat sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4
It's line #5
I am line #6
Myself line #7
It's me, line #8
Hello, I am line #9
Last line, line #10

A. sed - Delete Lines with Line Number
1. Delete 'N'th line
   This will remove 'N'th line in the FILE.txt.
   Syntax:
sed 'N d' FILE.txt

   Example:
   To delete 1st line,
$ sed '1 d' sedtest.txt
It is line #2
That is line #3
While, this is line #4
It's line #5
I am line #6
Myself line #7
It's me, line #8
Hello, I am line #9
Last line, line #10

   While, to remove last line,
$ sed '$ d' sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4
It's line #5
I am line #6
Myself line #7
It's me, line #8
Hello, I am line #9

   If you run above commands and inspect the file sedtest.txt, you would find that, the original
   contents of that file would not change. In case you want to remove lines in the file and save the
   changes (i.e. edit the file in place), you will have to use the option -i as shown in below example:
$ sed -i '5 d' sedtest.txt
$ cat sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4
I am line #6
Myself line #7
It's me, line #8
Hello, I am line #9
Last line, line #10

2. Delete all Lines starting from 'M'th up to 'N'th
   This will remove the block of lines starting at line number M and ending at line number N.
   Syntax:
sed 'M,N d' FILE.txt

   Example:
   To delete block of lines from 3rd line to 8th line.
$ sed '3,8 d' sedtest.txt
This is line #1
It is line #2
Hello, I am line #9
Last line, line #10

   Similarly, in order to delete lines starting from 5th up to last line, you would run-
$ sed '5,$ d' sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4

3. Delete Every 'M'th Line Starting from 'N'th Line
   This will start from Nth line and delete every Mth line coming after that. Note that, Nth line will
   also be deleted.
   Syntax:
sed 'N~M d' FILE.txt

   Example:
   To delete every alternate line staring from 2nd one.
sed '2~2 d' sedtest.txt
This is line #1
That is line #3
It's line #5
Myself line #7
Hello, I am line #9

B. sed - Delete Lines using Regular Expression/Pattern
1. Delete lines containing a specific Pattern
   This will delete all those lines that contain the pattern provided.
   Syntax:
sed '/PATTERN/ d' FILE.txt

   Example:
$ sed '/It/ d' sedtest.txt
This is line #1
That is line #3
While, this is line #4
I am line #6
Myself line #7
Hello, I am line #9
Last line, line #10

2. Delete all those lines not containing the Pattern
   This will delete all those lines which do not include the pattern provided.
   Syntax:
sed '/PATTERN/ !d' FILE.txt

   Example:
$ sed '/It/ !d' sedtest.txt
It is line #2
It's line #5
It's me, line #8

3. Delete block of lines starting from pattern matching line
   This will remove the lines from the one where pattern matches, till 'N'th line.
   Syntax:
sed '/PATTERN/,N d' FILE.txt

   Example:
$ sed '/5/,8 d' sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4
Hello, I am line #9
Last line, line #10

   Similarly, so as to delete all the lines starting from pattern matching line till the end, you would
   use '/PATTERN/,$ d' as follows -
$ sed '/5/,$ d' sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4

4. Delete block of lines starting from Nth and ending at pattern matching line
   This will delete the lines starting from the 'N'th line, till the one where pattern matches.
   Syntax:
sed 'N,/PATTERN/ d' FILE.txt

   Example:
$ sed '4,/Hello/ d' sedtest.txt
This is line #1
It is line #2
That is line #3
Last line, line #10

5. Delete block of lines between two Pattern matches
   This will start deleting lines from 1st pattern match till 2nd pattern match.
   Syntax:
sed '/PATTERN1/,/PATTERN2/ d' FILE.txt

   Example:
$ sed  '/While/,/Myself/ d' sedtest.txt
This is line #1
It is line #2
That is line #3
It's me, line #8
Hello, I am line #9
Last line, line #10

6. Deleting all blank lines
   Syntax:
sed '^$ d' FILE.txt

7. Deleting lines containing either of two patterns
   Syntax:
sed '/PATTERN1\|PATTERN2/ d' FILE.txt

   Example:
$ sed  '/While\|Myself/ d' sedtest.txt
This is line #1
It is line #2
That is line #3
It's line #5
I am line #6
It's me, line #8
Hello, I am line #9
Last line, line #10


---
http://www.yourownlinux.com/2015/05/sed-command-in-linux-search-replace-patterns-in-file.html

Sed Command in Linux - Search and Replace Text in a File
2 May 2015

   This is the fourth article of the "Super sed' Series", in which we will learn how to search for a
   pattern and replace it with other pattern in a file, using regular expressions. In previous articles
   on sed command, we've learned how to [19]print lines in a file, [20]delete lines from a file and
   [21]insert/append lines to a file.

   Before we directly jump to the main content, every learner should know what sed is. Here is the brief
   introduction of the Super sed:
     * sed stand for Stream EDitor and it being based on the ed editor, it borrows most of the commands
       from the ed. It was developed by Lee E. McMahon of Bell Labs.
     * sed offers large range of text transformations that include printing lines, deleting lines,
       editing line in-place, search and replace, appending and inserting lines, etc.
     * sed is useful whenever you need to perform common editing operations on multiple lines without
       using 'vi' editor.
     * Whenever sed is executed on an input file or on the contents from stdin, sed reads the file
       line-by-line and after removing the trailing newline, places it in the "Pattern space", where the
       commands are executed on them after conditions (as in case of regex matching) are verified, and
       then printed on the stdout.

Search and Replace a Pattern using sed
   Before we start, just remember two points:
    1. sed "s" command searches for a particular pattern in the file and if the pattern is matched, it
       is replaced with another pattern mentioned in the command. (We will see the syntax a bit later,
       just remember that, there is a search pattern and a replace pattern).
    2. When ^ means beginning of the line and $ denotes end of the line, ^$ makes an "Empty Line", very
       useful while deleting empty lines from a file.
    3. sed with option -i will edit the file in place, i.e. unless you use the option -i, the changes
       will not be written to the file.
    4. sed with option -n will suppress automatic printing of pattern buffer/space. So, we would want to
       use this option (How and why? Check [23]this article).

   For our better understanding, let us have a file sedtest.txt with contents as follows:
$ cat sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4
It's line #5
I am line #6
Myself line #7
It's me, line #8
Hello, I am line #9
Last line, line #10

   Syntax for Search and Replace:
   The syntax used by sed for 'search and replace' might seem to be a bit confusing initially, but its
   pretty straight-forward once it's completely understood.
sed 's/SEARCH/REPLACE/OPTIONS' FILE.txt

   Let's get deeper in above syntax,
     * s - As mentioned earlier, s is used to search for a pattern.
     * / - It's a delimiter. There are some alternatives for / to be used as a delimiter. A few of them
       are # % @ :.
     * SEARCH - What are you searching for? You would be mentioning the search pattern here.
     * REPLACE - I've got the SEARCH pattern, what should I replace it with? You would be mentioning the
       replace pattern here.
     * OPTIONS - In order to make your work more comfortable, s commands comes with following options:
     * i : If you use this option, your search for the SEARCH pattern would be case-insensitive.
          + g : It can be used to replace ALL the SEARCH instances with REPLACE pattern.
          + n : Unlike g, it would replace only the 'n'th occurrence of the pattern.
          + w : Just I've mentioned, in case you wish to edit the original file in place, you will have
            to use option -i. But, in case you want to write the output to other file, keeping the
            original file intact, you can use option w. Of course, redirections (> or >>) could have
            been used instead.
          + p : When this option is used, it would display only those lines wherein replacements are
            made.

   Let us now begin with the practical examples.

1. sed s command with no option specified
   When we do not mention any of the options (g, n or w), only the first match of each line is replaced.
   Have a look at below example, in which we will replace the letter i with X. Here, SEARCH will be
   letter 'i', REPLACE will be letter 'X' and we do not mention any option therein.
   Example:
$ sed 's/i/X/' sedtest.txt
ThXs is line #1
It Xs line #2
That Xs line #3
WhXle, this is line #4
It's lXne #5
I am lXne #6
Myself lXne #7
It's me, lXne #8
Hello, I am lXne #9
Last lXne, line #10

   So, from above output, we can conclude that only the first occurrence of letter 'i' is replaced,
   while letter 'X' along with non-first occurrences of letter 'i' remained unchanged.

2. Replace 'n'th occurrence of a word/string
   Consider that, in above file sedtest.txt, we need to replace the 2nd occurrence of the string is with
   the string XX. So, in this case, SEARCH = is, REPLACE=XX and this time, we would use an option 2
   indicating that, we are interested in the 2nd occurrence only.
   Example:
$ sed 's/is/XX/2' sedtest.txt
This XX line #1
It is line #2
That is line #3
While, this XX line #4
It's line #5
I am line #6
Myself line #7
It's me, line #8
Hello, I am line #9
Last line, line #10

   If you look at line 1 and 4, it has skipped the first occurrence of the pattern 'is' (included in the
   word This) and replaced the 2nd one with 'XX'.

3. Replace all the occurrences of a word/string
   Now, let us replace all the occurrences of the word 'line' with the word 'sentence'. For this
   purpose, SEARCH = line, REPLACE=sentence and the option would be g indicating that, we are interested
   in all the occurrences.
   Example:
$ sed 's/line/sentence/g' sedtest.txt
This is sentence #1
It is sentence #2
That is sentence #3
While, this is sentence #4
It's sentence #5
I am sentence #6
Myself sentence #7
It's me, sentence #8
Hello, I am sentence #9
Last sentence, sentence #10

   So, as expected, all the lines are replaced by sentences.

4. Display only the altered lines using p
   As mentioned in the earlier part, sed s command with p option will print only those lines in which
   substitutions are made. By default, it will also display the pattern buffer, and to suppress it we
   would use -n.
   Example:
   Without -n,
$ sed 's/While/Whereas/gp' sedtest.txt
This is sentence #1
It is sentence #2
That is sentence #3
Whereas, this is sentence #4
Whereas, this is sentence #4
It's sentence #5
I am sentence #6
Myself sentence #7
It's me, sentence #8
Hello, I am sentence #9
Last sentence, sentence #10

   Could you find 2 'Whereas's?
   With -n,
$ sed -n 's/While/Whereas/gp' sedtest.txt
Whereas, this is sentence #4

   So, conclusion is, option p prints the line where replacement has been done.

5. Dump the substitutions into a file
   Similar to option p, but where p displays the changes on STDOUT, option g writes the changes to a
   file. In this case, we need to mention a file name, say changes.txt, where changes are supposed to be
   written to.
   Example:
$ sed -n 's/While/Whereas/gpw changes.txt' sedtest.txt
Whereas, this is sentence #4
$
$ cat changes.txt
Whereas, this is sentence #4

   Here, with pw together, we can make sure that, the lines displayed by p are written to the output
   file.

6. Delete words/strings using sed
   Just imagine, what would happen if we use nothing as a REPLACE pattern?
$ sed 's/line//g' sedtest.txt
This is  #1
It is  #2
That is  #3
While, this is  #4
It's  #5
I am  #6
Myself  #7
It's me,  #8
Hello, I am  #9
Last ,  #10

   Whoops! The lines are gone.
   Similarly, instead of deleting an entire string, if we wish to delete last 2 characters of every
   line, our SEARCH pattern will be ..$, where each period [.] (intentionally used square brackets ;))
   matches a letter and $ matches end of the line. So, when they combine together make "Last two
   characters of a line".
   Example:
$ sed 's/..$//g' sedtest.txt
This is line
It is line
That is line
While, this is line
It's line
I am line
Myself line
It's me, line
Hello, I am line
Last line, line

   So, this time, line numbers are gone.

7. Replace only if line contains a pattern
   Let's consider that, I wish to replace the word line with statement, only if that line contains the
   word Myself. Had you read previous articles on sed, you would have done this exercise on your own.
$ sed '/Myself/s/line/statement/g' sedtest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4
It's line #5
I am line #6
Myself statement #7
It's me, line #8
Hello, I am line #9
Last line, line #10

   See statement #7, line is a statement now.

8. Multiple actions in sed command
   This time, the scenario is - I have a text file and it's heavily commented. I do not want to read
   those comments and I want those lines to be deleted. So, we need to remove all the characters in a
   line that starts with a #, which will give us an empty line. And, in order to delete that line, we
   would need the d command of sed.
   In this case, the SEARCH pattern will be ^#.*, indicating whatever that begins with a # in a line,
   REPLACE pattern will be empty. We have already seen how to delete empty lines using sed with d
   command.
   Example:
$ sed 's/^#.*//g; /^$/d' FILE.txt


---
http://www.yourownlinux.com/2015/05/cut-command-in-linux-tutorial-with-examples.html

Cut Command in Linux - Extract Fields and Columns from a file
25 May 2015

   In some of my recent articles on text processing, I have explained the use of [18]sed command in
   Linux/Unix. In case of sed command, we provide an input file to the command, it reads the file
   line-by-line, processes each line and then prints it on the STDOUT. So, in brief, its a row-wise
   operation. Similar is the case with cut command - there is an input file, there is processing part
   and the processed output can be displayed on STDOUT or saved in a file. A minor difference between
   sed and cut is that, cut command processes the file in vertical manner. So, the outcome of the cut
   command is a single or multiple columns.

       As of now, just remember that, cut command is just a filter, that processes the file and extracts
   columns from it. Basically, using cut command, we can process a file in order to extract - either a
   column of characters or some fields. Thus, to achieve more clarity about cut command, we would study
   it in two parts.
   Here we go!

A. Extracting Column of Characters
   To begin with, consider a file cuttest.txt with contents as below:
$ cat cuttest.txt
This is line #1
It is line #2
That is line #3
While, this is line #4
It's line #5
I am line #6
Myself line #7
It's me, line #8
Hello, I am line #9
Last line, line #10

   Now, just have a look at the basic syntax of the cut command, to extract column(s) of characters from
   a file:
cut -c [RANGE] [FILENAME]

   To explain this briefly, we are instructing cut command to select on the specific characters
   specified by RANGE from the file FILENAME.

1. Display a Column of Characters
   To begin with, lets display the fourth character from each line of the file cuttest.txt.
   Example:
$ cat -c 4 cuttest.txt
s
i
t
l
s
m
e
s
l
t

   This does make sense!

2. Display a Group of Columns of Characters
   In order to extract a group of columns, we need to specify a range - Start and End, to the cut
   command. To try with, lets display first five characters of each line of the file.
   Example:
$ cut -c 1-5 cuttest.txt
This
It is
That
While
It's
I am
Mysel
It's
Hello
Last

   Conclusion is - a whitespace is also considered as a character.
   Another variant of this case is, when you want to start from a particular column and display till the
   last one. As an example, we will start displaying from the 6th column will the end. So, in this case,
   we would mention start of the range as '6' and we do not mention any end. Thus, it will print
   everything after the 6th column.
   Example:
$ cut -c 6- cuttest.txt
is line #1
 line #2
is line #3
, this is line #4
line #5
line #6
f line #7
me, line #8
, I am line #9
line, line #10

   Similarly, to get first 6 characters from the beginning of each line, we would have an example as
   follows:
$ cut -c -6 cuttest.txt
This i
It is
That i
While,
It's l
I am l
Myself
It's m
Hello,
Last l

   Now, there might be a curiosity that, what if I don't mention the start and the end of the range.
   Let's see what happens-
   Example:
$ cut -c - cuttest.txt
cut: invalid range with no endpoint: -

   Those who thought that entire columns will be printed, are proved to be wrong. Conclusion is - There
   has to be a valid range.

B. Extracting Field from a File
   In order to understand this usage of cut command, lets consider a csv file as follows:
$ cat employees.txt
Employee ID, Employee Name, Age, Gender, Department, Salary
101, John Davies, 35, M, Finance, $4000
102, Mary Fernandes, 29, F, Human Resources, $3000
103, Jacob Williams, 40, M, Sales, $4700
104, Sean Anderson, 25, M, Production, $2700
105, Nick Jones, 42, M, Finance, $7500
106, Diana Richardson, 29, F, Finance, $3200

   Remember, in order to extract a field from a file, we would need a delimiter (i.e. a column
   separator), based on which the file will be divided into columns and we can extract any of them. In
   this case, the syntax would be-
cut -d [DELIMITER] -f [RANGE] [FILENAME]

   Here, we are instructing cut command to use a particular delimiter with option -d and then extract
   certain fields using option -f.

1. Display a specific field from a file
   In case of a csv file, it is crystal clear that our delimiter will be a comma (,). Now, we need to
   enlist the names of the employees working in our organization, i.e. field number 2.
   Example:
$ cut -d ',' -f 2 employees.txt
Employee Name
John Davies
Mary Fernandes
Jacob Williams
Sean Anderson
Nick Jones
Diana Richardson

   Looks good.

2. Displaying Multiple Fields from a File
   Moving forward now, lets display more than one field now. Suppose, we need to include 'Age' and
   'Gender' fields also. For this, we must specify the range - again, a start and an end.
$ cut -d ',' -f 2-4 employees.txt
Employee Name, Age, Gender
John Davies, 35, M
Mary Fernandes, 29, F
Jacob Williams, 40, M
Sean Anderson, 25, M
Nick Jones, 42, M
Diana Richardson, 29, F

   Conclusion, in this case, is that, Input Delimiter = Output Delimiter.
   Lets have a look at a variant in this case. Suppose, we need to extract 'Employee ID', 'Employee
   Name', 'Department' and 'Salary'. In that case, we need to specify two ranges as below:
   Example:
$ cut -d ',' -f 1-2,5-6 employees.txt
Employee ID, Employee Name, Department, Salary
101, John Davies, Finance, $4000
102, Mary Fernandes, Human Resources, $3000
103, Jacob Williams, Sales, $4700
104, Sean Anderson, Production, $2700
105, Nick Jones, Finance, $7500
106, Diana Richardson, Finance, $3200

   This is just awesome!

3. Change the Delimiter in the Output
   As we just saw in one of the examples above, by default, Input Delimiter = Output Delimiter. What if
   I wish to change the output delimiter? Just have a look at the example below:
   Example:
$ cut -d ',' -f 2-4 --output-delimiter='|' employees.txt
Employee Name| Age| Gender
John Davies| 35| M
Mary Fernandes| 29| F
Jacob Williams| 40| M
Sean Anderson| 25| M
Nick Jones| 42| M
Diana Richardson| 29| F

4. Do not Display Certain Columns
   Just like above example, if we use --complement as an option, cut command will display all the
   fields, but the specified field.
   Example:
$ cut -d ',' --complement -f 6 employees.txt
Employee ID, Employee Name, Age, Gender, Department
101, John Davies, 35, M, Finance
102, Mary Fernandes, 29, F, Human Resources
103, Jacob Williams, 40, M, Sales
104, Sean Anderson, 25, M, Production
105, Nick Jones, 42, M, Finance
106, Diana Richardson, 29, F, Finance

---
