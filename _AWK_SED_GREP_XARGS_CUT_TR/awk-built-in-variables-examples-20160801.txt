filename: awk_built-in-variables-examples_20160801.txt
http://www.tecmint.com/awk-built-in-variables-examples/

Learn How to Use Awk Built-in Variables – Part 10

   As we uncover the section of Awk features, in this part of the series, we shall walk through the
   concept of built-in variables in Awk. There are two types of variables you can use in Awk, these are;
   user-defined variables, which we covered in [63]Part 8 and built-in variables.
   [64]Awk Built in Variables Examples Awk Built in Variables Examples

   Awk Built in Variables Examples

   Built-in variables have values already defined in Awk, but we can also carefully alter those values,
   the built-in variables include:
    1. FILENAME : current input file name( do not change variable name)
    2. FR : number of the current input line (that is input line 1, 2, 3… so on, do not change variable
       name)
    3. NF : number of fields in current input line (do not change variable name)
    4. OFS : output field separator
    5. FS : input field separator
    6. ORS : output record separator
    7. RS : input record separator

   Let us proceed to illustrate the use of some of the Awk built-in variables above:

   To read the filename of the current input file, you can use the FILENAME built-in variable as
   follows:
$ awk ' { print FILENAME } ' ~/domains.txt

   You will realize that, the filename is printed out for each input line, that is the default behavior
   of Awk when you use FILENAME built-in variable.

   Using NR to count the number of lines (records) in an input file, remember that, it also counts the
   empty lines, as we shall see in the example below.

   When we view the file domains.txt using [66]cat command, it contains 14 lines with text and empty 2
   lines:
$ cat ~/domains.txt

$ awk ' END { print "Number of records in file is: ", NR } ' ~/domains.txt

   To count the number of fields in a record or line, we use the NR built-in variable as follows:
$ cat ~/names.txt

$ awk '{ print "Record:",NR,"has",NF,"fields" ; }' ~/names.txt

   Next, you can also specify an input field separator using the FS built-in variable, it defines how
   Awk divides input lines into fields.

   The default value for FS is space and tab, but we can change the value of FS to any character that
   will instruct Awk to divide input lines accordingly.

   There are two methods to do this:
    1. one method is to use the FS built-in variable
    2. and the second is to invoke the -F Awk option

   Consider the file /etc/passwd on a Linux system, the fields in this file are divided using the :
   character, so we can specify it as the new input field separator when we want to filter out certain
   fields as in the following examples:

   We can use the -F option as follows:
$ awk -F':' '{ print $1, $4 ;}' /etc/passwd

   Optionally, we can also take advantage of the FS built-in variable as below:
$ awk ' BEGIN {  FS=“:” ; }  { print $1, $4  ; } ' /etc/passwd

   To specify an output field separator, use the OFS built-in variable, it defines how the output fields
   will be separated using the character we use as in the example below:
$ awk -F':' ' BEGIN { OFS="==>" ;} { print $1, $4 ;}' /etc/passwd

   In this Part 10, we have explored the idea of using Awk built-in variables which come with predefined
   values. But we can also change these values, though, it is not recommended to do so unless you know
   what you are doing, with adequate understanding.

   After this, we shall progress to cover how we can use shell variables in Awk command operations,
   therefore, stay connected to Tecmint.
