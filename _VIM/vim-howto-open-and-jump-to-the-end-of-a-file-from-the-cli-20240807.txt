filename: vim_howto-open-and-jump-to-the-end-of-a-file-from-the-cli_20240807.txt
https://herrbischoff.com/2024/08/vim-how-to-open-and-jump-to-the-end-of-a-file-from-the-command-line/

Vim: How to Open and Jump to the End of a File From the Command Line
August 5 2024

   This is something that tripped me up for a bit, until I realised again that the :normal command
   exists. Once you get that, it's trivial.
$> vim "+normal G\$" file.txt

   As per the Vim help:
:norm[al][!] {commands}                 :norm :normal
    Execute Normal mode commands {commands}.  This makes
    it possible to execute Normal mode commands typed on
    the command-line.  {commands} are executed like they
    are typed.  For undo all commands are undone together.
    Execution stops when an error is encountered.

    If the [!] is given, mappings will not be used.
    Without it, when this command is called from a
    non-remappable mapping (|:noremap|), the argument can
    be mapped anyway.

    {commands} should be a complete command.  If
    {commands} does not finish a command, the last one
    will be aborted as if <Esc> or <C-C> was typed.
    This implies that an insert command must be completed
    (to start Insert mode, see |:startinsert|).  A ":"
    command must be completed as well.  And you can't use
    "Q" or "gQ" to start Ex mode.

    The display is not updated while ":normal" is busy.

    {commands} cannot start with a space.  Put a count of
    1 (one) before it, "1 " is one space.

    This command cannot be followed by another command,
    since any '|' is considered part of the command.

    This command can be used recursively, but the depth is
    limited by 'maxmapdepth'.

    An alternative is to use |:execute|, which uses an
    expression as argument.  This allows the use of
    printable characters to represent special characters.

    Example:
        :exe "normal \<c-w>\<c-w>"


---

