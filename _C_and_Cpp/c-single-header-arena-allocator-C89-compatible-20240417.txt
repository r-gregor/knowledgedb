filename: c_single-header-arena-allocator-C89-compatible_20240417.txt
https://github.com/ccgargantua/arena-allocator

Super small, simple, and C89-compliant single-header arena "allocator".

Arena Allocator
   Single-header arena allocator. C89 Compatible.

About

Arena Allocators
   Arena allocators are a simple way to achieve easier, faster, and safer dynamic memory management by
   allowing multiple allocations to be freed as a group. This is done by allocating memory in large
   regions and then distributing portions of that memory as needed, reducing the amount of malloc calls
   (which are slow compared to simple pointer arithmetic).

   When you destroy the arena you also free it and all of its contents, reducing the amount of free
   calls which are also slow. Going further, you can clear arenas by simply resetting their memory
   pointers to 0, allowing you to reuse them and eliminating the need for even more malloc's and free's.

C89 Compliance
   I'll keep this short. I am maintaining C89 compliance for fun, not because I use it. I personally am
   a C11 enjoyer. If you think C89 is the only way, well, good for you! But you're wrong.

Single-Header Libraries
   Whenever I share this project with other programmers, one of the most common responses I receive is
   something along the lines of: You should NEVER put implementation/logic code in a header file! I take
   issue with this statement for three reasons...
    1. It shows that an outdated and, by consequence, harmful construct is still being enforced in the
       education system, which is where said construct is usually introduced.
    2. Very rarely does the person making this statement have an actual reason for believing it. Does
       this person ever think about why they should "NEVER put implementation/logic code in a header
       file"? Simply regurgitating what they've heard without any basis for why they chose to agree with
       it does not help me in any way, and this person should not expect me to just accept it as they
       have done.
    3. The largest and most valid criticism of header-only/single-header libraries is that a change to
       the header requires re-compilation of all files that include it. In the case of my project,
       making changes to arena.h, even though the actual implementation is only contained in the
       translation unit that #define's the ARENA_IMPLEMENTATION macro, will result in the rebuild of all
       files that include it. The solution? Once arena.h is in the desired state, stop making changes!

   Linking is sluggish and complicated. Many beginners often times struggle with learning the linking
   process, and they are also the biggest culprit when it comes to writing unsafe code. This alone is
   enough reason for me to make this arena allocator a header-only library. My code (in its current
   state) is very small, roughly 300 lines. Why would I make you build and link such a small
   implementation when you could simply #include it once and start using it out of the box? If you
   really have a problem with it, this allocator in the single-header format does not prevent you from
   following the source+header construct if you so desire. Heck, feel free to fork it and make it
   source+header, it's open source for a reason!

Disclaimer
   This does not implement a kernel-level allocator, but instead wraps malloc and free (standard library
   or custom, your choice).

Usage
   Documentation for the arena allocator can all be found in arena.h. There is a comment at the top of
   the header file with quick instructions for usage for your convenience.

Including
   For one file in one translation unit, you need the following:
#define ARENA_IMPLEMENTATION
#include "arena.h"

   From that point, other files in other translation units can simply #include "arena.h" normally. There
   are additional macros you can define/use.

Types
   There are two structs defined in arena.h. This lists each one along with its members.
     * Arena_Allocation The data structure for an arena allocation. Available only when ARENA_DEBUG is
       defined.
          + size_t index The index in the arena in which the beginning of the allocation is located.
          + size_t size The size of the memory allocated to this allocation in bytes.
          + char *pointer The pointer associated for the allocation.
          + struct Arena_Allocation_s *next The next allocation in the linked list.
     * Arena The data structure for an arena.
          + char *region The region of allocated memory.
          + size_t index The index of the region for the next pointer to be distributed.
          + size_t size The size of memory allocated to the arena in bytes.
          + unsigned long allocations The number of arena allocations that have been made. Only
            available when ARENA_DEBUG is defined.
          + Arena_Allocation *head_allocation The first allocation made in the arena (used for a linked
            list). Only available when ARENA_DEBUG is defined.

Functions and macros
/*
Allocate and return a pointer to memory to the arena
with a region with the specified size. Providing a
size of zero results in a failure.

Parameters:
  size_t size    |    The size (in bytes) of the arena
                      memory region.
Return:
  Pointer to arena on success, NULL on failure
*/
Arena* arena_create(size_t size);


/*
Return a pointer to a portion of specified size of the
specified arena's region. Nothing will restrict you
from allocating more memory than you specified, so be
mindful of your memory (as you should anyways) or you
will get some hard-to-track bugs. By default, memory is
aligned by alignof(size_t), but you can change this by
#defining ARENA_DEFAULT_ALIGNMENT before #include'ing
arena.h. Providing a size of zero results in a failure.

Parameters:
  Arena *arena    |    The arena of which the pointer
                       from the region will be
                       distributed
  size_t size     |    The size (in bytes) of
                       allocated memory planned to be
                       used.
Return:
  Pointer to arena region segment on success, NULL on
  failure.
*/
ARENA_INLINE void* arena_alloc(Arena *arena, size_t size);


/*
Same as arena_alloc, except you can specify a memory
alignment for allocations.

Return a pointer to a portion of specified size of the
specified arena's region. Nothing will restrict you
from allocating more memory than you specified, so be
mindful of your memory (as you should anyways) or you
will get some hard-to-track bugs. Providing a size of
zero results in a failure.

Parameters:
  Arena *arena              |    The arena of which the pointer
                                 from the region will be
                                 distributed
  size_t size               |    The size (in bytes) of
                                 allocated memory planned to be
                                 used.
  unsigned int alignment    |    Alignment (in bytes) for each
                                 memory allocation.
Return:
  Pointer to arena region segment on success, NULL on
  failure.
*/
void* arena_alloc_aligned(Arena *arena, size_t size, unsigned int alignment);


/*
Copy the memory contents of one arena to another.

Parameters:
  Arena *src     |    The arena being copied, the source.
  Arena *dest    |    The arena being copied to. Must be created/allocated
                      already.

Return:
  Number of bytes copied.
*/
ARENA_INLINE size_t arena_copy(Arena *dest, Arena *src);


/*
Reset the pointer to the arena region to the beginning
of the allocation. Allows reuse of the memory without
realloc or frees.

Parameters:
  Arena *arena    |    The arena to be cleared.
*/
ARENA_INLINE void arena_clear(Arena* arena);


/*
Free the memory allocated for the entire arena region.

Parameters:
  Arena *arena    |    The arena to be destroyed.
*/
ARENA_INLINE void arena_destroy(Arena *arena);


/*
Returns a pointer to the allocation struct associated
with a pointer to a segment in the specified arena's
region.

Parameters:
  Arena *arena    |    The arena whose region should
                       have a portion pointed to by
                       ptr.
  void *ptr       |    The ptr being searched for
                       within the arena in order to
                       find an allocation struct
                       associated with it.
*/
Arena_Allocation* arena_get_allocation_struct(Arena *arena, void *ptr);


/*
Adds an arena allocation to the arena's linked list of
allocations under debug.

Parameters:
  Arena *arena    |    The arena whose allocation list
                       should be added to
  size_t size     |    The size of the allocation being
                       added.
*/
void arena_add_allocation(Arena *arena, size_t size);


/*
Deletes the arena's linked list of allocations under
debug.

Parameters:
  Arena *arena    |    The arena whose allocation list
                       is being deleted.
*/
void arena_delete_allocation_list(Arena *arena);

   In your code, you can define some optional macros. ARENA_MALLOC, ARENA_FREE and ARENA_MEMCPY can be
   assigned to alternative malloc-like, free-like, and memcpy-like functions respectively, and arena.h
   will use them in place of standard library functions. You can access additional debug functionality
   for keeping track of allocations by defining ARENA_DEBUG. Finally, you can also specify a default
   value for allocation alignment by defining a value for ARENA_DEFAULT_ALIGNMENT. See below for
   examples.
// All of these are optional

// Replace standard library functions
#define ARENA_MALLOC <stdlib_malloc_like_allocator>
#define ARENA_FREE <stdlib_free_like_deallocator>
#define ARENA_MEMCPY <stdlib_memcpy_like_copier>

// for debug functionality:
#define ARENA_DEBUG

// If you would like to change the default alignment for
// allocations:
#define ARENA_DEFAULT_ALIGNMENT <alignment_value>

   There is also a macro for determining alignment of types. Like everything else, it is also
   C89-friendly, although when compiling under C11 it will use stdalign.h's alignof.
ARENA_ALIGNOF(type) // Gives alignment of `type`

Compatibility
   The code was written to build with any compiler that supports the C89 standard and run on any
   platform. However, there are some issues with building on Windows with the Makefile. Please read all
   of the below information.

Compilers
   The tests and examples have been compiled and successfully run under the following compilers and
   versions:
     * Clang 17
     * GCC 13.2
     * tcc 0.9.27
     * MSVC 17.8

Operating Systems
   The tests and examples were compiled and successfully run on the following operating systems:
     * Ubuntu 22.04
     * Windows 10

   NOTE The Makefile currently has not been configured to work on Windows when running $ make test due
   to the use of valgrind and the absense of .exe extensions. This should be a simple fix and is on my
   TODO list (feel free to open an issue and fix this yourself!).

Modifications to arena.h
   At the moment there is no documentation for the code style, but it should be relatively simple enough
   to pick up on through reading existing code for most things. If you are having trouble, feel free to
   open an issue for a FR. If it already exists, comment on it describing what you are confused by.
     * If you modify arena.h whatsoever, you must run the tests. See the next section.
     * If you add a feature within arena.h, you must create an adequate test or tests within test.c.
     * If you add a feature within arena.h, you must should an adequate example in code_examples/ and
       add it to the makefile, but it is not required.

Testing
   If you change arena.h whatsoever, run the tests before opening a PR. If you open a PR with
   modifictions to the code and the tests don't all pass, make a comment on your PR stating which test
   you believe is wrong and is preventing you from passing all of the tests. If any test fails and your
   PR doesn't have a comment that claims to correct a failed test, your PR will be ignored closed.

   Outside of addressing bugs and feature requests, fulfilling a feature request or bug fix for
   functionality within arena.h permits modifying or adding relevant testing code within test.c, and you
   must do so if you want your PR to be acknowledged. There is documentation for testing code within
   test.c at the top of the file in the form of comments.

   The tests must also pass through valgrind leak-free, and arena.h must be C89 compliant. You should
   check this using the Makefile, but if for some reason you can't or don't want to, compile test.c with
-Werror -Wall -Wextra -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations \
-Wdeclaration-after-statement

   And for compliance, compile test_compliance.c with
-pedantic -std=c89 -Werror -Wall -Wextra -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes \
-Wmissing-declarations -Wdeclaration-after-statement

   As I said, you can do all of this with the Makefile
$> make test

Code Style
     * Identifiers
          + Variables should be lowercase and snake case, eg variable_name. For pointers, the asterisk
            (*) should be attached to the variable name, not the type, eg type *variable_name.
          + Functions, like variables, should be lowercase and snake case, eg type function_name(p1, p2,
            ...). In the case of pointers, the asterisk (*) should be attached to the type for density,
            eg type* function_name(p1, p2, ...). Functions should have a forward declaration with a
            comment for documentation above it around the top of the file, make sure the order relative
            to other functions is consistent.
          + Struct, enum, and union identifiers should be pascal case, eg struct StructName. They should
            be typedef'd and located around the top of the header file.
          + Macros should be all caps and snakecase, beginning with ARENA_, eg ARENA_MACRO_NAME. Please
            avoid adding macros without consulting me first. Feel free to make changes to existing
            macros, though.
     * White space is based on relevance of a line of code to those around it. If you don't understand
       what these points mean, please look at the code. It should be formatted as follows:
          + A single newline separating closely related code.
          + Two newlines separating unrelated code within the same scope or tag type.
          + Three newlines separating code within different function scopes, tag types, and blocks of
            preprocessor directives.
     * Error checking should be done whenever possible and mimic the behavior of standard library
       implementations, such as returning NULL on error in functions that return pointers or returning
       integer error values from integer functions. You should use early error checking, which means
       checking for errors as soon as they could be produced, eg. checking for a NULL returned after a
       failed malloc call.
     * Comments should describe why you did something, not what it is that you did. In other words, your
       code should be self-explanatory. Documentation for functions in the form of comments should be
       located above the function in the following format:

/*
Description of function, description of function description of function.
Description of function description of function, description of function
description of function.

Parameters:
  paramter1_type paramter1_name    |    Description of parameter 1, description
                                        of parameter one description of paramter
                                        1.
  paramter2_type paramter2_name    |    Description of parameter 2, description
                                        of parameter one description of paramter
                                        2.
Return:
  Description of return value, description of return value description of return value.
*/



---
arena.h

/*
   See README.md for more in-depth usage docs and an
   example.

   QUICK USAGE:
   One file in one translation unit must have the
   following before including "arena.h", replacing
   the macro values appropriately when desired.

   ```
#define ARENA_IMPLEMENTATION

// All of these are optional
#define ARENA_MALLOC <stdlib_malloc_like_allocator>
#define ARENA_FREE <stdlib_free_like_deallocator>
#define ARENA_MEMCPY <stdlib_memcpy_like_copier>
#define ARENA_REALLOC <stdlib_realloc_like_reallocator>

// for debug functionality, you can also do:
#define ARENA_DEBUG

// If you would like to change the default alignment for
// allocations, you can define:
#define ARENA_DEFAULT_ALIGNMENT <alignment_value>
```

There is also a C89-friendly macro for
determining the alignment of a type.
```
ARENA_ALIGNOF(type)
```
This evaluates to C11 alignof(type) when compiled
for C11 or later, but also allows the same
behavior for C89 and C99

After doing that, you can `#include "arena.h"`
And for any other file in any other translation
unit in the build, you can `#include "arena.h"`
like you normally would by itself.
 */


#ifndef ARENA_H
#define ARENA_H


#include <stddef.h>


#if __STDC_VERSION__ >= 199901L && !defined(ARENA_DEBUG)
#define ARENA_INLINE extern inline
#else
#define ARENA_INLINE
#endif /* __STDC_VERSION__ >= 199901L */


#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#define ARENA_ALIGNOF(type) alignof(type)
#else
#define ARENA_ALIGNOF(type) offsetof(struct { char c; type d; }, d)
#endif


#ifndef ARENA_DEFAULT_ALIGNMENT
#define ARENA_DEFAULT_ALIGNMENT ARENA_ALIGNOF(size_t)
#endif


#ifdef ARENA_DEBUG

/* We are debugging this arena allocator, not your implementation of malloc/free */
#include <stdlib.h>

typedef struct Arena_Allocation_s {
	size_t index;
	size_t size;
	char *pointer;
	struct Arena_Allocation_s *next;
} Arena_Allocation;

#endif /* ARENA_DEBUG */


typedef struct {
	char *region;
	size_t index;
	size_t size;

#ifdef ARENA_DEBUG
	unsigned long allocations;
	Arena_Allocation *head_allocation;
#endif /* ARENA_DEBUG */
} Arena;


/*
   Allocate and return a pointer to memory to the arena
   with a region with the specified size. Providing a
   size of zero results in a failure.

Parameters:
size_t size    |    The size (in bytes) of the arena
memory region.
Return:
Pointer to arena on success, NULL on failure
 */
Arena* arena_create(size_t size);


/*
   Reallocate an arena's region to a greater or equal size.
   Returns the realloc'd arena on success, and NULL on failure.
   Passing a null arena, providing a size less than or equal
   to the arena's current size, or a failed realloc call will
   all result in returning NULL.

   Parameters
   Arena *arena    |    The arena whose region is being
   realloc'd
   size_t size     |    The size the arena's region is
   being changed to
 */
Arena* arena_expand(Arena *arena, size_t size);


/*
   Return a pointer to a portion of specified size of the
   specified arena's region. Nothing will restrict you
   from allocating more memory than you specified, so be
   mindful of your memory (as you should anyways) or you
   will get some hard-to-track bugs. By default, memory is
   aligned by alignof(size_t), but you can change this by
#defining ARENA_DEFAULT_ALIGNMENT before #include'ing
arena.h. Providing a size of zero results in a failure.

Parameters:
Arena *arena    |    The arena of which the pointer
from the region will be
distributed
size_t size     |    The size (in bytes) of
allocated memory planned to be
used.
Return:
Pointer to arena region segment on success, NULL on
failure.
 */
ARENA_INLINE void* arena_alloc(Arena *arena, size_t size);


/*
   Same as arena_alloc, except you can specify a memory
   alignment for allocations.

   Return a pointer to a portion of specified size of the
   specified arena's region. Nothing will restrict you
   from allocating more memory than you specified, so be
   mindful of your memory (as you should anyways) or you
   will get some hard-to-track bugs. Providing a size of
   zero results in a failure.

Parameters:
Arena *arena              |    The arena of which the pointer
from the region will be
distributed
size_t size               |    The size (in bytes) of
allocated memory planned to be
used.
unsigned int alignment    |    Alignment (in bytes) for each
memory allocation.
Return:
Pointer to arena region segment on success, NULL on
failure.
 */
void* arena_alloc_aligned(Arena *arena, size_t size, unsigned int alignment);


/*
   Copy the memory contents of one arena to another.

Parameters:
Arena *src     |    The arena being copied, the source.
Arena *dest    |    The arena being copied to. Must be created/allocated
already.

Return:
Number of bytes copied.
 */
ARENA_INLINE size_t arena_copy(Arena *dest, Arena *src);


/*
   Reset the pointer to the arena region to the beginning
   of the allocation. Allows reuse of the memory without
   realloc or frees.

Parameters:
Arena *arena    |    The arena to be cleared.
 */
ARENA_INLINE void arena_clear(Arena* arena);


/*
   Free the memory allocated for the entire arena region.

Parameters:
Arena *arena    |    The arena to be destroyed.
 */
ARENA_INLINE void arena_destroy(Arena *arena);


#ifdef ARENA_DEBUG

/*
   Returns a pointer to the allocation struct associated
   with a pointer to a segment in the specified arena's
   region.

Parameters:
Arena *arena    |    The arena whose region should
have a portion pointed to by
ptr.
void *ptr       |    The ptr being searched for
within the arena in order to
find an allocation struct
associated with it.
 */
Arena_Allocation* arena_get_allocation_struct(Arena *arena, void *ptr);


/*
   Adds an arena allocation to the arena's linked list of
   allocations under debug.

Parameters:
Arena *arena    |    The arena whose allocation list
should be added to
size_t size     |    The size of the allocation being
added.
 */
void arena_add_allocation(Arena *arena, size_t size);


/*
   Deletes the arena's linked list of allocations under
   debug.

Parameters:
Arena *arena    |    The arena whose allocation list
is being deleted.
 */
void arena_delete_allocation_list(Arena *arena);

#endif /* ARENA_DEBUG */


#ifdef ARENA_IMPLEMENTATION


#ifndef ARENA_MALLOC
#include <stdlib.h>
#define ARENA_MALLOC malloc
#endif /* !ARENA_MALLOC */

#ifndef ARENA_FREE
#include <stdlib.h>
#define ARENA_FREE free
#endif /* !ARENA_FREE */

#ifndef ARENA_REALLOC
#include <stdlib.h>
#define ARENA_REALLOC realloc
#endif

#ifndef ARENA_MEMCPY
#include <string.h>
#define ARENA_MEMCPY memcpy
#endif /* !ARENA_MEMCPY */


Arena* arena_create(size_t size) {
	Arena *arena;

	if(size == 0) {
		return NULL;
	}

	/* A malloc of 0 is implementation defined, so the above check is necessary */
	arena = ARENA_MALLOC(sizeof(Arena));
	if(arena == NULL) {
		return NULL;
	}

	arena->region = ARENA_MALLOC(size);
	if(arena->region == NULL) {
		ARENA_FREE(arena);
		return NULL;
	}

	arena->index = 0;
	arena->size = size;

#ifdef ARENA_DEBUG
	arena->head_allocation = NULL;
	arena->allocations = 0;
#endif /* ARENA_DEBUG */

	return arena;
}


Arena* arena_expand(Arena *arena, size_t size) {
	if(arena == NULL || size <= arena->size) {
		return NULL;
	}

	arena->region = ARENA_REALLOC(arena->region, size);
	if(arena->region == NULL) {
		return NULL;
	}

	arena->size = size;
	return arena;
}


ARENA_INLINE void* arena_alloc(Arena *arena, size_t size) {
	return arena_alloc_aligned(arena, size, ARENA_DEFAULT_ALIGNMENT);
}


void* arena_alloc_aligned(Arena *arena, size_t size, unsigned int alignment) {
	unsigned int offset;

	if(size == 0) {
		return NULL;
	}

	if(arena == NULL || arena->region == NULL) {
		return NULL;
	}

	if(alignment != 0) {
		offset = (size_t)(arena->region + arena->index) % alignment;
		if(offset > 0) {
			arena->index = arena->index - offset + alignment;
		}
	}
	else
	{
		offset = 0;
	}

	if(arena->size - (arena->index + offset) < size) {
		return NULL;
	}

#ifdef ARENA_DEBUG
	arena_add_allocation(arena, size);
#endif /* ARENA_DEBUG */

	arena->index += size;
	return arena->region + (arena->index - size);
}


ARENA_INLINE size_t arena_copy(Arena *dest, Arena *src) {
	size_t bytes;

	if(dest == NULL || src == NULL) {
		return 0;
	}

	if(src->index < dest->size) {
		bytes = src->index;
	}
	else
	{
		bytes = dest->size;
	}

	ARENA_MEMCPY(dest->region, src->region, bytes);
	dest->index = bytes;

	return bytes;
}


ARENA_INLINE void arena_clear(Arena *arena) {
	if(arena == NULL) {
		return;
	}

	arena->index = 0;

#ifdef ARENA_DEBUG
	arena_delete_allocation_list(arena);
#endif /* ARENA_DEBUG */
}


ARENA_INLINE void arena_destroy(Arena *arena) {
	if(arena == NULL) {
		return;
	}

#ifdef ARENA_DEBUG
	arena_delete_allocation_list(arena);
#endif /* ARENA_DEBUG */

	if(arena->region != NULL) {
		ARENA_FREE(arena->region);
	}

	ARENA_FREE(arena);
}


#ifdef ARENA_DEBUG

Arena_Allocation* arena_get_allocation_struct(Arena *arena, void *ptr) {
	Arena_Allocation *current;

	if(arena == NULL || ptr == NULL) {
		return NULL;
	}

	current = arena->head_allocation;
	while(current != NULL) {
		if(current->pointer == (char *)ptr) {
			return current;
		}
		current = current->next;
	}

	return NULL;
}


void arena_add_allocation(Arena *arena, size_t size) {
	if(arena == NULL) {
		return;
	}

	if(arena->head_allocation == NULL) {
		arena->head_allocation = malloc(sizeof(Arena_Allocation));
		arena->head_allocation->index = arena->index;
		arena->head_allocation->size = size;
		arena->head_allocation->pointer = arena->region + arena->index;
		arena->head_allocation->next = NULL;
	}
	else
	{
		Arena_Allocation *current = arena->head_allocation;
		while(current->next != NULL) {
			current = current->next;
		}

		current->next = malloc(sizeof(Arena_Allocation));
		current->next->index = arena->index;
		current->next->size = size;
		current->next->pointer = arena->region + arena->index;
		current->next->next = NULL;
	}

	arena->allocations++;
}


void arena_delete_allocation_list(Arena *arena) {
	if(arena == NULL) {
		return;
	}

	while(arena->head_allocation != NULL) {
		Arena_Allocation *next = arena->head_allocation->next;
		free(arena->head_allocation);
		arena->head_allocation = next;
	}

	arena->allocations = 0;
	arena->head_allocation = NULL;
}

#endif /* ARENA_DEBUG */


#endif /* ARENA_IMPLEMENTATION */


#endif /* ARENA_H */


---
test.h

#ifndef TEST_H
#define TEST_H


#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int passed_tests = 0;
int total_tests = 0;
int temp_passed;
int temp_total;


#define BUFFER_SIZE 4096
char buffer[BUFFER_SIZE];
int buffer_index = 0;

#define REPORT(msg)                                  \
	buffer_index += snprintf(buffer + buffer_index,  \
			BUFFER_SIZE - buffer_index,              \
			"  FAILURE: '%s' at %s:%d\n",            \
			msg, __FILE__, __LINE__)

#define REPORT_FATAL(msg)                            \
	buffer_index += snprintf(buffer + buffer_index,  \
			BUFFER_SIZE - buffer_index,              \
			"  FATAL FAILURE: '%s' at %s:%d\n",      \
			msg, __FILE__, __LINE__)

#define TEST(exp, msg)      \
do                          \
{                           \
	if(!(exp))              \
	{                       \
		REPORT(msg);        \
	}                       \
	else                    \
	{                       \
		passed_tests++;     \
	}                       \
	total_tests++;          \
}while(0)

#define TEST_FATAL(exp, msg) do{if(!(exp)){REPORT_FATAL(msg);return;}}while(0)

#define TEST_NULL(a)                TEST(a == NULL,         #a " is not NULL")
#define TEST_NOT_NULL(a)            TEST(a != NULL,         #a " is NULL")
#define TEST_EQUAL(a, b)            TEST(a == b,            #a " does not equal " #b)

#define TEST_ARRAY_EQUAL(a, b, s)             \
do                                            \
{                                             \
	int i;                                    \
	total_tests++;                            \
	for(i = 0; i < s; i++)                    \
	{                                         \
		if(a[i] != b[i])                      \
		{                                     \
			REPORT(#a " does not equal " #b); \
			break;                            \
		}                                     \
	}                                         \
	passed_tests++;                           \
}while(0)

#define SUITE(suite, name)                                                                                   \
do                                                                                                           \
{                                                                                                            \
	temp_passed = passed_tests;                                                                              \
	temp_total = total_tests;                                                                                \
	suite();                                                                                                 \
	fprintf(stderr, "Passed %d/%d tests in '%s'\n", passed_tests-temp_passed, total_tests-temp_total, name); \
	fprintf(stderr, "%s", buffer);                                                                           \
	buffer_index = 0;                                                                                        \
	buffer[0] = '\0';                                                                                        \
} while(0)

#define ARENA_DEBUG
#define ARENA_IMPLEMENTATION
#define ARENA_SUPPRESS_MALLOC_WARN
#define ARENA_DEFAULT_ALIGNMENT 0
#include "arena.h"

#endif


---
test.c

//     Tests are contained in testing suite functions, the forware declarations
//     of which are bundled together. A testing suite function should exist for
//     each function within `arena.h`, and should be placed relative to where
//     the function they are testing is placed in regard to the functions around
//     it for both forward declarations, implementations, and `SUITE`s.
//
//     After implementing a testing suite, you should use the `SUITE` in
//     `main()`.
//
//     Within the testing suite, the following macros should be used:
//
//     TEST_FATAL(exp, desc)     | TEST_FATAL should be used whenever a failure
//                                 could cause future tests to crash the process.
//                                 If exp evaluates to false (0), the test executable
//                                 will abort completely and the desc string will be
//                                 printed.
//
//                                 EX/ An `arena_create` failing and returning NULL
//                                     could cause an access within the test to
//                                     segfault.
//
//     TEST_EQUAL(a, b)          | TEST_EQUAL will fail when a != b
//
//     TEST_NULL(a)              | TEST_NULL will fail when a != NULL
//
//     TEST_NOT_NULL(a)          | TEST_NOT_NULL will fail when a == NULL
//
//     TEST_ARRAY_EQUAL(a, b, s) | TEST_ARRAY_EQUAL will fail if any elements differ

#include "test.h"

void test_arena_create(void) {
	Arena *arena = arena_create(0);
	TEST_NULL(arena);
	arena = arena_create(32);
	TEST_FATAL(arena != NULL, "Arena was NULL after creation. Fatal.");
	TEST_FATAL(arena->region != NULL, "Arena region was NULL");
	TEST_EQUAL(arena->allocations, 0);
	TEST_NULL(arena->head_allocation);
	TEST_EQUAL(arena->size, 32);
	TEST_EQUAL(arena->index, 0);
	arena_destroy(arena);
}

void test_arena_expand(void) {
	Arena *arena = arena_create(6);
	char *ptr = arena_alloc(arena, 6);
	memcpy(ptr, "Hello\0", 6);
	arena = arena_expand(arena, 12);
	TEST_EQUAL(arena->size, 12);
	TEST_EQUAL(arena->index, 6);
	TEST_ARRAY_EQUAL(arena->region, "Hello\0", 6);

	TEST_NULL(arena_expand(NULL, 0));
	TEST_NULL(arena_expand(arena, 0));
	TEST_NULL(arena_expand(NULL, 13));
	TEST_NULL(arena_expand(arena, 12));

	arena_destroy(arena);
}

void test_arena_alloc(void) {
	Arena *arena = arena_create(13 + sizeof(long) * 3);
	char *char_array = arena_alloc(arena, 13);
	long *long_array;
	long expected_long_array[3] = {999, 9999, 99999};
	char *should_not_be_allocated;

	TEST_NULL(arena_alloc(arena, 0));

	TEST_FATAL(char_array != NULL, "char array allocated from arena was NULL.");

	memcpy(char_array, "Hello, world!", 13);
	TEST_ARRAY_EQUAL(char_array, "Hello, world!", 13);
	TEST_EQUAL(arena->index, 13);

	long_array = arena_alloc(arena, sizeof(long) * 3);
	TEST_FATAL(long_array != NULL, "long array allocated from arena was NULL.");

	memcpy(long_array, expected_long_array, sizeof(long) * 3);
	TEST_ARRAY_EQUAL(long_array, expected_long_array, 3);
	TEST_EQUAL(arena->index, arena->size);

	/* Failures */

	TEST_NULL(arena_alloc(NULL, 0));

	should_not_be_allocated = arena_alloc(arena, 1);
	TEST_NULL(should_not_be_allocated);

	arena_destroy(arena);
}

void test_arena_alloc_aligned(void) {
	Arena *arena = arena_create(64);

	TEST_NULL(arena_alloc_aligned(arena, 0, 0));

	arena_alloc_aligned(arena, 8, 4);
	TEST_EQUAL(arena->index, 8);

	arena_alloc_aligned(arena, 3, 4);
	TEST_EQUAL(arena->index, 11);

	arena_alloc_aligned(arena, 12, 4);
	TEST_EQUAL(arena->index, 24);

	arena_alloc_aligned(arena, 3, 4);
	TEST_EQUAL(arena->index, 27);

	arena_alloc_aligned(arena, 1, 4);
	TEST_EQUAL(arena->index, 29);

	TEST_NULL(arena_alloc_aligned(arena, 100, 0));

	arena_destroy(arena);
}

void test_arena_copy(void) {
	Arena *arena_src = arena_create(1024);
	Arena *arena_dest = arena_create(500);
	char *src_array;

	TEST_FATAL(arena_src != NULL, "Source arena creation failed!");
	TEST_FATAL(arena_dest != NULL, "Destination arena creation failed!");

	TEST_EQUAL(arena_copy(NULL, arena_src), 0);
	TEST_EQUAL(arena_copy(arena_dest, NULL), 0);
	TEST_EQUAL(arena_copy(arena_dest, arena_src), 0);

	src_array = arena_alloc(arena_src, 3);
	TEST_FATAL(src_array != NULL, "Source arena allocation failed!");
	src_array[0] = 'a';
	src_array[1] = 'b';
	src_array[2] = 'c';
	TEST_EQUAL(arena_copy(arena_dest, arena_src), 3);
	TEST_ARRAY_EQUAL(arena_dest->region, arena_src->region, 3);
	TEST_EQUAL(arena_dest->index, 3);

	arena_src->index = arena_src->size;
	TEST_EQUAL(arena_copy(arena_dest, arena_src), arena_dest->size);
	TEST_EQUAL(arena_dest->size, arena_dest->index);

	arena_destroy(arena_src);
	arena_destroy(arena_dest);
}

void test_arena_clear(void) {
	Arena *arena = arena_create(10);
	arena->index = 5;
	arena_clear(arena);
	TEST_EQUAL(arena->index, 0);
	arena_destroy(arena);
}

void test_arena_get_allocation_struct(void) {
	Arena *arena = arena_create(64);
	char *ptr = arena_alloc(arena, 8);
	char fake = 'a';
	Arena_Allocation *allocation_struct = arena_get_allocation_struct(arena, ptr);

	TEST_NULL(arena_get_allocation_struct(NULL, ptr));
	TEST_NULL(arena_get_allocation_struct(arena, NULL));

	TEST_FATAL(arena != NULL, "Arena was NULL after creation.");

	TEST_FATAL(ptr != NULL, "Pointer was NULL after creation.");

	TEST_FATAL(allocation_struct != NULL, "Allocation struct could not be found through pointer comparison.");
	TEST_EQUAL(allocation_struct->index, 0);
	TEST_EQUAL(allocation_struct->size, 8);
	TEST_NULL(arena_get_allocation_struct(arena, &fake));

	arena_destroy(arena);
}

void test_arena_add_allocation(void) {
	Arena *arena = arena_create(1024);

	arena_alloc(arena, 10);
	TEST_FATAL(arena->head_allocation != NULL, "Arena head allocation was NULL after first allocation.");
	TEST_EQUAL(arena->head_allocation->size, 10);
	TEST_EQUAL(arena->head_allocation->next, NULL);
	TEST_EQUAL(arena->allocations, 1);

	arena_alloc(arena, 15);
	TEST_FATAL(arena->head_allocation->next != NULL, "Arena end allocation was NULL after first allocation.");
	TEST_EQUAL(arena->head_allocation->next->size, 15);
	TEST_EQUAL(arena->head_allocation->next->next, NULL);
	TEST_EQUAL(arena->allocations, 2);

	arena_alloc(arena, 1);
	TEST_FATAL(arena->head_allocation->next->next != NULL, "Arena end allocation was NULL after first allocation.");
	TEST_EQUAL(arena->head_allocation->next->next->size, 1);
	TEST_EQUAL(arena->head_allocation->next->next->next, NULL);
	TEST_EQUAL(arena->allocations, 3);

	arena_destroy(arena);
}

void test_arena_delete_allocation_list(void) {
	Arena *arena = arena_create(1024);
	arena_alloc(arena, 10);
	arena_alloc(arena, 15);
	arena_alloc(arena, 1);
	arena_delete_allocation_list(arena);
	TEST_NULL(arena->head_allocation);
	TEST_EQUAL(arena->allocations, 0);

	arena_destroy(arena);
}

int main(void) {
	SUITE(test_arena_create, "Arena creation suite");
	SUITE(test_arena_expand, "Arena reallocation suite");
	SUITE(test_arena_alloc, "Arena unaligned allocation suite");
	SUITE(test_arena_alloc_aligned, "Arena aligned allocation suite");
	SUITE(test_arena_copy, "Arena copy suite");
	SUITE(test_arena_clear, "Arena clearing suite");
	SUITE(test_arena_get_allocation_struct, "Arena debug method 'arena_get_allocation_struct' suite");
	SUITE(test_arena_add_allocation, "Arena debug method 'arena_add_allocation' suite");
	SUITE(test_arena_delete_allocation_list, "Arena debug method 'arena_delete_allocation_list' suite");

	fprintf(stderr, "\nFinished. Passed %d/%d tests.\n", passed_tests, total_tests);

	return 0;
}


---
test_compliance.c

/* This will simply ensure that arena.h complies with C89 when built */

#define ARENA_IMPLEMENTATION
#include "arena.h"

int main(void) {
    return 0;
}


---

