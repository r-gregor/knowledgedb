filename: c_how-do-i-generate-random-numbers-between-32-to-32-or-64-to-64_20230907.txt
https://stackoverflow.com/questions/53221396/c-how-do-i-generate-random-numbers-between-32-to-32-or-64-to-64-and-excludin

C++ how do I generate random numbers between -32 to 32 or -64 to 64 and excluding the value zero?

   how do I generate random numbers between -32 to 32 or -64 to 64 and excluding the value zero, and
   duplicates in array? I'm trying to generate it as efficiently as possible

***
int signext = (rand() % 2) ? 1 : -1;
int x = (rand() % 64 + 1) * signext;  // random value from -64 to 64, excluding 0
int y = (rand() % 32 + 1) * signext;  // random value from -32 to 32, excluding 0

And it can be done with a single call to rand():

int x = rand() % 128;
x = ((x / 2) + 1) * ((x % 2) ? 1 : -1);

int y = rand() % 64;
y = ((x / 2) + 1) * ((x % 2) ? 1 : -1);

***
   It can be simply done by generating random numbers from the range 0,...,127 and then doing some
   arithmetic:

int r = rand() % 128 - 64;
if (r >= 0) r++;

   This will likely be faster than invoking PRNG multiple times. BTW, I would suggest to employ C++11
   random library instead of rand function.

   If you also need to check whether the resulting r is in some array, I suggest to sort this array
   first and then to try to find r inside with binary search. If it is found, simply skip that random
   number and generate another one.


---

