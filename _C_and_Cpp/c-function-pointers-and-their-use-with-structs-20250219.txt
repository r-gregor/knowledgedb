filename: c_function-pointers-and-their-use-with-structs_20250219.txt
https://towardsdev.com/function-pointers-and-their-use-with-structs-26639f37eb45

 Understanding Function Pointers

   In programming, pointers are commonly used to point to variables in memory. But did you know that
   pointers can also be used to point to blocks of code? This is where function pointers come into play.
   A function pointer is a pointer that points to a block of code in memory, specifically a function.
   Let's delve into the mechanics of function pointers and how to utilize them with structs.

   Let's start by looking at how regular pointers are declared:
int x = 3;
int *x_ptr = &x;

   Now, how can we declare a function pointer? Consider a function called sum that takes two arguments
   and returns their sum:

int sum(int x, int y) {
	return (x + y);
}

   Interestingly, the sum function itself is a function pointer. However, to explicitly declare a
   function pointer and store the sum function on it, you would do:

int (*Operation)(int, int);

   Breaking this down:
     * int: This is the return type of the function that the pointer will point to.
     * (*Operation): This is the function pointer declaration. The * indicates that Operation is a
       pointer to a function. The name Operation is the variable name for the function pointer.
     * (int, int): These are the parameter types that the functions pointed to by Operation are expected
       to accept.

   You can assign the sum function to the Operation variable:

int (*Operation)(int, int) = sum;

   and use operation instead of sum for calling this block of code

int x = 3, y = 5;
printf("%d", operation(x, y)); // output: 8
printf("%d", sum(x, y));       // output: 8

Using Function Pointers with Structs
   Imagine you want to select and execute a function based on user input (e.g., "sum" -> sum(x, y)).
   Using lengthy if conditions or switch cases can become cumbersome, especially as the number of
   functions increases. However, an elegant solution involves using an array of structs.

   Consider the following example:

typedef struct ops {
	char *input;
	int (*f)(int, int); // function pointer
} ops_f;

int main() {
	int x = 10, y = 5;
	char *input = "mul";

	ops_f ops[] = {
		{"sum", sum}, {"mul", mul}, {"div", div}, {"mod", mod}, {NULL, NULL}
	};

	int j = 0;
	while (ops[j].input) {
		if (strcmp(ops[j].input, input) == 0) // Check if input matches
			ops[j].f(x, y); // Execute the matched function
		j++;
	}

	return 0;
}

   Here's the breakdown:
     * We define a struct ops that contains a character pointer input (representing the function's name)
       and a function pointer f pointing to the respective function.
     * We create an array of ops_f structs, where each struct holds a function name and its
       corresponding function pointer.
     * We iterate through the array of structs and compare the input string with the user input. If a
       match is found, we execute the associated function using the function pointer.

   This approach makes it effortless to add more functions without adding extra lines of code. Just
   introduce a new struct to the array, and you're good to go!

   By combining function pointers and structs, you've created a flexible and maintainable system for
   dynamically selecting and executing functions based on user input. This technique is not only elegant
   but also paves the way for scalability and ease of maintenance in your codebase.

Conclusion
   Function pointers provide a powerful mechanism in programming, enabling you to point to blocks of
   code and dynamically select and execute functions. While regular pointers are used to reference
   variables in memory, function pointers allow you to reference functions themselves. By harnessing
   function pointers, you can build more flexible and extensible code structures.

   Utilizing function pointers with structs offers an elegant solution for dynamically selecting and
   executing functions based on user input or other runtime conditions. By encapsulating function
   pointers within a struct, you create a structured and organized way to manage various functions. This
   approach significantly reduces the need for lengthy if conditions or switch cases, making your code
   more concise, readable, and maintainable.

   In essence, the combination of function pointers and structs empowers you to build adaptable and
   scalable systems, accommodating future additions of functions without complex code modifications.
   This technique enhances code efficiency, encourages code reusability, and contributes to the overall
   robustness of your software applications.


---

