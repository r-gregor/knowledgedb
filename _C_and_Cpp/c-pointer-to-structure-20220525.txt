filename: c_pointer-to-structure_20220525.txt
https://www.scaler.com/topics/pointer-to-structure-in-c/

Pointer to Structure in C
9 Mar 2022

   Learn declaration of Pointer to Structure in C language.

Abstract
   As we know Pointer is a variable that stores the address of another variable of data types like int,
   float. Similarly, we can have Pointer to Structures, In which pointer variable point to the address
   of the user defined data types i.e. Structures. Structure in C is user-defined data type which is
   used to store heterogeneous data in contiguous manner.

Scope of the Article
	 * The Article defines what is Pointer and what is Structure.
	 * The article describes the declaration of Pointer to Structure in C language.
	 * The article contains some example codes for better understanding of pointer to structure.

Introduction
   Before Declaration of Pointer to Structures, let's First define what is pointer and structure in C
   language.

What is Pointer in C ?
   The Pointer is a variable, which points to the address of another variable having the same data type
   as that of the pointer variable. The image completely explains the basic pointer which is required
   for this article.

   basic pointer
   In this image, we have a variable named a that currently stores an int type value which is equal to
   44. Now we are curious to know what is the address of variable a ? To find out the address of
   variable a we defined a pointer variable named b which is the same type as of a. To store the address
   of a in b, we use AMPERSAND OPERATOR (&) i.e. b=&a And by DEFERENCE OPERATOR (*), we can easily find
   out the value store at an address as shown in the image.

What is Structure in C ?
   The Structure is User-defined data type which is a collection of heterogeneous data which means
   structure allows us to group different data types and to store them in a contiguous manner.

   Example

struct Employee{
	int id;
	char name[100];
	float salary;
};

What is Structure Pointer in C ?
   We have seen how to create structure in C language using struct keyword. So creating a pointer to a
   structure in C is known as Structure Pointer.

struct Student {
	int id;
	char name[40];
	int age;
};

   This is our structure for a student in which id is the student roll number , name is the student name
   and age is the student age.

   So how to create a structure pointer to student ?

   Syntax :

(struct keyword) (Name_of_struct) *(pointer_name)

   Note: No parenthesis in the above syntax. These are just added for better understanding.

struct Student *pointr;
// |        |        |
// |        |        |
// struct   |        pointer name
// keyword  |
//          name
//          of struct

   Example :

struct Employee {
	int id;
	char name[100];
	float salary;
};

// declare a pointer to Employee
struct Employee *ptr_to_structure ;

// ptr_to_structure can store the adress of variable
// of type struct Employee

struct Employee employee1;
ptr_to_structure = &employee1; // store the address of employee structure variable

   However, the declaration for a pointer to structure is only allocates memory for pointer NOT for
   structure. So accessing the member of structure we must allocate memory for structure using malloc()
   function and we could also give the address of the already declared structure variable to structure
   pointer.

Memory allocation using malloc() function in C
   malloc() function is the core function in C for memory allocation in C that takes a single integer
   argument defining the number of bytes to be allocated and returns the pointer to the first byte of
   allocated space. To allocate the memory for the struct object, we should call the sizeof() operator.

   See in example for better understanding.

// create a struct for Employee
struct Employee {
	int id;
	char name[100];
	float salary;
};

// allocates memory for Employee
// using malloc in C
struct Employee *ptr = (struct Employee *) malloc(sizeof(struct Employee));

// access member of struct
ptr->id ;  // refers to id of Employee
ptr->name; // refers to name

   So, here malloc allocates memory dynamically which means we can add struct blocks as many as we want.
   And it's the better way of allocating memory to user defined data structures.

Initialization of The Structure Pointer
Initialization during the time of the creation of pointer

struct Student {
	int id;
	char name[30];
	int age;
	char gender[15];
};

// create struct variable
struct Student student1;

// define a pointer with initialization
struct Student *ptr = &student1;

   The above piece of code is declared a pointer to structure as well as initialize it.

Initialization after creating Pointer :

struct Student *ptr; // pointer is declared
ptr = &student1; // pointer is initialised

   This is how we initialize a pointer to structure either time of creation or after creation. Both ways
   are considered correct.

Accessing Pointers to Structures (With Examples)
   To access members of structure using a pointer, we have two methods :
	 * Using Indirection Operator(*) and Dot (.) operator
	 * Using Arrow Operator (->)

  Using Indirection Operator (*) and Dot Operator (.)
   Indirection Operator is used to deference the value present at a particular memory address. And the
   dot operator is used to access the data members of a structure.

   Let's take an example for better understanding

struct Employee {
	int id;
	char name[100];
	int salary;
};

// create a object of a Employee
struct Employee employee1;

// lets create a pointer
struct Employee *ptr;

// points to employee
ptr = &employee1; // pointer store the adress of employee1

// assigning value to id name, salary of employee
// see the use of dot operator
employee1.id = 1;
employee1.salary = 10000;
strcpy(employee1.name , "Amandeep");

// use of indirection operator
(*ptr).name   // gives us name of employee1
(*ptr).id     //  gives us id of employee1
(*ptr).salary //  gives us salary of employee1

   let's understand the above piece of code. Here we create a data type that store information of an
   Employee. we create an object of Employee employee1 and a pointer ptr which points to the address of
   employee1 (according to line 14). So, according to the indirection operator, *ptr is same as
   employee1. which means *ptr can access the member of structure Employee followed by Dot operator.

   Therefore,

   (*ptr).name refers to the name of employee1. (*ptr).id refers to the id of employee1.

   Note: The brackets are important before Dot operator with ptr variable because dot operator has high
   precedence than indirection operator.

  Using Arrow Operator (->)
   To access the members of the structure we have another method ARROW OPERATOR METHOD. And using this
   operator, we could directly access the data members of struct and its don't need defrencing (see
   example 2).

   Syntax : pointer_name -> member_of_structure.

   Example :

struct Employee {
	int id;
	char name[100];
	float salary;
};

// lets create a pointer
struct Employee *ptr;

// accessing member of struct using -> operator be like\
ptr->id   // refers to the id of employee
ptr->name // refers to the name member

   This method is more intuitive and easy to use as well as understand. With this method code is more
   readable and understandable.

Dynamic memory allocation of Structures
   Let us understand how to store the information entered by the user Dynamically with the help of an
   example. Here dynamically means we can change the size of data structure at runtime.

   Example

#include<stdio.h>
#include<stdlib.h>

struct Student {
	int id;
	char name[20];
};

int main() {
	// create a pointer to struct
	struct Student *ptr;

	int noOfStudent;
	printf("Enter Number of student whose data you want to store : ");
	scanf("%d", &noOfStudent);

	//memory allocation for Students
	// using malloc function in C

	ptr = (struct Student *) malloc(noOfStudent * sizeof(struct Student));

	for(int i=0;i<noOfStudent;i++) {
		printf("Enter id and name of student : ");
		scanf("%d %s" , &(ptr + i) -> id, &(ptr + i)->name);
	}

	printf("\nDisplaying the Information Stored : \n");
	for(int i=0;i<noOfStudent;i++) {
		printf("%d\t%s\n",(ptr+i)->id, (ptr+i)->name);
	}

	// avoid memory leakage
	free(ptr);

	return 0;
}

   This program Dynamically Stores the information of entered students. To create a dynamic structure we
   use here malloc() function. The syntax is simple just pass the number of student records we want to
   store and sizeof the struct. It will create that much of the amount of memory in the heap for us.

   Note: *(ptr+i) is just a way to access the ith element of dynamically structured blocks.

   Note: Don't forget to free the ptr. If we don't do that it will lead us to memory leaks.

   Output :

Enter Number of student whose data you want to store : 3
Enter id and name of student : 1 Amandeep
Enter id and name of student : 2 Ramandeep
Enter id and name of student : 3 Aditya

Displaying the Information Stored :
1        Amandeep
2        Ramandeep
3        Aditya

  Why Use it ?
   Because Dynamic allocation is better as we could decide the number of blocks at the run time. It
   allows us to create more complex data structures such as Binary Tree, LinkedList.

  Drawback of Using malloc :
   The major drawback of using malloc() function is that when we allocate memory using malloc function
   it is initialized our structure with some garbage values and if we forget to initialization of
   structure it will lead us to some undefined behaviour.

  Solution to Drawback :
   Instead of using malloc(), we can use calloc() function in C which is another core function for
   memory allocation in C. The main advantage of calloc() over malloc() is that calloc() initialized our
   structure with zero instead of some random garbage value.

Examples
   Now its time to write some neat code. Here we gonna discuss two examples one of them is related to
   how to access the structure pointer using INDIRECTION OPERATOR (*) AND DOT OPERATOR (.) and the other
   one is consist How to access structure pointer using ARROW OPERATOR (->).

  Example 1

   In this example we are going to learn how to use indirection operator (*) and dot operator (.) to
   access the pointer to structure in C.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct Student{
	int id;
	char name[20];
	char gender[20];
};

int main() {
	// struct variable
	struct Student student;

	//struct Pointer
	struct Student *ptr;

	student.id = 1;
	strcpy(student.name, "Amandeep");
	strcpy(student.gender, "Male");

	// make pointer to points the structure
	ptr = &student;

	printf("%d\t",(*ptr).id);
	printf("%s\t", (*ptr).name);
	printf("%s\t", (*ptr).gender);

	free(ptr);

	return 0;
}

   This is the simplest program that shows how to use the indirection operator and dot operator to
   access the member of structure in C.

   Output :
1 Amandeep Male

  Example 2

   The given example teach us how to use Arrow operator (->) to access the pointer to structure in C.

#include<stdio.h>
#include<stdlib.h>

struct Employee{
	int id;
	char name[20];
	char gender[15];
	int age;
};

int main() {
	// create employee variables
	struct Employee employee1;

	// create pointer for  employee
	struct Employee *ptr1;

	// store the address of employees

	ptr1 = &employee1;

	printf("Enter Information of Employees : \n");

	printf("Enter id of employee1 : ");
	scanf("%d", &ptr1->id);
	printf("Enter name of employee1 : ");
	scanf("%s", &ptr1->name);
	printf("Enter gender of employee1 : ");
	scanf("%s", &ptr1->gender);
	printf("Enter age of employee1 : ");
	scanf("%d", &ptr1->age);

	printf("\nDisplaying the Information Stored : \n");
	printf("%d\t", ptr1->id);
	printf("%s\t" , ptr1->name);
	printf("%s\t", ptr1->gender);
	printf("%d\n", ptr1->age); // No need to use deference operator

	free(ptr1);

	return 0;
}

   The above program illustrates how Arrow Operator is used to access the member of structure. Like
   above said please don't forget to free the pointer after use otherwise it leads us to a memory leak
   of the program. Also free the pointer after their use is good programming style.

   Output :
Displaying the Information Stored :
1      Amandeep      Male         22

Summary
	 * Structure enables us to group different data types and a pointer is used to store or to point to
	   the address of variables. Creating a pointer to structure in C is known as Structure to pointer
	   in C.
	 * With arrow operator (->) and indirection(*) & dot operator(.), we can access the members of the
	   structure using the structure pointer.
	 * Initialization of pointer is like initialization of a variable.
	 * Using malloc() function, we can create dynamic structures with the help of pointers.



---

