filename: c-stack-linkedlist-c-implementation-20250609.txt
https://medium.com/@jahskee_82010/stack-linkedlist-c-implementation-aed3b48ce02d

Stack: LinkedList: C Implementation
May 24, 2025

   Setup project directories
$> basedir=~/dev/stack/c && mkdir -p $basedir && cd $basedir && mkdir -p src bin
$> vim ~/dev/stack/c/src/stack.c

   stack.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the structure for a stack node
typedef struct Node {
	void *data;                // Pointer to generic data
	struct Node *next;         // Pointer to the next node
} Node;

// Define the structure for the stack
typedef struct Stack {
	Node *top;                 // Pointer to the top of the stack
	size_t elementSize;        // Size of each element in bytes
} Stack;

// Function to initialize the stack
Stack *createStack(size_t elementSize) {
	Stack *stack = (Stack *)malloc(sizeof(Stack));
	if (stack == NULL) {
		perror("Failed to allocate memory for stack");
		exit(EXIT_FAILURE);
	}
	stack->top = NULL;
	stack->elementSize = elementSize;
	return stack;
}

// Function to check if the stack is empty
int isEmpty(Stack *stack) {
	return (stack->top == NULL);
}

// Function to push an element onto the stack
void push(Stack *stack, const void *element) {
	Node *newNode = (Node *)malloc(sizeof(Node));
	if (newNode == NULL) {
		perror("Failed to allocate memory for new node");
		exit(EXIT_FAILURE);
	}
	newNode->data = malloc(stack->elementSize);
	if (newNode->data == NULL) {
		perror("Failed to allocate memory for node data");
		exit(EXIT_FAILURE);
	}
	memcpy(newNode->data, element, stack->elementSize);
	newNode->next = stack->top;
	stack->top = newNode;
}

// Function to pop an element from the stack
void *pop(Stack *stack) {
	if (isEmpty(stack)) {
		return NULL; // or handle error as needed
	}
	Node *temp = stack->top;
	void *poppedData = malloc(stack->elementSize);
	 if (poppedData == NULL) {
		perror("Failed to allocate memory for popped data");
		exit(EXIT_FAILURE);
	}
	memcpy(poppedData, temp->data, stack->elementSize);
	stack->top = temp->next;
	free(temp->data);
	free(temp);
	return poppedData;
}

// Function to peek at the top element of the stack
void *peek(Stack *stack) {
	if (isEmpty(stack)) {
		return NULL; // Or handle error as needed
	}
	return stack->top->data;
}

// Function to free the stack and its elements
void freeStack(Stack *stack) {
	Node *current = stack->top;
	while (current != NULL) {
		Node *next = current->next;
		free(current->data);
		free(current);
		current = next;
	}
	free(stack);
}

int main() {

	// Example usage with integers
	Stack *intStack = createStack(sizeof(int));
	int num1 = 10, num2 = 20, num3 = 30;
	push(intStack, &num1);
	push(intStack, &num2);
	push(intStack, &num3);
	int *poppedNum = (int *)pop(intStack);

	if (poppedNum != NULL) {
		printf("Popped: %d\n", *poppedNum); // Output: 30
		free(poppedNum);
	}
	int *peekedNum = (int *)peek(intStack);

	if (peekedNum != NULL) {
		printf("Peeked: %d\n", *peekedNum); // Output: 20
	}

	// Example usage with strings
	Stack *stringStack = createStack(sizeof(char) * 50);
	char str1[] = "apple", str2[] = "banana";
	push(stringStack, str1);
	push(stringStack, str2);
	char *poppedStr = (char *)pop(stringStack);

	if (poppedStr != NULL) {
		printf("Popped: %s\n", poppedStr); // Output: banana
		free(poppedStr);
	}

	freeStack(intStack);
	freeStack(stringStack);
	return 0;
}

   gcc compile and run
$> basedir=~/dev/stack/c && cd $basedir && /bin/rm -f bin/* || true && gcc src/stack.c -o bin/stack && clear && ./bin/stack


---

