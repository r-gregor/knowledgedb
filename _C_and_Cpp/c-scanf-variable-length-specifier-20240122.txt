filename: c_scanf-variable-length-specifier_20240122.txt
https://copyprogramming.com/howto/scanf-variable-length-specifier

Variable length specifier in Scanf() function
2023-03-27

Is it possible to allocate memory of sizeof(string) * strlen(word) + 1 bytes if the user enters a string
with a length of 999? This requires knowing the string's length beforehand, which can be achieved by
storing it in a buffer.

Is it possible to set the maximum number of characters that scanf() can read in using a variable?

By utilizing printf() , you can employ the asterisk symbol in this manner.

#define MAXVAL 5
printf("Print at maximum MAXVAL chars: %.*s\n", MAXVAL, "myStringHere");

How can I modify scanf to read in only MAXVAL characters? I need to use MAXVAL as the length specifier
and cannot accomplish this by simply printing 5 characters.

scanf("%5s", string);

Currently, my only approach is to utilize scanf to read from a vast array, followed by using ssprintf to save
the text within my restricted string. Although, it would be more convenient to employ a length indicator.

Solution 1:

Employing the C preprocessor can be advantageous in this regard.

#define STR2(x) #x
#define STR(X) STR2(X)
scanf("%" STR(MAXVAL) "s", string);

The "%5s" is a result of merging "%" STR(MAXVAL) "s" by the processor.

Solution 2:

#include
#define MAXLEN 5
#define S_(x) #x
#define S(x) S_(x)

int main(void) {
	char string[MAXLEN+1];
	scanf("%" S(MAXLEN) "s", string);
	printf("<%.*s>\n", MAXLEN, string);
	return 0;
}

Solution 3:

To create the format string , it is suggested to utilize snprintf(). As a solution, I devised a
secure method for reading strings.

void scan_string(char *buffer, unsigned length) {
	char format[12]; // Support max int value for the format %s
	snprintf(format, sizeof(format), "%%%ds", length - 1); // Generate format
	scanf(format, buffer);
}

int main() {
  char string[5];
  scan_string(string, sizeof(string));
  printf("%s\n", string);
}

Solution 4:

Using scanf() is not possible. Instead, you can opt for fgets() , which is a widely used
alternative. However, it's important to note that fgets() reads input lines while scanf() with %s reads
sequences of characters separated by whitespace.

In order to utilize fgets() , an appropriate option would be:

fgets(string, MAXVAL, stdin);

In case you insist on utilizing scanf() , refer to this inquiry on ways to prevent scanf causing a buffer
overflow in C.

Specifying the maximum string length to scanf, @chux: valid point. The usual sensible fix is to include
a space at the start of the format string, so leading white space is skipped. Note that trying to
read the newline after the string is hard if it is at the end of the format string and the input is
interactive (a trailing newline or blank in the format string is an interactive ... Code samplesize_t
sz = 64;char format[32];snprintf(format, sizeof(format), "%%%zus", sz);if (scanf(format, buffer) != 1){ ...oops... }Feedback

Prevent buffer overflow
Question:
Is there a more suitable function, such as fgets, that I can use to ensure that the filename is limited
to no more than 20 characters when attempting to prevent buffer overflow it?
Ezoic

#include
int main() {
	char filename[20]; //20 character long
	printf("Please enter your filename:");
	scanf("%s", filename);

	return 0;
}


Solution:

Either scanf or fgets can be utilized, though one of them may prove to be more convenient for your
specific use case.

Verify the output before utilizing scanf .

#include
#include
#include
int main(void) {
	char filename[20];
	while(scanf("%19s", filename) == 1) {
		printf("filename: %s\n", filename);
	}
	if(errno) return perror("filename"), EXIT_FAILURE;
	return EXIT_SUCCESS;
}

Outputs,

12345678901234567890
filename: 1234567890123456789
filename: 0

The input is not matched to retrieve the entire line by fgets .

#include
#include
#include
int main(void) {
	char filename[20];
	while(fgets(filename, sizeof filename, stdin)) {
		printf("filename: %s\n", filename);
	}
	if(errno) return perror("filename"), EXIT_FAILURE;
	return EXIT_SUCCESS;
}

Outputs,

12345678901234567890
filename: 1234567890123456789
filename: 0
[\n]

It's evident from fgets that when filenames are too lengthy, they either get truncated or cause an error
message. An example of this would be the query "How can one discard the remaining part of a line in C?
C - scanf() variable length specifier, Right now I can only think of reading into a large array using
scanf then using ssprintf to store the string into my length limited string. Using a length specifier
would be so much easier however. Using a length specifier would be so much easier however.

Dynamically limit the number of chars considered in sscanf?
Question:

Given the context provided in the comments, the task at hand is to extract a substring from a larger
read-only string. However, the length of the desired substring is not known until runtime, and due to
being on an embedded system with limited stacksize, the use of malloc() is not an option.

Take a look at the code snippet that restricts the conversion of sscanf() to only the initial two
characters of the string "1234".

  int d;
  sscanf("1234", "%2d", &d);  // => 12

What if you have to dynamically set the limit for a non-null terminated input string? If it was similar
to printf() , then you could easily achieve this.

  int d;
  int len = 2;
  sscanf("1234", "%*d", len, &d);  // doesn't work

The expected outcome cannot be achieved with the usage of * modifier as it directs to exclude the
following argument.

The most optimal solution I could devise involves utilizing the sprintf() function to dynamically create
the format string for sscanf() .

  char fmt[5];
  int d;
  int len = 2;
  snprintf(fmt, sizeof(fmt), "%%%dd", len);  // fmt = "%2d"
  sscanf("1234", fmt, &d);

The effectiveness of this method has been confirmed by the Temple of Godbolt. However, is there a simpler
alternative available?

Update

With the help of @Shawn's suggestion, I had an epiphany that the length of the substring I am dealing
with is not fixed, but it has a limit. Therefore, I don't need to use scanf() at all. Instead, I can
adopt a method similar to the following:

  char buf[MAX_SUBSTRING_LENGTH];
  memcpy(buf, pointer_to_substring, substring_length);
  int d = atoi(buf);


Solution:

Your solitary alternative is what you possess.

Upon discovery, it is evident that the format specifiers for scanf do not permit the specification of
field width through a separate argument. This is unlike the format specifiers used in printf .

The only method to dynamically establish the format width for scanf is by the way you are constructing
the format string.

Declaring variable length strings in c, Also, as mentioned before, scanf is a horrible way to input
strings. Use fgets instead. fgets (s, sizeof (s), stdin); // was scanf ("%s", s); Second, you cannot use
sizeof to get the length of a string. It will return you the length of the array that contains the string
(not what you want, trust me). Instead, use strlen.

How to limit size of user inputted string or dynamically allocate memory
Question:
So I have this piece of code:

void main() {
	char word[21]={0}; // changed from 20 to 21 because of '\0'.
	// do {
	scanf("%s", &word);
	// } while (strlen(niz)>20);  this line is useless because program crashes anyway
}

	Question: The thing is I want to limit the number of characters user wants to input to 20. Sure
	I could reserve more memory for word[] but if I went over certain number the program would crash
	again. How do you get around this in C?

	Question: Is there any way I can allocate needed memory for the string just after user enters it. For
	example if user enters string that has length of 999 can I allocate sizeof(string) * strlen(word) + 1 bytes of memory?

In case the length of the string exceeds a specific limit, I would like to request the user to input a
new string.

Solution 1:

Employing fgets allows for restricting the length of the string.

fgets(word, sizeof(word), stdin);

In the second part, it is regrettable that you cannot allocate the precise amount of memory required for
the input string in C. This is due to the fact that in order to determine its length before allocating
memory , the string must first be stored in a buffer.

To save memory while inputting a string of any size, consider using realloc . See the following test
program for reference.

#include
#include
int main(void) {
	char *s = malloc(1);
	printf("Enter a string: \t"); // It can be of any length
	int c;
	int i = 0;
	do {
		c = getchar();
		s[i++] = c;
		s = realloc(s, i+1);
	}while(c != '\n' && c != EOF);

	s[i] = '\0';
	printf("Entered string: \t%s", s);
	return 0;
}

Solution 2:

Certain variants of the scanf code provide support for the m modifier. This is particularly evident in
glibc versions equal to or greater than 2.7, where they allocate the required buffer for the user.

char *p;
int n = scanf("%ms", &p);
if (n == 1) {
	printf("read: %s\n", p);
	free(p);
} else {
	// error
}

An alternative modifier, a , that achieves the same outcome is also available.

Solution 3:

Prepend a constant character to the "s" in "%s".

scanf("%20s", &word);

To answer your second inquiry, the answer is no. The input requires memory space . However, it's possible
to minimize allocations by implementing a well-known approach such as:

char tmp[1000];
char *strptr;
scanf("%s", &temp);
strptr = malloc(sizeof(char)*(strlen(tmp)+1));

However, space can only be saved if this function is called numerous times.

Solution 4:

To restrict the input, one can make use of fgets instead.

fgets(word, sizeof(word), stdin);

In case there is a requirement to retrieve specific elements from the given string, utilize the designated
code sscanf.

C - Read no more than size of string with scanf(), Your array needs to be able to hold four char s,
since it must also contain the 0-terminator. With that fixed, specifying a maximal length in the format,
scanf ("%3s", string); ensures that scanf reads no more than 3 characters. Share answered Sep 6, 2012
at 18:56 Daniel Fischer 179k 16 304 428 1


---

