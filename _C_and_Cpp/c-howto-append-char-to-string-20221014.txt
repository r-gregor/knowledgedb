filename: c_howto_append-char-to-string_20221014.txt
https://stackoverflow.com/questions/10279718/append-char-to-string-in-c

Append Char To String in C?

   How do I append a single char to a string in C?

   i.e
char* str = "blablabla";
char c = 'H';
str_append(str,c); /* blablablaH */

***
char* str = "blablabla";

   You should not modify this string at all. It resides in implementation defined read only region.
   Modifying it causes Undefined Behavior.

   You need a char array not a string literal.

   Good Read:
   [**1]What is the difference between char a[] = "string"; and char *p = "string";

***
   To append a char to a string in C, you first have to ensure that the memory buffer containing the
   string is large enough to accomodate an extra character. In your example program, you'd have to
   allocate a new, additional, memory block because the given literal string cannot be modified.

   Here's a sample:
#include <stdlib.h>

int main() {
	char *str = "blablabla";
	char c = 'H';

	size_t len = strlen(str);

	/* one for extra char, one for trailing zero */
	char *str2 = malloc(len + 1 + 1);

	strcpy(str2, str);
	str2[len] = c;
	str2[len + 1] = '\0';

	printf("%s\n", str2); /* prints "blablablaH" */

	free(str2);
}

   First, use malloc to allocate a new chunk of memory which is large enough to accomodate all
   characters of the input string, the extra char to append - and the final zero. Then call strcpy
   to copy the input string into the new buffer. Finally, change the last two bytes in the new buffer to
   tack on the character to add as well as the trailing zero.

***
   The Original poster didn't mean to write:
  char* str = "blablabla";

   but
  char str[128] = "blablabla";

   Now, adding a single character would seem more efficient than adding a whole string with strcat.
   Going the strcat way, you could:
  char tmpstr[2];
  tmpstr[0] = c;
  tmpstr[1] = 0;
  strcat (str, tmpstr);

   but you can also easily write your own function (as several have done before me):
void strcat_c (char *str, char c) {
	for (;*str;str++); // note the terminating semicolon here.
	*str++ = c;
	*str++ = 0;
}

***
   If Linux is your concern, the easiest way to append two strings:
char * append(char * string1, char * string2) {
	char * result = NULL;
	asprintf(&result, "%s%s", string1, string2);
	return result;
}

   This won't work with MS Visual C.

***
   I do not think you can declare a string like that in c. You may only do that for const char* and of
   course you can not modify a const char * as it is const.

   You may use dynamic char array but you will have to take care of the reallocation.

   EDIT: in fact this syntax compiles correctly. Still you should not modify what str points to if
   it is initialized in the way you do it (from string literal)

***
   Create a new string (string + char)
#include <stdio.h>
#include <stdlib.h>

#define ERR_MESSAGE__NO_MEM "Not enough memory!"
#define allocator(element, type) _allocator(element, sizeof(type))

/** Allocator function (safe alloc) */
void *_allocator(size_t element, size_t typeSize) {
	void *ptr = NULL;
	/* check alloc */
	if( (ptr = calloc(element, typeSize)) == NULL)
	{printf(ERR_MESSAGE__NO_MEM); exit(1);}
	/* return pointer */
	return ptr;
}

/** Append function (safe mode) */
char *append(const char *input, const char c) {
	char *newString, *ptr;

	/* alloc */
	newString = allocator((strlen(input) + 2), char);
	/* Copy old string in new (with pointer) */
	ptr = newString;
	for(; *input; input++) {*ptr = *input; ptr++;}
	/* Copy char at end */
	*ptr = c;
	/* return new string (for dealloc use free().) */
	return newString;
}

/** Program main */
int main (int argc, const char *argv[]) {
	char *input = "Ciao Mondo"; // i am italian :), this is "Hello World"
	char c = '!';
	char *newString;

	newString = append(input, c);
	printf("%s\n",newString);
	/* dealloc */
	free(newString);
	newString = NULL;

	exit(0);
}

              0   1   2   3    4    5   6   7   8   9  10   11
newString is [C] [i] [a] [o] [\32] [M] [o] [n] [d] [o] [!] [\0]

   Don't alter the array size ([len +1], etc.) without know its exact size, it may damage other data.
   alloc an array with the new size and put the old data inside instead, remember that, for a char
   array, the last value must be \0; calloc() sets all values to \0, which is excellent for char arrays.

*** (5+)
   C does not have strings per se -- what you have is a char pointer pointing to some read-only memory
   containing the characters "blablabla\0". In order to append a character there, you need a) writable
   memory and b) enough space for the string in its new form. The string literal "blablabla\0" has
   neither.

   The solutions are:

   1) Use malloc() et al. to dynamically allocate memory. (Don't forget to free() afterwards.)
   2) Use a char array.

   When working with strings, consider using strn* variants of the str* functions -- they will help you
   stay within memory bounds.

***
   you can use of strcat in string.h standard header but don't pass a char as second argument , use
   following code instead

void append_str(char str[], char c){
	auto char arr[2] = {c, '\0'};
	strcat(str, arr);
}

***
   You can use strncat()
#include <stdio.h>
#include <string.h>

int main(void){
	char hi[6];
	char ch = '!';
	strcpy(hi, "hello");

	strncat(hi, &ch, 1);
	printf("%s\n", hi);
}

***
   You can use strncat() with a pointer to your char (but first check if the buffer is large enough to
   store the resulting string):

char myString[100] = "Feli";
char toAppend = 'x';
// do something here to check if the buffer is large enough...
strncat(myString, &toAppend, 1);

***
   In my case, this was the best solution I found:
snprintf(str, sizeof str, "%s%c", str, c);

***
   here's it, it WORKS 100%

// only if cArr has enough space for extra char
char * appending(char *cArr, const char c) {
	int len = strlen(cArr);
	cArr[len + 1] = cArr[len];
	cArr[len] = c;
	return cArr;
}



---
[**1]
filename: c_difference-between-char-string-and-char-p-string_20221014.txt


---

