filename: c_return-struct-pointer_20230325.txt
https://copyprogramming.com/howto/c-return-struct-pointer

C return struct pointer
2022-09-24

   Change return type of you function to as you are returning a pointer to date object. You have 2
   options here, one is to malloc both the structure and enough space for the name separately with 2
   mallocs: or alternatively, you declare name as an array in which case it will have its own space
   allocated by changing the structure definition to: in which case the original malloc will allocate
   space for name also.
   Table of contents
	 * C return struct pointer
	 * Return pointer to a structure
	 * Returning pointer to a local structure
	 * How to return a struct from a pointer in C?
	 * Can a function return a structure in C?
	 * How to use structure's member through pointer in C++?
	 * How do you use a function pointer in C?

C return struct pointer

   Solution 1:

   Unfortunately there are a lot of mistakes in your code.

   1. In C, unlike C++, every time you want to make an instance of struct Person , you have to say
   struct Person , not Person

   2. In C, the way to declare a char array of size 5 is char p1name[5]; not char[5] p1name;
	1. Inside the body of GetPerson() p1 and p2 are declared as pointers, that means
	   strcpy(p1.name,p1name); should actually be strcpy(p1->name,p1name); or even
	   strcpy((*p1).name,p1name); if you prefer.

   More serious problems:
	1. You have to notice that when you allocate memory dynamically for an instance of struct Person ,
	   you do not automatically allocate memory for the char * name; ; because of this calling
	   strcpy(p1->name,p1name); will fail. You could keep the char* and allocate memory for it
	   dynamically, but for the sake of simplicity I would recommend you just pick a char array of
	   reasonably large size.
	2. Remember that GetPerson() allocates memory for an instance of struct Person and returns a
	   pointer. Now inside your main function you have:
struct Person *person = malloc(sizeof(struct Person)); //allocating memory in main
person = GetPerson();  // you just leaked the memory you allocated in main

	   You are allocating memory twice. This will not cause your program to crash, but will cause a
	   "memory leak" which you need to avoid. You always want to free() dynamically allocated memory.

   Put that together and you get this:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Person {
	int age;
	char name[256];
	struct Person *next_ptr;
};

struct Person * GetPerson() {
	char p1name[5] = "John";
	char p2name[4] = "Bob";
	struct Person *p1;
	struct Person *p2;
	p2 = malloc(sizeof(struct Person));
	strcpy(p2->name, p2name);
	p2->age = 25;
	p2->next_ptr=NULL;
	p1 = malloc(sizeof(struct Person));
	strcpy(p1->name, p1name);
	p1->age = 20;
	p1->next_ptr = p2;
	return p1;
}

int main() {
	struct Person *tmp = GetPerson();
	printf(tmp->name); //prints John
	printf("\n");
	printf(tmp->next_ptr->name); //prints Bob
	printf("\n");
	free(tmp);
	return 0;
}

   Notice that this is still not great code logically, but it does not have bugs.

   Solution 2:
struct Person p1;

   Should be a pointer:
struct Person *p1;

   And likewise for p2 .

   Then when you want to access fields in the struct, you cannot do this:
p2.age = 25;

   Instead, you must use:
p2->age = 25;

   Because p2 is now a pointer rather than an instance. The above is equivalent to:
(*p2).age = 25;

   Solution 3:

   Your main problem is that you are not allocating space for the string that holds the person's name
   itself. So when you do
p2 = malloc(sizeof(struct Person));
strcpy(p2->name, p2name);

   p2->name isn't really pointing anywhere of significance, and things will fail. You have 2 options
   here, one is to malloc both the structure and enough space for the name separately with 2 mallocs:
p2 = malloc(sizeof(struct Person));
p2->name = malloc(60); // deemed sufficient for name
strcpy(p2->name, p2name);

   or alternatively, you declare name as an array in which case it will have its own space allocated by
   changing the structure definition to:

struct Person {
	int age;
	char name[60];
	Person *next_ptr;
}

   in which case the original malloc will allocate space for name also. Either one should work. And
   whatever was said for p2 also applies to p1.

   In C, how would I choose whether to return a struct or a, If the structure is too large to be
   returned like a normal return value (e.g., in a register), the vast majority of ABIs require
   compilers to transform the …

Return pointer to a structure

   Solution 1:

   There are multiple problem with your program:
	1. There is no prototype for your function later()
	   Solution:
	   Add date *later(date *one, date *two); after ending declaration of struct date or move the whole
	   function above main() .
	2. Change return type of you function to date* as you are returning a pointer to date object.
	3. Change data type of res to date* as you want to store a pointer to date object.
	4. Then print the object res is pointing to by printing each of its components individually as
	   printf is not designed to print your custom data type.
	5. This is only a suggestion but i recommend you moving declaration of int i to for(int i = 0; i <
	   2; i++); it is just considered better and saves memory.

   If you want res to be an int you will have to return a object instead of a pointer and then typecast
   it to int. Guide on typecasting: http://www.cplusplus.com/doc/tutorial/typecasting/

   Solution 2:

   There are a number of ways to handle the return as have been pointed out in the comments. You can
   either declare your later function as int (as you have), and use the return similar to the return
   from strcmp ( 0 - dates are equal, -1 first is earlier than last, 1 first is later than last).

   You can also declare later as struct date * and return a pointer to the later date (which leaves you
   in a pickle as to what to return if the dates are equivalent).

   Your return is more meaningful, if you return a int value similar to strcmp . An implementation that
   compares your struct date and returns -1, 0 or 1 based on the first being earlier , equivalent , or
   later could be:

int later (struct date *one, struct date *two) { /* the ternary operator is your friend */
	if (one->year != two->year)                  /* years differ  */
		return one->year > two->year ? 1 : -1;
	if (one->month != two->month)                /* months differ */
		return one->month > two->month ? 1 : -1;
	if (one->day != two->day)                    /* days differ  */
		return one->day > two->day ? 1 : -1;
	return 0;                                    /* dates are equivalent */
}

   ( note: the use of the ternary operator (e.g. test ? if true : if false ) to simply comparing each
   date component)

   Also, note, in this case your are free to pass struct date instead of struct date * as the function
   will work fine operating on a copy of each date struct. It is up to you how you want to do it.

   A small sample program testing the function (and noting a few code improvements) could be:

#include <stdio.h>

struct date {
	int year;
	int month;
	int day;
};

int later (struct date *one, struct date *two);
void prn_result (struct date a, struct date b, char op);

/* main is a function of type 'int' and returns a value */
int main (void) {
	struct date dates[2] = {{0}};        /* initialize variables */
	int i = 0, res = 0;
	for (i = 0; i < 2; i++) {            /* user input of dates    */
		printf ("Enter a year: ");
		scanf ("%d", &dates[i].year);
		printf ("Enter a month: ");
		scanf ("%d", &dates[i].month);
		printf ("Enter a day: ");
		scanf ("%d", &dates[i].day);
		putchar ('\n');
	}
    res = later (&dates[0], &dates[1]);        /* comparison */
	if (res == 0)
		prn_result (dates[0], dates[1], '=');
	else if (res > 0)
		prn_result (dates[0], dates[1], '>');
	else
		prn_result (dates[0], dates[1], '<');
	return 0;
}
int later (struct date *one, struct date *two) { /* the ternary operator is your friend */
	if (one->year != two->year)                  /* years differ  */
		return one->year > two->year ? 1 : -1;
	if (one->month != two->month)                /* months differ */
		return one->month > two->month ? 1 : -1;
    if (one->day != two->day)                    /* days differ */
		return one->day > two->day ? 1 : -1;
	return 0;                                    /* dates are equivalent */
}

void prn_result (struct date a, struct date b, char op) {
	printf ("%d/%d/%d %c %d/%d/%d\n",
			a.month, a.day, a.year, op,
			b.month, b.day, b.year);
}

   Example Use/Output
$ ./bin/cmpyear
Enter a year: 1993
Enter a month: 3
Enter a day: 13
Enter a year: 1993
Enter a month :3
Enter a day: 12
3/13/1993 > 3/12/1993
$ ./bin/cmpyear
Enter a year: 1993
Enter a month: 3
Enter a day: 12
Enter a year: 1993
Enter a month: 3
Enter a day: 12
3/12/1993 = 3/12/1993
$ ./bin/cmpyear
Enter a year: 1993
Enter a month: 3
Enter a day: 12
Enter a year: 1993
Enter a month: 3
Enter a day: 13
3/12/1993 < 3/13/1993

   Look it over and let me know if you have an further questions.
   Return two pointers from a function in c, There are many ways to implement the function. You could
   define a structure of two pointers as for example. struct Pair { int *a; int *b; }; and use it …

Returning pointer to a local structure

   Solution 1:

   In your code, you aren't returning a pointer to a local structure. You are returning a pointer to a
   malloc()'d buffer that will reside upon the heap.

   Thus, perfectly safe.

   However, the caller (or the caller's caller or the caller's caller's callee, you get the idea) will
   then be responsible for calling free().

   What isn't safe is this:
char *foo() {
	 char bar[100];
	 // fill bar
	 return bar;
}

   As that returns a pointer to a chunk of memory that is on the stack -- is a local variable -- and,
   upon return, that memory will no longer be valid.

   Tinkertim refers to "statically allocating bar and providing mutual exclusion".

   Sure:
char *foo() {
	static char bar[100];
	// fill bar
	return bar;
}

   This will work in that it will return a pointer to the statically allocated buffer bar. Statically
   allocated means that bar is a global.

   Thus, the above will not work in a multi-threaded environment where there may be concurrent calls to
   foo() . You would need to use some kind of synchronization primitive to ensure that two calls to
   foo() don't stomp on each other. There are many, many, synchronization primitives & patterns
   available -- that combined with the fact that the question was about a malloc() ed buffer puts such a
   discussion out of scope for this question.

   To be clear:
// this is an allocation on the stack and cannot be safely returned
char bar[100];
// this is just like the above;  don't return it!!
char *bar = alloca(100);
// this is an allocation on the heap and **can** be safely returned, but you gotta free()
malloc(100);
// this is a global or static allocation of which there is only one per app session
// you can return it safely, but you can't write to it from multiple threads without
// dealing with synchronization issues!
static char bar[100];

   Solution 2:

   Think of it this way: You can return a pointer from a function if the memory allocated to that
   pointer is not local to that function (i.e. on the stack frame of that instance of that function - to
   be precise)
   How to pass or return a structure to/from a Function in, By passing all the elements to the function
   individually. By passing the entire structure to the function. In this article, entire structure is
   passed to ...


---

