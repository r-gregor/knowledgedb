filename: c_forgetting-and-symbol-at-address-notation_20221003.txt
https://www.quora.com/What-happens-if-I-forgot-to-add-the-symbol-in-C/answer/Joe-Zbiciak

What happens if I forgot to add the '&' symbol in C?

There aren't too many places you can leave an & out of a C program and have it still compile, without
at least generating a warning.

Here are some obvious cases:

	int x = 42;
	int *px1 = &x;    // Ok.
	int *px2 = x;     // WRONG!  Warns about making a pointer
	                  // from an integer without a cast.

	scanf("%d", &x);  // Ok.
	scanf("%d", x);   // WRONG! Modern compilers will warn
	                  // argument type doesn't match format.

In the examples above, dereferencing px2 will trigger undefined behavior. Likewise if you execute the
second scanf.* In general, if you leave off a unary &, the address-of operator, you will have the wrong
type where a pointer is expected.

With a modern compiler and warnings enabled, I would expect something like the warnings shown above. See
for yourself: [Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ

	prog.c:6:14: warning: initialization of 'int *' from 'int' makes pointer from integer without a cast
	[-Wint-conversion]
	    6 |   int *px2 = x;   // WRONG!  Warns: "makes a pointer from
	      |              ^
	prog.c:10:11: warning: format '%d' expects argument of type 'int *', but argument 2 has type 'int'
	[-Wformat=]
	   10 |   scanf("%d", x); // WRONG! Modern compilers will warn
	      |          ~^   ~
	      |           |   |
	      |           |   int
	      |           int *

On a protected memory system, the most likely outcome is that the program will immediately crash. It's
not guaranteed, though. The error could go unnoticed by the computer, and you might just generate a
garbage value or and/or corrupt some memory at runtime.

In particular, if you write something like this…

	int x;	// x is uninitialized.
	scanf("%d", x);

…and the variable x happens to reside in a stack slot previously occupied by a pointer, the number
you enter could end up written to wherever that pointer pointed. Granted, that requires a lot of other
details to line up, including the size of an int matching the size of a pointer in most cases.

In the bad old days—e.g. MS-DOS and Turbo C—this type of bug could actually crash the machine and
require a reboot.

That said, there are edge cases around unary & that might be surprising:

	char str[100];

	scanf("%99s", str);        // Ok.
	scanf("%99s", &str[0]);    // Ok. Means same as previous.
	scanf("%99s", &str);       // WRONG! (but probably "works")

In this example, the first two scanf calls receive a char* argument. The pointer first one arises due
to the fact that when you to an array in an expression, the compiler silently replaces it with a pointer
to its first element. In the second scanf, the pointer generation is more obvious.

What about the third one?
The expression &str gives you a char(*)[100]. What's that? It's a pointer to array of 100 char. This has
the same address as the array's first value, but is a different pointer type. If those pointer types
have the same representation (and they do on most platforms), then they'll look the same. scanf might
not even notice the difference.

I explain the situation in this answer. (The answer discusses C++, but the situation is the same in C.)

A modern compiler might warn about the third case—argument type doesn’t match format—due to the
type mismatch: [Wandbox]三へ( へ՞ਊ ՞)へ ﾊｯﾊｯ

	prog.c:7:13: warning: format '%s' expects argument of type 'char *', but argument 2 has type 'char
	(*)[100]' [-Wformat=]
	    7 |   scanf("%99s", &str);    // WRONG, but probably works.
	      |          ~~~^   ~~~~
	      |             |   |
	      |             |   char (*)[100]
	      |             char *


There is one area where adding or removing a unary & might not change the meaning of a program at all:
Functions and function pointers.

	void foo(void) { /* some function */ }

	void (*fptr1)(void) = &foo;  // fptr1 points to foo().
	void (*fptr2)(void) = foo;	 // fptr2 points to foo().

	typedef void (*fptr)(void);  // Declares a function pointer type.
	fptr fptr3 = &foo;	 // Same meaning as fptr1 above.
	fptr fptr4 = foo;	 // Same meaning as fptr2 above.

	typedef void func(void);  // Declares a function type.
	func *fptr5 = &foo;  // Same meaning as fptr1, fptr3 above.
	func *fptr6 = foo;	 // Same meaning as fptr2, fptr4 above.

All six of those function pointers take on the same value, and have the same C type. If you refer to
the name of a function in an expression context, without the parentheses that invoke a function call,
the compiler adjusts the expression to give a pointer to the function.

If you explicitly take the address of a function, you also get a pointer to the function. Thus foo ==
&foo. They’re the same data type and everything, unlike the array example.

In fact, if you dereference a pointer to a function, you still get a pointer to the function. As a result,
these funky expressions also mean the same as above:

	func *fptr7 = *foo;  // Still works...
	func *fptr8 = &*foo; // Still works...
	func *fptr9 = *&foo; // Still works...
	func *fptr10 = *******&*&*&foo;  // Still works...

This one sadly doesn’t work:

	// ERROR: lvalue required as unary '&' operand.
	func *fptr11 = &(&foo);

For the record, foo isn’t an lvalue
either, but there’s a special exception for a function designator as an argument to &. The other rules
for collapsing * and & with respect to functions are… fun. (6.3.2.1p4,
all of 6.5.3.2
including footnote 102.)

How about other places where you might leave out an &? Those cases involve binary &.

The binary && operator is the logical-AND operator, while & is the bitwise-AND operator. Logical-AND returns
1 when both of its operands do not compare equal to 0. Bitwise-AND requires integer-type arguments. It
produces a new integer, where each bit of the output is 1 where the corresponding bits of the arguments
are 1.

	// Assume a and b are integer types:
	a && b	// 1 when both a and b are non-zero; 0 otherwise.
	a & b	// Bitwise-AND of a and b.

The && operator can work with non-integer types. If you apply & to non-integer types, you get an error.

	double d1, d2;
	d1 && d2;  // Ok. Returns 1 if both != 0.
	d1 & d2;   // ERROR!  Invalid operands to binary &.

	void *p1, *p2;
	p1 && p2;  // Ok. Returns 1 if both are != NULL.
	p1 & p2;   // ERROR!  Invalid operands to binary &.

	// You can mix types with &&:
	d1 && p1;  // Ok. Returns 1 if d1 != 0 and p1 != NULL.
	d1 & p1;   // ERROR!  Invalid operands to binary &.

	// Corner case:
	NULL & NULL;  // WRONG. But might compile if NULL defined as 0.

For that last case, NULL could be defined as ((void*)0) or simply 0. C often uses the former,
while C++ prior to C++11 tends to use the latter,

** because ((void*)0) isn’t really C++ compatible due to its stricter rules on pointer conversion.

g++ at least warns in the second case:

$> cat p.c
#include <stdio.h>

int main() {
	return NULL & NULL;
}

	$ gcc -c p.c
	p.c: In function ‘main’:
	p.c:4:15: error: invalid operands to binary & (have ‘void *’ and ‘void *’)
	 4 | return NULL & NULL;
	   |             ^

$> cat p.cc
#include <cstdio>

int main() {
	return NULL & NULL;
}

$> g++ -c p.cc

	p.cc: In function ‘int main()’:
	p.cc:4:17: warning: NULL used in arithmetic [-Wpointer-arith]
	 4 | return NULL & NULL;
	   |             ^~~~

And, of course, leaving out a binary & next to a unary + or - turns the unary + or - into a binary + or -:

	a & +b;  // Computes bitwise AND of a and b.
	a   +b;  // Computes a + b.

	a & -b;  // Computes bitwise AND of a and -b.
	a   -b;  // Computes a - b.

I’m trying to think of other places you could leave out an & and get something interesting. If anyone
reading thinks of a case I didn’t, leave it in the comments.

Addendum: I thought of another place: The &= operator!

	a &= b;  // Computes (a & b), and assigns result to a.
	a = b;   // Assigns b to a.

*A note on scanf: I’m not a fan of scanf. I prefer sscanf if I use it at all. But, this seems to be a
student question, and scanf is popular in C courses, despite being error prone. Adding a buffer argument
just adds noise to the answer.

**The standard doesn’t permit ((void*)0) for C++, but I’ve seen folks here on Quora claim they’ve
encountered C++ compilers that do that.


---

