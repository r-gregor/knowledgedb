filename: c_real-world-uses-of-bitwise-operators_20220304.txt
https://blog.tarkalabs.com/real-world-uses-of-bitwise-operators-c41429df507f

Real World Uses of Bitwise Operators
Sep 3, 2020

   As a developer, you definitely would've learned about bitwise operators at some point and would've
   thought to yourself. "huh, that's neat. but where would I actually use it?". That's what we'll be
   looking at today.

   The modern world of computing and software engineering has extracted the complexities away to an
   extent that you really don't need to know about how the code you write is executed.

   While this is okay for most uses where your code is executed on servers and powerful computers,
   you'll run into major problems while working on limited resource devices like microcontrollers and
   FPGAs. You will need to know how your code is executed on these devices in order to optimize it to
   run on limited resources. (Kilobytes of RAM & KHz of clock speed).

   Understanding bitwise operators will bring you a step closer to optimization. Let's first understand
   what bitwise operators are. Please note that this article will cover usage of bitwise operators in C,
   but the logic and syntax remains common across most languages. It's also expected that you know and
   understand binary to decimal and decimal to binary conversions. If you don't know that already, there
   are plenty resources available online for you to learn it.

What are bitwise Operators?
   Bitwise operators are operators that perform operations on data at a bit level.

   What do I mean by that? They help you manipulate the bits that make up the piece of data which is
   represented by a datatype. This will start making more sense when we dive deeper into the topic.
   Let's now take a look at what are the different bitwise operators available to us.

+-----------------+---------------+--------------+----------+---------------+
| operator        | name          | example      | variant  | associativity |
+-----------------+---------------+--------------+----------+---------------+
| ~               | bitwise NOT   | ~5           | -        | Right to left |
+-----------------+---------------+--------------+----------+---------------+
| >>              | Right Shift   | 5 >> 2       | x >>= 2  | Left to right |
+-----------------+---------------+--------------+----------+---------------+
| <<              | Left Shift    | 5 << 2       | x <<= 2  | Left to right |
+-----------------+---------------+--------------+----------+---------------+
| &               | bitwise AND   | 5 & 6        | x &= 6   | Left to right |
+-----------------+---------------+--------------+----------+---------------+
| ^               | bitwise XOR   | 5 ^ 6        | x ^= 6   | Left to right |
+-----------------+---------------+--------------+----------+---------------+
| |               | bitwise OR    | 5 | 6        | x |= 6   | Left to right |
+-----------------+---------------+--------------+----------+---------------+

   Using the sizeof() operator, we can find the number of bytes each datatype represents and since each
   byte it made up of 8 bits, we can find out the total number of bits taken up by each datatype with
   some multiplication magic.

   Let's now take a look at each operator in detail.

Different Bitwise Operators and Their Functions

& Bitwise AND
   The bitwise AND operator (&) takes two operands and compares the operands bit by bit and sets the
   corresponding output bit to 1 if and only if both input bits are 1. Here's the truth table for the
   bitwise AND operator:

+---------------+--------------+------------+
| input bit(1)  | input bit(2) | output bit |
+---------------+--------------+------------+
| 1             | 1            | 1          |
+---------------+--------------+------------+
| 1             | 0            | 0          |
+---------------+--------------+------------+
| 0             | 1            | 0          |
+---------------+--------------+------------+
| 0             | 0            | 0          |
+---------------+--------------+------------+

   Let's take the following code for example

#include <stdio.h>
#include <stdlib.h>

int main() {
	int x=5, y=6;
	printf("x & y = %d\n", (x & y));
	// "x & y = 4"
	return EXIT_SUCCESS;
}

   so the value of the variable x is 5 and the value of variable y is 6. The computer that I'm working
   on is a 64-bit machine so the sizeof(int) is 4 bytes so the binary representation of 5 world be:
   00000000 00000000 00000000 00000101

   and the binary representation of 6 would be:
   00000000 00000000 00000000 00000110

   For the sake of simplicity, let's just take the last byte into consideration and let's perform the
   bitwise AND operation on them.

00000101 & 00000110 = 00000100 // 4

   As you can see, the bits of 5 & 6 were compared and the output byte was set to 00000100 as a result
   which is the binary representation of the number 4. This is how we arrived at "5 & 6 = 4".

| Bitwise OR
   The bitwise OR operator take in two operands just like the bitwise AND and compares them bit by bit
   but instead of setting the output bit to 1 only when both input bits are 1, it follows this truth
   table:

+---------------+--------------+------------+
| input bit(1)  | input bit(2) | output bit |
+---------------+--------------+------------+
| 1             | 1            | 1          |
+---------------+--------------+------------+
| 1             | 0            | 1          |
+---------------+--------------+------------+
| 0             | 1            | 1          |
+---------------+--------------+------------+
| 0             | 0            | 0          |
+---------------+--------------+------------+

   Let's look at the below example:

#include <stdlib.h>
#include <stdio.h>

void main() {
	printf("5 | 6 = %d\n", (5 | 6));
	return EXIT_SUCCESS;
}

   The above program would print "5 | 6 = 7". The following bit view of the operation would tell you how
   the program arrived at that output:

00000101 & 00000110 = 00000111 // 7

^ Bitwise XOR
   The bitwise XOR operator works similar to the bitwise OR operator. The only difference is that the
   output bit will be set to 1 when both input bits are different. The following is the logic table for
   bitwise XOR:

+---------------+--------------+------------+
| input bit(1)  | input bit(2) | output bit |
+---------------+--------------+------------+
| 1             | 1            | 0          |
+---------------+--------------+------------+
| 1             | 0            | 1          |
+---------------+--------------+------------+
| 0             | 1            | 1          |
+---------------+--------------+------------+
| 0             | 0            | 0          |
+---------------+--------------+------------+


   Here is an example program that would show how the bitwise XOR works:

#include <stdlib.h>
#include <stdio.h>

int main() {
	printf("5^6 = %d\n", (5^6));
	return EXIT_SUCCESS;
}
   The above program would generate the following output:
5^6 = 3

   How you ask? let's take a look at the bits

00000101 & 00000110 = 00000011 // 3

   Comparing the input bits according to the bitwise XOR truth table. We arrive at 00000011 which is the
   binary representation of 3.

~ Bitwise NOT
   The bitwise NOT operator is a little different from the other operators as it accepts only one
   operand. The bitwise NOT operator flips the bits of it's operand. Let us take a look at the following
   example to understand it better,

#include <stdlib.h>
#include <stdio.h>

int main() {
	printf("~5=%d\n", ~5);
	return EXIT_SUCCESS;
}

   The above program would produce "~5=-6" as output. Let's look at how the program arrived at the value
   of -6 when the bitwise NOT operator was applied to 5.

~00000101 = 11111010 // -6

   Since negative numbers are stored as 2's complement, "11111010" would be -6 in it's decimal
   representation.

<< Bitwise Left Shift Operator
   The left shift operator like the name suggests, moves the bits in it's left operand to the right by
   the number of places specified in the right operand.

   So, if the binary representation of 5 is 00000101 then applying the shift operator like so "5 << 2"
   would move the bits to the left by two places striping the 2 most significant bits and adding 2 zeros
   as the least significant bits. The binary representation of the result would be 00010100 which is 20
   in decimal representation. Let's take a look this in code.

   As long as your set bits don't overflow and get dropped off, each left shift by 1 place has the
   effect of multiplying the left operand by 2.

#include <stdio.h>
#include <stdlib.h>

int main() {
	printf("5 << 2 = %d\n",(5 << 2));
	return EXIT_SUCCESS;
}

   As expected, the program prints an output of "5 << 2 = 20".

>> Bitwise Right Shift Operator
   The bitwise right shift operator is very similar to the left shift operator. Instead of shifting the
   bits to the left, believe it or not, it shifts the bits to the right. Yes, you didn't see that one
   coming did you?

   As the bits are shifted to the right, the least significant bits are dropped and an equivalent number
   of zeros are added as most significant bits.

   Here's some code.

#include <stdlib.h>
#include <stdio.h>

int main() {
	printf("5 >> 2 = %d\n", (5 >> 2));
	// 00000101 >> 2 == 00000001
	return EXIT_SUCCESS;
}

   Simple enough, when we shift the bits of 5 (00000101) 2 places to the right, we get (00000001) which
   is basically 1 in decimal and binary which is why the above code would print "5 >> 2 = 1".

   As long as your set bits don't overflow and get dropped off, each right shift by 1 place has the
   effect of dividing the left operand by 2.

   Now that you've finally mastered bitwise operators, you're probably thinking "What on earth would I
   do with this abundance of information?".

   I have got you covered. In the next section, we will discuss some of the practical uses of bitwise
   operators.

Practical Uses of Bitwise Operators

1. Storing Multiple Boolean Flags
   When working on limited memory devices, you can't really afford to have a thousand boolean flags
   assigned to variables. This is a really inefficient way to store your flags because Boolean values in
   C are basically a byte long. We don't need an entire byte to store just a zero or a one. The rest of
   the bits are going to remain zero throughout. You cannot afford to throw away precious memory when
   you're working with just KBs of RAM.

   So what is the solution? Let's look at the code.

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>

#define SECURITY_CHECK_FLAG  0b00000001
#define TWO_FACTOR_AUTH_FLAG 0b00000010
#define JUST_A_FLAG_FLAG     0b00000100

int main() {
	// THE BULKY WAY
	// MEMORY CONSUMED: 3 * sizeof(bool) = 3 bytes
	bool security_check   = true;
	bool two_factor_auth  = false;
	bool just_a_flag_flag = true;


	// THE OPTIMIZED BITWISE WAY
	// MEMORY CONSUMED: sizeof(unsigned short int) =  2 bytes

	unsigned short int flags = 0;           /* 0b00000000 */
	// ENABLING FLAGS
	flags |= TWO_FACTOR_AUTH_FLAG;          /* 0b00000010 */
	flags |= JUST_A_FLAG_FLAG;              /* 0b00000110 */

	printf("flags = %d\n", flags);          /* 6 == 0b00000110*/

	// CHECKING FLAG STATES
	if (flags&JUST_A_FLAG_FLAG) {
		printf("JUST_A_FLAG_FLAG is Enabled\n");
	}

	if (flags&SECURITY_CHECK_FLAG) {
		printf("SECURITY_CHECK_FLAG is enabled\n");
	}

	// Disabling Flags
	flags ^= TWO_FACTOR_AUTH_FLAG;          /* 0b00000100 */
	printf("flags = %d\n", flags);          /* 4 == 0b00000100 */

	// will not print because of flag being displabled
	if (flags&TWO_FACTOR_AUTH_FLAG) {
		printf("TWO_FACTOR_AUTH_FLAG is Enabled\n");
	}

	return EXIT_SUCCESS;
}

   You must have definitely wondered, all of this just to save 1 byte? well that's not entirely true.
   The increase in memory consumption per boolean flag is one byte, but while using the bitwise flags,
   you only need an additional byte every 8 flags you add to the program. To increase or decrease the
   number of flags you just need to change the datatype. if you need only less than 8 flags, you can use
   "unsigned char ". If you need more than 8 flags, you can use "unsigned long int" or "unsigned long
   long int" depending on your requirement.

2. Checking for Odd and Even Numbers
   Another trick you can achieve using bitwise operators is checking if an integer is even or odd. Let's
   see how we can do it.

#include <stdio.h>
#include <stdlib.h>

int main() {
	int x=3;
	if (!(x&1)) {
		printf("x is even");
	} else {
		printf("x is odd!");
	}
}

   So the logic behind !(x&1) is that the binary representation of 1 is 0001 (considering only 4 bits
   for simplicity) and the place value of the least significant bit is 1. All odd numbers can be
   represented as 2n+1. So the least significant bit is always 1 for odd numbers. So when compare any
   odd number with 0001 using the bitwise AND, the output bytes will be 0001. so by using the logical
   NOT operator, we are able to check for even numbers. For odd numbers you just need to remove the
   logical NOT and just check (x&1).

3. Swapping Variables Without Using a Third Variable
   So the swapping of two variables without involving a third variable can be achieved without the
   bitwise operators, but since you already know bitwise operators, why not?

#include <stdlib.h>
#include <stdio.h>

int main() {
	int a=3, b=4;
	printf("a: %d; b: %d\n");

            /* a == 0011; b == 0100 */
	a ^= b; /* a == 0111; b == 0100 */
	b ^= a; /* a == 0111; b == 0011 */
	a ^= b; /* a == 0100; b == 0011 */

	printf("a: %d; b: %d\n");
	return EXIT_SUCCESS;
}

4. Converting text casing (Lowercase & Uppercase)

#include <stdlib.h>
#include <stdio.h>

int main() {
	char word[8] = "sREedEv";
	char *wordptr = &word[0];

	while (wordptr < &word[7]) {
		printf("UPPERCASE: %c\n", *wordptr & '_'); // converts the char into uppercase regardless of the current casing
		printf("LOWERCASE: %c\n", *wordptr | ' '); // converts the char into lowercase regardless of the current casing
		wordptr++;
	}

	return EXIT_SUCCESS;
}

   So in the above example, we are using the bitwise AND with '_' char as the right operand to convert
   each character in the string to uppercase. And to convert to a lowercase character, we are using the
   bitwise OR operator with the space ASCII character as the right operand.

5. Checking if a number is a power of 2

#include <stdio.h>
#include <stdlib.h>

int main() {
	int a=32;
	if (a > 0 && (a & (a - 1)) == 0) {
		printf("%d is a power of 2", a);
	}
	return EXIT_SUCCESS;
}

   To understand how the above condition works, we need to understand a property of powers of two.
   Powers of two when represented in binary have only one set bit i.e., only one bit has the value of 1.
   Any power of 2, minus 1 would have binary representation where all bits are set except the bit that
   represents the next number (which is a power of 2).

   Using the bitwise AND with the number n and n-1, we can conclude that the number in question is a
   power of two if it returns 0.

   To understand how the above condition works, we need to understand a property of powers of two.
   Powers of two when represented in binary have only one set bit i.e., only one bit has the value of 1.
   Any power of 2, minus 1 would have binary representation where all bits are set except the bit that
   represents the next number (which is a power of 2).

   Using the bitwise AND with the number n and n-1, we can conclude that the number in question is a
   power of two if it returns 0.

   These are just some of the many use cases of bitwise operators. The more you understand the
   properties of binary numbers, datatypes and encoding the better you'll be able to utilize these
   operators. That's all for now. Byte Byte.


---

