filename: c_programming-concepts-used-as-data-structures_20211028.txt
https://www.geeksforgeeks.org/what-are-the-c-programming-concepts-used-as-data-structures/

What are the C programming concepts used as Data Structures
06 Aug, 2021

Data Types
Data-type in simple terms gives us information about the type of data.
Example, integer, character, etc.
Data-types in C language are declarations for the variables. Data-types are classified as:
Primitive or Built-in data types

Some of the examples of primitive data types are as follows

 +-------------------------------------+  
 | Whole Memory space                  | 
 |                                     | 
 | char ch                 int num     | 
 | [ A ]                   [ 123456 ]  | 
 | 100                     200         | 
 |                                     | 
 |                                     | 
 | double marks                        | 
 | [ 97.123456 ]                       | 
 | 300                                 | 
 |                                     | 
 +-------------------------------------+ 

Take a step-up from those "Hello World" programs. Learn to implement data structures like Heap, Stacks,
Linked List and many more! Check out our Data Structures in C course to start learning today.

Variable named ch refers to the memory address 100, has occupied 1 byte of memory, which holds the value
of char datatype 'A'.

num is of integer type referring to the memory address 200, has occupied 4 bytes of memory, and holds
value 123456.

marks is of double type, referring to the memory location 300, has occupied 8 bytes of memory, and holds
value 97.123456.

Note: These addresses(100, 200 & 300) are just for understanding purpose, actual addresses are large
hexadecimal numbers.
Arrays

An Array is a variable that can store multiple values of the same datatype. Array is a contiguous
memory segment.

Example:

 +-------------------------------------+  
 | Whole Memory space                  | 
 |                                     | 
 |                  arr                | 
 |                                     | 
 |       0      1      2      3        | 
 |    [     ][     ][     ][     ]     | 
 |    100    104    108    112         | 
 |                                     | 
 +-------------------------------------+ 

If you want to store 100 integers, you can use one array instead of using 100 different integer variables.

Syntax for declaration of array:
data_type   array_name[array_size];

Amount of space allocated = sizeof(data_type) * array_size

Example:
Declare an array that can hold values of 4 integers
int arr[4];

In this case, sizeof(int) = 4. Therefore, 4*4 = 16 bytes of memory is reserved for array.

Array declaration & Initialization Example:
int arr[5] = {10, 20, 30, 40, 50};

Array elements can be accessed using indices, which range from 0 to (array_size-1).

Below is the sample code for the usage of arrays in C:

// C implementation to demonstrate
// the usage of arrays

#include <stdio.h>

int main() {
	// Array Indexs-0	1	2	3	4
	int arr[5] = { 10, 20, 30, 40, 50 };

	int size = sizeof(arr);

	printf("Size of array is %d\n", size);

	printf("Data at index 2 is %d\n", arr[2]);
}

Output

Size of array is 20
Data at index 2 is 30

Structures
We have used primitive data types to store data. But what if the data we want to store is more complex?

Let's consider an example, we want to store information of the students in a class in a single
variable. So, a student has :

    Roll Number
    Name

Here, Roll number is of integer type and Name is string(array of characters) type.

Here, is the solution: structures
    Structure is a collection of variables(can be of different data types), under a single name.
    It is also a contiguous memory segment like array, but it allows data members of different data types.

Syntax to define structures:

struct structure_name {
	datatype member1_name;
	datatype member2_name;
	..
	datatype membern_name;
};

Example:

struct student {
	int roll_number;
	char name[20];
};

Now we have newly defined data type, struct student. We can create it's variables.

Syntax for variable declaration:
struct structure_name variable_name;

Example:

struct  student  ram;

// Members of structures can
// be accessed using "." operator
stu.roll_number = 64;
stu.name = "Saurabh";

 +-------------------------------------+  
 | Whole Memory space                  | 
 |                                     | 
 |                  arr                | 
 |     Roll No        Name             | 
 |    [  64   ][    Saurabh      ]     | 
 |    100      154                     | 
 |                                     | 
 |                                     | 
 +-------------------------------------+ 

No memory is allocated when we define a structure.

Size of structure is equal to total amount of space consumed by each data member.

Example:

In case of student structure, it is 4 + 20 = 24 bytes

Below is the illustration of structures with the help of code:

// C implementation to demonstrate
// the usage of structures

#include <stdio.h>
#include <string.h>

// Structure Defination
struct student {
	// data members
	int roll_no; // 4 bytes
	char name[20]; // 20 bytes
};

int main() {
	// Structure variable Declaration
	struct student stu;

	stu.roll_no = 64;
	strcpy(stu.name, "Saurabh");

	printf("Structure Data\n");
	printf("Roll No: %d\n", stu.roll_no);
	printf("Name: %s\n", stu.name);

	int size = sizeof(stu);

	printf("Size of Structure student");
	printf("is %d", size);
}

Output

Structure Data
Roll No: 64
Name: Saurabh
Size of Structure studentis 24

Pointers
    Pointers are the special type of variables that stores the address, rather than the value of the
    variable.
    They are used for indirect access of variables.
    If var is the name of variable, then &var gives the address of var.

Remembered the ampersand(&) symbol used in scanf function
scanf("%d", &var);

This is because we assign the values scanned to the memory location of var.
We are not interested in addresses, but the values stored at that address.

Syntax for declaration of pointer:
data_type *pointer_name; // (* = asterisk)

Example:

int *ptr;

Pointer may point to any datatype
It can hold address of any variable of the datatype it is pointing to.
An uninitialized pointer variable has NULL value.

Example:

int *ptr;
int num = 5;
ptr = &num;

 +-------------------------------------+  
 | Whole Memory space                  | 
 |                                     | 
 |    int *ptr                         | 
 |    [ 250 ]                          | 
 |    150   \                          | 
 |           \                         | 
 |            \                        | 
 |             \         int num       | 
 |              +------> [ 5 ]         | 
 |                       250           | 
 |                                     | 
 +-------------------------------------+ 

To get the value at the address, the pointer is pointing to, we use asterisk(*) operator.
So, in the above example, the ptr is holding address 250 and the value at address is 5.
Hence, *ptr is equal to 5.

Below is the illustration of the pointers with the help of code:

// C implementation to demonstrate
// pointers in C

#include <stdio.h>

int main() {
	int *ptr;
	int num = 5;

	ptr = &n;

	// This gives address of num
	printf("Value at ptr is %p\n", ptr);

	// This gives value at num
	printf("Value at *ptr is %d\n", *ptr);
}

Output

Value at ptr is 0x7ffdff4dca9c
Value at *ptr is 5

Size of Pointer variable is always constant in a system, irrespective of the datatype it is pointing to
and it is usually 8 bytes.

 +-------------------------------------+  
 | Whole Memory space                  | 
 |                                     | 
 |                      int *num_ptr   | 
 |                      [ 800 ]        | 
 |                      100            | 
 |                                     | 
 | char *ch_ptr                        | 
 | [  900  ]                           | 
 | 200                                 | 
 |                                     | 
 |                     Double marks    | 
 |                     [ 97.123456 ]   | 
 |                     300             | 
 |                                     | 
 +-------------------------------------+ 

Pointer to the Structure
    Pointer to the structure can be declared as normal variable.

Example:
struct student *p;

Here,  p is pointer and *p is the structure
Hence, to access the data members, we have to use

(*p).roll_no
(*p).name

C provides a special operator for accessing the data members via pointer i.e. -> arrow operator.
Note: (*p).x equivalent to p->x

Below is the illustration of the pointers to the structure:

// C implementation to illustrate
// the code of the structures

#include <stdio.h>
#include <stdlib.h>

// Structure Defination
struct student {
	int roll_no;
	char name[20];
};

int main() {
	struct student *p;

	p = (struct student*)
		malloc(sizeof(struct student));

	// Arrow operator
	p->roll_no = 99;

	printf("The value at roll");
	printf("number is %d", p->roll_no);

	return 0;
}

Output

The value at rollnumber is 99

Functions
    A function is a block of code that performs a specific task.
    A function may have an input, performs so tasks, then may provide some output.

 +-----------------------------------+  
 |                                   | 
 | Inputs    +---------+   Output    | 
 |  -------->|         |             | 
 |           |   Add   |----> a + b  | 
 |  -------->|         |             | 
 |           +---------+             | 
 +-----------------------------------+ 

In the above example, we are giving inputs as 2 numbers to a function. It is performing function of
addition. Then, it is return the sum of the two inputted numbers.

    Inputs are called are parameters of the function
    Output is called a return value

Functions can be classified into two categories:
Built-in or predefined functions

These are defined in the standard library of C language. We don't have to define these functions,
only thing needed is to call these functions. We just need to know the proper syntax and we can readily
use these functions.

Example:

printf(), scanf(), main(), etc are the predefined function.

User-defined functions
    These are the function, defined by the programmer to execute some task in the program.
    Dividing a complex problem into smaller chunks makes our program easy to understand.

To use the user-defined function, we have to perform two steps
    Defining function
    Calling function

Syntax of function definition:

return_type  function_name(<parameters_list>) {
	--tasks/operations--
	return return_value;
}

Note:
     A function can have 0 or more parameters.
     A function can have 0 or 1 return value.
     Function that doesn't return anything has return type void.

Below is the illustration of the functions in C:

// C implementation to
// illustrate functions in C

#include <stdio.h>

// program to demonstrate functions
// function defination
// function to print something

void print() {
	printf("GeeksforGeeks\n");
}

// Function to add two numbers
int add(int a, int b) {
	int sum;
	sum = a + b;
	return sum;
}

// Main Function
int main() {
	int res;

	// Function call
	print();

	res = add(5, 7);

	printf("Sum is %d", res);
}

Output

GeeksforGeeks
Sum is 12

Note: The type passed in the function call should be compatible with the received by the function body
as a parameter. Else, it will cause compilation error.
Function Classification based on type of call:
Function call by passing value

    When we call function by passing value(as in above program), values of original variables are unaffected.
    Instead of sending original variable, it sends copy of a variable.

Below is the illustration of the function call by passing value in C:

// C implementation for the
// function call by passing value

#include <stdio.h>

// Function pass by value
void increase_by_one(int x) {
	x++;
}

int main() {
	int num = 5;

	printf("Value before function");
	printf(" call %d\n", num);

	increase_by_one(num);

	printf("Value after function");
	printf(" call %d\n", num);
}

Output

Value before function call 5
Value after function call 5

In this program, we have passed variable a to the function, which was holding value 5. Then, we incremented
the value of variable received by function i.e. x by 1. So, value of x now is 6. But, this change is
limited to function scope only. The value of a in main will still be 5.

Function call by passing address
    If we want to change value of the variable passed, we have to pass the variable by address.
    This method uses the same variable instead of creating its new copy.

Below is the code of the function call by passing address:

// C implementation to demonstrate
// the usage of function call by
// passing reference

#include <stdio.h>

// function to demonstrate
// call by value
void increase_by_one(int *x) {
	(*x)++;
}

int main() {
	int num = 5;

	printf("Value before function");
	printf(" call %d\n", num);

	increase_by_one(&num);

	printf("Value after function");
	printf(" call %d\n", num);
}

Output

Value before function call 5
Value after function call 6

As we are passing address of variable, we have to receive it as pointer variable.
Function : Passing array as parameter

// C implementation to demonstrate
// the example of the passing as
// parameter in the function

#include <stdio.h>

// Function to print the array
void print_array(int arr[], int n) {
	// N is size of array
	int i;

	for (i = 0; i < n; i++)
		printf("%d ", arr[i]);
}

int main() {
	int arr[5] = { 10, 20, 30, 40, 50 };

	// Function Call
	print_array(arr, 5);
}

Output

10 20 30 40 50

Type Casting
Type casting is basically conversion of one datatype into another.

Syntax of type casting:

var2 = (datatype2) var1
where,
var1 is of datatype1 & var2 is of datatype2

Example:
If you want to convert value of an integer variable into float variable.

float x = (float)7/5;

To learn more about typecasting, refer Type Conversion in C
Dynamic Memory Allocation

As you know, an array is a collection of a fixed number of values. Once the size of an array is declared,
you cannot change it.

Sometimes the size of an array you declare may be insufficient. To solve this issue, you can allocate
memory dynamically at runtime. This is known as dynamic memory allocation.

Predefined functions used in dynamic memory allocation:
1. malloc()

    malloc stands for memory allocation.
    The malloc() function reserves a block of memory of the specified number of bytes and void* which
    can be casted into pointers of any form.

Syntax of malloc():
pointer_name = (cast_datatype*)malloc(size);

2. free()
    Dynamically allocated memory using malloc() doesn't get freed on its own. You must explicitly use
    free() to release this space.

Syntax for free:
free(pointer_name);

Note: These functions are declared in header file stdlib.h. To use these functions, you must first
include this header.

 +-----------------------------+  
 | Whole Memory space          | 
 |                             | 
 |                   int *ptr  | 
 |                   [ 300 ]   | 
 |                   150  |    | 
 |                        |    | 
 |  +---------------------+    | 
 |  |                          | 
 |  V                          | 
 |  [    ][    ][    ][    ]   | 
 |  300                        | 
 |                             | 
 +-----------------------------+ 

Below is the illustration of the Dynamic Memory Allocation in C:

// C implementation to demonstrate
// the code the Dynamic Memory
// Allocation

#include <stdio.h>
#include <stdlib.h>

int main() {
	int *ptr;
	int n = 5, i;

	ptr = (int*)malloc(n * sizeof(int));

	for (i = 0; i < n; i++)
		ptr[i] = i;

	printf("\nArray Elements are\n");

	for (i = 0; i < n; i++)
		printf("%d ", ptr[i]);

	free(ptr);
}

Output

Array Elements are
0 1 2 3 4

To learn more about Dynamic Memory Allocation, refer Dynamic Memory Allocation in C [**1]



---
[**1]
https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/

Dynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()
10 Jul, 2021

Since C is a structured language, it has some fixed rules for programming. One of them includes changing
the size of an array. An array is a collection of items stored at contiguous memory locations.

 +--------------------------------------------+
 |                                            |
 | [40][55][63][17][22][68][89][97][89]       |
 | 0   1   2   3   4   5   6   7   8          |
 |                                            |
 | Array Length = 9                           |
 | First Index  = 0                           |
 | last Index   = 8                           |
 |                                            |
 +--------------------------------------------+

arrays
Take a step-up from those "Hello World" programs. Learn to implement data structures like Heap, Stacks,
Linked List and many more! Check out our Data Structures in C course to start learning today.

As it can be seen that the length (size) of the array above made is 9. But what if there is a requirement
to change this length (size). For Example,

	If there is a situation where only 5 elements are needed to be entered in this array. In this case,
	the remaining 4 indices are just wasting memory in this array. So there is a requirement to lessen
	the length (size) of the array from 9 to 5.
	Take another situation. In this, there is an array of 9 elements with all 9 indices filled. But there
	is a need to enter 3 more elements in this array. In this case, 3 indices more are required. So the
	length (size) of the array needs to be changed from 9 to 12.

This procedure is referred to as Dynamic Memory Allocation in C.
Therefore, C Dynamic Memory Allocation can be defined as a procedure in which the size of a data structure
(like Array) is changed during the runtime.
C provides some functions to achieve these tasks. There are 4 library functions provided by C defined
under <stdlib.h> header file to facilitate dynamic memory allocation in C programming. They are:

	malloc()
	calloc()
	free()
	realloc()

Let's look at each of them in greater detail.

C malloc() method
The "malloc" or "memory allocation" method in C is used to dynamically allocate a single large
block of memory with the specified size. It returns a pointer of type void which can be cast into a
pointer of any form. It doesn't Iniatialize memory at execution time so that it has initializes each
block with the default garbage value initially.
Syntax:

ptr = (cast-type*) malloc(byte-size)
For Example:

	ptr = (int*) malloc(100 * sizeof(int));
	Since the size of int is 4 bytes, this statement will allocate 400 bytes of memory. And, the pointer
	ptr holds the address of the first byte in the allocated memory.

 +-------------------------------------------------------------------------------+
 |                                                                               |
 |                                 Malloc()                                      |
 |                                                                               |
 |                                 +---------> 4 bytes                           |
 |                             ____|____                                         |
 |                            /         \                                        |
 | int *ptr = (int *)malloc(5*sizeof(int));                                      |
 |                                                                               |
 |                                                                               |
 |      ptr = [                      ] ------> A large 20 bytes memory block is  |
 |            <- 20 bytes of memory ->         dinamically allocated to ptr      |
 |                                                                               |
 +-------------------------------------------------------------------------------+

If space is insufficient, allocation fails and returns a NULL pointer.
Example:

<code>
#include <stdio.h>
#include <stdlib.h>

int main() {

	// This pointer will hold the
	// base address of the block created
	int *ptr;
	int n, i;

	// Get the number of elements for the array
	printf("Enter number of elements:");
	scanf("%d",&n);
	printf("Entered number of elements: %d\n", n);

	// Dynamically allocate memory using malloc()
	ptr = (int*)malloc(n * sizeof(int));

	// Check if the memory has been successfully
	// allocated by malloc or not
	if (ptr == NULL) {
		printf("Memory not allocated.\n");
		exit(0);
	} else {
		// Memory has been successfully allocated
		printf("Memory successfully allocated using malloc.\n");

		// Get the elements of the array
		for (i = 0; i < n; ++i) {
			ptr[i] = i + 1;
		}

		// Print the elements of the array
		printf("The elements of the array are: ");
		for (i = 0; i < n; ++i) {
			printf("%d, ", ptr[i]);
		}
	}
	return 0;
}
</code>

Output:

Enter number of elements: 5
Memory successfully allocated using malloc.
The elements of the array are: 1, 2, 3, 4, 5,

C calloc() method
	"calloc" or "contiguous allocation" method in C is used to dynamically allocate the specified
	number of blocks of memory of the specified type. it is very much similar to malloc() but has two
	different points and these are:
	It initializes each block with a default value '0'.
	It has two parameters or arguments as compare to malloc().
	Syntax:

ptr = (cast-type*)calloc(n, element-size);
here, n is the no. of elements and element-size is the size of each element.

For Example:
	ptr = (float*) calloc(25, sizeof(float));
	This statement allocates contiguous space in memory for 25 elements each with the size of the float.

 +-------------------------------------------------------------------------------+
 |                                                                               |
 |                                 Calloc()                                      |
 |                                                                               |
 |                                 +---------> 4 bytes                           |
 |                             ____|____                                         |
 |                            /         \                                        |
 | int *ptr = (int *)calloc(5, sizeof(int));                                     |
 |                       |                                                       |
 |                       |                                                       |
 |                       V                                                       |
 |      ptr = [    ][    ][    ][    ][    ] ---> 5 blocks of 4 bytes is         |
 |            < 4b >                              dinamically allocated to ptr   |
 |            <---- 20 bytes of memory ---->                                     |
 |                                                                               |
 +-------------------------------------------------------------------------------+

If space is insufficient, allocation fails and returns a NULL pointer.
Example:

<code>
#include <stdio.h>
#include <stdlib.h>

int main() {

	// This pointer will hold the
	// base address of the block created
	int *ptr;
	int n, i;

	// Get the number of elements for the array
	n = 5;
	printf("Enter number of elements: %d\n", n);

	// Dynamically allocate memory using calloc()
	ptr = (int*)calloc(n, sizeof(int));

	// Check if the memory has been successfully
	// allocated by calloc or not
	if (ptr == NULL) {
		printf("Memory not allocated.\n");
		exit(0);
	} else {
		// Memory has been successfully allocated
		printf("Memory successfully allocated using calloc.\n");

		// Get the elements of the array
		for (i = 0; i < n; ++i) {
			ptr[i] = i + 1;
		}

		// Print the elements of the array
		printf("The elements of the array are: ");
		for (i = 0; i < n; ++i) {
			printf("%d, ", ptr[i]);
		}
	}
	return 0;
}
</code>

Output:

Enter number of elements: 5
Memory successfully allocated using calloc.
The elements of the array are: 1, 2, 3, 4, 5,


C free() method
"free" method in C is used to dynamically de-allocate the memory. The memory allocated using functions
malloc() and calloc() is not de-allocated on their own. Hence the free() method is used, whenever the
dynamic memory allocation takes place. It helps to reduce wastage of memory by freeing it.

Syntax:
free(ptr);

 +-------------------------------------------------------------------------------+
 |                                                                               |
 |                                 Free()                                        |
 |                                                                               |
 |                                 +---------> 4 bytes                           |
 |                             ____|____                                         |
 |                            /         \                                        |
 | int *ptr = (int *)calloc(5, sizeof(int));                                     |
 |                       |                                                       |
 |                       |                                                       |
 |                       V                                                       |
 |      ptr = [    ][    ][    ][    ][    ] ---> 5 blocks of 4 bytes is         |
 |            < 4b >                              dinamically allocated to ptr   |
 |            <---- 20 bytes of memory ---->                                     |
 |                       |                                                       |
 |                       V                                                       |
 |                 Operation on ptr                                              |
 |                       | free(ptr)                                             |
 |                       V                               ___                     |
 |      ptr = [    ][    ][    ][    ][    ]        ____|___|____                |
 |                       |                         |_____________|               |
 |                       |                           | | | | | |                 |
 |                       +---------------------->    | | | | | |                 |
 |                                                   | | | | | |                 |
 |                                                   |_________|                 |
 |                                                                               |
 +-------------------------------------------------------------------------------+

Example:

<code>
#include <stdio.h>
#include <stdlib.h>

int main() {

	// This pointer will hold the
	// base address of the block created
	int *ptr, *ptr1;
	int n, i;

	// Get the number of elements for the array
	n = 5;
	printf("Enter number of elements: %d\n", n);

	// Dynamically allocate memory using malloc()
	ptr = (int*)malloc(n * sizeof(int));

	// Dynamically allocate memory using calloc()
	ptr1 = (int*)calloc(n, sizeof(int));

	// Check if the memory has been successfully
	// allocated by malloc or not
	if (ptr == NULL || ptr1 == NULL) {
		printf("Memory not allocated.\n");
		exit(0);
	} else {
		// Memory has been successfully allocated
		printf("Memory successfully allocated using malloc.\n");

		// Free the memory
		free(ptr);
		printf("Malloc Memory successfully freed.\n");

		// Memory has been successfully allocated
		printf("\nMemory successfully allocated using calloc.\n");

		// Free the memory
		free(ptr1);
		printf("Calloc Memory successfully freed.\n");
	}
	return 0;
}
</code>

Output:

Enter number of elements: 5
Memory successfully allocated using malloc.
Malloc Memory successfully freed.

Memory successfully allocated using calloc.
Calloc Memory successfully freed.

C realloc() method
"realloc" or "re-allocation" method in C is used to dynamically change the memory allocation of
a previously allocated memory. In other words, if the memory previously allocated with the help of malloc
or calloc is insufficient, realloc can be used to dynamically re-allocate memory. re-allocation of memory
maintains the already present value and new blocks will be initialized with the default garbage value.

Syntax:
ptr = realloc(ptr, newSize);

where ptr is reallocated with new size 'newSize'.

 +-------------------------------------------------------------------------------+
 |                                                                               |
 |                                 Realloc()                                     |
 |                                                                               |
 |                                 +---------> 4 bytes                           |
 |                             ____|____                                         |
 |                            /         \                                        |
 | int *ptr = (int *)malloc(5*sizeof(int));                                      |
 |                       |                                                       |
 |                       |                                                       |
 |                       V                                                       |
 |      ptr = [    ][    ][    ][    ][    ] ---> A large 20 bytes memory block  |
 |            < 4b >                              dinamically allocated to ptr   |
 |            <---- 20 bytes of memory ---->                                     |
 |                       |                                                       |
 |                       V                                                       |
 |                 ptr = realloc(ptr, 10*sizeof(int));                           |
 |                       |                                                       |
 |                       |               +------> The size of ptr is changed     |
 |                       |               |        from 20 bytes to 40 bytes      |
 |                       |               |        dinamically                    |
 |                       V               |                                       |
 |      ptr = [    ][    ][    ][    ][    ][    ][    ][    ][    ][    ]       |
 |            <--------------- 20 bytes of memory ----------------------->       |
 |                                                                               |
 +-------------------------------------------------------------------------------+

If space is insufficient, allocation fails and returns a NULL pointer.
Example:

<code>
#include <stdio.h>
#include <stdlib.h>

int main() {

	// This pointer will hold the
	// base address of the block created
	int *ptr;
	int n, i;

	// Get the number of elements for the array
	n = 5;
	printf("Enter number of elements: %d\n", n);

	// Dynamically allocate memory using calloc()
	ptr = (int*)calloc(n, sizeof(int));

	// Check if the memory has been successfully
	// allocated by malloc or not
	if (ptr == NULL) {
		printf("Memory not allocated.\n");
		exit(0);
	} else {
		// Memory has been successfully allocated
		printf("Memory successfully allocated using calloc.\n");

		// Get the elements of the array
		for (i = 0; i < n; ++i) {
			ptr[i] = i + 1;
		}

		// Print the elements of the array
		printf("The elements of the array are: ");
		for (i = 0; i < n; ++i) {
			printf("%d, ", ptr[i]);
		}

		// Get the new size for the array
		n = 10;
		printf("\n\nEnter the new size of the array: %d\n", n);

		// Dynamically re-allocate memory using realloc()
		ptr = realloc(ptr, n * sizeof(int));

		// Memory has been successfully allocated
		printf("Memory successfully re-allocated using realloc.\n");

		// Get the new elements of the array
		for (i = 5; i < n; ++i) {
			ptr[i] = i + 1;
		}

		// Print the elements of the array
		printf("The elements of the array are: ");
		for (i = 0; i < n; ++i) {
			printf("%d, ", ptr[i]);
		}

		free(ptr);
	}

	return 0;
}
</code>

Output:

Enter number of elements: 5
Memory successfully allocated using calloc.
The elements of the array are: 1, 2, 3, 4, 5,

Enter the new size of the array: 10
Memory successfully re-allocated using realloc.
The elements of the array are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,

One another example for realloc() method is:

<code>
#include <stdio.h>
#include <stdlib.h>

int main() {
	int index = 0, i = 0, n,
		*marks; // this marks pointer hold the base address
		        // of  the block created
	int ans;
	marks = (int*)malloc(sizeof(
		int)); // dynamically allocate memory using malloc

	// check if the memory is successfully allocated by
	// malloc or not?
	if (marks == NULL) {
		printf("memory cannot be allocated");
	} else {
		// memory has successfully allocated
		printf("Memory has been successfully allocated by using malloc\n");
		printf("\n marks = %pc\n",
			   marks); // print the base or beginning
					   // address of allocated memory
		do {
			printf("\n Enter Marks\n");
			scanf("%d", &marks[index]); // Get the marks
			printf("would you like to add more(1/0): ");
			scanf("%d", &ans);

			if (ans == 1) {
				index++;
				marks = (int*)realloc(
					marks,
					(index + 1)
						* sizeof(
							int)); // Dynamically reallocate
							       // memory by using realloc
				// check if the memory is successfully
				// allocated by realloc or not?
				if (marks == NULL) {
					printf("memory cannot be allocated");
				} else {
					printf("Memory has been successfully "
						   "reallocated using realloc:\n");
					printf(
						"\n base address of marks are:%pc",
						marks); ////print the base or
						        ///beginning address of
						        ///allocated memory
				}
			}
		} while (ans == 1);

		// print the marks of the students
		for (i = 0; i <= index; i++) {
			printf("marks of students %d are: %d\n ", i, marks[i]);
		}
		free(marks);
	}
	return 0;
}
</code>


---

