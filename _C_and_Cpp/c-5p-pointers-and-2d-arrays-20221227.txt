filename: c_pointers-and-2d-arrays_p5_20221227.txt
https://www.youtube.com/watch?v=sHcnvZA2u88

1-D array:
int A[5]

200   204   208   212   216
[  2 ][  4 ][  6 ][  8 ][ 10 ]
A[0]  A[1]  A[2]  A[3]  A[4]

int *p = A;
print: A          // 200
print *A          // 2
print: *(A+2)     // 6
                  // *(A+i) is same as A[i]
                  // (A+1)  is same as &A[i]

p = A             // OK
A != p            // NOT OK! -- compilation error


---
2-D array:
int B[2][3]

400  404  408  |412  416  420
[ 2 ][ 3 ][ 6 ]|[ 4 ][ 5 ][ 8 ]
B[0][0]        |B[1][0]
\_____________/ \_____________/
      B[0]           B[1]


B[0] |
     |- 2x 1-D arrays of 3 integers
B[1] |


int p*     != B;
int (p*)[3] = B;

print: B or &B[0]                     // 400
print: *B or B[0] or &B[0][0]         // 400
print:  B+1 or &B[1]                  // 412
print: *(B+1) or B[1] or &B[1][0]     // 412
print: *(B+1)+2 or B[1]+2 or &B[1][2] // 420
print: *(*B+1) or B[0][1]             // 3
          |
          +-> B:  int(*)[3];
             *B:  B[0]    --> int *
           *B+1: &B[0][1]
        *(*B+1):  B[0][1] --> 3

B[i][j] = *(B[i] + j)
        = *(*(b + i) + j)

---
Pointers and multidimensional arrays
https://www.youtube.com/watch?v=_j5lhHWkbnQ

int C[3][2][2]

800   804      808   812    | 816   820      824   828    | 832
[  2 ][  5 ] | [  7 ][  9 ] | [  3 ][  4 ] | [  6 ][  1 ] | [  0 ][  8 ] | [ 11 ][ 13 ]
C[0][0][0]   |              | C[1][0][0]                  | C[2][0][0]
      C[0][0][1]            |       C[1][0][1]            |       C[2][0][1]
               C[0][1][0]   |                C[1][1][0]   |                C[2][1][0]
                     C[0][1][1]                    C[1][1][1]                    C[2][1][1]
C[0][0]      | C[0][1]      | C[1][0]      | C[1][1]      | C[2][0]      | C[2][1]
C[0]                        | C[1]                        | C[2]

int(*p)[2][2] = C

print: C                                       // 800
print: *C or C[0] or &C[0][0] = int(*)[2]      // 800
print: *(C[0][1] + 1) or C[0][1][1]            // 9
print: *(C[1] + 1) or C[1][1]  or &C[1][1][0]  // 824




C[i][j][k] = *(C[i][j] + k) = *(*(C[i] + j) + k) = *(*(*(C + i) + j) + k)


TEST program:

#include <stdio.h>

/* void Func1D(int *A) = void Func1D(int A[])               */ // passing 1-D array
/* void Func2D(int (*B)[3]) = void Func2D(int B[][3])       */ // passing 2-D array
/* void Func3D(int (*C)[2][2]) = void Func3D(int C[][2][2]) */ // passing 3-D array


int main() {
	int C[3][2][2] = { {{2,5}, {7,9}},
                       {{3'4}, {6,1}},
                       {{0,8}, {11,13}}
                     };               // C returns (*)[2][2]

	printf("%d %d %d %d\n", C, *C, C[0], &C[0][0]); // all are pointers
	printf("%d\n", *(C[0][0] + 1));                 // C[0][0][1] = 5

	int A[] = {1,2};                  // A returns int *
	int B[2][3] = {{2,4,6},{5,7,8}};  // B returns (*)[3]
	/* Func1D(A) is OK since A returns int * */
	/* Func2D(B) is OK since B returns int (*)[3] */
	/* if X[2][4] then Func2D(X) is NOT OK! --> X returns (*)[4] but Funa2Dc accepts (*)[3]
	   so:
	   if X[5][3] then Func2D(X) is OK since X returns int (*)[3]!
	*/
	/* Func3D(C) is OK since C returns int (*)[2][2] */


