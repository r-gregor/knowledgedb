filename: c_function-how-to-pass-a-HANDLE-as-reference_20240819.txt
https://www.codeproject.com/Questions/4073280/C-function-how-to-pass-a-HANDLE-as-reference

C function : how to pass a HANDLE as reference
15-May-19

   Hi,
   I have a C application.
   I want to build an init function which creates handles to events which will be used outside the init
   function
   Something like this:

InitEvents(HANDLE hEvent1, char *Event1Name, HANDLE hEvent2, char *Event2Name) {
	hEvent1 = CreateEvent(..Event1Name...);
	hEvent2 = CreateEvent(..Event2Name...);
}

void main() {
	HANDLE h1,h2;
	InitEvents(h1, "ONE", h2, "TWO");
	SetEvent(hEvent1);
}
   How can I pass the HANDLES by reference so the created handles will be available in the main
   function?

   Thanks!

   What I have tried:
   Declaring the InitEvents(HANDLE *hEvent1.....)
   hEvent1 = CreateEvent(..Event1Name...);

***
Solution 1
   This is C, not C# or C++: you don't have references - all parameters in C are passed by value (i.e. a
   copy of the variable content is passed to the function, not the variable itself).

   To pass a "reference" you pass the address of the variable and receive it in the function as a
   pointer:

void InitEvents(HANDLE *phEvent1 ...) {
	*phEvent1 = CreateEvent(...);
	...
}

void main() {
	HANDLE h1, h2;
	InitEvents(&h1, ....);
	...
}


***
   Thanks!
   It worked well with handles but i also want to create a shared memory in the init function
   which means that the Init function will look like this

InitEvents(HANDLE hEvent1, char *Event1Name, HANDLE hEvent2, char *Event2Name,
		unsigned char *pSharedMemory, char *SharedMemName )
{
	hEvent1 = CreateEvent(..Event1Name...);
	hEvent2 = CreateEvent(..Event2Name...);
	CreateSharedMemory(..SharedMemName ..);
}

void main() {
	HANDLE h1,h2;
	unsigned char pBuf[1000];
	InitEvents(h1, "ONE", h2, "TWO", pBuf, "SHARED");
	SetEvent(hEvent1);
	memcpy(pBuf,SomeData, DataLen);
}

   I tried passing **char and calling Init with &pBuf

***
Solution 2
   You may also pass an array of struct to your InitEvents function, something like (but more robust)

typedef struct {
	HANDLE handle;
	char *name;
} Event;

void InitEvents(Event event[], size_t event_count) {
	event[0].handle = ...
	event[0].name = ...

	event[1].handle = ...
	event[1].name = ...
}

int main() {

	Event event[2];
	InitEvents(event);
	//...
}


***
   I would suggest a global struct, so it is visible in the whole code without fizzling.


---

