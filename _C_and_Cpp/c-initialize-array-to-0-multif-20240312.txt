filename: c_initialize-array-to-0-multif_20240312.txt
https://en.cppreference.com/w/c/language/array_initialization

Array initialization

   When initializing an object of array type, the initializer must be either a string
   literal (optionally enclosed in braces) or be a brace-enclosed list of initialized for array members:

   = string-literal                            (1)
   = { expression , ... }                      (2) (until C99)
   = { designator(optional) expression , ... } (2) (since C99)
   = { }                                       (3) (since C23)

   1) string literal initializer for character and wide character arrays
   2) comma-separated list of constant(until C99) expressions that are initializers for array elements,
   optionally using array designators of the form [ constant-expression ] = (since C99)
   3) empty initializer empty-initializes every element of the array

   Arrays of known size and arrays of unknown size may be initialized, but not VLAs(since C99)(until
   C23). A VLA can only be empty-initialized.(since C23)

   All array elements that are not initialized explicitly are empty-initialized.

Initialization from strings
   String literal (optionally enclosed in braces) may be used as the initializer for an array of
   matching type:
     * ordinary string literals and UTF-8 string literals(since C11) can initialize arrays of any
       character type (char, signed char, unsigned char)
     * L-prefixed wide string literals can be used to initialize arrays of any type compatible with
       (ignoring cv-qualifications) wchar_t

     * u-prefixed wide string literals can be used to initialize arrays of any type compatible with
       (ignoring cv-qualifications) char16_t
     * U-prefixed wide string literals can be used to initialize arrays of any type compatible with
       (ignoring cv-qualifications) char32_t

   (since C11)

   Successive bytes of the string literal or wide characters of the wide string literal, including the
   terminating null byte/character, initialize the elements of the array:
char str[] = "abc"; // str has type char[4] and holds 'a', 'b', 'c', '\0'
wchar_t wstr[4] = L"猫"; // str has type wchar_t[4] and holds L'猫', '\0', '\0', '\0'

   If the size of the array is known, it may be one less than the size of the string literal, in which
   case the terminating null character is ignored:
char str[3] = "abc"; // str has type char[3] and holds 'a', 'b', 'c'

   Note that the contents of such array are modifiable, unlike when accessing a string literal directly
   with char* str = "abc";.

Initialization from brace-enclosed lists
   When an array is initialized with a brace-enclosed list of initializers, the first initializer in the
   list initializes the array element at index zero (unless a designator is specified)(since C99), and
   each subsequent initializer without a designator (since C99)initializes the array element at index
   one greater than the one initialized by the previous initializer.
int x[] = {1,2,3}; // x has type int[3] and holds 1,2,3
int y[5] = {1,2,3}; // y has type int[5] and holds 1,2,3,0,0
int z[4] = {1}; // z has type int[4] and holds 1,0,0,0
int w[3] = {0}; // w has type int[3] and holds all zeroes

   It's an error to provide more initializers than elements when initializing an array of known size
   (except when initializing character arrays from string literals).

   A designator causes the following initializer to initialize of the array element described by the
   designator. Initialization then continues forward in order, beginning with the next element after the
   one described by the designator.
int n[5] = {[4]=5,[0]=1,2,3,4}; // holds 1,2,3,4,5

int a[MAX] = { // starts initializing a[0] = 1, a[1] = 3, ...
    1, 3, 5, 7, 9, [MAX-5] = 8, 6, 4, 2, 0
};
// for MAX=6,  array holds 1,8,6,4,2,0
// for MAX=13, array holds 1,3,5,7,9,0,0,0,8,6,4,2,0 ("sparse array")

   (since C99)

   When initializing an array of unknown size, the largest subscript for which an initializer is
   specified determines the size of the array being declared.

Nested arrays
   If the elements of an array are arrays, structs, or unions, the corresponding initializers in the
   brace-enclosed list of initializers are any initializers that are valid for those members, except
   that their braces may be omitted as follows:

   If the nested initializer begins with an opening brace, the entire nested initializer up to its
   closing brace initializes the corresponding array element:

int y[4][3] = { // array of 4 arrays of 3 ints each (4x3 matrix)
    { 1 },      // row 0 initialized to {1, 0, 0}
    { 0, 1 },   // row 1 initialized to {0, 1, 0}
    { [2]=1 },  // row 2 initialized to {0, 0, 1}
};              // row 3 initialized to {0, 0, 0}

   If the nested initializer does not begin with an opening brace, only enough initializers from the
   list are taken to account for the elements or members of the sub-array, struct or union; any
   remaining initializers are left to initialize the next array element:

int y[4][3] = {    // array of 4 arrays of 3 ints each (4x3 matrix)
1, 3, 5, 2, 4, 6, 3, 5, 7 // row 0 initialized to {1, 3, 5}
};                        // row 1 initialized to {2, 4, 6}
                          // row 2 initialized to {3, 5, 7}
                          // row 3 initialized to {0, 0, 0}

struct { int a[3], b; } w[] = { { 1 }, 2 }; // array of structs
   // { 1 } is taken to be a fully-braced initializer for element #0 of the array
   // that element is initialized to { {1, 0, 0}, 0}
   // 2 is taken to be the first initialized for element #1 of the array
   // that element is initialized { {2, 0, 0}, 0}

   Array designators may be nested; the bracketed constant expression for nested arrays follows the
   bracketed constant expression for the outer array:
int y[4][3] = {[0][0]=1, [1][1]=1, [2][0]=1};  // row 0 initialized to {1, 0, 0}
                                               // row 1 initialized to {0, 1, 0}
                                               // row 2 initialized to {1, 0, 0}
                                               // row 3 initialized to {0, 0, 0}

   (since C99)

Notes
   The order of evaluation of subexpressions in an array initializer is indeterminately sequenced in
   C (but not in C++ since C++11):
int n = 1;
int a[2] = {n++, n++}; // unspecified, but well-defined behavior,
                       // n is incremented twice (in arbitrary order)
                       // a initialized to {1, 2} and to {2, 1} are both valid
puts((char[4]){'0'+n} + n++); // undefined behavior:
                              // increment and read from n are unsequenced

   In C, the braced list of an initializer cannot be empty. C++ allows empty list:
   (until C23)

   An empty initializer can be used to initialize an array:
   (since C23)
int a[3] = {0}; // valid C and C++ way to zero-out a block-scope array
int a[3] = {}; // valid C++ way to zero-out a block-scope array; valid in C since C23

   As with all other initialization, every expression in the initializer list must be a constant
   expression when initializing arrays of static or thread-local storage duration:
static char* p[2] = {malloc(1), malloc(2)}; // error

Example

int main(void) {
	// The following four array declarations are the same
	short q1[4][3][2] = {
		{ 1 },
		{ 2, 3 },
		{ 4, 5, 6 }
	};

	short q2[4][3][2] = {1, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 5, 6};

	short q3[4][3][2] = {
		{
			{ 1 },
		},
		{
			{ 2, 3 },
		},
		{
			{ 4, 5 },
			{ 6 },
		}
	};

	short q4[4][3][2] = {1, [1]=2, 3, [2]=4, 5, 6};


	// Character names can be associated with enumeration constants
	// using arrays with designators:
	enum { RED, GREEN, BLUE };
	const char *nm[] = {
		[RED] = "red",
		[GREEN] = "green",
		[BLUE] = "blue",
	};
}

References
     * C17 standard (ISO/IEC 9899:2018):
          + 6.7.9/12-39 Initialization (p: 101-105)

     * C11 standard (ISO/IEC 9899:2011):
          + 6.7.9/12-38 Initialization (p: 140-144)

     * C99 standard (ISO/IEC 9899:1999):
          + 6.7.8/12-38 Initialization (p: 126-130)

     * C89/C90 standard (ISO/IEC 9899:1990):
          + 6.5.7 Initialization

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/language/array_initialization&oldid=144380"



---
https://www.delftstack.com/howto/c/c-initialize-array-to-0/

How to Initialize an Array to 0 in C

   This tutorial introduces how to initialize an array to 0 in C.

   The declaration of an array in C is as given below.
char ZEROARRAY[1024];

   It becomes all zeros at runtime at the global scope. There is a shorthand method if it is a local
   array. The declaration and initialization are as below.
char ZEROARRAY[1024] = {0};

   If an array is partially initialized, elements that are not initialized will receive the value 0 of
   the relevant data type. The compiler will fill the unwritten entries with zeros.

   If there is no initializer is specified, the objects having static storage will initialize to 0. The
   declaration is as given below:

static int myArray[10];

   An array is initialized to 0 if the initializer list is empty or 0 is specified in the initializer
   list. The declaration is as given below:

int number[5] = {};
int number[5] = {0};

   The most simple technique to initialize an array is to loop through all the elements and set them as
   0.

#include <stdio.h>

int main(void) {
	int numberArray[10], counter;

	for (counter = 0; counter < 5; counter++) {
		numberArray[counter] = 0;
	}
	printf("Array elements are:\n");

	for (counter = 0; counter < 5; counter++) {
		printf("%d", numberArray[counter]);
	}

	return 0;
}

   Output:
Array elements are:
00000

Use C Library Function memset()
   The function memset() is a library function from string.h. It is used to fill a block of memory with
   a particular value.

   The syntax of memset() function is below.

void *memset(void *pointerVariable, int anyValue, size_t numberOfBytes);

   Where,
     * pointerVariable is a pointer variable to the block of memory to fill.
     * anyValue is the value to be set. This is an integer value, but the function fills the block of
       memory using this value's unsigned char conversion.
     * numberOfBytes is the number of bytes to be set to the value.

   This function returns a pointer to the memory area pointerVariable.

   The complete program is as below:

#include <stdio.h>
#include <string.h>

void printArrayvalues(int anyArray[], int anyNumber) {
	int index;
	for (index = 0; index < anyNumber; index++) printf("%d ", anyArray[index]);
}

int main(void) {
	int number = 10;
	int arrayValues[number];

	memset(arrayValues, 0, number * sizeof(arrayValues[0]));
	printf("Array after memset()\n");

	printArrayvalues(arrayValues, number);

	return 0;
}

   Output:
Array after memset()
0 0 0 0 0 0 0 0 0 0

Initialize the Array to Values Other Than 0
   Initialization of an array to values other than 0 with gcc is as below:

int myArrayValues[1024] = {[0 ... 1023] = -1};

   Every member of an array can be explicitly initialized by omitting the dimension. The declaration is
   as below:

int myArrayValues[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};

   The compiler will deduce the dimension from the initializer list and for multidimensional arrays,
   only the outermost dimension may be omitted.

int myPoints[][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};



---
https://www.geeksforgeeks.org/different-ways-to-initialize-all-members-of-an-array-to-the-same-value-in-c/

Different ways to Initialize all members of an array to the same value in C

   An array is a collection of data that holds fixed number of values of same type. For example: if you
   want to store marks of 100 students, you can create an array for it.

int num[100];

   How to declare an array in C?
Data_type  array_name[size_of_array];

   For example,

float num[10];

   Below are some of the different ways in which all elements of an array can be initialized to the same
   value:

1. Initializer List: To initialize an array in C with the same value, the naive way is to provide an
       initializer list. We use this with small arrays.
int num[5] = {1, 1, 1, 1, 1};

       This will initialize the num array with value 1 at all index. We may also ignore the size of the
       array:
int num[ ] = {1, 1, 1, 1, 1}

       The array will be initialized to 0 in case we provide empty initializer list or just specify 0 in
       the initializer list.
int num[5] =  { };               // num = [0, 0, 0, 0, 0]
int num[5] =  { 0 };             // num = [0, 0, 0, 0, 0]

2. Designated Initializer: This initializer is used when we want to initialize a range with the same
       value. This is used only with GCC compilers. [ first . . . last ] = value;
int num[5]={ [0 . . . 4 ] = 3 };               // num = { 3, 3, 3, 3, 3}

       We may also ignore the size of array:
int num[  ]={ [0 . . . 4 ] = 3 }               // num = { 3, 3, 3, 3, 3}

3. Macros: For initializing a huge array with the same value we can use macros.

#include<stdio.h>

#define x1 1
#define x2 x1, x1
#define x4 x2, x2
#define x8 x4, x4
#define x16 x8, x8
#define x32 x16, x16

int main(void) {

	// array declaration
	int num[] = { x32, x8, x4, x1};

	int size = sizeof(num)/ sizeof(int);    // 32+8+4+1= 45
	printf("The size of the array is %d\n", size);
	printf("The value of element in the array at index 5 is %d ", num[4]);

	return 0;
}

       Output:
The size of the array is 45
The value of element in the array at index 5 is 1

4. Using For Loop: We can also use for loop to initialize an array with the same value.

#include<stdio.h>

int main(void) {
	int size = 6;
	int val = 1;

	// array declaration
	int arr[size];

	int i;

	// initializing array elements
	for (i = 0; i < size ; i++){
		arr[i] = val;
	}

	// print array
	printf("The array is:");
	for (i = 0; i < size ; i++){
		printf("%d ", arr[i]);
	}

	return 0;
}

       Output:
The array is:1 1 1 1 1 1



---
https://www.quora.com/How-do-I-initialize-a-char-array-in-C/answer/Chris-Reid-7

How do I initialize a char array in C?

Since a while ago this is how:

    char arr[100] = {'\0'};  // all nulchar
    int irr[100] {0};        // all 0
    double darr = {-1.0};    // all  -1.0

This is a shortcut syntax to initialize all members of the array to a single value.

Otherwise if you need to do it explicitly, such as in a dynamic memory allocation:

    char*  str = calloc(100, sizeof(char));   //  all zeros 
    char*  str = malloc(100 * sizeof(char));  //  raw memory 
    memset( str, '\0', 100 * sizeof(char));   //  set to char 
    for(int i =0 i < 100; i++) str[0] = '\0'; // manual set each 

I have seen some old code where the first element is set to nulchar only, but that is a bad practice,
because it then becomes easy to screw up and not terminate the string properly. Modern machines are fast and
so the extra few cycles needed to ensure proper string formation is worth making sure.



---
https://www.quora.com/How-do-you-initialize-a-char-array-with-null/answer/Hare-Preya

How do you initialize a char array with null?

In C and C++, you can initialize a char array with the null character ('\0') in several ways. Here are a few
examples:

Using a string literal:
    char myArray[10] = ""; 

This will initialize the char array with an empty string, which is equivalent to a null-terminated string.
The last element of the array will contain the null character.

2.Using a character literal:
    char myArray[10] = {'\0'}; 

This will initialize the char array with a single null character, and the remaining elements of the array
will contain undefined values.

3.Using memset() function:
    char myArray[10]; 
    memset(myArray, 0, sizeof(myArray)); 

This will set each byte of the char array to 0 (null character), effectively initializing the array with
null characters.

4.Using a for loop:
char myArray[10];
for (int i = 0; i < 10; i++) {
	myArray[i] = '\0';
}

This will initialize each element of the char array with a null character, one element at a time.

It's worth noting that the size of the array should be large enough to hold the null character, otherwise it
could lead to buffer overflow.



---

