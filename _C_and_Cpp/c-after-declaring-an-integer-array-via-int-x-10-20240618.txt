filename: c_after-declaring-an-integer-array-via-int-x-10_20240618.txt
https://cstdspace.quora.com/In-C-after-declaring-an-integer-array-via-int-x-10-what-might-be-some-practical-differences-between-x-and-x-0-2

In C, after declaring an integer array via ‘int x [10]’, what might be some practical differences between x
and &x[0]?

One of the main things is the different behavior of the sizeof operator and thus de facto semi-standard 
_countof macro.

In the first case
    sizeof(x) = 10*sizeof(int)

In the second case
    sizeof(&x[0])= sizeof(int *)

You can test it by the following program:

#include<stdio.h>
int main() {
	int x[10];
	printf("sizeof(x)=%zu\n", sizeof(x));
	printf("sizeof(&x[0])=%zu\n", sizeof(&x[0]));
	return 0;
}

It will print the following on a x86_64:
    sizeof(x)=40
    sizeof(&x[0])=8


---

