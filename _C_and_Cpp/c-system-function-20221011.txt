filename: c_system_function_20221011.txt
from: https://www.quora.com/What-is-the-C-program-to-shutdown-a-computer-in-windows-10/answer/Paritosh-Kr-Rakesh
      https://man7.org/linux/man-pages/man3/system.3.html
      https://linux.die.net/man/3/execl

What is the C program to shutdown a computer in windows 10?

The simplest way is to use the:

    system(command);

function in C to run the "shutdown.exe" file present in:

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

int main() {
	char c;
	printf("Enter Y/N: ");
	scanf("%c",&c);

	switch(c) {
		case 'Y': system("shutdown -s"); break;
		case 'N': ; break;
		default: ; break;
	}
	return 0;
}


---
https://man7.org/linux/man-pages/man3/system.3.html

SYSTEM(3): system - execute a shell command

SYNOPSIS
       #include <stdlib.h>

       int system(const char *command);

DESCRIPTION
       The system() library function uses fork(2) to create a child
       process that executes the shell command specified in command
       using execl(3) as follows:

           execl("/bin/sh", "sh", "-c", command, (char *) NULL);

       system() returns after the command has been completed.

       During execution of the command, SIGCHLD will be blocked, and
       SIGINT and SIGQUIT will be ignored, in the process that calls
       system().  (These signals will be handled according to their
       defaults inside the child process that executes command.)

       If command is NULL, then system() returns a status indicating
       whether a shell is available on the system.

RETURN VALUE
       The return value of system() is one of the following:

       *  If command is NULL, then a nonzero value if a shell is
          available, or 0 if no shell is available.

       *  If a child process could not be created, or its status could
          not be retrieved, the return value is -1 and errno is set to
          indicate the error.

       *  If a shell could not be executed in the child process, then
          the return value is as though the child shell terminated by
          calling _exit(2) with the status 127.

       *  If all system calls succeed, then the return value is the
          termination status of the child shell used to execute command.
          (The termination status of a shell is the termination status
          of the last command it executes.)

       In the last two cases, the return value is a "wait status" that
       can be examined using the macros described in waitpid(2).  (i.e.,
       WIFEXITED(), WEXITSTATUS(), and so on).

       system() does not affect the wait status of any other children.

ERRORS
       system() can fail with any of the same errors as fork(2).

ATTRIBUTES
       For an explanation of the terms used in this section, see
       attributes(7).

       +--------------------------------------+---------------+---------+
       |Interface                             | Attribute     | Value   |
       +--------------------------------------+---------------+---------+
       |system()                              | Thread safety | MT-Safe |
       +--------------------------------------+---------------+---------+

CONFORMING TO
       POSIX.1-2001, POSIX.1-2008, C89, C99.

NOTES
       system() provides simplicity and convenience: it handles all of
       the details of calling fork(2), execl(3), and waitpid(2), as well
       as the necessary manipulations of signals; in addition, the shell
       performs the usual substitutions and I/O redirections for
       command.  The main cost of system() is inefficiency: additional
       system calls are required to create the process that runs the
       shell and to execute the shell.

       If the _XOPEN_SOURCE feature test macro is defined (before
       including any header files), then the macros described in
       waitpid(2) (WEXITSTATUS(), etc.) are made available when
       including <stdlib.h>.

       As mentioned, system() ignores SIGINT and SIGQUIT.  This may make
       programs that call it from a loop uninterruptible, unless they
       take care themselves to check the exit status of the child.  For
       example:

		while (something) {
			int ret = system("foo");

			if (WIFSIGNALED(ret) &&
					(WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT))
				break;
		}

       According to POSIX.1, it is unspecified whether handlers
       registered using pthread_atfork(3) are called during the
       execution of system().  In the glibc implementation, such
       handlers are not called.

       In versions of glibc before 2.1.3, the check for the availability
       of /bin/sh was not actually performed if command was NULL;
       instead it was always assumed to be available, and system()
       always returned 1 in this case.  Since glibc 2.1.3, this check is
       performed because, even though POSIX.1-2001 requires a conforming
       implementation to provide a shell, that shell may not be
       available or executable if the calling program has previously
       called chroot(2) (which is not specified by POSIX.1-2001).

       It is possible for the shell command to terminate with a status
       of 127, which yields a system() return value that is
       indistinguishable from the case where a shell could not be
       executed in the child process.

   Caveats
       Do not use system() from a privileged program (a set-user-ID or
       set-group-ID program, or a program with capabilities) because
       strange values for some environment variables might be used to
       subvert system integrity.  For example, PATH could be manipulated
       so that an arbitrary program is executed with privilege.  Use the
       exec(3) family of functions instead, but not execlp(3) or
       execvp(3) (which also use the PATH environment variable to search
       for an executable).

       system() will not, in fact, work properly from programs with set-
       user-ID or set-group-ID privileges on systems on which /bin/sh is
       bash version 2: as a security measure, bash 2 drops privileges on
       startup.  (Debian uses a different shell, dash(1), which does not
       do this when invoked as sh.)

       Any user input that is employed as part of command should be
       carefully sanitized, to ensure that unexpected shell commands or
       command options are not executed.  Such risks are especially
       grave when using system() from a privileged program.

BUGS
       If the command name starts with a hyphen, sh(1) interprets the
       command name as an option, and the behavior is undefined.  (See
       the -c option to sh(1).)  To work around this problem, prepend
       the command with a space as in the following call:

               system(" -unfortunate-command-name");

SEE ALSO
       sh(1), execve(2), fork(2), sigaction(2), sigprocmask(2), wait(2),
       exec(3), signal(7)

COLOPHON
       This page is part of release 5.13 of the Linux man-pages project.
       A description of the project, information about reporting bugs,
       and the latest version of this page, can be found at
       https://www.kernel.org/doc/man-pages/.

2021-03-22  SYSTEM(3)

Pages that refer to this page: execve(2),  confstr(3),  curs_scr_dump(3x),  exec(3),  __pmprocessexec(3),
popen(3)



---
https://linux.die.net/man/3/execl

execl(3) - Linux man page

Name
   execl, execlp, execle, execv, execvp, execvpe - execute a file

Synopsis

   #include <unistd.h>

   extern char **environ;

   int execl(const char *path, const char *arg, ...);
   int execlp(const char *file, const char *arg, ...);
   int execle(const char *path, const char *arg,
   ..., char * const envp[]);
   int execv(const char *path, char *const argv[]);
   int execvp(const char *file, char *const argv[]);
   int execvpe(const char *file, char *const argv[],
   char *const envp[]);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):
   execvpe(): _GNU_SOURCE

Description
   The exec() family of functions replaces the current process image with a new process image. The
   functions described in this manual page are front-ends for execve(2). (See the manual page for
   execve(2) for further details about the replacement of the current process image.)

   The initial argument for these functions is the name of a file that is to be executed.

   The const char *arg and subsequent ellipses in the execl(), execlp(), and execle() functions can be
   thought of as arg0, arg1, ..., argn. Together they describe a list of one or more pointers to
   null-terminated strings that represent the argument list available to the executed program. The first
   argument, by convention, should point to the filename associated with the file being executed. The
   list of arguments must be terminated by a NULL pointer, and, since these are variadic functions, this
   pointer must be cast (char *) NULL.

   The execv(), execvp(), and execvpe() functions provide an array of pointers to null-terminated
   strings that represent the argument list available to the new program. The first argument, by
   convention, should point to the filename associated with the file being executed. The array of
   pointers must be terminated by a NULL pointer.

   The execle() and execvpe() functions allow the caller to specify the environment of the executed
   program via the argument envp. The envp argument is an array of pointers to null-terminated strings
   and must be terminated by a NULL pointer. The other functions take the environment for the new
   process image from the external variable environ in the calling process.

   Special semantics for execlp() and execvp()
   The execlp(), execvp(), and execvpe() functions duplicate the actions of the shell in searching for
          an executable file if the specified filename does not contain a slash (/) character. The file
          is sought in the colon-separated list of directory pathnames specified in the PATH environment
          variable. If this variable isn't defined, the path list defaults to the current directory
          followed by the list of directories returned by confstr(_CS_PATH). (This confstr(3) call
          typically returns the value "/bin:/usr/bin".)
          If the specified filename includes a slash character, then PATH is ignored, and the file at
          the specified pathname is executed.
          In addition, certain errors are treated specially.
          If permission is denied for a file (the attempted execve(2) failed with the error EACCES),
          these functions will continue searching the rest of the search path. If no other file is
          found, however, they will return with errno set to EACCES.
          If the header of a file isn't recognized (the attempted execve(2) failed with the error
          ENOEXEC), these functions will execute the shell (/bin/sh) with the path of the file as its
          first argument. (If this attempt fails, no further searching is done.)

Return Value
   The exec() functions only return if an error has occurred. The return value is -1, and errno is set
   to indicate the error.

Errors
   All of these functions may fail and set errno for any of the errors specified for execve(2).

Versions
   The execvpe() function first appeared in glibc 2.11.

Conforming To
   POSIX.1-2001, POSIX.1-2008.

   The execvpe() function is a GNU extension.

Notes
   On some other systems, the default path (used when the environment does not contain the variable
   PATH) has the current working directory listed after /bin and /usr/bin, as an anti-Trojan-horse
   measure. Linux uses here the traditional "current directory first" default path.

   The behavior of execlp() and execvp() when errors occur while attempting to execute the file is
   historic practice, but has not traditionally been documented and is not specified by the POSIX
   standard. BSD (and possibly other systems) do an automatic sleep and retry if ETXTBSY is encountered.
   Linux treats it as a hard error and returns immediately.

   Traditionally, the functions execlp() and execvp() ignored all errors except for the ones described
   above and ENOMEM and E2BIG, upon which they returned. They now return if any error other than the
   ones described above occurs.

See Also
   sh(1), execve(2), fork(2), ptrace(2), fexecve(3), environ(7)

Referenced By
   pipethrough(3), vacall(3)


---

