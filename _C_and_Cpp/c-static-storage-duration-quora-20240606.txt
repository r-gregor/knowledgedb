filename: c_static-storage-duration_quora_20240606.txt
https://www.quora.com/In-C-if-a-char-when-not-initialized-contains-whatever-garbage-its-memory-location-has-why-does-comparing-it-to-0-work-if-you-want-to-find-out-if-its-not-initialized/answer/Joe-Zbiciak

C - STATIC STORAGE DURATION

In C, if a char, when not initialized, contains whatever garbage its memory location has, why does
comparing it to '\0' work if you want to find out if it's not initialized?

If it's a static storage duration variable, it's guaranteed to be initialized to 0 if it doesn't have
an explicit initializer. Static storage duration variables include file scope variables,¹ and local
variables declared static.

If it's an automatic storage duration variable, its initial value is indeterminate if it doesn't have
an explicit initializer. You can't be guaranteed of any particular value. Automatic storage duration
variables are what most folks think of as "local variables."

Consider this program fragment:

int a;

void foo(void) {
	int b;
	static int c;
	...
}

The variables a and c have static storage duration and are guaranteed to initialize to zero.

The variable b has automatic storage duration. It will have an indeterminate value each time you enter
this function. It could be different each time you call the function as well, but your program should
not be looking at that indeterminate value in order to notice that.

I used int above, but this principle applies to variables of all C data types. For pointer types,
0 corresponds to NULL. For aggregate types (struct, arrays), the principle applies to the fundamental
types that comprise the aggregate. For union, it applies to its first member, IIRC.

Comparing an indeterminate value with zero is undefined behavior. The compiler is allowed to do whatever
it likes, including pretending the value is zero even if it isn't, or vice versa.

I wouldn't call that "working."

You might have written a small test program like:

#include <stdio.h>

int main() {
	char c;

	if (c == 0) {
		puts("c is 0");
	} else {
		puts("c is not 0");
	}
}

It may have even printed "c is 0". That doesn't mean anything. The program itself is meaningless as
it has undefined behavior.

I wrote 0 above, whereas the question used '\0'. Both are equivalent in C;² however, if you're dealing
with actual characters rather than small integers, '\0' is usually clearer. char can be used for both.

1 -  Those are variables declared outside of any function that are not declared thread_local or
     _Thread_local. Thread local variables are guaranteed to initialize to 0 at the start of each thread,
     if they lack an explicit initializer.

2 - In C, '\0' is an int. In C++ '\0' is a char. They are different languages after all.


---

