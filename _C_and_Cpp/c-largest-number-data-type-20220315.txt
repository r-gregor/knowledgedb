filename: c_largest-number-data-type_20220315.txt
https://stackoverflow.com/questions/24091937/largest-number-data-type-in-c

Largest number data type in C

   So I wrote a simple C program which displays the nth fibonacci number based on user specification. I
   started using ints and obviously that did not work out too well so I then went to floats, longs, and
   finally long longs. Even with long longs there is a cut off to where I get nonsensical or incorrect
   output such as negative numbers ( starts to happen a bit before n = 100 ). Is there anything I can do
   to expand the range of this program or is there no way to fix this?

<code>
#include <stdio.h>
#include <stdlib.h>

int main() {
	long long term = 0;
	long long val = 0;
	long long first = 0;
	long long second = 1;

	printf( "Which fibonacci term (starting at 0) would you like to see? ");
	scanf("%lld", &term );

	if( term == 0 ) {
		return 1;
		printf("%lld\n", first );
	}

	if( term == 1 ) {
		printf( "%lld\n", second );
		return 1;
	}

	if( term > 1 ) {
		for( int i = 1; term > i; i++ ) {
			val = first + second;
			first = second;
			second = val;
		}

		printf( "%lld\n", val );
		return 1;
	}

	return 0;
}
</code>

***
   As per ISO C99, a long long is 64bit at the minimum - the standard integer data type with the largest
   size. Your compiler may allow for larger types, and these are defined by intmax_t and uintmax_t in
   <stdint.h>.

   However, I would strongly recommend using a Bigint library such as GMP. Using GMP, the only
   limitation for long integers and floating points is the resources available on the system.

***
   Change all of your types to unsigned long long which will perform unsigned arithmetic, nearly
   doubling the range. If you wish to extend this further you will need to create your own data type. A
   few examples of libraries that can do this for you:
	 * [http://gmplib.org/]GMP 
  55. http://www.openssl.org/docs/crypto/bn.html

   Edit per Michael Burr's comment:
	 * Requires your platform to have unsigned long longs that are greater than 64 bits, such as 128
	   bits (or more). C99 only guarantees that long long is at least 64 bits. The range of your
	   particular program won't change if long long is only 64 bits.

***
   One can use uintmax_t but that is likely <= 128 bits.

   GMP is an excellent library to consider.

   But one only needs to write an extend precision add() as below. Not very efficient, but it gets the
   job done for fib(). Here I use a C string as the data type. Other types of your design could work far
   more better.

<code>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define max(a, b) ((a) > (b) ? (a) : (b))

// "Add" 2 strings
char *strsum(const char *a, const char *b) {
	size_t alen = strlen(a);
	size_t blen = strlen(b);
	size_t clen = max(alen, blen) + 1;
	size_t csize = clen + 1;
	char *c = malloc(csize);

	if (c == NULL) return NULL;
	c[clen] = '\0';
	int carry = 0;

	while (alen > 0 && blen > 0) {
		int sum = a[--alen] - '0' + b[--blen] - '0' + carry;
		c[--clen] = sum%10 + '0';
		carry = sum / 10;
	}

	while (alen > 0) {
		int sum = a[--alen] - '0' + carry;
		c[--clen] = sum%10 + '0';
		carry = sum / 10;
	}

	while (blen > 0) {
		int sum = b[--blen] - '0' + carry;
		c[--clen] = sum%10 + '0';
		carry = sum / 10;
	}

	if (carry) {
		c[--clen] = carry + '0';
	}

	if (clen > 0) {
		memmove(&c[0], &c[1], csize - 1);
	}

	return c;
}

void fib(unsigned n) {
	char *a = NULL;
	char *b = malloc(2); strcpy(b, "0");
	char *c = malloc(2); strcpy(c, "1");
	unsigned i;

	for (i=1; i<n; i++) {
		free(a);
		a = b;
		b = c;
		c = strsum(a, b);

		if (c == NULL) break;

		printf("fib(%u) = %s\n", i+1, c);
	}
	free(a);
	free(c);
	free(b);
}

int main(int argc, char *argv[]) {
	fib(1000);
	return 0;
}
</code>

   Sample
fib(2) = 1
fib(3) = 2
fib(4) = 3
fib(5) = 5
fib(6) = 8
fib(7) = 13
fib(8) = 21
fib(9) = 34
fib(10) = 55
...
fib(93) = 12200160415121876738 /* max using 64-bit math */
...
fib(100) = 354224848179261915075
...
fib(1000) = 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255\
16929592259308032263477520968962323987332247116164299644090653318793829896964992851600370447613779516684922887\
5
...
fib(10000) = 336...(2084 digits)...875


---

