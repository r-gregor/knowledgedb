filename: c_why_prefer_fgets_over_scanf_with_specified_size_20240124.txt
https://www.reddit.com/r/C_Programming/comments/116v1nw/why_people_prefer_fgets_over_scanf_with_specified/?rdt=47368

why people prefer fgets over scanf with specified field width ?

   i don't know if above is a case or not but i notice this in many situations, the thing is scanf with
   specified field width like %20s can prevent buffer overflow while fgets can't so why fgets is used
   more or am i assuming it wrong ? then which should you use ? also if there are other options i will
   be glad to know that.

***
Either is fine.

scanf without any length limit is as dangerous as gets. gets was dropped from C because it was essentially
impossible to use it safely. scanf has not been dropped from C because it can be used safely.

That doesn't necessarily mean using scanf is "correct" though. You can have safe code that is just plain
wrong. Sometimes it's easier to write correct code using fgets instead.

***
Sometimes you don't know exactly what to expect from a line of input.

If you use fgets(), you then get as many bites at the apple as you want when you subsequently scan the
string with sscanf. If you scan input with scanf, you get only one bite at the apple.

I'm thinking of parsing something like ascii Wavefront obj files, which describe 3D mesh data. For "face"
data, you may encounter lines like:

 f 1 2 3
 f 3/1 4/2 5/3
 f 6/4/1 3/5/3 7/6/5
 f 7//1 8//2 9//3

The 'f' means "face", but there are a number of options for what comes after the 'f'. One approach is
to try a few different sscanf()s and see which one matches (if any).

***
For reading lines of text, consider using getline.

***
 Well... the verbs should gave a hint... scanf is a function which scans the input stream converting
 formats it finds. IF the input is wrong, scanf fails to convert and stops converting leaving the input
 data in the buffer. For example:

int x;
scanf( "%d", &x );

If you enter "hi", scanf() will return 0, indicating 0 conversions are made and leaves this "hi" in the
stdin stream (so you can try to convert again)... That's why code like this:

int x
int status;

do {
	status = scanf( "%d", &x );
	if ( status != 1 ) fputs( "ERROR: Wrong value\n", stderr );
} while ( status != 1 );

Will print the error forever, not giving you a chance to correct the value (because will, forever,
try to scan the buffered data in stdin for an integer, which is never found).

fgets will get a string from stream without conversions and you can deal with this string in your code.

@FUZzxxl tip is a good one, but only if the implementation of libc supports the getline funcion (it is
an extension of ISO 9899, but it isn't a standard function - MSVC, for instance, don't have it) because
with getline() you can ask the function to dynamically allocate memory for the string (with fgets you
have to supply an array with fixed size):

char *line;
size_t size;

// getline() returns -1 if it finds an error.
if ( getline( &line, &size, stdin ) == -1 )
	{ ... deal with error here ... }

// line will contain the bytes of the line (terminated with '\n')
// you can strip the last char if its a '\n' if you will
// and manipulate the string..
// For example:
// { char *p = p = strrchr( line, '\n' ); if ( p ) *p = '\0'; }

// do something with 'line' here.

free( line );  // and you need to free() the buffer allocated
               // by getline().

***
In many cases, it would be better to use a statically-allocated buffer rather than getline(), but
instead of using fgets() write a getchar()-based function which always consumes exactly one line of
input, and indicates--depending upon application requirements--how much data was consumed, the length
of the string placed in the buffer, whether the data was truncated, or perhaps some combination of the above.

While there are some situations where an application might possibly call fgets() to read part of a line of
input, and then want to process more input from that same line, most applications would require that the
code which is using fgets() always consume an entire line of input, without leaving anything pending. While
one could have a function which calls fgets() and then checks for and handles the over-long-input scenario,
it's usually nicer to handle that within a string-input function than to foist that job onto the application.

***
From my knowledge, it's faster.


---

