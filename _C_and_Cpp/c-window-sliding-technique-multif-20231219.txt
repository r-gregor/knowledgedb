filename: c_window-sliding-technique-multif_20231219.txt
https://www.javatpoint.com/window-sliding-technique-in-c

Window Sliding Technique in C

   Loops are part of almost every complex problem. Too many loops/ nested loops increase the required
   time, thus increasing the time complexity of the program. The window sliding technique is one of the
   computation techniques used to reduce the number of nested loops used in a program by replacing a
   nested loop with a single loop to increase the program's efficiency.

   This technique is similar if you are familiar with the Sliding window protocol in computer networks.
   This tutorial explains how this technique is used with different examples.

   Generally, when we use a nested loop like this:

for(i = 1; i <= n; i++) {
	for(j = i; j < k; j++) {
	}
}

   Iterations:

   The outer loop is executed n times; every time the outer loop executes, the inner loop is executed
   for (k-i) several times. The average time required to execute the whole loop would be approximately
   O(N^2). Hence, developers don't suggest using loops.

   Let us take an example to understand the concept clearly:

   Suppose we're supposed to find the maximum sum of 'k' consecutive elements in an array. The user will
   provide the value of k.

   First, if we use the naïve approach, for every element i in the array, we'll iterate the array from i
   + 1 till n - 1 where n is the size of the array. We need to do this for every element and compare the
   sums to get the maximum sum.

Naïve Brute force method:


#include<stdio.h>
int main() {
	int n, size, sum=0, max = 0, j;
	printf("Enter the size of the array: ");
	scanf("%d", &n);
	int arr[n], i;
	printf("Enter the elements of the array: ");
	for(i = 0; i < n; i++) {
		scanf("%d", &arr[i]);
	}
	printf("Enter the size of sub-array: ");
	scanf("%d", &size);
	for(i = 0; i < (n - size) + 1; i++) {
		sum = 0;
		for(j = i; j < i + size; j++) {
			sum = sum + arr[j];
		}
		if(sum > max) {
			max = sum;
		}
	}
    printf("The maximum sum of %d consecutive elements of the array: %d", size, max); 
}

   Output:
Enter the size of the array: 7
Enter the elements of the array: 9 2 7 9 4 2 8
Enter the size of the sub-array: 3
The maximum sum of 3 consecutive elements of the array: 20

   Now, here comes the sliding window technique:

   The concept here is that we create a window of size k, and we'll keep sliding it by a unit index.
   Here, the window isn't any technical term. Rather than using a single value as we do in loops, we use
   multiple elements simultaneously in each iteration.

   For example:

   Given an array of size 10:
   [8][2][1][7][3][2][5][8][1][3]

   Suppose we need the maximum sum of 3 consecutive indexes, create a 3-sized window, and keep sliding
   (traversing) it throughout the array. Here is a pictorial representation:

   Iteration 1:
   +-------+
   [8][2][1][7][3][2][5][8][1][3]
   +-------+
   Sum=8+2+1=11

   Iteration 2:
      +-------+
   [8][2][1][7][3][2][5][8][1][3]
      +-------+
   Sum=2+1+7=10

   Iteration 3:
         +-------+
   [8][2][1][7][3][2][5][8][1][3]
         +-------+
   Sum=1+7+3=11

   Iteration 4:
            +-------+
   [8][2][1][7][3][2][5][8][1][3]
            +-------+
   Sum=7+3+2=12

   Iteration 5:
               +-------+
   [8][2][1][7][3][2][5][8][1][3]
               +-------+
   Sum=3+2+5=10

   Iteration 6:
                  +-------+
   [8][2][1][7][3][2][5][8][1][3]
                  +-------+
   Sum=2+5+8=15

   Iteration 7:
                     +-------+
   [8][2][1][7][3][2][5][8][1][3]
                     +-------+
   Sum=5+8+1=14

   Iteration 8:
                        +-------+
   [8][2][1][7][3][2][5][8][1][3]
                        +-------+
   Sum=8+1+3=12


     * Using this method, there will be no inner loop, and the number of iterations of the one single
       loop will be (n - k + 1), 8 in this case.
     * So, a Sliding window is a technique used to reduce the use of nested loops and replace it with a
       single loop to reduce the total time complexity.
     * Observe that in every iteration, when the window is sliding to the next index, we're deleting the
       first element from the previous window and adding a new element that is the next succeeding
       index.

   Here is the code:

#include <stdio.h>

int maxsum(int a[], int k, int n);

int main() {
	int n, i, k;
	printf("Enter the size of the array: ");
	scanf("%d", &n);
	int arr[n];
	printf("Enter the elements: ");
    
	for(i = 0; i < n; i++) {
		scanf("%d", &arr[i]);
	}

	printf("Enter the value of k: ");
	scanf("%d", &k);
	int max = maxsum(arr, k, n);
	printf("The maximum sum of %d consecutive elements in the array: %d", k, max);
}

int maxsum(int a[], int k, int n) {
	int i, sum, maxm = 0;
	for(i = 0; i < k; i++) {
		maxm = maxm + a[i];
	}
	sum = maxm;
	for(i = k; i < n; i++) {
		sum += a[i] - a[i - k]; /*subtract the first element of the previous window and add the next index*/
		if(sum > maxm) {
			maxm = sum;
		}
	}
	return maxm;
}

   Output:
Enter the size of the array: 10
Enter the elements: 8 2 1 7 3 2 5 8 1 3
Enter the value of k: 3
The maximum sum of 3 consecutive elements in the array: 15

     * The naïve approach takes O(k*n) time with two nested loops.
     * The time complexity is reduced to O(n) by using the Sliding window technique.

   Here are the steps to apply the technique to any problem at hand:
    1. First, we must see that the window size is constant and shouldn't change. We can use the
       technique to only such problems.
    2. After you ensure that the window size isn't changing, compute the result of the first window to
       compare to the computations of the rest of the array.
    3. Now, use a loop to slide the window index by index till the end and keep updating the required
       value.



---
https://codewithgeeks.com/sliding-window-algorithm/?utm_content=cmp-true

Sliding Window Algorithm in C and C++

Introduction
   Sliding window is a subset of dynamic programming which is used in conditions where we are
   required to find subarray or substring which satisfy the given conditions. It is mostly used to give
   a better solution than nested loop.

Problem
   To begin with, let's consider a problem in which we are given an array and we are required to find
   maximum and minimum sum of subarray of given size.

   Let the given array arr= [7, 2, 5, 1, 6, 4, 3] and let the size of the the required subarray be k=3
   [7][2][5][1][6][4][3]

   We are required to find the maximum sum and minimum sum of the subarray of the given size.

   It can be solved easily using the brute force approach. We will take nested loops and find the sum of
   consecutive k elements from the starting index. We will repeat this for all the elements and will
   find the max and min sum from it.

   Implementation in C++
#include <bits/stdc++.h>
using namespace std;


// Function to calculate max sum of subarray
int maxsum(int arr[], int n, int k) {
	int maximum_sum = INT_MIN;
	for (int i = 0; i <= n - k; i++) // simple brute force approach
	{
		int sum = 0;
		for (int j = i; j < k + i; j++) {
			sum += arr[j];
		}
		maximum_sum = max(maximum_sum, sum);
	}
	return maximum_sum;
}


// Function to calculate min sum of subarray
int minsum(int arr[], int n, int k) {
	int minimum_sum = INT_MAX;
	for (int i = 0; i <= n - k; i++) // simple brute force approach
	{
		int sum = 0;
		for (int j = i; j < k + i; j++) {
			sum += arr[j];
		}
		minimum_sum = min(minimum_sum, sum);
	}
	return minimum_sum;
}


int main() {
	int arr[] = {7, 2, 5, 1, 6, 4, 3}; // array
	int k = 3;                         // given size of subarray
	int n = sizeof(arr) / sizeof(arr[0]);
	cout << maxsum(arr, n, k) << "n"; // function call
	cout << minsum(arr, n, k) << "n"; // function call
	return 0;
}


***
   Implementation in C
#include <stdio.h>
#include <limits.h>

int max(int a, int b) {
	if (a > b)
		return a;
	return b;
}

int min(int a, int b) {
	if (a > b)
		return b;
	return a;
}

// Function to calculate max sum of subarray
int maxsum(int arr[], int n, int k) {
	int maximum_sum = INT_MIN;
	for (int i = 0; i <= n - k; i++) // simple brute force approach
	{
		int sum = 0;
		for (int j = i; j < k + i; j++) {
			sum += arr[j];
		}
		maximum_sum = max(maximum_sum, sum);
	}
	return maximum_sum;
}


// Function to calculate min sum of subarray
int minsum(int arr[], int n, int k) {
	int minimum_sum = INT_MAX;
	for (int i = 0; i <= n - k; i++) // simple brute force approach
	{
		int sum = 0;
		for (int j = i; j < k + i; j++) {
			sum += arr[j];
		}
		minimum_sum = min(minimum_sum, sum);
	}
	return minimum_sum;
}


int main() {
	int arr[] = {7, 2, 5, 1, 6, 4, 3}; // array
	int k = 3;                         // given size of subarray
	int n = sizeof(arr) / sizeof(arr[0]);
	printf("%dn", maxsum(arr, n, k)); // function call
	printf("%dn", minsum(arr, n, k)); // function call
	return 0;
}

   Time Complexity: The time complexity of the above algorithm is O(n*k).

   This is not an optimal solution as here we have a lot of redundancy as the same element is repeatedly
   included in sums.

What is Sliding window?
   Sliding window technique is a subset of dynamic programming in which we take consecutive elements and
   consider them as a window. It is analogous to a sliding door or a window in a bus. As the window
   moves forward we subtract the previous element and add the new element. Here we don't require nested
   loops as our work can be done with help of one loop.

   The basic idea behind this is to take two pointers, first pointer(start) will be pointing to first
   element of array and the second pointer(end) will be at k^th position. To implement this we will be
   using a loop and iterate over first k elements and store there result(Sum in the above example) as
   required in a variable. The value stored in variable will be treated as the window sum.

   Now to move window forward we will subtract the value at start pointer from the window sum, move both
   start and end by one unit and then add the new value of the end pointer to the window sum. Now we
   will get our new window of size k and a new window sum. Sliding window can also be implemented
   without using two pointers by just adding the element at i^th and subtracting the element at i-k^th
   index.

   This process will be repeated until we reach the end of given array.
   +-------+
   [ ][ ][ ][ ][ ][ ][ ]
   +-------+

      +-------+
   [ ][ ][ ][ ][ ][ ][ ]
      +-------+

         +-------+
   [ ][ ][ ][ ][ ][ ][ ]
         +-------+

            +-------+
   [ ][ ][ ][ ][ ][ ][ ]
            +-------+

               +-------+
   [ ][ ][ ][ ][ ][ ][ ]
               +-------+


   Implementation of above discussed problem using sliding window technique:-

   C++ code
#include <bits/stdc++.h>
using namespace std;

int maxsum(int arr[], int n, int k) {
	if (n < k) {
		return -1; // Window size cannot be greater than size of array
	}
	int sum = 0;
	for (int i = 0; i < k; i++)
		sum += arr[i];
	int windowsum = sum;
	for (int i = k; i < n; i++) {
		windowsum += arr[i] - arr[i - k];
		sum = max(sum, windowsum);
	}
	return sum;
}

int minsum(int arr[], int n, int k) {
	if (n < k) {
		return -1; // Window size cannot be greater than size of array
	}
	int sum = 0;
	for (int i = 0; i < k; i++)
		sum += arr[i];
	int windowsum = sum;
	for (int i = k; i < n; i++) {
		windowsum += arr[i] - arr[i - k];
		sum = min(sum, windowsum);
	}
	return sum;
}

int main() {
	int arr[] = {7, 2, 5, 1, 6, 4, 3}; // array of integers
	int k = 3;                         // given window size
	int n = sizeof(arr) / sizeof(arr[0]);
	cout << maxsum(arr, n, k) << endl; // function call
	cout << minsum(arr, n, k) << endl; // function call
	return 0;
}


***
   C code
#include <stdio.h>

int max(int a, int b) {
	if (a > b)
		return a;
	return b;
}

int min(int a, int b) {
	if (a > b)
		return b;
	return a;
}

int maxsum(int arr[], int n, int k) {
	if (n < k) {
		return -1; // Window size cannot be greater than size of array
	}
	int sum = 0;
	for (int i = 0; i < k; i++)
		sum += arr[i];
	int windowsum = sum;
	for (int i = k; i < n; i++) {
		windowsum += arr[i] - arr[i - k];
		sum = max(sum, windowsum);
	}
	return sum;
}

int minsum(int arr[], int n, int k) {
	if (n < k) {
		return -1; // Window size cannot be greater than size of array
	}


	int sum = 0;
	for (int i = 0; i < k; i++)
		sum += arr[i];
	int windowsum = sum;
	for (int i = k; i < n; i++) {
		windowsum += arr[i] - arr[i - k];
		sum = min(sum, windowsum);
	}
	return sum;
}

int main() {
	int arr[] = {7, 2, 5, 1, 6, 4, 3}; // array of integers
	int k = 3;                         // given window size
	int n = sizeof(arr) / sizeof(arr[0]);
	printf("%dn", maxsum(arr, n, k)); // function call
	printf("%dn", minsum(arr, n, k)); // function call
	return 0;
}

   Time complexity: Time complexity of the above approach is O(n) as it only uses one loop.

   Sliding window is very easy to implement and act as one of the best substitutions to nested loops in
   order to get an optimal solution. In many cases we have to compare the content or related data of the
   current window to all other windows. This method can be implemented in many questions. To know where
   to implement requires practice.

FAQ
   1) What is the sliding window algorithm?

   Ans) Sliding window algorithm is a technique in which we mostly try to reduce the time complexity of
   a problem to O(n) by taking a group of consecutive elements as window and performing operations on it
   as we move forward.

   2) Is sliding window  algorithm a Dynamic Programming?

   Ans) Sliding window algorithm is a subset of dynamic programming but the approach is a bit different
   from storing the results of expensive function calls.

Conclusion

   In this article we learnt about Sliding window algorithm and how it can be applied to reduce the time
   complexity of a problem. Sliding window in many cases gives the optimal solution and can be applied
   to many questions. Implementing it to questions comes in hand with more practice.



---
https://www.thecrazyprogrammer.com/2017/05/sliding-window-protocol-program-c.html?utm_content=cmp-true

Sliding Window Protocol Program in C and C++

   Here you will get sliding window protocol program in C.

   In computer networks sliding window protocol is a method to transmit data on a network. Sliding
   window protocol is applied on the Data Link Layer of OSI model. At data link layer data is in the
   form of frames. In Networking, Window simply means a buffer which has data frames that needs to be
   transmitted.

   Both sender and receiver agrees on some window size. If window size=w then after sending w frames
   sender waits for the acknowledgement (ack) of the first frame.

   As soon as sender receives the acknowledgement of a frame it is replaced by the next frames to be
   transmitted by the sender. If receiver sends a collective or cumulative acknowledgement to sender
   then it understands that more than one frames are properly received, for eg:- if ack of frame 3 is
   received it understands that frame 1 and frame 2 are received properly.

          window
   +----------------------+
   [ 1  ][ 2  ][ 3  ][ 4  ][ 5  ][ 6  ][ 7  ][ 8  ][ 9  ][ 10 ][ 11 ][ 12 ]
   +----------------------+
                                    (a)


  Sent and ACKed
        |
        |               window
        V      +----------------------+
   [ 1  ][ 2  ][ 3  ][ 4  ][ 5  ][ 6  ][ 7  ][ 8  ][ 9  ][ 10 ][ 11 ][ 12 ]
               +----------------------+
                                    (b)


                                                            window
                                                   +----------------------+
   [ 1  ][ 2  ][ 3  ][ 4  ][ 5  ][ 6  ][ 7  ][ 8  ][ 9  ][ 10 ][ 11 ][ 12 ]
                                                   +----------------------+
                                    (c)


   In sliding window protocol the receiver has to have some memory to compensate any loss in
   transmission or if the frames are received unordered.

   Efficiency of Sliding Window Protocol

   η = (W*t[x])/(t[x]+2t[p])

   W = Window Size

   t[x]= Transmission time

   t[p ]= Propagation delay

   Sliding window works in full duplex mode

   It is of two types:-

   1. Selective Repeat: Sender transmits only that frame which is erroneous or is lost.

   2. Go back n: Sender transmits all frames present in the window that occurs after the error bit
   including error bit also.

Sliding Window Protocol Program in C
   Below is the simulation of sliding window protocol in C.
   Ezoic

#include<stdio.h>

int main() {
	int w,i,f,frames[50];

	printf("Enter window size: ");
	scanf("%d",&w);

	printf("\nEnter number of frames to transmit: ");
	scanf("%d",&f);

	printf("\nEnter %d frames: ",f);

	for(i=1;i<=f;i++)
		scanf("%d",&frames[i]);

	printf("\nWith sliding window protocol the frames will be sent in the following manner (assuming
		no corruption of frames)\n\n");
	printf("After sending %d frames at each stage sender waits for acknowledgement sent by the
			receiver\n\n",w);

	for(i=1;i<=f;i++) {
		if(i%w==0) {
			printf("%d\n",frames[i]);
			printf("Acknowledgement of above frames sent is received by sender\n\n");
		}
		else
			printf("%d ",frames[i]);
	}

	if(f%w!=0)
		printf("\nAcknowledgement of above frames sent is received by sender\n");

	return 0;
}

   Output

   Enter window size: 3

   Enter number of frames to transmit: 5

   Enter 5 frames: 12 5 89 4 6

   With sliding window protocol the frames will be sent in the following manner (assuming no corruption
   of frames)

   After sending 3 frames at each stage sender waits for acknowledgement sent by the receiver

   12 5 89
   Acknowledgement of above frames sent is received by sender

   4 6
   Acknowledgement of above frames sent is received by sender

Sliding Window Protocol Program in C++

   Below is the simulation of sliding window protocol in C++.

#include<iostream>

using namespace std;

int main() {
	int w,i,f,frames[50];

	cout<<"Enter window size: ";
	cin>>w;

	cout<<"\nEnter number of frames to transmit: ";
	cin>>f;

	cout<<"\nEnter "<<f<<" frames: ";

	for(i=1;i<=f;i++)
		cin>>frames[i];

	cout<<"\nWith sliding window protocol the frames will be sent in the following manner (assuming
		no corruption of frames)\n\n";
	cout<<"After sending "<<w<<" frames at each stage sender waits for acknowledgement sent by the
		receiver\n\n";

	for(i=1;i<=f;i++) {
		if(i%w==0) {
			cout<<frames[i]<<"\n";
			cout<<"Acknowledgement of above frames sent is received by sender\n\n";
		}
		else
			cout<<frames[i]<<" ";
	}

	if(f%w!=0)
		cout<<"\nAcknowledgement of above frames sent is received by sender\n";

	return 0;
}




---

