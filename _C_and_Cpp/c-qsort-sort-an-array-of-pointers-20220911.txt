filename: c_qsort-sort-an-array-of-pointers_20220911.txt
https://www.quora.com/How-do-I-sort-an-array-of-pointers-in-C-using-a-name-in-alphabetical-order-array-0-name

How do I sort an array of pointers in C using a name in alphabetical order (array [0]->name)?

***
The normal C library qsort() function can do the job. You just have to write a comparison function that
dereferences the pointers in the array. Huh, for an array or (char *) pointing to normal C strings, the
strcmp function works just fine. For more complex pointers, roll your own.

***
Ok. Few things you need to know:
1. Comparing two strings alphabetically is not an easy task. Fortunately exists a function in the string
(# include<string.h>) that lets you do that. int strcmp(const char *s1, const char *s2). It returns 0 if s1 is
the same of s2, or -1 or 1 depending on which is alphabetically greater. You must have to google it because
I donâ€™t exactly remember which case is each one. If you have linux, simply use man pages.

2. Sort there are several sorting techniques. Form th bubble method to the quick sort. Each one gonna have its
difficult degree in C. The advantage of using bubble sorting is that is fast enough and do not need to know
much more about C for implementing. Qsort: The quicksort is the faster one and there is a function in C that
implements it, but you will need to read a little bit about pointers to functions to use it. It is not hard
and I recommend you to try to use it because you gonna need it more than once.

3. Elements to sort: You should never sort the elements (structs, arrays, and so) by themselve. Because it
too expensive moving all that data. Usually you declare a matrix of indexs to elements or a matrix of
pointers to them. For your question I guess you already got the second option.

About using qsort function:

#include <stdlib.h>

void qsort(void *base, size_t nmemb, size_t size,
			int(*compar)(const void *, const void *));

Note that compar is a pointer to a function that returns an int and accept as arguments two void pointers.
That is because C has no idea of what are you comparing, how them most be compared (and sort). So you need
to define a comparision function that acepts pointer to those elements and return and 0 -1 or 1 depending if
the first one is equal, greater or smaller in order than the second one.

But remember that what you are ordering are pointers to your structs so the const void * that appears in
compar are actually pointers to that pointers.

note: in C if you define a function like int myFunction(int); then myFunction is the pointer to that functio
. (You need to read about pointers to functions)

for example

#include <stdlib>
#include <string.h>

typedef struct {
	char name[20];
	int age;
} myType;

myType data[100];
myType *pointers[100];

int myTypeCompar(void *a, void *b); //myTypeCompar is the pointer

int main() {
	int i;
	....
	// somewhere around here, you enter data to data[]
	...
	// now associate pointers to data
	for(i=0;i<100;i++) {
		pointers[i]=&data[i];
	}

	//now sorts
	qsort(pointers, sizeof(myType *), 100, myTypeCompar );

	return 0;
}

//now define comparition function
int myTypeCompar(void *a, void *b) {
	//first you must understand that a and b are pointers to
	//any element of the matrix of pointers to data.
	// so *a is a pointer to a data element.
	// so actually you must recast a and b
	// To make it easier to understand ill you p1 and p2 to
	// hold that pointers

	myType *p1, *p2;
	p1 = *( (myType **)a );
	p2 = *( (myType **)b );

	//now simply access to the names strings and use strcmp
	//for doing the comparision.

	return strcmp(p1->name,p2->name);
}


---

