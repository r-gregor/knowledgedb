filename: c_function-returning-struct-containing-values-with-error-codes_20230328.txt
https://riptutorial.com/c/example/24193/example-of-function-returning-struct-containing-values-with-error-codes

Function Parameters Example of function returning struct containing values with error codes

Example
   Most examples of a function returning a value involve providing a pointer as one of the arguments to
   allow the function to modify the value pointed to, similar to the following. The actual return value
   of the function is usually some type such as an int to indicate the status of the result, whether it
   worked or not.

int func (int *pIvalue) {
	int iRetStatus = 0;                /* Default status is no change */

	if (*pIvalue > 10) {
		*pIvalue = *pIvalue * 45;      /* Modify the value pointed to */
		iRetStatus = 1;                /* indicate value was changed */
	}

	return iRetStatus;                 /* Return an error code */
}

   However you can also use a struct as a return value which allows you to return both an error status
   along with other values as well. For instance.

typedef struct {
	int    iStat;        /* Return status */
	int    iValue;       /* Return value */
}  RetValue;

RetValue func (int iValue) {
	RetValue iRetStatus = {0, iValue};

	if (iValue > 10) {
		iRetStatus.iValue = iValue * 45;
		iRetStatus.iStat = 1;
	}

	return iRetStatus;
}

   This function could then be used like the following sample.

int usingFunc (int iValue) {
	RetValue iRet = func (iValue);

	if (iRet.iStat == 1) {
		/* do things with iRet.iValue, the returned value */
	}
	return 0;
}

   Or it could be used like the following.

int usingFunc (int iValue) {
	RetValue iRet;

	if ( (iRet = func (iValue)).iStat == 1 ) {
		/* do things with iRet.iValue, the returned value */
	}
	return 0;
}



---

