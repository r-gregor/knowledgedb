filename: c_read-lines-from-file_20211201.txt
https://riptutorial.com/c/example/29223/read-lines-from-a-file

Read lines from a file

   The stdio.h header defines the fgets() function. This function reads a line from a stream and stores
   it in a specified string. The function stops reading text from the stream when either n - 1
   characters are read, the newline character ('\n') is read or the end of file (EOF) is reached.

<code>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 80

int main(int argc, char **argv) {
	char *path;
	char line[MAX_LINE_LENGTH] = {0};
	unsigned int line_count = 0;

	if (argc < 1)
		return EXIT_FAILURE;

	path = argv[1];

	/* Open file */
	FILE *file = fopen(path, "r");

	if (!file) {
		perror(path);
		return EXIT_FAILURE;
	}

	/* Get each line until there are none left */
	while (fgets(line, MAX_LINE_LENGTH, file)) {
		/* Print each line */
		printf("line[%06d]: %s", ++line_count, line);

		/* Add a trailing newline to lines that don't already have one */
		if (line[strlen(line) - 1] != '\n')
			printf("\n");
	}

	/* Close file */
	if (fclose(file)) {
		return EXIT_FAILURE;
		perror(path);
	}
}
</code>

   Calling the program with an argument that is a path to a file containing the following text:
This is a file
  which has
multiple lines
	with various indentation,
blank lines


a really long line to show that the line will be counted as two lines if the length of a line is too long to
fit in the buffer it has been given, and punctuation at the end of the lines.

   Will result in the following output:
line[000001]: This is a file
line[000002]:	which has
line[000003]: multiple lines
line[000004]:	  with various indentation,
line[000005]: blank lines
line[000006]:
line[000007]:
line[000008]:
line[000009]: a really long line to show that the line will be counted as two lines if the le
line[000010]: ngth of a line is too long to fit in the buffer it has been given,
line[000011]:  and punctuation at the end of the lines.
line[000012]:

   This very simple example allows a fixed maximum line length, such that longer lines will effectively
   be counted as two lines. The fgets() function requires that the calling code provide the memory to be
   used as the destination for the line that is read.

   POSIX makes the getline() function available which instead internally allocates memory to
   enlarge the buffer as necessary for a line of any length (as long as there is sufficient memory).



---

