filename: c_howto-serialize-a-struct_20230925.txt
https://copyprogramming.com/howto/how-to-serialize-a-struct-in-c

Serializing a Struct in C: A Guide
2023-04-19

   It is recommended to convert the data into network byte order before transmitting it over a network
   and then converting it back into host byte order upon receiving it. By doing this, the serialize and
   deserialize routine will only need to convert between the two, ensuring that byte order and other
   details are maintained.
   Record is read only error in Salesf...


Serialization of struct

Solution 1:
   The easiest method to serialize struct into an char array and then de-serialize it is demonstrated in
   the following example.

#include <stdio.h>
#include <string.h>
#define BUFSIZE 512
#define PACKETSIZE sizeof(MSG)

/* c++
 * using namespace std;
 */

typedef struct MSG {
	int type;
	int priority;
	int sender;
	char message[BUFSIZE];
} MSG;

void serialize(MSG* msgPacket, char *data);
void deserialize(char *data, MSG* msgPacket);
void printMsg(MSG* msgPacket);

int main() {
	MSG* newMsg = new MSG;
	newMsg->type = 1;
	newMsg->priority = 9;
	newMsg->sender = 2;
	strcpy(newMsg->message, "hello from server\0");
	printMsg(newMsg);
	char data[PACKETSIZE];
	serialize(newMsg, data);
	MSG* temp = new MSG;
	deserialize(data, temp);
	printMsg(temp);
	return 0;
}

void serialize(MSG* msgPacket, char *data) {
	int *q = (int*)data;
	*q = msgPacket->type;       q++;
	*q = msgPacket->priority;   q++;
	*q = msgPacket->sender;     q++;
	char *p = (char*)q;
	int i = 0;

	while (i < BUFSIZE) {
		*p = msgPacket->message[i];
		p++;
		i++;
	}
}

void deserialize(char *data, MSG* msgPacket) {
	int *q = (int*)data;
	msgPacket->type = *q;       q++;
	msgPacket->priority = *q;   q++;
	msgPacket->sender = *q;     q++;
	char *p = (char*)q;
	int i = 0;

	while (i < BUFSIZE) {
		msgPacket->message[i] = *p;
		p++;
		i++;
	}
}

/* C++
 * void printMsg(MSG* msgPacket) {
 * 	cout << msgPacket->type << endl;
 * 	cout << msgPacket->priority << endl;
 * 	cout << msgPacket->sender << endl;
 * 	cout << msgPacket->message << endl;
}
*/

/* C */
void printMsg(MSG* msgPacket) {
	printf("type:     %d\n", msgPacket->type);
	printf("priority: %d\n", msgPacket->priority);
	printf("sender:   %d\n", msgPacket->sender);
	printf("message:  %s\n", msgPacket->message);
}


Solution 2:
You can just do

struct MyStruct {
	int data;
	char* someNullTerminatedName; // Assuming not larger than 1023 chars
	std::ostream& serialize(std::ostream& os) const {
		char null = '\0';
		os.write((char*)&data, sizeof(data));
		os.write(someNullTerminatedName, strlen(someNullTerminatedName));
		os.write(&null, 1);
		return os;
	}

	std::istream& deserialize(std::istream& is) {
		char buffer[1024];
		int i = 0;
		is.read((char*)&data, sizeof(data));
		do { buffer[i] = is.get(); ++i; } while(buffer[i] != '\0');
		if (someNullTerminatedName != NULL) free(someNullTerminatedName);
		someNullTerminatedName = (char*)malloc(i);

		for (i = 0; buffer[i] != '\0'; ++i) {
			someNullTerminatedName[i] = buffer[i];
		}
		return is;
	}
};

   The responsibility of managing endianness and variations in the size of int s and such lies with you.

Example: Ezoic

MyStruct foo, bar;
std::stringstream stream;
foo.serialize(stream);
// ... Now stream.str().c_str() contains a char* buffer representation of foo.
// For example it might contain [ 1f 3a 4d 10 h e l l o w o r l d \0 ]
bar.deserialize(stream);
// ... Now bar is a copy, via a serial stream of data, of foo.

   If the interface of your socket library is exposed through C++ iostreams, there's no requirement for
   the stringstream to be utilized.

Solution 3:
   Ezoic Consider exploring Protocol Buffers by Google, a library that enables data exchange between
   hosts regardless of the platform or language used.

   Nowadays, the trend is to create the protocol before designing the data structures. One of the
   benefits of this approach is that it compels your software architecture to align with uncomplicated
   data types.

   Networking - how to serialize a struct in c?, Interpret your data and understand what you want to
   serialize. You want to serialize an integer and a structure of type B (recursivelly, you want to
   serialize an int, a long, and an array of strings). Then serialize them. The length you need it
   sizeof (int) + sizeof (long) + '[Sum]'strlen (s [i])+1. On the other hand, serialization is a solved Code
   samplechar* serializeB() {}char* serializeA() {char* B = serializeB();}Feedback

Reading/Writing structs to files (aka Serialization)

Serializing Data Structures in C

Solution 1:
   As C lacks built-in capabilities to serialize structures, you are left to do it manually. A common
   approach is to first define serialization for basic data types, and then recursively apply it to more
   complex structures, as recommended in other responses.

   Nevertheless, there are numerous intricate aspects that require attention beyond the basic notion.
   Some examples include:
   Ezoic
     * The sizes of common integer types and their endian order depend on the machine architecture. This
       may not be an issue if all consumers of serialization use the same binary. However, it becomes a
       problem when reading data produced by a 32-bit PPC Mac on a 64-bit Windows machine or if the size
       of a "long" integer is either 32 or 64 bits.
     * On PCs, color bitmaps are composed of three components, whereas on Macs, they are made up of four
       components arranged in a different order.
     * The way floating point numbers are represented and their degree of accuracy.
     * The similarity of strings containing identical letters. Ezoic
     * Managing data structures that have cyclical references or refer to themselves.

Solution 2:

   Check out the efforts of Google in developing Protocol Buffers.
   You write a .proto file like this:

message Person {
	required int32 id = 1;
	required string name = 2;
	optional string email = 3;
}

   After creating the protocol buffer, you can use the protoc compiler to generate code in Python, Java,
   or C++.

   Afterward, in case you employ C++, the usage of that code is as follows:
Person person;
person.set_id(123);
person.set_name("Bob");
person.set_email("bob@example.com");
fstream out("person.pb", ios::out | ios::binary | ios::trunc);
person.SerializeToOstream(&out);
out.close();

   To comprehend the serialization code generated by Google, one can analyze the SerializeToOstream
   method. Despite being written in C++, the code is quite similar to C.

Solution 3:
   It's likely that your books didn't include it since there are numerous potential variations, each
   with distinct compromises between runtime speed, user-friendliness, and portability.

   To illustrate, the numbers 1 and 3 represent opposite extremes, while 2 indicates the numerous minor
   differences that can exist between them.
    1. Copy the raw bytes directly instead of serializing them.
    2. Specify padding, alignment, and endianness explicitly in addition to the first step.
    3. this is now portable, at the fairly minimal extra cost of byte-order conversions (on hosts with
       different native byte order to that specified) and the requirement to force appropriate alignment
       (which may not be optimal on all architectures)
    4. Convert all data into a textual representation such as XML or JSON, as indicated in the following
       list items:
    5. this is very portable
    6. and very slow (relatively)
    7. you can make it handle indirection, including circular references, if you need
    8. it's really easy to read serialized messages directly

   I gained knowledge on the mentioned topics, including CORBA, ASN.1, and ProtocolBuffers, by
   implementing documented protocols.

   If you prioritize portability over speed, a device closer to #3 on the spectrum would be more
   suitable. The process of building such a device is primarily related to reflection.
   Serialization - Serialize Data Structures in C, Tpl is a library for serializing C data. The data is
   stored in its natural binary form. The API is small and tries to stay "out of the way". Compared to
   using XML, tpl is faster and easier to use in C programs. Tpl can serialize many C data types,
   including structures. Share.

Serialization/Deserialization of a struct to a char* in C

Solution 1:
   To ensure smooth transmission over a network, it is highly recommended that you convert the data into
   network byte order prior to sending it, and then back into host byte order upon receiving it. This is
   due to the fact that byte ordering varies from place to place. If your bytes are out of order, it may
   be difficult to reverse them, depending on the programming language utilized on the receiving side.
   Sockets define byte ordering functions, which include htons() , htonl() , ntohs() , and ntohl() and
   are named using the following conventions: h means 'host' or your computer, n means 'network', s
   means 'short' or 16-bit value, and l means 'long' or 32-bit value.

   If you need to perform serialization in C or C++, you won't have any built-in support. Although there
   are some tools available, such as the ASN.1 implementation asn1c, they can be challenging to use
   since they require more than simply transferring data across the network.

Solution 2:
   Depending on the availability of space, utilizing the streams can be a viable option.

std::string Serialize() {
	std::ostringstream out;
	char version = '1';
	out << version << senderId << '|' << sequenceNumber << '|' << data;
	return out.str();
}

void Deserialize(const std::string& iString) {
	std::istringstream in(iString);
	char version = 0, check1 = 0, check2 = 0;
	in >> version;
	switch(version) {
		case '1':
			senderId >> check1 >> sequenceNumber >> check2 >> data;
			break;
		default:
			// Handle
	}
	// You can check here than 'check1' and 'check2' both equal to '|'
}

   I acknowledge that it could occupy more space than what is currently available, or even potentially
   exceed the available space.

   In a 32-bit architecture, a typical int would occupy 4 bytes or characters. Stream-based
   serialization would require more than 4 characters only if the value exceeds 9999, which is generally
   not the case.

   It is advisable to add safeguards to your stream to ensure that everything is in order when you
   receive it.

   Employing versioning is a prudent approach as it incurs minimal expenses while also enabling
   unforeseen future enhancements.

Solution 3:
   One approach is to create a class that represents the software object with all necessary member
   functions and features. Additionally, you can utilize a serialized struct that serves as a
   description of the final network output.

   To guarantee that the compiler follows your instructions, it is necessary to direct it to 'pack' the
   structure. If you are not using gcc, refer to your compiler documentation for the appropriate
   directive. The directive used in this example is specifically for gcc.

   The serialization and deserialization procedures simply facilitate the conversion between the two,
   guaranteeing the correct byte order and related specifics.

#include       /* ntohl htonl */
#include       /* memcpy */

class Packet {
	int senderId;
	int sequenceNumber;
	char data[MaxDataSize];
	public:
	char* Serialize();
	void Deserialize(char *message);
};

struct SerializedPacket {
	int senderId;
	int sequenceNumber;
	char data[MaxDataSize];
} __attribute__((packed));

void* Packet::Serialize() {
	struct SerializedPacket *s = new SerializedPacket();
	s->senderId = htonl(this->senderId);
	s->sequenceNumber = htonl(this->sequenceNumber);
	memcpy(s->data, this->data, MaxDataSize);
	return s;
}

void Packet::Deserialize(void *message) {
	struct SerializedPacket *s = (struct SerializedPacket*)message;
	this->senderId = ntohl(s->senderId);
	this->sequenceNumber = ntohl(s->sequenceNumber);
	memcpy(this->data, s->data, MaxDataSize);
}

   C++ - Serialization of struct, Here are further possible improvements: 1. make the MSG a return type
   of the deserialize function instead of an output parameter 2. instead of typedef struct MSG {}MSG;
   use struct MSG {};, it's the same in C++ 3. use std::string or std::vector<byte> to hold the
   serialized data (and dispose of that #define ...


---

