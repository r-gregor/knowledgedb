filename: c_variadic_functions_parameters-multif_20230918.txt
https://www.geeksforgeeks.org/variadic-functions-in-c/

Variadic functions in C
25 Oct, 2022

   Variadic functions are functions that can take a variable number of arguments. In
   C programming, a variadic function adds flexibility to the program. It takes one fixed argument
   and then any number of arguments can be passed. The variadic function consists of at least one fixed
   variable and then an ellipsis(...) as the last parameter.

   Syntax:
int function_name(data_type variable_name, ...);

   Values of the passed arguments can be accessed through the header file named as:
#include <stdarg.h>

   <stdarg.h> includes the following methods:

   Methods

   Description
   va_start(va_list ap, argN)

   This enables access to variadic function arguments.

   where *va_list* will be the pointer to the last fixed argument in the variadic function

   *argN* is the last fixed argument in the variadic function.

   From the above variadic function (function_name (data_type variable_name, ...);), variable_name is the
   last fixed argument making it the argN. Whereas *va_list ap* will be a pointer to argN
   (variable_name)
   va_arg(va_list ap, type)

   This one accesses the next variadic function argument.

   *va_list ap* is the same as above i.e a pointer to argN

   *type* indicates the data type  the *va_list ap* should expect (double, float, int etc.)
   va_copy(va_list dest, va_list src) This makes a copy of the variadic function arguments.
   va_end(va_list ap)                 This ends the traversal of the variadic function arguments.

   Here, va_list holds the information needed by va_start, va_arg, va_end, and va_copy.

   Program 1:

   The following simple C program will demonstrate the working of the variadic function
   AddNumbers():

// C program for the above approach

#include <stdarg.h>
#include <stdio.h>

// Variadic function to add numbers
int AddNumbers(int n, ...) {
	int Sum = 0;

	// Declaring pointer to the
	// argument list
	va_list ptr;

	// Initializing argument to the
	// list pointer
	va_start(ptr, n);

	for (int i = 0; i < n; i++){
		// Accessing current variable
		// and pointing to next one
		Sum += va_arg(ptr, int);
	}

	// Ending argument list traversal
	va_end(ptr);

	return Sum;
}

// Driver Code
int main() {
	printf("\n\n Variadic functions: \n");

	// Variable number of arguments
	printf("\n 1 + 2 = %d ",
			AddNumbers(2, 1, 2));

	printf("\n 3 + 4 + 5 = %d ",
			AddNumbers(3, 3, 4, 5));

	printf("\n 6 + 7 + 8 + 9 = %d ",
			AddNumbers(4, 6, 7, 8, 9));

	printf("\n");

	return 0;
}


   Output:
Variadic functions:

 1 + 2 = 3
 3 + 4 + 5 = 12
 6 + 7 + 8 + 9 = 30


   Program 2: Below is the C program consisting of the variadic function LargestNumber():

// C program for the above approach
#include <stdarg.h>
#include <stdio.h>

// Variadic function to find the largest number
int LargestNumber(int n, ...) {
	// Declaring pointer to the
	// argument list
	va_list ptr;

	// Initializing argument to the
	// list pointer
	va_start(ptr, n);

	int max = va_arg(ptr, int);

	for (int i = 0; i < n-1; i++) {
		// Accessing current variable
		// and pointing to next
		int temp = va_arg(ptr, int);
		max = temp > max ? temp : max;
	}

	// End of argument list traversal
	va_end(ptr);

	return max;
}

// Driver Code
int main() {
	printf("\n\n Variadic functions: \n");

	// Variable number of arguments
	printf("\n %d ",
			LargestNumber(2, 1, 2));

	printf("\n %d ",
			LargestNumber(3, 3, 4, 5));

	printf("\n %d ",
			LargestNumber(4, 6, 7, 8, 9));

	printf("\n");

	return 0;
}


   Output:
Variadic functions:

 2
 5
 9



---
https://en.cppreference.com/w/c/variadic

Variadic functions

   Variadic functions are functions (e.g. printf) which take a variable number of arguments.

   The declaration of a variadic function uses an ellipsis as the last parameter, e.g. int
   printf(const char* format, ...);. See variadic arguments for additional detail on the syntax
   and automatic argument conversions.

   Accessing the variadic arguments from the function body uses the following library facilities:

Contents
     * 1 Macros
     * 2 Type
     * 3 Example
     * 4 References
     * 5 See also

Macros

   Defined in header <stdarg.h>
   ------------------------------------------------------------------
   va_start         enables access to variadic function arguments
                    (function macro)
   ------------------------------------------------------------------
   va_arg           accesses the next variadic function argument
                    (function macro)
   ------------------------------------------------------------------
   va_copy (C99)    makes a copy of the variadic function arguments
                    (function macro)
   ------------------------------------------------------------------
   va_end           ends traversal of the variadic function arguments
                    (function macro)
   ------------------------------------------------------------------

Type
   ------------------------------------------------------------------
   va_list          holds the information needed by va_start, va_arg, va_end, and va_copy
                    (typedef)

Example

   Print values of different types.

#include <stdio.h>
#include <stdarg.h>

void simple_printf(const char* fmt, ...) {
	va_list args;
	va_start(args, fmt);

	while (*fmt != '\0') {
		if (*fmt == 'd') {
			int i = va_arg(args, int);
			printf("%d\n", i);
		} else if (*fmt == 'c') {
			// A 'char' variable will be promoted to 'int'
			// A character literal in C is already 'int' by itself
			int c = va_arg(args, int);
			printf("%c\n", c);
		} else if (*fmt == 'f') {
			double d = va_arg(args, double);
			printf("%f\n", d);
		}
		++fmt;
	}

	va_end(args);
}

int main(void) {
	simple_printf("dcff", 3, 'a', 1.999, 42.5);
}

   Output:
3
a
1.999000
42.50000



---
https://www.educative.io/answers/what-are-variadic-arguments-in-c

What are variadic arguments in C?

   Variadic arguments is the term used to refer to the arguments of a variadic function.

Variadic functions
   A variadic function is one that takes a variable number of arguments. A common example is the
   printf() function defined in the <stdio.h> header.

   The declaration of a variadic function uses ellipses as the last parameter.

   The prototype for the printf() function is as follows:
int printf(const char* format, ...);

   Two examples for the printf() variadic function

Accessing variadic arguments
   To access variadic arguments, we must include the <stdarg.h> header.

   We use the following library facilities:
Facilities defined in <stdarg.h>

   ---------------------------------------------------------
   Facility     Use
   ---------------------------------------------------------
   va_start     start access to variadic arguments
   va_arg       access the next variadic argument
   va_copy      makes a copy of the variadic arguments
   va_end       end traversal of variadic arguments
   va_list      holds information needed by other facilities
   ---------------------------------------------------------

Code
#include <stdio.h>
#include <stdarg.h>

int variadic_addition (int count,...) {
	va_list args;
	int i, sum;
	va_start (args, count); /* Save arguments in list. */
	sum = 0;
	for (i = 0; i < count; i++)
		sum += va_arg (args, int); /* Get the next argument value. */
	va_end (args); /* Stop traversal. */
	return sum;
}

int main() {
	// call 1: 4 arguments
	printf("Sum: %d\n", variadic_addition(3, 10, 20, 30));
	//call 2: 6 arguments
	printf("Sum: %d\n", variadic_addition(5, 10, 20, 30, 40, 50));
	return 0;
}

   variadic_addition() adds all the variadic arguments and returns the sum.

   This function is able to process both calls that were made, each with a different number of arguments.



---
https://medium.com/swlh/variadic-function-in-c-programming-d3632315a48e


Variadic Function in C Programming
Jul 29, 2020

Function with variable number of arguments

   If you ever coded in C programming language, you might be wondering how the standard functions like
   printf() and scanf() can accept variable number of arguments in the function call. These functions
   which can accept variable number of arguments is known as variadic / varargs function.

   You may come up with a need to code for a variadic function from time to time, so the standard
   library <stdarg.h> is here to help you in writing your own variadic function.

   For example, as shown in the Figure above, if you need a function that can perform summation with n
   numbers, where n can be any number more than 1, you would not want to write multiple summation
   functions, instead you need a variadic function in this case.

Understanding the Macro Functions Defined in <stdarg.h>
   There are three function-like macros that we need to understand before we can write our own variadic
   function:
    1. va_start(va_list pargs, last)
       This macro accepts two arguments.
       - The first argument is a variable declared as va_list type, which is an argument pointer
       variable.
       - The second argument is the last fixed argument accepted by the variadic function.
       This macro initialises the argument pointer variable pargs to point to the first optional
       argument accepted by the variadic function.
    2. va_arg(va_list pargs, type)
       This macro accepts two arguments.
       - This first argument is same as the first argument in va_start() macro.
       - The second argument specified the expected data type pointed by pargs.
       This function returns the value of the argument pointed by pargs, and also update the pargs to
       point to the next argument in the list.
    3. va_end(va_list pargs)
       This macro ends the use of pargs. According to this manual page, after calling va_end(pargs),
       further va_arg calls with pargs may not work. However, in GNU C library, va_end does nothing, so
       you may not necessary to use it except for portability reason.

Declaration of a Variadic Function
   Variadic function prototype:
   return_type func_name(type arg1, ...)

   The three periods after the last fixed argument is known as ellipsis. It indicates that a variable
   number of arguments might be accepted after the last fixed argument.

   Examples:
   void print(char *str, ...);
   int sum(unsigned int n, ...);
   double average(unsigned int n, ...);
   int formatStr(char *dest, const char *formatted_str, ...)

     Note: The examples below may not be the best practical application of variadic function as those
     are just for showing of the concept of variadic function only.

Example 1 - Averaging of a variable number of double-typed values

#include <stdio.h>
#include <stdarg.h> /* Function prototype for averaging n double-typed numbers */

double average(unsigned int n, ...);

int main() {
	double avg1, avg2;
	avg1 = average(2, 50.3, 49.7);
	avg2 = average(5, 12.45, 2.87, 0.256, 90.1532, 6320.12);
	printf("avg1: %f\navg2: %f", avg1, avg2);
}

double average(unsigned int n, ...) {
	/* pointer to the variable arguments list */
	va_list pargs;

	/* Initialise pargs to point to the first optional argument */
	va_start(pargs, n);

	double sum = 0;
	unsigned int i;

	for(i=0;i<n;i++) {  /* iterate though the optional arguments */
		double x = va_arg(pargs, double);
		sum += x;
	}
	va_end(pargs);
	return (n > 0)? (sum / n):0.00;
}

   Output:
avg1: 50.000000
avg2: 1285.169840


Example 2 - Create formatted string data

#include <stdio.h>
#include <stdarg.h> /* Function prototype for creating formatted string */

int formatStr(char *dest, const char *formatted_str, ...);

int main() {
	char f_str[50];
	char name[] = "Johnson";
	double height = 170.43;
	formatStr(f_str, "Name: %s\nHeight: %f", name, height);
}

int formatStr(char *dest, const char *formatted_str, ...) {
	/* pointer to the variable arguments list */
	va_list pargs;

	/* Initialise pargs to point to the first optional argument */
	va_start(pargs, formatted_str);   /* n_chars is the final length of the formatted string */
	int n_chars = vsprintf(dest, formatted_str, pargs);

	/* print the result of formatted string */
	puts(dest);   va_end(pargs);
	return n_chars;
}

Output:
Name: Johnson
Height: 170.430000

Conclusion
In summary, a variadic function is a function which can accept variable number of arguments like
printf() and scanf() in C standard library. We can also define our own variadic function as we need
by including the standard library <stdarg.h>. The library provides function-like macros as the
routines to help us in writing a variadic function. va_list is a built-in variable type for declaring
pointer to the optional argument. va_start macro is used in initialisation of the va_list variable to
point to the first optional argument. va_arg macro is used to access the value of the optional
argument pointed by the va_list pointer and update it to point to the next optional argument. By
referring to both of the example codes above, you will get a clearer picture on the concept of
variadic function.




---
https://onepunchcoder.medium.com/variadic-functions-explained-fd3b4ab6fd84

	Variadic Functions Explained

	The Ultimate Guide to Variable Arguments in C
	In this blog post, we will delve into the intricacies of variadic functions in C programming
	language. We will examine the functionality of built-in variadic functions such as printf and scanf,
	and explore how to effectively utilize them in our code. Additionally, we will delve into the process
	of creating custom variadic functions using the va_list, va_start, va_arg, and va_end macros, and
	learn how to manage a variable number of arguments passed to the function.

	Furthermore, this post will examine real-world use cases for variadic functions, such as determining
	the sum of an undetermined number of integers or displaying a variable number of strings to the
	console. Through the use of examples and clear explanations, we aim to impart a comprehensive
	understanding of variadic functions and their potential for enhancing the functionality of our code.

	As we embark on this technical exploration of variadic functions in C programming language, we
	recommend taking a few moments to relax and enjoy the memes included in the post. Let us begin!

	Definition

	A variadic function is a function in C programming language that can take a variable number of
	arguments. These functions are particularly useful in situations where the number of arguments needed
	is not known beforehand.

	Variadic functions are supported in C through the use of a special set of macros defined in the
	<stdarg.h> header file. These macros include va_list, va_start, va_arg and va_end, and they allow
	the programmer to access and manipulate the variable arguments passed to the function.

	Syntax

	The syntax for creating a variadic function in C is as follows:
return_type function_name(type1 arg1, type2 arg2, ..., typeN argN, ...) {
	/* Function Bpdy */
}

The ellipsis (...) in the function parameter list is used to indicate that the function can take a
variable number of arguments of any type. The types and names of the first N arguments are specified
as usual, while the variable number of arguments are accessed using the va_list, va_start, va_arg,
   and va_end macros.

   Built-in Variadic Functions

   Printf
   One of the most commonly used built-in variadic functions in C is the printf function. The printf
   function allows us to print a formatted string to the console, and it can take a variable number of
   arguments depending on the format specifiers used in the string passed to the function.

   For example, the following code demonstrates the use of printf function to print a string, an
   integer, and a floating-point number:

#include <stdio.h>

int main() {
	int age = 30;
	float pi = 3.14;
	printf("My name is John and I am %d years old.
			The value of pi   is approximately %.2f.", age, pi);
	return 0;
}

   Output:
My name is John and I am 30 years old. The value of pi is approximately 3.14.

   As shown in the example, the printf function is passed a string that contains two format specifiers:
   %d and %.2f. These specifiers indicate that the next argument passed to the function should be an
   integer and a floating-point number respectively. The printf function then replaces the format
   specifiers with the corresponding values of the variables age and pi. This allows us to easily print
   a string with dynamic values in a clean and readable format.

Scanf
   Another most commonly used built-in variadic functions in C is the scanf function. This function can
   be used to read input from the user and store it in a variable of a specified data type.

   Here is an example of how the scanf function can be used:

#include <stdio.h>

int main() {
	int age;
	printf("Please enter your age: ");
	scanf("%d", &age);
	printf("Your age is: %d\n", age);
	return 0;
}

   The output of this code would be:
Please enter your age: 30
Your age is: 30

   In this example, the scanf function is used to read an integer from the user and store it in the
   "age" variable. The "%d" is a format specifier that tells the function to expect an integer as input.
   The "&" symbol is used to pass the address of the variable to the function so that the value entered
   by the user can be stored in it.

   As we can see, the scanf function is a powerful tool for reading input from the user, and with the
   use of format specifiers, it can be used to read a variety of data types. This is the power of
   variadic functions, they can take any number of arguments and handle them accordingly.

Custom Variadic Functions
   Creating custom variadic functions in C requires the use of four macros: va_list, va_start, va_arg,
   and va_end.

   The va_list macro is used to declare a variable that will hold the list of arguments passed to the
   function. This variable is typically named args.
va_list args;

   The va_start macro is used to initialize the va_list variable, and must be passed the last
   non-variadic argument of the function.
va_start(args, last_non_variadic_arg);

   The va_arg macro is used to retrieve the next argument from the va_list. It must be passed the
   va_list variable, and the type of the argument being retrieved.
int next_arg = va_arg(args, int);

   Finally, the va_end macro must be called to clean up the va_list variable after all arguments have
   been retrieved.
va_end(args);

   Using these macros, we can create a custom variadic function that can handle a variable number of
   arguments.

   For example, a function that calculates the sum of a variable number of integers:

int sum_variadic(int count, ...) {
	va_list args;
	va_start(args, count);
	int sum = 0;
	for (int i = 0; i < count; i++) {
		sum += va_arg(args, int);
	}
	va_end(args);
	return sum;
}

   This function can be called with any number of integer arguments, and will calculate their sum. For
   example:

int result = sum_variadic(3, 1, 2, 3);
printf("The sum is: %d", result);

   Output:
The sum is: 6

   It is important to note that the va_list, va_start, va_arg, and va_end macros are defined in the
   <stdarg.h> header file, which must be included in the program for the above code to work.

Practical Implementation
   Example of variadic functions implementation to print strings:

#include <stdarg.h>
#include <stdio.h>
/**
 * print_strings - Function to print strings
 * @separator: String separator
 * @n: number of strings
 *
 * Return: Formatted string
 */
void print_strings(const char *separator, const unsigned int n, ...) {
	unsigned int i;
	char *str;
	va_list vsprint;
	va_start(vsprint, n);
	for (i = 0; i < n; i++) {
		str = va_arg(vsprint, char *);
		if (separator != NULL && i > 0) {
			printf("%s", separator);
		}

		if (str == NULL) {
			printf("(nil)");
		} else {
			printf("%s", str);
		}
	}
	va_end(vsprint);
	putchar(10);
}

int main(void) {
	print_strings(", ", 2, "Jay", "Django");
	return (0);
}

   The output of the above code will be:
Jay, Django

   The function starts by initializing a va_list variable vsprint using the va_start macro, and passing
   the last non-variadic argument n as the parameter. Then, it enters a for loop that runs n times. In
   each iteration of the loop, the function uses the va_argmacro to extract the next argument from the
   va_list, which it assigns to the char pointer str.

   If the separator is not null and the iterator is greater than 0, the function prints the separator.
   If the str pointer is null, the function prints (nil) otherwise it prints the string.

   After the loop, the function uses the va_end macro to clean up the va_list. Finally, it prints a new
   line and exits the function.

   In conclusion, this blog post has explored the intricacies of variadic functions in C programming
   language. We have examined the functionality of built-in variadic functions such as printf and scanf,
   and explored how to effectively utilize them in our code.

   Additionally, we delved into the process of creating custom variadic functions using the va_list,
   va_start, va_arg, and va_end macros, and learned how to manage a variable number of arguments passed
   to the function.

   Real-world use cases for variadic functions were also discussed, such as determining the sum of an
   undetermined number of integers or displaying a variable number of strings to the console. Through
   the use of examples and clear explanations, we hope to have imparted a comprehensive understanding of
   variadic functions and their potential for enhancing the functionality of our code.



---
