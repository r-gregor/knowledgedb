filename: c_memset-multif_20220510.txt
https://www.tutorialspoint.com/c_standard_library/c_function_memset.htm

C library function - memset()

Description
   The C library function void *memset(void *str, int c, size_t n) copies the character c (an unsigned
   char) to the first n characters of the string pointed to, by the argument str.

Declaration
   Following is the declaration for memset() function.
void *memset(void *str, int c, size_t n)

Parameters
     * str − This is a pointer to the block of memory to fill.
     * c − This is the value to be set. The value is passed as an int, but the function fills the block
       of memory using the unsigned char conversion of this value.
     * n − This is the number of bytes to be set to the value.

Return Value
   This function returns a pointer to the memory area str.

Example
   The following example shows the usage of memset() function.

#include <stdio.h>
#include <string.h>

int main () {
	char str[50];

	strcpy(str,"This is string.h library function");
	puts(str);

	memset(str,'$',7);
	puts(str);

	return(0);
}

   Let us compile and run the above program that will produce the following result −
This is string.h library function
$$$$$$$ string.h library function



---
https://www.geeksforgeeks.org/memset-c-example/

memset() in C with examples
28 Jun, 2021

   memset() is used to fill a block of memory with a particular value.
   The syntax of memset() function is as follows :
// ptr ==> Starting address of memory to be filled
// x   ==> Value to be filled
// n   ==> Number of bytes to be filled starting
//         from ptr to be filled
void *memset(void *ptr, int x, size_t n);

   Note that ptr is a void pointer, so that we can pass any type of pointer to this function.

   Let us see a simple example in C to demonstrate how memset() function is used:

// C program to demonstrate working of memset()
#include <stdio.h>
#include <string.h>

int main() {
	char str[50] = "GeeksForGeeks is for programming geeks.";
	printf("\nBefore memset(): %s\n", str);

	// Fill 8 characters starting from str[13] with '.'
	memset(str + 13, '.', 8*sizeof(char));

	printf("After memset():  %s", str);
	return 0;
}


   Output:
Before memset(): GeeksForGeeks is for programming geeks.
After memset(): GeeksForGeeks........programming geeks.

   Explanation: (str + 13) points to first space (0 based index) of the string "GeeksForGeeks is for
   programming geeks.", and memset() sets the character '.' starting from first ' ' of the string up to
   8 character positions of the given string and hence we get the output as shown above.

// C program to demonstrate working of memset()
#include <stdio.h>
#include <string.h>

void printArray(int arr[], int n) {
	for (int i=0; i<n; i++) {
		printf("%d ", arr[i]);
	}
}

int main() {
	int n = 10;
	int arr[n];

	// Fill whole array with 0.
	memset(arr, 0, n*sizeof(arr[0]));
	printf("Array after memset()\n");
	printArray(arr, n);

	return 0;
}


   Output:
0 0 0 0 0 0 0 0 0 0

   Exercise :
   Predict the output of below program.

// C program to demonstrate working of memset()
#include <stdio.h>
#include <string.h>

void printArray(int arr[], int n) {
	for (int i=0; i<n; i++) {
		printf("%d ", arr[i]);
	}
}

int main() {
	int n = 10;
	int arr[n];

	// Fill whole array with 100.
	memset(arr, 10, n*sizeof(arr[0]));
	printf("Array after memset()\n");
	printArray(arr, n);

	return 0;
}


   Note that the above code doesn't set array values to 10 as memset works character by character and an
   integer contains more than one bytes (or characters).

   However, if we replace 10 with -1, we get -1 values. Because representation of -1 contains all 1s in
   case of both char and int.

   Reference: memset man page (linux)



---
https://www.ibm.com/docs/en/i/7.1?topic=functions-memset-set-bytes-value

memset() — Set Bytes to Value

Format
#include <string.h>
void *memset(void *dest, int c, size_t count);

Language Level: ANSI
Threadsafe: Yes.

Description
The memset() function sets the first count bytes of dest to the value c. The value of c is converted to an
unsigned character.

Return Value
The memset() function returns a pointer to dest.

Example that uses memset()
This example sets 10 bytes of the buffer to A and the next 10 bytes to B.

#include <string.h>
#include <stdio.h>

#define  BUF_SIZE  20

int main(void) {
	char buffer[BUF_SIZE + 1];
	char *string;

	memset(buffer, 0, sizeof(buffer));
	string = (char *) memset(buffer,'A', 10);
	printf("\nBuffer contents: %s\n", string);
	memset(buffer+10, 'B', 10);
	printf("\nBuffer contents: %s\n", buffer);
}
 
/*******************  Output should be similar to: ***************
 
Buffer contents: AAAAAAAAAA
 
Buffer contents: AAAAAAAAAABBBBBBBBBB
*/



---

