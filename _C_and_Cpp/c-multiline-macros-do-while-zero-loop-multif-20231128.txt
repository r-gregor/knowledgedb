filename: c_multiline-macros-do-while-zero-loop-multif_20231128.txt
https://hownot2code.wordpress.com/2016/12/05/do-while-0-in-macros/

do {...} while (0) in macros
05.12.2016

   If you are a C programmer, you must be familiar with macros. They are powerful and can help you ease
   your work if used correctly. However, if you don't define macros carefully, they may bite you and
   drive you crazy. In many C programs, you may see a special macro definition which may seem not so
   straightforward. Here is one example:

#define __set_task_state(tsk, state_value) \
	do { (tsk)->state = (state_value); } while (0)

   There are many this kind of macros which uses do{...}while(0) in Linux kernels and other popular C
   libraries. What's the use of this macro? Robert Love from Google(previously worked on Linux
   kernel development) gives us the answer.

   do{...}while(0) is the only construct in C that lets you define macros that always work the same way,
   so that a semicolon after your macro always has the same effect, regardless of how the macro is used
   (with particularly emphasis on the issue of nesting the macro in an if without curly-brackets). For
   example:
   Later you may call:
foo(wolf);

   This will be expanded to:
bar(wolf); baz(wolf);

   This is the expected output. Next let's see if we have:
if (!feral)
	foo(wolf);

   The expansion may not be what you expect. The expansion may be:
if (!feral)
	bar(wolf);
baz(wolf);

   It isn't possible to write multistatement macros that do the right thing in all situations. You can't
   make macros behave like functions-without do/while(0).

   If we redefine the macro with do{...}while(0), we will see:
#define foo(x) do { bar(x); baz(x); } while (0)

   Now, this statement is functionally equivalent to the former. The do ensures the logic inside the
   curly-brackets executes, the while(0) ensures that happens but once. Same as without the loop.For the
   above if statement, it will be :
if (!feral)
	do { bar(wolf); baz(wolf); } while (0);

   Semantically, it's the same as:
if (!feral) {
	bar(wolf);
	baz(wolf);
}

   You might rejoin, why not just wrap the macro in curly-brackets? Why also have the do/while(0) logic?
   For example, we define the macro with curly bracket:
#define foo(x) { bar(x); baz(x); }

   This is fine for the above if statement, but if we have below statement:
if (!feral)
	foo(wolf);
else
	bin(wolf);

   The expanded code will be :
if (!feral) {
	bar(wolf);
	baz(wolf);
};
else
	bin(wolf);

   This is a syntax error.

   In conclusion, macros in Linux and other codebases wrap their logic in do/while(0) because it ensures
   the macro always behaves the same, regardless of how semicolons and curly-brackets are used in the
   invoking code.



---
https://www.geeksforgeeks.org/multiline-macros-in-c/

Multiline macros in C
28 May, 2017

   In this article, we will discuss how to write a multi-line macro. We can write multi-line macro same
   like function, but each statement ends with "\". Let us see with example. Below is simple macro,
   which accepts input number from user, and prints whether entered number is even or odd.

#include <stdio.h>

#define MACRO(num, str) {\
	printf("%d", num);\
	printf(" is");\
	printf(" %s number", str);\
	printf("\n");\
}

int main(void) {
	int num;

	printf("Enter a number: ");
	scanf("%d", #);

	if (num & 1)
		MACRO(num, "Odd");
	else
		MACRO(num, "Even");

	return 0;
}


   At first look, the code looks OK, but when we try to compile this code, it gives compilation error.
$> make macro
$> cc macro.c -o macro
macro.c: In function 'main':
macro.c:19:2: error: 'else' without a previous 'if'
make: *** [macro] Error 1
$> 

   Let us see what mistake we did while writing macro. We have enclosed macro in curly braces. According
   to C-language rule, each C-statement should end with semicolon. That's why we have ended MACRO with
   semicolon. Here is a mistake. Let us see how compile expands this macro.
if (num & 1)
{
	-------------------------
	---- Macro expansion ----
	-------------------------
};	  /* Semicolon at the end of MACRO, and here is ERROR */

else
{
   -------------------------
   ---- Macro expansion ----
   -------------------------

};

   We have ended macro with semicolon. When compiler expands macro, it puts semicolon after "if"
   statement. Because of semicolon between "if and else statement" compiler gives compilation error.
   Above program will work fine, if we ignore "else" part.

   To overcome this limitation, we can enclose our macro in "do-while(0)" statement. Our modified macro
   will look like this.

#include <stdio.h>

#define MACRO(num, str) do {\
	printf("%d", num);\
	printf(" is");\
	printf(" %s number", str);\
	printf("\n");\
} while(0)

int main(void) {
	int num;

	printf("Enter a number: ");
	scanf("%d", #);

	if (num & 1)
		MACRO(num, "Odd");
	else
		MACRO(num, "Even");

	return 0;
}


   Compile and run above code, now this code will work fine.
$> make macro
$> cc macro.c -o macro
$> ./macro
Enter a number: 9
9 is Odd number
$> ./macro
Enter a number: 10
10 is Even number
$> 

   We have enclosed macro in "do - while(0)" loop and at the end of while, we have put condition as
   "while(0)", that's why this loop will execute only one time.

   Similarly, instead of "do - while(0)" loop we can enclose multi-line macro in parenthesis. We can
   achieve the same result by using this trick. Let us see example.

#include <stdio.h>

#define MACRO(num, str) ({\
	printf("%d", num);\
	printf(" is");\
	printf(" %s number", str);\
	printf("\n");\
})

int main(void) {
	int num;

	printf("Enter a number: ");
	scanf("%d", #);

	if (num & 1)
		MACRO(num, "Odd");
	else
		MACRO(num, "Even");

	return 0;
}


$> make macro
$> cc macro.c -o macro
$> ./macro
Enter a number: 10
10 is Even number
$> ./macro
Enter a number: 15
15 is Odd number
$>

   This article is compiled by Narendra Kangralkar. Please write comments if you find anything
   incorrect, or you want to share more information about the topic discussed above.
   Whether you're preparing for your first job interview or aiming to upskill in this ever-evolving tech
   landscape, GeeksforGeeks Courses are your key to success. We provide top-quality content at
   affordable prices, all geared towards accelerating your growth in a time-bound manner. Join the
   millions we've already empowered, and we're here to do the same for you. Don't miss out - check
   it out now!


---
https://bruceblinn.com/linuxinfo/DoWhile.html

do { } while(0)

   You may see a do loop with the conditional expression set to a constant value of zero (0). This
   creates a loop that will execute exactly one time. This is a coding idiom that allows a multi-line
   macro to be used anywhere that a single statement can be used.

   Since the conditional expression of the do loop is a constant value, the compiler will not generate
   any additional code to process the loop, so this idiom does not add any overhead to the code when it
   is executed.

   This technique is frequently used in macro definitions where the body of the macro is not a single or
   simple statement. Since you do not know where the macro will be used, it is important that body of
   the macro has a syntax that is equivalent to the statement it replaces. For example, the following
   macro will replace a single statement with two statements.

#define foo \
	statement_1; \
	statement_2

   If this macro is used in an if statement like the one below, it will not have the intended effect.

if (condition)
	foo;

   After replacing the macro in this code, the if condition will be followed by two statements rather
   than one. This is probably not what you want because the if condition will only control the execution
   of the first statement.

if (condition)
	statement_1;
	statement_2;

   The following example shows what the macro looks like when it is rewritten using the do loop idiom.
   Notice there is no ending semicolon in the definition; the semicolon will be provided by the
   statement that is replaced.

#define foo \
do { \
	statement_1; \
	statement_2; \
} while (0)

   Now, when the macro is used, the if condition is followed by a single, compound statement, which will
   behave as you would expect.

if (condition)
	do {
		statement_1;
		statement_2;
	} while (0);

   A similar problem occurs when the body of the macro contains an if statement without an else
   statement.

#define foo \
   if (condition) \
	   statement

   If this macro is used in another if statement that does have an else statement, the if statement in
   the macro body will steal the else that follows it.

if (condition)
	foo;
else
	bar;

   Although the indentation of the else statement shows the intention that it should belong to the first
   if statement, it will actually be associated with the second if statement.

if (condition)
	if (condition)
		statement;
	else
		bar;

   Using the do loop idiom in this instance, will terminate the if statement in the macro, so that it
   will not steal an else statement that happens to follow it.

if (condition)
	do {
		if (condition)
			statement;
	} while (0);
else
	bar;

   Using an empty do-while(0) loop is also a common way to write an empty statement in a macro
   definition. In older compilers, this was necessary to prevent the compiler from issuing a warning.
   For example:
   #define do_nothing do {} while (0)

   The current gcc compiler provides another method that can be used in place of the do-loop idiom as
   shown in the following example.

#define foo ({ \
	statement_1; \
	statement_2; \
})



---
https://wiki.sei.cmu.edu/confluence/display/c/PRE10-C.+Wrap+multistatement+macros+in+a+do-while+loop

Macros are often used to execute a sequence of multiple statements as a group.

Inline functions are, in general, more suitable for this task (see PRE00-C. Prefer inline or static
functions to function-like macros). Occasionally, however, they are not feasible (when macros are expected
to operate on variables of different types, for example).

When multiple statements are used in a macro, they should be bound together in a do-while loop syntactically,
so the macro can appear safely inside if clauses or other places that expect a single statement or a
statement block. Note that this is only effective if none of the multiple statements are break or continue,
as they would be captured by the do-while loop. (Alternatively, when an if, for, or while statement uses
braces even for a single body statement, then multiple statements in a macro will expand correctly even
without a do-while loop (see EXP19-C. Use braces for the body of an if, for, or while statement).
Noncompliant Code Example

This noncompliant code example contains multiple, unbound statements:
/*
 * Swaps two values and requires
 * tmp variable to be defined.
 */
#define SWAP(x, y) \
	tmp = x; \
	x = y; \
	y = tmp

This macro expands correctly in a normal sequence of statements but not as the then clause in an if
statement:
int x, y, z, tmp;
if (z == 0)
	SWAP(x, y);

It expands to the following, which is certainly not what the programmer intended:
int x, y, z, tmp;
if (z == 0)
	tmp = x;
	x = y;
	y = tmp;

Furthermore, this macro violates PRE02-C. Macro replacement lists should be parenthesized.
Noncompliant Code Example

This noncompliant code example parenthesizes its macro arguments, but inadequately bounds multiple
statements:
/*
 * Swaps two values and requires
 * tmp variable to be defined.
 */
#define SWAP(x, y) { tmp = (x); (x) = (y); (y) = tmp; }

This macro fails to expand correctly in some case, such as the following example, which is meant to be
an if statement with two branches:
if (x > y)
	SWAP(x, y);          /* Branch 1 */
else
	do_something();     /* Branch 2 */

Following macro expansion, however, this code is interpreted as an if statement with only one branch:
if (x > y) { /* Single-branch if-statement!!! */

	tmp = x;   /* The one and only branch consists */
	x = y;     /* of the block. */
	y = tmp;
}
;            /* Empty statement */
else         /* ERROR!!! "parse error before else" */
	do_something();

The problem is the semicolon (;) following the block.

Compliant Solution
Wrapping the macro inside a do-while loop mitigates the problem:
/*
 * Swaps two values and requires
 * tmp variable to be defined.
 */
#define SWAP(x, y) \
	do { \
		tmp = (x); \
		(x) = (y); \
		(y) = tmp; } \
	while (0)

The do-while loop will always be executed exactly once.

This macro still violates the recommendation PRE12-C. Do not define unsafe macros, because both macro
arguments are evaluated twice. It is expected that the arguments are simple lvalues.


---

