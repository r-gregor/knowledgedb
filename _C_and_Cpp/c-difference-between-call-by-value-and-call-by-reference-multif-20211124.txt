filename: c_difference-between-call-by-value-and-call-by-reference-multif_20211124.txt
https://www.tutorialspoint.com/cprogramming/c_functions.htm

C - Functions

   A function is a group of statements that together perform a task. Every C program has at least one
   function, which is main(), and all the most trivial programs can define additional functions.

   You can divide up your code into separate functions. How you divide up your code among different
   functions is up to you, but logically the division is such that each function performs a specific
   task.

   A function declaration tells the compiler about a function's name, return type, and parameters. A
   function definition provides the actual body of the function.

   The C standard library provides numerous built-in functions that your program can call. For example,
   strcat() to concatenate two strings, memcpy() to copy one memory location to another location, and
   many more functions.

   A function can also be referred as a method or a sub-routine or a procedure, etc.

Defining a Function

   The general form of a function definition in C programming language is as follows -
return_type function_name( parameter list ) {
	body of the function
}

   A function definition in C programming consists of a function header and a function body. Here are
   all the parts of a function -
	 * Return Type - A function may return a value. The return_type is the data type of the value the
	   function returns. Some functions perform the desired operations without returning a value. In
	   this case, the return_type is the keyword void.
	 * Function Name - This is the actual name of the function. The function name and the parameter list
	   together constitute the function signature.
	 * Parameters - A parameter is like a placeholder. When a function is invoked, you pass a value to
	   the parameter. This value is referred to as actual parameter or argument. The parameter list
	   refers to the type, order, and number of the parameters of a function. Parameters are optional;
	   that is, a function may contain no parameters.
	 * Function Body - The function body contains a collection of statements that define what the
	   function does.

Example
   Given below is the source code for a function called max(). This function takes two parameters num1
   and num2 and returns the maximum value between the two -
/* function returning the max between two numbers */
int max(int num1, int num2) {

	/* local variable declaration */
	int result;

	if (num1 > num2)
		result = num1;
	else
		result = num2;

	return result;
}

Function Declarations
   A function declaration tells the compiler about a function name and how to call the function. The
   actual body of the function can be defined separately.

   A function declaration has the following parts -
return_type function_name( parameter list );

   For the above defined function max(), the function declaration is as follows -
int max(int num1, int num2);

   Parameter names are not important in function declaration only their type is required, so the
   following is also a valid declaration -
int max(int, int);

   Function declaration is required when you define a function in one source file and you call that
   function in another file. In such case, you should declare the function at the top of the file
   calling the function.

Calling a Function
   While creating a C function, you give a definition of what the function has to do. To use a function,
   you will have to call that function to perform the defined task.

   When a program calls a function, the program control is transferred to the called function. A called
   function performs a defined task and when its return statement is executed or when its
   function-ending closing brace is reached, it returns the program control back to the main program.

   To call a function, you simply need to pass the required parameters along with the function name, and
   if the function returns a value, then you can store the returned value. For example -
#include <stdio.h>

/* function declaration */
int max(int num1, int num2);

int main () {

	/* local variable definition */
	int a = 100;
	int b = 200;
	int ret;

	/* calling a function to get max value */
	ret = max(a, b);

	printf( "Max value is : %d\n", ret );

	return 0;
}

/* function returning the max between two numbers */
int max(int num1, int num2) {

	/* local variable declaration */
	int result;

	if (num1 > num2)
		result = num1;
	else
		result = num2;

	return result;
}

   We have kept max() along with main() and compiled the source code. While running the final
   executable, it would produce the following result -
Max value is : 200

Function Arguments
   If a function is to use arguments, it must declare variables that accept the values of the arguments.
   These variables are called the formal parameters of the function.

   Formal parameters behave like other local variables inside the function and are created upon entry
   into the function and destroyed upon exit.

   While calling a function, there are two ways in which arguments can be passed to a function -
   ----------------------------------------------------------------------------------------------------------
   Sr.No.                  Call Type & Description
   ----------------------------------------------------------------------------------------------------------
   1 Call by value         This method copies the actual value of an argument into the formal parameter of
     [**1]                 the function. In this case, changes made to the parameter inside the function have
                           no effect on the argument.

   2 Call by reference     This method copies the address of an argument into the formal parameter. Inside
     [**2]                 the function, the address is used to access the actual argument used in the call.
                           This means that changes made to the parameter affect the argument.
   ----------------------------------------------------------------------------------------------------------

   By default, C uses call by value to pass arguments. In general, it means the code within a function
   cannot alter the arguments used to call the function.


---
[**1]
https://www.tutorialspoint.com/cprogramming/c_function_call_by_value.htm

Function call by Value in C

   The call by value method of passing arguments to a function copies the actual value of an argument
   into the formal parameter of the function. In this case, changes made to the parameter inside the
   function have no effect on the argument.

   By default, C programming uses call by value to pass arguments. In general, it means the code within
   a function cannot alter the arguments used to call the function. Consider the function swap()
   definition as follows.
/* function definition to swap the values */
void swap(int x, int y) {

	int temp;

	temp = x;    /* save the value of x */
	x = y;       /* put y into x */
	y = temp;    /* put temp into y */

	return;
}

   Now, let us call the function swap() by passing actual values as in the following example -
#include <stdio.h>

/* function declaration */
void swap(int x, int y);

int main () {

	/* local variable definition */
	int a = 100;
	int b = 200;

	printf("Before swap, value of a : %d\n", a );
	printf("Before swap, value of b : %d\n", b );

	/* calling a function to swap the values */
	swap(a, b);

	printf("After swap, value of a : %d\n", a );
	printf("After swap, value of b : %d\n", b );

	return 0;
}

void swap(int x, int y) {

	int temp;

	temp = x; /* save the value of x */
	x = y;	/* put y into x */
	y = temp; /* put temp into y */

	return;
}

   Let us put the above code in a single C file, compile and execute it, it will produce the following
   result -
Before swap, value of a : 100
Before swap, value of b : 200
After swap, value of a : 100
After swap, value of b : 200

   It shows that there are no changes in the values, though they had been changed inside the function.
   c_functions.htm


---
[**2]
https://www.tutorialspoint.com/cprogramming/c_function_call_by_reference.htm

Function call by reference in C

   The call by reference method of passing arguments to a function copies the address of an argument
   into the formal parameter. Inside the function, the address is used to access the actual argument
   used in the call. It means the changes made to the parameter affect the passed argument.

   To pass a value by reference, argument pointers are passed to the functions just like any other
   value. So accordingly you need to declare the function parameters as pointer types as in the
   following function swap(), which exchanges the values of the two integer variables pointed to, by
   their arguments.
/* function definition to swap the values */
void swap(int *x, int *y) {

	int temp;
	temp = *x;      /* save the value at address x */
	*x = *y;        /* put y into x */
	*y = temp;      /* put temp into y */

	return;
}

   Let us now call the function swap() by passing values by reference as in the following example -
#include <stdio.h>

int main () {

	/* local variable definition */
	int a = 100;
	int b = 200;

	printf("Before swap, value of a : %d\n", a );
	printf("Before swap, value of b : %d\n", b );

	/* calling a function to swap the values */
	swap(&a, &b);

	printf("After swap, value of a : %d\n", a );
	printf("After swap, value of b : %d\n", b );

	return 0;
}

void swap(int *x, int *y) {

	int temp;

	temp = *x;   /* save the value of x */
	*x = *y;     /* put y into x */
	*y = temp;   /* put temp into y */

	return;
}

   Let us put the above code in a single C file, compile and execute it, to produce the following result -
Before swap, value of a : 100
Before swap, value of b : 200
After swap, value of a : 200
After swap, value of b : 100

   It shows that the change has reflected outside the function as well, unlike call by value where the
   changes do not reflect outside the function.


---
https://www.geeksforgeeks.org/difference-between-call-by-value-and-call-by-reference/

Difference between Call by Value and Call by Reference
14 Aug, 2020

   Functions can be invoked in two ways: Call by Value or Call by Reference. These two ways are
   generally differentiated by the type of values passed to them as parameters.

   The parameters passed to function are called actual parameters whereas the parameters received by
   function are called formal parameters.
   Take a step-up from those "Hello World" programs. Learn to implement data structures like Heap,
   Stacks, Linked List and many more! Check out our Data Structures in C course to start learning
   today.

   Call By Value: In this parameter passing method, values of actual parameters are copied to function's
   formal parameters and the two types of parameters are stored in different memory locations. So any
   changes made inside functions are not reflected in actual parameters of the caller.

   Call by Reference: Both the actual and formal parameters refer to the same locations, so any changes
   made inside the function are actually reflected in actual parameters of the caller.
   Call By Value Call By Reference
   While calling a function, we pass values of variables to it. Such functions are known as "Call By
   Values". While calling a function, instead of passing the values of variables, we pass address of
   variables(location of variables) to the function known as "Call By References.
   In this method, the value of each variable in calling function is copied into corresponding dummy
   variables of the called function. In this method, the address of actual variables in the calling
   function are copied into the dummy variables of the called function.
   With this method, the changes made to the dummy variables in the called function have no effect on
   the values of actual variables in the calling function. With this method, using addresses we would
   have an access to the actual variables and hence we would be able to manipulate them.
// C program to illustrate
// call by value

#include

// Function Prototype
void swapx(int x, int y);

// Main function
int main() {
	int a = 10, b = 20;

	// Pass by Values
	swapx(a, b);

	printf("a=%d b=%d\n", a, b);

	return 0;
}

// Swap functions that swaps
// two values
void swapx(int x, int y) {
	int t;

	t = x;
	x = y;
	y = t;

	printf("x=%d y=%d\n", x, y);
}


Output:
x=20 y=10
a=10 b=20

// C program to illustrate
// Call by Reference

#include

// Function Prototype
void swapx(int*, int*);

// Main function
int main() {
	int a = 10, b = 20;

	// Pass reference
	swapx(&a, &b);

	printf("a=%d b=%d\n", a, b);

	return 0;
}

// Function to swap two variables
// by references
void swapx(int* x, int* y) {
	int t;

	t = *x;
	*x = *y;
	*y = t;

	printf("x=%d y=%d\n", *x, *y);
}

Output:
x=20 y=10
a=20 b=10

   Thus actual values of a and b remain unchanged even after exchanging the values of x and y. Thus
   actual values of a and b get changed after exchanging values of x and y.
   In call by values we cannot alter the values of actual variables through function calls. In call by
   reference we can alter the values of variables through function calls.
   Values of variables are passes by Simple technique. Pointer variables are necessary to define to
   store the address values of variables.

   Note : In C, we use pointers to achieve call by reference. In C++, we can either use pointers or
   references to for pass by reference. In Java, primitive types are passed as values and
   non-primitive types are always references.


---
https://courses.washington.edu/css342/zander/css332/passby.html

Function pass by value vs. pass by reference

   I will call what you are passing in a to a function the actual parameters, and where you receive
   them, the parameters in the function, the formal parameters. They are also called actual and formal
   arguments.
   When passing parameters, what it is called and what happens can be confusing. It is less essential
   that you call it the "correct" thing than you know exactly what is happening. It is critical to have
   a good mental model, a valid memory picture of the process.
   Recall that when you call a function, a chunk of memory called an activation record is allocated.
   Critical to the discussion here is that this memory holds the formal parameter values and function
   local variables.
   By definition, pass by value means you are making a copy in memory of the actual parameter's value
   that is passed in, a copy of the contents of the actual parameter. Use pass by value when when you
   are only "using" the parameter for some computation, not changing it for the client program.
   In pass by reference (also called pass by address), a copy of the address of the actual parameter is
   stored. Use pass by reference when you are changing the parameter passed in by the client program.
   Consider a swapping function to demonstrate pass by value vs. pass by reference. This function, which
   swaps ints, cannot be done in Java.
main() {
	int i = 10, j = 20;
	swapThemByVal(i, j);
	cout << i << "  " << j << endl;	// displays 10  20
	swapThemByRef(i, j);
	cout << i << "  " << j << endl;	// displays 20  10
	...
}

void swapThemByVal(int num1, int num2) {
	int temp = num1;
	num1 = num2;
	num2 = temp;
}

void swapThemByRef(int& num1, int& num2) {
	int temp = num1;
	num1 = num2;
	num2 = temp;
}

   First, we show the memory picture for swapThemByVal. The activation record holds the memory for the
   two parameters, num1 and num2, and the local variable, temp. A copy of the values from main, in the
   contents of i and j, are copied. All the manipulation is done in the activation record.
                       +-------------+                  +-------------+
        swapThemByVal: |+--+         | swapThemByVal:   |+--+         |
        (at start)     ||..| temp    | (after           ||10| temp    |
main:                  |+--+         |    assignments)  |+--+         |
  +----+               |+--+         |                  |+--+         |
i | 10 |               ||10| num1    |                  ||20| num1    |
  +----+               |+--+         |                  |+--+         |
  +----+               |+--+         |                  |+--+         |
j | 20 |               ||20| num2    |                  ||10| num2    |
  +----+               |+--+         |                  |+--+         |
                       +-------------+                  +-------------+

   The contents of memory of   i   and	 j	 don't change. The contents of memory in the function's
   activation record changes, but when the function terminates, the memory is released and the changes
   are lost.
   Contrast this with passing by reference. The addresses of   i   and	 j	 are passed (noted by the
   arrows) by reference. The compiler knows they are references so when the parameters are referred to
   in the function, the compiler dereferences num1 and num2 automatically so   i   and	 j	 of main's
   memory are changed.
                       +-------------+
        swapThemByRef: |+--+         |
                       ||..| temp    |
main:                  |+--+         |
  +----+               |+--+         |
i | 10 | <-------------||--| num1    |
  +----+               |+--+         |
  +----+               |+--+         |
j | 20 | <-------------||--| num2    |
  +----+               |+--+         |
                       +-------------+

   After the assignments:
                       +-------------+
        swapThemByRef: |+--+         |
                       ||10| temp    |
main:                  |+--+         |
  +----+               |+--+         |
i | 20 | <-------------||--| num1    |
  +----+               |+--+         |
  +----+               |+--+         |
j | 10 | <-------------||--| num2    |
  +----+               |+--+         |
                       +-------------+

   This is the essence of pass by value vs. pass by reference. It doesn't matter if the parameters are
   primitive types, arrays, or objects, either a copy is made or an address is stored. As noted
   elsewhere, when objects are copied, the copy constructor is called to do the copying.
   Typically if you aren't going to change a variable, you use pass by value. But if you are passing
   something in that uses a lot of memory, i.e., passing an object or passing an array, even if you
   aren't changing it, you use what I like to call fake pass by value.
   For efficiency, you pass by reference so only the address is passed, but you put a const in front of
   it. This casts it to a constant for use in the function. Note that if this function passes to some
   other function, it is now constant object or array. For example:
main() {
	SomeBigClass x(100);
	// initialize and do whatever with x
	doSomething(x);
	...
}

void doSomething(const SomeBigClass& x) {
	...
}



---
https://www.cs.fsu.edu/~myers/c++/notes/references.html

Pass By Reference vs. Pass By Value

Reference Variables
	 * A reference variable is a nickname, or alias, for some other variable
	 * To delare a reference variable, we use the unary operator &
  int n = 5;          // this declares a variable, n
  int & r = n;        // this declares r as a reference to n

	   In this example, r is now a reference to n. (They are both referring to the SAME storage location
	   in memory).
	 * To declare a reference variable, add the & operator after the type
	 * Here is a small example program that illustrates a reference variable
	 * Note:  The notation can become confusing when different sources place the & differently.  The
	   following three declarations are equivalent:
  int &r = n;
  int& r = n;
  int & r = n;

	   The spacing between the "int" and the "r" is irrelevant. All three of these declare r as a
	   reference variable that refers to n.

WHY???!

	 * While the above code example shows what a reference variable is, you will not likely use it this
	   way!
	 * In this example, the regular variable and the reference are in the same scope, so it seems silly.
	   ("Why do I need to call it r when I can call it x ?")
	 * So when are references useful? When the two variables are in different scopes (this means
	   functions!)

Pass By Value
	 * Recall that the variables in the formal parameter list are always local variables of a function
	 * Consider this example program
		  + The Twice function takes two integer parameters, and multiplies each by 2.
		  + Note that the original variables passed into the function from main() are not affected by
			the function call
		  + The local parameters a and b are copies of the original data sent in on the call
	 * This is known as Pass By Value - function parameters receive copies of the data sent in.
 void Func1(int x, double y)
 {
   x = 12;              // these lines will not affect the caller
   y = 20.5;            // they change LOCAL variables x and y
 }

	 * In the function above, any int and double r-values may be sent in
  int num = 5;
  double avg = 10.7;
  Func1(num, avg);              // legal
  Func1(4, 10.6);               // legal
  Func1(num + 6, avg - 10.6);   // legal

Pass By Reference
	 * In this version of the example, the Twice function looks like this:
void Twice(int& a, int& b) {
	a *= 2;
	b *= 2;
}

		  + Note that when it is run, the variables passed into Twice from the main() function DO get
			changed by the function
		  + The parameters a and b are still local to the function, but they are reference variables
			(i.e. nicknames to the original variables passed in (x and y))
	 * When reference variables are used as formal parameters, this is known as Pass By Reference
void Func2(int& x, double& y) {
	x = 12;      // these WILL affect the original arguments
	y = 20.5;
}

	 * When a function expects strict reference types in the parameter list, an L-value (i.e. a
	   variable, or storage location) must be passed in
int num;
double avg;
Func2(num, avg);               // legal
Func2(4, 10.6);                // NOT legal
Func2(num + 6, avg - 10.6);    // NOT legal

	 * Note: This also works the same for return types. A return by value means a copy will be made. A
	   reference return type sends back a reference to the original.
  int Task1(int x, double y);     // uses return by value
  int& Task2(int x, double y);    // uses return by reference

	   This is a trickier situation than reference parameters (which we will not see in detail right
	   now).

Comparing: Value vs. Reference
	 * Pass By Value
		  + The local parameters are copies of the original arguments passed in
		  + Changes made in the function to these variables do not affect originals
	 * Pass By Reference
		  + The local parameters are references to the storage locations of the original arguments
			passed in.
		  + Changes to these variables in the function will affect the originals
		  + No copy is made, so overhead of copying (time, storage) is saved

const Reference Parameters:
	 * The keyword const can be used on reference parameters.
  void Func3(const int& x);		// pass by const reference

	   This will prevent x from being changed in the function body

	 * General format
  const typeName & variableName

	   This establishes variableName as a reference to a location that cannot be changed through the use
	   of variableName.
	 * This would be used to avoid the overhead of making a copy (especially of a large item), but still
	   prevent the data from being changed
	 * Since the compiler will guarantee that the parameter value cannot change, it IS legal to pass in
	   any R-value in this case:
int num = 5;
Func3(num);           // legal
Func3(10);            // legal
Func3(num + 50);      // legal



---
https://beginnersbook.com/2014/01/c-function-call-by-value-example/

Function call by value in C programming

   Function call by value is the default way of calling a function in C programming. Before we discuss
   function call by value, lets understand the terminologies that we will use while explaining this:

   Actual parameters: The parameters that appear in function calls.
   Formal parameters: The parameters that appear in function declarations.

   For example:
#include <stdio.h>

int sum(int a, int b) {
	int c=a+b;
	return c;
}

int main() {
	int var1 =10;
	int var2 = 20;
	int var3 = sum(var1, var2);
	printf("%d", var3);

	return 0;
}

   In the above example variable a and b are the formal parameters (or formal arguments). Variable var1
   and var2 are the actual arguments (or actual parameters). The actual parameters can also be the
   values. Like sum(10, 20), here 10 and 20 are actual parameters.

   In this guide, we will discuss function call by value. If you want to read call by reference method
   then refer this guide: function call by reference.

   Lets get back to the point.
   What is Function Call By value?
   When we pass the actual parameters while calling a function then this is known as function call by
   value. In this case the values of actual parameters are copied to the formal parameters. Thus
   operations performed on the formal parameters don't reflect in the actual parameters.

Example of Function call by Value
   As mentioned above, in the call by value the actual arguments are copied to the formal arguments,
   hence any operation performed by function on arguments doesn't affect actual parameters. Lets take an
   example to understand this:
#include <stdio.h>

int increment(int var) {
	var = var+1;
	return var;
}

int main() {
	int num1=20;
	int num2 = increment(num1);
	printf("num1 value is: %d", num1);
	printf("\nnum2 value is: %d", num2);

	return 0;
}


   Output:
num1 value is: 20
num2 value is: 21

   Explanation
   We passed the variable num1 while calling the method, but since we are calling the function using
   call by value method, only the value of num1 is copied to the formal parameter var. Thus change made
   to the var doesn't reflect in the num1.

Example 2: Swapping numbers using Function Call by Value

#include <stdio.h>
void swapnum( int var1, int var2 ) {
	int tempnum ;
	/*Copying var1 value into temporary variable */
	tempnum = var1 ;

	/* Copying var2 value into var1*/
	var1 = var2 ;

	/*Copying temporary variable value into var2 */
	var2 = tempnum ;

}

int main( ) {
	int num1 = 35, num2 = 45 ;
	printf("Before swapping: %d, %d", num1, num2);

	/*calling swap function*/
	swapnum(num1, num2);
	printf("\nAfter swapping: %d, %d", num1, num2);
}

   Output:
Before swapping: 35, 45
After swapping: 35, 45

   Why variables remain unchanged even after the swap?
   The reason is same - function is called by value for num1 & num2. So actually var1 and var2 gets
   swapped (not num1 & num2). As in call by value actual parameters are just copied into the formal
   parameters.


---
https://beginnersbook.com/2014/01/c-function-call-by-reference-example/

Function call by reference in C Programming

   Before we discuss function call by reference, lets understand the terminologies that we will use
   while explaining this:
   Actual parameters: The parameters that appear in function calls.
   Formal parameters: The parameters that appear in function declarations.
   For example: We have a function declaration like this:
int sum(int a, int b);

   The a and b parameters are formal parameters.

   We are calling the function like this:
int s = sum(10, 20); //Here 10 and 20 are actual parameters
or
int s = sum(n1, n2); //Here n1 and n2 are actual parameters

   In this guide, we will discuss function call by reference method. If you want to read call by value
   method then refer this guide: function call by value.

   Lets get back to the point.
   What is Function Call By Reference?
   When we call a function by passing the addresses of actual parameters then this way of calling the
   function is known as call by reference. In call by reference, the operation performed on formal
   parameters, affects the value of actual parameters because all the operations performed on the value
   stored in the address of actual parameters. It may sound confusing first but the following example
   would clear your doubts.

Example of Function call by Reference
   Lets take a simple example. Read the comments in the following program.
#include <stdio.h>

void increment(int *var) {
	/* Although we are performing the increment on variable
	* var, however the var is a pointer that holds the address
	* of variable num, which means the increment is actually done
	* on the address where value of num is stored.
	*/
	*var = *var+1;
}

int main() {
	int num=20;
	/* This way of calling the function is known as call by
	* reference. Instead of passing the variable num, we are
	* passing the address of variable num
	*/
	increment(&num);
	printf("Value of num is: %d", num);
	return 0;
}


   Output:
Value of num is: 21

Example 2: Function Call by Reference - Swapping numbers
   Here we are swapping the numbers using call by reference. As you can see the values of the variables
   have been changed after calling the swapnum() function because the swap happened on the addresses of
   the variables num1 and num2.
#include

void swapnum ( int *var1, int *var2 ) {
	int tempnum ;
	tempnum = *var1 ;
	*var1 = *var2 ;
	*var2 = tempnum ;
}

int main( ) {
	int num1 = 35, num2 = 45 ;
	printf("Before swapping:");
	printf("\nnum1 value is %d", num1);
	printf("\nnum2 value is %d", num2);

	/*calling swap function*/
	swapnum( &num1, &num2 );

	printf("\nAfter swapping:");
	printf("\nnum1 value is %d", num1);
	printf("\nnum2 value is %d", num2);
	return 0;
}

   Output:
Before swapping:
num1 value is 35
num2 value is 45
After swapping:
num1 value is 45
num2 value is 35



---
https://beginnersbook.com/2014/01/c-passing-pointers-to-functions/

Passing pointer to a function in C with example

   In this tutorial, you will learn how to pass a pointer to a function as an argument. To understand
   this concept you must have a basic idea of Pointers and functions in C programming.

   Just like any other argument, pointers can also be passed to a function as an argument. Lets take an
   example to understand how this is done.

Example: Passing Pointer to a Function in C Programming
   In this example, we are passing a pointer to a function. When we pass a pointer as an argument
   instead of a variable then the address of the variable is passed instead of the value. So any change
   made by the function using the pointer is permanently made at the address of passed variable. This
   technique is known as call by reference in C.

	 Try this same program without pointer, you would find that the bonus amount will not reflect in
	 the salary, this is because the change made by the function would be done to the local variables
	 of the function. When we use pointers, the value is changed at the address of variable

#include <stdio.h>

void salaryhike(int  *var, int b) {
	*var = *var+b;
}

int main() {
	int salary=0, bonus=0;
	printf("Enter the employee current salary:");
	scanf("%d", &salary);
	printf("Enter bonus:");
	scanf("%d", &bonus);
	salaryhike(&salary, bonus);
	printf("Final salary: %d", salary);
	return 0;
}

   Output:
Enter the employee current salary:10000
Enter bonus:2000
Final salary: 12000

Example 2: Swapping two numbers using Pointers
   This is one of the most popular example that shows how to swap numbers using call by reference.

	 Try this program without pointers, you would see that the numbers are not swapped. The reason is
	 same that we have seen above in the first example.

#include <stdio.h>

void swapnum(int *num1, int *num2) {
	int tempnum;

	tempnum = *num1;
	*num1 = *num2;
	*num2 = tempnum;
}

int main( ) {
	int v1 = 11, v2 = 77 ;
	printf("Before swapping:");
	printf("\nValue of v1 is: %d", v1);
	printf("\nValue of v2 is: %d", v2);

	/*calling swap function*/
	swapnum( &v1, &v2 );

	printf("\nAfter swapping:");
	printf("\nValue of v1 is: %d", v1);
	printf("\nValue of v2 is: %d", v2);
}

   Output:
Before swapping:
Value of v1 is: 11
Value of v2 is: 77
After swapping:
Value of v1 is: 77
Value of v2 is: 11


---

