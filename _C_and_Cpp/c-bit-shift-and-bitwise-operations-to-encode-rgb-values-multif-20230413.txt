filename: c_bit-shift-and-bitwise-operations-to-encode-rgb-values-multif_20230413.txt
https://cboard.cprogramming.com/c-programming/71058-bit-shifting-masking.html

Bit Shifting And Masking

     I have two main questions:
     1. What does the '&' actually do to the number in binary? How do I convert the number back?
     Code:
#define RGB16BIT565(r,g,b)  ((b & 31) + ((g & 63) << 5) + ((r & 31)<<11))

     For example, if I put in:
     Code:
color = RGB16BIT565(255, 0, 0);

     what does the 255 change to?
     2. Is this the proper way to get the original value back?
     Code:
#define RGB32BIT(a,r,g,b) ((b) + ((g) << 8) + ((r) << 16) + ((a) << 24)

color = RGB32BIT(0, 255, 0, 0);

red = (color >> 16) & 255;

     Would this code successfully return the number 255?
     Please don't numb down your answers. I'm not stupid. I have just never been taught.

***
     The binary AND (&) operator takes 2 integers and compares each bit in both numbers. It's probably
     easier to see than read. Let's say you had 2 8-bit numbers and you AND them together, you'd get:

     11000100 (number 1)
     01100101 (number 2)
     -------------
     01000100 (result)

     If the bit at a given position in both numbers is 1, that bit position in the result will also be
     1. Bitwise AND is useful for bit masking. Say you have an 8-bit number and you only want the lower
     4 bits of it...you could do:

     10011101
     00001111
     -------------
     00001101

     By doing that, you make it impossible for the upper 4 bits to result in 1, and the lower 4 bits
     will result in whatever they were in the original number.
     So you can encode all 3 8-bit rgb values into a 32-bit int easily and still have 8-bits left over.
     Say you pass in 3 8-bit values that represent the rgb of a color:

     00111001 (red)
     01101010 (green)
     10100111 (blue)

     If you store blue in the lowest 8 bits of the 32-bit int, green in the next 8 bits, and red in the
     8 bits just above that you can encode it by shifting the red color 16 bits to the left and the
     blue color 8 bits to the left, then bitwise ORing them all together. So you've got:

     00000000 00111001 00000000 00000000 (red << 16)
     00000000 00000000 01101010 00000000 (green << 8)
     00000000 00000000 00000000 10100111 (blue)
     ORing them all together you end up with:
     00000000 00111001 01101010 10100111 (color)

     ORing works like ANDing, but if either bit in the specific location is 1, the result is 1. To
     reverse it and break the color back into rgb values you'd use masking:

     red = (color >> 16) & 255;
     green = (color >> 8) & 255;
     blue = color & 255;

     So basically you're just shifting the 8 bits you want into the lowest 8 bits and then masking off
     everything else. Hopefully that all made sense.



---
https://www.fayewilliams.com/2011/09/21/bitwise-rgba-values/

Bitwise RGBA Values
8 June 2016

   Let's take a look at bit shifting in practice.

   Say we have a variable called colour, that contains an RGBA value. If you have never had any
   experience with graphics, all you need to know is that the colours you see on your screen may be
   represented as a combination of four different variables - red, green, blue and alpha. The alpha
   value is usually a percentage to describe the opacity, while red, green and blue values are combined
   to describe the final colour.

   RGBA values are usually stored in a single 32 bit integer, with 8 bits used for each component:

   RRRRRRRR GGGGGGGG BBBBBBBB AAAAAAAA

   All well and good, but imagine we need to know what the green value is independently of everything
   else. How can we extract this information? And moreover, how do we get a colour encoded into the
   variable in the first place?

Setting an RGBA value
   Imagine we want to set our colour to a bright yellow, fully opaque. This uses the RGBA components:

   R) 0xFF
   G) 0xCC
   B) 0x00
   A) 0xFF

   As binary this looks like:

   11111111 11001100 00000000 11111111

   OK, we could set the colour variable using a large number:
int colour = 4291559679;

   but that isn't a very intuitive (or re-usable) solution.

   Instead we'll add our components in one at a time using a mask, and shift them to the correct
   positions:
unsigned int colour =
0xFF | (0x00 << 8) | (0xCC << 16) | (0xFF << 24);

   To fully break down what is happening here, let's look at the binary behind the scenes:

   The first step is a bitwise OR on 0xFF with 0x00 shifted left by 8 places:

   0000 0000 1111 1111 // 0xff
   0000 0000 0000 0000 // 0x00 << 8
   ___________________
   0000 0000 1111 1111

   The next step is a bitwise OR on the result with 0xCC shifted left 16 places:

   0000 0000 0000 0000 1111 1111 // result
   1100 1100 0000 0000 0000 0000 // 0xCC << 16
   _____________________________
   1100 1100 0000 0000 1111 1111

   And finally a bitwise OR on the result with 0xFF shifted left 24 places:

   0000 0000 1100 1100 0000 0000 1111 1111 // result
   1111 1111 0000 0000 0000 0000 0000 0000 // 0xFF << 24
   _______________________________________
   1111 1111 1100 1100 0000 0000 1111 1111 // 0xFFCC00FF, or 4291559679

   The final result is the number we want to assign to the colour integer.

Extracting an RGBA value
   Now say we want to extract that green value from our colour integer. We can simply do the following:
int green = (colour & 0x00FF0000) >> 16;

   What's happening here?

   First off, we're masking our colour variable using bitwise AND to effectively "turn off" all the
   components that we aren't interested in:

   1111 1111 1100 1100 0000 0000 1111 1111
   0000 0000 1111 1111 0000 0000 0000 0000
   _______________________________________
   0000 0000 1100 1100 0000 0000 0000 0000

   Then we shift 16 places to the right to put our green component in the first byte:

   0000 0000 0000 0000 0000 0000 1100 1100 // 0xCC

   Simple! Now we know how to extract any component we choose by adjusting the mask and number of places
   shifted accordingly.

Bitwise operator summary
   A quick guide to which operator to use when.

   Bitwise AND
     * Use with a mask to check if bits are on or off
     * Turn off individual bits

   Bitwise OR
     * Turn on individual bits

   Bitwise XOR
     * Toggle bits on and off, like a switch

   Bitwise NOT
     * Turn off individual bits with AND

   Bitwise left and right shift
     * Extract bytes from longer variables
     * Insert bytes into longer variables
     * Multiplication and division by powers of 2 (but be cautious with signed integers, remainders and
       overflow)

   This is not an exhaustive list, but a basic guide. Have fun with bitwise operators, and if you want
   more examples and ideas, have a look at this fantastic collection of code snippets from Sean Eron
   Anderson.



---
https://ryanclark.me/rgb-to-hex-via-binary-shifting/

RGB to Hex via Binary Shifting
April 16, 2015

   A colleague of mine presented me with this code, baffled as to how it works.

function rgbToHex(r, g, b) {
	return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

   We know it converts an RGB value to it's hexadecimal equivalent, but how? It's doing some crazy stuff
   with binary, but when broken down it's actually incredibly simple and very clever.

Hex Codes
   Hex codes are six characters long, the first two being red, middle two being green and the last two
   being blue. Each character is a hexadecimal number.

     R R G G B B
   # 0 0 0 0 0 0

Hexadecimal Numbers
   A hex value can go from 0 to F - a maximum of 16 different values. When putting two together, we can
   now have a maximum of 256 (16 multiplied by 16) values (0 through to 255). We can represent 0 through
   to 255 in 8 bits.

   0 represented in 8 bits
   128 64  32  16  8   4   2   1
   0   0   0   0   0   0   0   0

   256 represented in 8 bits
   128 64  32  16  8   4   2   1
   1   1   1   1   1   1   1   1

   This means that red, green and blue can have 256 different variations each - that's 16,581,375
   colours we can reference in just 6 characters!

Double Arrow?
   If you don't know about bitwise operators, you might be very confused to see a << in JavaScript.
   Don't worry, what it does is very easy to understand.

   The << operator is also known as a left shift. This will shift the value of r 16 bits to the left.
   You can, at a maximum, shift a number 31 bits to the left.

Let's do an example
   The number one, represented as a decimal, is 1. Represented as binary (in 17 bits for the sake of
   consistency), is -
   65536 32768 16384 8192   4096   2048   1024   512   256   128   64   32   16   8   4   2   1
   0     0     0     0      0      0      0      0     0     0     0    0    0    0   0   0   1

   When we shift 1 16 bits to the left, we're adding 16 0's to the right of the one.
   65536 32768 16384 8192   4096   2048   1024   512   256   128   64   32   16   8   4   2   1
   1     0     0     0      0      0      0      0     0     0     0    0    0    0   0   0   0

   Which as a decimal, is equal to 65536.

   That's all it does! Told you it was simple.

Breaking it down
   We're going to start with the middle section - the part that deals with converting the red value to
   hexadecimal.

Red
   The code that does this is (r << 16). The red value is always first in a hex code, so in order to
   make room for green and blue, we shift it 16 bits to the left. This gives us the red value in binary,
   as well as 16 bits on the end - 8 bits for green and 8 bits for blue.

   If we do (255 << 16), we get the binary

   111111110000000000000000

   Which, when converted to hexadecimal, is equal to ff0000.

Green
   Now that we have converted red to binary and left room for green and blue, we can shift the green
   value 8 bits to the left. The code that does this is (g << 8).

   If we shift 255 to the left by 8 bits and represent it in 24 bits, we get this -

   000000001111111100000000

   Which, as hexadecimal, is equal to 00ff00.

   If you compare that table and the table in the red section, you can see that they line up perfectly -
   we can add the two values together without them conflicting.

   Take the red value

   111111110000000000000000

   add the green value

   000000001111111100000000

   and we get

   111111111111111100000000

   When this is converted to hexadecimal, it is ffff00 - the correct representation of rgb(255, 255, 0)
   as a hex.

Blue
   We don't need to shift our blue value to the left, because we are taking up the last 8 bits with it.
   If you look at the original code, you can see it just does + b at the end. This is because when
   adding a binary number and a decimal number in JavaScript, the decimal will be converted over to
   binary before it's added.

   If our blue value is 255, the binary representation of it is (again, in 24 bits)

   000000000000000011111111

   Which, when added to our red and green value, outputs

   111111111111111111111111

   Which is equal to "ffffff" when converted to a hexadecimal! Most of you will know that this colour is
   in fact white, or rgb(255, 255, 255).

Padding
   Wait a minute - what's that (1 << 24) at the start? Why is it needed?

   The decimal number 1 shifted 24 bits to the left provides us with the necessary padding for our RGB
   values in binary. When you convert a decimal number to a binary number, you aren't guaranteed 8 bits
   back - you will get the amount of bits it takes to represent that number (the reason we got 8 bits
   back for our 255 values is because it takes 8 bits to represent 255 in binary) - if you convert
   decimal 0 to binary you will only get one bit back - 0, or if you convert 13 to binary you will get
   four bits back - 1101.

   When we shift 1 to the left 24 bits, we get this -

   1000000000000000000000000

   The number 1 followed by 24 bits - 8 bits for each of our colour values.

   This means that whenever we add the results from converting our RGB values to binary, regardless of
   how many bits the result is, it'll always add into the correct section of bits because we are
   shifting the values to the left by either 16, 8 or 0 bits.

Binary to Hexadecimal
   We can convert our binary number into a hexadecimal string by using toString and passing it 16 as a
   value. Alternatively, you can use 2 for binary or 8 for octal.
function rgbToHex(r, g, b) {
	// r = 255, g = 255, b = 255
	return "#" +
	(
		(1 << 24)
			// Value: 16777216 or 1000000000000000000000000
		+ (r << 16)
			// Value: 16711680 or 111111110000000000000000
			// Total: 33488896 or 1111111110000000000000000
		+ (g << 8)
			// Value: 65280    or 1111111100000000
			// Total: 33554176 or 1111111111111111100000000
		+ b
			// Value: 255      or 11111111
			// Total: 33554431 or 1111111111111111111111111
	)
	.toString(16) // "1ffffff"
	.slice(1); // "ffffff"
}

rgbToHex(255, 255, 255); // #ffffff

Conclusion
   As you can see, the code used above is very clever but also very daunting to look at if you don't
   understand what's happening underneath the hood. Hopefully this post makes it all a lot clearer!



---
https://www.oreilly.com/library/view/actionscript-cookbook/0596004907/ch03s04.html

3.3. Decoding an RGB Value

Problem
   You want to extract the red, green, and blue components from an RGB value returned by Color.getRGB().

Solution
   Use the bitshift right and bitwise AND operators.

Discussion
   You can extract the red, green, and blue components from the single RGB value returned by
   Color.getRGB( ) using the bitshift right (>>) and bitwise AND (&) operators. You can extract one or
   more of the colors individually as follows:
// Create the Color object.
my_color = new Color(myMovieClip);

// Get the current RGB color.
rgb = my_color.getRGB(  );

// rgb contains an RGB color value in decimal form, such as 14501017 (rosy pink),
// which is stored internally as its hex equivalent, such as 0xDD4499.
red   = (rgb >> 16);
green = (rgb >> 8) & 0xFF;
blue  =  rgb & 0xFF;

   Although displayed as a decimal number, remember that each color is stored internally in its
   hexadecimal form: 0x RRGGBB. For example, the color value 14501017 (which is rosy pink) is stored
   internally as 0xDD4499. In this format, it is easy to see that the red component is DD in hex (221 in
   decimal), the green component is 44 in hex (68 in decimal), and the blue component is 99 in hex (153
   in decimal).

   The preceding transformation effectively separates a 24-bit value into its three 8-bit components
   (the leftmost eight bits represent red, the middle eight bits represent green, and the rightmost
   eight bits represent blue). The bitshift right operator is used to shift the eight bits of interest
   to the rightmost position. ...

   Get Actionscript Cookbook now with the O'Reilly learning platform.

   O'Reilly members experience books, live events, courses curated by job role, and more from O'Reilly
   and nearly 200 top publishers.


---
https://www.appsloveworld.com/java/100/159/bit-shift-and-bitwise-operations-to-encode-rgb-values

Bit Shift and Bitwise operations to encode RGB values-Java

   score:11
   Accepted answer
	int blueMask = 0xFF0000, greenMask = 0xFF00, redMask = 0xFF;
	int r = 12, g = 13, b = 14;
	int bgrValue = (b << 16) + (g << 8) + r;
	System.out.println("blue:" + ((bgrValue & blueMask) >> 16));
	System.out.println("red:" + ((bgrValue & redMask)));
	System.out.println("green:" + ((bgrValue & greenMask) >> 8));


   score:1
   If you simply want to/from RGB conversion and don't care how I would suggest using java.awt.Color
int r = 255; //red
int g = 255; //green
int b = 255; //blue
int a = 255; //alpha
Color c = new Color(r,g,b,a);

   The using the getRGB method and getRed, getBlue, getGreen methods
int RGB = c.getRGB();
int red = c.getRed();
int blue = c.getBlue();
int green = c.getGreen();

   Alternatively you can construct a color object using the Color(r,g,b) constructor, it will have
   default 255 alpha.

   With bit operations (ARGB, 32 bit colorspace). Constructing the RGB color:
int alpha = 255;
int red = 128;
int green = 128;
int blue = 128;
int RGB = (alpha << 24);
RGB = RGB | (red << 16);
RGB = RGB | (green << 8);
RGB = RGB | (blue);

System.out.println(Integer.toBinaryString(RGB));

   Out 11111111 10000000 10000000 10000000

   Decoding is done as in the link in the comment.

   score:1
   Here is a mock program that I've done up that might assist you. I approached the conversion much like
   Dev Blanked based off an old program I did, but he answered while I was putting the program together.
   Since I did the work anyways, figured I'd share in case it helped in any way.
import java.util.Scanner;
import java.math.*;

public class RGB{

	public static void main(String[]args){
		Scanner scan = new Scanner(System.in);
		int code; //Code for the color
		int red, green, blue; //Individual colors
		int rMask = 0xFF0000, gMask = 0xFF00, bMask = 0xFF; //Masks for the colors

		//Take input
		System.out.println("Please enter the red color. Range [0, 255] only please.");
		red = scan.nextInt();
		System.out.println("Please enter the green color. Range [0, 255] only please.");
		green = scan.nextInt();
		System.out.println("Please enter the blue color. Range [0, 255] only please.");
		blue = scan.nextInt();

		//Generate code based on Behnil's way.
		code = 0;
		code += (int) (red * Math.pow(2, 16));
		code += (int) (green * Math.pow(2, 8));
		code += (int) (blue * Math.pow(2,0));
		System.out.println("The code is " + code + ".");

		//Clear values
		red = 0;
		green = 0;
		blue = 0;

		//Obtain values.
		red = (code & rMask) >> 16;
		green = (code & gMask) >> 8;
		blue = (code & bMask);

		System.out.println("Your red value is: " + red);
		System.out.println("Your green value is: " + green);
		System.out.println("Your blue value is: " + blue);
	}

}


   score:1
public static void main(String[] args){
	int red = 111;
	int green = 222;
	int blue = 121;

	int code = red*256*256 + green*256 + blue;

	blue = code%256;
	green = (code%(256*256) - blue)/256;
	red = (code - blue - green*256)/(256*256);

	System.out.println("" + red + green + blue);
}

   this outputs 111222121 as intended. This is the way i fixed it but i am not sure if the pro's agree
   with this as it might be slower than using bitshifts


---

