filename: c_null-pointers-multif_20220929.txt
https://www.geeksforgeeks.org/few-bytes-on-null-pointer-in-c/

NULL pointer in C
22 Jun, 2022

   At a very high level, we can think of NULL as a null pointer which is used in C for various purposes.
   Some of the most common use cases for NULL are: a) To initialize a pointer variable when that pointer
   variable hasn’t been assigned any valid memory address yet. b) To check for a null pointer before
   accessing any pointer variable. By doing so, we can perform error handling in pointer related code,
   e.g., dereference a pointer variable only if it’s not NULL. c) To pass a null pointer to a function
   argument when we don’t want to pass any valid memory address.

   The example of a is

int * pInt = NULL;


   The example of b is

if (pInt != NULL) /*We could use if (pInt) as well*/ {
	/*Some code*/
} else {
	/*Some code*/
}


   The example of c is

int fun(int *ptr) {
	/*Fun specific stuff is done with ptr here*/
	return 10;
}
fun(NULL);

   It should be noted that a NULL pointer is different from an uninitialized or dangling pointer. In a
   specific program context, all uninitialized or dangling or NULL pointers are invalid, but NULL is a
   specific invalid pointer which is mentioned in C standard and has specific purposes. What we mean is
   that uninitialized or dangling pointers are invalid but they can point to some memory address that
   may be accessible through unintended memory access.

#include <stdio.h>
int main() {
	int *i, *j;
	int *ii = NULL, *jj = NULL;
	if (i == j) {
		printf("This might get printed if both i and j are same by chance.");
	}

	if (ii == jj) {
		printf("This is always printed coz ii and jj are same.");
	}
	return 0;
}

   By specifically mentioning NULL pointer, C standard gives a mechanism using which a C programmer can
   check whether a given pointer is legitimate or not. But what exactly is NULL and how is it
   defined? Strictly speaking, NULL expands to an implementation-defined null pointer constant which is
   defined in many header files such as “stdio.h”, “stddef.h”, “stdlib.h” etc. Let us see what C
   standards say about the null pointer. The C11 standard, clause 6.3.2.3 says,

   “An integer constant expression with the value 0, or such an expression cast to type void *, is
   called a null pointer constant. If a null pointer constant is converted to a pointer type, the
   resulting pointer, called a null pointer, is guaranteed to compare unequal to a pointer to any object
   or function.”

   Before we proceed further on this NULL discussion :), let’s mention a few lines about C standard just
   in case you want to refer to it for further study. Please note that ISO/IEC 9899:2011 is the C
   language’s latest standard which was published in Dec 2011. This is also called the C11 standard. For
   completeness, let us mention that the previous C standards were C99, C90 (also known as ISO C) and
   C89 (also known as ANSI C). Though the actual C11 standard can be purchased from ISO, there’s a draft
   document which is available in public domains for free.

   Coming back to our discussion, the NULL macro is defined as ((void *)0) in the header files of most
   of the C compiler implementations. But, C standard is saying that 0 is also a null pointer constant.
   It means that the following is also perfectly legal as per standard:

   int * ptr = 0;

   Please note that 0 in the above C statement is used in pointer-context and it’s different from 0 as
   integer. This is one of the reasons why the usage of NULL is preferred because it makes it explicit
   in the code that the programmer is using a null pointer, not integer 0. Another important concept
   about NULL is that “NULL expands to an implementation-defined null pointer constant”. This statement
   is also from the C11 standard (clause 7.19). It means that the internal representation of the null
   pointer could be a non-zero bit pattern to convey the NULL pointer. That’s why NULL doesn’t always
   need to be internally represented as an all zeros bit pattern. A compiler implementation can choose
   to represent “null pointer constant” as a bit pattern for all 1s or anything else. But again, as a C
   programmer, we needn’t worry much about the internal value of the null pointer unless we are involved
   in compiler coding or even below the level of coding. Having said so, NULL is typically represented
   as all bits set to 0 only. To know this on a specific platform, one can use the following:

#include<stdio.h>

int main() {
	printf("%d",NULL);
	return 0;
}

   Most likely, it will print 0 which is the typical internal null pointer value but again, it can vary
   depending on the C compiler/platform. You can try a few other things in the above program such as
   printf(“‘%c“,NULL) or printf(“%s”,NULL) and even printf(“%f”,NULL). The outputs of these are going to
   be different depending on the platform used but it’d be interesting to see, especially because of the
   usage of %f with NULL!

   Can we use the sizeof() operator on NULL in C? Well, the usage of sizeof(NULL) is allowed but the
   exact size would depend on the platform.

#include<stdio.h>

int main() {
	printf("%lu",sizeof(NULL));
	return 0;
}

   Since NULL is defined as ((void*)0), we can think of NULL as a special pointer and its size would be
   equal to any pointer. If the pointer size on a platform is 4 bytes, the output of the above program
   would be 4. But if the pointer size on a platform is 8 bytes, the output of the above program would
   be 8.

   What about dereferencing a NULL pointer? What’s going to happen if we use the following C code:

#include<stdio.h>

int main() {
	int * ptr = NULL;
	printf("%d",*ptr);
	return 0;
}

   On some machines, the above would compile successfully but crash when the program is run. Though that
   doesn’t mean it would show the same behaviour across all the machines. Again, it depends on a lot of
   factors. But the idea of mentioning the above snippet is that we should always check for NULL before
   accessing a pointer. As the value of NULL in predefined libraries is 0 and the pointer (that’s
   pointing to NULL) is not pointing to any memory location, this behaviour occurs.

   we can see this code output using diagram:

   +-----------------------+               +---+
   | int main() {          |               | 0 |
   | 	int * ptr = NULL;  |               +---+
   | 	printf("%d",*ptr); |                 |
   | 	return 0;          |                 +--> ? ptr is not pointing to any valid object
   | }                     |                        or pointing to 0-th memory location which
   +-----------------------+                        cannot be dereferenced

   Since NULL is typically defined as ((void*)0), let us discuss a little bit about the void type as
   well. As per C11 standard, clause 6.2.5, “The void type comprises an empty set of values; it is an
   incomplete object type that cannot be completed”. Even C11 standard, clause 6.5.3.4 mentions that
   “The sizeof operator shall not be applied to an expression that has function type or an incomplete
   type, to the parenthesized name of such a type, or to an expression that designates a bit-field
   member.” Basically, it means that void is an incomplete type whose size doesn’t make any sense in C
   programs but implementations (such as GCC) can choose sizeof(void) as 1 so that the flat memory
   pointed to by a void pointer can be viewed as untyped memory i.e. a sequence of bytes. But the output
   of the following needn’t be same on all platforms:

#include<stdio.h>

int main() {
	printf("%lu",sizeof(void));
	return 0;
}

   On GCC, the above would output 1. What about sizeof(void *)? Here, C11 has mentioned guidelines. From
   clause 6.2.5, “A pointer to void shall have the same representation and alignment requirements as a
   pointer to a character type”. That’s why the output of the following would be same as any pointer
   size on a machine:

#include<stdio.h>

int main() {
	printf("%lu",sizeof(void *));
	return 0;
}

   In spite of mentioning machine dependent stuff as above, we as C programmers should always strive to
   make our code as portable as possible. So, we can conclude on NULL as follows:

   1. Always initialize pointer variables to NULL.

   2. Always perform a NULL check before accessing any
      pointer.



---
https://www.javatpoint.com/null-pointer-in-c

What is a Null Pointer?

   A Null Pointer is a pointer that does not point to any memory location. It stores the base address of
   the segment. The null pointer basically stores the Null value while void is the type of the pointer.

   A null pointer is a special reserved value which is defined in a stddef header file. Here, Null means
   that the pointer is referring to the 0^th memory location.

   If we do not have any address which is to be assigned to the pointer, then it is known as a null
   pointer. When a NULL value is assigned to the pointer, then it is considered as a Null pointer.

Applications of Null Pointer

   Following are the applications of a Null pointer:
     * It is used to initialize o pointer variable when the pointer does not point to a valid memory
       address.
     * It is used to perform error handling with pointers before dereferencing the pointers.
     * It is passed as a function argument and to return from a function when we do not want to pass the
       actual memory address.

Examples of Null Pointer

   int *ptr=(int *)0;
   float *ptr=(float *)0;
   char *ptr=(char *)0;
   double *ptr=(double *)0;
   char *ptr='\0';
   int *ptr=NULL;

   Let's look at the situations where we need to use the null pointer.
     * When we do not assign any memory address to the pointer variable.


#include <stdio.h>

int main() {
	int *ptr;
	printf("Address: %d", ptr); // printing the value of ptr.
	printf("Value: %d", *ptr); // dereferencing the illegal p
	return 0;
}

   In the above code, we declare the pointer variable *ptr, but it does not contain the address of any
   variable. The dereferencing of the uninitialized pointer variable will show the compile-time error as
   it does not point any variable. According to the stack memory concept, the local variables of a
   function are stored in the stack, and if the variable does not contain any value, then it shows the
   garbage value. The above program shows some unpredictable results and causes the program to crash.
   Therefore, we can say that keeping an uninitialized pointer in a program can cause serious harm to
   the computer.

   How to avoid the above situation?

   We can avoid the above situation by using the Null pointer. A null pointer is a pointer pointing to
   the 0^th memory location, which is a reserved memory and cannot be dereferenced.

#include <stdio.h>
int main() {
	int *ptr=NULL;

	if (ptr!=NULL) {
		printf("value of ptr is : %d",*ptr);
	} else {
		printf("Invalid pointer");
	}
	return 0;
}

   In the above code, we create a pointer *ptr and assigns a NULL value to the pointer, which means that
   it does not point any variable. After creating a pointer variable, we add the condition in which we
   check whether the value of a pointer is null or not.
     * When we use the malloc() function.

#include <stdio.h>

int main() {
	int *ptr;
	ptr=(int*)malloc(4*sizeof(int));

	if (ptr==NULL) {
		printf("Memory is not allocated");
	} else {
		printf("Memory is allocated");
	}
	return 0;
}

   In the above code, we use the library function, i.e., malloc(). As we know, that malloc() function
   allocates the memory; if malloc() function is not able to allocate the memory, then it returns the
   NULL pointer. Therefore, it is necessary to add the condition which will check whether the value of a
   pointer is null or not, if the value of a pointer is not null means that the memory is allocated.
   Null Pointer in C

Note: It is always a good practice that we assign a Null value to the pointer when we do not know the exact
address of memory.


---
https://www.educba.com/null-pointer-in-c/

Null pointer in C

Introduction to Null pointers in C
   In C programming language, a variable that can point to or store the address of another variable
   is known as pointers. In C programming language pointers are used to point to the memory that is
   allocated dynamically or at run time and a pointer can be of any data type like int, float, char,
   etc. In this article, we are discussing the null pointer in C, where NULL is constant with value 0 in
   C. So the null pointer is defined as the pointer that is assigned to zero to make it null pointer or
   a pointer that does not store any valid memory address or an uninitialized pointer are known as a
   NULL pointer. In general, we can a pointer that does not point to any object is known as a null
   pointer.

How does Null pointer work in C?
   A null pointer in C is a pointer that is assigned to zero or NULL where a variable that has no valid
   address. The null pointer usually does not point to anything. In C programming language NULL is a
   macro constant that is defined in a few of the header files like stdio.h, alloc.h, mem.h, stddef.h,
   stdlib.h. Also, note that NULL should be used only when we are dealing with pointers only. Simple
   syntax for declaring NULL pointer is as follows:

   Syntax #1
int *pointer_var = NULL;

   Or

   Syntax #2
   We can directly assign the pointer variable to 0 to make it null pointer.
int *pointer_var = 0

Examples to Implement Null pointer in C
   Let us see an example of how null pointers are created.

Example #1
   Code:
#include <stdio.h>

int main () {
	int  *ptr = NULL;
	printf("The value of pointer assigned is : %x\n", ptr  );

	return 0;
}

   Output:
   0 (zero) 0 (zero)

   Explanation: In the above code, we are initializing the variable “ptr”  to 0 (zero) so when we print
   the pointer value which Null pointer.

Example #2
   Suppose let us take another example where the pointer variables are not assigned to any memory
   address.

   Code:
#include <stdio.h>

int main() {
	int *pointer_var;
	printf("Address of the given pointer variable: %d", pointer_var);
	printf("Value of pointer variable is : %d", * pointer_var);
	return 0;
}

   Output:
   timeout timeout

   Explanation: In the above code, the pointer_var variable is not assigned to zero nor it stores any
   address of any variable in it, when the code is executed during the compile-time it gives an error
   where it throws garbage value which might harm your computer. So usually when we try to write or read
   from a null pointer we get run time error as we saw in the above code which we get segmentation fault
   which is a null pointer exception sometimes it also throws an exception as null pointer exception. In
   most of the examples, a null pointer is used to denote or indicate the end of the list.

Example #3
   To avoid this exception we can rewrite the above code as

   Code:
#include <stdio.h>

int main()
{
	int * pointer_var =NULL;

	if (pointer_var!=NULL) {
		printf("Value of pointer variable is : %d",* pointer_var);
	} else {
		printf("Invalid pointer");
	}

	return 0;
}

   Output:
   Null pointer in C - 3 Null pointer in C - 3

   Explanation: In the above-modified code, we assign a pointer_var to the “NULL” value and we check
   with the condition if the value of the pointer is null or not. In most of the operating system, codes
   or programs are not allowed to access any memory which has its address as 0 because the memory with
   address zero 0is only reserved by the operating system as it has special importance, which states
   that the pointer is not intended to point to any memory location that can be accessible. So by
   default, we can say that if a pointer is assigned to zero then it is nothing but it only points to
   nothing.

   So there is a way to check for the pointer is null or not by using if (ptr) results in 1 if the
   pointer is not null and if (!ptr)  results in 1 when the pointer is null as we did in the
   above-modified program.

Example #4
   Null pointers are used to avoid crashing down of the program: As we saw earlier if we declare any
   pointer without assigning anything to it then it takes garbage value where it may result in crashing
   of the system program. So to avoid such situations we use null pointers where variables are assigned
   or declared as NULL or zero which is known as a null pointer.

   Code:
#include<stdio.h>

void func(int *ptrvarB) {
	if (ptrvarB == NULL) {
		//Handle NULL pointer input
		printf("It is null pointer");
	} else {
		printf("It is not a null pointer");
	}
}

void main() {
	int *ptrvarA = NULL;
	func(ptrvarA);
}

   Output:
   Null pointer in C - 4 Null pointer in C - 4

   Explanation: In the above code, we are defining function func() where we are passing a pointer
   ptrvarA and when the function func() is called it checks if the passed pointer is a null pointer or
   not. So we have to check if the passed value of the pointer is null or not because if it is not
   assigned to any value it will take the garbage value and it will terminate your program which will
   lead to the crashing of the program.
     * Another use is when we are freeing up the memory locations: In a few cases we do not need the
       memory data anymore where we are again pointing to the same memory then we delete that data to
       free up the memory. But the pointer is still pointing to the same memory location even after
       deleting the data from that memory. Such pointers are called dangling pointers this also can be
       avoided by using null pointer by setting the dangling pointer to null.

Conclusion
   In C programming language a Null pointer is a pointer which is a variable with the value assigned as
   zero or having an address pointing to nothing. So we use keyword NULL to assign a variable to be a
   null pointer in C it is predefined macro. And we should note that once the data is not in use the
   memory allocated to it must be freed else it will again lead to the dangling pointer. And also note
   that never declare any pointer without assigning NULL because the program when executes it throws an
   error during runtime.



---

