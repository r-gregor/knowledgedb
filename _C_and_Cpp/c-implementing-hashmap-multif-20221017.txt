filename: c_implementing-hashmap-multif_20221017.txt
https://stackoverflow.com/questions/838404/implementing-a-hashmap-in-c

Implementing a HashMap in C

   How to go about creating a Hashmap in C from scratch as is present in C++ STL?

   What parameters would be taken into consideration and how would you test the hashmap? As in, what
   would the benchmark test cases be which you would run before you could say that your hashmap is
   complete?

***
   Well if you know the basics behind them, it shouldn't be too hard.

   Generally you create an array called "buckets" that contain the key and value, with an optional
   pointer to create a linked list.

   When you access the hash table with a key, you process the key with a custom hash function which will
   return an integer. You then take the modulus of the result and that is the location of your array
   index or "bucket". Then you check the unhashed key with the stored key, and if it matches, then you
   found the right place.

   Otherwise, you've had a "collision" and must crawl through the linked list and compare keys until you
   match. (note some implementations use a binary tree instead of linked list for collisions).

   Check out this fast hash table implementation:

   https://attractivechaos.wordpress.com/2009/09/29/khash-h/

***
   The best approach depends on the expected key distribution and number of collisions. If relatively
   few collisions are expected, it really doesn't matter which method is used. If lots of collisions are
   expected, then which to use depends on the cost of rehashing or probing vs. manipulating the
   extensible bucket data structure.

   But here is source code example of
   [**2][https://web.archive.org/web/20160329102146/http://elliottback.com/wp/hashmap-implementation-in-c/]
   An Hashmap Implementation in C

***
   The primary goal of a hashmap is to store a data set and provide near constant time lookups on it
   using a unique key. There are two common styles of hashmap implementation:
     * Separate chaining: one with an array of buckets (linked lists)
     * Open addressing: a single array allocated with extra space so index collisions may be resolved by
       placing the entry in an adjacent slot.

   Separate chaining is preferable if the hashmap may have a poor hash function, it is not desirable to
   pre-allocate storage for potentially unused slots, or entries may have variable size. This type of
   hashmap may continue to function relatively efficiently even when the load factor exceeds 1.0.
   Obviously, there is extra memory required in each entry to store linked list pointers.

   Hashmaps using open addressing have potential performance advantages when the load factor is kept
   below a certain threshold (generally about 0.7) and a reasonably good hash function is used. This is
   because they avoid potential cache misses and many small memory allocations associated with a linked
   list, and perform all operations in a contiguous, pre-allocated array. Iteration through all elements
   is also cheaper. The catch is hashmaps using open addressing must be reallocated to a larger size and
   rehashed to maintain an ideal load factor, or they face a significant performance penalty. It is
   impossible for their load factor to exceed 1.0.

   Some key performance metrics to evaluate when creating a hashmap would include:
     * Maximum load factor
     * Average collision count on insertion
     * Distribution of collisions: uneven distribution (clustering) could indicate a poor hash function.
     * Relative time for various operations: put, get, remove of existing and non-existing entries.

   Here is a flexible hashmap implementation I made. I used open addressing and linear probing for
   collision resolution.

   [**3]https://github.com/DavidLeeds/hashmap

***
   There are other mechanisms to handle overflow than the simple minded linked list of overflow entries
   which e.g. wastes a lot of memory.

   Which mechanism to use depends among other things on if you can choose the hash function and possible
   pick more than one (to implement e.g. double hashing to handle collisions); if you expect to often
   add items or if the map is static once filled; if you intend to remove items or not; ...

   The best way to implement this is to first think about all these parameters and then not code it
   yourself but to pick a mature existing implementation. Google has a few good implementations.



---
[**2]
https://web.archive.org/web/20160329102146/http://elliottback.com/wp/hashmap-implementation-in-c/

Hashmap Implementation in C
April 7th, 2005.

   Last semester I wrote a Hashmap in C from scratch, which was an interesting experience. It's the
   first datastructure I wrote in C, since most of the time I'm working with java, so I learned a lot
   about pointers and memory allocation (malloc/free). Just uncommented the "free()" at the end [DEL: I
   think there is one deallocation bug that I didn't have a chance to fix :DEL] , and note that it has
   references to "semaphores" for thread safety, but you can remove those if you're in a single threaded
   environment. Anyway, the full source code is below, as well as in pdf versions:

   HashMap.h:
/*
 * Generic hashmap manipulation functions
 */
#ifndef __HASHMAP_H__
#define __HASHMAP_H__

#define MAP_MISSING -3  /* No such element */
#define MAP_FULL -2     /* Hashmap is full */
#define MAP_OMEM -1     /* Out of Memory */
#define MAP_OK 0        /* OK */

/*
 * any_t is a pointer.  This allows you to put arbitrary structures in
 * the hashmap.
 */
typedef void *any_t;

/*
 * PFany is a pointer to a function that can take two any_t arguments
 * and return an integer. Returns status code..
 */
typedef int (*PFany)(any_t, any_t);

/*
 * map_t is a pointer to an internally maintained data structure.
 * Clients of this package do not need to know how hashmaps are
 * represented.  They see and manipulate only map_t's.
 */
typedef any_t map_t;

/*
 * Return an empty hashmap. Returns NULL if empty.
*/
extern map_t hashmap_new();

/*
 * Iteratively call f with argument (item, data) for
 * each element data in the hashmap. The function must
 * return a map status code. If it returns anything other
 * than MAP_OK the traversal is terminated. f must
 * not reenter any hashmap functions, or deadlock may arise.
 */
extern int hashmap_iterate(map_t in, PFany f, any_t item);

/*
 * Add an element to the hashmap. Return MAP_OK or MAP_OMEM.
 */
extern int hashmap_put(map_t in, int key, any_t value);

/*
 * Get an element from the hashmap. Return MAP_OK or MAP_MISSING.
 */
extern int hashmap_get(map_t in, int key, any_t *arg);

/*
 * Remove an element from the hashmap. Return MAP_OK or MAP_MISSING.
 */
extern int hashmap_remove(map_t in, int key);

/*
 * Get any element. Return MAP_OK or MAP_MISSING.
 * remove - should the element be removed from the hashmap
 */
extern int hashmap_get_one(map_t in, any_t *arg, int remove);

/*
 * Free the hashmap
 */
extern void hashmap_free(map_t in);

/*
 * Get the current size of a hashmap
 */
extern int hashmap_length(map_t in);

#endif __HASHMAP_H__

   HashMap.c:
/*
 * Generic map implementation. This class is thread-safe.
 * free() must be invoked when only one thread has access to the hashmap.
 */
#include < stdlib.h >
#include < stdio.h >
#include < minithreads/hashmap.h >
#include < minithreads/synch.h >

#define INITIAL_SIZE 1024

// We need to keep keys and values
typedef struct _hashmap_element {
	int key;
	int in_use;
	any_t data;
} hashmap_element;

// A hashmap has some maximum size and current size,
// as well as the data to hold.
typedef struct _hashmap_map {
	int table_size;
	int size;
	hashmap_element *data;
	semaphore_t lock;
} hashmap_map;

/*
 * Return an empty hashmap, or NULL on failure.
 */
map_t hashmap_new() {
	hashmap_map* m = (hashmap_map*) malloc(sizeof(hashmap_map));
	if(!m) goto err;

	m->data = (hashmap_element*) calloc(INITIAL_SIZE, sizeof(hashmap_element));
	if(!m->data) goto err;

	m->lock = (semaphore_t) semaphore_create();
	if(!m->lock) goto err;
	semaphore_initialize(m->lock, 1);

	m->table_size = INITIAL_SIZE;
	m->size = 0;

	return m;
	err:
		if (m)
			hashmap_free(m);
		return NULL;
}

/*
 * Hashing function for an integer
 */
unsigned int hashmap_hash_int(hashmap_map * m, unsigned int key) {
	/* Robert Jenkins' 32 bit Mix Function */
	key += (key << 12);
	key ^= (key >> 22);
	key += (key << 4);
	key ^= (key >> 9);
	key += (key << 10);
	key ^= (key >> 2);
	key += (key << 7);
	key ^= (key >> 12);

	/* Knuth's Multiplicative Method */
	key = (key >> 3) * 2654435761;

	return key % m->table_size;
}

/*
 * Return the integer of the location in data
 * to store the point to the item, or MAP_FULL.
 */
int hashmap_hash(map_t in, int key) {
	int curr;
	int i;

	/* Cast the hashmap */
	hashmap_map* m = (hashmap_map *) in;

	/* If full, return immediately */
	if(m->size == m->table_size) return MAP_FULL;

	/* Find the best index */
	curr = hashmap_hash_int(m, key);

	/* Linear probling */
	for(i = 0; i< m->table_size; i++) {
		if(m->data[curr].in_use == 0)
			return curr;

		if(m->data[curr].key == key && m->data[curr].in_use == 1)
			return curr;

		curr = (curr + 1) % m->table_size;
	}

	return MAP_FULL;
}

/*
 * Doubles the size of the hashmap, and rehashes all the elements
 */
int hashmap_rehash(map_t in) {
	int i;
	int old_size;
	hashmap_element* curr;

	/* Setup the new elements */
	hashmap_map *m = (hashmap_map *) in;
	hashmap_element* temp = (hashmap_element *)	calloc(2 * m->table_size, sizeof(hashmap_element));
	if(!temp) return MAP_OMEM;

	/* Update the array */
	curr = m->data;
	m->data = temp;

	/* Update the size */
	old_size = m->table_size;
	m->table_size = 2 * m->table_size;
	m->size = 0;

	/* Rehash the elements */
	for(i = 0; i < old_size; i++) {
		int status = hashmap_put(m, curr[i].key, curr[i].data);
		if (status != MAP_OK)
			return status;
	}

	free(curr);

	return MAP_OK;
}

/*
 * Add a pointer to the hashmap with some key
 */
int hashmap_put(map_t in, int key, any_t value) {
	int index;
	hashmap_map* m;

	/* Cast the hashmap */
	m = (hashmap_map *) in;

	/* Lock for concurrency */
	semaphore_P(m->lock);

	/* Find a place to put our value */
	index = hashmap_hash(in, key);
	while(index == MAP_FULL) {
		if (hashmap_rehash(in) == MAP_OMEM) {
			semaphore_V(m->lock);
			return MAP_OMEM;
		}
		index = hashmap_hash(in, key);
	}

	/* Set the data */
	m->data[index].data = value;
	m->data[index].key = key;
	m->data[index].in_use = 1;
	m->size++;

	/* Unlock */
	semaphore_V(m->lock);

	return MAP_OK;
}

/*
 * Get your pointer out of the hashmap with a key
 */
int hashmap_get(map_t in, int key, any_t *arg) {
	int curr;
	int i;
	hashmap_map* m;

	/* Cast the hashmap */
	m = (hashmap_map *) in;

	/* Lock for concurrency */
	semaphore_P(m->lock);

	/* Find data location */
	curr = hashmap_hash_int(m, key);

	/* Linear probing, if necessary */
	for(i = 0; i< m->table_size; i++) {

		if(m->data[curr].key == key && m->data[curr].in_use == 1) {
			*arg = (int *) (m->data[curr].data);
			semaphore_V(m->lock);
			return MAP_OK;
		}

		curr = (curr + 1) % m->table_size;
	}

	*arg = NULL;

	/* Unlock */
	semaphore_V(m->lock);

	/* Not found */
	return MAP_MISSING;
}

/*
 * Get a random element from the hashmap
 */
int hashmap_get_one(map_t in, any_t *arg, int remove) {
	int i;
	hashmap_map* m;

	/* Cast the hashmap */
	m = (hashmap_map *) in;

	/* On empty hashmap return immediately */
	if (hashmap_length(m) <= 0)
		return MAP_MISSING;

	/* Lock for concurrency */
	semaphore_P(m->lock);

	/* Linear probing */
	for(i = 0; i< m->table_size; i++)
		if(m->data[i].in_use != 0) {
			*arg = (any_t) (m->data[i].data);
			if (remove) {
				m->data[i].in_use = 0;
				m->size--;
			}
			semaphore_V(m->lock);
			return MAP_OK;
		}

	/* Unlock */
	semaphore_V(m->lock);

	return MAP_OK;
}

/*
 * Iterate the function parameter over each element in the hashmap.  The
 * additional any_t argument is passed to the function as its first
 * argument and the hashmap element is the second.
 */
int hashmap_iterate(map_t in, PFany f, any_t item) {
	int i;

	/* Cast the hashmap */
	hashmap_map* m = (hashmap_map*) in;

	/* On empty hashmap, return immediately */
	if (hashmap_length(m) <= 0)
		return MAP_MISSING;

	/* Lock for concurrency */
	semaphore_P(m->lock);

	/* Linear probing */
	for(i = 0; i< m->table_size; i++)
		if(m->data[i].in_use != 0) {
			any_t data = (any_t) (m->data[i].data);
			int status = f(item, data);
			if (status != MAP_OK) {
				semaphore_V(m->lock);
				return status;
			}
		}

	/* Unlock */
	semaphore_V(m->lock);

	return MAP_OK;
}

/*
 * Remove an element with that key from the map
 */
int hashmap_remove(map_t in, int key) {
	int i;
	int curr;
	hashmap_map* m;

	/* Cast the hashmap */
	m = (hashmap_map *) in;

	/* Lock for concurrency */
	semaphore_P(m->lock);

	/* Find key */
	curr = hashmap_hash_int(m, key);

	/* Linear probing, if necessary */
	for(i = 0; i< m->table_size; i++) {
		if(m->data[curr].key == key && m->data[curr].in_use == 1) {
			/* Blank out the fields */
			m->data[curr].in_use = 0;
			m->data[curr].data = NULL;
			m->data[curr].key = 0;

			/* Reduce the size */
			m->size--;
			semaphore_V(m->lock);
			return MAP_OK;
		}
		curr = (curr + 1) % m->table_size;
	}

	/* Unlock */
	semaphore_V(m->lock);

	/* Data not found */
	return MAP_MISSING;
}

/* Deallocate the hashmap */
void hashmap_free(map_t in) {
	hashmap_map* m = (hashmap_map*) in;
	free(m->data);
	semaphore_destroy(m->lock);
	free(m);
}

/* Return the length of the hashmap */
int hashmap_length(map_t in) {
	hashmap_map* m = (hashmap_map *) in;
	if(m != NULL) return m->size;
	else return 0;
}



---
[**3]
https://github.com/DavidLeeds/hashmap

Templated type-safe hashmap implementation in C using open addressing and linear probing for collision
resolution.

Summary
This project came into existence because there are a notable lack of flexible and easy to use data
structures available in C. C data structures with efficient, type-safe interfaces are virtually non-existen
. Sure, higher level languages have built-in libraries and templated classes, but plenty of embedded
projects or higher level libraries are implemented in C. It was undesirable to add a bulky library like Glib
as a dependency to my projects, or grapple with a restrictive license agreement. Searching for "C hashmap"
yielded results with questionable algorithms and code quality, projects with difficult or inflexible
interfaces, or projects with less desirable licenses. I decided it was time to create my own.

Goals
    To scale gracefully to the full capacity of the numeric primitives in use. E.g. on a 32-bit machine, you
	should be able to load a billion+ entries without hitting any bugs relating to integer overflows. Lookups
	on a hashtable with a billion entries should be performed in close to constant time, no different than
	lookups in a hashtable with 20 entries. Automatic rehashing occurs and maintains a load factor of 0.75 or
	less.

    To provide a clean and easy-to-use interface. C data structures often struggle to strike a balance
	between flexibility and ease of use. To this end, I wrapped a generic C backend implementation with light
	weight pre-processor macros to create a templated type-safe interface. All required type information is
	encoded in the hashmap declaration using theHASHMAP() macro. Unlike with header-only macro libraries, there
	is no code duplication or performance disadvantage over a traditional library with a non-type-safe
	void * interface.

    To enable easy iteration and safe entry removal during iteration. Applications often need these feature
	, and the data structure should not hold them back. Easy to use hashmap_foreach() macros and a more
	flexible iterator interface are provided. This hashmap also uses an open addressing scheme, which has
	superior iteration performance to a similar hashmap implemented using separate chaining (buckets with
	linked lists). This is because fewer instructions are needed per iteration, and array traversal has
	superior cache performance than linked list traversal.

    To use a very unrestrictive software license. Using no license was an option, but I wanted to allow the
	code to be tracked, simply for my own edification. I chose the MIT license because it is the most common
	open source license in use, and it grants full rights to use, copy, modify, merge, publish, distribute,
	sublicense, and/or sell the code. Basically, take this code and do what you want with it. Just be nice and
	leave the license comment and my name at top of the file. Feel free to add your name if you are modifying
	and redistributing.

API Examples
Declaring a type-specific hashmap

Use the HASHMAP(key_type, value_type) macro to declare a hashmap state struct specific to your needs. Keys
and values are always passed in by pointer. Keys are const.

/* Map with string key (const char *) and integer value (int *) */
HASHMAP(char, int) map1;

/* Map with uint64 key (const uint64_t *) and struct value (struct my_value *) */
HASHMAP(uint64_t, struct my_value) map2;

The structure defined by the HASHMAP() macro may be used directly, or named using typedef. For example:

typedef HASHMAP(char, struct my_value) value_map_t;

Initialization and cleanup

Maps must be initialized with a key hash function and a key comparator.

/* Initialize the map structure */
hashmap_init(&map, my_key_hash, my_key_compare);

/* Use the map... */

/* Free resources associated with the map */
hashmap_cleanup(&map);

This library provides some hash functions, so you may not have to write your own:

    hashmap_hash_string() - Case sensitive string hash
    hashmap_hash_string_i() - Case insensitive string hash
    hashmap_hash_default() - Hash function for arbitrary bytes that can be used by a user-defined hash function

I recommend using these, unless you have very specific needs.

/* Initialize a map with case-sensitive string keys */
hashmap_init(&map, hashmap_hash_string, strcmp);

Note that memory associated with map keys and values is not managed by the map, so you may need to free this
before calling hashmap_cleanup(). Keys are often stored in the same structure as the value, but it is
possible to have the map manage key memory allocation internally, by calling hashmap_set_key_alloc_funcs().

Value insertion and access
/* Insert a my_value (fails and returns -EEXIST if the key already exists) */
int result = hashmap_put(&map, "KeyABC", val);

/* Access the value with a given key */
struct my_value *val = hashmap_get(&map, "KeyABC");

Value removal
/* Erase the entry with the given key */
struct my_value *val = hashmap_remove(&map, "KeyABC");

/* Erase all entries */
hashmap_clear(&map);

/* Erase all entries and reset the hash table to its initial size */
hashmap_reset(&map);

Iteration
Iteration may be accomplished using the "convenience" foreach macros, or by using the iterator interface
directly. Generally, the foreach macros are the most intuitive and convenient.

const char *key;
struct my_value *val;

/* Iterate over all map entries and access both keys and values */
hashmap_foreach(key, val, &map) {
    /* Access each entry */
}

/* Iterate over all map entries and access just keys */
hashmap_foreach_key(key, &map) {
    /* Access each entry */
}

/* Iterate over all map entries and access just values */
hashmap_foreach_data(val, &map) {
    /* Access each entry */
}

The above iteration macros are only safe for read-only access. To safely remove the current element during
iteration, use the macros with a _safe suffix. These require an additional pointer parameter. For example:

const char *key;
struct my_value *val;
void *temp;

/* Okay */
hashmap_foreach_key_safe(key, &map, temp) {
    hashmap_remove(&map, key);
}

Iteration using the iterator interface.

HASHMAP_ITER(map) it;

for (it = hashmap_iter(&map); hashmap_iter_valid(&it); hashmap_iter_next(&it) {
	/*
	 * Access entry using:
	 *   hashmap_iter_get_key()
	 *   hashmap_iter_get_data()
	 *   hashmap_iter_set_data()
	 */
}

Additional examples
Are located in the examples directory in the source tree.

How to Build and Install
This project uses CMake to orchestrate the build and installallation process. To build and install on your
host system, follow these easy steps:

$> git clone https://github.com/DavidLeeds/hashmap.git - download the source
$> mkdir build-hashmap && cd build-hashmap - create a build directory outside the source tree
$> cmake ../hashmap - run CMake to setup the build
$> make - compile the code
$> make test - run the unit tests (if enabled)
$> sudo make install - OPTIONAL install the library on this system

CMake Options
    HASHMAP_BUILD_TESTS - Set to ON to generate unit tests.
    HASHMAP_BUILD_EXAMPLES - Set to ON to build example code.

Contibutions and Questions
I welcome all questions and contributions. Feel free to e-mail me, or put up a pull request. The core
algorithm is stable, but I'm happy to consider CMake improvements, compiler compatibility fixes, or API additions.


---
https://towardsdev.com/implement-a-very-simple-hashmap-with-c-9030f1b1ecef

Implement a Very Simple Hashmap with C

Why do we need hashmap & how to implement it with C?

   Imagine that you want to map a number to a string, e.g., 1 to Ayumu, 2 to Honoka, 3 to Chika. It is
   very easy to use an array to implement.

#include <stdio.h>

int main() {
	char* map[] = {"", "Ayumu", "Honoka", "Chika"};
	printf("1->%s\n", map[1]);
	printf("2->%s\n", map[2]);
	printf("3->%s\n", map[3]);
	return 0;
}

     1->Ayumu
     2->Honoka
     3->Chika

   However, if you want to map a string to a number, how can you do it?

#include <stdio.h>
#include <string.h>

int main() {
	char* map[] = {"", "Ayumu", "Honoka", "Chika"};
	int listLen = 4;
	// try to get 'A'
	int i, find = -1;
	for (i = 0; i < listLen; i++) {
		if (!strcmp(map[i], "Ayumu")) {
			find = i;
			break;
		}
	}
	if (find != -1) {
		printf("Ayumu->%d", find);
	} else {
		printf("Not found");
	}
	return 0;
}

     Ayumu->1

   But now, if we need to map 1000 keys to 1000 values and unfortunately we want to fetch the last pair,
   this linear search method takes a lot of time obviously.

Convert string into an integer
   What if use a function to convert a string into an integer? For example, convert "Ayumu" to 5,
   convert "Honoka" to 6, and convert "Chika" to 2. Then, we can create a list like this below:

int map[] = {0, 0, 3, 0, 0, 1, 2, 0};
printf("Ayumu->%d", m

   This skill is called "hash"
     A hash function is any function that can be used to map data of arbitrary size to fixed-size
     values. The values returned by a hash function are called hash values, hash codes, digests, or
     simply hashes.

   However, if we have another key-value pair (Chisato, 4) and accidentally the hash value of "Chisato"
   is 5 which has been occupied by "Honoka". What can we do?

   This problem is called "collision". There are a lot of methods to solve such a problem. For example,
   we can link all keys which have the same hash value to a list. i.e., when two keys have the same hash
   value, we can use liked list to record them.

struct pair {
	char* key;
	int value;
	struct pair* next;
};

     [ 0 ] → null
     [ 1 ] → null
     [ 2 ] → pair("Chika", 3)
     ...
     [ 5 ] → pair("Chisato", 4) → pair("Ayumu", 1)
     [ 6 ] → pair("Honoka", 2)

Implement
   First, we need to define the structure of hashmap. We record the capacity and length of hashmap. The
   capacity of hashmap means the length of the list. The larger the capacity, the lower the chance of
   collision.

typedef struct pair {
	char* key;
	int   val;
	struct pair* next;
} Pair;

typedef struct hashmap {
	Pair** list;       // the list of Pair*
	unsigned int cap;  // capacity, the length of list
	unsigned int len;  // length, the number of pairs
} HashMap;

   Now, we can create an empty hashmap.

HashMap* newHashMap() {
	HashMap* this = malloc(sizeof(this));
	this->cap = 8;    // default 8
	this->len = 0;
	this->list = calloc((this->cap), sizeof(Pair*));
	return this;
}

   Besides, we need a hash function

unsigned hashcode(HashMap* this, char* key) {
	unsigned code;
	for (code = 0; *key != '\0'; key++) {
		code = *key + 31 * code;
	}
	return code % (this->cap);
}

   Implement get() function, which returns value by given map and key.

int get(HashMap* this, char* key) {
	Pair* current;
	for (current = this->list[hashcode(this, key)]; current;
		current = current->next) {
		if (!strcmp(current->key, key)) {
			return current->val;
		}
	}
	fprintf(stderr, "%s is not found\n", key);
	exit(EXIT_FAILURE);
}

   Implement set() function, which adds key-value pair into map. If the key is already in the map,
   update its value.

void set(HashMap* this, char* key, int val) {
	unsigned index = hashcode(this, key);
	Pair* current;
	for (current = this->list[index]; current;
		current = current->next) {
		// if key has been already in hashmap
		if (!strcmp(current->key, key)) {
			current->val = val;
			return;
		}
	}
	// key is not in the hashmap
	Pair* p = malloc(sizeof(*p));
	p->key = key;
	p->val = val;
	p->next = this->list[index];
	this->list[index] = p;
	this->len++;
}

   Test

int main() {
	HashMap* m = newHashMap();
	// set value
	set(m, "Ayumu", 1);
	set(m, "Honoka", 2);
	set(m, "Chika", 3);
	set(m, "Chisato", 4);

	// get value
	printf("Ayumu->%d\n", get(m, "Ayumu"));
	printf("Honoka->%d\n", get(m, "Honoka"));
	printf("Chika->%d\n", get(m, "Chika"));
	printf("Chisato->%d\n", get(m, "Chisato"));

	// replace value
	set(m, "Ayumu", 10);
	printf("Ayumu->%d\n", get(m, "Ayumu"));
	printf("Map cap:%u len:%u\n", m->cap, m->len);
	return 0;
}

     Ayumu->1
     Honoka->2
     Chika->3
     Chisato->4
     Ayumu->10
     Map cap:8 len:4

   See complete code on my Github: [**4]implement-a-very-simple-hashmap-with-c/hashmap.c

Problems

    1. If we do not know how many pairs we need to put into the map, how to set the capacity of the
       hashmap when we create a hashmap? If capacity is too large, it wastes space. If capacity is too
       small, it takes a lot of time to linear search the linked list.
    2. Liked list needs O(n) time in order to search the correct key. Can we use a binary tree or even a
       red-black tree to boost performance?


---
[**4]
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct pair {
	char* key;
	int val;
	struct pair* next;
} Pair;

typedef struct hashmap {
	Pair** list;       // Pair* list
	unsigned int cap;  // capacity, the length of list
	unsigned int len;  // length, the number of pairs
} HashMap;

HashMap* newHashMap() {
	HashMap* this = malloc(sizeof(this));
	this->cap = 8;  // set default capacity
	this->len = 0;  // no pair in map
	                // set all pointer to null in this->list
	this->list = calloc((this->cap), sizeof(Pair*));
	return this;
}

unsigned hashcode(HashMap* this, char* key) {
	unsigned code;
	for (code = 0; *key != '\0'; key++) {
		code = *key + 31 * code;
	}
	return code % (this->cap);
}

int get(HashMap* this, char* key) {
	Pair* current;
	for (current = this->list[hashcode(this, key)]; current;
			current = current->next) {
		if (!strcmp(current->key, key)) {
			return current->val;
		}
	}
	fprintf(stderr, "%s is not found\n", key);
	exit(EXIT_FAILURE);
}

// If key is not in hashmap, put into map. Otherwise, replace it.
void set(HashMap* this, char* key, int val) {
	unsigned index = hashcode(this, key);
	Pair* current;
	for (current = this->list[index]; current; current = current->next) {
		// if key has been already in hashmap
		if (!strcmp(current->key, key)) {
			current->val = val;
			return;
		}
	}

	// key is not in hashmap
	Pair* p = malloc(sizeof(*p));
	p->key = key;
	p->val = val;
	p->next = this->list[index];
	this->list[index] = p;
	this->len++;
}

int main() {
	HashMap* m = newHashMap();
	// set value
	set(m, "Ayumu", 1);
	set(m, "Honoka", 2);
	set(m, "Chika", 3);
	set(m, "Chisato", 4);

	// get value
	printf("Ayumu->%d\n", get(m, "Ayumu"));
	printf("Honoka->%d\n", get(m, "Honoka"));
	printf("Chika->%d\n", get(m, "Chika"));
	printf("Chisato->%d\n", get(m, "Chisato"));

	// replace value
	set(m, "Ayumu", 10);
	printf("Ayumu->%d\n", get(m, "Ayumu"));
	printf("Map cap:%u len:%u\n", m->cap, m->len);
	return 0;
}


---

