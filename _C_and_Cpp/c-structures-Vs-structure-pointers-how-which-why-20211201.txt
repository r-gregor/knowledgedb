filename: c_structures-Vs-structure-pointers-how-which-why_20211201.txt
http://www.wellho.net/mouth/3145_Structures-v-Structure-Pointers-in-C-How-which-why-.html

Structures v Structure Pointers in C. How, which, why.

   A Structure in C is a series of sequential memory locations in which you may store and access all the
   various attributes of a piece of composite data; you define what each of the member elements is with
   a typedef and then declare variables of that new type. There's a simple example [**1]here which
   defines a data type "health" with two float members - h and w for height and weight:
typedef struct {
	float h;
	float w;
	char name[21];
} health;

=============================================================================================================
[**1]
Source code: lunches.c Module: C209

#include <stdio.h>
#include <string.h>

/* Sample data lines
5 0 Wednesday Sunny
6 2 Thursday Wet
*/

int main() {
	
	/* Define a daydata structure */
	typedef struct {
		int n_adults; int n_kids;
		char day[10]; char weather[10];
		} daydata ;

	daydata record[30];
	FILE * filehandle;
	char lyne[121];

	char *item;
	int reccount = 0;
	int k;

	/* Here comes the actions! */
	/* open file */
	filehandle = fopen("newstuff.txt","r");

	/* Read file line by line */
	while (fgets(lyne,120,filehandle)) {
		printf("%s",lyne);

		item = strtok(lyne," ");
		record[reccount].n_adults = atoi(item);

		item = strtok(NULL," ");
		record[reccount].n_kids = atoi(item);

		item = strtok(NULL," ");
		strcpy(record[reccount].day,item);

		item = strtok(NULL,"\n");
		strcpy(record[reccount].weather,item);

		printf("%s\n",record[reccount].day);
		reccount++;
	}

	/* Close file */
	fclose(filehandle);

	/* Loop through and report on data */
	printf("Weather Record\n");
	for (k=0; k<reccount; k++) {
		printf("It is %s\n",record[k].weather);
	}
}

=============================================================================================================

   You can then declare as many variables as you like of this data type, for example:
health primeminister;

   and reference the members using a dot notation, for example:
primeminister.w = 80;
strncpy(primeminister.name,"David C",20)

   and you can pass the data (using the single name) into functions too.

   But when you pass a struct variable in to a function, you may be copying quite a bit of data and you
   are certainly copying the data. Which is less than efficient, and means that you're not able to
   return any changes within the structure - altering a copy does not mean that you alter the original,
   which remains unchanged in the calling code.
   This issue of efficiency and flexibility is usually solved by using (and passing) pointers to
   structures rather than structures themselves. The variable will be declared as a pointer, and you'll
   need to take the additional step of ensuring that there's memory allocated for it too:
 health *primeminister;
 primeminister = (health *)calloc(1,sizeof(health));

   You can then reference it through the "." notation using pointers:
 (*primeminister).h = 1.78;

   But that gets a bit messy, so there's a shorthand ( ->) which you can use instead:
 primeminister->w = 85;

   Full source example, using a struct pointer, is [**2]here to compare to the previous one that just
   used a straight struct:

=============================================================================================================
[**2]
Source code: ts2.c Module: C209

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* */

typedef struct {
	float   h;
	float   w;
	char    name[21];
} health;

float getbmi (health *person) {
	float rzlt = person->w / person->h / person->h;
	return rzlt;
}

float getft (health *person) {
	float rzlt = person->h * 39.4 / 12.0;
	return rzlt;
}

main () {
	health *primeminister;
	primeminister = (health *)calloc(1,sizeof(health));

	/* Syntaxes used in next two lines are equivalent */

	(*primeminister).h = 1.78;
	primeminister->w = 85;

	strncpy(primeminister->name,"David C",20);

	float duck = getbmi(primeminister) ;
	float uk = getft(primeminister) ;

	printf("bmi: %.2f feet: %.2f\n",duck,uk);
}

/*
munchkin:cj grahamellis$ ./ts2
bmi: 26.83 feet: 5.84
munchkin:cj grahamellis$
*/
=============================================================================================================

   You are strongly advised to use struct pointers most of the time; they're efficiently passed around,
   provide an easy route to modifying your data, and allow you far more control over the persistence of
   the object, as you're at liberty to allocate it on the heap and retain it until it's no longer
   needed, rather than using a default scoping as supplied to local variables on the stac, or global
   ones via extern.


---

