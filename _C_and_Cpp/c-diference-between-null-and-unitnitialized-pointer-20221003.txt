filename: c_diiference-between-null-and-unitnitialized-pointer_20221003.txt
https://www.quora.com/What-is-the-difference-between-a-dangling-pointer-and-a-null-pointer-in-C-Technically-both-seem-the-same/answer/David-Gish

What is the difference between a dangling pointer and a null pointer in C? Technically, both seem the same.

A null pointer contains NULL, or memory address zero. It is invalid but can be tested for that condition and
fails in a predictable way: dereferencing it always produces an immediate crash since accessing address zero
(in a non-kernel process) is illegal. It is therefore usually easy to debug.

A dangling pointer points to memory that has been deallocated and returned to the system, where it will
likely be reallocated and assigned to another pointer. Any use of the dangling pointer will have
unpredictable results. The old data may still be there for a while, perhaps even for the life of the process
and no harm occur. More likely, it will be overwritten with different data and produce a crash, perhaps long
after the pointer was "dangled." Such bugs are typically elusive and hard to debug. They may lie "dormant"
for quite some time and then surface due to a totally unrelated code change that affected how memory was
allocated.

The best way to avoid dangling pointers is to establish a practice of setting all pointers to NULL initially
(uninitialized pointers contain random data that also "dangles"), and set them back to NULL when the block
they reference is freed. I often use an accessor function with lazy initialization like so:

	char *__fooBuffer = NULL;

	char *fooBuffer(){
		if (__fooBuffer == NULL)
		{
			__fooBuffer = malloc(BUFSIZ);
		}
		return __fooBuffer;
	}


---

