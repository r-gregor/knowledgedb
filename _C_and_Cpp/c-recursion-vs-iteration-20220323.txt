filename: c_recursion-vs-iteration_20220323.txt
https://www.javatpoint.com/recursion-vs-iteration

Difference between Recursion and Iteration

   In this article, we will discuss recursion and iteration along with the comparison between them. Both
   terms repeatedly execute the set of instructions but they are the different terms with different code
   structures, with the same end result. Sometimes, the terms could be confusing to beginners. So, it is
   important to know the difference between them.

   So, without any delay, let's start the topic. Before jumping directly to the comparison chart, let's
   first discuss both terms separately with an example of each.

Recursion
   Recursion is said to be the process of repeating things in a similar manner. In computer science,
   recursion is a process of calling a function itself within its own code. Any function which calls
   itself is called a recursive function, and such function calls are called recursive calls.

   During defining the recursion, one must define an exit condition carefully; otherwise, it will go to
   an infinite loop. So, it is important to impose a termination condition of recursion. It is slower
   than iteration because of the overhead of maintaining of the stack. Recursion code is shorter than
   iterative code; however, it is difficult to understand. Recursive functions are helpful in solving
   various problems such as finding the factorial of a number, creating the Fibonacci series, etc.

   Let's see an example of finding the factorial of a number using recursion.

C program to find the factorial of a number using recursion

#include <stdio.h>
	int fact(int n) {
	if (n == 0) {
		return 1;
	} else {
	return n * fact(n-1);
	}
}

int main() {
	int n,f;
	printf("Enter any number: ");
	scanf("%d", &n);
	f = fact(n);
	printf("factorial = %d",f);
}

   Output
   Enter any number: 4
   factorial = 24

Iteration
   In Iteration, there is the usage of loops to execute the set of instructions repetitively until the
   condition of the iteration statement becomes false. It is comparatively faster than recursion. It has
   a larger code size than recursion. The termination in iteration happens when the condition of the
   loop fails.

   In iteration, the time complexity is relatively lower than recursion. We can calculate its time
   complexity by finding the no. of cycles being repeated in a loop.

   Now, let's see the program to find the factorial of a number using iteration.

C program to find the factorial of a number using iteration


#include <stdio.h>
int fact(int num) {
	int res = 1, i;

	for (i = 2; i <= num; i++)
		res *= i;
	return res;
}

int main() {
	int num, f;	
	printf("Enter any number: ");
	scanf("%d", &num);	
	f = fact(num);
	printf("factorial = %d", f);
}

   Output
   Enter any number: 4
   Factorial: 24

Recursion v/s Iteration
   Now, let's see the comparison between iteration and recursion. We are comparing both terms based on
   some characteristics.

-------------------------------------------------------------------------------------------------------------
On the      Recursion                                      Iteration
basis of
-------------------------------------------------------------------------------------------------------------
Basic       Recursion is the process of calling a function set of instructions. In Iteration, loops are used
            itself within its own code.                    to execute the set of instructions repetitively
                                                           until the condition is false.
-------------------------------------------------------------------------------------------------------------
Syntax      There is a termination condition is specified. The format of iteration includes initialization,
                                                           condition, and increment/decrement of a variable.
-------------------------------------------------------------------------------------------------------------
Termination The termination condition is defined within    Here, the termination condition is defined in the
            the recursive function.                        definition of the loop.
-------------------------------------------------------------------------------------------------------------
Code size   The code size in recursion is smaller than the The code size in iteration is larger than the code
            code size in iteration.                        size in recursion.
-------------------------------------------------------------------------------------------------------------
            If the recursive function does not meet to a   Iteration will be infinite, if the control
Infinite    termination condition, it leads to an infinite condition of the iteration statement never becomes
            recursion.  There is a chance of system crash  false. On infinite loop, it repeatedly used CPU
            in infinite recursions.
-------------------------------------------------------------------------------------------------------------
Applied     It is always applied to functions.             It is applied to loops.
-------------------------------------------------------------------------------------------------------------
Speed       It is slower than iteration.                   It is faster than recursion.
-------------------------------------------------------------------------------------------------------------
            Recursion is generally used where there is no  It is used when we have to balance the time
Usage       issue of time complexity, and code size        complexity against a large code size.
            requires being small.
-------------------------------------------------------------------------------------------------------------
                                                           The time complexity in iteration is relatively
Time        It has high time complexity.                   lower. We can calculate its time complexity by
complexity                                                 finding the no. of cycles being repeated in a
                                                           loop.
-------------------------------------------------------------------------------------------------------------
Stack       It has to update and maintain the stack.       There is no utilization of stack.
Memory      It uses more memory as compared to iteration.  It uses less memory as compared to recursion.
Overhead    There is an extensive overhead due to updating There is no overhead in iteration.
            and maintaining the stack.
-------------------------------------------------------------------------------------------------------------

   So, that's all about the article. Hope it will be helpful and informative to you.


---

