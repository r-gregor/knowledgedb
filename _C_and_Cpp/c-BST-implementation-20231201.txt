filename: c_BST_implementation_20231201.txt
https://cstdspace.quora.com/https-www-quora-com-How-can-you-implement-a-binary-search-tree-BST-in-C-and-what-are-the-advantages-of-using-a-BST-ove

How can you implement a binary search tree (BST) in C, and what are the advantages of using a BST over
other data structures?

To implement a Binary Search Tree (BST) in C, you'll need to define a structure for the tree nodes,
and then you can create functions to insert, search, and delete nodes. Here's a basic example of how to
implement a BST in C:

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a BST node
struct Node {
	int data;
	struct Node* left;
	struct Node* right;
};

// Function to create a new BST node
struct Node* createNode(int data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = data;
	newNode->left = newNode->right = NULL;
	return newNode;
}

// Function to insert a node into the BST
struct Node* insert(struct Node* root, int data) {
	if (root == NULL) {
		return createNode(data);
	}

	if (data < root->data) {
		root->left = insert(root->left, data);
	} else if (data > root->data) {
		root->right = insert(root->right, data);
	}

	return root;
}

// Function to search for a value in the BST
struct Node* search(struct Node* root, int data) {
	if (root == NULL || root->data == data) {
		return root;
	}

	if (data < root->data) {
		return search(root->left, data);
	} else {
		return search(root->right, data);
	}
}

// Function to perform an inorder traversal of the BST (for printing)
void inorderTraversal(struct Node* root) {
	if (root != NULL) {
		inorderTraversal(root->left);
		printf("%d ", root->data);
		inorderTraversal(root->right);
	}
}

int main() {
	struct Node* root = NULL;
	root = insert(root, 50);
	insert(root, 30);
	insert(root, 20);
	insert(root, 40);
	insert(root, 70);
	insert(root, 60);
	insert(root, 80);

	printf("Inorder traversal of the BST: ");
	inorderTraversal(root);

	int searchValue = 40;
	struct Node* result = search(root, searchValue);
	if (result != NULL) {
		printf("\n%d found in the BST.\n", searchValue);
	} else {
		printf("\n%d not found in the BST.\n", searchValue);
	}

	return 0;
}

Advantages of using a BST over other data structures:
    Efficient Search: BSTs provide efficient searching. In a balanced BST, the average time complexity
    for search, insert, and delete operations is O(log n), where n is the number of nodes.
    Ordered Data: BSTs naturally maintain data in sorted order. An inorder traversal of the tree yields
    the data in ascending order, making it useful for applications that require sorted data.
    Dynamic Size: BSTs can grow or shrink dynamically, accommodating the addition or removal of elements
    without much overhead. This makes them suitable for dynamic data structures.
    Space Efficiency: BSTs typically require less memory overhead compared to other data structures like
    hash tables, which may allocate more space for collision handling.
    Versatility: BSTs can be used to implement various data structures, such as sets, maps, and priority
    queues.

However, it's important to note that the efficiency of a BST depends on its balance. If the tree becomes
unbalanced (e.g., degenerates into a linked list), the time complexity of operations can degrade to
O(n). To mitigate this issue, self-balancing BSTs like AVL trees and Red-Black trees are used to maintain
balance automatically.


---

