filename: c_GFG_socket-server-client-implementations-multyf_20221006.txt 
https://www.geeksforgeeks.org/socket-programming-cc/

Socket Programming in C/C++
19 Sep, 2022

What is socket programming?
   Socket programming is a way of connecting two nodes on a network to communicate with each
   other. One socket(node) listens on a particular port at an IP, while the other socket
   reaches out to the other to form a connection. The server forms the listener socket while
   the client reaches out to the server.

State diagram for server and client model

   [StatediagramforserverandclientmodelofSocketdrawio2-448x660.png]

   Stages for server
1. Socket creation:
     int sockfd = socket(domain, type, protocol)

     * sockfd: socket descriptor, an integer (like a file-handle)
     * domain: integer, specifies communication domain. We use AF_ LOCAL as defined in the
       POSIX standard for communication between processes on the same host. For communicating
       between processes on different hosts connected by IPV4, we use AF_INET and AF_I NET 6
       for processes connected by IPV6.
     * type: communication type
       SOCK_STREAM: TCP(reliable, connection oriented)
       SOCK_DGRAM: UDP(unreliable, connectionless)
     * protocol: Protocol value for Internet Protocol(IP), which is 0. This is the same number
       which appears on protocol field in the IP header of a packet.(man protocols for more
       details)

2. Setsockopt:
   This helps in manipulating options for the socket referred by the file descriptor sockfd.
   This is completely optional, but it helps in reuse of address and port. Prevents error such
   as: "address already in use".

     int setsockopt(int sockfd, int level, int optname,  const void *optval, socklen_t
     optlen);

3. Bind:
     int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

   After the creation of the socket, the bind function binds the socket to the address and
   port number specified in addr(custom data structure). In the example code, we bind the
   server to the localhost, hence we use INADDR_ANY to specify the IP address.

4. Listen:
     int listen(int sockfd, int backlog);

   It puts the server socket in a passive mode, where it waits for the client to approach the
   server to make a connection. The backlog, defines the maximum length to which the queue of
   pending connections for sockfd may grow. If a connection request arrives when the queue is
   full, the client may receive an error with an indication of ECONNREFUSED.

5. Accept:
     int new_socket= accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

   It extracts the first connection request on the queue of pending connections for the
   listening socket, sockfd, creates a new connected socket, and returns a new file descriptor
   referring to that socket. At this point, the connection is established between client and
   server, and they are ready to transfer data.

Stages for Client
     * Socket connection: Exactly same as that of server's socket creation
     * Connect: The connect() system call connects the socket referred to by the file
       descriptor sockfd to the address specified by addr. Server's address and port is
       specified in addr.

     int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

   Implementation
   Here we are exchanging one hello message between server and client to demonstrate the
   client/server model.

Server.c

// Server side C/C++ program to demonstrate Socket
// programming
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080
int main(int argc, char const* argv[]) {
	int server_fd, new_socket, valread;
	struct sockaddr_in address;
	int opt = 1;
	int addrlen = sizeof(address);
	char buffer[1024] = { 0 };
	char* hello = "Hello from server";

	// Creating socket file descriptor
	if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		perror("socket failed");
		exit(EXIT_FAILURE);
	}

	// Forcefully attaching socket to the port 8080
	if (setsockopt(server_fd, SOL_SOCKET,
				   SO_REUSEADDR | SO_REUSEPORT, &opt,
				   sizeof(opt))) {
		perror("setsockopt");
		exit(EXIT_FAILURE);
	}
	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons(PORT);

	// Forcefully attaching socket to the port 8080
	if (bind(server_fd, (struct sockaddr*)&address,
			 sizeof(address))
		< 0) {
		perror("bind failed");
		exit(EXIT_FAILURE);
	}
	if (listen(server_fd, 3) < 0) {
		perror("listen");
		exit(EXIT_FAILURE);
	}
	if ((new_socket
		 = accept(server_fd, (struct sockaddr*)&address,
				  (socklen_t*)&addrlen))
		< 0) {
		perror("accept");
		exit(EXIT_FAILURE);
	}
	valread = read(new_socket, buffer, 1024);
	printf("%s\n", buffer);
	send(new_socket, hello, strlen(hello), 0);
	printf("Hello message sent\n");

	// closing the connected socket
	close(new_socket);
	// closing the listening socket
	shutdown(server_fd, SHUT_RDWR);
	return 0;
}


client.c

C

// Client side C/C++ program to demonstrate Socket
// programming
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080

int main(int argc, char const* argv[]) {
	int sock = 0, valread, client_fd;
	struct sockaddr_in serv_addr;
	char* hello = "Hello from client";
	char buffer[1024] = { 0 };
	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("\n Socket creation error \n");
		return -1;
	}

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(PORT);

	// Convert IPv4 and IPv6 addresses from text to binary
	// form
	if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)
		<= 0) {
		printf(
			"\nInvalid address/ Address not supported \n");
		return -1;
	}

	if ((client_fd
		 = connect(sock, (struct sockaddr*)&serv_addr,
				   sizeof(serv_addr)))
		< 0) {
		printf("\nConnection Failed \n");
		return -1;
	}
	send(sock, hello, strlen(hello), 0);
	printf("Hello message sent\n");
	valread = read(sock, buffer, 1024);
	printf("%s\n", buffer);

	// closing the connected socket
	close(client_fd);
	return 0;
}


   Compiling:
gcc client.c -o client
gcc server.c -o server

   Output:
Client:Hello message sent
Hello from server
Server:Hello from client
Hello message sent



---
https://www.geeksforgeeks.org/socket-programming-in-cc-handling-multiple-clients-on-server-without-multi-threading/

Socket Programming in C/C++: Handling multiple clients on server without multi threading
28 Jun, 2022

   This tutorial assumes you have a basic knowledge of socket programming, i.e you are
   familiar with basic server and client model. In the basic model, server handles only one
   client at a time, which is a big assumption if you want to develop any scalable server
   model.
   The simple way to handle multiple clients would be to spawn new thread for every new client
   connected to the server. This method is strongly not recommended because of various
   disadvantages, namely:
     * Threads are difficult to code, debug and sometimes they have unpredictable results.
     * Overhead switching of context
     * Not scalable for large number of clients
     * Deadlocks can occur

   Select()
   A better way to handle multiple clients is by using select() linux command.
     * Select command allows to monitor multiple file descriptors, waiting until one of the
       file descriptors become active.
     * For example, if there is some data to be read on one of the sockets select will provide
       that information.
     * Select works like an interrupt handler, which gets activated as soon as any file
       descriptor sends any data.

   Data structure used for select: fd_set
   It contains the list of file descriptors to monitor for some activity.
   There are four functions associated with fd_set:
fd_set readfds;

// Clear an fd_set
FD_ZERO(&readfds);

// Add a descriptor to an fd_set
FD_SET(master_sock, &readfds);

// Remove a descriptor from an fd_set
FD_CLR(master_sock, &readfds);

//If something happened on the master socket , then its an incoming connection
FD_ISSET(master_sock, &readfds);

   Activating select: Please read the man page for select to check all the arguments for
   select command.
activity = select( max_fd + 1 , &readfds , NULL , NULL , NULL);

   Implementation:

//Example code: A simple server side code, which echos back the received message.
//Handle multiple socket connections with select and fd_set on Linux
#include <stdio.h>
#include <string.h>   //strlen
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>   //close
#include <arpa/inet.h>    //close
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/time.h> //FD_SET, FD_ISSET, FD_ZERO macros

#define TRUE   1
#define FALSE  0
#define PORT 8888

int main(int argc , char *argv[]) {
	int opt = TRUE;
	int master_socket , addrlen , new_socket , client_socket[30] ,
		  max_clients = 30 , activity, i , valread , sd;
	int max_sd;
	struct sockaddr_in address;

	char buffer[1025];	//data buffer of 1K

	//set of socket descriptors
	fd_set readfds;

	//a message
	char *message = "ECHO Daemon v1.0 \r\n";

	//initialise all client_socket[] to 0 so not checked
	for (i = 0; i < max_clients; i++) {
		client_socket[i] = 0;
	}

	//create a master socket
	if( (master_socket = socket(AF_INET , SOCK_STREAM , 0)) == 0) {
		perror("socket failed");
		exit(EXIT_FAILURE);
	}

	//set master socket to allow multiple connections ,
	//this is just a good habit, it will work without this
	if( setsockopt(master_socket, SOL_SOCKET, SO_REUSEADDR, (char *)&opt,
		  sizeof(opt)) < 0 )
	{
		perror("setsockopt");
		exit(EXIT_FAILURE);
	}

	//type of socket created
	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons( PORT );

	//bind the socket to localhost port 8888

	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}
	printf("Listener on port %d \n", PORT);

	//try to specify maximum of 3 pending connections for the master socket
	if (listen(master_socket, 3) < 0) {
		perror("listen");
		exit(EXIT_FAILURE);
	}

	//accept the incoming connection
	addrlen = sizeof(address);
	puts("Waiting for connections ...");

	while(TRUE) {
		//clear the socket set
		FD_ZERO(&readfds);

		//add master socket to set
		FD_SET(master_socket, &readfds);
		max_sd = master_socket;

		//add child sockets to set
		for ( i = 0 ; i < max_clients ; i++) {
			//socket descriptor
			sd = client_socket[i];

			//if valid socket descriptor then add to read list
			if(sd > 0)
				FD_SET( sd , &readfds);

			//highest file descriptor number, need it for the select function
			if(sd > max_sd)
				max_sd = sd;
		}

		//wait for an activity on one of the sockets , timeout is NULL ,
		//so wait indefinitely
		activity = select( max_sd + 1 , &readfds , NULL , NULL , NULL);

		if ((activity < 0) && (errno!=EINTR)) {
			printf("select error");
		}

		//If something happened on the master socket ,
		//then its an incoming connection
		if (FD_ISSET(master_socket, &readfds)) {
			if ((new_socket = accept(master_socket,
					(struct sockaddr *)&address, (socklen_t*)&addrlen))<0)
			{
				perror("accept");
				exit(EXIT_FAILURE);
			}

			//inform user of socket number - used in send and receive commands
			printf("New connection , socket fd is %d , ip is : %s , port : %d
				  \n" , new_socket , inet_ntoa(address.sin_addr) , ntohs
				  (address.sin_port));

			//send new connection greeting message
			if( send(new_socket, message, strlen(message), 0) != strlen(message) ) {
				perror("send");
			}

			puts("Welcome message sent successfully");

			//add new socket to array of sockets
			for (i = 0; i < max_clients; i++) {
				//if position is empty
				if( client_socket[i] == 0 ) {
					client_socket[i] = new_socket;
					printf("Adding to list of sockets as %d\n" , i);

					break;
				}
			}
		}

		//else its some IO operation on some other socket
		for (i = 0; i < max_clients; i++) {
			sd = client_socket[i];

			if (FD_ISSET( sd , &readfds)) {
				//Check if it was for closing , and also read the
				//incoming message
				if ((valread = read( sd , buffer, 1024)) == 0) {
					//Somebody disconnected , get his details and print
					getpeername(sd , (struct sockaddr*)&address , \
						(socklen_t*)&addrlen);
					printf("Host disconnected , ip %s , port %d \n" ,
						  inet_ntoa(address.sin_addr) , ntohs(address.sin_port));

					//Close the socket and mark as 0 in list for reuse
					close( sd );
					client_socket[i] = 0;
				}

				//Echo back the message that came in
				else
				{
					//set the string terminating NULL byte on the end
					//of the data read
					buffer[valread] = '\0';
					send(sd , buffer , strlen(buffer) , 0 );
				}
			}
		}
	}

	return 0;
}


   Compile the file and run the server.
   Use telnet to connect the server as a client.

   Try running on different machines using following command:
 telnet localhost 8888

   Code Explanation:
     * We have created a fd_set variable readfds, which will monitor all the active file
       descriptors of the clients plus that of the main server listening socket.
     * Whenever a new client will connect, master_socket will be activated and a new fd will
       be open for that client. We will store its fd in our client_list and in the next
       iteration we will add it to the readfds to monitor for activity from this client.
     * Similarly, if an old client sends some data, readfds will be activated and we will
       check from the list of existing client to see which client has send the data.
       Alternatives:
       There are other functions that can perform tasks similar to select. pselect , poll ,
       ppoll


---
https://www.geeksforgeeks.org/tcp-and-udp-server-using-select/

TCP and UDP server using select
05 Nov, 2021

   In previous articles, we have seen a TCP server and a UDP server. But now we can combine
   our concurrent TCP echo server and iterative UDP server into a single server that uses
   select to multiplex TCP and UDP socket.

   The Select function is used to select between TCP and UDP sockets. This function gives
   instructions to the kernel to wait for any of the multiple events to occur and awakens the
   process only after one or more events occur or a specified time passes.

   Example – kernel will return only when one of these conditions occurs
     * Any Descriptor from {1, 2, 3} is ready for reading
     * Any Descriptor from {4, 5, 6} is ready for writing
     * Time 5sec has passed

   The entire process can be broken down into the following steps :

   Server:
    1. Create TCP i.e Listening socket
    2. Create a UDP socket
    3. Bind both sockets to the server address.
    4. Initialize a descriptor set for select and calculate a maximum of 2 descriptors for
       which we will wait
    5. Call select and get the ready descriptor(TCP or UDP)
    6. Handle new connection if the ready descriptor is of TCP OR receive datagram if the
       ready descriptor is of UDP

   UDP Client:
    1. Create a UDP socket.
    2. Send a message to the server.
    3. Wait until a response from the server is received.
    4. Close socket descriptor and exit.

   TCP Client:
    1. Create a TCP socket.
    2. Call connect to establish a connection with the server.
    3. When the connection is accepted write a message to a server.
    4. Read the response of the Server.
    5. Close socket descriptor and exit.

   Necessary functions:
int select(int maxfd, fd_set *readsset, fd_set *writeset,
fd_set *exceptset, const struct timeval *timeout);
Returns: positive count of descriptors ready, 0 on timeout, -1 error

   Arguments:
     * maxfd: maximum number of descriptors ready.
     * timeout: How long to wait for select to return.

struct timeval {
	long tv_sec;
	long tv_usec;
};

if timeout==NULL then wait forever
if timeout == fixed_amount_time then wait until specified time
if timeout == 0 return immediately.
     * readset: Descriptor set that we want the kernel to test for reading.
     * writeset: Descriptor set that we want the kernel to test for writing.
     * exceptset: Descriptor set that we want the kernel to test for exception conditions.

int read(int sockfd, void * buff, size_t nbytes);
Returns:  number of bytes read from the descriptor. -1 on error

   Arguments:
    1. sockfd: Descriptor which receives data.
    2. buff: Application buffer socket descriptor data is copied to this buffer.
    3. nbytes: Number of bytes to be copied to application buffer.

   Server.c

// Server program
#include <arpa/inet.h>
#include <errno.h>
#include <netinet/in.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#define PORT 5000
#define MAXLINE 1024

int max(int x, int y) {
	if (x > y)
		return x;
	else
		return y;
}
int main() {
	int listenfd, connfd, udpfd, nready, maxfdp1;
	char buffer[MAXLINE];
	pid_t childpid;
	fd_set rset;
	ssize_t n;
	socklen_t len;
	const int on = 1;
	struct sockaddr_in cliaddr, servaddr;
	char* message = "Hello Client";
	void sig_chld(int);

	/* create listening TCP socket */
	listenfd = socket(AF_INET, SOCK_STREAM, 0);
	bzero(&servaddr, sizeof(servaddr));
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);

	// binding server addr structure to listenfd
	bind(listenfd, (struct sockaddr*)&servaddr, sizeof(servaddr));
	listen(listenfd, 10);

	/* create UDP socket */
	udpfd = socket(AF_INET, SOCK_DGRAM, 0);
	// binding server addr structure to udp sockfd
	bind(udpfd, (struct sockaddr*)&servaddr, sizeof(servaddr));

	// clear the descriptor set
	FD_ZERO(&rset);

	// get maxfd
	maxfdp1 = max(listenfd, udpfd) + 1;
	for (;;) {

		// set listenfd and udpfd in readset
		FD_SET(listenfd, &rset);
		FD_SET(udpfd, &rset);

		// select the ready descriptor
		nready = select(maxfdp1, &rset, NULL, NULL, NULL);

		// if tcp socket is readable then handle
		// it by accepting the connection
		if (FD_ISSET(listenfd, &rset)) {
			len = sizeof(cliaddr);
			connfd = accept(listenfd, (struct sockaddr*)&cliaddr, &len);
			if ((childpid = fork()) == 0) {
				close(listenfd);
				bzero(buffer, sizeof(buffer));
				printf("Message From TCP client: ");
				read(connfd, buffer, sizeof(buffer));
				puts(buffer);
				write(connfd, (const char*)message, sizeof(buffer));
				close(connfd);
				exit(0);
			}
			close(connfd);
		}
		// if udp socket is readable receive the message.
		if (FD_ISSET(udpfd, &rset)) {
			len = sizeof(cliaddr);
			bzero(buffer, sizeof(buffer));
			printf("\nMessage from UDP client: ");
			n = recvfrom(udpfd, buffer, sizeof(buffer), 0,
						(struct sockaddr*)&cliaddr, &len);
			puts(buffer);
			sendto(udpfd, (const char*)message, sizeof(buffer), 0,
				(struct sockaddr*)&cliaddr, sizeof(cliaddr));
		}
	}
}


   TCP_Client.c

// TCP Client program
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#define PORT 5000
#define MAXLINE 1024

int main() {
	int sockfd;
	char buffer[MAXLINE];
	char* message = "Hello Server";
	struct sockaddr_in servaddr;

	int n, len;
	// Creating socket file descriptor
	if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("socket creation failed");
		exit(0);
	}

	memset(&servaddr, 0, sizeof(servaddr));

	// Filling server information
	servaddr.sin_family = AF_INET;
	servaddr.sin_port = htons(PORT);
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");

	if (connect(sockfd, (struct sockaddr*)&servaddr,
							sizeof(servaddr)) < 0) {
		printf("\n Error : Connect Failed \n");
	}

	memset(buffer, 0, sizeof(buffer));
	strcpy(buffer, "Hello Server");
	write(sockfd, buffer, sizeof(buffer));
	printf("Message from server: ");
	read(sockfd, buffer, sizeof(buffer));
	puts(buffer);
	close(sockfd);
}


   UDP_client.c

// UDP client program
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <sys/socket.h>
#include <sys/types.h>
#define PORT 5000
#define MAXLINE 1024

int main() {
	int sockfd;
	char buffer[MAXLINE];
	char* message = "Hello Server";
	struct sockaddr_in servaddr;

	int n, len;
	// Creating socket file descriptor
	if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		printf("socket creation failed");
		exit(0);
	}

	memset(&servaddr, 0, sizeof(servaddr));

	// Filling server information
	servaddr.sin_family = AF_INET;
	servaddr.sin_port = htons(PORT);
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	// send hello message to server
	sendto(sockfd, (const char*)message, strlen(message),
		0, (const struct sockaddr*)&servaddr,
		sizeof(servaddr));

	// receive server's response
	printf("Message from server: ");
	n = recvfrom(sockfd, (char*)buffer, MAXLINE,
				0, (struct sockaddr*)&servaddr,
				&len);
	puts(buffer);
	close(sockfd);
	return 0;
}


   Steps to compile and run the above codes:
    1. Compile the server program (gcc server.c -o ser)
    2. Run server using (./ser)
    3. On another terminal, compile tcp client program (gcc tcp_client.c -o tcpcli)
    4. Run tcp client (./tcpcli)
    5. On another terminal, compile udp client program (gcc udp_client.c -o udpcli)
    6. Run udp client (./udpcli)

   Output of the above codes:
   [ser.png] [tcp.png] [c14.png]



---
https://www.geeksforgeeks.org/tcp-server-client-implementation-in-c/

TCP Server-Client implementation in C

   Prerequisites – Socket Programming in C/C++, TCP and UDP server using select,
   UDP Server-Client implementation in C

   If we are creating a connection between client and server using TCP then it has a few
   functionalities like, TCP is suited for applications that require high reliability, and
   transmission time is relatively less critical. It is used by other protocols like HTTP,
   HTTPs, FTP, SMTP, Telnet. TCP rearranges data packets in the order specified. There is
   absolute guarantee that the data transferred remains intact and arrives in the same order
   in which it was sent. TCP does Flow Control and requires three packets to set up a socket
   connection before any user data can be sent. TCP handles reliability and congestion
   control. It also does error checking and error recovery. Erroneous packets are
   retransmitted from the source to the destination.

   The entire process can be broken down into following steps:

   TCP Server –
    1. using create(), Create TCP socket.
    2. using bind(), Bind the socket to server address.
    3. using listen(), put the server socket in a passive mode, where it waits for the client
       to approach the server to make a connection
    4. using accept(), At this point, connection is established between client and server, and
       they are ready to transfer data.
    5. Go back to Step 3.

   TCP Client –
    1. Create TCP socket.
    2. connect newly created client socket to server.

   TCP Server:

#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#define MAX 80
#define PORT 8080
#define SA struct sockaddr

// Function designed for chat between client and server.
void func(int connfd) {
	char buff[MAX];
	int n;
	// infinite loop for chat
	for (;;) {
		bzero(buff, MAX);

		// read the message from client and copy it in buffer
		read(connfd, buff, sizeof(buff));
		// print buffer which contains the client contents
		printf("From client: %s\t To client : ", buff);
		bzero(buff, MAX);
		n = 0;
		// copy server message in the buffer
		while ((buff[n++] = getchar()) != '\n')
			;

		// and send that buffer to client
		write(connfd, buff, sizeof(buff));

		// if msg contains "Exit" then server exit and chat ended.
		if (strncmp("exit", buff, 4) == 0) {
			printf("Server Exit...\n");
			break;
		}
	}
}

// Driver function
int main() {
	int sockfd, connfd, len;
	struct sockaddr_in servaddr, cli;

	// socket create and verification
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) {
		printf("socket creation failed...\n");
		exit(0);
	}
	else
		printf("Socket successfully created..\n");
	bzero(&servaddr, sizeof(servaddr));

	// assign IP, PORT
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);

	// Binding newly created socket to given IP and verification
	if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) {
		printf("socket bind failed...\n");
		exit(0);
	}
	else
		printf("Socket successfully binded..\n");

	// Now server is ready to listen and verification
	if ((listen(sockfd, 5)) != 0) {
		printf("Listen failed...\n");
		exit(0);
	}
	else
		printf("Server listening..\n");
	len = sizeof(cli);

	// Accept the data packet from client and verification
	connfd = accept(sockfd, (SA*)&cli, &len);
	if (connfd < 0) {
		printf("server accept failed...\n");
		exit(0);
	}
	else
		printf("server accept the client...\n");

	// Function for chatting between client and server
	func(connfd);

	// After chatting close the socket
	close(sockfd);
}


   TCP Client:

#include <arpa/inet.h> // inet_addr()
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h> // bzero()
#include <sys/socket.h>
#include <unistd.h> // read(), write(), close()
#define MAX 80
#define PORT 8080
#define SA struct sockaddr

void func(int sockfd) {
	char buff[MAX];
	int n;
	for (;;) {
		bzero(buff, sizeof(buff));
		printf("Enter the string : ");
		n = 0;
		while ((buff[n++] = getchar()) != '\n')
			;
		write(sockfd, buff, sizeof(buff));
		bzero(buff, sizeof(buff));
		read(sockfd, buff, sizeof(buff));
		printf("From Server : %s", buff);
		if ((strncmp(buff, "exit", 4)) == 0) {
			printf("Client Exit...\n");
			break;
		}
	}
}

int main() {
	int sockfd, connfd;
	struct sockaddr_in servaddr, cli;

	// socket create and verification
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) {
		printf("socket creation failed...\n");
		exit(0);
	}
	else
		printf("Socket successfully created..\n");
	bzero(&servaddr, sizeof(servaddr));

	// assign IP, PORT
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	servaddr.sin_port = htons(PORT);

	// connect the client socket to server socket
	if (connect(sockfd, (SA*)&servaddr, sizeof(servaddr))
		!= 0) {
		printf("connection with the server failed...\n");
		exit(0);
	}
	else
		printf("connected to the server..\n");

	// function for chat
	func(sockfd);

	// close the socket
	close(sockfd);
}


   Compilation –
   Server side:
   gcc server.c -o server
   ./server

   Client side:
   gcc client.c -o client
   ./client

   Output –

   Server side:
Socket successfully created..
Socket successfully binded..
Server listening..
server accept the client...
From client: hi
     To client : hello
From client: exit
     To client : exit
Server Exit...

   Client side:
Socket successfully created..
connected to the server..
Enter the string : hi
From Server : hello
Enter the string : exit
From Server : exit
Client Exit...



---
https://www.geeksforgeeks.org/udp-server-client-implementation-c/

UDP Server-Client implementation in C
04 May, 2022

   There are two major transport layer protocols to communicate between hosts: TCP and
   UDP. Creating TCP Server/Client was discussed in a previous post.

   Prerequisite: Creating TCP Server/Client

   Theory
   In UDP, the client does not form a connection with the server like in TCP and instead just
   sends a datagram. Similarly, the server need not accept a connection and just waits for
   datagrams to arrive. Datagrams upon arrival contain the address of the sender which the
   server uses to send data to the correct client.

   The entire process can be broken down into the following steps :

   UDP Server :
    1. Create a UDP socket.
    2. Bind the socket to the server address.
    3. Wait until the datagram packet arrives from the client.
    4. Process the datagram packet and send a reply to the client.
    5. Go back to Step 3.

   UDP Client :
    1. Create a UDP socket.
    2. Send a message to the server.
    3. Wait until response from the server is received.
    4. Process reply and go back to step 2, if necessary.
    5. Close socket descriptor and exit.

   Necessary Functions :
int socket(int domain, int type, int protocol)
Creates an unbound socket in the specified domain.
Returns socket file descriptor.

   Arguments :
   domain – Specifies the communication
   domain ( AF_INET for IPv4/ AF_INET6 for IPv6 )
   type – Type of socket to be created
   ( SOCK_STREAM for TCP / SOCK_DGRAM for UDP )
   protocol – Protocol to be used by the socket.
   0 means use default protocol for the address family.
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
Assigns address to the unbound socket.

   Arguments :
   sockfd – File descriptor of a socket to be bonded
   addr – Structure in which address to be bound to is specified
   addrlen – Size of addr structure
ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
               const struct sockaddr *dest_addr, socklen_t addrlen)
Send a message on the socket

   Arguments :
   sockfd – File descriptor of the socket
   buf – Application buffer containing the data to be sent
   len – Size of buf application buffer
   flags – Bitwise OR of flags to modify socket behavior
   dest_addr – Structure containing the address of the destination
   addrlen – Size of dest_addr structure
ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                 struct sockaddr *src_addr, socklen_t *addrlen)
Receive a message from the socket.

   Arguments :
   sockfd – File descriptor of the socket
   buf – Application buffer in which to receive data
   len – Size of buf application buffer
   flags – Bitwise OR of flags to modify socket behavior
   src_addr – Structure containing source address is returned
   addrlen – Variable in which size of src_addr structure is returned
int close(int fd)
Close a file descriptor

   Arguments:

    fd – File descriptor

   In the below code, the exchange of one hello message between server and client is shown to
   demonstrate the model.

   Filename: UDPServer.c

// Server side implementation of UDP client-server model
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define PORT    8080
#define MAXLINE 1024

// Driver code
int main() {
	int sockfd;
	char buffer[MAXLINE];
	char *hello = "Hello from server";
	struct sockaddr_in servaddr, cliaddr;

	// Creating socket file descriptor
	if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
		perror("socket creation failed");
		exit(EXIT_FAILURE);
	}

	memset(&servaddr, 0, sizeof(servaddr));
	memset(&cliaddr, 0, sizeof(cliaddr));

	// Filling server information
	servaddr.sin_family    = AF_INET; // IPv4
	servaddr.sin_addr.s_addr = INADDR_ANY;
	servaddr.sin_port = htons(PORT);

	// Bind the socket with the server address
	if ( bind(sockfd, (const struct sockaddr *)&servaddr,
			sizeof(servaddr)) < 0 )
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}

	int len, n;

	len = sizeof(cliaddr);	//len is value/result

	n = recvfrom(sockfd, (char *)buffer, MAXLINE,
				MSG_WAITALL, ( struct sockaddr *) &cliaddr,
				&len);
	buffer[n] = '\0';
	printf("Client : %s\n", buffer);
	sendto(sockfd, (const char *)hello, strlen(hello),
		MSG_CONFIRM, (const struct sockaddr *) &cliaddr,
			len);
	printf("Hello message sent.\n");

	return 0;
}


   Filename: UDPClient.c

// Client side implementation of UDP client-server model
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define PORT     8080
#define MAXLINE 1024

// Driver code
int main() {
	int sockfd;
	char buffer[MAXLINE];
	char *hello = "Hello from client";
	struct sockaddr_in	   servaddr;

	// Creating socket file descriptor
	if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
		perror("socket creation failed");
		exit(EXIT_FAILURE);
	}

	memset(&servaddr, 0, sizeof(servaddr));

	// Filling server information
	servaddr.sin_family = AF_INET;
	servaddr.sin_port = htons(PORT);
	servaddr.sin_addr.s_addr = INADDR_ANY;

	int n, len;

	sendto(sockfd, (const char *)hello, strlen(hello),
		MSG_CONFIRM, (const struct sockaddr *) &servaddr,
			sizeof(servaddr));
	printf("Hello message sent.\n");

	n = recvfrom(sockfd, (char *)buffer, MAXLINE,
				MSG_WAITALL, (struct sockaddr *) &servaddr,
				&len);
	buffer[n] = '\0';
	printf("Server : %s\n", buffer);

	close(sockfd);
	return 0;
}


   Output :
$ ./server
Client : Hello from client
Hello message sent.
$ ./client
Hello message sent.
Server : Hello from server



---

