filename: c_5p_pass-2d-array-as-function-parameter_20221103.txt
https://www.geeksforgeeks.org/pass-2d-array-parameter-c/

How to pass a 2D array as a parameter in C?
24 Jun, 2021

   This post is an extension of [**1]How to dynamically allocate a 2D array in C?
   A one dimensional array can be easily passed as a pointer, but syntax for passing a 2D array to a
   function can be difficult to remember. One important thing for passing multidimensional arrays is,
   first array dimension does not have to be specified. The second (and any subsequent) dimensions must
   be given

   1) When both dimensions are available globally (either as a macro or as a global constant).

#include <stdio.h>
const int M = 3;
const int N = 3;

void print(int arr[M][N]) {
	int i, j;
	for (i = 0; i < M; i++)
		for (j = 0; j < N; j++)
			printf("%d ", arr[i][j]);
}

int main() {
	int arr[][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	print(arr);
	return 0;
}


   Output
1 2 3 4 5 6 7 8 9

   2) When only second dimension is available globally (either as a macro or as a global constant).

#include <stdio.h>
const int N = 3;

void print(int arr[][N], int m) {
	int i, j;
	for (i = 0; i < m; i++)
		for (j = 0; j < N; j++)
			printf("%d ", arr[i][j]);
}

int main() {
	int arr[][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	print(arr, 3);
	return 0;
}


   Output
1 2 3 4 5 6 7 8 9

   The above method is fine if second dimension is fixed and is not user specified. The following
   methods handle cases when second dimension can also change.

   3) If compiler is C99 compatible
   From C99, C language supports variable sized arrays to be passed simply by specifying the variable
   dimensions (See [367]this for an example run)

// The following program works only if your compiler is C99 compatible.
#include <stdio.h>

// n must be passed before the 2D array
void print(int m, int n, int arr[][n]) {
	int i, j;
	for (i = 0; i < m; i++)
		for (j = 0; j < n; j++)
			printf("%d ", arr[i][j]);
}

int main() {
	int arr[][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	int m = 3, n = 3;
	print(m, n, arr);
	return 0;
}


   Output
1 2 3 4 5 6 7 8 9

   If compiler is not C99 compatible, then we can use one of the following methods to pass a variable
   sized 2D array.

   4) Using a single pointer
   In this method, we must typecast the 2D array when passing to function.

#include <stdio.h>
void print(int *arr, int m, int n) {
	int i, j;
	for (i = 0; i < m; i++)
		for (j = 0; j < n; j++)
			printf("%d ", *((arr+i*n) + j));
}

int main() {
	int arr[][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	int m = 3, n = 3;

	// We can also use "print(&arr[0][0], m, n);"
	print((int *)arr, m, n);
	return 0;
}


   Output
1 2 3 4 5 6 7 8 9

   5) Using the concept of pointer to an array

#include <stdio.h>
const int M = 3;

void print(int (*arr)[M]) {
	int i, j;
	for (i = 0; i < M; i++)
		for (j = 0; j < M; j++)
			printf("%d ", arr[i][j]);
}

int main() {
	int arr[][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	print(arr);
	return 0;
}


   Output
1 2 3 4 5 6 7 8 9



---
[**1]
https://www.geeksforgeeks.org/dynamically-allocate-2d-array-c/

How to dynamically allocate a 2D array in C?
12 Jan, 2022

   Following are different ways to create a 2D array on the heap (or dynamically allocate a 2D array).
   In the following examples, we have considered 'r' as number of rows, 'c' as number of columns and we
   created a 2D array with r = 3, c = 4 and the following values
  1  2  3  4
  5  6  7  8
  9  10 11 12

   1) Using a single pointer and a 1D array with pointer arithmetic:
   A simple way is to allocate a memory block of size r*c and access its elements using simple pointer
   arithmetic.

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	int r = 3, c = 4;

	int *ptr = malloc((r * c) * sizeof(int));

	/* Putting 1 to 12 in the 1D array in a sequence */
	for (int i = 0; i < r * c; i++)
		ptr[i] = i + 1;

	/* Accessing the array values as if it was a 2D array */
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++)
			printf("%d ", ptr[i * c + j]);
		printf("\n");
	}

	free(ptr);

	return 0;
}


   Output:
1 2 3 4
5 6 7 8
9 10 11 12


   2) Using an array of pointers
   We can create an array of pointers of size r. Note that from C99, C language allows variable sized
   arrays. After creating an array of pointers, we can dynamically allocate memory for every row.

#include <stdio.h>
#include <stdlib.h>

int main() {
	int r = 3, c = 4, i, j, count;

	int *arr[r];
	for (i = 0; i < r; i++)
		arr[i] = (int *)malloc(c * sizeof(int));

	// Note that arr[i][j] is same as *(*(arr+i)+j)
	count = 0;
	for (i = 0; i < r; i++)
		for (j = 0; j < c; j++)
			arr[i][j] = ++count; // Or *(*(arr+i)+j) = ++count

	for (i = 0; i < r; i++)
		for (j = 0; j < c; j++)
			printf("%d ", arr[i][j]);

	/* Code for further processing and free the
	   dynamically allocated memory */

	for (int i = 0; i < r; i++)
		free(arr[i]);

	return 0;
}


   Output:
1 2 3 4 5 6 7 8 9 10 11 12

   3) Using pointer to a pointer
   We can create an array of pointers also dynamically using a double pointer. Once we have an array
   pointers allocated dynamically, we can dynamically allocate memory and for every row like method 2.

#include <stdio.h>
#include <stdlib.h>

int main() {
	int r = 3, c = 4, i, j, count;

	int **arr = (int **)malloc(r * sizeof(int*));
	for (i = 0; i < r; i++)
		arr[i] = (int*)malloc(c * sizeof(int));

	// Note that arr[i][j] is same as *(*(arr+i)+j)
	count = 0;
	for (i = 0; i < r; i++)
		for (j = 0; j < c; j++)
			arr[i][j] = ++count; // OR *(*(arr+i)+j) = ++count

	for (i = 0; i < r; i++)
		for (j = 0; j < c; j++)
			printf("%d ", arr[i][j]);

	/* Code for further processing and free the
	   dynamically allocated memory */

	for (int i = 0; i < r; i++)
		free(arr[i]);

	free(arr);

	return 0;
}


   Output:
1 2 3 4 5 6 7 8 9 10 11 12

   4) Using double pointer and one malloc call

#include<stdio.h>
#include<stdlib.h>

int main() {
	int r=3, c=4, len=0;
	int *ptr, **arr;
	int count = 0,i,j;

	len = sizeof(int *) * r + sizeof(int) * c * r;
	arr = (int **)malloc(len);

	// ptr is now pointing to the first element in of 2D array
	ptr = (int *)(arr + r);

	// for loop to point rows pointer to appropriate location in 2D array
	for(i = 0; i < r; i++)
		arr[i] = (ptr + c * i);

	for (i = 0; i < r; i++)
		for (j = 0; j < c; j++)
			arr[i][j] = ++count; // OR *(*(arr+i)+j) = ++count

	for (i = 0; i < r; i++)
		for (j = 0; j < c; j++)
			printf("%d ", arr[i][j]);

	return 0;
}


   Output:
1 2 3 4 5 6 7 8 9 10 11 12

   5) Using a pointer to Variable Length Array.

   The dimensions of VLA are bound to the type of the variable. Therefore one form a pointer to an array
   with run-time defined shape.
   The pointer has to be dereferenced before subscripting with syntax (*arr)[i][j].

#include <stdio.h>
#include <stdlib.h>

int main() {
	int row = 3, col = 4, i, j, count;

	int (*arr)[row][col] = malloc(sizeof *arr);

	count = 0;
	for (i = 0; i < row; i++)
		for (j = 0; j < col; j++)
			(*arr)[i][j] = ++count;

	for (i = 0; i < row; i++)
		for (j = 0; j < col; j++)
			printf("%d ", (*arr)[i][j]);

	free(arr);

	return 0;
}


   6) Using a pointer to the first row of VLA

   Similar to 5 but allows arr[i][j] syntax.

#include <stdio.h>
#include <stdlib.h>

int main() {
	int row = 3, col = 4, i, j, count;

	int (*arr)[col] = calloc(row, sizeof *arr);

	count = 0;
	for (i = 0; i < row; i++)
		for (j = 0; j < col; j++)
			arr[i][j] = ++count;

	for (i = 0; i < row; i++)
		for (j = 0; j < col; j++)
			printf("%d ", arr[i][j]);

	free(arr);

	return 0;
}




---

