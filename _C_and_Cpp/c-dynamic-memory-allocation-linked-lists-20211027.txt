filename: c_dynamic-memory-allocation-linked-lists_20211027.txt

https://www.cs.dartmouth.edu/~cs50/Lectures/malloc/

Dynamic memory allocation; Linked lists

Goals
     * To understand that malloc and free allocate and de-allocate memory from the heap.
     * To use dynamic memory to build a linked list.


Background
   We'll be working with C code that builds and manipulates linked lists. You learned about linked lists
   in CS10, and may want to review the CS10 linked-list notes and implementation:

Dynamic memory allocation
   C does not have language support for dynamically allocating new 'things'. Instead, the programmer has
   to call a library function called malloc() to allocate a new chunk of memory from the heap segment,
   and later call free() to return that chunk of memory to the heap. The programmer has to remember to
   initialize the chunk of bytes received from malloc() - which otherwise should be assumed to contain
   random data. The programmer has to carefully allocate a large enough chunk to hold the data he/she
   intends to store there, and not to use pointers to write "outside" that chunk of memory. Lots of
   flexibility and power - but as with any great power, you must take great care in using it.

     In Java, you can use new to dynamically create a new object, and delete to discard an object
     created with new, but for the most part the Java compiler and runtime handles object deletion and
     memory recovery automatically - it's called 'garbage collection.'

   There are four related functions you should understand:
     * malloc p = malloc(n) - allocates n bytes of heap memory; the memory contents remain
       uninitialized.
     * calloc p = calloc(count, size) allocates count*size bytes of heap memory and initializes it all
       to zero; this call is appropriate when you want to allocate an array of count items, each of size
       bytes.
     * realloc p = realloc(p, n) - where p is a pointer to heap memory - expands (or shrinks) its
       allocation to n bytes.
     * free free(p) - where p is a pointer to heap memory - releases that portion of heap memory for
       future use.

   Our examples today show how to use malloc to allocate space to store a string, and later, a struct
   holding aggregate types. For an example using calloc and realloc, read about how readlinep()
   works.

Memory leaks and stray pointers
   For every malloc there must be a matching free.
     * If you allocate space but never free it, you've created a memory leak; as the program runs, the
       process memory size will grow and grow, and eventually run out of memory.
     * If you free a pointer you've never allocated - or free the same pointer twice - you may cause the
       heap manager to corrupt its data structures and trigger a segmentation fault at some future time
       - often a seemingly random time.

   Whenever you write malloc, write the corresponding free call; or, document whose responsibility is to
   free that pointer.

   Whenever you call free(p), it's good practice to immediately set p=NULL. Not because you have to - it
   makes no difference to the heap - but because that step will prevent you from accidentally re-using
   that now-defunct pointer p - you'll get a clean segmentation fault instead of unpredictable behavior.

     When the process exits, all its memory is free - the four segments (code, global, stack, and heap)
     disappear.

Coding style - memory allocation
   Avoid sprinking calls to malloc() and free() throughout your code. Instead, think about the kinds of
   things you need to create and destroy, and write type-specific wrapper for each such type. For
   example, if your program manipulates things of type struct listnode, you would write two functions:
    struct listnode *listnode_new(...);
    void listnode_free(struct listnode *node);

   The first function calls malloc(sizeof(struct listnode)) and initializes all of its contents, perhaps
   using parameters passed by the caller. The second calls free(node). Both involve careful
   error-checking code. See example names7.c.

   There are many advantages to this approach:
     * The mainline code is more readable, because it's clear what listnode_new() is doing.
     * The new function acts like a 'constructor' in object-oriented languages and can ensure the newly
       returned memory is initialized, or at least, not random bytes.
     * Code involving malloc can sometimes be tricky, and you isolate that trickiness in one spot and
       focus on getting it right once.
     * Some new types might need multiple malloc calls, as in our linked-list examples names5.c
       names6.c names7.c. All those malloc calls (and corresponding free calls) can be in the
       new/free functions.
     * You can insert debugging output or reference-counting logic, or set debugger breakpoints, in
       these new/free functions and immediately have that feature apply to all occurrences of your
       program's work with this type.

Data structures in C
   C is not an object-oriented language like Java, Python, or C++. It does not provide any language
   features to declare a 'class' or create and manipulate object 'instances' of that class.

   But C does provide two kinds of aggregate data: arrays and structures.

Arrays
   We've seen examples with arrays of characters (aka strings) and arrays of character pointers, and
   even two-dimensional arrays of characters. But one can also define arrays of other types:
        char names[NumStudents][NameLength];
        int ages[NumStudents];
        float grades[NumStudents];

   and so forth.

     Sometimes you need to understand that an array name is, in effect, a pointer to the first spot in
     memory where that array's data lives; thus, ages is of type int* and is a pointer to the first
     entry in the array, but ages[0] is of type int and is the value of that first entry in the array.
     This concept comes up mostly in arrays of characters; names is of type char**, and even names[0]
     is of type char*, and names[0][1] is of type char. In effect, names is an array of strings, and
     names[0] is the first string in the array; like other strings, names[0] is of type char*.

Structs
   C allows you to define an aggregate called a 'struct'; like an object, it has data members. Unlike an
   object, it has no methods (function members).

   Continuing our above example, we could have defined a struct for each student, and then an array of
   structs, as follows:
   struct student {
       char name[NameLength];
       int age;
       float grade;
   };
   struct student students[NumStudents];

   Now we can refer to the first student as student[0], the second student as student[1], and so forth.
   We can refer to the name of the first student as student[0].name and the age of the second student as
   student[1].age.

   In our classtime examples, names5.c, names6.c, and names7.c, we declare a struct listnode
   and use it to build a linked list. There we see a different notation: instead of . to refer to a
   member of a struct, we have to use -> to dereference the pointer and refer to member of the pointee.
   struct student alice;        // a single struct representing alice
   struct student *sp = &alice; // a pointer, initialized to point at alice

   // the following three all do the same thing.
   int age = alice.age;
   int age = sp->age;
   int age = (*sp).age;

Linked lists
   In the examples below we construct a simple linked list comprising nodes that each have a pointer to
   a string and a pointer to the next node. The list includes a dummy head node to simplify list
   management. The variable head is a pointer to that dummy node.
// A structure for each node in linked list
struct listnode {
  char *name;
  struct listnode *next;
};
struct listnode head = {NULL, NULL}; // dummy node at head of empty list

   After adding three nodes, the list might look like this:

Examples
   A prior example names2.c used a two-dimensional array to store a list of names from stdin. Here
   is a version that uses an array of pointers to do the same:
     * names3.c: array of pointers; use of readlinep

   Here, the two-dimensional names array is replaced by a one-dimensional array of string pointers,
   which is more common in C, and which allows the names to be of any length - each array entry points
   to a dynamically allocated memory from the heap, big enough to hold that name.

   We use a new freadlinep function; after the next lecture, I recommend you read about its
   implementation.

   We don't have time in class, but we can extend this code to sort the array using qsort() quicksort:
     * names4.c: sort names; void*; casting

   A linked-list version of the names program:
     * names5.c - revises names3.c to use linked list instead of array

   You should look at two more versions of the names program:
     * names6.c - extends names5.c to keep the list sorted
     * names7.c - extends names6.c to remove duplicates



---
https://www.cs.dartmouth.edu/~cs50/examples/names2.c

/*
 * names2.c - read in a list of names from stdin
 * (read from a file named in argument)
 *
 * usage: names [filename]
 * filename: includes list of names, one per line
 * stdin: used if filename not specified
 * stdout: numbered list of names, one per line
 *
 * CS50
 */

#include <stdio.h>
#include <stdlib.h>
#include "freadline.h"

int main(const int argc, char *argv[]) {
	const int maxNames = 100;  // maximum number of names
	const int maxLength = 50;  // maximum length of a name (minus 2)
	char names[maxNames][maxLength];
	FILE *fp;                  // input file
	int n = 0;                 // number of names read

	// validate arguments and open input file
	if (argc == 1) {
		fp = stdin;
	} else if (argc == 2) {
		fp = fopen(argv[1], "r");
		if (fp == NULL) {
			fprintf(stderr, "%s cannot open file '%s'\n", argv[0], argv[1]);
			exit (2);
		}
	} else {
		fprintf(stderr, "usage: %s [filename]\n", argv[0]);
		exit (1);
	}

	// read the list of names
	for (n = 0; n < maxNames && !feof(fp); ) {
		if (freadline(fp, names[n], maxLength)) {
			n++; // only increment if no error
		}
	}

	fclose(fp);

	printf("%d names\n", n);
	// print the list of names; note each name ends in newline.
	for (int i = 0; i < n; i++) {
		printf("%d: %s", i, names[i]);
	}
}



---
https://www.cs.dartmouth.edu/~cs50/examples/names3.c

/*
 * names3.c - read in a list of names from stdin
 * (array of pointers; use of readlinep)
 * (drop support for command-line filename arguments)
 *
 * usage: names < infile
 * stdin: list of names, one per line
 * stdout: numbered list of names, one per line
 *
 * CS50
 */

#include <stdio.h>
#include <stdlib.h>
#include "readlinep.h"

/* ********************************************************* */
int main() {
	const int maxNames = 100;  // maximum number of names
	char *names[maxNames];     // array of names, each a pointer to string
	int n = 0;                 // number of names read

	// read the list of names
	for (n = 0; n < maxNames && !feof(stdin); ) {
		char *name = readlinep();
		if (name != NULL) {
			names[n] = name;
			n++; // only increment if no error
		}
	}

	printf("%d names\n", n);
	// print the list of names, and free as we go
	for (int i = 0; i < n; i++) {
		printf("%d: %s\n", i, names[i]);
		free(names[i]);
	}
}



---
https://www.cs.dartmouth.edu/~cs50/examples/names4.c

/*
 * names4.c - read in a list of names from stdin
 * (sort names; void*; casting)
 *
 * usage: names < infile
 * stdin: list of names, one per line
 * stdout: sorted and numbered list of names, one per line
 *
 * CS50
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "readlinep.h"

/* string-comparison function usable with qsort() */
int strcmpp(const void* a, const void* b);

/* ********************************************************* */
int main() {
	const int maxNames = 100;  // maximum number of names
	char *names[maxNames];     // array of names, each a pointer to string
	int n = 0;                 // number of names read

	// read the list of names
	for (n = 0; n < maxNames && !feof(stdin); ) {
		char *name = readlinep();
		if (name != NULL) {
			names[n] = name;
			n++; // only increment if no error
		}
	}

	// sort the list with quicksort
	qsort(names, n, sizeof(char*), strcmpp);

	printf("%d names\n", n);
	// print the list of names, and free as we go
	for (int i = 0; i < n; i++) {
		printf("%d: %s\n", i, names[i]);
		free(names[i]);
	}
}

/*
 * strcmpp: like strcmp but args passed as char** instead of char*,
 * compatible with qsort.  Cast each argument as needed.
 * from http://arstechnica.com/civis/viewtopic.php?f=20&t=607813
 */
int strcmpp(const void* a, const void* b) {
	return strcmp(*((char**) a), *((char**) b));
}



---
https://www.cs.dartmouth.edu/~cs50/examples/names5.c

/*
 * names5.c - read in a list of names from stdin
 * (linked list version of names3.c)
 *
 * usage: names < infile
 * stdin: list of names, one per line
 * stdout: list of names, one per line
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "readlinep.h"

// A structure for each node in linked list
struct listnode {
	char *name;
	struct listnode *next;
};

bool list_insert(struct listnode *headp, char *name);
struct listnode *listnode_new(char *name);

/***********************************************************/
int main() {
	struct listnode head = {NULL, NULL}; // dummy node at head of empty list
	int n = 0;                           // number of names read

	// read the list of names - any number of names!
	while (!feof(stdin)) {
		char *name = readlinep();
		if (name != NULL) {
			if (list_insert(&head, name)) {
				n++; // only increment if no error
			}
		}
	}

	printf("%d names:\n", n);
	// print the list of names
	for (struct listnode *node = head.next; node != NULL; node = node->next)
		printf("%s\n", node->name);

	// here we are lazy and do not free the list.

	return 0;
}

/* *************************************************
 * list_insert: insert the given name into the list.
 * Return true if success, false if failure.
 */
bool list_insert(struct listnode *headp, char *name) {
	struct listnode *node = listnode_new(name);

	if (headp == NULL || node == NULL) {
		return false;
	} else {
		// insert the new node at head of the list
		node->next = headp->next;
		headp->next = node;
	}
	return true;
}


/* *************************************************
 * listnode_new: create a new node to store the given name.
 * Returns pointer to new node, if successful, else returns NULL.
 * The pointer 'name' is assumed to be malloc storage, and is not copied.
 * Caller is responsible for later deleting 'name' and node.
 */
struct listnode *listnode_new(char *name) {
	// allocate memory for the new node
	struct listnode *node = malloc(sizeof(struct listnode));

	if (node == NULL) {
		return NULL;
	} else {
		// initialize node contents
		node->next = NULL;
		node->name = name;
	}

	return node;
}


---
https://www.cs.dartmouth.edu/~cs50/examples/names6.c

/*
 * names6.c - read in a list of names from stdin
 * (sorted linked list version of names5.c)
 *
 * usage: names < infile
 * stdin: list of names, one per line
 * stdout: sorted list of names, one per line
 *
 * CS50
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "readlinep.h"

// A structure for each node in linked list
struct listnode {
	char *name;
	struct listnode *next;
};

bool list_insert(struct listnode *headp, char *name);
struct listnode *listnode_new(char *name);

/* ********************************************************* */
int main() {
	struct listnode head = {NULL, NULL}; // dummy node at head of empty list
	int n = 0;                           // number of names read

	// read the list of names - any number of names!
	while (!feof(stdin)) {
		char *name = readlinep();
		if (name != NULL) {
			if (list_insert(&head, name)) {
				n++; // only increment if no error
			}
		}
	}

	printf("%d names:\n", n);
	// print the list of names
	for (struct listnode *node = head.next; node != NULL; node = node->next)
		printf("%s\n", node->name);

	// here we are lazy and do not free the list.

	return 0;
}

/* *************************************************
 * list_insert: insert the given name into the list, in alphabetical order.
 * Return true if success, false if failure.
 */
bool list_insert(struct listnode *headp, char *name) {
	struct listnode *node = listnode_new(name);

	if (headp == NULL || node == NULL) {
		return false;
	} else {
		// insert the new node at alphabetical place in list
		struct listnode *place = headp;
		// slide along the list to the right place
		while (place->next != NULL && strcmp(name, place->next->name) > 0) {
			place = place->next;
		}
		// On exit, place points at last item on the list, or
		// place points at a middle item, but new name comes before place->next.
		// Thus, we want to insert 'node' after place and before place->next.
		node->next = place->next;
		place->next = node;
	}
	return true;
}


/* *************************************************
 * listnode_new: create a new node to store the given name.
 * Returns pointer to new node, if successful, else returns NULL.
 * The pointer 'name' is assumed to be malloc storage, and is not copied.
 * Caller is responsibe for later deleting 'name'.
 * Caller is responsible for later calling listnode_delete(node).
 */
struct listnode *listnode_new(char *name) {
	// allocate memory for the new node
	struct listnode *node = malloc(sizeof(struct listnode));

	if (node == NULL) {
		return NULL;
	} else {
		// initialize node contents
		node->next = NULL;
		node->name = name;
	}

	return node;
}


---
https://www.cs.dartmouth.edu/~cs50/examples/names7.c

/*
 * names7.c - read in a list of names from stdin
 * (remove duplicates)
 *
 * usage: names < infile
 * stdin: list of names, one per line
 * stdout: sorted list of names, one per line
 *
 * CS50
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "readlinep.h"

// A structure for each node in linked list
struct listnode {
	char *name;
	struct listnode *next;
};

bool list_insert(struct listnode *headp, char *name);
struct listnode *listnode_new(char *name);
void listnode_delete(struct listnode *node);

/* ********************************************************* */
int main() {
	struct listnode head = {NULL, NULL}; // dummy node at head of empty list
	int n = 0;                           // number of names read

	// read the list of names - any number of names!
	while (!feof(stdin)) {
		char *name = readlinep();
		if (name != NULL) {
			if (list_insert(&head, name)) {
				n++; // only increment if no error
			}
		}
	}

	// remove duplicates from list
	for (struct listnode *node = head.next; node != NULL; ) {
		if (node->next != NULL && strcmp(node->name, node->next->name) == 0) {
			// duplicate detected; remove node->next from list
			struct listnode *duplicate = node->next;
			node->next = node->next->next;
			free(duplicate->name);
			listnode_delete(duplicate);
			n--;
		} else {
			// only advance when we do not find a duplicate
			node = node->next;
		}
	}

	printf("%d names:\n", n);
	// print the list of names
	for (struct listnode *node = head.next; node != NULL; node = node->next)
		printf("%s\n", node->name);

	// here we are lazy and do not free the list.

	return 0;
}

/* *************************************************
 * list_insert: insert the given name into the list, in alphabetical order.
 * Return true if success, false if failure.
 */
bool list_insert(struct listnode *headp, char *name) {
	struct listnode *node = listnode_new(name);

	if (headp == NULL || node == NULL) {
		return false;
	} else {
		// insert the new node at alphabetical place in list
		struct listnode *place = headp;
		// slide along the list to the right place
		while (place->next != NULL && strcmp(name, place->next->name) > 0) {
			place = place->next;
		}
		// On exit, place points at last item on the list, or
		// place points at a middle item, but new name comes before place->next.
		// Thus, we want to insert 'node' after place and before place->next.
		node->next = place->next;
		place->next = node;
	}
	return true;
}


/* *************************************************
 * listnode_new: create a new node to store the given name.
 * Returns pointer to new node, if successful, else returns NULL.
 * The pointer 'name' is assumed to be malloc storage, and is not copied.
 * Caller is responsibe for later deleting 'name'.
 * Caller is responsible for later calling listnode_delete(node).
 */
struct listnode *listnode_new(char *name) {
	// allocate memory for the new node
	struct listnode *node = malloc(sizeof(struct listnode));

	if (node == NULL) {
		return NULL;
	} else {
		// initialize node contents
		node->next = NULL;
		node->name = name;
	}

	return node;
}

/* *************************************************
 * listnode_delete: delete memory for the given node.
 */
void listnode_delete(struct listnode *node) {
	if (node != NULL) {
		if (node->name != NULL)
			free(node->name);
		free(node);
	}
}



---
https://www.cs.dartmouth.edu/~cs50/examples/readlinep.html

readlinep - reading lines of arbitrary length

   This Lecture extra is not something we have time to cover in lecture, but is important to
   read.

Improving readline
   Earlier we developed a simple readline() function (and its companion freadline() to read
   from a file), which in readline.h has prototype
bool readline(char *buf, const int len);

   This would read from stdin into buf until it encountered a newline, or the buffer (of
   length len) was full. In the latter case it would return false and discard the whole line
   of input.

   To be more accommodating, we developed readlinep (and its companion freadlinep). In
   readlinep.h we see the prototypes:
extern char *freadlinep(FILE *fp);
static inline char *readlinep(void) { return freadlinep(stdin); }

   Notice that readlinep is an "inline" function, which means that it is compiled directly
   into the code wherever it is called, rather than being a true function. (That's why it has
   to be declared static: because every file that includes readlinep.h needs its only private
   'copy' of readlinep.) It's a simple wrapper that just calls freadline(stdin).

freadlinep
   Notice that freadlinep returns a string - and yet it takes no pointer to a buffer. Instead,
   it allocates heap memory and returns a pointer to the new string; it returns NULL on error.
   The caller is later responsible to free that pointer.

	 One other difference between readline and readlinep: the former includes the newline and
	 the latter removes it. The difference is a historical accident and, ideally, these two
	 functions would be reconciled and behave the same way.

   The core of the freadlinep code is below. Notice:
	 * we start off by allocating a character array from the heap, using calloc, hoping it is
	   big enough to hold most input lines.
	 * we then loop, getting characters from the input file, until we reach EOF or a newline
	   character.
	 * we insert each new character into buf[pos], bumping the index pos each time through the
	   loop.
	 * but we carefully monitor pos and its relation to the current length of the buffer; if
	   the new character would cause us to overflow the buffer, we ask realloc() to grow the
	   buffer by one more byte.
	 * we return NULL if there is any memory allocation error, or if we reach EOF.
	 * otherwise we return a pointer to the buffer.

	// allocate buffer big enough for "typical" words/lines
	int len = 81;
	char *buf = calloc(len, sizeof(char));
	if (buf == NULL) {
		return NULL;        // out of memory
	}

	// Read characters from file until newline or EOF,
	// expanding the buffer when needed to hold more.
	int pos;
	char c;
	for (pos = 0; (c = fgetc(fp)) != EOF && (c != '\n'); pos++) {
		// We need to save buf[pos+1] for the terminating null
		// and buf[len-1] is the last usable slot,
		// so if pos+1 is past that slot, we need to grow the buffer.
		if (pos+1 > len-1) {
			char *newbuf = realloc(buf, ++len);
			if (newbuf == NULL) {
				free(buf);
				return NULL;		// out of memory
			} else {
				buf = newbuf;
			}
		}
		buf[pos] = c;
	}

	if (pos == 0 && c == EOF) {
		// no characters were read and we reached EOF
		free(buf);
		return NULL;
	} else {
		// pos characters were read into buf[0]..buf[pos-1].
		buf[pos] = '\0'; // terminate string
		return buf;
	}

	 It may seem inefficient to grow the buffer by only one byte each time. We trust realloc
	 to be smart, moving the buffer to a new location (by copying it) that leaves room for
	 growth, rather than incurring a copy of the whole string every time we call realloc.
	 It's far easier for us to leave those complexities to realloc than to implement them at
	 this layer.



---

