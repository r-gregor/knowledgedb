filename: c_enums-multif_20230324.txt
https://www.geeksforgeeks.org/enumeration-enum-c/

Enumeration (or enum) in C
24 May, 2022

   Enumeration (or enum) is a user defined data type in C. It is mainly used to assign names to integral
   constants, the names make a program easy to read and maintain.

   Hereby mistake, the state of wed is 2, it should be 3. Please refer to the same example below for a
   better understanding.

enum State {Working = 1, Failed = 0};

   The keyword 'enum' is used to declare new enumeration types in C and C++. Following is an example of
   enum declaration.

// The name of enumeration is "flag" and the constant
// are the values of the flag. By default, the values
// of the constants are as follows:
// constant1 = 0, constant2 = 1, constant3 = 2 and
// so on.
enum flag{constant1, constant2, constant3, ....... };

   Variables of type enum can also be defined. They can be defined in two ways:

// In both of the below cases, "day" is
// defined as the variable of type week.

enum week{Mon, Tue, Wed};
enum week day;

// Or

enum week{Mon, Tue, Wed}day;


// An example program to demonstrate working
// of enum in C
#include<stdio.h>

enum week{Mon, Tue, Wed, Thur, Fri, Sat, Sun};

int main() {
	enum week day;
	day = Wed;
	printf("%d",day);
	return 0;
}


   Output:

2

   In the above example, we declared "day" as the variable and the value of "Wed" is allocated to day,
   which is 2. So as a result, 2 is printed.
   Another example of enumeration is:

// Another example program to demonstrate working
// of enum in C
#include<stdio.h>

enum year{Jan, Feb, Mar, Apr, May, Jun, Jul,
 		 Aug, Sep, Oct, Nov, Dec};

int main() {
	int i;
	for (i=Jan; i<=Dec; i++)
		printf("%d ", i);

	return 0;
}


   Output:

0 1 2 3 4 5 6 7 8 9 10 11

   In this example, the for loop will run from i = 0 to i = 11, as initially the value of i is Jan which
   is 0 and the value of Dec is 11.
   Interesting facts about initialization of enum.

1. Two enum names can have same value. For example, in the following C program both 'Failed' and
   'Freezed' have same value 0.

#include <stdio.h>
enum State {Working = 1, Failed = 0, Freezed = 0};

int main() {
	printf("%d, %d, %d", Working, Failed, Freezed);
	return 0;
}


   Output:

1, 0, 0

2. If we do not explicitly assign values to enum names, the compiler by default assigns values
   starting from 0. For example, in the following C program, sunday gets value 0, monday gets 1, and so
   on.

#include <stdio.h>
enum day {sunday, monday, tuesday, wednesday, thursday, friday, saturday};

int main() {
	enum day d = thursday;
	printf("The day number stored in d is %d", d);
	return 0;
}


   Output:

The day number stored in d is 4

3. We can assign values to some name in any order. All unassigned names get value as value of
   previous name plus one.

#include <stdio.h>
enum day {sunday = 1, monday, tuesday = 5,
 		 wednesday, thursday = 10, friday, saturday};

int main() {
	printf("%d %d %d %d %d %d %d", sunday, monday, tuesday,
			wednesday, thursday, friday, saturday);
	return 0;
}


   Output:

1 2 5 6 10 11 12

4. The value assigned to enum names must be some integral constant, i.e., the value must be in range
   from minimum possible integer value to maximum possible integer value.
   5. All enum constants must be unique in their scope. For example, the following program fails in
   compilation.

enum state  {working, failed};
enum result {failed, passed};

int main()  { return 0; }


   Output:

Compile Error: 'failed' has a previous declaration as 'state failed'

   Exercise:
   Predict the output of following C programs
   Program 1:

#include <stdio.h>
enum day {sunday = 1, tuesday, wednesday, thursday, friday, saturday};

int main() {
	enum day d = thursday;
	printf("The day number stored in d is %d", d);
	return 0;
}


   Program 2:

#include <stdio.h>
enum State {WORKING = 0, FAILED, FREEZED};
enum State currState = 2;

enum State FindState() {
	return currState;
}

int main() {
	(FindState() == WORKING)? printf("WORKING"): printf("NOT WORKING");
	return 0;
}

Enum vs Macro
   We can also use macros to define names constants. For example we can define 'Working' and 'Failed'
   using following macro.

#define Working 0
#define Failed 1
#define Freezed 2

   There are multiple advantages of using enum over macro when many related named constants have
   integral values.
   a) Enums follow scope rules.
   b) Enum variables are automatically assigned values. Following is simpler

   enum state  {Working, Failed, Freezed};

   Please write comments if you find anything incorrect, or you want to share more information about the
   topic discussed above
   Introduction part of this article is contributed by Piyush Vashistha. If you like GeeksforGeeks and
   would like to contribute, you can also write an article using write.geeksforgeeks.org or mail
   your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main
   page and help other Geeks.



---
https://www.programiz.com/c-programming/c-enumeration

C enums

   In this tutorial, you will learn about enum (enumeration) in C programming with the help of examples.

   In C programming, an enumeration type (also called enum) is a data type that consists of integral
   constants. To define enums, the enum keyword is used.
enum flag {const1, const2, ..., constN};

   By default, const1 is 0, const2 is 1 and so on. You can change default values of enum elements during
   declaration (if necessary).
// Changing default values of enum constants
enum suit {
	club = 0,
	diamonds = 10,
	hearts = 20,
	spades = 3,
};
	 ________________________________________________________________________________________________

Enumerated Type Declaration
   When you define an enum type, the blueprint for the variable is created. Here's how you can create
   variables of enum types.
enum boolean {false, true};
enum boolean check; // declaring an enum variable

   Here, a variable check of the type enum boolean is created.

   You can also declare enum variables like this.
enum boolean {false, true} check;

   Here, the value of false is equal to 0 and the value of true is equal to 1.
	 ________________________________________________________________________________________________

Example: Enumeration Type

#include <stdio.h>

enum week {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};

int main() {
	// creating today variable of enum week type
	enum week today;
	today = Wednesday;
	printf("Day %d",today+1);
	return 0;
}

   Output
Day 4
	 ________________________________________________________________________________________________

Why enums are used?
   An enum variable can take only one value. Here is an example to demonstrate it,
#include <stdio.h>

enum suit {
	club = 0,
	diamonds = 10,
	hearts = 20,
	spades = 3
} card;

int main() {
	card = club;
		printf("Size of enum variable = %d bytes", sizeof(card));
		return 0;
}

   Output
Size of enum variable = 4 bytes

   Here, we are getting 4 because the size of int is 4 bytes.

   This makes enum a good choice to work with flags.
	 ________________________________________________________________________________________________

How to use enums for flags?

   Let us take an example,
enum designFlags {
		ITALICS = 1,
		BOLD = 2,
		UNDERLINE = 4
} button;

   Suppose you are designing a button for Windows application. You can set flags ITALICS, BOLD and
   UNDERLINE to work with text.

   There is a reason why all the integral constants are a power of 2 in the above pseudocode.
// In binary

ITALICS = 00000001
BOLD = 00000010
UNDERLINE = 00000100

   Since the integral constants are a power of 2, you can combine two or more flags at once without
   overlapping using bitwise OR | operator. This allows you to choose two or more flags at once.
   For example,

#include <stdio.h>

enum designFlags {
	BOLD = 1,
	ITALICS = 2,
	UNDERLINE = 4
};

int main() {
	int myDesign = BOLD | UNDERLINE;

	//    00000001
	//  | 00000100
	//  ___________
	//    00000101

	printf("%d", myDesign);

	return 0;
}

   Output
5

   When the output is 5, you always know that bold and underline is used.

   Also, you can add flags according to your requirements.
if (myDesign & ITALICS) {
	// code for italics
}

   Here, we have added italics to our design. Note, only code for italics is written inside the if
   statement.

   You can accomplish almost anything in C programming without using enumerations. However, they can be
   pretty handy in certain situations.


---
https://www.w3schools.com/c/c_enums.php

C Enums

   An enum is a special type that represents a group of constants (unchangeable values).

   To create an enum, use the enum keyword, followed by the name of the enum, and separate the enum
   items with a comma:

enum Level {
	 LOW,
	 MEDIUM,
	 HIGH
};

   Note that the last item does not need a comma.

   It is not required to use uppercase, but often considered as good practice.

   Enum is short for "enumerations", which means "specifically listed".

   To access the enum, you must create a variable of it.

   Inside the main() method, specify the enum keyword, followed by the name of the enum (Level) and then
   the name of the enum variable (myVar in this example):
   enum Level myVar;

   Now that you have created an enum variable (myVar), you can assign a value to it.

   The assigned value must be one of the items inside the enum (LOW, MEDIUM or HIGH):
   enum Level myVar = MEDIUM;

   By default, the first item (LOW) has the value 0, the second (MEDIUM) has the value 1, etc.

   If you now try to print myVar, it will output 1, which represents MEDIUM:

int main() {
	// Create an enum variable and assign a value to it
	enum Level myVar = MEDIUM;
	// Print the enum variable
	printf("%d", myVar);
	return 0;
}
	 ________________________________________________________________________________________________

Change Values
   As you know, the first item of an enum has the value 0. The second has the value 1, and so on.

   To make more sense of the values, you can easily change them:

enum Level {
	LOW = 25,
	MEDIUM = 50,
	HIGH = 75
};

printf("%d", myVar); // Now outputs 50

   Note that if you assign a value to one specific item, the next items will update their numbers
   accordingly:

enum Level {
	LOW = 5,
	MEDIUM, // Now 6
	HIGH // Now 7
};

	 ________________________________________________________________________________________________

Enum in a Switch Statement
   Enums are often used in switch statements to check for corresponding values:

enum Level {
	LOW = 1,
	MEDIUM,
	HIGH
};

int main() {
	enum Level myVar = MEDIUM;
	switch (myVar) {
	case 1:
		printf("Low Level");
		break;
	case 2:
		printf("Medium level");
		break;
	case 3:
		printf("High level");
		break;
	}
	return 0;
}

Why And When To Use Enums?
   Enums are used to give names to constants, which makes the code easier to read and maintain.

   Use enums when you have values that you know aren't going to change, like month days, days, colors,
   deck of cards, etc.


---
https://www.javatpoint.com/enum-in-c

Enum in C

   The enum in C is also known as the enumerated type. It is a user-defined data type that consists of
   integer values, and it provides meaningful names to these values. The use of enum in C makes the
   program easy to understand and maintain. The enum is defined by using the enum keyword.

   The following is the way to define the enum in C:

enum flag{integer_const1, integer_const2,.....integter_const

   In the above declaration, we define the enum named as flag containing 'N' integer constants. The
   default value of integer_const1 is 0, integer_const2 is 1, and so on. We can also change the default
   value of the integer constants at the time of the declaration.

   For example:

enum fruits{mango, apple, strawberry, papaya};

   The default value of mango is 0, apple is 1, strawberry is 2, and papaya is 3. If we want to change
   these default values, then we can do as given below:

enum fruits{
	mango=2,
	apple=1,
	strawberry=5,
	papaya=7,
};

Enumerated type declaration
   As we know that in C language, we need to declare the variable of a pre-defined type such as int,
   float, char, etc. Similarly, we can declare the variable of a user-defined data type, such as enum.
   Let's see how we can declare the variable of an enum type.

   Suppose we create the enum of type status as shown below:
enum status{false,true};

   Now, we create the variable of status type:
enum status s; // creating a variable of the status type.

   In the above statement, we have declared the 's' variable of type status.
   To create a variable, the above two statements can be written as:
enum status{false,true} s;

   In this case, the default value of false will be equal to 0, and the value of true will be equal to
   1.

   Let's create a simple program of enum.

#include <stdio.h>
enum weekdays{Sunday=1, Monday, Tuesday, Wednesday, Thursda
int main() {
	enum weekdays w; // variable declaration of weekdays type
	w=Monday; // assigning value of Monday to w.
	printf("The value of w is %d",w);
	return 0;
}

   In the above code, we create an enum type named as weekdays, and it contains the name of all the
   seven days. We have assigned 1 value to the Sunday, and all other names will be given a value as the
   previous value plus one.

   Output
The value of w is 2

   Let's demonstrate another example to understand the enum more clearly.

#include <stdio.h>
enum months{jan=1, feb, march, april, may, june, july, august, september, october, november. december};

int main() {
	// printing the values of months
	for(int i=jan;i<=december;i++) {
		printf("%d, ",i);
	}

	return 0;
}

   In the above code, we have created a type of enum named as months which consists of all the names of
   months. We have assigned a '1' value, and all the other months will be given a value as the previous
   one plus one. Inside the main() method, we have defined a for loop in which we initialize the 'i'
   variable by jan, and this loop will iterate till December.

   Output
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,

Why do we use enum?
   The enum is used when we want our variable to have only a set of values. For example, we create a
   direction variable. As we know that four directions exist (North, South, East, West), so this
   direction variable will have four possible values. But the variable can hold only one value at a
   time. If we try to provide some different value to this variable, then it will throw the compilation
   error.

   The enum is also used in a switch case statement in which we pass the enum variable in a switch
   parenthesis. It ensures that the value of the case block should be defined in an enum.

   Let's see how we can use an enum in a switch case statement.

#include <stdio.h>
enum days{sunday=1, monday, tuesday, wednesday, thursday, friday, saturday};

int main() {
	enum days d;
	d=monday;
	switch(d) {
		case sunday:
			printf("Today is sunday\n");
			break;
		case monday:
			printf("Today is monday\n");
			break;
		case tuesday:
			printf("Today is tuesday\n");
			break;
		case wednesday:
			printf("Today is wednesday\n");
			break;
		case thursday:
			printf("Today is thursday\n");
			break;
		case friday:
			printf("Today is friday\n");
			break;
		case saturday:
			printf("Today is saturday\n");
			break;
	}

	return 0;
}

   Output
Today is monday

   Some important points related to enum
	 * The enum names available in an enum type can have the same value. Let's look at the example.

#include <stdio.h>

int main(void) {
	enum fruits{mango=1, strawberry=0, apple=1};
	printf("The value of mango is %d", mango);
	printf("\nThe value of apple is %d", apple);
	return 0;
}

   Output
The value of mango is 1
The value of apple is 1


	 * If we do not provide any value to the enum names, then the compiler will automatically assign the
	   default values to the enum names starting from 0.
	 * We can also provide the values to the enum name in any order, and the unassigned names will get
	   the default value as the previous one plus one.
	 * The values assigned to the enum names must be integral constant, i.e., it should not be of other
	   types such string, float, etc.
	 * All the enum names must be unique in their scope, i.e., if we define two enum having same scope,
	   then these two enums should have different enum names otherwise compiler will throw an error.

   Let's understand this scenario through an example.

#include <stdio.h>
enum status{success, fail};
enum boolen{fail,pass};
int main(void) {
	
	printf("The value of success is %d", success);
	return 0;
}

   Output
main.c.3:13 error: redefinition of enumerator 'fail'
enum boolean{fail,pass};
             ^

main.c.2:22 error: previous definition is here
enum status{success, fail};
                     ^
1 error generated.


	 * In enumeration, we can define an enumerated data type without the name also.

#include <stdio.h>

enum {success, fail} status;

int main(void) {
	status=success;
	printf("The value of status is %d", status);
	return 0;
}

   Output
The value of status is 0

Enum vs. Macro in C
	 * Macro can also be used to define the name constants, but in case of an enum, all the name
	   constants can be grouped together in a single statement.
	   For example,
	   # define pass 0;
	   # define success 1;
	   The above two statements can be written in a single statement by using the enum type.
	   enum status{pass, success};
	 * The enum type follows the scope rules while macro does not follow the scope rules.
	 * In Enum, if we do not assign the values to the enum names, then the compiler will automatically
	   assign the default value to the enum names. But, in the case of macro, the values need to be
	   explicitly assigned.
	 * The type of enum in C is an integer, but the type of macro can be of any type.



---

