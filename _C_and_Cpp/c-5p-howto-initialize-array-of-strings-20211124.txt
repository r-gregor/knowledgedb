filename: c_5p_howto_initialize-array-of-strings_20211124.txt
https://stackoverflow.com/questions/21023605/initialize-array-of-strings

   What is the right way to initialize char** ? I get coverity error - Uninitialized pointer read
   (UNINIT) when trying:
char **values = NULL;

   or

char **values = { NULL };

***
   This example program illustrates initialization of an array of C strings.
<code>
#include <stdio.h>

const char * array[] = {
	"First entry",
	"Second entry",
	"Third entry",
};

#define n_array (sizeof (array) / sizeof (const char *))

int main () {
	int i;

	for (i = 0; i < n_array; i++) {
		printf ("%d: %s\n", i, array[i]);
	}
	return 0;
}
</code>

   It prints out the following:
0: First entry
1: Second entry
2: Third entry

***
	 * Hi, it works! But i have a question, why i have to use #define n_array here? I have tried with:
	   int n_array, and my app crashes, i'm new to C and dont understand this behavior - #define instead
	   of simple variable int. Thanks.

***
	 * Using #define is just a question of style; personally I wouldn't have done it. Within the
	   main function you could easily define another int variable and assign it to sizeof (array) /
	   sizeof (const char *).

***
   Its fine to just do char **strings;, char **strings = NULL, or char **strings = {NULL}

   but to initialize it you'd have to use malloc:
<code>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int main(){

	// allocate space for 5 pointers to strings
	char **strings = (char**)malloc(5*sizeof(char*));

	int i = 0;

	//allocate space for each string
	// here allocate 50 bytes, which is more than enough for the strings
	for(i = 0; i < 5; i++) {
		printf("%d\n", i);
		strings[i] = (char*)malloc(50*sizeof(char));
	}

	//assign them all something
	sprintf(strings[0], "bird goes tweet");
	sprintf(strings[1], "mouse goes squeak");
	sprintf(strings[2], "cow goes moo");
	sprintf(strings[3], "frog goes croak");
	sprintf(strings[4], "what does the fox say?");

	// Print it out
	for(i = 0; i < 5; i++){
		printf("Line #%d(length: %lu): %s\n", i, strlen(strings[i]),strings[i]);
	}

	//Free each string
	for(i = 0; i < 5; i++){
		free(strings[i]);
	}
	
	//finally release the first string
	free(strings);
	return 0;
}
</code>

***
   There is no right way, but you can initialize an array of literals:
char *values[] = {"a", "b", "c"};

   or you can allocate each and initialize it:
char **values = malloc(sizeof(char*) * s);
for(...) {
	values[i] = malloc(sizeof(char) * l);

	//or
	values[i] = "hello";
}



---

