filename: c_example-of-client-server-program-using-sockets-and-tcp_20221011.txt
https://www.programminglogic.com/example-of-client-server-program-in-c-using-sockets-and-tcp/

Example of Client-Server Program in C (Using Sockets and TCP)
April 22, 2014

   Below you'll find an example of a very simple client-server program in C. Basically the client
   connects to the server, the server sends the message "Hello World", and the client prints the
   received message.

   Keep in mind that I am configuring the settings manually. If you want your code to be IPV4-IPV6
   agnostic, IP agnostic and portable to different plataforms you can use the getaddrinfo() function, as
   explained [http://www.beej.us/guide/bgnet/output/html/singlepage/bgnet.html#getaddrinfo]in this tutorial.

   Second, I am not doing error checking on most function calls. You should implement those checks if
   you are going to use the code for a real project.

   Third, if you want more details about the functions or their arguments please check the man page of
   each one.

   Finally, to test the code you just need to run the server on a terminal and then run the client on a
   different terminal (or run the server as a background process and then run the client on the same
   terminal).

Server Code

/****************** SERVER CODE ****************/

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

int main(){
	int welcomeSocket, newSocket;
	char buffer[1024];
	struct sockaddr_in serverAddr;
	struct sockaddr_storage serverStorage;
	socklen_t addr_size;

	/*---- Create the socket. The three arguments are: ----*/
	/* 1) Internet domain 2) Stream socket 3) Default protocol (TCP in this case) */
	welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);

	/*---- Configure settings of the server address struct ----*/
	/* Address family = Internet */
	serverAddr.sin_family = AF_INET;
	/* Set port number, using htons function to use proper byte order */
	serverAddr.sin_port = htons(7891);
	/* Set IP address to localhost */
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	/* Set all bits of the padding field to 0 */
	memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

	/*---- Bind the address struct to the socket ----*/
	bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

	/*---- Listen on the socket, with 5 max connection requests queued ----*/
	if(listen(welcomeSocket,5)==0)
		printf("Listening\n");
	else
		printf("Error\n");

	/*---- Accept call creates a new socket for the incoming connection ----*/
	addr_size = sizeof serverStorage;
	newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);

	/*---- Send message to the socket of the incoming connection ----*/
	strcpy(buffer,"Hello World\n");
	send(newSocket,buffer,13,0);

	return 0;
}

Client Code

/****************** CLIENT CODE ****************/

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

int main(){
	int clientSocket;
	char buffer[1024];
	struct sockaddr_in serverAddr;
	socklen_t addr_size;

	/*---- Create the socket. The three arguments are: ----*/
	/* 1) Internet domain 2) Stream socket 3) Default protocol (TCP in this case) */
	clientSocket = socket(PF_INET, SOCK_STREAM, 0);

	/*---- Configure settings of the server address struct ----*/
	/* Address family = Internet */
	serverAddr.sin_family = AF_INET;
	/* Set port number, using htons function to use proper byte order */
	serverAddr.sin_port = htons(7891);
	/* Set IP address to localhost */
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	/* Set all bits of the padding field to 0 */
	memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

	/*---- Connect the socket to the server using the address struct ----*/
	addr_size = sizeof serverAddr;
	connect(clientSocket, (struct sockaddr *) &serverAddr, addr_size);

	/*---- Read the message from the server into the buffer ----*/
	recv(clientSocket, buffer, 1024, 0);

	/*---- Print the received message ----*/
	printf("Data received: %s",buffer);

	return 0;
}

   You might also like: [**1]Sockets Programming in C Using UDP Datagrams



---
[**1]
https://www.programminglogic.com/sockets-programming-in-c-using-udp-datagrams/

Sockets Programming in C Using UDP Datagrams
April 25, 2014

   Below you'll find the code of a simple server-client program in C using UDP sockets for the
   transmission. Basically the client sends a message to the server, the server converts the message to
   uppercase and returns it to the client.

   sockets-programming-c

   If you want to see a simpler program first check prevous  client-server program that only sends a
   "Hello World" message. The functions and structs are better explained there.

Server Code

/************* UDP SERVER CODE *******************/

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>

int main(){
	int udpSocket, nBytes;
	char buffer[1024];
	struct sockaddr_in serverAddr, clientAddr;
	struct sockaddr_storage serverStorage;
	socklen_t addr_size, client_addr_size;
	int i;

	/*Create UDP socket*/
	udpSocket = socket(PF_INET, SOCK_DGRAM, 0);

	/*Configure settings in address struct*/
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(7891);
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

	/*Bind socket with address struct*/
	bind(udpSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

	/*Initialize size variable to be used later on*/
	addr_size = sizeof serverStorage;

	while(1){
		/* Try to receive any incoming UDP datagram. Address and port of
		   requesting client will be stored on serverStorage variable */
		nBytes = recvfrom(udpSocket,buffer,1024,0,(struct sockaddr *)&serverStorage, &addr_size);

		/*Convert message received to uppercase*/
		for(i=0;i<nBytes-1;i++)
			buffer[i] = toupper(buffer[i]);

		/*Send uppercase message back to client, using serverStorage as the address*/
		sendto(udpSocket,buffer,nBytes,0,(struct sockaddr *)&serverStorage,addr_size);
	}

	return 0;
}

Client Code

/************* UDP CLIENT CODE *******************/

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

int main(){
	int clientSocket, portNum, nBytes;
	char buffer[1024];
	struct sockaddr_in serverAddr;
	socklen_t addr_size;

	/*Create UDP socket*/
	clientSocket = socket(PF_INET, SOCK_DGRAM, 0);

	/*Configure settings in address struct*/
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(7891);
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

	/*Initialize size variable to be used later on*/
	addr_size = sizeof serverAddr;

	while(1){
		printf("Type a sentence to send to server:\n");
		fgets(buffer,1024,stdin);
		printf("You typed: %s",buffer);

		nBytes = strlen(buffer) + 1;

		/*Send message to server*/
		sendto(clientSocket,buffer,nBytes,0,(struct sockaddr *)&serverAddr,addr_size);

		/*Receive message from server*/
		nBytes = recvfrom(clientSocket,buffer,1024,0,NULL, NULL);

		printf("Received from server: %s\n",buffer);

	}

	return 0;
}



---

