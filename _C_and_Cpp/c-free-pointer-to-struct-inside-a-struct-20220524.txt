filename: c_free-pointer-to-struct-inside-a-struct_20220524.txt
https://localcoder.org/free-pointer-to-struct-inside-a-struct

Free() pointer to Struct, inside a Struct

Solution 1:
   The free function takes a void* as parameter, so that cast doesn't count. You just need to give a
   pointer to the memory location you want to free:
free(data->loc);

Solution 2:
   You cannot free loc after you have freed the observer, but before you freed it loc is a fair game:

void free_obs_list_node(void *data) {
	observer **p = data;
	free((*p)->loc);
	free(*p);
	*p = NULL;
}

   Of course this assumes that you are passing a pointer to a pointer to observer inside the void* data.
   Since the only valid reason to pass a pointer to pointer into a function that frees the pointed to
   pointer is to have the pointer set to NULL, I added the last line to null out *p.

   It is not clear, however, why you pass void * instead of observer **.

Solution 3:
   You should make sure data is not null in you code, or you can easily got a segment fault when
   accessing a null pointer.

   I do not understand why you use a double pointer, it makes code much more complex and bug prone. Code
   below should work:

void free_obs_list_node(void *data) {
	observer **ob = (observer **)data;  // do not understand why you use a double pointer, it makes code much
	                                    // more complex and bug prone
	if(NULL == ob || NULL == *ob) {
		return;
	}

	if(NULL != (*ob)->loc) {
		free((*ob)->loc);
	}

	free(*ob);
}



---

