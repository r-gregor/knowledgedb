filename: c_typedef-to-alias-function-types_20221214.txt
https://www.quora.com/What-is-something-you-know-about-C-that-most-people-dont-know-about-C/answer/Joe-Zbiciak

Typedef to alias function types

Someone taught me about this one the other day: You can use typedef to alias function types. Not pointers-to
function, but rather function types themselves.

Furthermore, these types can then be used to declare functions in lieu of prototypes:

	/* Declare myfunc_t as a type representing 
	 * a function accepting char * and returning int. */ 
	typedef int myfunc_t(char *); 
	 
	/* Declare some functions that have this prototype. */ 
	myfunc_t func1; 
	myfunc_t func2; 

This has the advantage of making function pointers still look like pointers, rather than hiding it in the type.

Another detail I learned recently is that const and restrict specifiers are not required on arguments in a
prototype, at least for the portion that’s passed by value, even if the function definition itself has them.
(For pointer arguments, this means the pointer itself, not the pointed-to type.)

Example:

	/* Prototype.  
	 * 
	 * Note that the const in front of char in the second arg  
	 * is required. 
	 */ 
	void copy(char *dst, const char *src, int length); 
	 
	/* Function definition. 
	 * 
	 * Notice the additional 'const' and 'restrict' qualifiers, 
	 * indicating that these arguments are not to be modified in  
	 * the body of the implementation.	They only affect the  
	 * implementation and do not form part of the function's 
	 * interface. 
	 */ 
	void copy(char *const restrict dst, const char *const restrict src, 
			  const int length) { 
	  for (int i = 0; i < length; i++) { 
		dst[i] = src[i]; 
	  } 
	} 

Also, some details I see others get wrong regularly:
	- sizeof(char) == 1 by definition, guaranteed. However CHAR_BIT is not guaranteed to be 8.
	  A machine with 16-bit char still has sizeof(char) == 1.

	- Signed integer overflow behavior is undefined; unsigned integer overflow is well defined. The compiler is
	  allowed to optimize an expression like if (x + 1 < x) away (ie. treat it as always false) if x is a
	  signed integer, but not if it’s unsigned.

	- Combining signed and unsigned arithmetic in a single expression can lead to surprising results.
	  int i = -1; unsigned u = 1; if (i > u) puts(“true”); prints true.

	- main returns int, not void. I don’t care if you don’t want to return a value.
	  In standard C, it’s never void main. If you don’t know what to return, then return 0.

	- Right shifting is not equivalent to dividing by a power of 2, at least for signed, negative values.
	  Division rounds toward 0,(1) so (-1) / 2 == 0. Right shifting isn’t guaranteed to replicate the sign bit
	  it’s implementation defined. Even on implementations that do, (-1) >> 1 == -1, assuming a 2s complement
	  representation. Because of this difference, divides on signed int are typically less efficient than right
	  shifts, at least in places where the compiler can’t prove the number isn’t negative. Takeaway: Use
	  unsigned types for bit-fiddling, and don’t confuse bit-fiddling with arithmetic.

	- The modulo operator can return negative values. For example, (-1) % 2 == -1. You don’t want to use modulo
	  when indexing a circular buffer with values that could be negative.

	- The bitwise Boolean operators have surprisingly low precedence. The code x & 1 == 0 doesn’t do what you
	  expect. You likely wanted (x & 1) == 0, but the compiler sees x & (1 == 0). So, while x % 2 == 0 works
	  more or less as you expect, blindly changing it to x & 1 == 0 will leave you scratching your head.


EDIT: OK, C89 doesn’t require division to round toward 0. (-1) / 2 == -1 is permitted in a C89 implementation.
(I haven’t personally encountered such an implementation myself.) If (-1) / 2 == -1, then (-1) % 2 == 1.

C99 and later require division to round toward 0, which then guarantees ((-1) / 2 == 0) && ((-1) % 2 == -1).
Thanks to Barry Rountree for encouraging me to expand on which versions of C these fiddly details apply to.
Read the comments for more details.

EDIT2: There is some [**1]weasel wording that allows implementations to support other function signatures for main.
It’s still bad practice, and is not upward compatible with C++, which lacks this weasel wording.



---
[**1]
http://port70.net/~nsz/c/c11/n1570.html#5.1.2.2.1

5.1.2.2.1 Program startup

1 The function called at program startup is named main. The implementation declares no prototype for this
  function. It shall be defined with a return type of int and with no parameters:

         int main(void) { /* ... */ }

or with two parameters (referred to here as argc and argv, though any names may be used, as they are local
to the function in which they are declared):

         int main(int argc, char *argv[]) { /* ... */ }

or equivalent(10) or in some other implementation-defined manner.

2 If they are declared, the parameters to the main function shall obey the following constraints:

    - The value of argc shall be nonnegative.
    - argv[argc] shall be a null pointer.
    - If the value of argc is greater than zero, the array members argv[0] through argv[argc-1] inclusive
	  shall contain pointers to strings, which are given implementation-defined values by the host environment
	  prior to program startup. The intent is to supply to the program information determined prior to program
	  startup from elsewhere in the hosted environment. If the host environment is not capable of supplying
	  strings with letters in both uppercase and lowercase, the implementation shall ensure that the strings
	  are received in lowercase.
    - If the value of argc is greater than zero, the string pointed to by argv[0] represents the program name;
	  argv[0][0] shall be the null character if the program name is not available from the host environment.
	  If the value of argc is greater than one, the strings pointed to by argv[1] through argv[argc-1]
	  represent the program parameters.
    - The parameters argc and argv and the strings pointed to by the argv array shall be modifiable by the
	  program, and retain their last-stored values between program startup and program termination.

Footnotes
(10) Thus, int can be replaced by a typedef name defined as int, or the type of argv can be written
     as char ** argv, and so on.


---


