https://c-for-dummies.com/blog/?p=2568

Wide Characters and Unicode, Part I
June 24, 2017

   At the dawn of the microcomputer era, lowercase text was considered a big deal. That's
   because many home computers at the time displayed only uppercase letters. Memory was tight.
   Full-ASCII character generators added to the system's cost. Yes, a microcomputer that
   displayed lowercase text was a big deal.
   Eventually microcomputers hosted the entire gamut of ASCII text. Beyond the 32 control
   codes, ASCII provides symbols for all the keyboard characters, which is what most early
   computer users wanted - and lowercase, naturally.

   A microcomputer byte held 256 values, but ASCII defines only 128 characters. So many
   microcomputer manufacturers offered extra characters and symbols in the "upper" or
   "extended" 128 codes. (These codes weren't defined by the ASCII standard.) IBM offered its
   Extended ASCII character set, as well as code pages you could swap in or out. These
   features provided users with foreign characters, line-drawing characters, and other symbols
   that are today called wingdings.

   A C programmer back in the day could use Extended ASCII characters to create interesting
   output, but the characters were inconsistent across computer platforms. To provide
   consistency, as well as to create a code system for all the world's languages and symbols,
   people wearing white lab coats and safety goggles developed the Unicode standard.

   Unlike ASCII, Unicode defines thousands of character codes. The [https://unicode-table.com/en/]Unicode
   Character Table web page presents them all in a useful format.

   As a programmer, your question might be, "How can I display Unicode text in my C program's
   text output?"

   A better question might be, "How can I use C's char output functions with a string of what
   are obviously int character values?"

   The actual question I've received over the years is, "How do I output the Yen character?"
   That's because one of my early programming books featured a program that output the Yen
   sign, ¥. That character was available on the IBM "extended ASCII" code page, but that
   system is no longer used so the character no longer appears as coded.

   Today, if you want to print the Yen sign in a terminal window program's output, you might
   think to send its Unicode value, 0x00A5, to standard output. What you see displayed,
   however, is not the Yen sign unless the program is configured to output wide characters.

	 On the PC, I see the character Ñ displayed for code 0x00A5, which is probably the active
	 code page character. On my Mac terminal, the ? is displayed. On my Ubuntu Linux system,
	 the ⍰ symbol appears.

   A wide character occupies more than a single byte of storage; it's (probably) an unsigned
   int, not a char. The standard C library features wide-character functions and has a wide
   character header file, wchar.h. But using those functions isn't enough: You must set the
   proper locale.

   Locale settings include region and language specific details for a computer program. Items
   such as the language, time and date format, and character set are included in the locale
   details. Unless you set the locale to support wide characters, your C program outputs only
   standard, boring, ASCII text.

   In C, you use the setlocale() function to check or set locale information. The function is
   defined in the locale.h header file and it requires two arguments: a locale constant and
   its string value. The function also returns the current local settings.

   In the following code, the current locale setting is returned and displayed:
#include <stdio.h>
#include <locale.h>

int main() {
	char *locale;

	locale = setlocale(LC_ALL,"");
	printf("The current locale is %s\n",locale);

	return(0);
}

   The LC_ALL constant checks all locale details. The program's output might look like this:
The current locale is en_US.UTF-8

   You might see something else output. Whatever the case, to output wide characters, you must
   set a specific environment.


---
https://c-for-dummies.com/blog/?p=2578

Wide Characters and Unicode, Part II
July 1, 2017

   After you set the necessary locale for your program, you're free to use the wide character
   functions defined in the wchar.h header file. For some reason, this process is
   poorly-documented on the Internet, which is probably why you're here.
   From last week's Lesson, you learned of the setlocale() function, which is key to
   creating a program environment capable of outputting wide character. The setlocale()
   function features two arguments: a category constant and a locale string.

   You'll find several category constants, each of which relates to a specific locale element,
   such as number formatting, date and time, monetary symbols, and so on. The two often used
   when playing with wide characters are LC_ALL and LC_CTYPE.

   The LC_ALL constant sets the program's entire locale. LC_CTYPE is specific to text, so it's
   the one I use.

   For the locale string, you must specify the proper character set. What you're after for
   wide characters/Unicode is the UTF-8 standard. The string to use is "UTF-8" and the
   full statement is:

   setlocale(LC_CTYPE,"UTF-8");

   Also acceptable is the specific language tag for your region, such as:

   setlocale(LC_CTYPE,"en_us.UTF-8");

   Where en_us is American English.

   Once the locale is set, you can employ the wide character functions defined in wchar.h in
   your code. For example, the putwchar() function is the wide-character counterpart to the
   putchar() function. Its argument is wchar_t value, a Unicode character.

   The following code displays several Unicode characters to standard output.

#include <locale.h>
#include <wchar.h>

int main() {
	wchar_t hello[7] = {
		0x41f, 0x440, 0x438, 0x432, 0x435, 0x442, 0x021
	};
	int x;

	setlocale(LC_CTYPE,"UTF-8");
	for(x=0;x<7;x++)
		putwchar(hello[x]);
	putchar('\n');

	return(0);
}

   Only the locale.h and wchar.h headers are required; the wchar.h header includes stdio.h, so
   you don't need to specify it again. (This inclusion may not hold for every C compiler, so
   if you get an error, include the stdio.h header.)

   An array of wchar_t characters is defined at Line 6. It's not a string. It doesn't end with
   a null character.

   Line 11 sets the locale to output UTF-8 characters.

   The for loop at Line 12 sends the hello[] array's Unicode/wchar_t characters to standard
   output courtesy of the putwchar() function.

   The putchar() function at Line 14 adds a newline, which could have been part of the hello[]
   array, but I wanted to show that you can mix text-output methods. (ASCII code 0x21 is part
   of the array.)

   Here's the output:
Привет!

   To create more string-like output, you can modify the hello[] array to include a null
   character and instead of looping through the elements, use the fputws() output function:

#include <locale.h>
#include <wchar.h>

int main() {
	wchar_t hello[] = {
		0x41f, 0x440, 0x438, 0x432, 0x435,
		0x442, '!', '\n', '\0'
	};

	setlocale(LC_CTYPE,"UTF-8");
	fputws(hello,stdout);

	return(0);
}

   The hello[] array now includes the ASCII characters !, newline, and null. The fputws()
   function at Line 12 sends that wide-character string to standard output. (An equivalent
   putws() macro doesn't exist.)

   As you might guess, a wide-character version of the printf() statement is available,
   wprintf(), along with its various sisters for different types of formatted wide-character
   output. It's not a straightforward version of printf(), as you're dealing with wide (long)
   characters.


---
https://c-for-dummies.com/blog/?p=2593

Wide Characters and Unicode, Part III
July 8, 2017

   Programming is a fun hobby because once you unlock and open a door, you immediately find
   another locked door. Normal humans would experience frustration, but a good programmer
   enjoys a challenge and even sees the humor in the situation. A case in point is learning
   how to program wide characters in C: Once you think you've cleared a huge hurdle, you find
   another, taller one right behind it.
   For example, you think you understand wide characters and use the putwchar() function with
   ease. (See last week's Lesson.) Then you try using the printf() equivalent, wprintf(),
   and you're back to square one.

   Don't worry, I've been there, too.

   The issue with the wprintf() function, as well as the wide-character input function
   wscanf(), is that all the text in the function must be specified as wide characters. Unless
   you work with wide characters all the time, the solution isn't apparent, and the error
   message doesn't help.

	 Just tell me the solution!

   You must specify wide-character strings and wide-character placeholders to make the
   wide-character input and output functions work. A wide-character string is prefixed by the
   letter L:

   L"I am a wide string"

   Prefixing an L (for long) before a quoted string converts it into unsigned integer values -
   wide characters.

   The placeholder for a wide character is %lc, with a lowercase L before lowercase C. This
   placeholder is used in both the wprintf() and wscanf() functions.

#include <locale.h>
#include <wchar.h>

int main() {
	wchar_t suits[4] = {
		0x2660, 0x2665, 0x2663, 0x2666
	};
	wchar_t s;
	int x;

	setlocale(LC_CTYPE,"UTF-8");

	printf("Enter suit: ( ");
	for(x=0;x<4;x++) {
		wprintf(L"%lc ",suits[x]);
	}
	printf("): ");

	wscanf(L"%lc",&s);
	wprintf(L"Suit set to %lc\n",s);

	return(0);
}

   The wprintf() function at Line 17 uses the formatting string "%lc" to output the wide
   characters stored in array suits[]. The array is defined at Line 6 as the type wchar_t,
   wide characters. The formatting string must be composed of wide-characters, so it's
   prefixed with an L.

   The wscanf() function at Line 21 reads input for a wide character, though you can also type
   plain ASCII text. Again, the input format string is prefixed with an L, and the %lc
   placeholder is used. Input variable s is of the wchar_t type.

   Finally, Line 22 should make sense by now, with the wprintf() function using various
   wide-character doodads.

   The sample run:
Enter suit: ( ♠ ♥ ♣ ♦ ): ♠
Suit set to ♠

   Above, I copied and pasted the spade character because the keyboard lacks a spade character
   key and I don't know any other ways to type a wide character in a terminal window.


---
https://c-for-dummies.com/blog/?p=2605

Wide Characters and Unicode, Part IV
July 15, 2017

   String input is a weird thing when it comes to wide characters, mostly because how the heck
   do you type wide characters in a terminal window beyond copy-and-paste?
   For single character input, the wchar.h header defines three functions: fgetwc(), getwc(),
   and getwchar().

   The fgetwc() and getwc() functions both read one wint_t character (wide-character int type)
   from a named file stream. The getwchar() function (actually a macro) reads wide characters
   from standard input. This is the function I prefer.

	 The wint_t wide-character integer type is larger (wider) than the wchar_t "character"
	 type. The primary reason is to accommodate the end-of-file character, WEOF, which is
	 defined outside the bounds of a wchar_t variable. You can use plain old wchar_t
	 variables with the functions, but when you're hunting for the end-of-file marker with
	 fgetwc() or getwc(), use wint_t instead.

   The following code uses the getwchar() function to read wide characters one-at-a-time from
   standard input. The getwstring() function reads up to count characters or stops at the
   newline ('\n'), storing the result in the wchar_t string input:

#include <locale.h>
#include <wchar.h>

void getwstring(wchar_t *ws,int count) {
	int x = 0;
	wchar_t *a,wch;

	a = ws;
	while(x<count-1) {
		wch = getwchar();
		if( wch=='\n')
			break;
		*a = wch;
		a++;
		x++;
	}
	*a = '\0';
}

int main() {
	wchar_t input[10];

	setlocale(LC_CTYPE,"UTF-8");

	wprintf(L"Type some fancy text: ");
	getwstring(input,10);
	wprintf(L"You typed: %ls!\n",input);

	return(0);
}

   The getwstring() function uses the getwchar() macro at Line 12 to read wide-characters from
   standard input. The characters are read until the newline is input or the buffer is full.
   Then the string is capped at Line 19.

   For the sample run, I copied and pasted text from a web page:
Type some fancy text: 你好，世界
You typed: 你好，世界!

   On the Mac terminal, you can press Control+Command+Space to see the Emoji and Symbols
   palette, which you can use to pluck out one character at a time, as shown in Figure 1.

   Figure 1. The weirdo character palette in the OS X Terminal program.

   Instead of writing your own getwstring() function to read a wide-character string, you can
   use the fgetws() function. This function is the wide-character equivalent to my old pal
   fgets(). Here's the updated code:

#include <locale.h>
#include <wchar.h>

int main() {
	wchar_t input[10];

	setlocale(LC_CTYPE,"UTF-8");

	wprintf(L"Type some fancy text: ");
	fgetws(input,10,stdin);
	wprintf(L"You typed: %ls!\n",input);

	return(0);
}

   As with fgets(), the arguments for fgetws() are a buffer, input size, and the file handle.
   For standard input, stdin is used, as shown in the code.

   The code's output is almost the same:
Type some fancy text: 你好，世界
You typed: 你好，世界
!

   The fgetws() function, like its fgets() twin, reads and retains the newline character. You
   can view my quickie solution for this effect [https://c-for-dummies.com/blog/?p=24]here, if you want to
   eliminate the newline. I'll present another solution in a future Lesson.

   One more note: The terminal window assumes that every character displayed has the same
   width. Historically, terminals play with only ASCII text. In a GUI, the terminal assumes a
   monospaced font. A few Unicode characters, especially emojis, are wider than a single
   character position in the terminal window. The result is overlap, which you can kind of see
   in Figure 1.

   The wcwidth() function returns the number of column positions for a wide character, though
   it's not particularly useful. For example, the pizza slice shown in Figure 1 is more than 1
   column wide, though the wcwidth() function returns a character width value of 1, which
   isn't correct. My advice is to be cautious when showing such characters. If you plan on
   using a specific character, then you can eyeball the width and plan accordingly.


---

