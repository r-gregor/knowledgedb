filename: c_using-double-pointer-to-create-multidimensional-array_20221212.txt
https://www.physicsforums.com/threads/c-c-using-a-double-pointer-to-create-a-multidimensional-array.694700/

Using a double pointer to create a multidimensional array

   Tomorrow I'm taking a programing assessment for a potential job. I was wondering whether, if I ever
   have to create a 2-D array for one of the challenge problems, I should use the method here:
   http://stackoverflow.com/questions/...nal-array-implementation-using-double-pointer.
   Also, any general programming advice welcome as this'll be my first on-the-stop programming
   challenge. Not sure what types of things they'll have me do. :smile:

   There are a couple of ways to create a 2-D array - using a pointer to memory allocated on the heap
   (using malloc or other memory allocation library functions), or declaring a 2-D array on the stack,
   as below.
   Code:
int array[2][3] = {{1, 2, 3}, {4, 5, 6}};

   It's hard to predict what they might ask you to do in the interview, so I won't try to guess.

   I should use the method here:
   http://stackoverflow.com/questions/...nal-array-implementation-using-double-pointer.

   The example double pointer program can be modified to perform a single allocation of memory, using an
   offset from the base pointer to get the offset to the first element of data, and that indexing can be
   used with a double pointer. The indexing can be used even if the memory is separately allocated as
   done in that example double pointer program.
   Code:

#include <malloc.h>

#define NROW 4
#define NCOL 8

int main() {
	int i, j;
	int *pdata;
	int **ptr;

	/* (NROW * sizeof(int *))      == size of the array of pointers to rows */
	/* (NCOL * sizeof(int))        == size of a row */
	/* (NROW * NCOL * sizeof(int)) == size of the data */

	ptr = (int **)malloc((NROW * sizeof(int *)) + (NROW * NCOL * sizeof(int)));
	pdata = (int *)&ptr[NROW];  /* data starts after the last pointer to row */

	for(j = 0; j < NROW; j++)   /* initialize the pointers to the rows */
		ptr[j] = &pdata[NCOL*j];

	for(j = 0; j < NROW; j++)   /* initialize the data = row * 0x10 + column */
		for(i = 0; i < NCOL; i++)
			ptr[j][i] = j * 0x10 + i;

	free(ptr);

	return 0;
}

   A slight variation of this uses a pointer to an 2d array of integers. The memory layout is the same
   as the above example:
   Code:

#include <malloc.h>

#define NROW 4
#define NCOL 8

int main() {
	int i, j;
	int (*parray)[NROW][NCOL];     /* ptr to 2d array */
	int **ptr;

	/* (NROW * sizeof(int *))      == size of the array of pointers to rows */
	/* (NCOL * sizeof(int))        == size of a row */
	/* (NROW * NCOL * sizeof(int)) == size of the data */

	ptr = (int **)malloc((NROW * sizeof(int *)) + (NROW * NCOL * sizeof(int)));
	parray = (int (*)[NROW][NCOL])&ptr[NROW]; /* data starts after the last pointer to row */

	for(j = 0; j < NROW; j++)      /* initialize the pointers to the rows */
		ptr[j] = (*parray)[j];

	for(j = 0; j < NROW; j++)      /* initialize the data = row * 0x10 + column */
		for(i = 0; i < NCOL; i++)
			ptr[j][i] = j * 0x10 + i;

	free(ptr);

	return 0;
}

   Mark44 posted a much simpler example of an actual 2d array. Note that pointer syntax can be used with
   an array, although I'm not sure why you would want do. Using Mark44's example program, *(array+1) is
   the same as array[1], and *(*(array+1) + 2) is the same as array[1][2].

   Here you go! this program creates a 2 dimensional array using an std::vector which is then filled
   with the array indices and printed. Finally its deleted on program exit.
   Code:

#include <vector>
#include <iostream>

class A {
	private:

	int i;
	int j;

	public:

	A(){}
	~A(){}
	A(int i, int j) {
		// the "this" operator is a pointer to class A. Its essentially the address of the object A itself.
		this->i = i;
		this->j = j;
	}

	void print() {
		std::cout<<i<<","<<j<<std::endl;
	}
};

int main() {
	//initialize vector
	std::vector< std::vector <A*> > two_D;

	//fill vector with elements using new
	for(int i = 0; i < 3; i++) {
		two_D.push_back(std::vector <A*> ());

		for(int j = 0; j < 3; j++) {
			two_D[i].push_back(new A(i,j));
		}
	}

	//output all the data stored in each element
	for(int i = 0; i < 3; i++) {
		for(int j = 0; j < 3; j++) {
			two_D[i][j]->print();
		}
	}

	//clean up the ponters with delete so you have no memory leaks
	for(int i = 0; i < 3; i++) {
		for(int j = 0; j < 3; j++) {
			delete two_D[i][j];
		}
	}

	return 0;
}



---

