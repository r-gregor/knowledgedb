filename: c_QUORA_locat-the-assigned-bits_20221006.txt
https://cstdspace.quora.com/It-is-possible-to-locate-the-memory-location-of-a-variable-in-C-programming-but-is-it-possible-to-located-the-assigned-1

It is possible to locate the memory location of a variable in C programming, but is it possible to located
the assigned bits of that memory location? If yes, then how?

Individual bits are not addressable (at least not in any sane architecture). To access a specific bit or set
of bits in an object, you usually use a bitmask with the bitwise & operator:

unsigned char val = 0x8F;        // 0111 1111 
unsigned char mask = 0x01 << 5;  // 0010 0000, or you can simply set mask to 0x20 
 
if ( val & mask )                // 0111 1111 & 0010 0000 = 0010 0000 
	// bit 5 is set (1) 
else 
	// bit 5 is clear 

The bitwise & operator is only defined for integer types; to access bits in a floating point object, you’ll
need to map its bit pattern onto an array of unsigned char like this:

union u { 
	double d; 
	unsigned char c[sizeof (double)]; 
} val; 
	 
val.d = 3.1415; 
unsigned char mask = 0x01 << 5; 

The hitch with this is that byte order now comes into play. On a big-endian system like Power, the most
significant byte is the addressed byte. On a little-endian system like x86, the least significant byte is
the addressed byte:

	int x = 0x11223344; 
	 
		 A    A+1  A+2  A+3   big-endian 
		+----+----+----+----+
	MSB | 11 | 22 | 33 | 44 | LSB
		+----+----+----+----+
		 A+3  A+2  A+1  A     little-endian

Since we’re mapping a multi-byte type onto an array of unsigned char, we need to be aware of byte order so
we access the correct bit in the overall word.

For example, if we want to access bit 12 of val.d, then we need to access bit 5 of the second-least
significant byte. On a big endian system, the second-least-significant byte of a double is byte 6; on a
little-endian system, it’s byte 1.

size_t idx = 1; // starts by assuming little-endian 
if ( big_endian() ) 
	idx = sizeof val.d - 2;  

if ( val.c[idx] & mask ) 
	// bit 5 of the second-least-significant byte is set 
else 
	// bit 5 of the second-least-significant byte is not set 

Bit twiddling is a pain in the ass. Avoid it if you can.



---

