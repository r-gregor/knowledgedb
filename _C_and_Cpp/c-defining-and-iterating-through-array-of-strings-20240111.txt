filename: c_defining-and-iterating-through-array-of-strings_20240111.txt
https://stackoverflow.com/questions/6812242/defining-and-iterating-through-array-of-strings-in-c

Defining and iterating through array of strings in c

   How can I define an array of string in c then iterate with a loop through the items in the array?

   So far I have
char myStrings[][10] = { "one", "two", "three", "four", "five" };
// do I need to specify the "10" maximum length?
// also does it automatically create a null ending character after the string?

int i = 0;
for( i = 0; i < ; i++) {
	// I need to pass each string to  a function which accepts
	// const char *
}

***
   When you declare a char sequence with "", null terminator is added.
char myStrings[][10] = { "one", "two", "three", "four", "five" };

for (size_t i = 0; i < sizeof(myStrings) / sizeof(myStrings[0]); i++) {
	fooThatReceivesOneString(myStrings[i]);
}

   Edit - sizeof()

   sizeof() returns the size of a variable. It doesn't matter if the variable is an int, array or 2d
   array.

   For example, see the following program
#include <stdio.h>
int main() {
	char myStrings[][10] = { "one", "two", "three", "four", "five" };
	printf("sizeof(myStrings):	  %zu\n", sizeof(myStrings));
	printf("sizeof(myStrings[0]): %zu\n", sizeof(myStrings[0]));
	return 0;
}

   Which outputs (on my machine):
sizeof(myStrings):	  50
sizeof(myStrings[0]): 10

   Since each element in the array has the same size (in our case declared to be 10 bytes) we can divide
   the sizeof the outer array by the sizeof any of its elements to get the number of constituent
   elements. The simplest option is to just take the first one!

*** 5+
   Here is a good implementation:

   Code:
static const char* strings[]={"asdf","asdfasdf",0};
const char** ptr = strings;
while(*ptr != 0) {
   printf("%s \n", *ptr);
   ++ptr;
}

***
   Try this..
int j =0;
while (char myStrings[][j] !='\0') {
	i++;
}
for (i = 0; i < j; i++) {
	somemethod(myStrings[][i]);
}

***
   I always do it that way, seems elegant and easy to me.
   You just define an array as usual, without fixed index.
   All you have to make sure is to add a single 0 at the end.
   Then you can make the shortest TEST case possible and iterate through it with for or while.

   Here is an example, it displays a list of options and the fitting help element (in that case the help
   array needs to be at least as long as the options one.
const char *options[]={
	"CAL_MAG_MIN",
	"CAL_MAG_MAX",
	0
	};

const char *help[]={
	"<X,Y,Z>",
	"<X,Y,Z>",
	0
	};

int pos;
for (pos=0;options[pos];pos++) {
	printf("\t %s %s\n",options[pos],help[pos]);
}



---

