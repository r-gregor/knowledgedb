https://www.delftstack.com/howto/c/array-of-strings-in-c/

Array of Strings in C
February-01, 2021

   This article will demonstrate multiple methods about how to declare an array of strings in C.

Use 2D Array Notation to Declare Array of Strings in C
   Strings in C are simply a sequence of chars stored in a contiguous memory region. One
   distinction about character strings is that there is a terminating null byte \0 stored at
   the end of the sequence, denoting one string's end. If we declare a fixed array of char
   using the [] notation, then we can store a string consisting of the same number of
   characters in that location.

   Note that one extra character space for the terminating null byte should be considered when
   copying the character string to the array location. Thus, one can declare a two-dimensional
   char array with brackets notation and utilize it as the array of strings.

   The second dimension of the array will limit the maximum length of the string. In this
   case, we arbitrarily define a macro constant - MAX_LENGTH equal to 100 characters.

   The whole array can be initialized with {""} notation, which zeros out each char element in
   the array.

   When storing the string values in the already initialized array, the assignment operator is
   not permitted, and special memory copying functions should be employed like strcpy.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define MAX_LENGTH 100
#define NUM_STRINGS 10

int main() {

	char arr[NUM_STRINGS][MAX_LENGTH] = {""};

	arr[0] = "string literal"; // Not permitted
	strcpy(arr[0], "hello world");
	printf("%s\n", arr[0]);
	printf("%s\n", strcpy(arr[0], "hello world"));

	exit(EXIT_SUCCESS);
}
</code>

   Output:
hello world
hello world

   Alternatively, we can initialize the two-dimensional char array instantly when declared.
   The modern C11 standard allows to initialize char arrays with string literals and even
   store null byte at the end of the string automatically when the array length is larger than
   the string itself.

   Initializer list notation is similar to the C++ syntax. Each curly braced element is
   supposed to be stored in a consecutive memory region of length MAX_LENGTH. In case the
   initializer notation specifies the fewer elements than the array size, the remaining
   elements are implicitly initialized with \0 bytes.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define MAX_LENGTH 100
#define NUM_STRINGS 10

int main() {
	char arr2[NUM_STRINGS][MAX_LENGTH] = { {"first string"},
	                                       {"second string"},
	                                       {"third string"},
	                                       {"fourth string"},
	                                       {"fifth string"} };

	for (int i = 0; i < NUM_STRINGS; ++i) {
		printf("%s, ", arr2[i]);
	}

	exit(EXIT_SUCCESS);
}
</code>

   Output:
first string, second string, third string, fourth string, fifth string, , , , , ,

Use the char* Array Notation to Declare Array of Strings in C

   char* is the type that is generally used to store character strings. Declaring the array of
   char* gives us the fixed number of pointers pointing to the same number of character
   strings. It can be initialized with string literals as shown in the following example,
   assigned to or copied using special functions provided in the header string.h.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define MAX_LENGTH 100
#define NUM_STRINGS 10

int main() {
	char *arr3[NUM_STRINGS] = { "first string",
	                            "second string",
	                            "third string",
	                            "fourth string",
	                            "fifth string" };
	char* str1 = "string literal";
	arr3[8] = str1;
	arr3[9] = "hello there";

	for (int i = 0; i < NUM_STRINGS; ++i) {
		printf("%s, ", arr3[i]);
	}
	printf("\n");

	exit(EXIT_SUCCESS);
}
</code>

   Output:
first string, second string, third string, fourth string, fifth string, (null), (null), (null), stri
ng literal, hello there,

   As an alternative, one can specify the {} braces only, which will initialize the pointers
   in the array to null, and they can be later used to stored other string addresses, or the
   programmer can even allocate dynamic memory.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define NUM_STRINGS 10

int main() {
	char *arr4[NUM_STRINGS] = {};
	for (int i = 0; i < NUM_STRINGS; ++i) {
		printf("%s, ", arr4[i]);
	}
	printf("\n");

	exit(EXIT_SUCCESS);
}
</code>

   Output:
(null), (null), (null), (null), (null), (null), (null), (null), (null), (null),



---
https://www.delftstack.com/howto/c/print-char-array-in-c/

Print Char Array in C
November-26, 2021

After we have introduced how to print in C, we will introduce multiple methods about how to print a char
array in C.

Use the for Loop to Print Char Array in C
   The for loop is the most obvious solution if we want to print array elements separately and
   format the output with more details. A critical prerequisite for this method is that we
   should know the array length in advance.

   Note that we can use other iteration methods like the while loop, but then we should know
   the value at which the iteration should stop; otherwise, the iteration would go out of
   bounds throwing the segmentation fault.

   In the following example, we demonstrate the for loop method and iterate precisely 6 times
   over the array of six characters.

<code>
#include <stdio.h>
#include <stdlib.h>

#define STR(num) #num

int main(void) {
	char arr1[] = { 'a', 'b', 'c', 'd', 'e', 'f' };

	printf(STR(arr1)": ");
	for (int i = 0; i < 6; ++i) {
		printf("%c, ", arr1[i]);
	}
	printf("\b\b\n");

	exit(EXIT_SUCCESS);
}
</code>

   Output:
arr1: a, b, c, d, e, f

Use printf With %s Specifier to Print Char Array in C
   The printf function is a powerful function for formatted output. It can manipulate input
   variables with type specifiers and process variables correspondingly.

   Namely, the char array internally has the same structure as the C-style string, except that
   the C-style string characters always end with \0 byte to denote the ending point. If we add
   the null byte at the end of our char array, we can print the whole array with a single-line
   printf call.

   If the terminating null byte is not specified and printf is called with this method program
   may try to access memory regions that will most likely result in segmentation error.

<code>
#include <stdio.h>
#include <stdlib.h>

#define STR(num) #num

int main(void) {
	char arr1[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
	char arr2[] = { 't', 'r', 'n', 'm', 'b', 'v', '\0' };

	printf("%s\n", arr1);
	printf("%s\n", arr2);

	exit(EXIT_SUCCESS);
}
</code>

   Output:
abcdeftrnmbv
trnmbv

   As you can see, when we print the arr1 that doesn't have the null terminator, we will get
   more characters until the iteration reaches one null terminator - \0.

   Another method to specialize the printf function is to pass the number of characters in the
   string inside the %s specifier. One way of doing this is to statically hard-code the length
   of the string with an integer between the symbols % and s, or it can be replaced with *
   symbol to take another integer argument from the printf parameters. Note that both methods
   include . character before the number or asterisk in the specifier.

<code>
#include <stdio.h>
#include <stdlib.h>

#define STR(num) #num

int main(void) {
	char arr1[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
	char arr2[] = { 't', 'r', 'n', 'm', 'b', 'v', '\0' };

	printf("%.6s\n", arr1);
	printf("%.*s\n", (int)sizeof arr1, arr2);

	exit(EXIT_SUCCESS);
}
</code>

   Output:
abcdef
trnmbv


---
https://www.delftstack.com/howto/c/c-array-copy-in-c/

Copy Char Array in C
February-14, 2021

   This article will demonstrate multiple methods about how to copy a char array in C.

Use the memcpy Function to Copy a Char Array in C
   char arrays are probably the most common data structure manipulated in the C code, and
   copying the array contents is one of the core operations for it. C-style strings are very
   similar to char arrays; thus, there are multiple ways to deal with copying the array
   contents. In the following example, we declared two arrays, arr and arr2; the former is
   initialized with character list notation and the latter with a string literal. Note that
   this yields different array structures and sizes. The arr object is 7 characters in the
   memory, but arr2 takes 17 characters plus terminating null byte resulting in an 18-byte
   object. Consequently, we pass the value of sizeof arr2 - 1 expression as the second
   argument to denote the length of the array. On the other hand, one may print the contents
   of the arr2 array with the printf function and %s format specifier.

   The same details should be considered when copying the char arrays to a different location.
   The memcpy function is part of the standard library string utilities defined in <string.h>
   header file. It takes three parameters, the first of which is the destination pointer,
   where the contents of the array will be copied. The second parameter is the pointer to the
   source array, and the last parameter specifies the number of bytes to be copied. Notice
   that the sizeof operator returns the char array object sizes in bytes. So we allocate the
   dynamic memory with malloc call passing the sizeof arr expression value to it. The returned
   memory region is enough to hold the arr contents, and we don't need to worry about buffer
   overflow bugs. Mind though, that the pointer returned from malloc should be freed.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void printCharArray(char *arr, size_t len) {
	for (size_t i = 0; i < len; ++i) {
		printf("%c, ", arr[i]);
	}
	printf("\n");
}

int main(int argc, char *argv[]) {
	char arr[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g'};
	char arr2[] = "array initialized";

	printf("%lu\n", sizeof arr);
	printf("%lu\n", sizeof arr2);

	printCharArray(arr, sizeof arr);
	printCharArray(arr2, sizeof arr2 - 1);

	char *str = malloc(sizeof arr);
	memcpy(str, arr, sizeof arr);
	printf("str: ");
	printCharArray(str, sizeof arr);
	free(str);

	str = malloc(sizeof arr2);
	memcpy(str, arr2, sizeof arr2);
	printf("str: %s\n", str);
	free(str);

	exit(EXIT_SUCCESS);
}
</code>

   Output:
7
18
a, b, c, d, e, f, g,
a, r, r, a, y, , i, n, i, t, i, a, l, i, z, e, d,
str: a, b, c, d, e, f, g,
str: array initialized

Use the memmove Function to Copy a Char Array in C
   memmove is another memory area copying function from standard library string utilities. It
   has been implemented as a more robust function to accommodate the case when destination and
   source memory regions overlap. memmove parameters are the same as memcpy.

   When copying the arr2 contents, we passed sizeof arr2 expression as the third parameter.
   Meaning that even the terminating null byte got copied to the destination pointer, but we
   consequently utilize this action by calling printf with %s to output contents rather than
   using printCharArray.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void printCharArray(char *arr, size_t len) {
	for (size_t i = 0; i < len; ++i) {
		printf("%c, ", arr[i]);
	}
	printf("\n");
}

int main(int argc, char *argv[]) {
	char arr[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g'};
	char arr2[] = "array initialized";

	char *str = malloc(sizeof arr);
	memmove(str, arr, sizeof arr);
	printf("str: ");
	printCharArray(str, sizeof arr);
	free(str);

	str = malloc(sizeof arr2);
	memmove(str, arr2, sizeof arr2);
	printf("str: %s\n", str);
	free(str);

	exit(EXIT_SUCCESS);
}
</code>

   Output:
str: a, b, c, d, e, f, g,
str: array initialized


---
https://www.delftstack.com/howto/c/clear-array-in-c/

Clear Char Array in C
February-04, 2021

   This article will explain several methods of how to clear char array in C.

Use the memset Function to Clear Char Array in C
   The memset function is generally used to set the memory region with the constant value. The
   function is part of the standard library and is defined in the <string.h> header file.

   memset takes three arguments - the first is the void pointer to the memory region, the
   second argument is the constant byte value, and the last one denotes the number of bytes to
   be filled at the given memory address. Note that we can pass 0 integer value to clear the
   char array.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void printCharArray(char *arr, size_t len) {
	printf("arr: ");
	for (size_t i = 0; i < len; ++i) {
		printf("%c, ", arr[i]);
	}
	printf("\n");
}

#define LENGTH 20

int main() {
	char c_arr[LENGTH] = {'a', 'b', 'c', 'd', 'e', 'f', 'g'};
	printCharArray(c_arr, LENGTH);

	memset(c_arr, 0, LENGTH);
	printCharArray(c_arr, LENGTH);

	exit(EXIT_SUCCESS);
}
</code>

   Output:
arr: a, b, c, d, e, f, g, , , , , , , , , , , , , ,
arr: , , , , , , , , , , , , , , , , , , , ,

   Alternatively, memset can be called with the specific character as the constant byte
   argument, which can be useful for initializing every given array element with the same
   values. In this case, we arbitrarily choose the character zero to fill the array, resulting
   in a cleared memory region.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void printCharArray(char *arr, size_t len) {
	printf("arr: ");
	for (size_t i = 0; i < len; ++i) {
		printf("%c, ", arr[i]);
	}
	printf("\n");
}

#define LENGTH 20

int main() {
	char c_arr2[LENGTH] = "techarmp array";
	printCharArray(c_arr2, LENGTH);
	memset(c_arr2, '0', LENGTH);
	printCharArray(c_arr2, LENGTH);

	exit(EXIT_SUCCESS);
}
</code>

   Output:
arr: t, e, m, p, , a, r, r, a, y, , , , , , , , , , ,
arr: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

Use bzero or explicit_bzero Functions to Clear Char Array in C
   bzero is another standard library function to fill the memory area with the zero \0 bytes.
   It only takes two arguments - the pointer to the memory region and the number of bytes to
   overwrite. explicit_bzero, on the other hand, is an alternative that guarantees to conduct
   the write operation regardless of compiler optimizations.

   If instructed by the user, the compiler analyzes code for redundant instructions and
   removes them, and the explicit_bzero function is designed for this specific scenario.

<code>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void printCharArray(char *arr, size_t len) {
	printf("arr: ");
	for (size_t i = 0; i < len; ++i) {
		printf("%c, ", arr[i]);
	}
	printf("\n");
}

#define LENGTH 20

int main() {
	char c_arr[LENGTH] = {'a', 'b', 'c', 'd', 'e', 'f', 'g'};
	printCharArray(c_arr, LENGTH);

	bzero(c_arr, LENGTH);
	printCharArray(c_arr, LENGTH);

	explicit_bzero(c_arr, LENGTH);
	printCharArray(c_arr, LENGTH);

	exit(EXIT_SUCCESS);
}
</code>



---
https://www.delftstack.com/howto/c/dynamically-allocate-an-array-in-c/

Dynamically Allocate an Array in C
February-28, 2021

   This article will demonstrate multiple methods of how to allocate an array dynamically in C.

Use the malloc Function to Allocate an Array Dynamically in C
   malloc function is the core function for allocating the dynamic memory on the heap. It
   allocates the given number of bytes and returns the pointer to the memory region. Thus, if
   one wants to allocate an array of certain object types dynamically, a pointer to the type
   should be declared at first. Next, malloc should be called by passing the number of
   elements multiplied by the single object's size as an argument.

   In the following example, we allocate the memory to store a character string. errno is set
   to 0 as required by the secure coding standard, and the pointer returned from the malloc
   call is checked to verify the successful execution of the function. Finally, the memmove
   function is utilized to copy the string to the allocated memory location.

<code>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define SIZE 100

const char *str = "random string to be moved";

int main() {
	char *arr = NULL;

	errno = 0;
	arr = malloc(SIZE * sizeof(char));
	if (!arr) {
		perror("malloc");
		exit(EXIT_FAILURE);
	}

	memmove(arr, str, strlen(str));
	printf("arr: %s\n", arr);

	free(arr);
	exit(EXIT_SUCCESS);
}
</code>

   Output:
arr: random string to be moved

Use the realloc Function to Modify the Already Allocated Memory Region in C
   The realloc function is used to modify the memory region's size previously allocated by the
   malloc call. It takes the original memory address and the new size as the second argument.
   Note that realloc may return the same pointer as passed or a different one based on the
   size requested and the available memory after the given address. Meanwhile, the contents of
   the previous array will be unchanged up to a newly specified size.

<code>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define SIZE 100

const char *str = "random string to be moved";

int main() {
	char *arr = NULL;

	errno = 0;
	arr = malloc(SIZE);
	if (!arr) {
		perror("malloc");
		exit(EXIT_FAILURE);
	}

	int num = 102;	// User Provided Value
	for (int i = 0; i < num; ++i) {
		if (i > SIZE) {
			arr = realloc(arr, 2 * SIZE);

			if (!arr) {
				perror("realloc");
				exit(EXIT_FAILURE);
			}
		}

		arr[i] = 'a';
	}

	free(arr);
	exit(EXIT_SUCCESS);
}
</code>

Use Macro To Implement Allocation for Array of Given Objects in C
   Usually, malloc is used to allocate an array of some user-defined structures. Since the
   malloc returns the void pointer and can be implicitly cast to any other type, a better
   practice is to cast the returned pointer to the corresponding type explicitly. Because it's
   relatively easy to miss things and not include proper notation, so we implemented a macro
   expression that takes the number of elements in the array and the object type to
   automatically construct the correct malloc statement, including the proper cast.

<code>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define SIZE 100

typedef enum { Jan, Feb, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC} month;

typedef struct {
	unsigned char dd;
	month mm;
	unsigned yy;
} date;

#define MALLOC_ARRAY(number, type) \
	((type *)malloc((number) * sizeof(type)))

int main() {
	date *d = NULL;

	errno = 0;
	d = MALLOC_ARRAY(SIZE, date);
	if (!d) {
		perror("malloc");
		exit(EXIT_FAILURE);
	}

	free(d);
	exit(EXIT_SUCCESS);
}
</code>


---

