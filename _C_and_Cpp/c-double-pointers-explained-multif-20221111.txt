filename: double-pointers-explained-multif_20221111.txt
https://stackoverflow.com/questions/58675171/passing-a-2d-array-as-a-double-pointer-in-c

Passing a 2D array as a double pointer in C

   How would I go about passing a 2D array to the following function
arrayInput(char **inputArray)

   and then be able to access the array using standard 2D array syntax
inputArray[][]

   Specifically, I need to be able to call atoi(inpuArray[0]) to convert an array of characters to an
   int. I know that this in not the best way, but it is a project requirement to make it work this way.

***
   In this case, it would not be a 2D array of char, but an array of char* pointers. Like this:

void arrayInput(char **inputArray) {
	printf("%s\n", inputArray[0]);
	printf("%s\n", inputArray[1]);
}

int main() {
	char* strings[] = { "hello", "world" };
	arrayInput(strings);
}

   The type of strings is of type char*[] (array of pointer to char), which decays to char** (pointer to
   pointer to char).

   --

   For a true 2D array, where the rows are concatenated in the same memory buffer, the dimension of the
   second row needs to be part of the type. For example
void arrayInput(int mat[][2]) {
	printf("%d %d\n", mat[0][0], mat[0][1]);
	printf("%d %d\n", mat[1][0], mat[1][1]);
}

int main() {
	int mat[][2] = { {1, 2}, {3, 4} };
	arrayInput(mat);
}

   Here mat is of type int[2][2], which decays to int[][2] (array of array of 2 int) and int(*)[2]
   (pointer to array of 2 int).

***
   The 'arrayInput' function takes a pointer to array of pointers. This is different than the 2D array,
   which is array of array of chars. Assuming that you must keep the prototypes and the data definition,
   you can create an array of points to match the prototype. However, you will need to know the actual
   dimensions of inputArray (sample code assumed N, M). Also, the code assume that each element of
   inputArray is nul terminated.
	// Caller Function
	// N, M are needed.
	char inputArray[N][M] ;

	// Fill inputArray
	// Temporary array, holding pointer to each element
	char *p[N] ;
	for (int i=0 ; i<N ; i++ ) p[i] = inputArray[i] ;
	arrayInput(p) ;



---
https://www.scaler.com/topics/c/pointer-to-pointer-in-c/

Pointer to Pointer in C
20 Jan 2022

Overview
   Similar to how a pointer variable in C can be used to access or modify the value of a variable in C,
   a pointer to pointer in C is used to access/modify the value of a pointer variable. Here, the "value"
   of the former pointer is as usual a memory address. So, using a pointer to the pointer aka a double
   pointer in C, we can make the previous pointer point to another memory location.

Scope
	 * This article defines what is pointer to pointer in C, the syntax for declaring the same and also,
	   a pointer to pointer example.
	 * This article attempts to list a few scenarios where a pointer to pointer in C might be useful.

Introduction
   Whenever there is a requirement to use the memory address of a variable, it is quite usual to use a
   pointer variable to do so using the following syntax:

int var = 10;
int *ptr = &var;

   The following image illustrates the relation between ptr and var
   c pointer variable

       *ptr            var
   [ 0xdbfeb8 ] --> [   10   ]
     Addres:         Address:
     0xdbfeb0        0xdbfeb8

   Note that the pointer ptr is itself a variable and hence, it will be allocated some memory on the
   memory stack. Thus, it will have a memory address of its own. A pointer to a pointer in C or a double
   pointer will point to this memory address of the pointer.

   We can also think about this in terms of levels :
	 * Level 1 : Normal variable
	 * Level 2 : Normal pointer to a variable
	 * Level 3 : Double pointer (or pointer to a pointer)
	 * Level 4 : Triple pointer (or pointer to pointer to pointer)
	 * Level 5 : ...

   The above list can be extended to further levels as and when required by the programmer.

   A double pointer behaves in the same way as an ordinary pointer except that it will modify the value
   of the pointer that it is pointing to. In other words, the memory address stored in the ordinary
   pointer can be modified.

Declaring pointer to pointer in C
   The syntax to declare a double pointer is

   pointer_data_type **variable_name = &ordinary_pointer_variable;

   Here, the initialization is optional. We can simply declare the double pointer variable and assign it
   a value later.

Syntax:


int var = 10;
// Let's say the address of this variable is 0xdbfeb8
int *ptr = &var;
// Value in ptr is 0xdbfeb8 and say the address of ptr is 0xdbfeb0
int **double_ptr = &ptr;
// The value stored in double_ptr is 0xdbfeb0

   A double pointer should only point to an ordinary pointer. In case we attempt to do something like
   this

int **double_ptr = &var;

   the compiler will generate the following warning

warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]

Size of pointer to pointer in C
   Since a double pointer in C behaves similar to a normal pointer, the size of the double pointer
   variable and the size of the ordinary pointer variable are always equal. This can be verified using
   the following line:

printf("%lu %lu", sizeof(ptr), sizeof(double_ptr));

Output:


8 8

   Note: The output above depends on the type of machine in which the code is being executed. In other
   words, the size of a pointer is not fixed in C and it depends on different factors like OS and CPU
   architecture. Usually, for a 64-bit OS, the size is 8 bytes and for a 32-bit OS, the size is 4 bytes.

Reading pointer declarations in C
   Before moving on to the usages of a double pointer, let's quickly understand how to identify and read
   pointer declarations in C. Consider the following example:

int **double_ptr;

   To read the above line, we'll start at the variable name and end at the basic datatype by proceeding
   from right to left :
	 * First, we have the variable name, so we'll read that first as "double_ptr is".
	 * The next character that we have to the left is *. Everytime, we encounter a *, we add the words
	   "pointer to". So, the phrase now becomes "double_ptr is a pointer".
	 * We again encounter a * to the left and so, we add the words "pointer to" again. So, the phrase
	   now becomes "double_ptr is a pointer to a pointer ".
	 * The only term remaining to the left is the datatype which we'll read as "integer variable". So,
	   the overall phrase now becomes "double_ptr is a pointer to a pointer to an integer variable".

    **double_ptr           *ptr            var
    [ 0xdbfeb0 ] -->  [ 0xdbfeb8 ] --> [   10   ]
      Addres:           Addres:         Address:
      0xdbfeaf          0xdbfeb0        0xdbfeb8

   pointer to pointer in C
   Note that the above method could be extended to other pointer types as well. In other words, we can
   extend the reading guidelines for further levels of pointers as well. The previous example was about
   "Level 3 pointers" or double pointers. Here's an example for "Level 4 pointers" or triple pointers :

float ***ptr[10];

   We can read the above line as:
	 * First, we read the variable name as "ptr is".
	 * Then, we have to choose between [10] and *. In such cases, we first consider the term to the
	   right and then the left. So, we'll prioritize [10] and read it as "array of 10". So, the phrase
	   becomes "ptr is array of 10".
	 * Then we move to the left and find three *'s. For every *, we add the words "a pointer to". So,
	   the overall phrase becomes "ptr is array of 10 pointers to a pointer to pointer".
	 * Then, we finally read the data type and the final phrase becomes "ptr is array of 10 pointers to
	   pointer to pointer to float variable".

Examples of double pointers
  Example 1: 2-D character array
   We can store a string in C using a character pointer however, using a character double pointer in C,
   we can store a list of strings.

   Why not use a 2D character array to do this? This can also be achieved using a 2D character array but
   the size of all the strings is not necessarily equal and so, we might end up wasting a lot of extra
   space. Thus, the double pointer method is more space efficient.

   Note: The following method can be extended to other datatypes as well which have been explained in
   the subsequent examples.

   The following code demonstrates how this can be done:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
	char **words;
	// Allocate space for storing 5 strings
	words = (char **)malloc(5 * sizeof(*words));

	// To access/assign each string, we can use the following format
	words[0] = "apple";
	words[1] = "banana";
	words[2] = "jackfruit";
	words[3] = "melon";
	words[4] = "orange";

	for (int i = 0; i < 5; i++) {
		printf("%s\n", words[i]);
	}

	free(words); // Deallocate the memory that was allocated dynamically
	return 0;
}

	Output:


apple
banana
jackfruit
melon
orange

  Example 2: Command line argurments in C
   Whenever we want to use command line arguments in our C program, we need to provide these parameters
   to the main() function :

	int main(int argc, char **argv)

   Note that we can also write the above statement as

	int main(int argc, char *argv[])

   but for now, let's address the double pointer syntax version.

   Here, argc (argument count) represents the number of arguments passed through the command line
   including the name of the program. Since argv (argument vector) is a double character pointer, as
   discussed in the previous point, it will store a list of strings. More specifically, argv points to
   the strings passed as command line arguments (including the name of the program itself). The string
   at index 0, i.e, argv[0] is the name of the program and if the value of argc is positive, the
   arguments are pointed to by the indices from 1 to argc-1, i.e, argv[1], argv[2],...,argv[argc-1] The
   following example demonstrates how the command line arguments can be read.

#include <stdio.h>

int main(int argc, char **argv) {
	printf("The name of the program is at index 0 : %s\n", argv[0]);
	printf("Argument count (including the program name) : %d\n", argc);
	for (int i = 1; i < argc; i++) {
		printf("Argument at index %d : %s\n", i, argv[i]);
	}
	return 0;
}

   Now, let's say we are executing the above program on a Linux machine using the terminal. This is how
   it would look like:

	$ gcc example.c -o example
	$ ./example sun "good morning" 245 123.45

   We have provided 4 arguments in the command line above while executing the program.

	Output:


	The name of the program is at index 0 : ./example
	Argument count (including the program name) : 5
	Argument at index 1 : sun
	Argument at index 2 : good morning
	Argument at index 3 : 245
	Argument at index 4 : 123.45

  Example 3: Dynamic memory allocation using double pointer
   Another convenient use of double pointer is if we want to dynamically allocate the memory for a
   pointer variable in a separate function and then use that pointer in the calling function. The
   following example shows how this can be done:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void allocate_memory(char **ptr) {
	// Allocate space for a string of 9 characters
	*ptr = (char *)malloc(9 * sizeof(char));
}

int main() {
	char *word;
	allocate_memory(&word);
	strcpy(word, "Hello World");
	printf("%s\n", word);
	free(word);
	return 0;
}

	Output:


Hello World

  Example 4: 2-D arrays
   Similar to a list of strings, double pointers can be used to create 2D arrays of other data types as
   well such as int, float, etc. The following snippet shows how this can be done:

#include <stdio.h>
#include <stdlib.h>

int main() {
	// Allocate memory for a 2D matrix of 3 rows and 2 columns
	int **arr = (int **)malloc(3 * 2 * sizeof(int *));
	arr[0] = (int *)malloc(2 * sizeof(int));
	arr[1] = (int *)malloc(2 * sizeof(int));
	arr[2] = (int *)malloc(2 * sizeof(int));

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 2; j++) {
			arr[i][j] = i * 2 + j + 1;
		}
	}

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 2; j++) {
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}

	// Deallocate the memory that was allocated dynamically
	for (int i = 0; i < 3; i++) {
		free(arr[i]);
	}
	free(arr);

	return 0;
}

	Output:


1 2
3 4
5 6

Key Takeaways
	 * We can use a pointer to pointer in C to alter the value of an ordinary pointer or to create
	   variable sized 2D arrays as shown in the Examples section.
	 * A double pointer behaves similar to an ordinary pointer and occupies the same amount of space in
	   the memory stack.

Conclusion
	 * Double pointers in C are very powerful and can have many applications (as explained in the
	   Examples section) apart from simple data manipulation.
	 * In most cases, it is a personal preference whether to make use of a double pointer or use a
	   workaround. However, in certain scenarios, the use of double pointers becomes mandatory. One such
	   example is if we want to store a list of variable sized strings in a space efficient manner or if
	   the size of a 2D array can change during the course of program execution.
	 * To change the value of a double pointer, we can use a "triple" pointer, which is a pointer to a
	   pointer to a pointer (eg. int ***triple_ptr). Similarly, to change the value of a triple pointer
	   we can use a pointer to a pointer to a pointer to a pointer. In other words, to change the value
	   of a "Level X" variable, we can use a "Level X+1" pointer. Thus, this concept can be extended to
	   further levels.



---
https://www.geeksforgeeks.org/how-to-declare-a-two-dimensional-array-of-pointers-in-c/

How to declare a Two Dimensional Array of pointers in C?
29 Jun, 2022

   A Two Dimensional array of pointers is an array that has variables of pointer type. This means that
   the variables stored in the 2D array are such that each variable points to a particular address of
   some other element.

   How to create a 2D array of pointers:

   A 2D array of pointers can be created following the way shown below.

	int *arr[5][5];        //creating a 2D integer pointer array of 5 rows and 5 columns.

   The element of the 2D array is been initialized by assigning the address of some other element.
   In the example, we have assigned the address of integer variable 'n' in the index (0, 0) of the 2D
   array of pointers.

	int n;                 //declared a variable
	arr[0][0] = &n;        //assigned a variable at position (0, 0)

   Below is the implementation of the 2D array of pointers.

#include <stdio.h>

// Drivers code
int main() {
	int arr1[5][5] = { { 0, 1, 2, 3, 4 },
	                 { 2, 3, 4, 5, 6 },
	                 { 4, 5, 6, 7, 8 },
	                 { 5, 4, 3, 2, 6 },
	                 { 2, 5, 4, 3, 1 } };
	int* arr2[5][5];

	// Initialising each element of the
	// pointer array with the address of
	// element present in the other array
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			arr2[i][j] = &arr1[i][j];
		}
	}

	// Printing the array using
	// the array of pointers
	printf("The values are\n");
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			printf("%d ", *arr2[i][j]);
		}
		printf("\n");
	}

	return 0;
}


   Output
The values are
0 1 2 3 4
2 3 4 5 6
4 5 6 7 8
5 4 3 2 6
2 5 4 3 1

   A two-dimensional array of pointers can also be created using Dynamic Memory Allocation.

   We can use the malloc() function to dynamically allocate memory.
ptr = (cast-type*) malloc(byte-size)

   Below is the implementation of a 2D array of pointers using Dynamic Memory Allocation.

#include <stdio.h>
#include <stdlib.h>
// Drivers code
int main() {
	int arr1[5][5] = { { 0, 1, 2, 3, 4 },
	                 { 2, 3, 4, 5, 6 },
	                 { 4, 5, 6, 7, 8 },
	                 { 5, 4, 3, 2, 6 },
	                 { 2, 5, 4, 3, 1 } };

	// Creating 2D array of pointers using Dynamic Memory
	// allocation through malloc() function
	int*** arr2 = malloc(5 * sizeof(int**));
	for (int i = 0; i < 5; i++) {
		arr2[i] = malloc(5 * sizeof(int*));
	}

	// Initialising each element of the
	// pointer array with the address of
	// element present in the other array
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			arr2[i][j] = &arr1[i][j];
		}
	}

	// Printing the array using
	// the array of pointers
	printf("The values are\n");
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
			printf("%d ", *arr2[i][j]);
		}
	printf("\n");
	}

	return 0;
}


   Output:
The values are
0 1 2 3 4
2 3 4 5 6
4 5 6 7 8
5 4 3 2 6
2 5 4 3 1



---
https://dyclassroom.com/c/c-pointers-and-two-dimensional-array

C - Pointers and Two Dimensional Array

   In this tutorial we will learn to work with two dimensional arrays using pointers in C programming
   language.

   In the previous tutorial Pointers and One Dimensional Array we learned to work with one
   dimensional character array. Feel free to checkout that tutorial.

Creating a two dimensional array
   To keep things simple we will create a two dimensional integer array num having 3 rows and 4 columns.
int num[3][4] = {
  {1, 2,  3,  4},
  {5, 6,  7,  8},
  {9, 10, 11, 12}
};

         col -->
            0      1      2      3
  row    0 [  1 ] [  2 ] [  3 ] [  4 ]
   |     1 [  5 ] [  6 ] [  7 ] [  8 ]
   V     2 [  9 ] [ 10 ] [ 11 ] [ 12 ]


   In the above image we are showing the two dimensional array having 3 rows and 4 columns.

   The compiler will allocate the memory for the above two dimensional array row-wise meaning the first
   element of the second row will be placed after the last element of the first row.

   row-wise memory allocation
   <--       row 0      -->|<--       row 1      -->|<--      row 2        -->
   [  1 ][  2 ][  3 ][  4 ] [  5 ][  6 ][  7 ][  8 ] [  9 ][ 10 ][ 11 ][ 12 ]
      |
      +-- first element of the array num


   And if we assume that the first element of the array is at address 1000 and the size of type int is 2
   bytes then the elements of the array will get the following allocated memory locations.

   row-wise memory allocation
   <--       row 0      -->|<--       row 1      -->|<--      row 2       -->
   [  1 ][  2 ][  3 ][  4 ] [  5 ][  6 ][  7 ][  8 ] [  9 ][ 10 ][ 11 ][ 12 ]  value
   [1000][1002][1004][1006] [1008][1010][1012][1014] [1016][1018][1020][1022]  address
      |
      +-- first element of the array num

Create pointer for the two dimensional array
   We have created the two dimensional integer array num so, our pointer will also be of type int.

   We will assign the address of the first element of the array num to the pointer ptr using the address
   of & operator.
int *ptr = &num[0][0];

Accessing the elements of the two dimensional array via pointer
   The two dimensional array num will be saved as a continuous block in the memory. So, if we increment
   the value of ptr by 1 we will move to the next block in the allocated memory.

   In the following code we are printing the content of the num array using for loop and by incrementing
   the value of ptr.
#include <stdio.h>

int main(void) {

	// 2d array
	int num[3][4] = {
		{1, 2, 3, 4},
		{5, 6, 7, 8},
		{9, 10, 11, 12}
	};

	// pointer ptr pointing at array num
	int *ptr = &num[0][0];

	// other variables
	int
		ROWS = 3,
		COLS = 4,
		TOTAL_CELLS = ROWS * COLS,
		i;

	// print the elements of the array num via pointer ptr
	for (i = 0; i < TOTAL_CELLS; i++) {
		printf("%d ", *(ptr + i));
	}

	return 0;
}

   Output:
1 2 3 4 5 6 7 8 9 10 11 12

Address mapping
   We can compute the address of an element of the array by using the rows and columns of the array. For
   this we use the following formula.
arr[i][j] = baseAddress + [(i x no_of_cols + j) x size_of_data_type]

   Where, arr is a two dimensional array. i and j denotes the ith row and jth column of the array.

   baseAddress denotes the address of the first element of the array. And no_of_cols is the total number
   of columns in the row.

   And size_of_data_type is the size of the type of the pointer. If the type is int then
   size_of_data_type = 2 bytes and if the type is char then size_of_data_type = 1 bytes.

   For example, in the case of num array the baseAddress = 1000, no_of_cols = 4 and size_of_data_type = 2.

   So, we can compute the memory address location of the element num[2][3] as follows.
// address of element at cell 2,3
num[2][3] = baseAddress + [(i x no_of_cols + j) x size_of_data_type]
          = 1000 + [(2 x 4 + 3) x 2]
          = 1000 + [(8 + 3) x 2]
          = 1000 + 22
          = 1022

   row-wise memory allocation
   <--    row 0   -->|<--    row 1   -->|<--    row 2   -->|<--    row 3   -->|
   [  1 ][  2 ][  3 ] [  4 ][  5 ][  6 ] [  7 ][  8 ][  9 ] [ 10 ][ 11 ][ 12 ]  value
   [1000][1002][1004] [1006][1008][1010] [1012][1014][1016] [1018][1020][1022]  address
      |
      +-- first element of the array num

Accessing the value of the two dimensional array via pointer using row and column of the array
   If we want to get the value at any given row, column of the array then we can use the value at the
   address of * operator and the following formula.
arr[i][j] = *(ptr + (i x no_of_cols + j))

   Where, arr is a two dimensional array and i and j denotes the ith row and jth column of the array.

   ptr holds the address of the first element of the array.

   And no_of_cols denotes the total number of column in the row of the array.

   In the following example we are finding the value at the location 2nd row and 3rd column of the array
   num.
// value at num[2][3] where, i = 2 and j = 3
num[2][3] = *(ptr + (i x no_of_cols + j))
          = *(ptr + (2 x 4 + 3))
          = *(ptr + 11)


Complete code

#include <stdio.h>

int main(void) {

	// 2d array
	int num[3][4] = {
		{1, 2, 3, 4},
		{5, 6, 7, 8},
		{9, 10, 11, 12}
	};

	int
		ROWS = 3,
		COLS = 4,
		i, j;

	// pointer
	int *ptr = #[0][0];

	// print the element of the array via pointer ptr
	for (i = 0; i < ROWS; i++) {
		for (j = 0; j < COLS; j++) {
			printf("%d ", *(ptr + i * COLS + j));
		}
		printf("\n");
	}

	return 0;
}

   Output:
1 2 3 4
5 6 7 8
9 10 11 12



---
https://www.folkstalk.com/2022/09/double-pointers-with-code-examples.html

   Double Pointers With Code Examples

   The solution to Double Pointers will be demonstrated using examples in this article.

/* when we define a pointer to pointer. The first pointer is used to
store the address of the variable. And thesecond pointer is used to
store the address of the first pointer.*/

/* The first pointer ptr1 stores the address of the variable and the
second pointer ptr2 stores the address of the first pointer. */

/* The diagrams in the source are a big help check em out */

   Another approach, which includes several samples of code, can be utilised to resolve the identical
   problem Double Pointers. This solution is explained below.
#include <stdio.h>

int main(void) {
	int value = 100;
	int *value_ptr = &value;
	int **value_double_ptr = &value_ptr;

	printf("Value: %d\n", value);
	printf("Pointer to value: %d\n", *value_ptr);
	printf("Double pointer to value: %d\n", **value_double_ptr);
}

   We've shown how to use programming to solve the Double Pointers problem with a slew of examples.

What is a double pointer?
   So, when we define a pointer to pointer. The first pointer is used to store the address of the
   variable. And the second pointer is used to store the address of the first pointer. That is why they
   are also known as double pointers.05-Dec-2019

#############################################################################################################
# Why do we use double pointers?                                                                            #
#    Double pointers can also be used when we want to alter or change the value of the pointer. In general  #
#    double pointers are used if we want to store or reserve the memory allocation or assignment even       #
#    outside of a function call we can do it using double pointer by just passing these functions with      #
#    **arg.                                                                                                 #
#############################################################################################################

What is a triple pointer?
   A triple-pointer is a pointer that points to a memory location where a double-pointer is being
   stored. The triple-pointer itself is just one pointer. Ex. int *** is a pointer, that points to the
   value of a double pointer, which in turn points to the value of a single pointer, which points to the
   value of an int.

What is double pointer in linked list?
   When you pass in a pointer to a function, the address value is being copied over to the function
   parameter. Due to the function's scope, that copy will vanish once it returns. By using a double
   pointer, you will be able to update the original pointer's value.

Is a 2D array a double pointer?
   An array is treated as a pointer that points to the first element of the array. 2D array is NOT
   equivalent to a double pointer! 2D array is "equivalent" to a "pointer to row".

What are types of pointers in C?
   There are majorly four types of pointers, they are:
	 * Null Pointer.
	 * Void Pointer.
	 * Wild Pointer.
	 * Dangling Pointer.

What is double in C example?
   Double data can be represents in real number (1, 10), decimals (0.1, 11.002) and minus (-1,
   -0.00002). It can hold approximately 15 to 16 digits before and after the decimal point. For example,
   4.5672, 2.45354, -5.22234, 3.12345678901, 0.15197e-7 etc.

What is void pointer?
   The void pointer in C is a pointer that is not associated with any data types. It points to some data
   location in the storage. This means it points to the address of variables. It is also called the
   general purpose pointer. In C, malloc() and calloc() functions return void * or generic pointers.



---
https://stackoverflow.com/questions/72398141/im-having-a-problem-understanding-double-pointers

I'm having a problem understanding double pointers

   I'm making a program to add items to a LIFO (last in first out) array, where the elements are
   inserted at the start of the array.

   Here is my code:
typedef struct neud {
	int num;
	struct neud *next;
} neud;

void add(neud** head,int val) {
	//creat a new neod
	neud* newNeod;
	newNeod = malloc(sizeof(neud));
	//assigning
	newNeod->num = val;
	newNeod->next= *head;
	//change the head;
	*head = newNeod;
}

int main() {
	 neud* head = NULL;
	 add(&head,10);
	 add(&head,20);
	 add(&head,30);

	 return 0;
}

   Everything works fine, but I don't understand precisely the need for a double-pointer here. Can
   someone explain this?

***
   Consider this simple program.
#include <stdio.h>

void f( int x ) {
	x = 10;
}

int main( void ) {
	int x = 0;

	f( x );

	printf( "x = %d\n", x );
}

   The program output is
x = 0

   That is the function f deals with a copy of the value of the variable x passed to the function. So
   changing the copy within the function has no effect relative to the original variable x.

   To change the original variable x in the function you need to pass it by reference. In C passing by
   reference means passing an object indirectly through a pointer to it. Thus dereferencing the pointer
   within the function you get a direct access to the object pointed to by the pointer and can change
   it.

   Compare the program below with this program above
#include <stdio.h>

void f( int *px ) {
	*px = 10;
}

int main( void ) {
	int x = 0;

	f( &x );

	printf( "x = %d\n", x );
}

   The program output is
x = 10

   So if you will declare your function like
void add(neud * head,int val);

   and call it like
add( head, 10 );

   then the function will deal with a copy of the value of the original pointer head. The value of the
   pointer itself will stay unchanged. So you need to pass the pointer by reference that is the function
   should be declared like
void add(neud** head,int val);

   and called like
add( &head, 10 );

***
   In C all arguments to functions are passed by value. That means the value used in the call is copied
   into the functions local argument variable.

   As such, the argument variable behaves like any other local variable, and its life-time ends with the
   end of the function. All changes you made to the variable will be lost when the function returns.

   Now think about the head pointer. If you don't pass a pointer to a pointer, and just assign to head:
void add(neud* head,int val){
	// ...
	head = newNeod;
}

   Now that assignment will be lost.

   When you pass a pointer to a pointer, you emulate call by reference. The function now has a pointer
   to the original pointer. You can dereference the double-pointer head to get the original variable
   head in the main function.


---
