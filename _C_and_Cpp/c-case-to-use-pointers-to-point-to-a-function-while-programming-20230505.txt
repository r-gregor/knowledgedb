filename: c_case-to-use-pointers-to-point-to-a-function-while-programming_20230505.txt
https://cstdspace.quora.com/In-what-case-would-you-ever-want-to-use-pointers-to-point-to-a-function-while-programming-in-C-5?__nsrc__=4&__snid3__=52767025735

In what case would you ever want to use pointers to point to a function while programming in C?

Several reasons: callback routines, loading functions from shared libraries, implementing state machines,
etc.

Callback routines
You pass a function pointer as an argument to another function, such that it can be called from that
function. Everybody’s already mentioned the qsort routine, here’s a similar example:

Suppose we have a simple bubble sort routine operating on int arrays (using a bubble sort because it’s
short, not because it’s quick):

	/**
	* Sorts integer arrays in ascending order;
	* assumes the presence of a swap function
	*/
	void bubble( int *arr, size_t size ) {
	for ( size_t i = 0; i < size-1; i++ )
		for ( size_t j = i+1; j < size; j++ ) {
			if ( arr[j] < arr[i] ) {
				swap( &arr[i], &arr[j] );
			}
		}
	}

This works, but what if you wanted to sort the array in descending order, or asciibetical order, or some
other ordering? You could hack the sorting function with a bunch of conditionals, or you could pass a
pointer to the comparison function as an argument:

	/**
	 * Sorts integer arrays in order according
	 * to the function cmp points to.
	 */
	void bubble( int *arr, size_t size,
	  int (*cmp)(const int, const int)) {
		for ( size_t i = 0; i < size-1; i++ ) {
			for ( size_t j = i+1; j < size; j++ ) {
				if (cmp( arr[j], arr[i] ) < 0 ) {
					swap( &arr[i], &arr[j] );
				}
			}
		}
	}

The convention is that the function pointed to by cmp returns an integer value such that

	a value less than zero indicates that the first argument should be ordered before the second argument;
	a value greater than zero indicates that the first argument should be ordered after the second argument;
	a value equal to zero indicates that the two elements have the same ordering;

So in the code above, if the result of cmp( arr[j], arr[i] ) is less than 0, that means that the value
in arr[j] should come before the value in arr[i].

So to sort the array in different orders, you write different comparison functions like

	/**
	 * Used to sort an int array in ascending order
	 */
	int cmp_int_asc( const int *a, const int *b ) {
		if ( *a < *b )
			return -1;
		if ( *a > *b )
			return 1;
	
		return 0;
	}
	
	/**
	 * Used to sort an array in descending order
	 */
	int cmp_int_desc( const int *a, const int *b ) {
		if ( *a < *b )
			return 1;
		if ( *a > *b )
			return -1;
	
		return 0;
	}
	
	/**
	 * Used to sort an array in asciibetical order
	 */
	int cmp_int_ascii( const int *a, const int *b ) {
		char abuf[15], bbuf[15];
		sprintf( abuf, "%d", *a );
		sprintf( bbuf, "%d", *b );
	
		return strcmp( abuf, bbuf );
	}

And you’d use it something like this:

int main( void ) {
	int arr[] = {9, 3, 6, 2, 4, 5, 1, 7, 0, 8 };

	/**
	 * sort the array in ascending order
	 */
	bubble( arr, 10, cmp_int_asc );

	/**
	 * sort the array in descending order
	 */
	bubble( arr, 10, cmp_int_desc );

	/**
	 * sort the array in asciibetical order
	 */
	bubble( arr, 10, cmp_int_ascii );
}

Loading functions from shared libraries
Functions from shared libraries are loaded at run time, not at link time, so you need to use a pointer
to access the function in the shared library (sort of similar to how dynamic memory routines have to
return a pointer). Here’s an example from the dlopen man page:

#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>
#include <gnu/lib-names.h>	/* Defines LIBM_SO (which will be a
							   string such as "libm.so.6") */
int main(void) {
	void *handle;
	double (*cosine)(double);
	char *error;

	handle = dlopen(LIBM_SO, RTLD_LAZY);
	if (!handle) {
		fprintf(stderr, "%s\n", dlerror());
		exit(EXIT_FAILURE);
	}
	dlerror();	  /* Clear any existing error */

	cosine = (double (*)(double)) dlsym(handle, "cos");

	/* According to the ISO C standard, casting between function
	   pointers and 'void *', as done above, produces undefined results.
	   POSIX.1-2001 and POSIX.1-2008 accepted this state of affairs and
	   proposed the following workaround:


	 *(void **) (&cosine) = dlsym(handle, "cos");

	 This (clumsy) cast conforms with the ISO C standard and will
	 avoid any compiler warnings.

	 The 2013 Technical Corrigendum 1 to POSIX.1-2008 improved matters
	 by requiring that conforming implementations support casting
	 'void *' to a function pointer.	Nevertheless, some compilers
	 (e.g., gcc with the '-pedantic' option) may complain about the
	 cast used in this program.
	
	*/

	error = dlerror();
	if (error != NULL) {
		fprintf(stderr, "%s\n", error);
		exit(EXIT_FAILURE);
	}

	printf("%f\n", (*cosine)(2.0));
	dlclose(handle);
	exit(EXIT_SUCCESS);
}

State machines
I don’t have a good example of a state machine handy. Here’s a short example I found online — do
not take this as an endorsement of the site:
[https://kjarvel.wordpress.com/2011/10/26/table-driven-state-machine-using-function-pointers-in-c/]

---
https://kjarvel.wordpress.com/2011/10/26/table-driven-state-machine-using-function-pointers-in-c/

Table-driven State Machine using function pointers in C

This short example shows how to implement a simple 4-state state-machine using function pointers in the C
programming language.

In the example below, the state functions and their data is enclosed in a "State Table". The control
function (main) calls each function one-by-one in a loop.

This way, you ensure (force) that state functions:

- Will have the same prototype (arguments).
- Will be handled by similar error handling (the return value can be checked).
- Are called in correct order – there is no manually updated "list of function calls".
- Can be dynamically added, removed or reordered in the state table.

Example code

#include <stdio.h>

/* Forward declaration of state structure */
struct state;

/* State function prototype */
typedef int (state_func)(const struct state *);

/* Structure containing state function and data */
struct state {
	int         state;
	int         data;
	state_func  *func_p;
};

/* State function declarations */
static int state_1(const struct state *);
static int state_2(const struct state *);
static int state_3(const struct state *);
static int state_4(const struct state *);

/* State table */
static const struct state state_arr[] = {
	{ 1, 0, state_1 },
	{ 2, 0, state_2 },
	{ 3, 0, state_3 },
	{ 4, 0, state_4 },
	{ 0, 0, NULL }
};

/* Main control function */
int main(void) {
	const struct state *s_p;

	s_p = &state_arr[0];

	/* Call each valid state one by one, in turn */
	while (s_p->func_p) {
		s_p->func_p(s_p);
		s_p++;
	}

	return 0;
}

static int state_1(const struct state *s_p) {
	printf("Hello from state %d\n", s_p->state);
	return 0;
}

static int state_2(const struct state *s_p) {
	return state_1(s_p);
}

static int state_3(const struct state *s_p) {
	return state_1(s_p);
}

static int state_4(const struct state *s_p) {
	return state_1(s_p);
}

Event handling
The table can also be used as a fail-safe way to handle events of different types. For example, lets say
your application handles "signals" or "events" of some type, perhaps there is an OS (RTOS) sending signals
between processes. To react on those signals, the function table can be used.
In the  example below, let’s pretend that one event with id "3" came in. Just call the handler for event "3".
Then another event with id "1" came in. The handler for event "1" is called. Note that the example below is
hard-coded, you would probably use an event id variable to call handler "3" and "1".

Example code

static void test(void) {
	/* The table can also be used for reacting on events
	   or signals, like for (stupid) example: */
	state_arr[3].func_p(&state_arr[3]);
	state_arr[1].func_p(&state_arr[1]);
}

Further reading
To read more about table-driven design, and how it can replace many over-designed inheritance solutions for
simple problems, see this great article: http://www.codeproject.com/KB/architecture/table_driven.aspx


---

