filename: c_triple-pointers_20240626.txt
https://stackoverflow.com/questions/21488544/triple-pointers-in-c-is-it-a-matter-of-style

Triple pointers in C: is it a matter of style?

***
   I feel like triple pointers in C are looked at as "bad". For me, it makes sense to use them at times.

   Starting from the basics, the single pointer has two purposes: to create an array, and to allow a
   function to change its contents (pass by reference):
char *a;
a = malloc...

   or
void foo (char *c); //means I'm going to modify the parameter in foo.
{ *c = 'f'; }

char a;
foo(&a);

   The double pointer can be a 2D array (or array of arrays, since each "column" or "row" need not be
   the same length). I personally like to use it when I need to pass a 1D array:
void foo (char **c); //means I'm going to modify the elements of an array in foo.
{ (*c)[0] = 'f'; }

char *a;
a = malloc...
foo(&a);

   To me, that helps describe what foo is doing. However, it is not necessary:
void foo (char *c); //am I modifying a char or just passing a char array?
{ c[0] = 'f'; }

char *a;
a = malloc...
foo(a);

   will also work.

   According to the first answer to this question, if foo were to modify the size of the array, a
   double pointer would be required.

   One can clearly see how a triple pointer (and beyond, really) would be required. In my case if I were
   passing an array of pointers (or array of arrays), I would use it. Evidently it would be required if
   you are passing into a function that is changing the size of the multi-dimensional array. Certainly
   an array of arrays of arrays is not too common, but the other cases are.

   So what are some of the conventions out there? Is this really just a question of style/readability
   combined with the fact that many people have a hard time wrapping their heads around pointers?

***
   Using triple+ pointers is harming both readability and maintainability.

   Let's suppose you have a little function declaration here:
void fun(int***);

   Hmmm. Is the argument a three-dimensional jagged array, or pointer to two-dimensional jagged array,
   or pointer to pointer to array (as in, function allocates an array and assigns a pointer to int
   within a function)

   Let's compare this to:
void fun(IntMatrix*);

   Surely you can use triple pointers to int to operate on matrices. But that's not what they are. The
   fact that they're implemented here as triple pointers is irrelevant to the user.

   Complicated data structures should be encapsulated. This is one of manifest ideas of Object Oriented
   Programming. Even in C, you can apply this principle to some extent. Wrap the data structure in a
   struct (or, very common in C, using "handles", that is, pointers to incomplete type - this idiom will
   be explained later in the answer).

   Let's suppose that you implemented the matrices as jagged arrays of double. Compared to contiguous 2D
   arrays, they are worse when iterating over them (as they don't belong to a single block of contiguous
   memory) but allow for accessing with array notation and each row can have different size.

   So now the problem is you can't change representations now, as the usage of pointers is hard-wired
   over user code, and now you're stuck with inferior implementation.

   This wouldn't be even a problem if you encapsulated it in a struct.
typedef struct Matrix_ {
	double** data;
} Matrix;

double get_element(Matrix* m, int i, int j) {
	return m->data[i][j];
}

   simply gets changed to
typedef struct Matrix_ {
	int width;
	double data[]; //C99 flexible array member
} Matrix;

double get_element(Matrix* m, int i, int j) {
	return m->data[i*m->width+j];
}

   The handle technique works like this: in the header file, you declare a incomplete struct and all the
   functions that work on the pointer to the struct:
// struct declaration with no body.
struct Matrix_;
// optional: allow people to declare the matrix with Matrix* instead of struct Matrix*
typedef struct Matrix_ Matrix;

Matrix* create_matrix(int w, int h);
void destroy_matrix(Matrix* m);
double get_element(Matrix* m, int i, int j);
double set_element(Matrix* m, double value, int i, int j);

   in the source file you declare the actual struct and define all the functions:
typedef struct Matrix_ {
	int width;
	double data[]; //C99 flexible array member
} Matrix;

double get_element(Matrix* m, int i, int j) {
	return m->data[i*m->width+j];
}

/* definition of the rest of the functions */

   The rest of the world doesn't know what does the struct Matrix_ contain and it doesn't know the size
   of it. This means users can't declare the values directly, but only by using pointer to Matrix and
   the create_matrix function. However, the fact that the user doesn't know the size means the user
   doesn't depend on it - which means we can remove or add members to struct Matrix_ at will.

***
   Most of the time, the use of 3 levels of indirection is a symptom of bad design decisions made
   elsewhere in the program. Therefore it is regarded as bad practice and there are jokes about "three
   star programmers" where, unlike the the rating for restaurants, more stars means worse quality.

   The need for 3 levels of indirection often originates from the confusion about how to properly
   allocate multi-dimensional arrays dynamically. This is often taught incorrectly even in programming
   books, partially because doing it correctly was burdensome before the C99 standard. My Q&A post
   Correctly allocating multi-dimensional arrays addresses that very issue and also illustrates how
   multiple levels of indirection will make the code increasingly hard to read and maintain.

   Though as that post explains, there are some situations where a type** might make sense. A variable
   table of strings with variable length is such an example. And when that need for type** arises, you
   might soon be tempted to use type***, because you need to return your type** through a function
   parameter.

   Most often this need arises in a situation where you are designing some manner of complex ADT. For
   example, lets say that we are coding a hash table, where each index is a 'chained' linked list, and
   each node in the linked list an array. The proper solution then is to re-design the program to use
   structs instead of multiple levels of indirection. The hash table, linked list and array should be
   distinct types, autonomous types without any awareness of each other.

   So by using proper design, we will avoid the multiple stars automatically.

   But as with every rule of good programming practice, there are always exceptions. It is perfectly
   possible to have a situation like:
     * Must implement an array of strings.
     * The number of strings is variable and may change in run-time.
     * The length of the strings is variable.

   You can implement the above as an ADT, but there may also be valid reasons to keep things simple and
   just use a char* [n]. You then have two options to allocate this dynamically:
char* (*arr_ptr)[n] = malloc( sizeof(char*[n]) );

   or
char** ptr_ptr = malloc( sizeof(char*[n]) );

   The former is more formally correct, but also cumbersome. Because it has to be used as:
       (*arr_ptr)[i] = "string";

    while the alternative can be used as:
        ptr_ptr[i] = "string";.

   Now suppose we have to place the malloc call inside a function and the return type is reserved for an
   error code, as is custom with C APIs. The two alternatives will then look like this:

err_t alloc_arr_ptr (size_t n, char* (**arr)[n]) {
	*arr = malloc( sizeof(char*[n]) );
	return *arr == NULL ? ERR_ALLOC : OK;
}

   or

err_t alloc_ptr_ptr (size_t n, char*** arr) {
	*arr = malloc( sizeof(char*[n]) );
	return *arr == NULL ? ERR_ALLOC : OK;
}

   It is quite hard to argue and say that the former is more readable, and it also comes with the
   cumbersome access needed by the caller. The three star alternative is actually more elegant, in this
   very specific case.

   So it does us no good to dismiss 3 levels of indirection dogmatically. But the choice to use them
   must be well-informed, with an awareness that they may create ugly code and that there are other
   alternatives.

***
   So what are some of the conventions out there? Is this really just a question of style/readability
   combined with the fact that many people have a hard time wrapping their heads around pointers?

   Multiple indirection is not bad style, nor black magic, and if you're dealing with high-dimension
   data then you're going to be dealing with high levels of indirection; if you're really dealing with a
   pointer to a pointer to a pointer to T, then don't be afraid to write T ***p;. Don't hide pointers
   behind typedefs unless whoever is using the type doesn't have to worry about its "pointer-ness". For
   example, if you're providing the type as a "handle" that gets passed around in an API, such as:
typedef ... *Handle;

Handle h = NewHandle();
DoSomethingWith( h, some_data );
DoSomethingElseWith( h, more_data );
ReleaseHandle( h );

   then sure, typedef away. But if h is ever meant to be dereferenced, such as
printf( "Handle value is %d\n", *h );

   then don't typedef it. If your user has to know that h is a pointer to int in order to use it
   properly, then that information should not be hidden behind a typedef.

   I will say that in my experience I haven't had to deal with higher levels of indirection; triple
   indirection has been the highest, and I haven't had to use it more than a couple of times. If you
   regularly find yourself dealing with >3-dimensional data, then you'll see high levels of indirection,
   but if you understand how pointer expressions and indirection work it shouldn't be an issue.

   Or a pointer to pointer to int, or pointer to pointer to pointer to pointer to struct grdlphmp,
   or whatever.

***
   After two levels of indirection, comprehension becomes difficult. Moreover if the reason you're
   passing these triple (or more) pointers into your methods is so that they can re-allocate and re-set
   some pointed-to memory, that gets away from the concept of methods as "functions" that just return
   values and don't affect state. This also negatively affects comprehension and maintainability beyond
   some point.

   But more fundamentally, you've hit upon one of the main stylistic objections to the triple pointer
   right here:

  One can clearly see how a triple pointer (and beyond, really) would be required.

   It's the "and beyond" that is the issue here: once you get to three levels, where do you stop? Surely
   it's possible to have an aribitrary number of levels of indirection. But it's better to just have a
   customary limit someplace where comprehensibility is still good but flexibility is adequate. Two's a
   good number. "Three star programming", as it's sometimes called, is controversial at best; it's
   either brilliant, or a headache for those who need to maintain the code later.

***
   Unfortunately you misunderstood the concept of pointer and arrays in C. Remember that arrays are not
   pointers.

     Starting from the basics, the single pointer has two purposes: to create an array, and to allow a
     function to change its contents (pass by reference):

   When you declare a pointer, then you need to initialize it before using it in the program. It can be
   done either by passing address of a variable to it or by dynamic memory allocation.
   In latter, pointer can be used as indexed arrays (but it is not an array).

     The double pointer can be a 2D array (or array of arrays, since each "column" or "row" need not be
     the same length). I personally like to use it when I need to pass a 1D array:

   Again wrong. Arrays are not pointers and vice-versa. A pointer to pointer is not the 2D array.
   I would suggest you to read the [**1][http://www.c-faq.com/aryptr/index.html]c-faq section 6. Arrays and Pointers.


---
[**1]
https://c-faq.com/aryptr/index.html

6. Arrays and Pointers

6.1 I had the definition char a[6] in one source file, and in another I declared extern char *a. Why didn't
    it work?

In one source file you defined an array of characters and in the other you declared a pointer to characters.
The declaration extern char *a does not declare an array and therefore does not match the actual definition.
The type pointer-to-type-T is not the same as array-of-type-T. Use extern char a[].

6.2 But I heard that char a[] was identical to char *a.
Not at all. (What you heard has to do with formal parameters to functions; see question 6.4.) Arrays are not
pointers, though they are closely related (see question 6.3) and can be used similarly (see questions 4.1, 6.8,
6.10, and 6.14).

The array declaration char a[6] requests that space for six characters be set aside, to be known by the name
''a''. That is, there is a location named ''a'' at which six characters can sit. The pointer declaration
char *p, on the other hand, requests a place which holds a pointer, to be known by the name ''p''. This
pointer can point almost anywhere: to any char, or to any contiguous array of chars, or nowhere [footnote]
(see also questions 5.1 and 1.30).

As usual, a picture is worth a thousand words. The declarations

	char a[] = "hello";
	char *p = "world";

would initialize data structures which could be represented like this:

a: [h][e][l][l][o][\0]
p: []-->[h][e][l][l][o][\0]

It is useful to realize that a reference like x[3] generates different code depending on whether x is an
array or a pointer. Given the declarations above, when the compiler sees the expression a[3], it emits code
to start at the location ''a'', move three past it, and fetch the character there. When it sees the
expression p[3], it emits code to start at the location ''p'', fetch the pointer value there, add three to
the pointer, and finally fetch the character pointed to. In other words, a[3] is three places past (the
start of) the object named a, while p[3] is three places past the object pointed to by p. In the example above,
both a[3] and p[3] happen to be the character 'l', but the compiler gets there differently. (The essential
difference is that the values of an array like a and a pointer like p are computed differently whenever they
appear in expressions, whether or not they are being subscripted, as explained further in question 6.3.) See
also question 1.32.

6.3 So what is meant by the ''equivalence of pointers and arrays'' in C?

Much of the confusion surrounding arrays and pointers in C can be traced to a misunderstanding of this
statement. Saying that arrays and pointers are ''equivalent'' means neither that they are identical nor even
interchangeable. What it means is that array and pointer arithmetic is defined such that a pointer can be
conveniently used to access an array or to simulate an array. In other words, as Wayne Throop has put it, it's
''pointer arithmetic and array indexing [that] are equivalent in C, pointers and arrays are different.'')

Specifically, the cornerstone of the equivalence is this key definition:
    A reference to an object of type array-of-T which appears in an expression decays (with three exception)
    into a pointer to its first element; the type of the resultant pointer is pointer-to-T. 

That is, whenever an array appears in an expression, the compiler implicitly generates a pointer to the arra
's first element, just as if the programmer had written &a[0]. (The exceptions are when the array is the
operand of a sizeof or & operator, or is a string literal initializer for a character array. [footnote] See
questions 6.23, 6.12, and 1.32, respectively.)

As a consequence of this definition, and in spite of the fact that the underlying arrays and pointers are
quite different, the compiler doesn't apply the array subscripting operator [] that differently to arrays
and pointers, after all.[footnote] Given an array a and pointer p, an expression of the form a[i] causes the
array to decay into a pointer, following the rule above, and then to be subscripted just as would be a
pointer variable in the expression p[i] (although the eventual memory accesses will be different, as
explained in question 6.2). If you were to assign the array's address to the pointer:

    p = a;

then p[3] and a[3] would access the same element.

This harmony of access explains how pointers can access arrays, serve in their stead as function parameters
(see question 6.4), and simulate dynamic arrays (see question 6.14).

See also questions 6.8, 6.10, and 6.14.


6.4 If they're so different, then why are array and pointer declarations interchangeable as function formal
parameters?

It's supposed to be a convenience.

Since arrays decay immediately into pointers, an array is never actually passed to a function. You can
pretend that a function receives an array as a parameter, and illustrate it by declaring the corresponding
parameter as an array:

	void f(char a[])
	{ ... }

Interpreted literally, this declaration would have no use, so the compiler turns around and pretends that you'd
written a pointer declaration, since that's what the function will in fact receive:

	void f(char *a)
	{ ... }

There's nothing particularly wrong with talking about a function as if it ''receives'' an array, if the
function is traditionally used to operate on arrays, or if the parameter is naturally treated within the
function as an array.

This conversion of array-like declarators into pointers holds only within function formal parameter declarations,
nowhere else. If the conversion bothers you, you're under no compulsion to make use of it; many programmers
have concluded that the confusion it causes outweighs the small advantage of having the declaration ''look like''
the call or the uses within the function. (Note that the conversion happens only once; something like
char a2[][] won't work. See questions 6.18 and 6.19.)

See also question 6.21.

6.4b So arrays are passed by reference, even though the rest of C uses pass by value?

That's one way of thinking about it. See question 4.11.

6.5 Why can't I do something like this?

	extern char *getpass();
	char str[10];
	str = getpass("Enter password: ");

 Arrays are ''second-class citizens'' in C; one upshot of this prejudice is that you cannot assign to them
 see also question 6.7). When you need to copy the contents of one array to another, you must do so
 explicitly. In the case of char arrays, the strcpy routine is usually appropriate:

	strcpy(str, getpass("Enter password: "));

(When you want to pass arrays around without copying them, you can use pointers and simple assignment. See
also question 4.1.)

See also question 8.2.

6.6 If you can't assign to arrays, then how can

	int f(char str[]) {
		if(str[0] == '\0')
			str = "none";
		...
	}

work?

In this code, str is a function parameter, so its declaration is rewritten by the compiler as described in
question 6.4. In other words, str is a pointer (of type char *), and it is legal to assign to it.

6.6b And what about this? Isn't this an array assignment?

	char a[] = "Hello, world!\n";

No, that's an initialization. You are allowed to initialize arrays when you define them.

6.7 How can an array be an lvalue, if you can't assign to it?

The term ''lvalue'' doesn't quite mean ''something you can assign to''; a better definition is ''something
that has a location (in memory).'' [footnote] The ANSI/ISO C Standard goes on to define a
''modifiable lvalue''; an array is not a modifiable lvalue. See also question 6.5.

6.8 Practically speaking, what is the difference between arrays and pointers?

An array is a single, preallocated chunk of contiguous elements (all of the same type), fixed in size and
location. A pointer is a reference to any data element (of a particular type) anywhere. A pointer must be
assigned to point to space allocated elsewhere, but it can be reassigned (and the space, if derived from
malloc, can be resized) at any time. A pointer can point to an array, and can simulate (along with malloc) a
dynamically allocated array, but a pointer is a much more general data structure (see also question 4.1).

Due to the so-called equivalence of arrays and pointers (see question 6.3), arrays and pointers often seem
interchangeable, and in particular a pointer to a block of memory assigned by malloc is frequently treated
(and can be referenced using []) exactly as if it were a true array. See questions 6.14 and 6.16. (Be
careful with sizeof; see question 7.28.)

See also questions 1.32, 6.10, and 20.14.

6.9 Someone explained to me that arrays were really just constant pointers.

This is a bit of an oversimplification. An array name is ''constant'' in that it cannot be assigned to, but
an array is not a pointer, as the discussion and pictures in question 6.2 should make clear. See also
questions 6.3, 6.8, and 6.10.

6.10 I'm still mystified. Is a pointer a kind of array, or is an array a kind of pointer?

An array is not a pointer, nor vice versa. An array reference (that is, any mention of an array in a value
context), turns into a pointer (see questions 6.2 and 6.3).

There are perhaps three ways to think about the situation:
    Pointers can simulate arrays (though that's not all; see question 4.1).
    There's hardly such a thing as an array (it is, after all, a ''second-class citizen''); the subscripting
    operator [] is in fact a pointer operator.
    At a higher level of abstraction, a pointer to a block of memory is effectively the same as an array
    (though this says nothing about other uses of pointers).

But, to reiterate, here are two ways not to think about it:

    4. ''They're completely the same.'' (False; see question 6.2.)
    5. ''Arrays are constant pointers.'' (False; see question 6.9.)

See also question 6.8.

6.11 I came across some ''joke'' code containing the ''expression'' 5["abcdef"] . How can this be legal C?

Yes, Virginia, array subscripting is commutative in C. [footnote] This curious fact follows from the pointer
definition of array subscripting, namely that a[e] is identical to *((a)+(e)), for any two expressions a and e,
as long as one of them is a pointer expression and one is integral. The ''proof'' looks like

    a[e]
    *((a) + (e))    (by definition)
    *((e) + (a))    (by commutativity of addition)
    e[a]            (by definition)

This unsuspected commutativity is often mentioned in C texts as if it were something to be proud of, but it
finds no useful application outside of the Obfuscated C Contest (see question 20.36).

Since strings in C are arrays of char, the expression "abcdef"[5] is perfectly legal, and evaluates to the
character 'f'. You can think of it as a shorthand for

    char *tmpptr = "abcdef";
    ... tmpptr[5] ...

See question 20.10 for a realistic example.

6.12 Since array references decay into pointers, if arr is an array, what's the difference between arr and &arr?

The type.

In Standard C, &arr yields a pointer, of type pointer-to-array-of-T, to the entire array. (In pre-ANSI C,
the & in &arr generally elicited a warning, and was generally ignored.) Under all C compilers, a simple
reference (without an explicit &) to an array yields a pointer, of type pointer-to-T, to the array's first
element.

For a simple array
	int a[10];

a reference to a has type ''pointer to int,'' and &a is ''pointer to array of 10 ints.'' For a two
dimensional array like
	int array[NROWS][NCOLUMNS];

a reference to array has type ''pointer to array of NCOLUMNS ints,'' while &array has type ''pointer to
array of NROWS arrays of NCOLUMNS ints.''

See also questions 6.3, 6.13, and 6.18.

6.13 How do I declare a pointer to an array?

Usually, you don't want to. When people speak casually of a pointer to an array, they usually mean a pointer
to its first element.

Instead of a pointer to an array, consider using a pointer to one of the array's elements. Arrays of type T
decay into pointers to type T (see question 6.3), which is convenient; subscripting or incrementing the
resultant pointer will access the individual members of the array. True pointers to arrays, when subscripted
or incremented, step over entire arrays (see below), and are generally useful only when operating on arrays
of arrays, [footnote] if at all. (See also question 6.18.)

If you really need to declare a pointer to an entire array, use something like ''int (*ap)[N];'' where N is
the size of the array. (See also question 1.21.) If the size of the array is unknown, N can in principle be
omitted, but the resulting type, ''pointer to array of unknown size,'' is useless.

Here is an example showing the difference between simple pointers and pointers to arrays. Given the declarations

int a1[3] = {0, 1, 2};
int a2[2][3] = {{3, 4, 5}, {6, 7, 8}};
int *ip;        /* pointer to int */
int (*ap)[3];   /* pointer to array [3] of int */

you could use the simple pointer-to-int, ip, to access the one-dimensional array a1:

ip = a1;
printf("%d ", *ip);
ip++;
printf("%d\n", *ip);

This fragment would print

    0 1

An attempt to use a pointer-to-array, ap, on a1:

    ap = &a1;
    printf("%d\n", **ap);
    ap++;                        /* WRONG */
    printf("%d\n", **ap);        /* undefined */

would print 0 on the first line and something undefined on the second (and might crash). The pointer-to
array would only be at all useful in accessing an array of arrays, such as a2:

    ap = a2;
    printf("%d %d\n", (*ap)[0], (*ap)[1]);
    ap++;        /* steps over entire (sub)array */
    printf("%d %d\n", (*ap)[0], (*ap)[1]);

This last fragment would print

    3 4
    6 7

See also question 6.12.

Additional links: [https://c-faq.com/aryptr/ptrary2.html]further reading

6.14 How can I set an array's size at run time?
How can I avoid fixed-sized arrays?

The equivalence between arrays and pointers (see question 6.3) allows a pointer to malloc'ed memory to
simulate an array quite effectively. After executing

    #include <stdlib.h>
    int *dynarray;
    dynarray = malloc(10 * sizeof(int));

(and if the call to malloc succeeds), you can reference dynarray[i] (for i from 0 to 9) almost as if
dynarray were a conventional, statically-allocated array (int a[10]). The only difference is that sizeof
will not give the size of the ''array'' (see question 7.28. See also questions 1.31b, 6.16, 7.7, and 7.29.

6.15 How can I declare local arrays of a size matching a passed-in array?

Until recently, you couldn't; array dimensions in C traditionally had to be compile-time constants. However,
C99 introduces variable-length arrays (VLA's) which solve this problem; local arrays may have sizes set by
variables or other expressions, perhaps involving function parameters. (gcc has provided parameterized
arrays as an extension for some time.) If you can't use C99 or gcc, you'll have to use malloc, and remember
to call free before the function returns. See also questions 6.14, 6.16, 6.19, 7.22, and maybe 7.32.

6.16 How can I dynamically allocate a multidimensional array?

The traditional solution is to allocate an array [footnote] of pointers to pointers, and then initialize
each pointer to a dynamically-allocated ''row.'' Here is a two-dimensional example:

#include <stdlib.h>

int **array1 = malloc(nrows * sizeof(int *));
for(i = 0; i < nrows; i++)
	array1[i] = malloc(ncolumns * sizeof(int));

(In real code, of course, all of malloc's return values would be checked. You can also use sizeof(*array1) and
sizeof(**array1) instead of sizeof(int *) and sizeof(int); see [footnote] .)

You can keep the array's contents contiguous, at the cost of making later reallocation of individual rows
more difficult, with a bit of explicit pointer arithmetic:

	int **array2 = malloc(nrows * sizeof(int *));
	array2[0] = malloc(nrows * ncolumns * sizeof(int));
	for(i = 1; i < nrows; i++)
		array2[i] = array2[0] + i * ncolumns;

In either case (i.e for array1 or array2), the elements of the dynamic array can be accessed with normal
looking array subscripts: arrayx[i][j] (for 0 <= i < nrows and 0 <= j < ncolumns). Here is a schematic
illustration of the layout of array1 and array2:

array1: []-->[][][][][][]
        []-->[][][][][][]
        []-->[][][][][][]

array2: []-->[][][][][][][][][][][][][][][][][][][][][][][][]
                        |                 |
        []--------------+                 |
        []--------------------------------+

If the double indirection implied by the above schemes is for some reason unacceptable,[footnote] you can
simulate a two-dimensional array with a single, dynamically-allocated one-dimensional array:

	int *array3 = malloc(nrows * ncolumns * sizeof(int));

However, you must now perform subscript calculations manually, accessing the i,jth element with the expression

array3[i * ncolumns + j]

and this array cannot necessarily be passed to functions which expect multidimensional arrays. (A macro such as

	#define Arrayaccess(a, i, j) ((a)[(i) * ncolumns + (j)])

could hide the explicit calculation, but invoking it would require parentheses and commas which wouldn't
look exactly like conventional C multidimensional array syntax, and the macro would need access to at least
one of the dimensions, as well. See also question 6.19.)

Yet another option is to use pointers to arrays:

	int (*array4)[NCOLUMNS] = malloc(nrows * sizeof(*array4));

or even

	int (*array5)[NROWS][NCOLUMNS] = malloc(sizeof(*array5));

but the syntax starts getting horrific (accesses to array5 look like (*array5)[i][j]), and at most one
dimension may be specified at run time.

With all of these techniques, you may of course need to remember to free the arrays when they are no longer
needed; in the case of array1 and array2 this takes several steps (see also question 7.23):

	for(i = 0; i < nrows; i++)
		free((void *)array1[i]);
	free((void *)array1);

	free((void *)array2[0]);
	free((void *)array2);

Also, you cannot necessarily intermix dynamically-allocated arrays with conventional, statically-allocated
ones (see question 6.20, and also question 6.18).

Finally, in C99 you can use a variable-length array.

All of these techniques can also be extended to three or more dimensions. Here is a three-dimensional
version of the first technique (which, like the rest of the fragments presented here, requires error
checking before being used in a real program):

	int ***a3d = (int ***)malloc(xdim * sizeof(int **));
	for(i = 0; i < xdim; i++) {
		a3d[i] = (int **)malloc(ydim * sizeof(int *));
		for(j = 0; j < ydim; j++)
			a3d[i][j] = (int *)malloc(zdim * sizeof(int));
	}

See also question 20.2.

6.17 Here's a neat trick: if I write

	int realarray[10];
	int *array = &realarray[-1];

I can treat array as if it were a 1-based array.

Although this technique is attractive (and was used in old editions of the book Numerical Recipes in C), it
is not strictly conforming to the C Standard. Pointer arithmetic is defined only as long as the pointer
points within the same allocated block of memory, or to the imaginary ''terminating'' element one past it;
otherwise, the behavior is undefined, even if the pointer is not dereferenced. The code above computes a
pointer to memory before the beginning of realarray and could fail if, while subtracting the offset, an
illegal address were generated (perhaps because the address tried to ''wrap around'' past the beginning of
some memory segment).

Additional links: [https://c-faq.com/aryptr/Virginia.html] ''Yes, Virginia''.

6.18 My compiler complained when I passed a two-dimensional array to a function expecting a pointer to a pointer.

The rule (see question 6.3) by which arrays decay into pointers is not applied recursively. (Once the rule
has been applied once, the result is a pointer to which the rule no longer applies.) An array of arrays (i.e.
a two-dimensional array in C) decays into a pointer to an array, not a pointer to a pointer. Pointers to
arrays can be confusing, and must be treated carefully; see also question 6.13.

If you are passing a two-dimensional array to a function:

	int array[NROWS][NCOLUMNS];
	f(array);

the function's declaration must match:

	void f(int a[][NCOLUMNS])
	{ ... }

or

	void f(int (*ap)[NCOLUMNS])	/* ap is a pointer to an array */
	{ ... }

In the first declaration, the compiler performs the usual implicit parameter rewriting of ''array of array''
to ''pointer to array'' (see questions 6.3 and 6.4); in the second form the pointer declaration is explicit.
Since the called function does not allocate space for the array, it does not need to know the overall size,
so the number of rows, NROWS, can be omitted. The width of the array is still important, so the column
dimension NCOLUMNS (and, for three- or more dimensional arrays, the intervening ones) must be retained.

If a function is already declared as accepting a pointer to a pointer, it is almost certainly meaningless to
pass a two-dimensional array directly to it. An intermediate pointer would have to be used when attempting
to call it with a two-dimensional array:

	extern g(int **ipp);

	int *ip = &array[0][0];
	g(&ip);        /* PROBABLY WRONG */

but this usage is misleading and almost certainly incorrect, since the array has been ''flattened'' (its
shape has been lost).

See also questions 6.12 and 6.15.

6.19 How do I write functions which accept two-dimensional arrays when the width is not known at compile time?

It's not always easy. One way is to pass in a pointer to the [0][0] element, along with the two dimensions,
and simulate array subscripting ''by hand'':

	void f2(int *aryp, int nrows, int ncolumns)
	{ ... array[i][j] is accessed as aryp[i * ncolumns + j] ... }

Note that the correct expression for manual subscripting involves ncolumns (the ''width'' of each row), not
nrows (the number of rows); it's easy to get this backwards.

This function could be called with the array from question 6.18 as

	f2(&array[0][0], NROWS, NCOLUMNS);

It must be noted, however, that a program which performs multidimensional array subscripting ''by hand'' in
this way is not in strict conformance with the ANSI C Standard; according to an official interpretation, the
behavior of accessing (&array[0][0])[x] is not defined for x >= NCOLUMNS.

C99 allows variable-length arrays, and once compilers which accept C99's extensions become widespread, VLA's
will probably become the preferred solution. (gcc has supported variable-sized arrays for some time.)

When you want to be able to use a function on multidimensional arrays of various sizes, one solution is to
simulate all the arrays dynamically, as in question 6.16.

See also questions 6.18, 6.20, and 6.15.

6.20 How can I use statically- and dynamically-allocated multidimensional arrays interchangeably when
passing them to functions?

There is no single perfect method. Given the declarations

	int array[NROWS][NCOLUMNS];
	int **array1;               /* ragged */
	int **array2;               /* contiguous */
	int *array3;                /* "flattened" */
	int (*array4)[NCOLUMNS];
	int (*array5)[NROWS][NCOLUMNS];

with the pointers initialized as in the code fragments in question 6.16, and functions declared as

	void f1a(int a[][NCOLUMNS], int nrows, int ncolumns);
	void f1b(int (*a)[NCOLUMNS], int nrows, int ncolumns);
	void f2(int *aryp, int nrows, int ncolumns);
	void f3(int **pp, int nrows, int ncolumns);

where f1a and f1b accept conventional two-dimensional arrays, f2 accepts a ''flattened'' two-dimensional array,
and f3 accepts a pointer-to-pointer, simulated array (see also questions 6.18 and 6.19), the following calls
should work as expected:

	f1a(array, NROWS, NCOLUMNS);
	f1b(array, NROWS, NCOLUMNS);
	f1a(array4, nrows, NCOLUMNS);
	f1b(array4, nrows, NCOLUMNS);

	f1(*array5, NROWS, NCOLUMNS);

	f2(&array[0][0], NROWS, NCOLUMNS);
	f2(*array, NROWS, NCOLUMNS);
	f2(*array2, nrows, ncolumns);
	f2(array3, nrows, ncolumns);
	f2(*array4, nrows, NCOLUMNS);

	f2(**array5, NROWS, NCOLUMNS);

	f3(array1, nrows, ncolumns);
	f3(array2, nrows, ncolumns);

The following calls would probably work on most systems, but involve questionable casts, and work only if
the dynamic ncolumns matches the static NCOLUMNS:

	f1a((int (*)[NCOLUMNS])(*array2), nrows, ncolumns);
	f1a((int (*)[NCOLUMNS])(*array2), nrows, ncolumns);
	f1b((int (*)[NCOLUMNS])array3, nrows, ncolumns);
	f1b((int (*)[NCOLUMNS])array3, nrows, ncolumns);

It will be noticed that only f2 can conveniently be made to work with both statically- and dynamically
allocated arrays, though it will not work with the traditional ''ragged'' array implementation, array1.
However, it must also be noted that passing &array[0][0] (or, equivalently, *array) to f2 is not strictly
conforming; see question 6.19.

If you can understand why all of the above calls work and are written as they are, and if you understand why
the combinations that are not listed would not work, then you have a very good understanding of arrays and
pointers in C.

Rather than worrying about all of this, one approach to using multidimensional arrays of various sizes is to
make them all dynamic, as in question 6.16. If there are no static multidimensional arrays--if all arrays
are allocated like array1 or array2 in question 6.16--then all functions can be written like f3.

Additional links: [https://c-faq.com/aryptr/aryptr.c]Sample source code (''torture test'') illustrating all
these techniques

6.21 Why doesn't sizeof properly report the size of an array when the array is a parameter to a function? I
have a test routine

	f(char a[10]) {
		int i = sizeof(a);
		printf("%d\n", i);
	}

and it prints 4, not 10.

The compiler pretends that the array parameter was declared as a pointer (that is, in the example, as char *a;
see question 6.4), and sizeof reports the size of the pointer. See also questions 1.24 and 7.28.

6.22 How can code in a file where an array is declared as extern (i.e. it is defined, and its size determined,
in some other file) determine the size of the array? sizeof doesn't seem to work.

See question 1.24.

6.23 I want to know how many elements are in an array, but sizeof yields the size in bytes.

Simply divide the size of the entire array by the size of one element:

	int array[] = {1, 2, 3};
	int narray = sizeof(array) / sizeof(array[0]);

6.24 Is there a way to have an array of bits?

No. But see question 20.8.


---

