filename: c_char-argv-vs-char-argv_20211130.txt
https://stackoverflow.com/questions/5192068/c-char-argv-vs-char-argv/5192133

C++ - char** argv vs. char* argv[]

   What is the difference between char** argv and char* argv[]? in int main(int argc, char** argv) and
   int main(int argc, char* argv[])?

   Are they the same? Especially that the first part does not have [].

***
   They are entirely equivalent. char *argv[] must be read as array of pointers to char and an array
   argument is demoted to a pointer, so pointer to pointer to char, or char **.

***
   They are indeed exactly the same.

   The golden rule of arrays to remember is:

   +------------------------------------------------------------------------+
   | "The name of an array is a pointer to the first element of the array." | 
   +------------------------------------------------------------------------+

   So if you declare the following:

   char text[] = "A string of characters.";

   Then the variable "text" is a pointer to the first char in the array of chars you've just declared.
   In other words, "text" is of type char *. When you access an element of an array using [index], what
   you're actually doing is adding an offset of index to the pointer to the first element of the array,
   and then dereferencing this new pointer. The following two lines will therefore initialize both
   variables to 't':
char thirdChar = text[3];
char thirdChar2 = *(text+3);
\__________________________/        
             |
			 +--> text[3] = *(text + 3)

   Using the square brackets is a convience provided by the language that makes the code much more
   readable. But the way this works is very important when you start thinking about more complex things,
   such as pointers to pointers. char** argv is the same as char* argv[] because in the second case "the
   name of the array is a pointer to the first element in the array".

   From this you should also be able to see why it is that array indexes start from 0. The pointer to
   the first element is the array's variable name (golden rule again) plus an offset of... nothing!

   I've had debates with a friend of mine as to which is better to use here. With the char* argv[]
   notation it may be clearer to the reader that this is in fact an "array of pointers to characters" as
   opposed to the char** argv notation which can be read as a "pointer to a pointer to a character". My
   opinion is that this latter notation doesn't convey as much information to the reader.

   It's good to know that they're exactly the same, but for readablity I think that if the intention is
   an array of pointers then the char* argv[] notation conveys this much more clearly.

***
       "The golden rule of arrays to remember is" absolutely not what you wrote. This is a terrible,
       frustrating myth that just won't die:

       +----------------------------------------------------------------------------+
       | The name of an array can decay to a pointer to that array's first element. |
       +----------------------------------------------------------------------------+

       That is absolutely not the same as equivalence or identity.

***    
       No, it's not really compile-time vs. run-time. An array like int x[10] is a stack
       variable consisting of 10 integers. (When its enclosing scope is put on the stack, its frame
       includes room for those 10 ints.) It is not a pointer, which would be a variable containing the
       address of something. There are no addresses stored on the stack when you make an array, as
       opposed to when you make a pointer. When you pass the array to a function, though, it decays; the
       function receives a pointer, not an array.



---

