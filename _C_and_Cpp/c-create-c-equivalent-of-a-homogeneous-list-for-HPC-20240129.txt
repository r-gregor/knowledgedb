filename: create-c-equivalent-of-a-homogeneous-list-for-HPC_20240129.txt
https://cstdspace.quora.com/How-can-I-create-a-C-equivalent-of-a-homogeneous-list-for-HPC-without-relying-on-CPython-or-similar-interpreters-Aiming-3

How can I create a C equivalent of a homogeneous list for HPC without relying on CPython or similar
interpreters? Aiming for efficient C code, exploring for an HPC tool.

I assume you don't want to use an array, and you want a binary list with all its features

To create an homogeneous binary list in C you need a structure with:

	data
	previous element pointer (NULL if it is first)
	next element pointer (NULL) if it is the last)

for example

typedef struct {
	Data data;
	Element *prev;
	Element *next;
} Element;

for each new element you must use malloc to allocate its space

//allocate element in memory
element = malloc(sizeof(Element);
// check if creation was successful
if (!element) {
	fputs(stderr,"Out of memory!");
	exit(1);
}
// add element to a list
append (mylist, element)

append is a function that must be also programmed by you. You could use just a element to identify a list,
or create another structure to hold elements and other data like length and more

For example, appending in the first case: (we will assume that if "mylist" is NULL then it is an empty list

for example, to create an empty list:

mylist = (Element *) NULL;

So, the code might be

Element *append(Element *list, Element *e){
	if(list==0) {
		list = e;
		e->prev=NULL;
	} else {
		Element *l;
		l = last(list);
		e->prev = l;
		l->next=e;
	}
	e->next=NULL;
	return list;
}

Element *last(Element *list){
	if (list==0) return list;
	for(Element *e=list;
		e->next != NUlL;
		e=list->next);
	return e;
}

The other possibility is to create a new structure type for a list

typedef struct {
	int n; // number elements
	Element *first, *last, *iter;
} List;



---

