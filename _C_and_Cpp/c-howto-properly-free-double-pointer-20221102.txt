filename: c_howto-properly-free-double-pointer_20221102.txt
https://www.quora.com/How-do-I-correctly-free-a-double-pointer-in-C/answer/Paul-Pacheco

How do I correctly free a double pointer in C?

***
If you write:
double** x = (double**)malloc(sizeof(double*)*3);

Then you have simply created an array of pointers. Each entry in the array is not pointing to anything in
particular, trying to dereference any entry in the array would lead to undefined behavior.

If you don’t assign anything to the pointers in the array, then you can simply dispose it with:
free(x)

Maybe the entries are pointing to something that was not allocated with malloc, for example:

double** x = (double**)malloc(sizeof(double*)*3);

double myvar = 10;

for (int i=0; i< 3; i++) {
	x[i] = &myvar
}

// you should only free x
free(x);

In this case, all the pointers inside the array have the address of myvar. myvar was not allocated with
malloc, so you still should not try to deallocate anything other than x.

Now, if you allocate memory and assign the address to each entry in the array, like this:

double** x = (double**)malloc(sizeof(double*)*3);

for (int i=0; i< 3; i++) {
	x[i] = (double *) malloc(sizeof(double) * 3);
}

// you should free every entry first
for (int i=0; i< 3; i++) {
	free(x[i]);
}

// and then free x
free(x);

So to keep it simple, the number of free calls should match exactly the number of malloc calls. If you don’t
allocate something with malloc, you should not free it, and if you do allocate something with malloc, you
should free it before you lose the pointer.


---

