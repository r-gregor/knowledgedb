filename: cs_guard-clause-multif_20220301.txt
https://medium.com/@scadge/if-statements-design-guard-clauses-might-be-all-you-need-67219a1a981a

If-statements design: guard clauses may be all you need

   There is a lot of debate on how the if-statements should be used for better code clarity and
   readability. Most of them boil down to an opinion that its completely subjective and aesthetic. And
   usually that’s true, but sometimes we still can find a common ground. This post aims to derive a
   small set of advices for a few such cases. Hopefully this will reduce the amount of thinking and
   debating when writing something as simple as an if-statement.

Guard Clauses
   Probably the most documented case is the guard clause, also known as assert or
   precondition. The idea is that when you have something to assert in the beginning of a method — do
   this using a fast return.

public void run( Timer timer ) {
	if( !timer.isEnabled() ) {
		return;
	}

	if( !timer.valid() ) {
		throw new InvalidTimerException();
	}

	timer.run();
}

   Despite looking obvious, it is often left behind due to the fact that our brains function
   differently: we tend to think “run the timer if it’s enabled”, not “run the timer, but if it’s not
   enabled do nothing”. However, in the code, the latter leads to a better separation of corner cases
   from the main method logic, if we strictly follow that only something asserted in the beginning can
   be considered a guard clause.

   As appears, the guard clause is not nearly a new idea. Yet I see it as one of the most
   straight-forward and simple ones, which can be accepted without a lot of debate. But the biggest
   revelation for me was that most of the cases when if-statement is used can be transformed to use a
   guard clause instead, and this is what I’m going to elaborate on.

Large if-blocks
   It is pretty common to find something like the following in a codebase:

if( something.isEnabled() ) {
	// pretty
	// long
	// logic
	// of
	// running
	// something
}

   Usually it isn’t designed this way from the beginning. Instead, such blocks appear when a new
   requirement appears which says “we should run that something only in case of X”. The most
   straight-forward solution, of course, would be to wrap the “run that something” part into an
   if-statement. Easy.

   The problem is that actually it’s only easy to write, but not to read. See, to understand the code
   one needs to derive the whole picture from it, a concept to further work with — because humans are
   much better in operating on concepts, not on algorithms. Introducing this kind of condition in the
   beginning creates an additional context, which has to be kept in mind when working with the main
   method logic. Obviously enough, we should strive to reduce the amount of mental context required at
   any given moment.

   Another big problem arises when the logic of such code becomes long enough to not fit the screen
   vertically. At some point you may even forget that it’s there, which would completely break your
   picture.

   To avoid all of this, you just need to invert the if-statement so that the condition would become a
   guard clause:

	if( !something.isEnabled() ) {
		return;
	}

	// same
	// long
	// logic
	// of
	// running
	// something

   Again, there’s a separation of concerns: first you get rid of the preconditions at the beginning
   (throwing them away from your mind, too — which is important to better focus on the main logic), and
   then just do what the method is required to do.

Returning in the middle
   Multiple returns are considered a bad idea for reasons, and this is probably one of the biggest.
   Contrary to a return in a guard clause, a return or throw in the middle of the method is not so
   easily detected at the first sight. Like any other conditional logic, it complicates the process of
   building a mental picture of the method. Moreover, it requires you to consider that under some
   circumstances, the main logic of this method will not be executed completely, and every time you’ll
   have to decide: should you put the new code before or after this return?

   Here’s an example of some real code:

public void executeTimer( String timerId ) {

	logger.debug( "Executing timer with ID {}", timerId );
	TimerEntity timerEntity = timerRepository.find( timerId );
	logger.debug( "Found TimerEntity {} for timer ID {}", timerEntity, timerId );

	if ( timerEntity == null) {
		return;
	}

	Timer timer = Timer.fromEntity( timerEntity );
	timersInvoker.execute( timer );
}

   Looks like a precondition, doesn’t it? Let’s put it to where a precondition has to be:

public void executeTimer( String timerId ) {

	logger.debug( "Executing timer with ID {}", timerId );
	TimerEntity timerEntity = timerRepository.find( timerId );
	logger.debug( "Found TimerEntity {} for timer ID {}", timerEntity, timerId );

	executeTimer( timerEntity );
}

private void executeTimer( TimerEntity timerEntity ) {

	if ( timerEntity == null ) {
		return;
	}

	Timer timer = Timer.fromEntity( timerEntity );
	timersInvoker.execute( timer );
}

   This refactored code is much easier to read, since there are no conditions at all in the main logic,
   there’s just a mere sequence of simple actions. What I wanted to show is that it’s almost always
   possible to split a method which has a return in the middle so that the preconditions are nicely
   separated from the main logic.

Small conditional actions
   It is also a common practice to have lots of small conditional statements like this:

if( timer.getMode() != TimerMode.DRAFT ) {
	timer.validate();
}

   This is totally legit in general case, but often is just a hidden precondition which should better be
   placed in a method itself. You’ll probably notice this further, when each time you invoke the method
   you need to add this if-statement because the business logic says so. Considering that, the proper
   solution would be:

public void validate() {
	if( mode == TimerMode.DRAFT ) {
		return;
	}

	// validation logic
}

   And the usage is now as simple as:
timer.validate();

Conclusion
   The use of guard clauses is a good practice to avoid unnecessary branching, and thus make your code
   more lean and readable. I believe if these small advices are considered systematically, it will
   greatly decrease the maintenance cost of your piece of software.

   And at last, generally, there’s nothing bad in having a conditional statement here or there in your
   code. Though my experience shows that if you never care about trying to avoid that, then at some
   point you’ll end up wasting hours building a mental picture of a complex highly branched piece of
   code while trying to put that next thing a business wants into it.



---
https://deviq.com/design-patterns/guard-clause

Guard Clause

   Complexity in code makes it harder to understand what the code is doing. The smallest unit of our
   code tends to be the function or method. You should be able to look at a given function and quickly
   determine what it's doing. This tends to be much easier if the function is small, well-named, and
   focused. One factor that's constantly working against simplicity is conditional complexity, most
   often taking the form of if and switch statements. When not properly managed, these two constructs
   can quickly cause functions to shift from simple and easily understood to long, obtuse, and scary.
   One way to reduce some of the complexity is through the use of guard clauses.

   A guard clause is simply a check that immediately exits the function, either with a return statement
   or an exception. If you're used to writing functions that check to ensure everything is valid for the
   function to run, then you write the main function code, and then you write else statements to deal
   with error cases, this involves inverting your current workflow. The benefit is that your code will
   tend to be shorter and simpler, and less deeply indented.

   An example of a function that does not use guard clauses:

public void Subscribe(User user, Subscription subscription, Term term) {

	if (user != null) {
		if (subscription != null) {
			if (term == Term.Annually) {
				// subscribe annually
			} else if (term == Term.Monthly) {
				// subscribe monthly
			} else {
				throw new InvalidEnumArgumentException(nameof(term));
			}
		} else {
			throw new ArgumentNullException(nameof(subscription));
		}
	} else {
		throw new ArgumentNullException(nameof(user));
	}
}

   This code can be refactored to eliminate the need for the else clauses. This is accomplished by
   simply inverting the logic of the if statements and putting the exception throwing statements inside
   of these if statements. The result looks like this:

public void Subscribe2(User user, Subscription subscription, Term term) {
	if (user == null) {
		throw new ArgumentNullException(nameof(user));
	}

	if (subscription == null) {
		throw new ArgumentNullException(nameof(subscription));
	}

	if (term == Term.Annually) {
		// subscribe annually
	} else if (term == Term.Monthly) {
		// subscribe monthly
	} else {
		throw new InvalidEnumArgumentException(nameof(term));
	}
}

   The checks for null and common behavior of throwing a particular type of exception is clearly a
   violation of the DRY principle. This code can be pulled out into a helper method:

public static class Guard {
	public static void AgainstNull(object argument, string argumentName) {
		if (argument == null) {
			throw new ArgumentNullException(argumentName);
		}
	}

	public static void AgainstInvalidTerms(Term term, string argumentName) {
		// note: currently there are only two enum options
		if (term != Term.Annually && term != Term.Monthly) {
			throw new InvalidEnumArgumentException(argumentName);
		}
	}
}

   These helper guard methods can then be called without the need to even include any if statements in
   the calling function, since if an exception occurs it will bubble up and out of the original
   function. Now the original function can be updated to look like this:

public void Subscribe3(User user, Subscription subscription, Term term) {
	Guard.AgainstNull(user, nameof(user));
	Guard.AgainstNull(subscription, nameof(subscription));
	Guard.AgainstInvalidTerms(term, nameof(term));

	if (term == Term.Annually) {
		// subscribe annually
		return;
	}

	// subscribe monthly
}

   Over time you can continue to add additional Guard helper methods for any other common cases you need
   to check for, such as empty strings, negative numbers, invalid enum values, etc.



---
https://wiki.c2.com/?GuardClause

Guard Clause

A GuardClause (one of the SmalltalkBestPracticePatterns, and equally applicable in a whole bunch of languages)
is a chunk of code at the top of a function (or block) that serves a similar purpose to a Precondition.

It typically does one (or any or all) of the following:

    checks the passed-in parameters, and returns with an error if they're not suitable.
    checks the state of the object, and bails out if the function call is inappropriate.
    checks for trivial cases, and gets rid of them quickly.

For example ...

draw() {
	if (! isVisible()) return;
	...
}

See also HandleErrorsInContext.

While the judgement call on when to HandleErrorsInContext seems somewhat harder, some short sharp guard clauses at
the top of a functional block that exit with no side effects seem undeniably to simplify code and improve
legibility. As always there is a dissenting view as stated below. Here is a sample of code using guard clauses ...

public Foo merge (Foo a, Foo b) {
	if (a == null) return b;
	if (b == null) return a;
	// complicated merge code goes here.
}

Some style guides would have us write this with a single return as follows ...

public Foo merge (Foo a, Foo b) {
	Foo result;

	if (a != null) {
		if (b != null) {
			// complicated merge code goes here.
		} else {
			result = a;
		}
	} else {
		result = b;
	}
	return result;
}


This second form has the advantage that the usual case, the merge, is dealt with first. It also has a single exit
as the last line of the routine which can be handy with some refactorings. It has the disadvantage of
separating the exceptional conditions from their corresponding results which, in this case, makes it harder to
see the symmetry of the conditions. It also buries the usual, and complicated, case inside a couple of layers
of braces, which may make it harder to read.

The guards are similar to assertions in that both protect the subsequent code from special cases. Guards differ
from assertions in that they make a tangible contribution to the logic of the method and thus cannot be safely
omitted as part of an optimization. I borrowed the term guard from EwDijkstra when naming this pattern.
The first form above hints at the elegance of his guarded commands though Dijkstra manages to save the single
exit property in his code as well.

Is it done like this?

public Foo merge (Foo a, Foo b) {
	Foo result;
	if      (a == null) result = b;
	else if (b == null) result = a;
	else {
		result = // complicated merge code goes here.
	}

	return result;
}


I believe that you can always write code that effectively has both guard clauses and a single point of return
if that is what you desire.

Albeit at the cost of introducing mutable state. I prefer the early return to spurious mutable state.

What's wrong with mutable state? - pg

It's hard to understand. For example, in

    if (a == null) return b;

we know the final result as soon as we hit the return. In

    if (a == null) result = b;

we can't be sure without checking the rest of the routine for assignments to result. In fact, there are
assignments so we also have to check the flow of control to make sure they are never executed. For more
discussion read StructureAndInterpretationOfComputerPrograms, or FunctionalProgramming.

[The other potential problem is that the unnecessary variable may never be initialized at all.]

But when you want to go back and determine why a particular value is generated, there is no explicit reverse 
code flow. You have to scan the routine for every return instead of starting at the end of the routine and
working backwards. Symmetry has its uses!

I don't follow. I can scan for every assignment to result or I can scan for every return. What significant
advantage does the former have? -- DaveHarris

With a single return, the reverse scan follows program structure, with embedded returns it does not. One
does not need to delve into every code block to see if a return has been executed. Of course, if the code
has been refactored well, there should be very few code blocks, so the advantage of the single return
diminishes.

In java, you could make the return-holder final; final local variables can be assigned to only once. If you
knew that result was final, and that the only way out of the method was by return result;, then any time you
saw result = x; you'd know what the return value of the method was. Of course, if the return value is a
mutable object, you wouldn't know that the object hadn't been mucked about with later on; if it was a
straight return, you'd know this as well. -- TomAnderson

In java, you can't even count on return to avoid mutable state. According to specs, the following code

try {
	return 1;
} finally {
	return 0;
}

returns 0! Might as well have a single exit point then.

All of this was anticipated in the PlanKalkuel Some languages (eg the CecilLanguage) have PredicateTypes and
MultiMethods, which effectively merge the guard clauses into the general message dispatching. Languages with
algebraic types are similar. Effectively you can write:

	public Foo merge (Null a, Null b) { return Null; }
	public Foo merge (Null a, Foo b) { return b; }
	public Foo merge (Foo a, Null b) { return a; }


	public Foo merge (Foo a, Foo b) {
		// complicated merge code goes here. No need to check for
		// nulls; the type system has done it for you.
	}

In some concurrent languages (eg Eiffel, some versions of Prolog), the guard clause can have the semantics
of waiting until its condition is satisfied. This model originally comes from Hoare's
CommunicatingSequentialProcesses.

And then there's

 = anObject
	| clauses |
	clauses := OrderedCollection new
		add: [boolean condition1];
		add: [boolean condition2];
		yourself.
	clauses contains: [:guardClause | guardClause value not]


Writing Lisp in Smalltalk has got to be some kind of anti-pattern. I've used the above with 5 clauses.

Also see BouncerPattern.Last edit September 30, 2009

---
