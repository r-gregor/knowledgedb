filename: c_function-returns-address-of-local-variable_20240124.txt
https://copyprogramming.com/howto/function-returns-address-of-local-variable-in-c-duplicate

Address of local variable returned by function in c
2023-08-24

Question: Is it possible to return an array without encountering the warning "function returns address
of local variable"? I would like to express my gratitude to @SomeProgrammerDude for enlightening me on
my mistake. I had mistakenly mixed up arrays and pointers. To gain a better understanding, I found a
relevant topic that proved helpful: the distinction between array type and arrays allocated with malloc.

I created a function to convert add character into a string, but I'm encountering an error message in
function returns address involving local variable . I would appreciate any help. Here's my code:

int main(int argc, char** argv) {
	char* string;
	string ="hola mundo";
	char c ='x';
	string = cadena_mas_caracter(string,c);
	printf("texto sumado %s",string);
	return (EXIT_SUCCESS);
}

char *cadena_mas_caracter(char* cadena, char caracter) {
	int i=0;
	int largo_texto = strlen(cadena)+1;
	char cadena_nueva[largo_texto+1];
	for( i=0; i < largo_texto; i++) {
		cadena_nueva[i] = cadena[i];
		if(cadena[i] == '\0') {
			cadena_nueva[i]= caracter;
		}
	}
	return cadena_nueva;
}


Solution:
It is not recommended (although occasionally it may provide the desired outcome!) to obtain a
variable pointer from a function since it is allocated on the stack.

To clarify, is it possible to access a local variable's memory beyond its designated scope?

To make your code work, replace

char cadena_nueva[largo_texto+1];

with

char* cadena_nueva = (char*)malloc(sizeof(char)*(largo_texto+1));

Remember to free() once you have finished using it.

Familiarizing yourself with heap and stack memory storage would greatly benefit you.

The stack and heap refer to specific memory locations. If you would like to know more about the stack and
heap, you can visit the following links: - http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html -
http://www-ee.eng.hawaii.edu/~tep/EE160/Book/chap14/subsection2.1.1.8.html

C Returning char[] Warning "returns address of local variable", Explanation: static variables in function
scope retain their values even after function returns. There's just one instance of such a variable,
same one is used in every call to that function (so not re-entrant/thread-safe).

Why do i get a "warning: function returns address of local variable [-Wreturn-local-addr]" while compiling?

Question:
Edit: Revised my question. Appreciation to @SomeProgrammerDude for assisting me in comprehending my
mistake (I mistakenly confused arrays and pointers). Here is a pertinent topic that aided me: The
disparity between array type and array allocated with malloc.

Suppose I have a function where an array 'a' is declared and initialized. If I declare a pointer 'b'
outside of the function and attempt to return 'a' as a casted pointer:

uint8_t *b;
uint8_t * foo(void) {
	unint8_t a[size] = {'a', 'b', ...};
	return (uint8_t *) a;
}

b = foo(b);

Why do I get :

warning: function returns address of local variable [-Wreturn-local-addr]


Solution:
It's not entirely clear what you're asking, but I believe you're inquiring about whether a and b refer
to the same memory location after the assignment c = a . """.

In that case the answer is yes.

+---+     +-------------------------------+
| a | --> | Memory allocated by malloc... |
+---+     +-------------------------------+

Taking a graphical perspective, following a = malloc(...) , there is a subsequent occurrence of something
similar to.
Ezoic

+---+     +-------------------------------+
| a | --> | Memory allocated by malloc... |
+---+     +-------------------------------+

After completing the assignment c = a , you will have something similar to...

+---+
| a | --\
+---+    \     +-------------------------------+
          >--> | Memory allocated by malloc... |
+---+    /     +-------------------------------+
| c | --/
+---+

After performing return c , you will be left with only b = foo(b) .
Ezoic

+---+     +-------------------------------+
| b | --> | Memory allocated by malloc... |
+---+     +-------------------------------+

It's worth noting that if you're unaware of the allocated memory's size, utilizing the Memory allocated can
be problematic as its endpoint is unknown. Going beyond the boundaries can result in undefined behavior. """.

As long as you remain within the allocated memory, you have the freedom to utilize it in any manner. You
have the option to write to it or read from it by dereferencing the pointer b .

Please note that the argument being passed to foo is not important. The foo function could also perform
return a without considering the argument and still achieve the same result ( b pointing to the memory).

uint8_t foo(void) {
	uint8_t *a = malloc(...);
	return a;
}

The variable a is unnecessary.

uint8_t foo(void) {
	return malloc(...);
}

After executing both of these functions, the outcome following b = foo() would remain the same.

+---+     +-------------------------------+
| b | --> | Memory allocated by malloc... |
+---+     +-------------------------------+

C - warning: function returns address of local variable, unsigned char rgb[3]; is local to function and
the scope of this array is within the function Lyapunov so once you exit the function this memory is no
more valid. So the warning you are getting is the right one which says never return the local variables
address which will lead to undefined behavior when used outside its scope.

Yet another "return-local-addr" - "function returns address of local variable"

Question:
Acknowledging its commonness, I have come across various sources discussing the same question. Initially,
I held the belief that it was not advisable to return the address of a local variable . My previous
stance was that it would be more advantageous to consider alternative options instead.

	allocate memory via e.g. malloc
	Convert the local variable into a static one or...
	pass the pointer as an argument

but then I tried this:

#include
char  * foo_1();
char ** foo_2();

int main() {
	char * p_1 = foo_1();
	char ** p_2 = foo_2();
	printf("\n [%s] \n", p_1);
	printf("\n [%s] \n", *p_2);
	return 0;
}

char * foo_1() {
	char * p = "bar";
	return p;
}

char ** foo_2() {
	char * p = "bar";
	return &p
}

When I compile, I include both the -pedantic and -pedantic-errors options, resulting in the expected
output, which is warning: function returns address of local variable [-wreturn-local-addr] .

Is there any reason why only foo_2() exhibits this issue, while foo_1() functions correctly? Additionally,
does anyone know if this behavior is considered undefined?

Solution 1:
char * foo_1() {
	char * p = "bar";
	return p;
}

Instead of returning the address of a local object, you are returning the value of a pointer that points
to a string literal . String literals have static storage duration , so it is acceptable to return a
pointer to a string literal. Once foo_1 returns, the p object is destroyed (due to automatic storage
duration), but "bar" (with static storage duration) is not.

Solution 2:
The warning is caused because you are returning the address of the local variable p in foo_2() .

In foo_1() , the address of the literal string is being returned, which is acceptable because of its
static storage duration.

Solution 3:
In foo_2() , the address of a local variable (which is not static ) is being returned. However, this
address becomes indeterminate when Function returns occurs, as the object being pointed to no longer
exists. Therefore, the warning is issued.

In MSDT code 1, you're retrieving the value of a local variable. There's absolutely no issue with this
action; it's no different from:

int foo_3(void) {
	int local = 42;
	return local;
}

This retrieves the output of local.

In foo_1() , if the variable you are returning is a pointer, invoking undefined behavior is still possible
if the value is questionable. For instance:

int foo_1a(void) {
	char arr[] = "bar";
	char *p = arr; // or equivalently, &arr[0]
	return p;
}

In this case, you're still returning the value of a local variable, which is acceptable. However, the
value being returned is the address of another local variable. As a result, the pointer value being
returned becomes invalid once the function returns is reached.

A compiler is less inclined to issue a warning regarding foo_1a compared to your foo_2 . This is due
to the compiler's limited ability to determine the problematic value of p when the return statement is
executed. It is worth noting that the language does not mandate a diagnostic for such cases. While compilers
can detect and warn about certain instances of undefined behavior, they may not catch all occurrences.

In summary, the foo_1() function behaves properly as it returns the address of a string literal that
exists for the entire lifetime of the program.

Nevertheless, due to the unpredictable consequences of modifying the static array, it is advisable
to provide the address as a const char* instead of a char* , reducing the likelihood of the caller
attempting to alter the string literal. Additionally, the const serves as a form of documentation,
indicating to human readers that the value being pointed to should not be modified.

Solution 4:
char * p_1 = foo_1();

It is acceptable to dereference p_1 without any issues, as long as you refrain from making any modifications
to the data that p_1 is referencing. This is because foo_1 returns a pointer to a string literal that
is stored in a read-only section of the program.

char ** p_2 = foo_2();

Dereferencing p_2 is not permissible as it leads to undefined behavior, considering that p_2 points to
a deleted object.

C - Function that returns address of local variable acts differently, Returning the address of a local
variable and trying to access it after its lifetime is over is undefined behavior, rationalizing what
happens under the hood is a fool's errand because there are no standard rules to be followed (appart,
of course, from the aforementioned and linked UB rules), it's quite common different compiler versions
changing the way a situation like this ...

Returning an array (Warning: Function returns address of local variable)?

Question:
How to return an array (Note: function returns address representing a local variable)?

interface
int* decimalConversion(int iX);

implementation
int* decimalConversion(int iX){
	int iMult[10] = {0,0,0,0,0,0,0};
	...
	return iMult;  // <-- Warning: Function returns address of local variable
}


Solution 1:
To avoid returning the address of an array created on the stack ( local variable warning ), allocate space
for the array. If you're using C in that function, use malloc(my_arr_size); otherwise, use obj-c's alloc.

Example:
int *my_arr = calloc(10, sizeof(int)); //make sure we get zeroed memory
//fill array
return my_arr; //should no longer give a warning

Once you are finished with it, simply utilize free(my_arr) as a way to release it. I chose to write this
in C because I observed that you are returning a type int* and using C-style declarations. If you are
implementing this in Objective-C, please inform me so that I can modify my example accordingly. """.

The error occurs because local arrays is placed on the stack. When you return the array, you are
returning an address in a stack frame. However, once the method finishes execution, this stack frame
becomes invalid. Consequently, you cannot rely on any data within that frame to be valid (although there
are exceptions where this approach may work, it is generally discouraged). To ensure the data exists
until you call free() on the pointer, you should allocate the array on the heap and return a heap address.

Solution 2:
If you are working on an Objective-C app, I recommend utilizing NSArray . It is an Objective-C class
designed for immutable arrays and eliminates the need for manual memory allocation. The only drawback
is that integers need to be encapsulated within NSNumber objects. Here's an example:

NSArray * getNums (int num) {
	NSArray * result = [NSArray arrayWithObjects:[NSNumber numberWithInt:num-1], [NSNumber numberWithInt:num], \
	[NSNumber numberWithInt:num+1], nil];
	return result;
}
...
NSArray * myList = getNums(10);
NSLog(@"First: %d", [[myList objectAtIndex:0] intValue]);
NSLog(@"Second: %d", [[myList objectAtIndex:1] intValue]);
NSLog(@"Third: %d", [[myList objectAtIndex:2] intValue]);

You can alternatively do this:

NSArray * getNums (int num) {
	NSMutableArray * array = [NSMutableArray array];
	[array addObject:[NSNumber numberWithInt:num-1]];
	[array addObject:[NSNumber numberWithInt:num]];
	[array addObject:[NSNumber numberWithInt:num+1]];
	return array;
}
...
NSArray * myList = getNums(10);
for (int i = 0; i < [myList count]; i++) {
	NSLog(@"myList[%d] = %d", i, [myList objectAtIndex:i]);
}

Unlike other options, NSMutableArray offers the capability to add or remove elements at a later stage.
C++ - Why is returning address of local variable or, §12.2.5.2 The lifetime of a temporary bound to the
returned value in a function return statement (6.6.3) is not extended; the temporary is destroyed at the
end of the full-expression in the return statement. [] [Note: This may introduce a dangling reference,
and implementations are encouraged to issue a warning in such a case. - end note ]



---

