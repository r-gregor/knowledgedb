filename: c-do-while-0-macro-magic-multif-20250730.txt
https://hownot2code.wordpress.com/2016/12/05/do-while-0-in-macros/


do {...} while (0) in macros
05.12.2016

   If you are a C programmer, you must be familiar with macros. They are powerful and can help you ease
   your work if used correctly. However, if you don't define macros carefully, they may bite you and
   drive you crazy. In many C programs, you may see a special macro definition which may seem not so
   straightforward. Here is one example:

#define __set_task_state(tsk, state_value) \
	do { (tsk)->state = (state_value); } while (0)

   There are many this kind of macros which uses do{...}while(0) in Linux kernels and other popular C
   libraries. What's the use of this macro? Robert Love from Google(previously worked on Linux
   kernel development) gives us the answer.

   do{...}while(0) is the only construct in C that lets you define macros that always work the same way,
   so that a semicolon after your macro always has the same effect, regardless of how the macro is used
   (with particularly emphasis on the issue of nesting the macro in an if without curly-brackets). For
   example:
#define foo(x) bar(x);baz(x);

   Later you may call:
foo(wolf);

   This will be expanded to:
bar(wolf); baz(wolf);

   This is the expected output. Next let's see if we have:
if (!feral)
	foo(wolf);

   The expansion may not be what you expect. The expansion may be:
if (!feral)
	bar(wolf);
baz(wolf);

   It isn't possible to write multistatement macros that do the right thing in all situations. You can't
   make macros behave like functions-without do/while(0).

   If we redefine the macro with do{...}while(0), we will see:
#define foo(x) do { bar(x); baz(x); } while (0)

   Now, this statement is functionally equivalent to the former. The do ensures the logic inside the
   curly-brackets executes, the while(0) ensures that happens but once. Same as without the loop.For the
   above if statement, it will be :
if (!feral)
	do { bar(wolf); baz(wolf); } while (0);

   Semantically, it's the same as:
if (!feral) {
	bar(wolf);
	baz(wolf);
}

   You might rejoin, why not just wrap the macro in curly-brackets? Why also have the do/while(0) logic?
   For example, we define the macro with curly bracket:
#define foo(x) { bar(x); baz(x); }

   This is fine for the above if statement, but if we have below statement:
if (!feral)
	foo(wolf);
else
	bin(wolf);

   The expanded code will be :
if (!feral) {
	bar(wolf);
	baz(wolf);
};
else
	bin(wolf);

   This is a syntax error.

   In conclusion, macros in Linux and other codebases wrap their logic in do/while(0) because it ensures
   the macro always behaves the same, regardless of how semicolons and curly-brackets are used in the
   invoking code.


---
https://www.bruceblinn.com/5-LinuxCorner/DoWhile.html

do { } while(0)

   You may see a do loop with the conditional expression set to a constant value of zero (0). This
   creates a loop that will execute exactly one time. This is a coding idiom that allows a multi-line
   macro to be used anywhere that a single statement can be used.

   Since the conditional expression of the do loop is a constant value, the compiler will not generate
   any additional code to process the loop, so this idiom does not add any overhead to the code when it
   is executed.

   This technique is frequently used in macro definitions where the body of the macro is not a single or
   simple statement. Since you do not know where the macro will be used, it is important that body of
   the macro has a syntax that is equivalent to the statement it replaces. For example, the following
   macro will replace a single statement with two statements.

#define foo \
   statement_1; \
   statement_2

   If this macro is used in an if statement like the one below, it will not have the intended effect.

if (condition)
	foo;

   After replacing the macro in this code, the if condition will be followed by two statements rather
   than one. This is probably not what you want because the if condition will only control the execution
   of the first statement.

if (condition)
	statement_1;
	statement_2;

   The following example shows what the macro looks like when it is rewritten using the do loop idiom.
   Notice there is no ending semicolon in the definition; the semicolon will be provided by the
   statement that is replaced.

#define foo \
	do { \
		statement_1; \
		statement_2; \
	} while (0)

   Now, when the macro is used, the if condition is followed by a single, compound statement, which will
   behave as you would expect.

if (condition)
	do {
		statement_1;
		statement_2;
	} while (0);

   A similar problem occurs when the body of the macro contains an if statement without an else
   statement.

#define foo \
	if (condition) \
		statement

   If this macro is used in another if statement that does have an else statement, the if statement in
   the macro body will steal the else that follows it.

if (condition)
	foo;
else
	bar;

   Although the indentation of the else statement shows the intention that it should belong to the first
   if statement, it will actually be associated with the second if statement.

if (condition)
	if (condition)
		statement;
else
	bar;

   Using the do loop idiom in this instance, will terminate the if statement in the macro, so that it
   will not steal an else statement that happens to follow it.

if (condition)
	do {
		if (condition)
			statement;
	} while (0);
else
	bar;

   Using an empty do-while(0) loop is also a common way to write an empty statement in a macro
   definition. In older compilers, this was necessary to prevent the compiler from issuing a warning.
   For example:

#define do_nothing do {} while (0)

   The current gcc compiler provides another method that can be used in place of the do-loop idiom as
   shown in the following example.

#define foo ({ \
	statement_1; \
	statement_2; \
})


---
https://pyjamabrah.com/posts/do-while-magic/

A shallow dive into do{..}while(0) loop in C
19 Feb, 2025

   In this article, I want to talk about the do{..}while(0) construct in C. This construct is often used
   in C programming to define multi-statement macros. It is a common pattern used in the Linux kernel
   and other standard C projects. I will take an example of a macro that is not safe and show how
   do{..}while(0) construct can be used to make it safe. Especially in the conditional statements.

Overview
   We read about loops in C, and we often come across while, for, if else which made sense to me. But
   there's one construct I could never make sense of. do{..}while(). Everything that can be achieved by
   do{..}while() can be achieved by using a while() loop. Why did Dennis Ritchie even create this? There
   has to be a reason, right? I think I found one of the reasons. There is a scenario where
   do{..}while() shines. In fact, it's the best way to do that thing.

   Before you continue to the actual problem statement, we will first see #define MACROS and then move
   to the problem. Trust me, this is an interesting use case.

Macros in C
   Macros are processed in the pre-processing stage of the C compilation process. They are used to
   define constants, functions, and other constructs that are expanded inline during compilation. Macros
   are defined using the #define directive, followed by the macro name and its replacement text. They
   can also be used to replace code snippets, making the code more readable and maintainable. For
   example:

#define BROKEN_MACRO(x) statement1(x);statement2(x);

   The above macro BROKEN_MACRO takes a parameter x and expands to statements present after the space.
   This can be used to replace multiple lines of code with a single macro call.

int main() {
	BROKEN_MACRO(x);  // Expands to  statement1(x); statement2(x);
	return 0;
}

   Using it in code, it will expand to:

int main() {
	statement1(x); statement2(x); // This is fine.
	return 0;
}

The Problem
   Here, BROKEN_MACRO is a simple macro that expands to a block of statements. However, this approach
   can lead to issues when used in certain contexts.
    1. Multiple statements in a macro might not work correctly in all contexts
    2. The macro might not behave as a single statement
    3. Issues with trailing semicolons can cause unexpected behavior

   Consider this same macro:

#define BROKEN_MACRO(x) statement1(x); statement2(x);

   Using it in a conditional statement, this can lead to problems:

if (condition)
	BROKEN_MACRO(x);  // Expands to statement1(x); statement2(x);
else
	other_statement();

   After preprocessing, this becomes:

if (condition)
	statement1(x);
    statement2(x);        // This is now outside the if block!
else
    other_statement();    // Syntax error: else without if

Another Approach
   Let's try using curly braces. This is a common approach to solve the above problem.

#define UNSAFE_MACRO(x) {statement1(x); statement2(x);}

   The code:

if (condition)
	UNSAFE_MACRO(x);
else
	other_statement();

   will expand to:

if (condition)
	{statement1(x); statement2(x);}; // Dangling semicolon.
else                                 // Syntax error: else without if
	other_statement();

   You should be able to see the issue from the code above. The semicolon makes the else block to be
   outside the if block. This is not what we want. The dangling else creates a syntax error.

   You can still argue that you will use something like this:

if (condition)
	UNSAFE_MACRO(x)  // you need to remember not to add semicolon here.
else
	other_statement();

   This will work, but it is not a good practice. Imagine you write a device driver, and every time the
   user wants to use this macro, they need to remember not to add a semicolon. Your manual should
   include this and developers need to follow your manual. This is not a good practice.

The Solution: do{..}while(0)
   Using do-while(0) solves these issues:

#define BROKEN_MACRO(x) do { \
	statement1(x); \
	statement2(x); \
} while(0)

Why It Works
    1. Single Statement: The do-while construct makes the entire macro act as a single statement, even
       with multiple internal statements
    2. Semicolon Friendly: It requires a trailing semicolon, maintaining consistent C syntax
    3. No Runtime Overhead: The while(0) is optimized away by the compiler. Well, it depends on the
       compiler to optimize it away
    4. Block Scoping: Variables declared inside the macro remain local to the macro. This prevents
       naming conflicts and unintended side effects

Best Practices
    1. Always use do-while(0) for multi-statement macros
    2. Use backslashes for line continuation in macro definitions
    3. Enclose all statement parameters in parentheses
    4. Use block scope when declaring variables inside macros

Example
   Here's a complete example showing proper macro usage:

#include <stdio.h>

#define SWAP(a, b) do { \
	int temp = (a); \
	(a) = (b); \
	(b) = temp; \
} while(0)

int main() {
	int x = 5, y = 10;
	if (x != y)
		SWAP(x,y);
	else
		printf("No swap required\n");
	printf("x = %d, y = %d\n", x, y);
	return 0;
}

   After pre-processing, the above code would expand to:

int main() {
	int x = 5, y = 10;
	if (x != y)
		do {
			int temp = (x);
			(x) = (y);
			(y) = temp;
		} while(0);
	else
		printf("No swap required\n");
	printf("x = %d, y = %d\n", x, y);
	return 0;
}

   Output:

x = 10, y = 5

Conclusion
   Though the do-while(0) construct in macro might look strange at first, it offers a way to write safe
   macros in C. It is a common pattern used in the Linux kernel and other open-source C projects. In
   fact, I found it in the Linux kernel source code, and thought I should show this to the world. What
   other clever macro techniques have you encountered? Let me know in the comments below.


---
https://software.codidact.com/posts/279576

What is do { } while(0) in macros and should we use it?

   I can see the need to use { } when implementing a function-like macro such as this one:
#define HCF(code) fprintf(stderr, "halt and catch fire"); exit(code);

   Because if we use the following calling code:

bool bad = false;
if(bad)
	HCF(0xDEADBEEF);
printf("good");

   Then it will expand to:

bool bad = false;
if(bad)
	fprintf(stderr, "halt and catch fire");
exit(0xDEADBEEF);
printf("good");

   which was not the intention - it will now exit with an error code even though the program is working
   as intended.

   So the correct way would be to write the macro like this instead:

#define HCF(code) { fprintf(stderr, "halt and catch fire"); exit(code); }

   Question
   But I've come across macros that instead of just plain braces { } uses this:

#define HCF(code) do { fprintf(stderr, "halt and catch fire"); \
                       exit(code); } while(0)

   This seems similar to { } but more obscure. What's the purpose of this do { } while(0) and why should
   it be used instead of { }?


---
https://stackoverflow.com/questions/257418/do-while-0-what-is-it-good-for

do { ... } while (0) - what is it good for? [duplicate]

   I've been seeing that expression for over 10 years now. I've been trying to think what it's good for.
   Since I see it mostly in #defines, I assume it's good for inner scope variable declaration and for
   using breaks (instead of gotos.)

   Is it good for anything else? Do you use it?

***
   It's the only construct in C that you can use to #define a multistatement operation, put a semicolon
   after, and still use within an if statement. An example might help:
#define FOO(x) foo(x); bar(x)

if (condition)
	FOO(x);
else // syntax error here
	...;

   Even using braces doesn't help:
#define FOO(x) { foo(x); bar(x); }

   Using this in an if statement would require that you omit the semicolon, which is counterintuitive:
if (condition)
	FOO(x)
else
	...

   If you define FOO like this:
#define FOO(x) do { foo(x); bar(x); } while (0)

   then the following is syntactically correct:
if (condition)
	FOO(x);
else
	....

***
   It is a way to simplify error checking and avoid deep nested if's. For example:
do {
	// do something
	if (error) {
		break;
	}
	// do something else
	if (error) {
		break;
	}
	// etc..
} while (0);

***
   It helps to group multiple statements into a single one so that a function-like macro can actually be
   used as a function. Suppose you have:
#define FOO(n) foo(n);bar(n)

   and you do:

void foobar(int n) {
	if (n)
		FOO(n);
}

   then this expands to:

void foobar(int n) {
	if (n)
		foo(n); bar(n);
}

   Notice that the second call bar(n) is not part of the if statement anymore.

   Wrap both into do { } while(0), and you can also use the macro in an if statement.

***
   It is interesting to note the following situation where the do {} while (0) loop won't work for you:

   If you want a function-like macro that returns a value, then you will need a statement
   expression: ({stmt; stmt;}) instead of do {} while(0):

#include <stdio.h>

#define log_to_string1(str, fmt, arg...) \
	do { \
		sprintf(str, "%s: " fmt, "myprog", ##arg); \
	} while (0)

#define log_to_string2(str, fmt, arg...) \
	({ \
		sprintf(str, "%s: " fmt, "myprog", ##arg); \
	})

int main() {
		char buf[1000];
		int n = 0;

		log_to_string1(buf, "%s\n", "No assignment, OK");
		n += log_to_string1(buf + n, "%s\n", "NOT OK: gcc: error: expected expression before 'do'");
		n += log_to_string2(buf + n, "%s\n", "This fixes it");
		n += log_to_string2(buf + n, "%s\n", "Assignment worked!");
		printf("%s", buf);
		return 0;
}

***
   Generically, do/while is good for any sort of loop construct where one must execute the loop at least
   once. It is possible to emulate this sort of looping through either a straight while or even a for
   loop, but often the result is a little less elegant. I'll admit that specific applications of this
   pattern are fairly rare, but they do exist. One which springs to mind is a menu-based console
   application:

do {
	char c = read_input();
	process_input(c);
} while (c != 'Q');


---
https://www.reddit.com/r/programming/comments/iegmrh/do_while_0_in_macros/

do {...} while (0) in macros : r/programming

***
Note that macros can still be dangerous in other ways if you don't write them correctly, for example:

#define foo(x) do { bar(x); baz(x); } while (0)

foo(count++)

Did the macro author really intendbaz to be called with the incremented value? Probably not.

***
That is so stupid.

Don't get me wrong, it's a clever solution. What's stupid is that it's a problem that needs to be solved in
the first place.

***
There's an even more powerful, and much more readable, way of doing this than the do-while trick. I don't know
why it doesn't get used more:

#define foo(x) (bar(x), baz(x))

This is a single expression, so it works with un-curly-braced if statements perfectly fine, yet is much more
readable. Plus, there's a huge advantage: this macro can return values! Let's use a more concrete example:

int bar(x) { do_some_other_stuff(x); return x + 1; }
#define foo1(x) do { printf("x = %d\n", x); bar(x) } while (0)

Now, you can call foo1(x) and it'll print out your string and call do_some_other_stuff in one step, which is
nice. But it can't do anything with that return x + 1 at the end of bar, e.g. this is a syntax error:

int y = foo1(5);    // error!

The comma operator approach lets you do everything a do-while block can do and more:

#define foo2(x) (printf("x = %d\n", x), bar(x))

int y = foo2(3);           // prints "x = 3", y is set to 4
int z = foo2(5) + 2;       // prints "x = 5", z is set to 8

if (condition) foo2(6);    // this works too!

People don't seem to know about the comma operator in C: it's really useful for various macro tricks. If you
want your macro to really mean a block of code, then the do-while trick is useful since you can write your
block of code as a true block of code. But if you're just looking to sequence two functions in a macro, then
the comma operator is named the sequence operator for a reason. It's just better.

(Of course, the real answer is to try and avoid macros to begin with, but sometimes you've just got to get
your hands dirty...)

***
Macros that are safe to use and behave like a proper function, eh? Our production code uses macros that:
  * Contain goto statement.
  * Have unbalanced { or }.
  * Contain if() statement, with no {} and no else.
  * Contain return statement.
  * Declare local variables, used later in the function.
  * Change global variables.
  * Declare a list of stuff in a header, which you include several times while redefining this macro to
    generate a bunch of structs and functions with the names from that list. And they stringify these names
    too, for debugging, you know.

I guess some similar parade of horrors is expected in any corporate codebase.

***
I know it's decidedly not how the preprocessor is normally used, but making the preprocessor work a little
harder so your code reads better isn't a crime.

Also: MACROS SHOULD BE CAPPED SO YOUR COWORKERS KNOW THEY'RE MACROS.

<util.h>

/* ... */
// For multi-statement macros
#define BLK_STMT do { x } while(0)
/* ... */

<libfoo.h>

#include "util.h"
/* ... */
#define FOO(x) BLK_STMT(\
	bar(x);\
	baz(x);\
)

Another good use for this sort of thing is arch-specific stuff without inline defines, e.g.,

<arch.h>

#ifdef COMPILER_FLAG
#define FOR_COMPILER_FLAG(x) BLOCK_STMT(x)
#else
#define FOR_COMPILER_FLAG(x)
#endif

<main.c>

/* ... */
FOR_COMPILER_FLAG(
	doTheSpecialThing();
);
/* ... */


***
Wouldn't if (1) { ... } work too?

***
Love these little tricks. I remember being awed when my professor used #if 0 to "comment" out a chunk of code
:D or learning to use iterator %= max_length to cycle a variable.

***
Now I know why I instinctively hate C macros since 1984. BTW I always use { } , even for just one statement.
Looks better and creates less confusion, also in version management when adding or erasing statements.
Indentation is control flow, python finally understands that. You explicitly make sure that the next line is
not just some broken equation or command. Gah I hate that.

***
#define foo(x) do { bar(x); baz(x); } while (0)

What are the advantages of use a macro such as the one above as opposed to writing a function such as the
following?

void foo(x) {
	bar(x);
	baz(x);
}

***
A macro can do a few things a normal function can't. E.g. a logging function could be written as

#define log(text)  do { printf(__FILE__ + ":" + __LINE__ + ": " + text); } while (0)

You couldn't write this as a function (correct me if I'm wrong) because __FILE__ and __LINE__ would stop
pointing to the location where the developer wrote the log statement. So the caller would have to pass
__FILE__ and __LINE__ manually every time if it were a plain old function.

***
Here's a classic example: I have a logging facility and I want to conditionally emit logs based on severity. I
want to write:

emit_to_log( extensive_analysis_as_string(x,y) );

... but do it in such a way that extensive_analysis_as_string() is only logged when
logging_level() >= SEVERITY_DEBUG.

I could just write everywhere

if ( logging_level() >= SEVERITY_DEBUG )
	emit_to_log(extensive_analysis_as_string(x,y));

... but that error-prone, tedious, and verbose.

I can't just wrap it in a function debug_log(extensive_analysis_as_string(x,y)) because then
extensive_analysis_as_string() would be executed unconditionally whether its output was ever used or not. This
could be a significant performance issue.

The most practical solution is a macro:

#define DEBUG_LOG(expr) do{if (logging_level>=SEVERITY_DEBUG){emit_to_log(expr);}}while(0)

... so now I just write:

DEBUG_LOG( extensive_analysis_as_string(x,y) );

It's clean. It's direct. It's hard to use incorrectly. It's (fairly) maintainable.

***
A macro will work with any type.

Replacing functions by macros rarely make sense. Macros are expanded in the parent scope, so they can be used
to declare variables, or access locals from the "caller".

***
You use macros for things a normal function cannot do; your example is using a macro for something that a
normal function can do.

Just this past week I wrote this:

#define LOAD_SYMBOL(dst,name) \
	 if (!(ret->dst = dlsym (ret->libh, name))) { \
		PRINTF ("Failed to find symbol [%s] in plugin [%s]\n", name, plugin_so); \
		goto errorexit; \
	 } \

	LOAD_SYMBOL (fptr_name, SYMB_NAME);
	LOAD_SYMBOL (fptr_version, SYMB_VERSION);
	LOAD_SYMBOL (fptr_connect, SYMB_CONNECT);

#undef LOAD_SYMBOL

It's safer with the macro than repeating the statements.


---

