filename: c_pointer-to-string-array_20211221.txt
https://aticleworld.com/pointer-to-string-array-in-c/

Pointer to string array in c

   In my previous article, I had described the array in brief but I have received some emails from the
   subscriber and they want me to write an article on string array in C. If you want to read about the
   array, you can see my article brief introduction of the array.

   We can create the string array in C (arrays of characters) using the 2d array of characters or an
   array of pointer to string.

1.) String array using the 2D array:
   As we know the array is a collection of similar data types and all the data stored in the
   contiguous memory location. So, in this case, each character will be placed at contiguous memory
   locations. Let us see the syntax,
char arr[ROW][COL]; //2d array of character


   For better understanding, I have created a 2d array of characters with 5 rows and 10 columns. You can
   see the below image in which the address of the first element is 0 and all elements are stored in a
   contiguous way.

   char arr[5][10] = {"PoojaS1", "PoojaS2", "PoojaS3", "PoojaS4", "PoojaS5"};

           0   1   2   3   4   5   6      7   8   9
       +---+---+---+---+---+---+---+------+---+---+
     0 | P | o | o | j | a | S | 1 | '\0' |   |   |
       +---+---+---+---+---+---+---+------+---+---+
    10 | P | o | o | j | a | S | 2 | '\0' |   |   |
       +---+---+---+---+---+---+---+------+---+---+
    20 | P | o | o | j | a | S | 3 | '\0' |   |   |
       +---+---+---+---+---+---+---+------+---+---+
    30 | P | o | o | j | a | S | 4 | '\0' |   |   |
       +---+---+---+---+---+---+---+------+---+---+
    40 | P | o | o | j | a | S | 5 | '\0' |   |   |
       +---+---+---+---+---+---+---+------+---+---+
   

2.) String array using the array of  pointer to string:
   Similar to the 2D array we can create the string array using the array of pointers to strings.
   Basically, this array is an array of character pointers where each pointer points to the string's
   first character. Let us see the syntax for the same,
char *arr[ROW]; //array of pointer to string


   You can see the below image in which I have created an array of pointer to a string whose size is 5.
   and each pointer is pointing to the address of the first character of the string.

   char *arr[5] = {"PoojaS1", "PoojaS2", "PoojaS3", "PoojaS4", "PoojaS5"};

  +-----+     +---+---+---+---+---+---+---+------+---+---+
  |  0 -|---->| P | o | o | j | a | S | 1 | '\0' |   |   |
  +-----+     +---+---+---+---+---+---+---+------+---+---+
  |  1 -|---->| P | o | o | j | a | S | 2 | '\0' |   |   |
  +-----+     +---+---+---+---+---+---+---+------+---+---+
  |  2 -|---->| P | o | o | j | a | S | 3 | '\0' |   |   |
  +-----+     +---+---+---+---+---+---+---+------+---+---+
  |  3 -|---->| P | o | o | j | a | S | 4 | '\0' |   |   |
  +-----+     +---+---+---+---+---+---+---+------+---+---+
  |  4 -|---->| P | o | o | j | a | S | 5 | '\0' |   |   |
  +-----+     +---+---+---+---+---+---+---+------+---+---+

   Based on how you want to represent the array of strings, you can define a pointer to access the
   string from the array. let see a few example code,

1.) Access 2d array of characters using the pointer to the array
   To access the string array, we need to create a pointer to the array and initialize the pointer with
   the array. Now using the for loop you can read all the strings of the array. See the below
   example code,

Method 1: Pointer to the 1D array:

#include<stdio.h>

int main() {
	int row =0;

	//create 2d array of the characters
	char arr[5][10] = {"PoojaS1", "PoojaS2", "PoojaS3", "PoojaS4", "PoojaS5"};

	//create pointer to the array
	char (*ptrArr)[10] = NULL;

	//initialize the pointer with array
	ptrArr = arr;

	for (row = 0; row < 5; ++row)// Loop for coloumn {
		printf("%s \n", ptrArr[row]);
	}

	return 0;
}

Method 2: Pointer to the 2D array

#include<stdio.h>

int main() {
	int row =0;

	//create 2d array of the characters
	char arr[5][10] = {"PoojaS1", "PoojaS2", "PoojaS3", "PoojaS4", "PoojaS5"};

	//create pointer to the 2d array
	char (*ptrArr)[5][10] = NULL;

	//initialize the pointer
	ptrArr = &arr;

	for (row = 0; row < 5; ++row)// Loop for coloumb {
		printf("%s \n", (*ptrArr)[row]);
	}

	return 0;
}

   You can see this article, [**1]https://aticleworld.com/access-two-dimensional-array-using-pointers-in-c/
   How to access the 2d array using a pointer.

2.) Access array of string using the pointer to the array and pointer  to pointer
Method 1: Pointer to the 1D array

#include<stdio.h>

int main() {
	int row =0;

	//create 2d array of the characters
	char * arr[5] = {"PoojaS1", "PoojaS2", "PoojaS3", "PoojaS4", "PoojaS5"};

	//create pointer to the array
	char * (*ptrArr)[5] = NULL;

	//initialize the pointer
	ptrArr = &arr;

	for (row = 0; row < 5; ++row)// Loop for coloumb {
		printf("%s \n", (*ptrArr)[row]);
	}

	return 0;
}


Method 2: Pointer to pointer

#include<stdio.h>

int main() {
	int row =0;

	//create 2d array of the characters
	char * arr[5] = {"PoojaS1", "PoojaS2", "PoojaS3", "PoojaS4", "PoojaS5"};

	//create pointer to the array
	char **ptr = NULL;

	//initialize the pointer with array
	ptr = arr;

	for (row = 0; row < 5; ++row)// Loop for coloumb {
		printf("   %s \n", ptr[row]);
	}

	return 0;
}

Some Invalid Operation on an Array of Pointers to Strings:
   Let's discuss some invalid operations on an array of pointers to strings that you should avoid during
   the coding. Let's consider the below-mentioned array of pointer to strings:
//array of pointers to strings

char * arr[6]

   When the above statement will execute, the compiler reserves 24 bytes of memory (4*6) to store 6
   pointers of type char (By assuming the size of the pointer is 4-bytes), but it doesn't allocation any
   memory for a string literal.

   Because we have not initialized the array with valid string literals and not allocated a valid memory
   to store the string. So each index of the array contains a garbage value and may be pointing to
   anywhere in the memory.

   So for the mentioned array below operation will be invalid, if we perform the below-mentioned
   operation on the array we got an undefined result.

Operation 1: strcpy(arr[0], "Aticleworld");         // invalid
Operation 2: strcat(arr[0], "Aticleworld");         // invalid
Operation 3: gets(arr[0]);                          // invalid
Operation 4: fgets(arr[0],10,stdin)                 // invalid
Operation 5: scanf("%s", arr[0]);                   // invalid



---
[**1]
https://aticleworld.com/access-two-dimensional-array-using-pointers-in-c

How to access two dimensional array using pointers in C

   I have written a lot of articles on array and pointer if you want you can see this link, C
   Tutorial. Nowadays many students ask me a question that how to access a multidimensional array with a
   pointer in C or access two dimensional array using pointers in C I have replied many students but
   every month I found this question in my Inbox.

   So I have decided to write an article on how to access a multidimensional array with a pointer
   (Access two-dimensional array using pointers in C). I am assuming you are already familiar with a
   multidimensional array, if you don't have the knowledge of array, then you should check this article,
   brief introduction of an array.

Relationship between array and pointer
   In C-language pointer and array are very close to each other, an array can be split in the form
   of the pointer. The name of the array is a pointer to its first element. So if acData is an array of
   character then acData will be the address of its first element. You can also say that acData is
   similar to the &acData[0]

   Below expression describe a relation between array and pointer,

acData[i]    = *(acData + i) -------------->1D array in form of pointer
a[i]         = *(a + i) ------------------->ith element of an 1D array
acData[i][j] = *(acData[i] + j); ---------->2D array in form of 1D array and pointer.
acData[i][j] = *(*(acData + i) + j) ------->2D array in form of pointer.


   Note Array elements stored in a consecutive memory block, so we can access the elements of the array
   using the pointer.

Access a 2d array using a single pointer
   In C language, the compiler calculates offset to access the element of the array. The calculation of
   the offset depends on the array dimensions.

   Let's take an example,

   Suppose int aiData[3][3] is a 2D array that has 3 rows and 3 columns.  If you need to access the 2nd
   element of 1 row in aiData, then calculates its offset that will be (1 * coloumb_number) + 2 ).	Now
   to access the element just add the offset in array base address and dereference it.

                                            +----+                 
                                            |  9 | *(*(aiData+0)+0)
                                            +----+                 
                                            |  6 | *(*(aiData+0)+1)
                                            +----+                 
                                            |  1 | *(*(aiData+0)+2)                
   +----+----+----+                         +----+                                 
   |  9 |  6 |  1 | *(aiData+0)             |144 | *(*(aiData+1)+0)
   +----+----+----+                         +----+                                  
   |144 | 70 | 50 | *(aiData+1)             | 70 | *(*(aiData+1)+1)               
   +----+----+----+                         +----+                                 
   | 10 | 12 | 78 | *(aiData+2)             | 50 | *(*(aiData+1)+2)                          
   +----+----+----+                         +----+                                
     aiData[3][3]                           | 10 | *(*(aiData+2)+0)
                                            +----+                                      
                                            | 12 | *(*(aiData+2)+1)                    
                                            +----+                                     
                                            | 78 | *(*(aiData+2)+2)                   
                                            +----+                                    
                                                                                                           
   Note: Array index always starts with 0, so 2nd means third element.

   See the below steps for the above description,
calculate offset => offset = (1 * coloumb_number)+ 2);

Add offset in array base address => (int *)aiData + offset; //here

typecast with int pointer because aiData is an array of integer

Get the element => *( (int *)aiData + offset );


   Note: General expression to calculates offset for 2D array is that, (ithRow * Total_number_Coloumb)+
   jthColoumb).

#include <stdio.h>

#define ROW 3
#define COL 3

int main(void) {
	// 2d array
	int aiData [ROW][COL] = { { 9, 6, 1 }, { 144, 70, 50 }, {10, 12, 78} };

	int *piData = NULL; //pointer to integer

	int iRow =0, iCol =0;


	piData = &aiData[0][0]; //You can also write *aiData

	for (iRow = 0; iRow < ROW; ++iRow) //Loop of row {
		for (iCol = 0; iCol < COL; ++iCol)// Loop for coloum {
			//Read element of 2D array
			printf("aiData[%d][%d] = %d\n",iRow,iCol, *(piData + ( iRow * COL) + iCol));
		}
	}

	return 0;
}

   We know that the array element is stored in the contiguous form so we can also access the elements of
   the two-dimensional array to calculate the total number of cells.

   See the below program,

#include <stdio.h>

#define ROW 3 // number of rows in array
#define COL 3 // number of col in array
#define TOTAL_CELLS (ROW * COL) //totall cells in array

int main(void) {
	// 2d array
	int aiData [ROW][COL] = { { 9, 6, 1 }, { 144, 70, 50 }, {10, 12, 78} };

	int *piData = NULL; //pointer to integer

	int arrayIndex = 0; //variable for array index

	piData = &aiData[0][0]; //You can also write *aiData

	for (arrayIndex = 0; arrayIndex < TOTAL_CELLS; ++arrayIndex) //Loop of row {
		printf(" array elements = %d\n", *(piData + arrayIndex ));
	}
	return 0;
}


If you want to learn more about the c language, here 10 Free days (up to 200 minutes) C video
course for you.

Access 2d array using a pointer to an array
   We can easily access a 2D array with the help of a pointer to the array. First, we need to define a
   new type for the 2d array using the typedef that helps you to avoid the complex syntax. If you don't
   know typedef see this article, application of typedef. After the creation of a new type for the
   2d array, create a pointer to the 2d array and assign the address of the 2d array to the pointer.

#include <stdio.h>

#define ROW 3
#define COL 3

typedef int Array2D[ROW][COL]; //New type

int main(void) {
	// 2d array
	Array2D aiData = { { 9, 6, 1 }, { 144, 70, 50 }, {10, 12, 78} };

	Array2D *p2DArray = NULL; //Pointer to the 2d Array

	int iRow =0, iCol =0; //Row and col

	p2DArray = &aiData; //Assign address of array to the pointer

	for (iRow = 0; iRow < ROW; ++iRow) //Loop of row {
		for (iCol = 0; iCol < COL; ++iCol)// Loop for coloumb {
			//Read element of 2D array
			printf("aiData[%d][%d] = %d\n",iRow,iCol, (*p2DArray)[iRow][iCol]);
		}
	}
	return 0;
}

   Similar to the two-dimensional array we can access three, fourth, ... etc dimensional array using the
   pointers.


---

