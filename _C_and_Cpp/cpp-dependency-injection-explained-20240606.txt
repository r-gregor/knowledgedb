filename: cpp_dependency_injection_explained_20240606.txt
https://www.quora.com/How-would-you-explain-the-term-dependency-injection-to-a-novice-programmer/answer/Chris-Reid-7

How would you explain the term "dependency injection" to a novice programmer?

Just about the most confusing term in CS is "Dependency Injection".
This is too bad because at its heart it only means that A class should receive a class it needs as a
parameter to a function or a constructor, instead of creating it internally and owning it.

class GasolineSource {
	size_t amount;
	void transfer(size_t n, size_t& dest) {
		if (n <= amount) {
			amount -= n;
			dest +=n;
		}
	}
};


class Car {
	size_t  gastank;

	virtual void getGasoline(GasolineSource&  gs, size_t amount) {
		if( gs.amount >=  amount)
			gs.transfer(amount, gastank);
		else  {  // ERROR }
	}
};

class Station : public GasolineSource{};
class pitstop : public GasolineSource{};
class FuelCan : public GasolineSource{};

class Racecar   : public Car{};
class DuneBuggy : public Car{};


int main() {
	Station station{10 * 1000};
	Pitstop pitstop{1200};
	FuelCan* can = new FuelCan{20};
	Racecar racerX{};
	racerX.getGasoline(pitstop, 55);
	DuneBuggy DBcooper();
	DBcooper.getGasoline(*can, 8.4);

	return 0;
}

A class does not have to know how a class instance parameter was created, or where, or what its internals
are, only its API, and only the API parts it is going to use, and only the base class in this type
of injection.

This means that you can swap out any instances that fulfill the API, and do not have to own the instance,
just use it, and then let it go, some other code can use it then.

It is an alternate, non-owning form of composition that is temporary for a single function, and can even
be hot-swappable because you can assume the object is going to work, and is properly instantiated.

It eliminates a class of problems in objects not being properly constructed so the owning class cannot
be properly constructed either, because the constructions of the class and its dependencies are decoupled.

It is very simple, but is often described in the most confusing way possible by academics trying to make
it seem like a high concept big brain idea that only academics can appreciate.

The trouble is that dependency injection is usually part of a triple system along with inversion of
control, and dependency inversion, both separate things, that are complicated to implement.

But using classes by reference as parameters instead of creating them as owned members is really pretty
simple.

Dependency Injection as a service often is implemented with a controller class that oversees
the creation, maintenance, and destruction of utility classes that do a job for other classes in the
main workflow.
In the Traditional model below, the main function is responsible for creation of A1, A2, and B3 classes,
that each have to create an be responsible for B1, B2, and C1, respectively. C1 has to create and be
responsible for A3. This is fine, except when A1 needs something from A3. Then you have to call
A1.perform( B3.getC().getA().function() ).

But what if C1 has not created A3, or A3 failed to construct? Main can't know that, A1 can't know that,
Even B3 might not know that. This compositional model falls apart if one of the dependencies clear down at
the bottom has a problem. What would be likely to happen at runtime is a backtracking destruction up the
line so that B3 even would fail as far as main was concerned. This could be for any reason construction
could fail. But it couples dependencies hard and baked-in.

  +------------------------------+  +-----------------------------------------------------+
  |  TRADITIONAL                 |  |   DEPENDENCY INJECTED                               |
  |  +------+                    |  |   +------+     +---------------------+              |
  |  |      |                    |  |   |      |     | DI()                |              |
  |  | Main |-->[A1()]-->[B1()]  |  |   | Main |<----| Dependency Injector |              |
  |  |      |                    |  |   |      |     |                     |              |
  |  +------+                    |  |   +------+     +---------------------+              |
  |     ||                       |  |                       ||| |||                       |
  |     ||                       |  |   +-------------------+|| ||+---------------+       |
  |     |+----->[A2()]-->[B2()]  |  |   |       +------------+| |+---------+      |       |
  |     |                        |  |   |       |      +------+ +--+       |      |       |
  |     |                        |  |   |       |      |           |       |      |       |
  |     V                        |  |   V       V      V           V       V      V       |
  |   [B3()]--->[C1()]-->[A3()]  |  | [A()]  [B())]  [C())]      [D()]  [E())]  [F())]    |
  |                              |  |                                                     |
  +------------------------------+  +-----------------------------------------------------+

In the dependency injected version, DI manages calls from main.
DI.cfunction(); main never has to worry about how DI does it, and allows communications between its
dependencies. DI creates and destroys and shares services itself, as needed by main or one of its other
constructed objects.

Now if one of the managed objects fails to construct, DI will not itself destruct, it will do some
handling. It will also not construct objects that are not needed as services by main by default.
Failures are communicated to main by DI as notices, not as crashing exceptions that can not be recovered
from. This provides robustness and "soft landings" for the system.

Let us develop an example.

class media;  // forward declarations
class Status;

class Player {
	Player() = default;
	virtual bool load(const Media& m);
	virtual Status play();
	virtual Status control(Control c);
};

Class DVDPlayer: public Player {
	bool load(DVD& d);
}



---


