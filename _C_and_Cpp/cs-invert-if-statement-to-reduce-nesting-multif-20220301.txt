filename: c_invert-if-statement-to-reduce-nesting_multif_20220301.txt
https://stackoverflow.com/questions/268132/invert-if-statement-to-reduce-nesting

Invert "if" statement to reduce nesting

   When I ran ReSharper on my code, for example:
if (some condition)
{
	Some code...
}

   ReSharper gave me the above warning (Invert "if" statement to reduce nesting), and suggested the
   following correction:
if (!some condition) return;
Some code...

   I would like to understand why that's better. I always thought that using "return" in the middle of a
   method problematic, somewhat like "goto".

***
   It is not only aesthetic, but it also reduces the maximum nesting level inside the method. This
   is generally regarded as a plus because it makes methods easier to understand (and indeed, many
   static analysis tools provide a measure of this as one of the indicators of code
   quality).

   On the other hand, it also makes your method have multiple exit points, something that another group
   of people believes is a no-no.

   Personally, I agree with ReSharper and the first group (in a language that has exceptions I find it
   silly to discuss "multiple exit points"; almost anything can throw, so there are numerous potential
   exit points in all methods).

   Regarding performance: both versions should be equivalent (if not at the IL level, then certainly
   after the jitter is through with the code) in every language. Theoretically this depends on the
   compiler, but practically any widely used compiler of today is capable of handling much more advanced
   cases of code optimization than this.

***
   A return in the middle of the method is not necessarily bad. It might be better to return immediately
   if it makes the intent of the code clearer. For example:
double getPayAmount() {
	double result;
	if (_isDead) result = deadAmount();
	else {
		if (_isSeparated) result = separatedAmount();
		else {
			if (_isRetired) result = retiredAmount();
			else result = normalPayAmount();
		};
	}
	return result;
};

   In this case, if _isDead is true, we can immediately get out of the method. It might be better to
   structure it this way instead:
double getPayAmount() {
	if (_isDead)      return deadAmount();
	if (_isSeparated) return separatedAmount();
	if (_isRetired)   return retiredAmount();

	return normalPayAmount();
};

   I've picked this code from the refactoring catalog. This specific refactoring is called: Replace
   Nested Conditional with Guard Clauses.

***
   This is a bit of a religious argument, but I agree with ReSharper that you should prefer less
   nesting. I believe that this outweighs the negatives of having multiple return paths from a function.

   The key reason for having less nesting is to improve code readability and maintainability. Remember
   that many other developers will need to read your code in the future, and code with less indentation
   is generally much easier to read.

   Preconditions are a great example of where it is okay to return early at the start of the function.
   Why should the readability of the rest of the function be affected by the presence of a precondition
   check?

   As for the negatives about returning multiple times from a method - debuggers are pretty powerful
   now, and it's very easy to find out exactly where and when a particular function is returning.

   Having multiple returns in a function is not going to affect the maintainance programmer's job.

***
   As others have mentioned, there shouldn't be a performance hit, but there are other considerations.
   Aside from those valid concerns, this also can open you up to gotchas in some circumstances. Suppose
   you were dealing with a double instead:

public void myfunction(double exampleParam){
	if(exampleParam > 0){
		//Body will *not* be executed if Double.IsNan(exampleParam)
	}
}

   Contrast that with the seemingly equivalent inversion:

public void myfunction(double exampleParam){
	if(exampleParam <= 0)
		return;
	//Body *will* be executed if Double.IsNan(exampleParam)
}

   So in certain circumstances what appears to be a a correctly inverted if might not be.

***
   The idea of only returning at the end of a function came back from the days before languages had
   support for exceptions. It enabled programs to rely on being able to put clean-up code at the end of
   a method, and then being sure it would be called and some other programmer wouldn't hide a return in
   the method that caused the cleanup code to be skipped. Skipped cleanup code could result in a memory
   or resource leak.

   However, in a language that supports exceptions, it provides no such guarantees. In a language that
   supports exceptions, the execution of any statement or expression can cause a control flow that
   causes the method to end. This means clean-up must be done through using the finally or using
   keywords.

   Anyway, I'm saying I think a lot of people quote the 'only return at the end of a method' guideline
   without understanding why it was ever a good thing to do, and that reducing nesting to improve
   readability is probably a better aim.

***
   I'd like to add that there is name for those inverted if's - Guard Clause. I use it whenever I can.

   I hate reading code where there is if at the beginning, two screens of code and no else. Just invert
   if and return. That way nobody will waste time scrolling.

***
   This is of course subjective, but I think it strongly improves on two points:
     * It is now immediately obvious that your function has nothing left to do if condition holds.
     * It keeps the nesting level down. Nesting hurts readability more than you'd think.

***
   Guard clauses or pre-conditions (as you can probably see) check to see if a certain condition is met
   and then breaks the flow of the program. They're great for places where you're really only interested
   in one outcome of an if statement. So rather than say:
if (something) {
	// a lot of indented code
}

   You reverse the condition and break if that reversed condition is fulfilled
if (!something) return false; // or another value to show your other code the function did not execute

// all the code from before, save a lot of tabs

   return is nowhere near as dirty as goto. It allows you to pass a value to show the rest of your code
   that the function couldn't run.

   You'll see the best examples of where this can be applied in nested conditions:

if (something) {
	do-something();
	if (something-else) {
		do-another-thing();
	} else {
		do-something-else();
	}
}

   vs:
if (!something) return;
do-something();

if (!something-else) return do-something-else();
do-another-thing();

   You'll find few people arguing the first is cleaner but of course, it's completely subjective. Some
   programmers like to know what conditions something is operating under by indentation, while I'd much
   rather keep method flow linear.

   I won't suggest for one moment that precons will change your life or get you laid but you might find
   your code just that little bit easier to read.

***
   Performance is in two parts. You have performance when the software is in production, but you also
   want to have performance while developing and debugging. The last thing a developer wants is to
   "wait" for something trivial. In the end, compiling this with optimization enabled will result in
   similar code. So it's good to know these little tricks that pay off in both scenarios.

   The case in the question is clear, ReSharper is correct. Rather than nesting if statements, and
   creating new scope in code, you're setting a clear rule at the start of your method. It increases
   readability, it will be easier to maintain, and it reduces the amount of rules one has to sift
   through to find where they want to go.

***
   Personally I prefer only 1 exit point. It's easy to accomplish if you keep your methods short and to
   the point, and it provides a predictable pattern for the next person who works on your code.

   eg.
 bool PerformDefaultOperation() {
	bool succeeded = false;

	DataStructure defaultParameters;

	if ((defaultParameters = this.GetApplicationDefaults()) != null) {
		succeeded = this.DoSomething(defaultParameters);
	}

	return succeeded;
}

   This is also very useful if you just want to check the values of certain local variables within a
   function before it exits. All you need to do is place a breakpoint on the final return and you are
   guaranteed to hit it (unless an exception is thrown).

***
   Avoiding multiple exit points can lead to performance gains. I am not sure about C# but in C++ the
   Named Return Value Optimization (Copy Elision, ISO C++ '03 12.8/15) depends on having a single exit
   point. This optimization avoids copy constructing your return value (in your specific example it
   doesn't matter). This could lead to considerable gains in performance in tight loops, as you are
   saving a constructor and a destructor each time the function is invoked.

   But for 99% of the cases saving the additional constructor and destructor calls is not worth the loss
   of readability nested if blocks introduce (as others have pointed out).

***
   Many good reasons about how the code looks like. But what about results?

   Let's take a look to some C# code and its IL compiled form:
using System;

public class Test {
	public static void Main(string[] args) {
		if (args.Length == 0) return;
		if ((args.Length+2)/3 == 5) return;
		Console.WriteLine("hey!!!");
	}
}

   This simple snippet can be compiled. You can open the generated .exe file with ildasm and check what
   is the result. I won't post all the assembler thing but I'll describe the results.

   The generated IL code does the following:
    1. If the first condition is false, jumps to the code where the second is.
    2. If it's true jumps to the last instruction. (Note: the last instruction is a return).
    3. In the second condition the same happens after the result is calculated. Compare and: got to the
       Console.WriteLine if false or to the end if this is true.
    4. Print the message and return.

   So it seems that the code will jump to the end. What if we do a normal if with nested code?
using System;

public class Test {
	public static void Main(string[] args) {
		if (args.Length != 0 && (args.Length+2)/3 != 5) {
			Console.WriteLine("hey!!!");
		}
	}
}

   The results are quite similar in IL instructions. The difference is that before there were two jumps
   per condition: if false go to next piece of code, if true go to the end. And now the IL code flows
   better and has 3 jumps (the compiler optimized this a bit):
    1. First jump: when Length is 0 to a part where the code jumps again (Third jump) to the end.
    2. Second: in the middle of the second condition to avoid one instruction.
    3. Third: if the second condition is false, jump to the end.

   Anyway, the program counter will always jump.

***
   My idea is that the return "in the middle of a function" shouldn't be so "subjective". The reason is
   quite simple, take this code:

function do_something( data ){

	if (!is_valid_data( data ))
		return false;

	do_something_that_take_an_hour( data );

	istance = new object_with_very_painful_constructor( data );

	if ( istance is not valid ) {
		error_message( );
		return ;
	}

	connect_to_database ( );
	get_some_other_data( );
	return;
}

   Maybe the first "return" it's not SO intuitive, but that's really saving. There are too many "ideas"
   about clean codes, that simply need more practise to lose their "subjective" bad ideas.
  


---
https://www.codebye.com/invert-if-statement-to-reduce-nesting-resharper.html

ReSharper Invert if statement to reduce nesting

   When I ran ReSharper on my code, for example:
if (some condition) {
	Some code...
}

   ReSharper gave me the above warning (Invert "if" statement to reduce nesting), and suggested the
   following correction:

if (!some condition) return;
Some code...

   I would like to understand why that's better. I always thought that using "return" in the middle of a
   method problematic, somewhat like "goto".

" Invert if statement to reduce nesting "

Answer 1 :
   A return in the middle of the method is not necessarily bad. It might be better to return immediately
   if it makes the intent of the code clearer. For example:

double getPayAmount() {
	double result;
	if (_isDead) result = deadAmount();
	else {
		if (_isSeparated) result = separatedAmount();
		else {
			if (_isRetired) result = retiredAmount();
			else result = normalPayAmount();
		};
	}
	 return result;
};

   In this case, if _isDead is true, we can immediately get out of the method. It might be better to
   structure it this way instead:

double getPayAmount() {
	if (_isDead) return deadAmount();
	if (_isSeparated) return separatedAmount();
	if (_isRetired) return retiredAmount();
	return normalPayAmount();
};

   This specific refactoring is called: Replace Nested Conditional with Guard Clauses.

Answer 2:
   It is not only aesthetic, but it also reduces the maximum nesting level inside the method. This is
   generally regarded as a plus because it makes methods easier to understand (and indeed, many static
   analysistools provide a measure of this as one of the indicators of code quality).

   On the other hand, it also makes your method have multiple exit points, something that another group
   of people believes is a no-no.

   Personally, I agree with ReSharper and the first group (in a language that has exceptions I find it
   silly to discuss "multiple exit points"; almost anything can throw, so there are numerous potential
   exit points in all methods).

   Regarding performance: both versions should be equivalent (if not at the IL level, then certainly
   after the jitter is through with the code) in every language. Theoretically this depends on the
   compiler, but practically any widely used compiler of today is capable of handling much more advanced
   cases of code optimization than this.

Answer 3:
   This is a bit of a religious argument, but I agree with ReSharper that you should prefer less
   nesting. I believe that this outweighs the negatives of having multiple return paths from a function.

   The key reason for having less nesting is to improve code readability and maintainability. Remember
   that many other developers will need to read your code in the future, and code with less indentation
   is generally much easier to read.

   Preconditions are a great example of where it is okay to return early at the start of the function.
   Why should the readability of the rest of the function be affected by the presence of a precondition
   check?

   As for the negatives about returning multiple times from a method - debuggers are pretty powerful
   now, and it's very easy to find out exactly where and when a particular function is returning.

   Having multiple returns in a function is not going to affect the maintainance programmer's job.

   Poor code readability will.


---
https://refactoring.guru/replace-nested-conditional-with-guard-clauses

Replace Nested Conditional with Guard Clauses

Problem
   You have a group of nested conditionals and it's hard to determine the normal flow of code execution.

Solution
   Isolate all special checks and edge cases into separate clauses and place them before the main
   checks. Ideally, you should have a "flat" list of conditionals, one after the other.

Java Before
public double getPayAmount() {

	double result;

	if (isDead) {
		result = deadAmount();
	} else {
		if (isSeparated) {
		result = separatedAmount();
		} else {
			if (isRetired) {
				result = retiredAmount();
			} else {
				result = normalPayAmount();
			}
		}
	}
	return result;
}

Java After
public double getPayAmount() {
	if (isDead) {
		return deadAmount();
	}
	if (isSeparated) {
		return separatedAmount();
	}
	if (isRetired) {
		return retiredAmount();
	}
	return normalPayAmount();
}


Python Before
def getPayAmount(self):
	if self.isDead:
		result = deadAmount()
	else:
		if self.isSeparated:
			result = separatedAmount()
		else:
			if self.isRetired:
				result = retiredAmount()
			else:
				result = normalPayAmount()
	return result

Python After
def getPayAmount(self):
	if self.isDead:
		return deadAmount()
	if self.isSeparated:
		return separatedAmount()
	if self.isRetired:
		return retiredAmount()
	return normalPayAmount()

Why Refactor
   Spotting the "conditional from hell" is fairly easy. The indentations of each level of nestedness
   form an arrow, pointing to the right in the direction of pain and woe:
if () {
	if () {
		do {
			if () {
				if () {
					if () {
						...
					}
				}
				...
			}
			...
		}
		while ();
		...
	}
	else {
		...
	}
}

   It's difficult to figure out what each conditional does and how, since the "normal" flow of code
   execution isn't immediately obvious. These conditionals indicate helter-skelter evolution, with each
   condition added as a stopgap measure without any thought paid to optimizing the overall structure.

   To simplify the situation, isolate the special cases into separate conditions that immediately end
   execution and return a null value if the guard clauses are true. In effect, your mission here is to
   make the structure flat.

How to Refactor
   Try to rid the code of side effects-Separate Query from Modifier may be helpful for the purpose.
   This solution will be necessary for the reshuffling described below.
    1. Isolate all guard clauses that lead to calling an exception or immediate return of a value from
       the method. Place these conditions at the beginning of the method.
    2. After rearrangement is complete and all tests are successfully completed, see whether you can use
       Consolidate Conditional Expression for guard clauses that lead to the same exceptions or
       returned values.



---
https://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting

How and Why to Avoid Excessive Nesting

Background
   This probably sounds really nit-picky or OCD, but I think it's an issue worth addressing. Excessive
   nesting of logic within code can make things nightmarish to read. Even a few of years ago I never
   thought anything of this. I mean, how much could it really affect someone reading it? He/she must be
   a complete newb to not be able to read my logic. Fast forward to a co-op placement where this was
   more closely moderated by my managers, and I began to pay more attention to it...

Why?
   Alright, so all that you know so far about my opinion on this is that excessive nesting bothers me.
   So far, my mission is accomplished. Everything else is just extra. The first issue with excessive
   nesting is that it actually makes logic hard to follow. If you're doing code reviews or revisiting
   your old code, large methods that have lots of nested if statements and loops actually become a
   tangled mess of logical workflows. You don't need to believe me yet, but I'm hoping by the end of
   this you might change your mind.

   The next thing, and it's related, is that it makes refactoring code quite tricky. If you have lot's
   of deeply nested if statements, switching up the behaviour of a function even a little bit could have
   your mind warping with how to tackle all the logical branches. Have fun. Remember that one monolithic
   function that nobody wanted to go back and refactor? Well, it turns out you need to pass in another
   parameter now and handle it in all of your separate logical paths. Hold back the tears when you're
   trying to recall the logic once you're 10+ levels deep into nested if statements.

   Another key point I'd like to mention is that, in my opinion, the larger the vertical separation
   between a conditional check and it's bodies (i.e. the if block and the else block) the more difficult
   it becomes to read the code. Of course, this may not be a law or an all-the-time thing, but it's
   certainly a decent guideline. Think about it though. If you have an enormous block of code for your
   if statement body, by the time you finish understanding that, you have to go back up to the if
   statement condition and invert the whole thing to beign to understand what your else block does.

The Offender
   Let's have a look at some real offensive code. Who knows what it does really... Well, nobody does.
   Why? Because it's completely contrived to illustrate my point. And that's that. Behold the horror!
private void DoStuff() {
	foreach (thing in thisList) {
		if (condition1) {
			if (condition2) {
				DoThis(thing);
			} else {
				if (condition3) {
					continue;
				} else {
					if (condition4) {
						continue;
					} else {
						if (condition5) {
							if (condition6) {
								continue;
							} else {
								if (condition7) {
									continue;
								} else {
									if (condition8) {
										DoThis(thing);
									}
								}
							}
						}
					}
				}
			}
		} else {
			DoThis(thing);
		}
	}
}

   Pretty filthy, right? In all honesty, anyone who has worked in production code is guaranteed to have
   seen code that nests much much deeper... veering right off the developer's window (and some of us
   code with multiple monitors). It's a scary world out there, and this example doesn't even begin to
   illustrate how bad it can get. I mean, this particular example actually fit on my narrow blog window.

A Better Way?

   Well, fixing this type of thing is nice and easy:

private void DoStuff() {
	foreach (thing in thisList) {
		if (!condition1) {
			DoThis(thing);
			continue;
		}

		if (condition2) {
			DoThis(thing);
			continue;
		}

		if (condition3 || condition4 || !condition5 || condition6 || condition7) {
			continue;
		}

		if (condition8) {
			DoThis(thing);
		}
	}
}

   That's so much prettier. So what'd I do there? A handful of techniques:
     * Invert logical blocks if they can reduce your nesting. For condition1, I had an if/else block
       where DoThis(thing) resided in the bottom else block... farrrrr farrrr away from the check
       itself. I simply inverted this check and moved the else block up. Of course, I then had to put a
       continue statement there to go back up to the next iteration.
     * For condition2, by simply placing a continue right after the method call in the body, I was able
       to completely eliminate the else block and reduce nesting by a whole level. This works well with
       if/else blocks with returns too.
     * Next up was a whole pile of combinations for checking when I'm not going to be calling
       DoThis(thing). That reduced nesting by a bajillion levels, approximately.
     * The final block there for condition8 was still necessary. Of course, it could have be written to
       be the inverse check (so, if NOT condition8) with a continue inside the block, followed by
       DoThis(thing) outside of the if block. To me this would have been a bit overkill.

Did You Catch That?
   Something extremely important to remember when changing logical flows like this is that the order you
   check your conditions is EXTREMELY important. Notice how in my refactored version the condition
   checks are still in the same order that they originally appeared? This is on purpose.

   Consider if I move condition8 up to the if statement that tests condition1 and say if NOT condition1,
   OR condition8. Now this is technically not equivalent to the initial implementation. Why? Because the
   initial implementation says that for one of the logical paths that call DoThis(thing) the following
   must be met:
     * condition1 = true
     * conditon2 = false
     * conditon3 = false
     * condition4 = false
     * condition5 = true
     * conditon6 = false
     * condition7 = false
     * condition8 = true

   Thus, by combining the condition8 check with the condition1 check, how have I guaranteed all those
   other conditions? Additionally, how do I know that skipping those condition checks (i.e. pretend they
   are method calls) has not altered state elsewhere in the class? This optimization actually may not
   make the code incorrect in certain situations ( because it really depends what those conditions are),
   but it's important to note that the checks would not be equivalent to the original. It's just
   something to pay attention to, but who knows, you may even find that you can optimize some of those
   checks away depending on your situation!


---

