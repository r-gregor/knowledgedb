filename: c_howto-get-filesize-multyf_20221005.txt
https://dev.to/namantam1/ways-to-get-the-file-size-in-c-2mag

 Ways to get the file size in C
#cprogramming
#filehandling
#programming
#operatingsystem

In this article, I will discuss two approaches for getting the file size using the C programming language.
Approach 1

When we have to get the file size first approach that comes to our mind is to open the file, seek the cursor
to the end of the file, and then get the position of the cursor which is nothing but the size of the file.

Let's understand how can we achieve this.

  - First, open a file using fopen. The first argument is the file path and the second argument is mode and
    it returns the file descriptor. Since we don't have to modify the file open it in read mode using "r".
  - Now move the cursor to the end of the file using fseek which takes the following arguments respectively.
      - fd: file descriptor of the file opened.
      - offset: how much to offset w.r.t the third argument position.
      - whence: from where the cursor should consider moving from. We have three options for it, SEEK_SET
        relative to the start of the file, SEEK_CUR relative to the current position, and SEEK_END relative
        to the end of the file.

Since we have to move to the end of the file we take relative to the end of the file and offset it as zero,
as we have to move zero from the end. fseek return -1 if it fails.

  - Now use ftell to get the current position which takes fd as an argument and returns the current position
    which is our file size. On failing it returns -1.

    NOTE: If the cursor move by 1 unit we consider it as 1 byte because the size of char is 1 byte and fopen
    reads the file character by character only.

#include <stdio.h>

// function get file size
long get_file_size(char *);

int main() {
	char *filename = "a.out";
	printf(
		"Size of file `%s` is %ld\n", 
		filename, 
		get_file_size(filename)
	);

	return 0;
}

long get_file_size(char *filename) {
	FILE *fp = fopen(filename, "r");

	if (fp==NULL)
		return -1;

	if (fseek(fp, 0, SEEK_END) < 0) {
		fclose(fp);
		return -1;
	}

	long size = ftell(fp);
	// release the resources when not required
	fclose(fp);
	return size;
}

Size of file `a.out` is 51880 bytes

Approach 2
In this approach, we use stat API to get the file information which also includes file size.
For this, we simply call the stat function which takes a file path as the first argument and pointer to the
stat struct variable as the second argument and returns -1 on failure.

To get the file size we can simply use the st_size attribute.

#include <sys/stat.h> // stat

// inherit the above base code here

long get_file_size(char *filename) {
	struct stat file_status;
	if (stat(filename, &file_status) < 0) {
		return -1;
	}

	return file_status.st_size;
}

Output

Size of file `a.out` is 51880 bytes

Using this we can get some other information about a file such as permission, creation time, user id, group
id, etc. Also, there are some other functions defined that can be used based on requirements. Check out its
man page for more info.

Which one should be used?

The second approach is more recommended because of the following reason.

  - It's fast as we don't have to open a file which in the first approach has to be done. Some compilers may
    buffer a file on opening which makes the first approach slower.
  - The code is more clear to other developers that we are trying to get file info.

But this code is not portable. As other APIs are developed on OS like windows to get file info.

Whereas the first approach code is portable. As same code works normally without any problem.

So, in conclusion, which strategy we should take is entirely dependent on our requirements.

    This article is highly inspired by the content provided by Jacob Sorber on his youtube channel.

Thank you so much for reading this article. I'm a passionate engineering student learning new things so If
you find any mistakes or have any suggestions please let me know in the comments.

Also, consider sharing and giving a thumbs up If this post helps you in any way.


---
https://www.geeksforgeeks.org/c-program-find-size-file/

C Program to find size of a File

   Given a text file, find its size in bytes.

   Examples:
Input :  file_name = "a.txt"
         Let "a.txt" contains "geeks"
Output : 6 Bytes
There are 5 bytes for 5 characters then an extra
byte for end of file.

Input :  file_name = "a.txt"
         Let "a.txt" contains "geeks for geeks"
Output : 16 Bytes


   The idea is to use fseek() in C and ftell in C. Using fseek(), we move file
   pointer to end, then using ftell(), we find its position which is actually size in bytes.

// C program to find the size of file
#include <stdio.h>

long int findSize(char file_name[]) {
	// opening the file in read mode
	FILE* fp = fopen(file_name, "r");

	// checking if the file exist or not
	if (fp == NULL) {
		printf("File Not Found!\n");
		return -1;
	}

	fseek(fp, 0L, SEEK_END);

	// calculating the size of the file
	long int res = ftell(fp);

	// closing the file
	fclose(fp);

	return res;
}

// Driver code
int main() {
	char file_name[] = { "a.txt" };
	long int res = findSize(file_name);
	if (res != -1)
		printf("Size of the file is %ld bytes \n", res);
	return 0;
}



---
https://stackoverflow.com/questions/238603/how-can-i-get-a-files-size-in-c

How can I get a file's size in C? [duplicate]

   How can I find out the size of a file I opened with an application written in C ? I would
   like to know the size, because I want to put the content of the loaded file into a string,
   which I allocate using malloc(). Just writing malloc(10000*sizeof(char)); is IMHO a bad
   idea.

***
   You need to seek to the end of the file and then ask for the position:
fseek(fp, 0L, SEEK_END);
sz = ftell(fp);

   You can then seek back, e.g.:
fseek(fp, 0L, SEEK_SET);

   or (if seeking to go to the beginning)
rewind(fp);

***
Using standard library:
   Assuming that your implementation meaningfully supports SEEK_END:
fseek(f, 0, SEEK_END); // seek to end of file
size = ftell(f); // get current file pointer
fseek(f, 0, SEEK_SET); // seek back to beginning of file
// proceed with allocating memory and reading the file

Linux/POSIX:
   You can use stat (if you know the filename), or fstat (if you have the file descriptor).

   Here is an example for stat:
#include <sys/stat.h>
struct stat st;
stat(filename, &st);
size = st.st_size;

Win32:
   You can use GetFileSize or GetFileSizeEx.

***
   If you have the file descriptor fstat() returns a stat structure which contain the file
   size.
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

// fd = fileno(f); //if you have a stream (e.g. from fopen), not a file descriptor.
struct stat buf;
fstat(fd, &buf);
off_t size = buf.st_size;

***
   I ended up just making a short and sweet fsize function(note, no error checking)
int fsize(FILE *fp) {
	int prev=ftell(fp);
	fseek(fp, 0L, SEEK_END);
	int sz=ftell(fp);
	fseek(fp,prev,SEEK_SET); //go back to where we were
	return sz;
}

   It's kind of silly that the standard C library doesn't have such a function, but I can see
   why it'd be difficult as not every "file" has a size(for instance /dev/null)

***
   How to use lseek/fseek/stat/fstat to get filesize ?
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

void fseek_filesize(const char *filename) {
	FILE *fp = NULL;
	long off;

	fp = fopen(filename, "r");
	if (fp == NULL) {
		printf("failed to fopen %s\n", filename);
		exit(EXIT_FAILURE);
	}

	if (fseek(fp, 0, SEEK_END) == -1) {
		printf("failed to fseek %s\n", filename);
		exit(EXIT_FAILURE);
	}

	off = ftell(fp);
	if (off == -1) {
		printf("failed to ftell %s\n", filename);
		exit(EXIT_FAILURE);
	}

	printf("[*] fseek_filesize - file: %s, size: %ld\n", filename, off);

	if (fclose(fp) != 0) {
		printf("failed to fclose %s\n", filename);
		exit(EXIT_FAILURE);
	}
}

void fstat_filesize(const char *filename) {
	int fd;
	struct stat statbuf;

	fd = open(filename, O_RDONLY, S_IRUSR | S_IRGRP);
	if (fd == -1) {
		printf("failed to open %s\n", filename);
		exit(EXIT_FAILURE);
	}

	if (fstat(fd, &statbuf) == -1) {
		printf("failed to fstat %s\n", filename);
		exit(EXIT_FAILURE);
	}

	printf("[*] fstat_filesize - file: %s, size: %lld\n", filename, statbuf.st_size);

	if (close(fd) == -1) {
		printf("failed to fclose %s\n", filename);
		exit(EXIT_FAILURE);
	}
}

void stat_filesize(const char *filename) {
	struct stat statbuf;

	if (stat(filename, &statbuf) == -1) {
		printf("failed to stat %s\n", filename);
		exit(EXIT_FAILURE);
	}

	printf("[*] stat_filesize - file: %s, size: %lld\n", filename, statbuf.st_size);

}

void seek_filesize(const char *filename) {
	int fd;
	off_t off;

	if (filename == NULL) {
		printf("invalid filename\n");
		exit(EXIT_FAILURE);
	}

	fd = open(filename, O_RDONLY, S_IRUSR | S_IRGRP);
	if (fd == -1) {
		printf("failed to open %s\n", filename);
		exit(EXIT_FAILURE);
	}

	off = lseek(fd, 0, SEEK_END);
	if (off == -1) {
		printf("failed to lseek %s\n", filename);
		exit(EXIT_FAILURE);
	}

	printf("[*] seek_filesize - file: %s, size: %lld\n", filename, (long long) off);

	if (close(fd) == -1) {
		printf("failed to close %s\n", filename);
		exit(EXIT_FAILURE);
	}
}

int main(int argc, const char *argv[]) {
	int i;

	if (argc < 2) {
		printf("%s <file1> <file2>...\n", argv[0]);
		exit(0);
	}

	for(i = 1; i < argc; i++) {
		seek_filesize(argv[i]);
		stat_filesize(argv[i]);
		fstat_filesize(argv[i]);
		fseek_filesize(argv[i]);
	}

	return 0;
}

***
   Have you considered not computing the file size and just growing the array if necessary?
   Here's an example (with error checking ommitted):

#define CHUNK 1024

/* Read the contents of a file into a buffer.  Return the size of the file
 * and set buf to point to a buffer allocated with malloc that contains
 * the file contents.
 */
int read_file(FILE *fp, char **buf) {
	int n, np;
	char *b, *b2;

	n = CHUNK;
	np = n;
	b = malloc(sizeof(char)*n);
	while ((r = fread(b, sizeof(char), CHUNK, fp)) > 0) {
		n += r;
		if (np - n < CHUNK) {
			np *= 2;                         // buffer is too small, the next read could overflow!
			b2 = malloc(np*sizeof(char));
			memcpy(b2, b, n * sizeof(char));
			free(b);
			b = b2;
		}
	}
	*buf = b;
	return n;
}

   This has the advantage of working even for streams in which it is impossible to get the
   file size (like stdin).

***
#include <stdio.h>

#define MAXNUMBER 1024

int main() {
	int i;
	char a[MAXNUMBER];

	FILE *fp = popen("du -b  /bin/bash", "r");

	while((a[i++] = getc(fp))!= 9);

	a[i] ='\0';

	printf(" a is %s\n", a);

	pclose(fp);
	return 0;
}



---

