filename: c_arrays-vs-pointers_20230914.txt
https://cstdspace.quora.com/Arrays-vs-Pointers-in-C

Arrays vs. Pointers in C

There is a commonly used phrase among C programmers when talking about how arrays work that an array
is "just a pointer". This is at best confusing, and I'm on a mission to call it out as bad
practice. Arrays are not pointers; they are completely different animals.

When you declare an array in C, such as

	int arr[N];

what you get in memory looks like this:

	     +---+
	arr: |   | arr[0]
	     +---+
	     |   | arr[1]
	     +---+
	     |   | arr[2]
	     +---+
	      ...
	     +---+
	     |   | arr[N-1]
	     +---+

No storage is materialized for a pointer anywhere. Storage is only materialized for the array elements
themselves; there is no object arr separate from the array elements arr[0], arr[1], arr[2], etc. The
expressions arr, &arr, and &arr[0] will all yield the same address value (adjusted for type) - that
cannot happen if arr is "just a pointer."

However, when an array expression appears in most contexts, it is converted, or "decays" to a pointer
expression, and the value of the pointer is the address of the first element of the array.

The only exceptions to this rule are when the array expression is an operand of the sizeof, _Alignof,
or unary & operators, or if it is a string literal used to initialize a character array in a declaration:

	/**
	 * arr is a 10-element array of int
	 * The *expression* "arr" will decay
	 * to type int * under most circumstances;
	 */
	int arr[10];

	/**
	 * The following is equivalent to writing
	 *
	 * int *p = &arr[0];
	 *
	 * the *expression* arr "decays" to type
	 * int *
	 */
	int *p = arr;

	/**
	 * Since arr is the operand of the unary
	 * & operator, it does *not* decay to type
	 * int *; instead, the type of the expression
	 * &arr is int (*)[10], or pointer to 10-
	 * element array of int
	 */
	int (*ap)[10] = &arr;

	/**
	 * The expression "Hello" is not
	 * being used to initialize an *array*,
	 * so it will "decay" from type char[6]
	 * to char *.  Equivalent to writing
	 * char *cp = &"Hello"[0];
	 */
	char *cp = "Hello";

	/**
	 * The expression "Hello" is being used to
	 * initialize an array, so it will *not*
	 * "decay" to a pointer type.  The size of
	 * buf will be computed from the size of the
	 * literal and the contents of the literal
	 * will be copied to it.
	 */
	char buf[] = "Hello";

	/**
	 * The expression arr is the operand of sizeof,
	 * so it will not decay to a pointer type;
	 * the total size of the array will be
	 * written to s.
	 */
	size_t s = sizeof arr;

When you call a function with an array expression as an argument:

	foo( arr );

the compiler implicitly converts the expression arr from an array type to a pointer to its first element:

	foo( &arr[0] );

and what the function actually receives is a pointer, not an array:

	void foo( int *p ) { ... }

In the context of a function parameter declaration, T a[N] and T a[] are "adjusted" to T *a; all
three declare the parameter as a pointer, not an array.

Multi-dimensional array expressions will "decay" to pointers to arrays, not pointers to pointers; e.g.,
given the declaration char names[10][20], the expression names will "decay" to type char (*)[20]
(pointer to 20-element array of char), not char **.

So, the inevitable question: why?! Why do arrays behave like this?

C was derived from an earlier language named B; when you declared an array in B, an extra word was set
aside to store the location of the first element (essentially a pointer):

	auto arr[N];

	     +---+
	arr: |   | ---------------+
	     +---+                |
	      ...                 |
	     +---+                |
	     |   | arr[0] <-------+
	     +---+
	     |   | arr[1]
	     +---+
	     |   | arr[2]
	     +---+
	      ...
	     +---+
	     |   | arr[N-1]
	     +---+

The array subscript operation a[i] was defined as *(a + i) - given the pointer value stored in a,
offset i words from that location and dereference the result.

When he was designing C, Ritchie wanted to keep B's array behavior (a[i] == *(a + i)) but he didn't
want to keep that explicit pointer around, so he came up with the decay rule. Instead of a storing a
pointer, it evaluates to a pointer under most circumstances.

Because the array subscript [] operation is defined in terms of pointer operations, you can use it on
pointer variables as well as array variables:

int *ap = malloc( sizeof *ap * 10 );
for ( size_t i = 0; i < 10; i++ )
	ap[i] = some_value();

Thanks to the "decay" rule, array expressions lose their "array-ness" under most circumstances. This
is why you cannot pass an array argument "by value", this is why functions cannot return array types,
this is why an array expression cannot be the target of an assignment, this is why all the string library
functions take char * arguments, etc. Most of the time when we're working with arrays, we're actually
doing so through pointer expressions (even when hidden behind the [] operator). But arrays themselves
are not pointers, we shouldn't pretend they are, and we shouldn't glibly tell people trying to learn
the language that they are. It only leads to confusion and misunderstanding.


---

