filename: c_howto-use-bitwise-operators_20220304.txt
https://betterprogramming.pub/how-to-use-bitwise-operators-90cd7a3a0fd7

How to Use Bitwise Operators

How Do Computers Represent Data?
   If you've ever programmed before, you have almost definitely used some kind of numeric data type,
   such as an integer.

   But have you ever thought about how your computer actually stores these numbers?

   Instead of using powers of 10 as we normally would to represent numbers, computers store values using
   powers of 2.

Binary representation
   This means that numbers are represented using only strings of zeros and ones - a binary system. Each
   digit in that binary string is called a bit, and each group of eight bits is one byte.

   Typically, we read these binary strings from right to left in increasing powers of 2. This is just
   like we would read numbers normally, with the one's place being the rightmost digit, followed by the
   ten's place to its left, and so on.

   So, if we wanted to represent the (unsigned) number 10 in binary, it would be 1010, since 1(2⁰) +
   0(2¹) + 1(2²) + 0(2³) = 10.

What Can We Do With Binary Data?
   Now that we understand how these numbers are stored under the hood, we can leverage this knowledge
   and use operations that directly act on the binary representations of numbers.

   First, think of the operations that you already know about - this probably includes addition (+),
   subtraction (-), multiplication (*), and division (/). These are all operators that can be used on
   numbers of any base - so it does not matter whether or not we think of numbers as binary or base-10.

   However, there are also operators that specifically act on the bits of the numbers in binary form,
   aptly named bitwise operators.

   Before I cover why these are useful, let's go over the main ones and explain how they work and what
   they look like.

Negation (~)
   The negation operator simply reverses all of the bits in a number. So, if x == 0101, then ~x == 1010.

Left shift (<<)
   The left shift operator moves all of the bits to the left by a specified number of bits. Any bits
   that go past the leftmost position are ignored. So, if x == 101010, then x << 2 == 101000.

Right shift (>>)
   Similarly, the right shift operator moves all of the bits to the right by a specified amount of bits.
   So, if x == 101010, then x >> 2 == 001010.

AND (&)
   The AND operator, used with two binary numbers, returns a new binary number with 1s in every position
   where both numbers had a 1 and 0 in every other position.

   So, if x == 1100 and y == 1011, then x & y == 1000, since the two numbers both only had a 1 in their
   leftmost bit.

OR (|)
   The OR operator, used with two binary numbers, returns a new binary number with 1s in every position
   where either number had a 1, and 0 in every other position.

   So, if x == 1100 and y == 1011, then x | y == 1111, since at least one of the two numbers had a 1 in
   each position.

XOR (^)
   The XOR (or exclusive OR) operator, used with two binary numbers, returns a new binary number with 1s
   in every position in which the two numbers disagreed - so one had a 1 in that position and the other
   had a 0 - and 0 elsewhere.

   So, if x == 1100 and y == 1011, then x ^ y == 0111, since the two numbers disagreed in all but the
   leftmost bit.

Why Is This Useful?
   If it's not obvious why you would use these operators - you're not alone. When I first learned about
   them, they didn't seem all that useful.

   But, in many fields, such as embedded programming, systems programming, and networking, they can be
   seen in solutions to many different problems.

   Now, let's go over some use cases of bitwise operators and hopefully you'll begin to appreciate them
   a bit more.

Data representation
   Bitwise operators are a great way to make very efficient use of space when representing data.

   Imagine the following situation:

     You're a game developer for a computer game and you want to store players' mouse positions
     periodically while they play the game. To do this, you send the players' cursor positions every
     minute to your game's server. The game runs in a fixed window size of 1000 x 1000.

   The naive way to do this would simply be to send back two integers of data to your server (one for
   the x-coordinate and one for the y-coordinate) for each snapshot. Typically, integers are 32 bits, so
   this would mean sending back 64 bits of data.

   However, we can make this much more space-efficient by using bitwise operators.

   Since each coordinate is at most 1000, that means we only need 10 bits to store each number, since
   binary 1111111111 is 1023, which is larger than 1000. This means that we actually only need 20 bits
   in total.

   We can store these 20 bits in a single 32-bit integer - the rightmost 10 bits will represent the
   x-coordinate, the next 10 bits will represent the y-coordinate, and the remaining 12 bits will just
   be zero.

   Once the data reaches the back-end server, we can then extract each number with the right shift and
   OR operators.

Useful properties of base-2
   Being in base-2 has some handy properties that make some common questions very easy to answer.

   For example, we can very easily determine if a number is a power of 2.

   Any number that is a power of 2 will have only its leftmost bit set to 1 and all others will be 0.

   We can quickly determine if a number, x, follows this pattern by checking if (x & (x - 1)) == 0. This
   works because if x is a power of 2, then x-1 will have every bit except its leftmost bit set to 1, so
   when we use the AND operator, they have no bits in agreement at any position.

Algorithms/interview questions
   Finally, bitwise operators can be found sporadically in algorithmic problems that one may encounter
   in technical interviews. These examples often take advantage of the fact that x ^ x == 0.

   Swap two numbers without a temporary variable

   To swap two integers, x and y, without using a third temporary value, we can use XOR three times.

   If you trace it out, the following assignments will result in the two variables' values being swapped
   in the end: x = x ^ y, y = x ^ y, and x = x ^ y.

   Find the single integer in an array that does not appear twice

   We XOR every element in the array. Since a number XOR'd with itself is 0, the value of that running
   total, once we go through the entire array, will be the integer that does not appear twice.


---

