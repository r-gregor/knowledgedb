filename: c_howto_play-with-strings-multyf_20211022.txt
https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/what-is-a-string-in-c

1/8 What Is A String In C

A string in C (also known as C string) is an array of characters, followed by a NULL character. To
represent a string, a set of characters are enclosed within double quotes ("). The C string "Look Here"
would look like as follows in memory:

-----------------------------------------
| L | o | o | k |  | H | e | r | e | \0 |
-----------------------------------------

It's an array of 10 characters.

In this tutorial, only single byte characters are considered. But same concept can be expanded for multi
byte characters. That's useful for writing programs that uses non-English characters.
How to initialize a variable with C string

There are different ways to initialize a variable to access C string.

char *char_ptr = "Look Here";

This initializes char_ptr to point to the first character of the read-only string "Look Here". Yes, a C
string initialized through a character pointer cannot be modified. When a C string is initialized this way,
trying to modify any character pointed to by char_ptr is undefined behaviour. An undefined behaviour means
that when a compiler encounters anything that triggers undefined behaviour, it is allowed to do anything
it seems appropriate. For maximum portability of your program, make sure to avoid any undefined behaviour.

For example, the following C code crashes when compiled in Visual C++ 2017 when the commented out line
is un-commented and the code is executed:

<code>
#include <stdio.h>

int main() {
	char *char_ptr = "Look Here";

    /* Warning: uncommenting the following line will trigger undefined behaviour */
	/* char_ptr[4] = '_'; */
	printf(char_ptr);

	return 0;
}
</code>

A more convenient way to initialize a C string is to initialize it through character array:

char char_array[] = "Look Here";

This is same as initializing it as follows:

char char_array[] = { 'L', 'o', 'o', 'k', ' ', 'H', 'e', 'r', 'e', '\0' };

But the former one is more intuitive. Note that when a character array is initialized by char char_array[]
= "Look Here";, the terminating NULL character is appended automatically.

Any character in the array can be modified. In other words, any character in the C string char_array
can be modified:

<code>
#include <stdio.h>

int main()
{
	char char_array[] = "Look Here";

	char_array[4] = '_';
	printf(char_array);

	return 0;
}
</code>

Just like any other array, you can put the array size inside the [] of the declaration:

char char_array[15] = "Look Here";

Make sure that the size you put inside [] is large enough to hold all the characters in the string,
plus the terminating NULL character. In this example the array indices 0 through 9 will be initialized
with the characters and NULL character. Remaining indices (10 to 14) will be initialized with 0 (same
as the NULL character when converted to char). In memory, the above array looks like as follows:

------------------------------------------------------------------
| L | o | o | k |  | H | e | r | e | \0 | \0 | \0 | \0 | \0 | \0 |
------------------------------------------------------------------
  0   1   2   3   4  5   6   7   8   9    10   11   12   13   14

A better approach of declaring character array (or in fact any array) is to define a constant for the
array size, then use the constant as the size of the array:

#define ARRAY_SIZE 15
char char_array[ARRAY_SIZE] = "Look Here";




---

https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/safety-first

2/8 Safety First

There are many Standard C library functions which can be used devastatingly! If the programmer is not
careful, s/he can leave bugs in his/her program deep inside. These bugs are very difficult to debug
as they produce very unexpected behaviour and leave no trace. Many of the functions that deal with C
strings fall into this category. In recent revisions of the standard many alternative safe functions are
introduced. These safe functions are recommended to use. However, they are not strictly maintained by all
compilers as the compiler developers are not forced to include all safe functions in their compiler package.

There will be many safety notes throughout this tutorial. Please read the safety warnings carefully and
make sure you understand the consequence of using a function the wrong way. Follow best practices and
avoid bad programming practice.


---

https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/string-length-string-comparison

3/8 String Length, String Comparisson

Let's look at some of the operations that can be performed on a C string without modifying the string(s)
involved.
Number of characters in a string - strlen

strlen returns the number of characters in a C string, excluding the NULL character.

<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str[] = "Look Here";

	printf("Number of characters in \'%s\' is %d", str, strlen(str));

	return 0;
}
</code>

Comparison of different strings - strcmp
strcmp is used to compare two different C strings. When the strings passed to strcmp contains exactly
same characters in every index and have exactly same length, it returns 0. For example, i will be 0 in
the following code:

char str1[] = "Look Here";
char str2[] = "Look Here";

int i = strcmp(str1, str2);

If the passed parameters aren't same, strcmp returns either a positive or a negative integer.

strcmp returns a negative integer if the first character that's mismatched between passed parameters
has a lower ASCII value in the first string. For example:

char str1[] = "Look HerE";
char str2[] = "Look Here";

int i = strcmp(str1, str2);

i will be a negative number in the above example because the ASCII value of 'E' is lower than the ASCII value
of 'e'. Refer to the ASCII table here. This is the first character (index 8) where these two strings differ.

A negative return value indicates that the first string would come before the second string if the
strings are sorted in ascending order.

Try the following example, then modify strX arrays to your choice and see the result.

<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str1[] = "Look HerE";
	char str2[] = "Look Here";
	char str3[] = "Look Here";
	char str4[] = "Look Her";

	printf("%d\n", strcmp(str1, str2));
	printf("%d\n", strcmp(str2, str3));
	printf("%d\n", strcmp(str3, str4));

	return 0;
}
</code>

Comparison of different strings up to n-th character - strncmp
If you want to compare first n characters of two strings, then strncmp can be used. Its return value is
similar to strcmp.

<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str1[] = "Look HerE";
	char str2[] = "Look Here";

	printf("%d\n", strncmp(str1, str2, 8));
	printf("%d\n", strncmp(str1, str2, 9));

	return 0;
}
</code>



---

https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/string-copy

4/8 String Copy

Examples in this lesson modify a string/character array.
Copying one string to another - strcpy

strcpy can be used to copy one string to another. Remember that C strings are character arrays. You must
pass character array, or pointer to character array to this function where string will be copied.

The following example will overwrite the contents of dest with the content of src:

#define DEST_SIZE 40

char src[] = "Look Here";
char dest[DEST_SIZE] = "Unimaginable";

strcpy(dest, src);
printf(dest); /* Output: Look Here */

The destination character array is the first parameter to strcpy. The source character array is the
second parameter to strcpy. The terminating NULL character is automatically appended at the end of the copy.

Warning: The destination character array must be large enough to hold all characters in source character
array, plus a NULL character. If the source array has 100 characters, the destination array must be at
least 101 character long. Following code snippet will result in undefined behaviour:

char src[] = "Look Here";
char dest[4] = "A";

/* strcpy(dest, src); */ /* Fatal: dest doesn't have enough space to hold all characters of src plus a
NULL character */

The destination character array doesn't have to be initialized. It can be left uninitialized and can be
passed to strcpy. Still, it must have enough space to hold the source array and a NULL character.

#define DEST_SIZE 40

char src[] = "Look Here";
char dest[DEST_SIZE];

strcpy(dest, src);
printf(dest); /* Output: Look Here */

Also possible:

#define DEST_SIZE 40

char dest[DEST_SIZE];

strcpy(dest, "Look Here");
printf(dest); /* Output: Look Here */

Character pointers can also be passed as parameters of strcpy.

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

int main() {
	char src[] = "Look Here";
	char dest[DEST_SIZE] = "Unimaginable";

	char *p = dest + 5;

	strcpy(p, src);
	printf(dest);

	return 0;
}
</code>

What happens in the example above is that p points to the 6th character of dest. When p is passed as the
first parameter of strcpy, it becomes the first character to be overwritten by the function. So src gets
copied starting at the 6th character of dest leaving first 5 characters untouched.

Of course, the second parameter could also be pointer to character:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

int main() {
	char src[] = "Look Here";
	char dest[DEST_SIZE] = "Unimaginable";

	char *ps = src + 4;
	char *pd = dest + strlen(dest);

	strcpy(pd, ps);
	printf(dest);

	return 0;
}
</code>

In the example above ps points to the space character of src. pd points to the NULL character of dest. So
the call to strcpy overwrites the NULL character of dest with space character of src, followed by other
characters of src, finally a NULL character is appended.

Warning: Care must be taken when passing character pointers to strcpy. The source and destination aren't
allowed to overlap. For example, the following is forbidden:

#define DEST_SIZE 40

char dest[DEST_SIZE] = "Unimaginable";

char *sp = dest + 5;
char *dp = dest + 8;

/* strcpy(dp, sp); */ /* Fatal: source and destination aren't allowed to overlap */

In the example above, sp points to the 6th character of dest and dp points to the 9th character of
dest. Both of them share the same array (dest). This is not allowed and executing code like this may
produce unexpected results.
Copying first n characters from one string to another - strncpy

strncpy is used to copy first several characters from source string to destination string. It doesn't
append any NULL character when the copying finishes.

In the following example, the first 5 characters are copied. No NULL character is appended.

#define DEST_SIZE 40

char src[]    = "Look Here";
char dest[DEST_SIZE] = "Unimaginable";

strncpy(dest, src, 5);
printf(dest); /* Output: Look ginable */

Warning: Care must be taken when using strncpy to make sure that strings are NULL terminated. Following
is an example of an ill-formed code which doesn't take NULL character into account:

#define DEST_SIZE 9

char src[]  = "Look Here"; /* src has 9 + 1 = 10 characters */
char dest[DEST_SIZE]; /* dest can only hold 9 characters */

strncpy(dest, src, 9); /* First 9 characters are copied to dest, where is the NULL character? */
/* printf(dest); */ /* Fatal: undefined behaviour - dest doesn't have a NULL character */

But it's fine if each characters are accessed individually:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 9

int main() {
	char src[] = "Look Here"; /* src has 9 + 1 = 10 characters */
	char dest[DEST_SIZE]; /* dest can only hold 9 characters */

	strncpy(dest, src, 9); /* First 9 characters are copied to dest, where is the NULL character? */
	/* printf("%s", dest); */ /* Fatal: undefined behaviour - dest doesn't have a NULL character */

    /* Print out the string by accessing each character individually */
	for (int i = 0; i < DEST_SIZE; i++) {
		printf("%c", dest[i]);
	}

	return 0;
}
</code>

If the number of characters to copy is more than the characters in the source string, strncpy will stop
copying when it will encounter the NULL character in source. In the example below strncpy stops copying
as soon as it reaches the NULL character of src:

#define DEST_SIZE 40

char src[] = "Look Here";
char dest[DEST_SIZE] = "Unimaginable";

char *ps = src + 3;

strncpy(dest, ps, 10); /* The third parameter is 10, but there are 6 characters before the NULL character
from ps */
printf(dest); /* Output: k Here */



---
https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/string-concatenation

5/8 String Concatenation

Examples in this lesson modifies existing string.
Appending one string at the end of another - strcat

The strcat function is used to concatenate one string (source) at the end of another string (destination). It
does the following:

1    Takes the destination string.
2    Finds the NULL character.
3    Copies the source string starting at the location of the NULL character of destination string.
4    Appends a NULL character to the destination string when all characters of the source string are copied
     to the destination string.

Here is an example:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

int main() {
	char src[] = "Look Here";
	char dest[DEST_SIZE] = "Unimaginable";

	strcat(dest, src);
	printf(dest);

	return 0;
}
</code>

Notice how it works. When dest is initialized with char dest[DEST_SIZE] = "Unimaginable"; there is a NULL
character at the end. That's the starting point for the source string to be copied. When all characters
of source string are copied to dest, a NULL character is appended.

Warning: The destination character array must be large enough to hold all characters of source, all
characters of destination and a NULL character. Following ill-formed code triggers undefined behaviour:

char src[] = "Look Here";
char dest[] = "Unimaginable";

/* strcat(dest, src); */ /* Fatal: dest doesn't have enough spaces to hold
			 all characters of dest
			 all chracters of src
			 a NULL character */
printf(dest);

Warning: The destination character array must be initialized with C string before passing it to
strcat. In other words, the destination character array must have at least 1 location which has a NULL
character. Following is an ill-formed code and shouldn't be practiced:

#define DEST_SIZE 40

char dest[DEST_SIZE];

/* strcat(dest, "Look Here"); */ /* Fatal: dest is not initialized
				 - no guarantee about a NULL character
				 - undefined behaviour */
/* printf(dest); */ /* Fatal: dest isn't initialized - results in undefined behaviour */

At minimum the destination array could be initialized as empty string (only the NULL character) and
after that strcat can be used:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

int main() {
	char dest[DEST_SIZE] = "";

	strcat(dest, "Look Here");
	printf(dest);

	return 0;
}
</code>

If the destination character array is declared at global scope, then all elements of the array are
initialized to 0 automatically by C. Since a 0 is equivalent to NULL character, an array declared globally
can be directly passed to strcat:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

char dest[DEST_SIZE];

int main() {
	strcat(dest, "Look Here");
	printf(dest);

	return 0;
}
</code>

Character pointers can be used in strcat:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

int main() {
	char src[] = "Look Here";
	char dest[DEST_SIZE] = "Unimaginable";

	char *ps = src + 4;
	char *pd = dest + 6;

	strcat(pd, ps);
	printf(dest);

	return 0;
}
</code>

In the example above, ps points to the 5th character of src and pd points to the 7th character of
dest. strcat finds the NULL character of dest starting from pd (i.e. the 7th character of dest). This
will find the NULL character at the end of dest - the same NULL character will be used for any other
pointers inside dest. Copying starts from the 5th character of src, this is what ps is pointing to. At
the end a NULL character is appended.

Warning: When using character pointers, care must be taken so that the source and destination aren't
overlapped. Following is an example of ill-formed code which uses strcat of overlapped buffer - which
causes undefined behaviour:

#define DEST_SIZE 40

char dest[DEST_SIZE] = "Unimaginable";

char *ps = dest + 6;
char *pd = dest + 4;

/* strcat(pd, ps); */ /* Fatal: pd and ps overlaps - undefined behaviour */

String concatenation upto n characters - strncat
The strncat function is used to append at most n characters from source string to destination string. Here
is an example:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

int main() {
	char src[] = "Look Here";
	char dest[DEST_SIZE] = "Unimaginable";

	strncat(dest, src, 4);
	printf(dest);

	return 0;
}
</code>

The example above will append first 4 characters from src at the end of dest (i.e. starting from the
NULL character of dest) and appends a NULL character in the end.

Warning: The destination character array must be large enough to hold all characters of destination, n
characters of source and a NULL character. Following is an example of an ill-formed code which violates
this rule:

#define DEST_SIZE 4

char src[] = "Look Here";
char dest[DEST_SIZE] = "A";

/* strncat(dest, src, 4); */ /* Fatal: dest doesn't have enough space for
			     all characters of dest
			     4 characters of src
			     a NULL character */
printf(dest);

Character pointers can be used to the parameters of strncat:

<code>
#include <stdio.h>
#include <string.h>

#define DEST_SIZE 40

int main() {
	char src[] = "Look Here";
	char dest[DEST_SIZE] = "Unimaginable";

	char *ps = src + 4;

	strncat(dest, ps, 5);
	printf(dest);

	return 0;
}
</code>

In the example above, ps points to the 5th character of src (that's the space). The call to strncat
finds the NULL character of dest, appends 5 characters starting from ps and finally appends a NULL character.

Warning: When using character pointers be careful to the fact that the source and the destination cannot
be overlapped. If the source and destination overlaps, this will trigger undefined behaviour. Following
is such an example of bad coding:

#define DEST_SIZE 40

char dest[DEST_SIZE] = "Unimaginable";

char *sp = dest + 5;
char *dp = dest + 8;

/* strncat(dp, sp, 5); */ /* Fatal: source and destination aren't allowed to overlap */

If the number of characters to copy is more than the characters in the source string, strncat will
stop appending when it will encounter the NULL character in source. In the example below strncat stops
concatenation as soon as it reaches the NULL character of src:

#define DEST_SIZE 40

char src[] = "Look Here";
char dest[DEST_SIZE] = "Unimaginable";

char *ps = src + 4;

strncat(dest, ps, 10); /* The third parameter is 10, but there are 5 characters before the NULL character
from ps */
printf(dest); /* Output: Unimaginable Here */


---
https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/search-within-a-string

6/8 Search Within a String

Search for a character in a string - strchr & strrchr
The strchr function returns the first occurrence of a character within a string. The strrchr returns the
last occurrence of a character within a string. They return a character pointer to the character found,
or NULL pointer if the character is not found. Using these functions, let's write a program that output
the index of first and last occurrence of all lower case characters in a string.

We define the string to be searched.

char str[] = "finding first and last occurrence of a character is amazing";

We'll loop through all lower case characters. Let's define a character array for that and write a loop.

char alpha[] = "abcdefghijklmnopqrstuvwxyz";

for (int i = 0; i < strlen(alpha); i++) {

}

Both strchr and strrchr returns a pointer to the character where the occurrence of the sought character
is found. Say, the string to be searched is "abcd" and the character to be searched for is 'b'. Then a
pointer to character 'b' within the string is returned. If the character is not found then NULL is returned.

We declare two character pointers to hold the returned values from the functions. Remember, we search
for alpha[i] within str.

char *position_ptr = strchr(str, alpha[i]);
char *r_position_ptr = strrchr(str, alpha[i]);

These character pointers are simply the address of the character found within the array. If we subtract
the starting address from this address, then we'll find the index of the character. For example, say
we're searching character 'b' in the string "abcd". Say, the string starts at memory address 100. The
string "abcd" would look in memory as follows:

 a     b     c     d
100   101   102   103

We see that

Index of 'b' = Address of 'b' - Address of 'a'
             = 101 - 100
             = 1

The starting address of the array can be accessed by the array name. So the index is calculated as follows:

int position = position_ptr - str;
int r_position = r_position_ptr - str;

There is a problem in the code above. The character pointers can be NULL - in case the character is
not found in the string. We can define that if a character is not found within the string, then the
character's index is -1 (because -1 is an invalid index, we can use it for this purpose). Considering
NULL pointer, the positions are redefined as:

int position = (position_ptr == NULL ? -1 : position_ptr - str);
int r_position = (r_position_ptr == NULL ? -1 : r_position_ptr - str);

So we've everything now. We can simply output these positions. Here is a complete example:

<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str[] = "finding first and last occurrence of a character is amazing";
	char alpha[] = "abcdefghijklmnopqrstuvwxyz";

	printf("String to search: %s\n", str);
	printf("Length of string: %d\n", strlen(str));
	printf("Char: first last\n");

	for (int i = 0; i < strlen(alpha); i++) {
		char *position_ptr = strchr(str, alpha[i]);
		char *r_position_ptr = strrchr(str, alpha[i]);

		int position = (position_ptr == NULL ? -1 : position_ptr - str);
		int r_position = (r_position_ptr == NULL ? -1 : r_position_ptr - str);

		printf("%4c: %4d %4d\n", alpha[i], position, r_position);
	}

	return 0;
}
</code>

Search for string inside another string - strstr
A substring is a contiguous elements of a string. As an example, "ea", "ch" etc are substrings of
"teacher"; but "cer" isn't. The function strstr returns the first occurrence of a string in another
string. This means that strstr can be used to detect whether a string contains another string. In other
words, whether a string is a substring of another string.

strstr returns the first occurrence of the substring in another string in the form of a character pointer
pointing to the first character of the match. Consider the following example:

char str[] = "teacher teach tea";
char *ptr = strstr(str, "ac");

ptr will point to the character 'a' of first "ac" in str:

teacher teach tea
  ^
  ptr points here

However, if the string is not found, strstr returns NULL pointer. Using the NULL check, we can verify
whether a string contains another string. Here is a complete example:

<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str[] = "teacher teach tea";
	char search[] = "ac";
	char *ptr = strstr(str, search);

	if (ptr != NULL) /* Substring found */ {
		printf("'%s' contains '%s'\n", str, search);
	} else /* Substring not found */ {
		printf("'%s' doesn't contain '%s'\n", str, search);
	}

	return 0;
}
</code>

Search for occurrence of any character in a string - strpbrk
Using strchr one can find if a string contains a single character. What if someone wants to find if a
string contains any character from a group of characters? That's what strpbrk does.

You provide two strings to strpbrk. If any character from second string is found in the first string,
strpbrk will return a character pointer to the first occurrence. Let's say, you've a string like:

char str[] = "finding digits where there could be digit 5236 is amazing";

You want to know if str contains any digits. So you define a digits array:

char digits[] = "0123456789";

Plug them in to strpbrk:

char *ptr = strpbrk(str, digits);

Because str contains character from digits, ptr will point to its first occurrence:

finding digits where there could be digit 5236 is amazing
                      ^
                      ptr points here

ptr will be NULL pointer if no character from second parameter is present in the first parameter. Using
NULL check we can verify whether any character from second parameter is present in first parameter. Here
is a complete example:

<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str[] = "finding digits where there could be digit 5236 is amazing";
	char digits[] = "0123456789";
	char *ptr = strpbrk(str, digits);

	if (ptr != NULL) /* Expected character is found */ {
		printf("'%s' contains at least one character from '%s'\n", str, digits);
	} else /* Expected character isn't found */ {
		printf("'%s' doesn't contain any character from '%s'\n", str, digits);
	}
	return 0;
}
</code>



---
https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/string-split

7/8 String Split

Split a string into tokens - strtok

In this lesson we'll learn how to split a string into several tokens using strtok function. To split a
string we need delimiters - delimiters are characters which will be used to split the string.

Suppose, we've the following string and we want to extract the individual words.

char str[] = "strtok needs to be called several times to split a string";

The words are separated by space. So space will be our delimiter.

char delim[] = " ";

strtok accepts two strings - the first one is the string to split, the second one is a string containing
all delimiters. In this case there is only one delimiter. strtok returns a pointer to the character of
next token. So the first time it is called, it will point to the first word.

char *ptr = strtok(str, delim);

strtok needs to be called several times to split a string
^
ptr points here

But there is another thing. strtok modifies the original string. It puts NULL characters ('\0') at the
delimiter position after every call to strtok so that tokens can be tracked. strtok also internally
remembers the next token's starting position. So after the first call to strtok, the str, ptr and next
token position looks like as follows:

strtok\0needs to be called several times to split a string
^       ^
|       next token
|
ptr points here

In the next call to strtok, the first parameter needs to be NULL so that strtok starts splitting the
string from the next token's starting position it remembers.

ptr = strtok(NULL, delim);

strtok returns NULL when there is no more tokens, i.e., the whole string is split. This can be utilized
to know when to stop calling strtok. Putting it all together in complete example below.


<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str[] = "strtok needs to be called several times to split a string";
	int init_size = strlen(str);
	char delim[] = " ";

	char *ptr = strtok(str, delim);

	while(ptr != NULL) {
		printf("'%s'\n", ptr);
		ptr = strtok(NULL, delim);
	}

	/* This loop will show that there are zeroes in the str after tokenizing */
	for (int i = 0; i < init_size; i++) {
		printf("%d ", str[i]); /* Convert the character to integer, in this case
							   the character's ASCII equivalent */
	}
	printf("\n");

	return 0;
}
</code>

Warning: Because strtok modifies original string, character pointer to read-only string shouldn't be
passed to strtok. The following examples will trigger undefined behaviour because the first parameter
to strtok is read-only string:

char *str = "strtok needs to be called several times to split a string";
/* char *ptr = strtok(str, delim); */ /* Fatal: read-only string passed to first parameter of strtok */

/* char *ptr = strtok("strtok needs to be called several times to split a string", delim); */ /* Fatal:
read-only string passed to first parameter of strtok */

If you don't want the original string to be modified, create a copy of the original string using strcpy
and pass that copy to strtok.

The delimiter doesn't have to be a single character. It can contain multiple characters and splitting
will be performed for any of the characters. Following is another example with multiple delimiters:

<code>
#include <stdio.h>
#include <string.h>

int main() {
	char str[] = "strtok needs to be called several times to split a string";
	int init_size = strlen(str);
	char delim[] = "ai";

	char *ptr = strtok(str, delim);

	while (ptr != NULL) {
		printf("'%s'\n", ptr);
		ptr = strtok(NULL, delim);
	}

	return 0;
}
</code>



---
https://www.codingame.com/playgrounds/14213/how-to-play-with-strings-in-c/array-of-c-string

8/8 - Array Of Strings

If a C string is a one dimensional character array then what's an array of C string looks like? It's a
two dimensional character array!

Here is how an array of C string can be initialized:

#define NUMBER_OF_STRING 4
#define MAX_STRING_SIZE 40

char arr[NUMBER_OF_STRING][MAX_STRING_SIZE] =
{ "array of c string",
  "is fun to use",
  "make sure to properly",
  "tell the array size"
};

Since all but the highest dimension can be omitted from an array declaration, the above declaration can
be reduced to:

#define MAX_STRING_SIZE 40

char arr[][MAX_STRING_SIZE] =
{ "array of c string",
  "is fun to use",
  "make sure to properly",
  "tell the array size"
};

But it is a good practice to specify size of both dimensions.

Now each arr[x] is a C string and each arr[x][y] is a character. You can use any function on arr[x]
that works on string!

Following example prints all strings in a string array with their lengths.

#define NUMBER_OF_STRING 4
#define MAX_STRING_SIZE 40

char arr[NUMBER_OF_STRING][MAX_STRING_SIZE] =
{ "array of c string",
  "is fun to use",
  "make sure to properly",
  "tell the array size"
};

for (int i = 0; i < NUMBER_OF_STRING; i++) {
    printf("'%s' has length %d\n", arr[i], strlen(arr[i]));
}

Following example reverses all strings in a string array:

<code>
#include <stdio.h>
#include <string.h>

#define NUMBER_OF_STRING 4
#define MAX_STRING_SIZE 40

void print_array(const char arr[NUMBER_OF_STRING][MAX_STRING_SIZE]) {
	for (int i = 0; i < NUMBER_OF_STRING; i++) {
		printf("'%s' has length %d\n", arr[i], strlen(arr[i]));
	}
}

int main() {
	char arr[NUMBER_OF_STRING][MAX_STRING_SIZE] =
	{ "array of c string",
	  "is fun to use",
	  "make sure to properly",
	  "tell the array size"
	};

	printf("Before reverse:\n");
	print_array(arr);

	for (int i = 0; i < NUMBER_OF_STRING; i++) {
		for (int j = 0, k = strlen(arr[i]) - 1; j < k; j++, k--) {
			char temp = arr[i][j];
			arr[i][j] = arr[i][k];
			arr[i][k] = temp;
		}
	}

	printf("\nAfter reverse:\n");
	print_array(arr);

	return 0;
}
</code>

Following example concatenates all strings in a string array with space between them into a single string:

<code>
#include <stdio.h>
#include <string.h>

#define NUMBER_OF_STRING 4
#define MAX_STRING_SIZE 40
#define DEST_SIZE 100

int main() {
	char arr[NUMBER_OF_STRING][MAX_STRING_SIZE] =
	{ "array of c string",
	  "is fun to use",
	  "make sure to properly",
	  "tell the array size"
	};

	char dest[DEST_SIZE] = "";

	for (int i = 0; i < NUMBER_OF_STRING; i++) {
		strcat(dest, arr[i]);
		if (i < NUMBER_OF_STRING - 1) {
		    strcat(dest, " ");
		}
	}

	printf(dest);

	return 0;
}
</code>



---

