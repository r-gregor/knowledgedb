filename: default-filename-multyf_20250127.txt
https://psychocod3r.wordpress.com/2019/02/25/how-to-get-the-dimensions-of-a-linux-terminal-window-in-c/

How to Get the Dimensions of a Linux Terminal Window in C
April 29, 2021

   Here I will be addressing a topic of interest to those of you who want to write full-screen
   applications for the Linux terminal. Yes, you could use a library like curses for this, but I'm going
   to go a bit deeper than that and show you how it all works under the hood. Or at least one aspect of
   it.

   To get the terminal window dimensions, we will be using two constructs in the POSIX API: the ioctl()
   function and the winsize struct. Both of these are defined in sys/ioctl.h.

   The definition of the winsize struct looks like this:

struct winsize {
	unsigned short ws_row, ws_col;
	unsigned short ws_xpixel, ws_ypixel;
};

   The fields ws_row and ws_col give the current height and width of the terminal window in characters.
   The fields ws_xpixel and ws_ypixel give the terminal width and height in pixels. The latter two are
   useful for displaying graphics directly in the console as you would with the Linux Framebuffer API.
   Since we are not displaying in-terminal graphics at this time we don't need them, and we will be
   focusing on the first two instead. But the tools and procedures I will be outlining here work equally
   well for both.

   Let's move on to ioctl() now. ioctl() is basically the dumping ground for the POSIX API. It's a
   single C function encapsulating a myriad of commands that couldn't be conveniently fit into their own
   functions. Its prototype looks like this:

int ioctl( int fd, int cmd, ... );

   The first argument designates what file descriptor to use. Usually this will be set to 0 for standard
   input. The second argument designates what command to execute on that file descriptor. The ... is for
   an optional argument.

   There are two ioctl commands that concern window size. They are TIOCSWINSZ and TIOCGWINSZ. Notice
   that the fifth letter in each of those is different: the first has an S because it sets the window
   dimensions to the values given by the third argument; the second has a G because it gets the window
   dimensions and stores them in the third argument. The third argument in this case is a pointer to a
   winsize struct.

   To write any full-screen program in the Linux terminal, you need to first get the dimensions and then
   draw the elements in the terminal accordingly. Let's say you want to fill the terminal with plus
   signs. The code would look something like this:

struct winsize sz;
ioctl( 0, TIOCGWINSZ, &sz );
int limit = sz.ws_row * sz.ws_col;

for( int i = 0; i < limit; i++ ) {
	putchar( '+' );
}

   That's just a silly example, but hopefully it will help elucidate how these two programming
   constructs can be used to determine the dimensions of a Linux terminal window and then draw a
   full-screen interface accordingly.

   It gets more complicated than that though, because not only do you have to get the window size when
   the program starts; you also have to detect when the window is resized and redraw the interface
   according to the new dimensions every time that happens. This can be a very complicated process, but
   I'll show you the basics.

   To detect when the terminal window is resized, we will use process signals. Process signals are
   integer values that are sent to processes either by other processes or by the Linux kernel in
   response to certain events. The receiving process can either ignore the signal, specify an action to
   perform (called a signal handler), or go with the default action (which usually means the program is
   terminated).

   Linux provides a special signal called SIGWINCH which is triggered every time the user resizes the
   terminal window. We want to set up a handler for this signal so that it calls a function that redraws
   the screen.

   To handle a signal, we use the signal() function, defined in signal.h. This function is fairly
   simple: It takes two arguments - first the number of the symbol (typically we would use a macro for
   this) and then a specifier for the action to take - either SIG_DFL to take the default action,
   SIG_IGN to ignore the signal, or a pointer to a signal handling function.

   We will call our handler redraw(). Here is the code we would add to handle a window resizing:

signal( SIGWINCH, redraw );

   Actually, we can simplify our code by putting the entire screen drawing procedure into the redraw()
   function, and just calling it at the beginning. This way the same procedure is called at the
   beginning and whenever the window is resized. So in our silly example with the plusses, our code
   would look something like this:

#include <stdio.h>
#include <ioctl.h>
#include <signal.h>

struct winsize sz;

void redraw( int signum ) {
	printf( "\e[2J" );
	ioctl( 0, TIOCGWINSZ, &sz );
	int limit = sz.ws_row * sz.ws_col;

	for( int i = 0; i < limit; i++ ) {
		putchar( '+' );
	}
}

int main( int argc, char **argv ) {
	signal( SIGWINCH, redraw );
	redraw();
	/* rest of the program */
	return 0;
}

   One thing in that C program that may still be unfamiliar to some is the printf( "\e[2J" ); part. This
   is an ANSI escape sequence that clears the screen before redrawing it. Don't want the terminal to be
   filled with accumulating gobbledigook from previous draws.

   Well, that's about it for today. If you liked this tutorial be sure to follow me, because I will be
   posting a lot more like it in the future. Yeah, and share it with your friends on social media if
   they're into Linux and/or Linux programming. This blog is brand new and I hope to be posting far more
   helpful content as it grows and reaches more people. Until then, farewell.



---
https://gist.github.com/sbz/4ba35bdaf51629216dbce84636a4cccf

get terminal size using ioctl get win size (TIOCGWINSZ) in C
April 14, 2017

   This file contains bidirectional Unicode text that may be interpreted or compiled differently than
   what appears below. To review, open the file in an editor that reveals hidden Unicode characters.

#include <sys/ioctl.h>
#include <stdio.h>
#include <unistd.h>

int main(void) {
	struct winsize ws;
	ioctl(STDIN_FILENO, TIOCGWINSZ, &ws);
	printf ("lines %d\n", ws.ws_row);
	printf ("columns %d\n", ws.ws_col);
	return (0);
}



---
https://stackoverflow.com/questions/1022957/getting-terminal-width-in-c

Getting terminal width in C?

   I've been looking for a way to get the terminal width from within my C program. What I keep coming up
   with is something along the lines of:

#include <sys/ioctl.h>
#include <stdio.h>

int main (void) {
	struct ttysize ts;
	ioctl(0, TIOCGSIZE, &ts);

	printf ("lines %d\n", ts.ts_lines);
	printf ("columns %d\n", ts.ts_cols);
}

   But everytime I try that I get
austin@:~$ gcc test.c -o test
test.c: In function 'main':
test.c:6: error: storage size of 'ts' isn't known
test.c:7: error: 'TIOCGSIZE' undeclared (first use in this function)
test.c:7: error: (Each undeclared identifier is reported only once
test.c:7: error: for each function it appears in.)

   Is this the best way to do this, or is there a better way? If not how can I get this to work?

   EDIT: fixed code is
#include <sys/ioctl.h>
#include <stdio.h>

int main (void) {
	struct winsize w;
	ioctl(0, TIOCGWINSZ, &w);

	printf ("lines %d\n", w.ws_row);
	printf ("columns %d\n", w.ws_col);
	return 0;
}

***
   Have you considered using getenv() ? It allows you to get the system's environment variables
   which contain the terminals columns and lines.

   Alternatively using your method, if you want to see what the kernel sees as the terminal size (better
   in case terminal is resized), you would need to use TIOCGWINSZ, as opposed to your TIOCGSIZE, like
   so:
struct winsize w;
ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);

   and the full code:

#include <sys/ioctl.h>
#include <stdio.h>
#include <unistd.h>

int main (int argc, char **argv) {
	struct winsize w;
	ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);

	printf ("lines %d\n", w.ws_row);
	printf ("columns %d\n", w.ws_col);
	return 0;  // make sure your main returns int
}

***
   This example is a bit on the lengthy side, but I believe it's the most portable way of detecting the
   terminal dimensions. This also handles resize events.

   As tim and rlbond suggests, I'm using ncurses. It guarantees a great improvement in terminal
   compatability as compared to reading environment variables directly.
#include <ncurses.h>
#include <string.h>
#include <signal.h>

// SIGWINCH is called when the window is resized.
void handle_winch(int sig) {
	signal(SIGWINCH, SIG_IGN);

	// Reinitialize the window to update data structures.
	endwin();
	initscr();
	refresh();
	clear();

	char tmp[128];
	sprintf(tmp, "%dx%d", COLS, LINES);

	// Approximate the center
	int x = COLS / 2 - strlen(tmp) / 2;
	int y = LINES / 2 - 1;

	mvaddstr(y, x, tmp);
	refresh();

	signal(SIGWINCH, handle_winch);
}

int main(int argc, char *argv[]) {
	initscr();
	// COLS/LINES are now set

	signal(SIGWINCH, handle_winch);

	while(getch() != 27){
		/* Nada */
	}

	endwin();
	return(0);
}

***
#include <stdio.h>
#include <stdlib.h>
#include <termcap.h>
#include <error.h>

static char termbuf[2048];

int main(void) {
	char *termtype = getenv("TERM");

	if (tgetent(termbuf, termtype) < 0) {
		error(EXIT_FAILURE, 0, "Could not access the termcap data base.\n");
	}

	int lines = tgetnum("li");
	int columns = tgetnum("co");
	printf("lines = %d; columns = %d.\n", lines, columns);
	return 0;
}

   Needs to be compiled with -ltermcap. There is a lot of other useful information you can get using
   termcap. Check the termcap manual using info termcap for more details.

***
   To add a more complete answer, what I've found to work for me is to use @John_T's solution with some
   bits added in from Rosetta Code, along with some troubleshooting figuring out dependencies. It
   might be a bit inefficient, but with smart programming you can make it work and not be opening your
   terminal file all the time.

#include <stdio.h>
#include <stdlib.h>
#include <sys/ioctl.h> // ioctl, TIOCGWINSZ
#include <err.h>       // err
#include <fcntl.h>     // open
#include <unistd.h>    // close
#include <termios.h>   // don't remember, but it's needed

struct WinSize {
	size_t rows;
	size_t cols;
};

struct WinSize get_screen_size() {
	struct winsize ws;
	int fd;

	fd = open("/dev/tty", O_RDWR);
	if(fd < 0 || ioctl(fd, TIOCGWINSZ, &ws) < 0) err(8, "/dev/tty");

	struct WinSize size;
	size.rows = ws.ws_row;
	size.cols = ws.ws_col;

	close(fd);

	return size;
}

   If you make sure not to call it all but maybe every once in a while you should be fine, it should
   even update when the user resizes the terminal window (because you're opening the file and reading it
   every time).

   If you aren't using TIOCGWINSZ see the first answer on this form
   https://www.linuxquestions.org/questions/programming-9/get-width-height-of-a-terminal-window-in-c-810739/.

   Oh, and don't forget to free() the result.

***
   If you have ncurses installed and are using it, you can use getmaxyx() to find the dimensions of the
   terminal.

***
   My Version Is An extermination of the ioctl approach I am not allocating memory and passing the
   struct back by value I believe so no memory leaks here

   header file
#include <stdlib.h>
#include <sys/ioctl.h> // ioctl, TIOCGWINSZ

struct winsize get_screen_size();

unsigned short get_screen_width();
unsigned short get_screen_height();

void test_screen_size();

   The implementation, I have also added a test function that fills in the terminal with a box padded by
   one char all the way around
/**
 * Implementation of nos_utils signatures
 */

#include <stdio.h>
#include <stdlib.h>
#include <sys/ioctl.h>   // ioctl, TIOCGWINSZ
#include <err.h>         // err
#include <fcntl.h>       // open
#include <unistd.h>      // close
//#include <termios.h>   // doesnt seem to be needed for this
#include "nos_utils.h"

/**
 * @return  struct winsize
 *  unsigned short int ws_row;
 *   unsigned short int ws_col;
 *   unsigned short int ws_xpixel;
 *   unsigned short int ws_ypixel;
 */
struct winsize get_screen_size() {
	struct winsize ws;
	int fd;

	fd = open("/dev/tty", O_RDWR);
	if (fd < 0 || ioctl(fd, TIOCGWINSZ, &ws) < 0) err(8, "/dev/tty");
	close(fd); // dont forget to close files
	return ws;
}

unsigned short get_screen_width() {
	struct winsize ws = get_screen_size();
	return ws.ws_col;
}

unsigned short get_screen_height() {
	struct winsize ws = get_screen_size();
	return ws.ws_row;
}

void test_screen_size() {
	struct winsize ws = get_screen_size();
	//    unsigned short  h = ws.ws_row;
	//    unsigned short  w = ws.ws_col;
	printf("The Teminal Size is\n rows: %zu  in %upx\n cols: %zu in %upx\n",
		ws.ws_row,
		ws.ws_ypixel,
		ws.ws_col,
		ws.ws_xpixel);

	unsigned short  h = get_screen_height();
	unsigned short  w = get_screen_width();
	h = h - 4; //for the 3 lines above + 1 fro new terminal line after :)
	for (unsigned short  i = 0; i < h; i++) {// for each row
		for (unsigned short  j = 0; j < w; j++) { // for each col
			                                      //new line if we are last char
			if (j == w - 1) {
				printf(" \n");
			}//one space buffer around edge
			else if (i == 0 || i == h - 1 || j == 0) {
				printf(" ");
			} //the up arrows
			else if (i == 1) {
				printf("^");
			} else if (i == h - 2) {
				printf("v");
			} else if (j == 1) {
				printf("<");
			} else if (j == w - 2) {
				printf(">");
			} else {
				printf("#");
			}
		}//end col
	}//end row
}

int main(int argc, char** argv) {
	test_screen_size();
	return 0;
}


***
   Assuming you are on Linux, I think you want to use the ncurses library instead. I am pretty sure
   the ttysize stuff you have is not in stdlib.

***
   Here are the function calls for the already suggested environmental variable thing:
int lines = atoi(getenv("LINES"));
int columns = atoi(getenv("COLUMNS"));



---
https://unix.stackexchange.com/questions/580362/how-are-terminal-information-such-as-window-size-sent-to-a-linux-program

How are terminal information (such as window size) sent to a Linux program?

   All I know is that a process has file descriptor 0/1 set to stdin/stdout by default. But how does
   programs such as vi know about window size, especially when I can resize the window freely in desktop
   environment? I can't think of how this could be sent via signals, so I guess there are some other
   mechanisms?.

   I do not know anything about terminal emulator, which I guess might be related to the question. Any
   pointers will be helpful and appreciated.

***
   The size of a terminal is kept in kernel-internal structure, and can be queried by the TIOCGWINSZ and
   set by TIOCSWINSZ ioctls. See the ioctl_tty(2) manpage for details.

   Each time the window size is set via TIOCSWINSZ (eg. by xterm when its GUI window was resized) the
   kernel will send a SIGWINCH signal to the foreground process group of that terminal.

   A program like vi catches that signal and updates its idea of the window size via TIOCGWINSZ.

   The window size is usually set by the program driving the master end of a pseudo-tty (like xterm or
   sshd) but any process able to open the tty (whether in read-only or write-only mode) can do it.

   A command line interface to those ioctls is via the stty program. (eg. stty cols 80 rows 40). This is
   useful with real serial terminals, which have no inherent size, and no standard way to pass that info
   through.

   Though not yet standardized [*1], all of this is not Linux-specific, and works similarly on other
   systems like BSD or Solaris. A notable difference is that a background process trying to change the
   size of its controlling tty with TIOCSWINSZ will get a SIGTTOU signal on BSD and Solaris, but not on
   Linux.

   On any of those systems, a background process will NOT get a SIGWINCH signal, neither when its
   controlling tty is resized, nor when it becomes a foreground process. Full screen programs assume
   that they're either running in the foreground or stopped, and also query the terminal size upon a
   SIGCONT signal (together with other tty operations like switching to the alternate screen or turning
   the canonical mode off).

   Notice that a process doesn't need to have an open handle to a tty for it to be its controlling tty,
   and it can have an open handle to a tty without it being its controlling tty.

   There's no other way for a process to be notified of terminal size changes other than being in the
   tty's foreground process group. Also, there's no general way to be notified of other changes to the
   terminal parameters: tcsetattr(3) will not generate any signal or event that can be select(2)ed on.

   [*1] A standard interface is slated to be included in an upcoming version of POSIX, with the
   tcgetwinsize and tcsetwinsize functions, easily implementable as wrappers to ioctl(TIOC[SG]WINSZ).


---

