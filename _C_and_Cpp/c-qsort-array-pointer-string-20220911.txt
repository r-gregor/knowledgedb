filename: c_qsort-array-pointer-string_20220911.txt
https://cboard.cprogramming.com/c-programming/90861-qsort-array-pointer-string.html

qsort() in Array of Pointer to String

	 I m trying to sort an Array of Pointer to String using qsort() . Result doesnt show the sorted
	 string , Have a look at the code
	 Code:

// qsort() in Array of Pointer to String

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<string.h>

int cmp(const void *, const void *);

main(void) {
	char *s[] = {
				   "Gaurav",
				   "Vaibhav",
				   "Garima",
				   "Amit"
				};

	qsort( (char*)s, 4 , sizeof(s[0]), cmp);

	int i = 0;
	while(i<4) 	{
		printf("\t%s\n",s[i]);
		i++;
	}

	getch();
}

int cmp(const void *x, const void *y) {
	return(strcmp((char*)x,(char*)y));
}

***
	 qsort() passes pointers to each element to your compare function.
	 If you have an array of ints, you'll be passed pointers to those ints. In your case you have an
	 array of pointers. Therefore you'll be passeed pointers to pointers. Hence you should cast x and y
	 to char **'s instead of char *'s, and then you need to dereference them. They may be passed into
	 strcmp() in that manner.

***
	 actually i have already tried my hand at bsearch() over Array of Pointer to String assuming
	 Strings are sorted in assending order, and its working, here is the code
	 Code:
// bsearch() in Array of Pointer to String <assuming Sorted>

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<string.h>

int cmp(const void *, const void *);

main(void) {
	char *s[] = {
				   "Amit",
				   "Garima",
				   "Gaurav",
				   "Vaibhav"
				};

	char *str = "Vaibhav";

	char **found = (char**)bsearch( (char*)&str, (char*)s, 4 , sizeof(s[0]) , cmp);

	if (found!=NULL) {
		printf("Found!");
	}
	else {
		printf("Not Found!");
	}

	getch();
}

int cmp(const void *x, const void *y) {
	return(strcmp((char*)x,(char*)y));
}

	 here, too i used only pointer to char in my cmp() and not pointer to pointer to char and it was
	 working, so y not on qsort() ?

***
	 here, too i used only pointer to char in my cmp() and not pointer to pointer to char and it was
	 working, so y not on qsort() ?
	 Possibly because your compiler optimized the code. Similar string constants might have been saved
	 in the same exact position in the table. Since you have the same string written twice, the
	 compiler might have set both pointers to point to the same address, thereby making the code take
	 less memory since only one copy of the string would be stored instead of two.
	 So with that in mind, the string you were searching for and the string that was inside the array
	 might have been at the same exact address in memory. When you were comparing them, you would be
	 comparing their addresses as strings. Even though that is not what you want to do, you would still
	 get the same answer that they are equal, although the "equalness" means something different.
	 It's important to note that on some compilers, this will not produce the same results. Some
	 compilers will say that the string cannot be found, although most modern compilers will perform
	 this optimization. You're playing with undefined bahavior by doing this, and therefore this code
	 is wrong.
	
***
	 ok!
	 so, my cmp() function is passed pointer to pointer to Strings stored.
	 strcmp() function declaration says:
	 Code:
int strcmp(const char *s1, const char *s2);

	 this means strcmp() expects pointer to strings , so i need to dereference my pointers passed to
	 cmp() only once. so i tried this
	 Code:
int cmp(const void *x, const void *y) {
	return(strcmp((char*)(*x),(char*)(*y)));
}

	 but i m getting an error !

***
	 You're being passed char **'s as void *'s. So as I said, cast them to char **'s. Then after they
	 are cast as char **'s, then dereference them.
	 What you're trying to do now is dereference them before casting. You can't do that. Dereference
	 them after casting.

***
	 thanx a ton! , it is working, here is what i hv done !
	 Code:
int cmp(const void *x, const void *y) {
	return(strcmp(*((char**)x),*((char**)y)));
}


---

