filename: c_returning-values-by-value-reference-and-address_20211124.txt
https://www.learncpp.com/cpp-tutorial/returning-values-by-value-reference-and-address/

11.5 - Returning values by value, reference, and address
October 31, 2021

   In the three previous lessons, you learned about passing arguments to functions by value, reference,
   and address. In this section, we'll consider the issue of returning values back to the caller via all
   three methods.

   As it turns out, returning values from a function to its caller by value, address, or reference works
   almost exactly the same way as passing arguments to a function does. All of the same upsides and
   downsides for each method are present. The primary difference between the two is simply that the
   direction of data flow is reversed. However, there is one more added bit of complexity -- because
   local variables in a function go out of scope and are destroyed when the function returns, we need to
   consider the effect of this on each return type.

   Return by value

   Return by value is the simplest and safest return type to use. When a value is returned by value, a
   copy of that value is returned to the caller. As with pass by value, you can return by value literals
   (e.g. 5), variables (e.g. x), or expressions (e.g. x+1), which makes return by value very flexible.

   Another advantage of return by value is that you can return variables (or expressions) that involve
   local variables declared within the function without having to worry about scoping issues. Because
   the variables are evaluated before the function returns, and a copy of the value is returned to the
   caller, there are no problems when the function's variable goes out of scope at the end of the
   function.
int doubleValue(int x) {
	int value{ x * 2 };
	return value; // A copy of value will be returned here
} // value goes out of scope here

   Return by value is the most appropriate when returning variables that were declared inside the
   function, or for returning function arguments that were passed by value. However, like pass by value,
   return by value is slow for structs and large classes.

   When to use return by value:
	 * When returning variables that were declared inside the function
	 * When returning function arguments that were passed by value

   When not to use return by value:
	 * When returning a built-in array or pointer (use return by address)
	 * When returning a large struct or class (use return by reference)

   Return by address

   Returning by address involves returning the address of a variable to the caller. Similar to pass by
   address, return by address can only return the address of a variable, not a literal or an expression
   (which don't have addresses). Because return by address just copies an address from the function to
   the caller, return by address is fast.

   However, return by address has one additional downside that return by value doesn't -- if you try to
   return the address of a variable local to the function, your program will exhibit undefined behavior.
   Consider the following example:
int* doubleValue(int x) {
	int value{ x * 2 };
	return &value; // return value by address here
} // value destroyed here

   As you can see here, value is destroyed just after its address is returned to the caller. The end
   result is that the caller ends up with the address of non-allocated memory (a dangling pointer),
   which will cause problems if used. This is a common mistake that new programmers make. Many newer
   compilers will give a warning (not an error) if the programmer tries to return a local variable by
   address -- however, there are quite a few ways to trick the compiler into letting you do something
   illegal without generating a warning, so the burden is on the programmer to ensure the pointer they
   are returning will point to a valid variable after the function returns.

   Return by address was often used to return dynamically allocated memory to the caller:
int* allocateArray(int size) {
	return new int[size];
}

int main() {
	int* array{ allocateArray(25) };

	// do stuff with array

	delete[] array;
	return 0;
}

   This works because dynamically allocated memory is not destroyed at the end of the block in which it
   is allocated, so that memory will still exist when the address is returned back to the caller.
   Keeping track of manual allocations can be difficult. Separating the allocation and deletion into
   different functions makes it even harder to understand who's responsible for deleting the resource or
   if the resource needs to be deleted at all. Smart pointers (covered later) and types that clean up
   after themselves should be used instead of manual allocations.

   When to use return by address:
	 * When returning dynamically allocated memory and you can't use a type that handles allocations for
	   you
	 * When returning function arguments that were passed by address

   When not to use return by address:
	 * When returning variables that were declared inside the function or parameters that were passed by
	   value (use return by value)
	 * When returning a large struct or class that was passed by reference (use return by reference)

   Return by reference

   Similar to return by address, values returned by reference must be variables (you should not return a
   reference to a literal or an expression that resolves to a temporary value, as those will go out of
   scope at the end of the function and you'll end up returning a dangling reference). When a variable
   is returned by reference, a reference to the variable is passed back to the caller. The caller can
   then use this reference to continue modifying the variable, which can be useful at times. Return by
   reference is also fast, which can be useful when returning structs and classes.

   However, just like return by address, you should not return local variables by reference. Consider
   the following example:
int& doubleValue(int x) {
	int value{ x * 2 };
	return value; // return a reference to value here
} // value is destroyed here

   In the above program, the program is returning a reference to a value that will be destroyed when the
   function returns. This would mean the caller receives a reference to garbage. Fortunately, your
   compiler will probably give you a warning or error if you try to do this.

   Return by reference is typically used to return arguments passed by reference to the function back to
   the caller. In the following example, we return (by reference) an element of an array that was passed
   to our function by reference:
#include <array>
#include <iostream>

// Returns a reference to the index element of array
int& getElement(std::array<int, 25>& array, int index) {
	// we know that array[index] will not be destroyed when we return to the caller (since the caller passed i
n the array in the first place!)
	// so it's okay to return it by reference
	return array[index];
}

int main() {
	std::array<int, 25> array;

	// Set the element of array with index 10 to the value 5
	getElement(array, 10) = 5;

	std::cout << array[10] << '\n';

	return 0;
}

   This prints:
5

   When we call getElement(array, 10), getElement() returns a reference to the array element with index
   10. main() then uses this reference to assign that element the value 5.

   Although this is somewhat of a contrived example (because you can access array[10] directly), once
   you learn about classes you will find a lot more uses for returning values by reference.

   When to use return by reference:
	 * When returning a reference parameter
	 * When returning a member of an object that was passed into the function by reference or address
	 * When returning a large struct or class that will not be destroyed at the end of the function
	   (e.g. one that was passed in by reference)

   When not to use return by reference:
	 * When returning variables that were declared inside the function or parameters that were passed by
	   value (use return by value)
	 * When returning a built-in array or pointer value (use return by address)

   Mixing return references and values

   Although a function may return a value or a reference, the caller may or may not assign the result to
   a variable or reference accordingly. Let's look at what happens when we mix value and reference
   types.
int returnByValue() {
	return 5;
}

int& returnByReference() {
	 static int x{ 5 }; // static ensures x isn't destroyed when the function ends
	 return x;
}

int main() {
	int giana{ returnByReference() }; // case A -- ok, treated as return by value
	int& ref{ returnByValue() }; // case B -- compile error since the value is an r-value, and an r-value can'
t bind to a non-const reference
	const int& cref{ returnByValue() }; // case C -- ok, the lifetime of the return value is extended to the l
ifetime of cref

	return 0;
}

   In case A, we're assigning a reference return value to a non-reference variable. Because giana isn't
   a reference, the return value is copied into giana, as if returnByReference() had returned by value.

   In case B, we're trying to initialize reference ref with the copy of the return value returned by
   returnByValue(). However, because the value being returned doesn't have an address (it's an r-value),
   this will cause a compile error.

   In case C, we're trying to initialize const reference cref with the copy of the return value returned
   by returnByValue(). Because const references can bind to r-values, there's no problem here. Normally,
   r-values expire at the end of the expression in which they are created -- however, when bound to a
   const reference, the lifetime of the r-value (in this case, the return value of the function) is
   extended to match the lifetime of the reference (in this case, cref)

   Lifetime extension doesn't save dangling references

   Consider the following program:
const int& returnByReference() {
	 return 5;
}

int main() {
	const int& ref { returnByReference() }; // runtime error
}

   In the above program, returnByReference() is returning a const reference to a value that will go out
   of scope when the function ends. This is normally a no-no, as it will result in a dangling reference.
   However, we also know that initializing a const reference with an r-value can extend the lifetime of
   that value. So which takes precedence here? Does 5 go out of scope first, or does ref extend the
   lifetime of 5?

   The answer is that 5 goes out of scope at the end of the function (resulting in the function
   returning a dangling reference), and ref is bound to that dangling reference.

   However, the following does work as expected:
int returnByValue() {
	 return 5;
}

int main() {
	const int& ref { returnByValue() }; // ok, we're extending the lifetime of the copy passed back to main
}

   In this case, the literal value 5 is first copied back into the scope of the caller (main), and then
   ref extends the lifetime of that copy.

   Returning multiple values

   C++ doesn't contain a direct method for passing multiple values back to the caller. While you can
   sometimes restructure your code in such a way that you can pass back each data item separately (e.g.
   instead of having a single function return two values, have two functions each return a single
   value), this can be cumbersome and unintuitive.

   Fortunately, there are several indirect methods that can be used.

   As covered in lesson [**1]11.3 -- Passing arguments by reference, out parameters provide one method
   for passing multiple bits of data back to the caller. We don't recommend this method.

   A second method involves using a data-only struct:
#include <iostream>

struct S {
	int m_x;
	double m_y;
};

S returnStruct() {
	S s;
	s.m_x = 5;
	s.m_y = 6.7;
	return s;
}

int main() {
	S s{ returnStruct() };
	std::cout << s.m_x << ' ' << s.m_y << '\n';

	return 0;
}

   A third way is to use std::tuple. A tuple is a sequence of elements that may be different types,
   where the type of each element must be explicitly specified.

   Here's an example that returns a tuple, and uses std::get to get the nth element of the tuple
   (counting from 0):
#include <tuple>
#include <iostream>

std::tuple<int, double> returnTuple() // return a tuple that contains an int and a double {
	return { 5, 6.7 };
}

int main() {
	std::tuple s{ returnTuple() }; // get our tuple
	std::cout << std::get<0>(s) << ' ' << std::get<1>(s) << '\n'; // use std::get<n> to get the nth element
	                                                              // of the tuple (counting from 0)

	return 0;
}

   This works identically to the prior example.

   You can also use std::tie to unpack the tuple into predefined variables, like so:
#include <tuple>
#include <iostream>

std::tuple<int, double> returnTuple() // return a tuple that contains an int and a double {
	return { 5, 6.7 };
}

int main() {
	int a;
	double b;
	std::tie(a, b) = returnTuple(); // put elements of tuple in variables a and b
	std::cout << a << ' ' << b << '\n';

	return 0;
}

   As of C++17, a structured binding declaration can be used to simplify splitting multiple returned
   values into separate variables:
#include <tuple>
#include <iostream>

std::tuple<int, double> returnTuple() // return a tuple that contains an int and a double {
	return { 5, 6.7 };
}

int main() {
	auto [a, b]{ returnTuple() }; // used structured binding declaration to put results of tuple in
	                              // variables a and b
	std::cout << a << ' ' << b << '\n';

	return 0;
}

   Using a struct is a better option than a tuple if you're using the struct in multiple places.
   However, for cases where you're just packaging up these values to return and there would be no reuse
   from defining a new struct, a tuple is a bit cleaner since it doesn't introduce a new user-defined
   data type.

   Conclusion

   Most of the time, return by value will be sufficient for your needs. It's also the most flexible and
   safest way to return information to the caller. However, return by reference or address can also be
   useful, particularly when working with dynamically allocated classes or structs. When using return by
   reference or address, make sure you are not returning a reference to, or the address of, a variable
   that will go out of scope when the function returns!

   Quiz time

   Write function prototypes for each of the following functions. Use the most appropriate parameter and
   return types (by value, by address, or by reference), including use of const where appropriate.
	1. A function named sumTo() that takes an integer parameter and returns the sum of all the numbers
	   between 1 and the input number.

   Show Solution
int sumTo(int value);

	2. A function named printEmployeeName() that takes an Employee struct as input.

   Show Solution
void printEmployeeName(const Employee& employee);

	3. A function named minmax() that takes two integers as input and returns back to the caller the
	   smaller and larger number in a std::pair. A std::pair works identical to a std::tuple but stores
	   exactly two elements.

   Show Solution
std::pair<int, int> minmax(int x, int y);

   std::minmax is a standard function.
	4. A function named getIndexOfLargestValue() that takes an integer array (as a std::vector), and
	   returns the index of the largest element in the array.

   Show Solution
std::size_t getIndexOfLargestValue(const std::vector<int>& array);

   std::max_element is a standard function.
	5. A function named getElement() that takes an array of std::string (as a std::vector) and an index
	   and returns the array element at that index (not a copy). Assume the index is valid, and the
	   return value is const.

   Show Solution
const std::string& getElement(const std::vector<std::string>& array, std::size_t index);



---
[**1]

https://www.learncpp.com/cpp-tutorial/passing-arguments-by-reference/

11.3 - Passing arguments by reference
August 14, 2021

   While pass by value is suitable in many cases, it has a couple of limitations. First, when passing a
   large struct or class to a function, pass by value will make a copy of the argument into the function
   parameter. In many cases, this is a needless performance hit, as the original argument would have
   sufficed. Second, when passing arguments by value, the only way to return a value back to the caller
   is via the function's return value. While this is often suitable, there are cases where it would be
   more clear and efficient to have the function modify the argument passed in. Pass by reference solves
   both of these issues.

   Pass by reference

   To pass a variable by reference, we simply declare the function parameters as references rather than
   as normal variables:
void addOne(int& ref) // ref is a reference variable {
	ref = ref + 1;
}

   When the function is called, ref will become a reference to the argument. Since a reference to a
   variable is treated exactly the same as the variable itself, any changes made to the reference are
   passed through to the argument!

   The following example shows this in action:
void addOne(int& ref) {
	ref = ref + 1;
}

int main() {
	int value{ 5 };

	cout << "value = " << value << '\n';
	addOne(value);
	cout << "value = " << value << '\n';
	return 0;
}

   This program is the same as the one we used for the pass by value example, except addOne's parameter
   is now a reference instead of a normal variable. When we call addOne(value), ref becomes a reference
   to main's value variable. This snippet produces the output:
value = 5
value = 6

   As you can see, the function changed the value of the argument from 5 to 6!

   Returning multiple values via out parameters

   Sometimes we need a function to return multiple values. However, functions can only have one return
   value. One way to return multiple values is using reference parameters:
#include <iostream>
#include <cmath>	// for std::sin() and std::cos()

void getSinCos(double degrees, double& sinOut, double& cosOut) {
	// sin() and cos() take radians, not degrees, so we need to convert
	constexpr double pi { 3.14159265358979323846 }; // the value of pi
	double radians{ degrees * pi / 180.0 };
	sinOut = std::sin(radians);
	cosOut = std::cos(radians);
}

int main() {
	double sin{ 0.0 };
	double cos{ 0.0 };

	// getSinCos will return the sin and cos in variables sin and cos
	getSinCos(30.0, sin, cos);

	std::cout << "The sin is " << sin << '\n';
	std::cout << "The cos is " << cos << '\n';
	return 0;
}

   This function takes one parameter (by value) as input, and "returns" two parameters (by reference) as
   output. Parameters that are only used for returning values back to the caller are called out
   parameters. We've named these out parameters with the suffix "out" to denote that they're out
   parameters. This helps remind the caller that the initial value passed to these parameters doesn't
   matter, and that we should expect them to be rewritten. By convention, output parameters are
   typically the rightmost parameters.

   Let's explore how this works in more detail. First, the main function creates local variables sin and
   cos. Those are passed into function getSinCos() by reference (rather than by value). This means
   function getSinCos() has access to the actual sin and cos variables, not just copies. getSinCos()
   accordingly assigns new values to sin and cos (through references sinOut and cosOut respectively),
   which overwrites the old values in sin and cos. Main then prints these updated values.

   If sin and cos had been passed by value instead of reference, getSinCos() would have changed copies
   of sin and cos, leading to any changes being discarded at the end of the function. But because sin
   and cos were passed by reference, any changes made to sin or cos (through the references) are
   persisted beyond the function. We can therefore use this mechanism to return values back to the
   caller.

   This method, while functional, has a few minor downsides. First, the caller must pass in arguments to
   hold the updated outputs even if it doesn't intend to use them. More importantly, the syntax is a bit
   unnatural, with both the input and output parameters being put together in the function call. It's
   not obvious from the caller's end that sin and cos are out parameters and will be changed. This is
   probably the most dangerous part of this method (as it can lead to mistakes being made). Some
   programmers and companies feel this is a big enough problem to advise avoiding output parameters
   altogether, or using pass by address for out parameters instead (which has a clearer syntax
   indicating whether a parameter is modifiable or not).

   Personally, we recommend avoiding out parameters altogether if possible. If you do use them, naming
   out parameters (and output arguments) with an "out" suffix (or prefix) can help make it clear that
   the value might be modified.

   Limitations of pass by reference

   Non-const references can only reference non-const l-values (e.g. non-const variables), so a reference
   parameter cannot accept an argument that is a const l-value or an r-value (e.g. literals and the
   results of expressions).

   Pass by const reference

   As mentioned in the introduction, one of the major disadvantages of pass by value is that all
   arguments passed by value are copied into the function parameters. When the arguments are large
   structs or classes, this can take a lot of time. References provide a way to avoid this penalty. When
   an argument is passed by reference, a reference is created to the actual argument (which takes
   minimal time) and no copying of values takes place. This allows us to pass large structs and classes
   with a minimum performance penalty.

   However, this also opens us up to potential trouble. References allow the function to change the
   value of the argument, which is undesirable when we want an argument be read-only. If we know that a
   function should not change the value of an argument, but don't want to pass by value, the best
   solution is to pass by const reference.

   You already know that a const reference is a reference that does not allow the variable being
   referenced to be changed through the reference. Consequently, if we use a const reference as a
   parameter, we guarantee to the caller that the function will not change the argument!

   The following function will produce a compiler error:
void foo(const std::string& x) // x is a const reference {
	x = "hello";  // compile error: a const reference cannot have its value changed!
}

   Using const is useful for several reasons:
	 * It enlists the compilers help in ensuring values that shouldn't be changed aren't changed (the
	   compiler will throw an error if you try, like in the above example).
	 * It tells the programmer that the function won't change the value of the argument. This can help
	   with debugging.
	 * You can't pass a const argument to a non-const reference parameter. Using const parameters
	   ensures you can pass both non-const and const arguments to the function.
	 * Const references can accept any type of argument, including non-const l-values, const l-values,
	   and r-values.

   Best practice

   When passing an argument by reference, always use a const reference unless you need to change the
   value of the argument.

   A reminder

   Non-const references cannot bind to r-values. A function with a non-const reference parameter cannot
   be called with literals or temporaries.
#include <string>

void foo(std::string& text) {}

int main() {
	std::string text{ "hello" };

	foo(text); // ok
	foo(text + " world"); // illegal, non-const references can't bind to r-values.

	return 0;
}

   References to pointers

   It's possible to pass a pointer by reference, and have the function change the address of the pointer
   entirely:
#include <iostream>

void foo(int*& ptr) // pass pointer by reference {
	ptr = nullptr; // this changes the actual ptr argument passed in, not a copy
}

int main() {
	int x{ 5 };
	int* ptr{ &x };
	std::cout << "ptr is: " << (ptr ? "non-null" : "null") << '\n'; // prints non-null
	foo(ptr);
	std::cout << "ptr is: " << (ptr ? "non-null" : "null") << '\n'; // prints null

	return 0;
}

   (We'll show another example of this in the next lesson)

   As a reminder, you can pass a C-style array by reference. This is useful if you need the ability for
   the function to change the array (e.g. for a sort function) or you need access to the array's type
   information of a fixed array (to do sizeof() or a for-each loop). However, note that in order for
   this to work, you explicitly need to define the array size in the parameter:
#include <iostream>

// Note: You need to specify the array size in the function declaration
void printElements(int (&arr)[4]) {
	int length{ sizeof(arr) / sizeof(arr[0]) }; // we can now do this since the array won't decay

	for (int i{ 0 }; i < length; ++i) {
		std::cout << arr[i] << '\n';
	}
}

int main() {
	int arr[]{ 99, 20, 14, 80 };

	printElements(arr);

	return 0;
}

   This means this only works with fixed arrays of one particular length. If you want this to work with
   fixed arrays of any length, you can make the array length a template parameter (covered in a later
   chapter).

   Pros and cons of pass by reference

   Advantages of passing by reference:
	 * References allow a function to change the value of the argument, which is sometimes useful.
	   Otherwise, const references can be used to guarantee the function won't change the argument.
	 * Because a copy of the argument is not made, pass by reference is fast, even when used with large
	   structs or classes.
	 * References can be used to return multiple values from a function (via out parameters).
	 * References must be initialized, so there's no worry about null values.

   Disadvantages of passing by reference:
	 * Because a non-const reference cannot be initialized with a const l-value or an r-value (e.g. a
	   literal or an expression), arguments to non-const reference parameters must be normal variables.
	 * It can be hard to tell whether an argument passed by non-const reference is meant to be input,
	   output, or both. Judicious use of const and a naming suffix for out variables can help.
	 * It's impossible to tell from the function call whether the argument may change. An argument
	   passed by value and passed by reference looks the same. We can only tell whether an argument is
	   passed by value or reference by looking at the function declaration. This can lead to situations
	   where the programmer does not realize a function will change the value of the argument.

   When to use pass by reference:
	 * When passing structs or classes (use const if read-only).
	 * When you need the function to modify an argument.
	 * When you need access to the type information of a fixed array.

   When not to use pass by reference:
	 * When passing fundamental types that don't need to be modified (use pass by value).

   Best practice

   Use pass by (const) reference instead of pass by value for structs and classes and other
   expensive-to-copy types.


---

