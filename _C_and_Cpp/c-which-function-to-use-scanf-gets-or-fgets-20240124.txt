filename: c_which-function-to-use-scanf-gets-or-fgets_20240124.txt
https://copyprogramming.com/howto/use-scanf-gets-or-fgets-function?utm_content=cmp-true

Which function to use: scanf(), gets(), or fgets()?
2023-04-20

I am attempting to apply Caesar encryption to a string, but it is only functioning for single words
without any spaces between characters. Compiler warnings should be appearing.

Use scanf(), gets() or fgets() function?

My attempt to encrypt a sentence using Caesar encryption has been unsuccessful as it only works for
single words without spaces. I have been trying to incorporate white spaces into the encryption process by
using either gets() or fgets() , which I read about here, but I have not been able to make it work properly.

#include
#include
#include

int main(int argc, char** argv) {
	printf("Enter the shift: ");
	int shift,index,length;
	scanf("%d", &shift);
	printf("Enter the string to encrypt: " );
	char string[1000];
	//gets(string);
	scanf("%s",string);
	//fgets(string,1000,stdin);
	char encrypted[strlen(string) + 1];
	for(index = 0, length = strlen(string); index < length; index++ ){
		if (string[index]!=' ')
			encrypted[index] = 'A' + (string[index] -'A' + shift) % 26;
		else
			encrypted[index]=' ';
	}
	encrypted[ strlen(string)] = '\0';
	printf("%s\n", encrypted);
	return (EXIT_SUCCESS);
}


Solution 1:

In

char string[1000];
scanf("%s",string);

the scan terminates at whitespace.
To retrieve the complete string, except for the terminating newline, utilize the following approach:

char string[1000], *p;
fgets(string, sizeof(string), stdin);
if ((p = strchr(string, '\n')) != NULL) {
	*p = '\0'; /* remove newline */
}

As suggested by @chux, it is recommended to consume within scanf.

int shift, index, length;
char string[1000], *p;
fgets(string, sizeof(string), stdin);
shift = atoi(string);
printf("Enter the string to encrypt: " );
fgets(string, sizeof(string), stdin);
if ((p = strchr(string, '\n')) != NULL) {
	*p = '\0'; /* remove newline */
}

And you get:

Enter the shift: 1
Enter the string to encrypt: MY NAME
NZ OBNF

Solution 2:
To avoid halting at whitespace, it's recommended to switch from scanf("%s",string); to the alternative option.

fgets(string, sizeof(string), stdin);
It is not advisable to allocate a large string using char string[1000]; as it may end up in the stack
in most implementations. It is preferable to use malloc instead.

Solution 3:
The portion of scanf("%d", &shift) does not consume the last line break. Therefore, fgets and gets may not
function properly since they expect a new line input, which is already present in the remaining line break.

while(getchar()!='\n');//get rid of the newline up
scanf("%999[^\n]", string);//It corresponds to the `gets()`

Is there any reason to use scanf or fscanf over fgets+sscanf

Question:
The flexibility of not reading from the stream is apparent. Additionally, it allows for easy modification
of the timing and location of code reads, which may not be possible with a C stream. Is it possible to
convert strings and other elements into C streams?

Additionally, I have some reservations regarding scanf and would appreciate any feedback on the advantages
and disadvantages of scanf .

Correction: My intention was to refer to the difference in employing scanf or fscanf versus the combination
of fgets and sscanf.

Solution 1:
The C FAQ provides comprehensive coverage of this topic.
	What is the reason for the recommendation against using scanf? What alternative should be used in
	its place?

When reading from a reliable file (excluding stdin ), there is no need to utilize fgets + sscanf over
fscanf . However, using scanf (reading from stdin ) can pose issues.

Solution 2:
In case you are expecting an integer but come across a floating point or any other incompatible type,
you may verify the return value of scanf . A return value of zero indicates the absence of an integer ,
although this is not possible with fgets . By examining the return value of scanf , you can determine
the number of items read.

C - scanf and fgets in same program, My advice: don't use scanf but replace it by a function you need
to write such as int GetInteger(). Replace scanf ("%d",&op); by op = GetInteger();. ...

Using scanf and fgets in the same program?
Question:
I am in need of performing a task similar to the one described below:

int main(void) {
	char a,b,cstring;
	printf("please enter something");
	scanf("%c %c",&a,&b);
	prinf("thanks, now some more");
	fgets(cstring,35,stdin);
}

I'm facing an issue where my program jumps to the end whenever I enter the first vars using scanf. Is
there a way to take multiple inputs without this problem occurring?

Solution 1:
One issue is that the scanf() only scans two characters and does not include the following newline.
Your fgets() will complete its task once it has read the newline character.

It seems that your program is not crashing, which is fortunate. However, when you inform fgets() that you
are receiving an array of 35 characters, you are actually passing a character, and not the address of a
character. This indicates that you have not included #include <stdio.h> , and you cannot rely on scanf()
in accordance with the C standard without a prototype for scanf() in scope. It is possible that you are
not compiling with enough warnings enabled or not paying sufficient attention to the warnings provided
by your compiler.

Compiler warnings should be generated, as indicated by GCC 4.6.0:

/usr/bin/gcc -g -I/Users/jleffler/inc -std=c99 -Wall -Wextra -Wmissing-prototypes \
	 -Wstrict-prototypes -Wold-style-definition xxx.c
xxx.c: In function 'main':
xxx.c:7: warning: implicit declaration of function 'prinf'
xxx.c:8: warning: passing argument 1 of 'fgets' makes pointer from integer without a cast

I failed to spot the spelling error in prinf() and only realized it when attempting to link, causing
the compiler to flag it as an unknown prinf() and reminding me of my mistake.

Upgrade your compiler if it fails to provide at least the second warning.

Comment:
	What can I do to prevent it from detecting the line break that comes after?

The issue lies in enabling fgets() to smoothly read the subsequent line of input, rather than restricting
scanf() from doing so. Though it is not an easy task, which is why I tend to avoid using scanf() and
prefer sscanf() . Nonetheless, for uncomplicated inputs, it works effectively.

#include
int main(void) {
	char a,b,cstring[35];
	printf("please enter something");
	scanf("%c %c%*c", &a, &b);
	printf("thanks, now some more");
	fgets(cstring, 35, stdin);
	printf("OK: I got %c and %c and <<%s>>\n", a, b, cstring);
	return 0;
}

The %*c captures an additional character (a newline) due to the * , but it remains unassigned. Nonetheless,
if there are several characters following the second non-blank, this does not assist in any way. To
handle this situation, I suggest writing a loop that reads until the newline character.

#include
int main(void) {
	char a,b,cstring[35];
	int c;
	printf("please enter something");
	scanf("%c %c", &a, &b);
	while ((c = getchar()) != EOF && c != '\n')
		;
	printf("thanks, now some more");
	fgets(cstring, 35, stdin);
	printf("OK: I got %c and %c and <<%s>>\n", a, b, cstring);
	return 0;
}

Keep in mind that getchar() outputs a int instead of a char . This effectively removes the contents of
the first input line. Additionally, it demonstrates the technique of displaying the input - a crucial
step in the debugging process.

Solution 2:
It is considered undefined behavior to attempt to read up to 35 characters into the current value pointed
to by your variable named cstring , which is actually a single character. This means that the current
character in cstring will be converted into a pointer and your input will be written there, which is
likely to be a memory location between 0 and 255 inclusive.

The reason behind your segmentation violation is that. Instead, begin with something similar to this.

#include

int main(void) {
	char a,b,cstring[99];
	printf("please enter something");
	scanf("%c %c",&a,&b);
	printf("thanks, now some more");
	fgets(cstring,35,stdin);
	return 0;
}

Or, possibly better:

#include
int main(void) {
	char a,b,cstring[99];
	printf("please enter something");
	fgets(cstring,35,stdin);
	sscanf(cstring,"%c %c",&a,&b);
	printf("thanks, now some more");
	fgets(cstring,35,stdin);
	return 0;
}

For those seeking a reliable user input solution with thorough error checking, consider exploring this
option for a more comprehensive approach.

Solution 3:
The issue arises when the fgets() function is reached. This particular API scans stdin for input and
detects a stray '\n' character present. As fgets() is designed to return when it encounters the end of
a file or a newline character, it considers the stray '\n' character from stdin as the end of the input
and executes without waiting for further user input.

To resolve the issue, you can incorporate getchar(); following scanf to disregard the surplus characters
that are not needed by scanf(). Here's an example:

scanf("%lf",&e);
getchar();
fgets(t,200,stdin);

or

An alternative approach could be to utilize fgets in combination with sscanf. For instance:

#include

int main() {
	int j;char t[200];
	fgets(t,200,stdin);
	sscanf(t,"%d",&j);
}

Solution 4:
Simply calling fflush(stdin) after scanf resolves the issue.
Is there any reason to use scanf or fscanf over, 1. If you were expecting an integer but you read a
floating point or some other incompatible type, you can check the return value of scanf. If it ...

Scanf and fgets in same program
Question:

void menu() {
	int op;
	printf("\n Choose a option from below : \n\n");
	printf(" 1: Add Contact\n"
		   " 2: View A Contact\n"
		   " 3: View All Contacts\n"
		   " 4: View All Contacts With a Common First Character\n"
		   " 5: Delete All Contact\n"
		   " 6: Delete A Contact\n"
		   " 7: Replace A Contact Name\n"
		   " 8: Replace A Contact Number\n"
		   " 9: Refresh\n"
		   " 10: Exit\n\n");
	printf(" Which one ? ");
	fgets(op, 5, stdin);
	switch ((int)op) {
	case 1: addrecords(); break;
	case 2: viewone(); break;
	case 3: viewall(); break;
	case 4: viewonechar(); break;
	case 5: deleteall(); break;
	case 6: deleteone(); break;
	case 7: replaceone(); break;
	case 8: replaceonenumber(); break;
	case 9: refresh(); break;
	case 10: exit(0); break;
	default:
		printf ("\n Wrong Option.\n\n");
		menu();
		break;
	}
}

void addrecords() {
	char name[50];
	char number[20];
	printf("\n\n Enter Contact Number (+880) : "); //Skips this
	fgets(number, 20, stdin);
	check(number);
	printf(" Enter Contact Name : "); //Comes in here
	fgets(name, 50, stdin);
	fp = fopen("Phonebook.txt","a");
	fprintf(fp, "%s %s\n", name, number);
	fclose(fp);
	printf("\n Contact Successfully Saved!\n Returning To Main Menu...\n\n");
	menu();
}

void check(char n[20]) {
	char name[25];
	char ncheck[20];
	fp = fopen("Phonebook.txt", "r");
	fscanf(fp, "%s %s", name, ncheck);
	while (!feof(fp)) {
		if ((strcmp(ncheck, n)) == 0) {
			printf ("\n Contact Already Exists.\n\n");
			fclose(fp);
			menu();
		} else {
			fscanf (fp, "%s %s", name, ncheck);
		}
	}
}

Following my program's update, when I input 1, it displays a message saying that the option is incorrect,
despite me entering the correct one. I'm unsure why the program is showing the wrong option even though
I'm doing everything correctly. Could the issue be related to the fgets ? What is the problem now?

Solution:
To minimize changes to your program and avoid highlighting additional errors or the absence of error
checks, I suggest a simplified approach for you to follow. Essentially, what you need to do is replace:

switch ((int)op) {

with something like

switch (atoi(op)) {

Generate a new get_int() by merging fgets() and strtol() , or use sscanf() instead.


---

