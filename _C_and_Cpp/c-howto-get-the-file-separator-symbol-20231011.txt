filename: c_howto_get-the-file-separator-symbol_20231011.txt
https://www.appsloveworld.com/cplus/100/14/how-to-get-the-file-separator-symbol-in-standard-c-c-or?expand_article=1

How to get the file separator symbol in standard C/C++

   I'm not sure how to do it other than by checking ifdefs

inline char separator() {
#ifdef _win32
	return '\\';
#else
	return '/';
#endif
}

   or (as suggested by paperbirdmaster)

const char kpathseparator =
#ifdef _win32
	'\\';
#else
	'/';
#endif

***
   I'm surprised no one has offered the following. this builds a bit on what others are offering here.

   although in this example I'm trying to dynamically grab the name of the executable being run for
   usage, it wouldn't be too hard to make the jump and reapply this however you need.

   windows uses forward slash to denote arguments. so you could check for that first in the first
   argument argv[0], which contains the name of the program being run.

   note the following results in stripping the pathname previous of the last slash, leaving sepd as the
   filename of the program.

#include <string.h>
#include <stdio.h>

int main(int argc, char *argv[]){
//int a = 1
//int this = (a == 1) ? 20 : 30;  //ternary operator
//is a==1 ? if yes then 'this' = 20, or else 'this' = 30
	char *sepd = (strrchr(argv[0], '\/') != null) ?
		strrchr(argv[0], '\/') :
		strrchr(argv[0], '\\');
	printf("%s\n\n", sepd);
	printf("usage: .%s <host> \n\n", sepd);
	while (getchar() != '\n');
}

   but in all reality, this is pretty dirty and with windows' most recent move to include bash (not yet
   implemented at this time), this may produce unexpected or unanticipated results.

   it's also not as sane and impervious to errors as what others have offered, particularly #ifdef _win32.

***
   the accepted answer does not work under cygwin. cygwin compiled programs running on windows can use
   the windows style '\' separator, but it does not define _win32 or the likes. a modified solution that
   works under cygwin:

inline char separator() {
#if defined _win32 || defined __cygwin__
	return '\\';
#else
	return '/';
#endif
}

   or

const char kpathseparator =
#if defined _win32 || defined __cygwin__
	'\\';
#else
	'/';
#endif

***
   that can be something like this

#if defined(win32) || defined(_win32)

#define path_separator "\\"
#else
#define path_separator "/"
#endif

***
   this question is really hinting at a much nastier problem.

   if you simply care about unix vs. winodws and you only care about directories and files, then what
   you've already seen will (mostly) work, but the more generic issue of splicing a path name into its
   components is a much uglier problem. depending on the platform, a path may include one or more of:
	 * volume identifier
	 * list of directories
	 * file-name
	 * sub-stream within the file
	 * version number

   while there are 3rd party libraries (like various cpan perl modules, boost, and others) for this, and
   every os includes system functions for this, there's nothing built-in to c for this and the c++
   standard only gained this functionality (by incorporating the boost module) in 2017.

   some examples of what such a function may need to deal with are:
	 * unix and unix-like systems use a list of strings separated by "/" characters, with a leading "/"
	   to indicate an absolute path (vs. a relative path). in some contexts (like nfs), there may also
	   be a host-name prefix (with a ":" delimiter)
	 * dos and dos-derived os's (windows, os/2 and others) use "\" as a directory separator (with the
	   apis also accepting "/"), but paths may also be prefixed with volume information. it could be a
	   drive letter ("c:"), or a unc share name ("\\myserver\share\") there are additional prefixes to
	   represent different kinds of servers and suffixes to represent non-default streams within a file.
	   Ezoic
	 * macs (classic mac os, carbon and some cocoa apis) use ":" as a directory separator, with the
	   first term being a volume name, not a directory name. mac files may also contain sub-streams
	   ("forks"), which are accessed via the same name using special-purpose apis. this is especially
	   important for the resource fork, which is used extensively in classic mac software.
	 * mac os x, when using the unix apis generally does what unix-like systems do, but they can also
	   represent named sub-streams ("forks") by suffixing a "." followed by the fork-name to the
	   file-name.
	 * the latest versions of cocoa (mac os x, ios, etc.) recommend using a url-based api to represent
	   files, due to the ever-increasing complexity of this problem. think about things like cloud-based
	   documents and other complicated networked file systems.
	 * vms is pretty complicated
	   (https://web.archive.org/web/20160324205714/http://www.djesys.com/vms/freevms/mentor/vms_path
	   .html), but it has components that represent a volume, directory-path, file and file-revision.

   there are many others as well.

   it is worth noting that the c++17 filesystem library does not cover all of these possibilities. the
   std::filesystem::path consists of an optional root-name (a volume identifier), an optional
   root-directory (to identify absolute paths), and a sequence of filenames separated by directory
   separators. this covers everything likely to be valid on unix platforms and the majority of use-cases
   for other platforms, but is not comprehensive. for example, it does not have any support for
   sub-streams (relying on the os to somehow map them onto a file name - which is done by mac os x, but
   not classic macos). it also does not include support for file version numbers.
   Ezoic

   see also wikipedia's entry on path and the c++17 std::filesystem::path class
   http://en.cppreference.com/w/cpp/filesystem

   I recommend you look at what you want to do with the directory separator (extract the base-name,
   break a path into a list of directories, etc.) and write a function to do that. if you're using c++17
   (and you are certain your code won't be compiled by a pre-17 c++ compiler) then you can (probably)
   use standard c++ library code to write a portable implementation of this function. if not, that
   function will need to use platform-specific #ifdefs for each platform you will be supporting, using a
   #error if none of the conditions are met, to force you to to add conditions for unexpected platforms.

   or use a 3rd party library (like boost) that includes functions for all of this, if that is
   acceptable.


---

