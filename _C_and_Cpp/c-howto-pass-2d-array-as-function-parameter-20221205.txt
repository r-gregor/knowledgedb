filename: c_howto_pass-2d-array-as-function-parameter_20221205.txt
https://www.techiedelight.com/pass-2d-array-function-parameter/

Pass 2D array to a function as a parameter in C

1. For Static Array
   If we know the array bounds at compile-time, we can pass a static 2D array to a function in C, as
   shown below:

#include <stdio.h>
#define M 5
#define N 5

// Here the parameter is a static 2D array
void assign(int arr[M][N])         // or, use 'arr[][N]'
{
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			arr[i][j] = i + j;
		}
	}
}

// Program to pass the 2D array to a function in C
int main(void) {
	int arr[M][N];

	assign(arr);

	// print 2D array
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			printf("%3d", arr[i][j]);
		}
		printf("\n");
	}

	return 0;
}

   Output:
     0    1  2  3  4
     1    2  3  4  5
     2    3  4  5  6
     3    4  5  6  7
     4    5  6  7  8


   If we don't know the array bounds at compile-time, we need to pass the array bounds to the function,
   as shown below. This will only work if the array is passed after the indices to the function.

#include <stdio.h>

// Here the parameter is a static 2D array
void assign(int m, int n, int arr[m][n]) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			arr[i][j] = i + j;
		}
	}
}

// Program to pass the 2D array to a function in C
int main(void) {
	int m = 5;
	int n = 5;

	int arr[m][n];

	assign(m, n, arr);

	// print 2D array
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			printf("%3d", arr[i][j]);
		}
		printf("\n");
	}

	return 0;
}

   Output:
     0    1  2  3  4
     1    2  3  4  5
     2    3  4  5  6
     3    4  5  6  7
     4    5  6  7  8

2. Using Array of Pointers
   When the array bounds are not known until runtime, we can dynamically create an array of pointers and
   dynamically allocate memory for each row. Then we can pass the array of pointers to a function, as
   shown below:

#include <stdio.h>
#include <stdlib.h>

// Here, the parameter is an array of pointers
void assign(int** arr, int m, int n) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			arr[i][j] = i + j;
		}
	}
}

// Program to pass the 2D array to a function in C
int main(void) {
	int m = 5;
	int n = 5;

	// dynamically create an array of pointers of size 'm'
	int **arr = (int **)malloc(m * sizeof(int *));

	// dynamically allocate memory of size 'n' for each row
	for (int r = 0; r < m; r++) {
		arr[r] = (int *)malloc(n * sizeof(int));
	}

	assign(arr, m, n);

	// print 2D array
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++) {
			printf("%3d", arr[i][j]);
		}
		printf("\n");
	}

	// deallocate memory
	for (int i = 0; i < m; i++) {
		free(arr[i]);
	}
	free(arr);

	return 0;
}

   Output:
   0 1 2 3 4
   1 2 3 4 5
   2 3 4 5 6
   3 4 5 6 7
   4 5 6 7 8

3. Using 1D array
   We can even use a 1D array to allocate memory for a 2D array. This can be done both statically and
   dynamically, as shown below:

- Static Array

#include <stdio.h>
#include <stdlib.h>

// The parameter is a static 1D array
void assign(int m, int n, int arr[m]) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			arr[i*n + j] = i + j;
		}
	}
}

// Program to pass the 2D array to a function in C
int main(void) {
	int m = 5;
	int n = 5;

	int arr[m * n];

	assign(m, n, arr);

	// print 2D array
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			printf("%3d", arr[i*n + j]);
		}
		printf("\n");
	}

	return 0;
}

   Output:
   0 1 2 3 4
   1 2 3 4 5
   2 3 4 5 6
   3 4 5 6 7
   4 5 6 7 8

- Dynamic Array

#include <stdio.h>
#include <stdlib.h>

// Here, the parameter is a dynamic 1D array
void assign(int* arr, int m, int n) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			arr[i * n + j] = i + j;
		}
	}
}

// Program to pass the 2D array to a function in C
int main(void) {
	int m = 5;
	int n = 5;

	int *arr = (int *)malloc(m * n * sizeof(*arr));

	assign(arr, m, n);

	// print 2D array
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			printf("%3d", arr[i * n + j]);
		}
		printf("\n");
	}

	// deallocate memory
	free(arr);

	return 0;
}

   Output:
   0 1 2 3 4
   1 2 3 4 5
   2 3 4 5 6
   3 4 5 6 7
   4 5 6 7 8

4. Using Double Pointer
   If the function parameter is a pointer to a pointer, we can do something like:

#include <stdio.h>
#include <stdlib.h>

// Here, the parameter is a pointer to a pointer
void assign(int **arr, int m, int n) {
	// assign values to the allocated memory
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			*(*(arr + i) + j) = i + j;
		}
	}
}

// Program to pass the 2D array to a function in C
int main(void) {
	int m = 5;
	int n = 5;

	// dynamically create an array of pointers of size 'm'
	int **arr = (int **)malloc(m * sizeof(int *));

	// dynamically allocate memory of size 'm x n' and let *arr point to it
	*arr = (int *)malloc(sizeof(int) * m * n);

	// position allocated memory across 'm' pointers
	for (int i = 0; i < m; i++) {
		arr[i] = (*arr + n*i);
	}

	assign(arr, m, n);

	// print the 2D array
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			printf("%d ", *(*(arr + i) + j));
		}
		printf("\n");
	}

	// deallocate memory
	free(*arr);
	free(arr);

	return 0;
}

   Output:
   0 1 2 3 4
   1 2 3 4 5
   2 3 4 5 6
   3 4 5 6 7
   4 5 6 7 8

   That's all about passing a 2D array to a function as a parameter in C.



---

