filename: c_howto_structure-multi-file-program-multif_20211109.txt
https://opensource.com/article/19/7/structure-multi-file-c-part-1

How to structure a multi-file C program: Part 1 | Opensource.com

How to structure a multi-file C program: Part 1

Grab your favorite beverage, editor, and compiler, crank up some tunes, and start structuring a C program
composed of multiple files.

   29 Jul 2019 [190]Erik O'Shaughnessy [191]Feed
   167
   [192]up
   [193]2 comments
   Programming keyboard.
   Image by :
   Opensource.com
   x

Subscribe now

   Get the highlights in your inbox every week.

   IFRAME: [194]/eloqua-embedded-email-capture-block.html?offer_id=70160000000QzXNAA0

   It has often been said that the art of computer programming is part managing complexity and part
   naming things. I contend that this is largely true with the addition of "and sometimes it requires
   drawing boxes."

   In this article, I'll name some things and manage some complexity while writing a small C program
   that is loosely based on the program structure I discussed in "[195]How to write a good C main
   function"-but different. This one will do something. Grab your favorite beverage, editor, and
   compiler, crank up some tunes, and let's write a mildly interesting C program together.

Philosophy of a good Unix program

   The first thing to know about this C program is that it's a [196]Unix command-line tool. This means
   that it runs on (or can be ported to) operating systems that provide a Unix C runtime environment.
   When Unix was invented at Bell Labs, it was imbued from the beginning with a [197]design philosophy.
   In my own words: programs do one thing, do it well, and act on files. While it makes sense to do one
   thing and do it well, the part about "acting on files" seems a little out of place.

   It turns out that the Unix abstraction of a "file" is very powerful. A Unix file is a stream of bytes
   that ends with an end-of-file (EOF) marker. That's it. Any other structure in a file is imposed by
   the application and not the operating system. The operating system provides system calls that allow a
   program to perform a set of standard operations on files: open, read, write, seek, and close (there
   are others, but those are the biggies). Standardizing access to files allows different programs to
   share a common abstraction and work together even when different people implement them in different
   programming languages.

   Having a shared file interface makes it possible to build programs that are composable. The output of
   one program can be the input of another program. The Unix family of operating systems provides three
   files by default whenever a program is executed: standard in (stdin), standard out (stdout), and
   standard error (stderr). Two of these files are opened in write-only mode: stdout and stderr, while
   stdin is opened read-only. We see this in action whenever we use file redirection in a command shell
   like Bash:
$ ls | grep foo | sed -e 's/bar/baz/g' > ack

   This construction can be described briefly as: the output of ls is written to stdout, which is
   redirected to the stdin of grep, whose stdout is redirected to sed, whose stdout is redirected to
   write to a file called ack in the current directory.

   We want our program to play well in this ecosystem of equally flexible and awesome programs, so let's
   write a program that reads and writes files.

MeowMeow: A stream encoder/decoder concept

   When I was a dewy-eyed kid studying computer science in the <mumbles>s, there were a plethora of
   encoding schemes. Some of them were for compressing files, some were for packaging files together,
   and others had no purpose but to be excruciatingly silly. An example of the last is the [198]MooMoo
   encoding scheme.

   To give our program a purpose, I'll update this concept for the [199]2000s and implement a concept
   called MeowMeow encoding (since the internet loves cats). The basic idea here is to take files and
   encode each nibble (half of a byte) with the text "meow." A lower-case letter indicates a zero, and
   an upper-case indicates a one. Yes, it will balloon the size of a file since we are trading 4 bits
   for 32 bits. Yes, it's pointless. But imagine the surprise on someone's face when this happens:

   $ cat /home/your_sibling/.super_secret_journal_of_my_innermost_thoughts
   MeOWmeOWmeowMEoW...

   This is going to be awesome.

Implementation, finally

   The full source for this can be found on [200]GitHub, but I'll talk through my thought process while
   writing it. The object is to illustrate how to structure a C program composed of multiple files.

   Having already established that I want to write a program that encodes and decodes files in MeowMeow
   format, I fired up a shell and issued the following commands:

   $ mkdir meowmeow
   $ cd meowmeow
   $ git init
   $ touch Makefile     # recipes for compiling the program
   $ touch main.c       # handles command-line options
   $ touch main.h       # "global" constants and definitions
   $ touch mmencode.c   # implements encoding a MeowMeow file
   $ touch mmencode.h   # describes the encoding API
   $ touch mmdecode.c   # implements decoding a MeowMeow file
   $ touch mmdecode.h   # describes the decoding API
   $ touch table.h      # defines encoding lookup table values
   $ touch .gitignore   # names in this file are ignored by git
   $ git add .
   $ git commit -m "initial commit of empty files"

   In short, I created a directory full of empty files and committed them to git.

   Even though the files are empty, you can infer the purpose of each from its name. Just in case you
   can't, I annotated each touch with a brief description.

   Usually, a program starts as a single, simple main.c file, with only two or three functions that
   solve the problem. And then the programmer rashly shows that program to a friend or her boss, and
   suddenly the number of functions in the file balloons to support all the new "features" and
   "requirements" that pop up. The first rule of "Program Club" is don't talk about "Program Club." The
   second rule is to minimize the number of functions in one file.

   To be honest, the C compiler does not care one little bit if every function in your program is in one
   file. But we don't write programs for computers or compilers; we write them for other people (who are
   sometimes us). I know that is probably a surprise, but it's true. A program embodies a set of
   algorithms that solve a problem with a computer, and it's important that people understand it when
   the parameters of the problem change in unanticipated ways. People will have to modify the program,
   and they will curse your name if you have all 2,049 functions in one file.

   So we good and true programmers break functions out, grouping similar functions into separate files.
   Here I've got files main.c, mmencode.c, and mmdecode.c. For small programs like this, it may seem
   like overkill. But small programs rarely stay small, so planning for expansion is a "Good Idea."

   But what about those .h files? I'll explain them in general terms later, but in brief, those are
   called header files, and they can contain C language type definitions and C preprocessor directives.
   Header files should not have any functions in them. You can think of headers as a definition of the
   application programming interface (API) offered by the .c flavored file that is used by other .c
   files.

But what the heck is a Makefile?

   I know all you cool kids are using the "Ultra CodeShredder 3000" integrated development environment
   to write the next blockbuster app, and building your project consists of mashing on
   Ctrl-Meta-Shift-Alt-Super-B. But back in my day (and also today), lots of useful work got done by C
   programs built with Makefiles. A Makefile is a text file that contains recipes for working with
   files, and programmers use it to automate building their program binaries from source (and other
   stuff too!).

   Take, for instance, this little gem:

   00 # Makefile
   01 TARGET= my_sweet_program
   02 $(TARGET): main.c
   03    cc -o my_sweet_program main.c

   Text after an octothorpe/pound/hash is a comment, like in line 00.

   Line 01 is a variable assignment where the variable TARGET takes on the string value
   my_sweet_program. By convention, OK, my preference, all Makefile variables are capitalized and use
   underscores to separate words.

   Line 02 consists of the name of the file that the recipe creates and the files it depends on. In this
   case, the target is my_sweet_program, and the dependency is main.c.

   The final line, 03, is indented with a tab and not four spaces. This is the command that will be
   executed to create the target. In this case, we call cc the C compiler frontend to compile and
   link my_sweet_program.

   Using a Makefile is simple:

   $ make
   cc -o my_sweet_program main.c
   $ ls
   Makefile  main.c  my_sweet_program

   The [201]Makefile that will build our MeowMeow encoder/decoder is considerably more sophisticated
   than this example, but the basic structure is the same. I'll break it down Barney-style in another
   article.

Form follows function

   My idea here is to write a program that reads a file, transforms it, and writes the transformed data
   to another file. The following fabricated command-line interaction is how I imagine using the
   program:

           $ meow < clear.txt > clear.meow
           $ unmeow < clear.meow > meow.tx
           $ diff clear.txt meow.tx
           $

   We need to write code to handle command-line parsing and managing the input and output streams. We
   need a function to encode a stream and write it to another stream. And finally, we need a function to
   decode a stream and write it to another stream. Wait a second, I've only been talking about writing
   one program, but in the example above, I invoke two commands: meow and unmeow? I know you are
   probably thinking that this is getting complex as heck.

Minor sidetrack: argv[0] and the ln command

   If you recall, the signature of a C main function is:
int main(int argc, char *argv[])

   where argc is the number of command-line arguments, and argv is a list of character pointers
   (strings). The value of argv[0] is the path of the file containing the program being executed. Many
   Unix utility programs with complementary functions (e.g., compress and uncompress) look like two
   programs, but in fact, they are one program with two names in the filesystem. The two-name trick is
   accomplished by creating a filesystem "link" using the ln command.

   An example from /usr/bin on my laptop is:

      $ ls -li /usr/bin/git*
   3376 -rwxr-xr-x. 113 root root     1.5M Aug 30  2018 /usr/bin/git
   3376 -rwxr-xr-x. 113 root root     1.5M Aug 30  2018 /usr/bin/git-receive-pack
   ...

   Here git and git-receive-pack are the same file with different names. We can tell it's the same file
   because they have the same inode number (the first column). An inode is a feature of the Unix
   filesystem and is super outside the scope of this article.

   Good and/or lazy programmers can use this feature of the Unix filesystem to write less code but
   double the number of programs they deliver. First, we write a program that changes its behavior based
   on the value of argv[0], then we make sure to create links with the names that cause the behavior.

   In our Makefile, the unmeow link is created using this recipe:

    # Makefile
    ...
    $(DECODER): $(ENCODER)
            $(LN) -f $< $@
           ...

   I tend to parameterize everything in my Makefiles, rarely using a "bare" string. I group all the
   definitions at the top of the Makefile, which makes it easy to find and change them. This makes a big
   difference when you are trying to port software to a new platform and you need to change all your
   rules to use xcc instead of cc.

   The recipe should appear relatively straightforward except for the two built-in variables $@ and $<.
   The first is a shortcut for the target of the recipe; in this case, $(DECODER). (I remember this
   because the at-sign looks like a target to me.) The second, $< is the rule dependency; in this case,
   it resolves to $(ENCODER).

   Things are getting complex for sure, but it's managed.

   [202]Hand drawing out the word "code"

   [203]How to write a good C main function
   Learn how to structure a C file and write a C main function that handles command line arguments like
   a champ.
   [204]Erik O'Shaughnessy
   [205]Code going into a computer.

   [206]What is open source programming?
   Open source is more than just chucking some code up on GitHub. Learn what it is-and what it's not.
   [207]Jim Salter

Topics

   [208]Programming

About the author

   [209]XENON coated avatar will glow red in the presence of aliens.
   Erik O'Shaughnessy - Erik O'Shaughnessy is an opinionated but friendly UNIX system programmer living
   the good life in Texas. Over the last twenty years (or more!) he has worked for IBM, Sun
   Microsystems, Oracle, and most recently Intel doing computer system performance related work. He is;
   a mechanical keyboard aficionado, a gamer, a father, a husband, voracious reader, student of
   Okinawian karate, and seriously grouchy in the morning before coffee.
   [210]More about me

Recommended reading

   [211]Woman sitting in front of her laptop
   10 eureka moments of coding in the community
   [212]Digital creative of a browser on the internet
   How I dynamically generate Jekyll config files
   [213]Typewriter keys in multicolor
   Why Mark Text is my favorite markdown editor
   [214]Bug tracking magnifying glass on computer screen
   5 common bugs in C programming and how to fix them
   [215]Women programming
   It's Ada Lovelace Day! Learn the Ada programming language in 2021
   [216]Person using a laptop
   Make YAML as easy as it looks

2 Comments, [217]Register or [218]Log in to post a comment.

   cldxsolutions
   [219]Diagnostic Solutions on 29 Jul 2019 [220]Permalink

   Nice article
   Châu
   Châu on 29 Jul 2019 [221]Permalink

   Very good article and I wait for next parts. If you have time please write article about your
   adventures/work in Sun Microsystems.
   [222]Creative Commons License

Subscribe to our weekly newsletter

   IFRAME: [223]/eloqua-embedded-subscribe.html?offer_id=70160000000QzXNAA0

   Get the highlights in your inbox every week.

   Find us:
     * [224]Twitter
     * [225]Facebook
     * [226]Youtube
     * [227]Mastodon
     * [228]RSS

Footer

     * [229]Privacy Policy
     * [230]Terms of Use
     * [231]Contact
     * [232]Meet the Team
     * [233]Visit opensource.org

   For more discussion on open source and the role of the CIO in the enterprise, join us at [234]The
   EnterprisersProject.com.

   The opinions expressed on this website are those of each author, not of the author's employer or of
   Red Hat.

   Opensource.com aspires to publish all content under a [235]Creative Commons license but may not be
   able to do so in all cases. You are responsible for ensuring that you have the necessary permission
   to reuse any work on this site. Red Hat and the Red Hat logo are trademarks of Red Hat, Inc.,
   registered in the United States and other countries.

   Copyright ©2021 Red Hat, Inc.

   [footer_logo.svg]

References

   1. https://opensource.com/rss.xml
   2. https://opensource.com/article/19/7/structure-multi-file-c-part-1#main-menu
   3. https://opensource.com/
   4. https://www.redhat.com/en?intcmp=701600000011l7VAAQ
   5. https://opensource.com/user/login
   6. https://opensource.com/user/register
   7. https://opensource.com/
   8. https://opensource.com/tags/linux
   9. https://opensource.com/tags/command-line
  10. https://opensource.com/tags/kubernetes
  11. https://opensource.com/tags/programming
  12. https://opensource.com/tags/go
  13. https://opensource.com/tags/javascript
  14. https://opensource.com/tags/python
  15. https://opensource.com/tags/containers
  16. https://opensource.com/tags/sysadmin
  17. https://opensource.com/tags/devops
  18. https://opensource.com/tags/gaming
  19. https://opensource.com/tags/hardware
  20. https://opensource.com/tags/3d-printing
  21. https://opensource.com/tags/arduino
  22. https://opensource.com/tags/raspberry-pi
  23. https://opensource.com/tags/government
  24. https://opensource.com/tags/law
  25. https://opensource.com/tags/licensing
  26. https://opensource.com/tags/patents
  27. https://opensource.com/open-organization
  28. https://opensource.com/open-organization/resources/open-org-definition
  29. https://opensource.com/open-organization/resources/open-decision-framework
  30. https://opensource.com/resources
  31. https://opensource.com/resources/what-open-source
  32. https://opensource.com/open-source-way
  33. https://opensource.com/resources/projects-and-applications
  34. https://opensource.com/resources/organizations
  35. https://opensource.com/resources/cloud
  36. https://opensource.com/resources/what-ansible
  37. https://opensource.com/resources/big-data
  38. https://opensource.com/resources/data-science
  39. https://opensource.com/resources/what-docker
  40. https://opensource.com/resources/what-is-git
  41. https://opensource.com/resources/internet-of-things
  42. https://opensource.com/resources/java
  43. https://opensource.com/resources/what-is-kubernetes
  44. https://opensource.com/resources/what-are-linux-containers
  45. https://opensource.com/resources/what-are-microservices
  46. https://opensource.com/resources/what-is-openstack
  47. https://opensource.com/resources/python
  48. https://opensource.com/resources/python/gui-frameworks
  49. https://opensource.com/resources/python/ides
  50. https://opensource.com/resources/python/template-libraries
  51. https://opensource.com/resources/python/web-scraper-crawler
  52. https://opensource.com/resources/what-is-software-defined-networking
  53. https://opensource.com/resources/virtualization
  54. https://opensource.com/alternatives
  55. https://opensource.com/alternatives/adobe-acrobat
  56. https://opensource.com/alternatives/autocad
  57. https://opensource.com/alternatives/dreamweaver
  58. https://opensource.com/alternatives/gmail
  59. https://opensource.com/alternatives/matlab
  60. https://opensource.com/alternatives/minecraft
  61. https://opensource.com/alternatives/google-photos
  62. https://opensource.com/life/12/6/design-without-debt-five-tools-for-designers
  63. https://opensource.com/alternatives/microsoft-publisher
  64. https://opensource.com/alternatives/skype
  65. https://opensource.com/alternatives/slack
  66. https://opensource.com/alternatives/trello
  67. https://opensource.com/alternatives
  68. https://opensource.com/resources/linux
  69. https://opensource.com/downloads/cheat-sheets
  70. https://opensource.com/downloads/cheat-sheets
  71. https://opensource.com/downloads/ansible-cheat-sheet
  72. https://opensource.com/downloads/ansible-k8s-cheat-sheet
  73. https://opensource.com/downloads/cheat-sheet-awk-features
  74. https://opensource.com/downloads/bash-cheat-sheet
  75. https://opensource.com/downloads/blender-hotkey-cheat-sheet
  76. https://opensource.com/downloads/c-programming-cheat-sheet
  77. https://opensource.com/downloads/curl-command-cheat-sheet
  78. https://opensource.com/downloads/emacs-cheat-sheet
  79. https://opensource.com/downloads/firewall-cheat-sheet
  80. https://opensource.com/downloads/freedos-commands-cheat-sheet
  81. https://opensource.com/content/cheat-sheet-gimp
  82. https://opensource.com/downloads/cheat-sheet-gnome-3
  83. https://opensource.com/downloads/groff-macros-cheat-sheet
  84. https://opensource.com/downloads/go-cheat-sheet
  85. https://opensource.com/downloads/cheat-sheet-i3-window-manager-keybinding
  86. https://opensource.com/downloads/inkscape-cheat-sheet
  87. https://opensource.com/irc-cheat-sheet
  88. https://opensource.com/downloads/java-cheat-sheet
  89. https://opensource.com/downloads/javascript-cheat-sheet
  90. https://opensource.com/downloads/kubectl-cheat-sheet
  91. https://opensource.com/downloads/kubernetes-cheat-sheet
  92. https://opensource.com/downloads/linux-common-commands-cheat-sheet
  93. https://opensource.com/downloads/linux-permissions-cheat-sheet
  94. https://opensource.com/downloads/microservices-cheat-sheet
  95. https://opensource.com/downloads/cheat-sheet-networking
  96. https://opensource.com/downloads/pandoc-cheat-sheet
  97. https://opensource.com/downloads/pip-cheat-sheet
  98. https://opensource.com/downloads/cheat-sheet-python-37-beginners
  99. https://opensource.com/downloads/getting-started-raspberry-pi-cheat-sheet
 100. https://opensource.com/downloads/cheat-sheet-selinux
 101. https://opensource.com/downloads/advanced-ssh-cheat-sheet
 102. https://opensource.com/downloads/cheat-sheets
 103. https://opensource.com/downloads/7-essential-pypi-libraries
 104. https://opensource.com/downloads/python-3-ebook
 105. https://opensource.com/downloads/jupyter-guide
 106. https://opensource.com/downloads/python-gaming-ebook
 107. https://opensource.com/downloads/bash-programming-guide
 108. https://opensource.com/downloads/cheat-sheets
 109. https://opensource.com/downloads/devops-transformation
 110. https://opensource.com/downloads/small-scale-scrum
 111. https://opensource.com/downloads/devsecops
 112. https://opensource.com/downloads/devops-monitoring-guide
 113. https://opensource.com/downloads/devops-hiring-guide
 114. https://opensource.com/downloads/cheat-sheets
 115. https://opensource.com/downloads/ansible-quickstart
 116. https://opensource.com/downloads/containers-primer
 117. https://opensource.com/downloads/kubernetes-sysadmin
 118. https://opensource.com/downloads/cheat-sheets
 119. https://opensource.com/downloads/getting-started-kubernetes-ebook
 120. https://opensource.com/downloads/guide-inter-process-communication-linux
 121. https://opensource.com/downloads/collaboration-tools-ebook
 122. https://opensource.com/downloads/organization-tools
 123. https://opensource.com/downloads/desktop-tools
 124. https://opensource.com/downloads/java-serverless-ebook
 125. https://opensource.com/downloads/home-automation-ebook
 126. https://opensource.com/downloads/chaos-engineering-kubernetes
 127. https://opensource.com/downloads/kubernetes-sysadmin
 128. https://opensource.com/downloads/raspberry-pi-guide
 129. https://opensource.com/downloads/kubernetes-raspberry-pi
 130. https://opensource.com/yearbook/2017
 131. https://opensource.com/yearbook/2015
 132. https://opensource.com/yearbook/2016
 133. https://opensource.com/yearbook/2017
 134. https://opensource.com/yearbook/2018
 135. https://opensource.com/downloads/2019-yearbook-special-edition
 136. https://opensource.com/open-organization/resources/book-series
 137. https://opensource.com/open-organization/resources/field-guide
 138. https://opensource.com/open-organization/resources/leaders-manual
 139. https://opensource.com/open-organization/resources/culture-change
 140. https://opensource.com/open-organization/resources/educators-guide
 141. https://opensource.com/open-organization/resources/workbook
 142. https://opensource.com/open-organization/resources/organize-innovation
 143. https://opensource.com/about
 144. https://opensource.com/about
 145. https://opensource.com/participate
 146. https://opensource.com/opensourcecom-team
 147. https://opensource.com/user/register
 148. https://opensource.com/rules-comments-and-discussions
 149. https://opensource.com/correspondent-program
 150. https://opensource.com/faq
 151. https://opensource.com/how-submit-article
 152. https://opensource.com/submission-style-guide
 153. https://opensource.com/article/20/1/write-for-us
 154. https://opensource.com/contact
 155. https://opensource.com/user/login
 156. https://opensource.com/user/register
 157. http://twitter.com/opensourceway
 158. https://www.facebook.com/opensourceway
 159. https://opensource.com/feed
 160. https://opensource.com/
 161. https://opensource.com/tags/linux
 162. https://opensource.com/tags/command-line
 163. https://opensource.com/tags/kubernetes
 164. https://opensource.com/tags/programming
 165. https://opensource.com/tags/go
 166. https://opensource.com/tags/javascript
 167. https://opensource.com/tags/python
 168. https://opensource.com/tags/containers
 169. https://opensource.com/tags/sysadmin
 170. https://opensource.com/tags/devops
 171. https://opensource.com/tags/gaming
 172. https://opensource.com/tags/hardware
 173. https://opensource.com/tags/3d-printing
 174. https://opensource.com/tags/arduino
 175. https://opensource.com/tags/raspberry-pi
 176. https://opensource.com/tags/government
 177. https://opensource.com/tags/law
 178. https://opensource.com/open-organization
 179. https://opensource.com/open-organization/resources/open-org-definition
 180. https://opensource.com/open-organization/resources/open-decision-framework
 181. https://opensource.com/resources
 182. https://opensource.com/resources/what-open-source
 183. https://opensource.com/resources/projects-and-applications
 184. https://opensource.com/resources/organizations
 185. https://opensource.com/resources/cloud
 186. https://opensource.com/alternatives
 187. https://opensource.com/resources/linux
 188. https://opensource.com/downloads/cheat-sheets
 189. https://opensource.com/about
 190. https://opensource.com/users/jnyjny
 191. https://opensource.com/user/286636/feed
 192. https://opensource.com/article/19/7/structure-multi-file-c-part-1?rate=2wHsIOolQ4pjiMzF7Jvejhf3-XNdUyE-6RYYGG7B17s
 193. https://opensource.com/article/19/7/structure-multi-file-c-part-1#comments
 194. https://opensource.com/eloqua-embedded-email-capture-block.html?offer_id=70160000000QzXNAA0
 195. https://opensource.com/article/19/5/how-write-good-c-main-function
 196. https://en.wikipedia.org/wiki/Unix
 197. http://harmful.cat-v.org/cat-v/
 198. http://www.jabberwocky.com/software/moomooencode.html
 199. https://giphy.com/gifs/nyan-cat-sIIhZliB2McAo
 200. https://github.com/JnyJny/meowmeow
 201. https://github.com/JnyJny/meowmeow/blob/master/Makefile
 202. https://opensource.com/article/19/5/how-write-good-c-main-function
 203. https://opensource.com/article/19/5/how-write-good-c-main-function
 204. https://opensource.com/users/jnyjny
 205. https://opensource.com/article/18/3/what-open-source-programming
 206. https://opensource.com/article/18/3/what-open-source-programming
 207. https://opensource.com/users/jim-salter
 208. https://opensource.com/tags/programming
 209. https://opensource.com/users/jnyjny
 210. https://opensource.com/users/jnyjny
 211. https://opensource.com/article/21/11/community-code-stories
 212. https://opensource.com/article/21/11/jekyll-config-files
 213. https://opensource.com/article/21/10/mark-text-markdown-editor
 214. https://opensource.com/article/21/10/programming-bugs
 215. https://opensource.com/article/21/10/learn-ada-2021
 216. https://opensource.com/article/21/9/yaml-cheat-sheet
 217. https://opensource.com/user/register
 218. https://opensource.com/user/login
 219. https://opensource.com/users/cldxsolutions
 220. https://opensource.com/comment/181336#comment-181336
 221. https://opensource.com/comment/181376#comment-181376
 222. http://creativecommons.org/licenses/by-sa/4.0/
 223. https://opensource.com/eloqua-embedded-subscribe.html?offer_id=70160000000QzXNAA0
 224. https://twitter.com/OpenSourceWay
 225. https://www.facebook.com/opensourceway
 226. http://www.youtube.com/opensourceway
 227. https://fosstodon.org/@osdc
 228. https://opensource.com/feed
 229. https://opensource.com/privacy-policy
 230. https://opensource.com/legal
 231. https://opensource.com/contact
 232. https://opensource.com/opensourcecom-team
 233. http://opensource.org/
 234. https://enterprisersproject.com/
 235. http://creativecommons.org/licenses/



---
https://opensource.com/article/19/7/structure-multi-file-c-part-2

   #[1]Opensource.com RSS

   [2]Jump to navigation

   [3]Opensource.com [4]RedHat
     * [5]Log in
     * [6]Sign Up

Search form

   Search _______________
   GO

Main menu

     * [7]Articles
          + [8]Linux
               o [9]Command line
          + [10]Kubernetes
          + [11]Programming
               o [12]Go
               o [13]JavaScript
               o [14]Python
          + [15]Containers
          + [16]Sysadmin
          + [17]DevOps
          + [18]Gaming
          + [19]Hardware
               o [20]3D printing
               o [21]Arduino
               o [22]Raspberry Pi
          + [23]Government
          + [24]Law
               o [25]Licensing
               o [26]Patents
          + [27]Open Organization
               o [28]What is an open organization?
               o [29]What is an open decision?
     * [30]Resources
          + [31]What is open source?
               o [32]The open source way
          + [33]Projects and applications
          + [34]Organizations
          + [35]Cloud technology
               o [36]Ansible
               o [37]Big data
               o [38]Data science
               o [39]Docker
               o [40]Git
               o [41]Internet of things
               o [42]Java
               o [43]Kubernetes
               o [44]Linux containers
               o [45]Microservices
               o [46]OpenStack
               o [47]Python
                    # [48]Python GUI frameworks
                    # [49]Python IDEs
                    # [50]Python template libraries
                    # [51]Python web scrapers
               o [52]Software defined networking
               o [53]Virtualization
          + [54]Open source alternatives
               o [55]Alternatives to Acrobat
               o [56]Alternatives to AutoCAD
               o [57]Alternatives to Dreamweaver
               o [58]Alternatives to Gmail
               o [59]Alternatives to MATLAB
               o [60]Alternatives to Minecraft
               o [61]Alternatives to Google Photos
               o [62]Alternatives to Photoshop
               o [63]Alternatives to Publisher
               o [64]Alternatives to Skype
               o [65]Alternatives to Slack
               o [66]Alternatives to Trello
               o [67]More...
          + [68]Linux
     * [69]Downloads
          + [70]Cheat sheets
               o [71]Ansible cheat sheet
               o [72]Ansible k8s cheat sheet
               o [73]AWK cheat sheet
               o [74]Bash cheat sheet
               o [75]Blender cheat sheet
               o [76]C cheat sheet
               o [77]Curl cheat sheet
               o [78]Emacs cheat sheet
               o [79]Firewall Cheat Sheet
               o [80]FreeDOS cheat sheet
               o [81]GIMP cheat sheet
               o [82]GNOME cheat sheet
               o [83]Groff macros cheat sheet
               o [84]Go cheat sheet
               o [85]i3 window manager cheat sheet
               o [86]Inkscape Cheat Sheet
               o [87]IRC cheat sheet
               o [88]Java cheat sheet
               o [89]JavaScript cheat sheet
               o [90]Kubectl cheat sheet
               o [91]Kubernetes cheat sheet
               o [92]Linux common commands cheat sheet
               o [93]Linux user permissions cheat sheet
               o [94]Microservices cheat sheet
               o [95]Networking cheat sheet
               o [96]Pandoc cheat sheet
               o [97]pip cheat sheet
               o [98]Python 3.7 cheat sheet
               o [99]Raspberry Pi cheat sheet
               o [100]SELinux cheat sheet
               o [101]SSH cheat sheet
          + [102]Programming guides
               o [103]7 essential PyPI libraries
               o [104]30 hidden gems in Python 3
               o [105]6 surprising ways to use Jupyter
               o [106]A guide to building a video game with Python
               o [107]An introduction to programming with Bash
          + [108]DevOps guides
               o [109]Starting a DevOps transformation
               o [110]Introduction to Small Scale Scrum
               o [111]Getting started with DevSecOps
               o [112]DevOps monitoring tools guide
               o [113]DevOps hiring guide
          + [114]Sysadmin guides
               o [115]Ansible Automation for Sysadmins
               o [116]Containers primer
               o [117]Kubernetes for SREs and sysadmins
          + [118]eBooks
               o [119]Getting started with Kubernetes
               o [120]Inter-process communication in Linux
               o [121]5 open source collaboration tools
               o [122]6 open source tools for staying organized
               o [123]7 open source desktop tools
               o [124]A guide to Java serverless functions
               o [125]A practical guide to home automation using open source tools
               o [126]Chaos engineering for Kubernetes
               o [127]Kubernetes for SREs and sysadmins
               o [128]Raspberry Pi: How to get started
               o [129]Running Kubernetes on your Raspberry Pi
          + [130]Open Source Yearbook
               o [131]2015
               o [132]2016
               o [133]2017
               o [134]2018
               o [135]2019 Special Edition
          + [136]Open Organization series
               o [137]Field Guide
               o [138]Leaders Manual
               o [139]Guide to IT Culture Change
               o [140]Guide for Educators
               o [141]Workbook
               o [142]Organize for Innovation
     * [143]Community
          + [144]About Opensource.com
               o [145]Welcome to the Opensource.com community
               o [146]Meet the team
               o [147]Create an account
               o [148]Rules for comments and discussions
               o [149]Correspondent Program
               o [150]Frequently Asked Questions
          + [151]Contribute to Opensource.com
               o [152]Opensource.com style guide
               o [153]Writing topics
          + [154]Contact us

     * [155]Log in
     * [156]Sign Up

     * [157]Twitter
     * [158]Facebook
     * [159]Feed

Main menu

     * [160]Articles
          + [161]Linux
               o [162]Command line
          + [163]Kubernetes
          + [164]Programming
               o [165]Go
               o [166]JavaScript
               o [167]Python
          + [168]Containers
          + [169]Sysadmin
          + [170]DevOps
          + [171]Gaming
          + [172]Hardware
               o [173]3D printing
               o [174]Arduino
               o [175]Raspberry Pi
          + [176]Government
          + [177]Law
          + [178]Open Organization
               o [179]What is an open organization?
               o [180]What is an open decision?
     * [181]Resources
          + [182]What is open source?
          + [183]Projects and applications
          + [184]Organizations
          + [185]Cloud technology
          + [186]Open source alternatives
          + [187]Linux
     * [188]Downloads
     * [189]Community

How to structure a multi-file C program: Part 2 | Opensource.com

How to structure a multi-file C program: Part 2

Dive deeper into the structure of a C program composed of multiple files in the second part of this
article.

   31 Jul 2019 [190]Erik O'Shaughnessy [191]Feed
   144
   [192]up
   4 manilla folders, yellow, green, purple, blue
   Image credits :
   Open Clip Art Library (public domain). Modified by Jen Wike Huger.
   x

Subscribe now

   Get the highlights in your inbox every week.

   IFRAME: [193]/eloqua-embedded-email-capture-block.html?offer_id=70160000000QzXNAA0

   In [194]Part 1, I laid out the structure for a multi-file C program called [195]MeowMeow that
   implements a toy [196]codec. I also talked about the Unix philosophy of program design, laying out a
   number of empty files to start with a good structure from the very beginning. Lastly, I touched on
   what a Makefile is and what it can do for you. This article picks up where the other one left off and
   now I'll get to the actual implementation of our silly (but instructional) MeowMeow codec.

   The structure of the main.c file for meow/unmeow should be familiar to anyone who's read my article
   "[197]How to write a good C main function." It has the following general outline:

   /* main.c - MeowMeow, a stream encoder/decoder */
   /* 00 system includes */
   /* 01 project includes */
   /* 02 externs */
   /* 03 defines */
   /* 04 typedefs */
   /* 05 globals (but don't)*/
   /* 06 ancillary function prototypes if any */

   int main(int argc, char *argv[])
   {
     /* 07 variable declarations */
     /* 08 check argv[0] to see how the program was invoked */
     /* 09 process the command line options from the user */
     /* 10 do the needful */
   }

   /* 11 ancillary functions if any */

Including project header files

   The second section, /* 01 project includes /*, reads like this from the source:

   /* main.c - MeowMeow, a stream encoder/decoder */
   ...
   /* 01 project includes */
   #include "main.h"
   #include "mmecode.h"
   #include "mmdecode.h"

   The #include directive is a C preprocessor command that causes the contents of the named file to be
   "included" at this point in the file. If the programmer uses double-quotes around the name of the
   header file, the compiler will look for that file in the current directory. If the file is enclosed
   in <>, it will look for the file in a set of predefined directories.

   The file [198]main.h contains the definitions and typedefs used in [199]main.c. I like to collect
   these things here in case I want to use those definitions elsewhere in my program.

   The files [200]mmencode.h and [201]mmdecode.h are nearly identical, so I'll break down mmencode.h.

    /* mmencode.h - MeowMeow, a stream encoder/decoder */

    #ifndef _MMENCODE_H
    #define _MMENCODE_H

    #include <stdio.h>

    int mm_encode(FILE *src, FILE *dst);

    #endif /* _MMENCODE_H */

   The #ifdef, #define, #endif construction is collectively known as a "guard." This keeps the C
   compiler from including this file more than once per file. The compiler will complain if it finds
   multiple definitions/prototypes/declarations, so the guard is a must-have for header files.

   Inside the guard, there are only two things: an #include directive and a function prototype
   declaration. I include stdio.h here to bring in the definition of FILE that is used in the function
   prototype. The function prototype can be included by other C files to establish that function in the
   file's namespace. You can think of each file as a separate namespace, which means variables and
   functions in one file are not usable by functions or variables in another file.

   Writing header files is complex, and it is tough to manage in larger projects. Use guards.

MeowMeow encoding, finally

   The meat and potatoes of this program-encoding and decoding bytes into/out of MeowMeow strings-is
   actually the easy part of this project. All of our activities until now have been putting the
   scaffolding in place to support calling this function: parsing the command line, determining which
   operation to use, and opening the files that we'll operate on. Here is the encoding loop:

    /* mmencode.c - MeowMeow, a stream encoder/decoder */
    ...
        while (![202]feof(src)) {

          if (![203]fgets(buf, sizeof(buf), src))
            break;

          for(i=0; i<[204]strlen(buf); i++) {
            lo = (buf[i] & 0x000f);
            hi = (buf[i] & 0x00f0) >> 4;
            [205]fputs(tbl[hi], dst);
            [206]fputs(tbl[lo], dst);
          }
               }

   In plain English, this loop reads in a chunk of the file while there are chunks left to read (feof(3)
   and fgets(3)). Then it splits each byte in the chunk into hi and lo nibbles. Remember, a nibble is
   half of a byte, or 4 bits. The real magic here is realizing that 4 bits can encode 16 values. I use
   hi and lo as indices into a 16-string lookup table, tbl, that contains the MeowMeow strings that
   encode each nibble. Those strings are written to the destination FILE stream using fputs(3), then we
   move on to the next byte in the buffer.

   The table is initialized with a macro defined in [207]table.h for no particular reason except to
   demonstrate including another project local header file, and I like initialization macros. We will go
   further into why a future article.

MeowMeow decoding

   Alright, I'll admit it took me a couple of runs at this before I got it working. The decode loop is
   similar: read a buffer full of MeowMeow strings and reverse the encoding from strings to bytes.

    /* mmdecode.c - MeowMeow, a stream decoder/decoder */
    ...
    int mm_decode(FILE *src, FILE *dst)
    {
      if (!src || !dst) {
        errno = EINVAL;
        return -1;
      }
      return stupid_decode(src, dst);
    }

   Not what you were expecting?

   Here, I'm exposing the function stupid_decode() via the externally visible mm_decode() function. When
   I say "externally," I mean outside this file. Since stupid_decode() isn't in the header file, it
   isn't available to be called in other files.

   Sometimes we do this when we want to publish a solid public interface, but we aren't quite done
   noodling around with functions to solve a problem. In my case, I've written an I/O-intensive function
   that reads 8 bytes at a time from the source stream to decode 1 byte to write to the destination
   stream. A better implementation would work on a buffer bigger than 8 bytes at a time. A much better
   implementation would also buffer the output bytes to reduce the number of single-byte writes to the
   destination stream.

    /* mmdecode.c - MeowMeow, a stream decoder/decoder */
    ...
    int stupid_decode(FILE *src, FILE *dst)
    {
      char           buf[9];
      decoded_byte_t byte;
      int            i;

      while (![208]feof(src)) {
        if (![209]fgets(buf, sizeof(buf), src))
          break;
        byte.field.f0 = [210]isupper(buf[0]);
        byte.field.f1 = [211]isupper(buf[1]);
        byte.field.f2 = [212]isupper(buf[2]);
        byte.field.f3 = [213]isupper(buf[3]);
        byte.field.f4 = [214]isupper(buf[4]);
        byte.field.f5 = [215]isupper(buf[5]);
        byte.field.f6 = [216]isupper(buf[6]);
        byte.field.f7 = [217]isupper(buf[7]);

        [218]fputc(byte.value, dst);
      }
      return 0;
    }

   Instead of using the bit-shifting technique I used in the encoder, I elected to create a custom data
   structure called decoded_byte_t.

    /* mmdecode.c - MeowMeow, a stream decoder/decoder */
    ...
    typedef struct {
      unsigned char f7:1;
      unsigned char f6:1;
      unsigned char f5:1;
      unsigned char f4:1;
      unsigned char f3:1;
      unsigned char f2:1;
      unsigned char f1:1;
      unsigned char f0:1;
    } fields_t;

    typedef union {
      fields_t      field;
      unsigned char value;
    } decoded_byte_t;

   It's a little complex when viewed all at once, but hang tight. The decoded_byte_t is defined as a
   union of a fields_t and an unsigned char. The named members of a union can be thought of as aliases
   for the same region of memory. In this case, value and field refer to the same 8-bit region of
   memory. Setting field.f0 to 1 would also set the least significant bit in value.

   While unsigned char shouldn't be a mystery, the typedef for fields_t might look a little unfamiliar.
   Modern C compilers allow programmers to specify "bit fields" in a struct. The field type needs to be
   an unsigned integral type, and the member identifier is followed by a colon and an integer that
   specifies the length of the bit field.

   This data structure makes it simple to access each bit in the byte by field name and then access the
   assembled value via the value field of the union. We depend on the compiler to generate the correct
   bit-shifting instructions to access the fields, which can save you a lot of heartburn when you are
   debugging.

   Lastly, stupid_decode() is stupid because it only reads 8 bytes at a time from the source FILE
   stream. Usually, we try to minimize the number of reads and writes to improve performance and reduce
   our cost of system calls. Remember that reading or writing a bigger chunk less often is much better
   than reading/writing a lot of smaller chunks more frequently.

The wrap-up

   Writing a multi-file program in C requires a little more planning on behalf of the programmer than
   just a single main.c. But just a little effort up front can save a lot of time and headache when you
   refactor as you add functionality.

   To recap, I like to have a lot of files with a few short functions in them. I like to expose a small
   subset of the functions in those files via header files. I like to keep my constants in header files,
   both numeric and string constants. I love Makefiles and use them instead of Bash scripts to automate
   all sorts of things. I like my main() function to handle command-line argument parsing and act as a
   scaffold for the primary functionality of the program.

   I know I've only touched the surface of what's going on in this simple program, and I'm excited to
   learn what things were helpful to you and which topics need better explanations. Share your thoughts
   in the comments to let me know.

Topics

   [219]Programming

About the author

   [220]XENON coated avatar will glow red in the presence of aliens.
   Erik O'Shaughnessy - Erik O'Shaughnessy is an opinionated but friendly UNIX system programmer living
   the good life in Texas. Over the last twenty years (or more!) he has worked for IBM, Sun
   Microsystems, Oracle, and most recently Intel doing computer system performance related work. He is;
   a mechanical keyboard aficionado, a gamer, a father, a husband, voracious reader, student of
   Okinawian karate, and seriously grouchy in the morning before coffee.
   [221]More about me

Recommended reading

   [222]Woman sitting in front of her laptop
   10 eureka moments of coding in the community
   [223]Digital creative of a browser on the internet
   How I dynamically generate Jekyll config files
   [224]Typewriter keys in multicolor
   Why Mark Text is my favorite markdown editor
   [225]Bug tracking magnifying glass on computer screen
   5 common bugs in C programming and how to fix them
   [226]Women programming
   It's Ada Lovelace Day! Learn the Ada programming language in 2021
   [227]Person using a laptop
   Make YAML as easy as it looks

   [228]Creative Commons License

Subscribe to our weekly newsletter

   IFRAME: [229]/eloqua-embedded-subscribe.html?offer_id=70160000000QzXNAA0

   Get the highlights in your inbox every week.

   Find us:
     * [230]Twitter
     * [231]Facebook
     * [232]Youtube
     * [233]Mastodon
     * [234]RSS

Footer

     * [235]Privacy Policy
     * [236]Terms of Use
     * [237]Contact
     * [238]Meet the Team
     * [239]Visit opensource.org

   For more discussion on open source and the role of the CIO in the enterprise, join us at [240]The
   EnterprisersProject.com.

   The opinions expressed on this website are those of each author, not of the author's employer or of
   Red Hat.

   Opensource.com aspires to publish all content under a [241]Creative Commons license but may not be
   able to do so in all cases. You are responsible for ensuring that you have the necessary permission
   to reuse any work on this site. Red Hat and the Red Hat logo are trademarks of Red Hat, Inc.,
   registered in the United States and other countries.

   Copyright ©2021 Red Hat, Inc.

   [footer_logo.svg]

References

   1. https://opensource.com/rss.xml
   2. https://opensource.com/article/19/7/structure-multi-file-c-part-2#main-menu
   3. https://opensource.com/
   4. https://www.redhat.com/en?intcmp=701600000011l7VAAQ
   5. https://opensource.com/user/login
   6. https://opensource.com/user/register
   7. https://opensource.com/
   8. https://opensource.com/tags/linux
   9. https://opensource.com/tags/command-line
  10. https://opensource.com/tags/kubernetes
  11. https://opensource.com/tags/programming
  12. https://opensource.com/tags/go
  13. https://opensource.com/tags/javascript
  14. https://opensource.com/tags/python
  15. https://opensource.com/tags/containers
  16. https://opensource.com/tags/sysadmin
  17. https://opensource.com/tags/devops
  18. https://opensource.com/tags/gaming
  19. https://opensource.com/tags/hardware
  20. https://opensource.com/tags/3d-printing
  21. https://opensource.com/tags/arduino
  22. https://opensource.com/tags/raspberry-pi
  23. https://opensource.com/tags/government
  24. https://opensource.com/tags/law
  25. https://opensource.com/tags/licensing
  26. https://opensource.com/tags/patents
  27. https://opensource.com/open-organization
  28. https://opensource.com/open-organization/resources/open-org-definition
  29. https://opensource.com/open-organization/resources/open-decision-framework
  30. https://opensource.com/resources
  31. https://opensource.com/resources/what-open-source
  32. https://opensource.com/open-source-way
  33. https://opensource.com/resources/projects-and-applications
  34. https://opensource.com/resources/organizations
  35. https://opensource.com/resources/cloud
  36. https://opensource.com/resources/what-ansible
  37. https://opensource.com/resources/big-data
  38. https://opensource.com/resources/data-science
  39. https://opensource.com/resources/what-docker
  40. https://opensource.com/resources/what-is-git
  41. https://opensource.com/resources/internet-of-things
  42. https://opensource.com/resources/java
  43. https://opensource.com/resources/what-is-kubernetes
  44. https://opensource.com/resources/what-are-linux-containers
  45. https://opensource.com/resources/what-are-microservices
  46. https://opensource.com/resources/what-is-openstack
  47. https://opensource.com/resources/python
  48. https://opensource.com/resources/python/gui-frameworks
  49. https://opensource.com/resources/python/ides
  50. https://opensource.com/resources/python/template-libraries
  51. https://opensource.com/resources/python/web-scraper-crawler
  52. https://opensource.com/resources/what-is-software-defined-networking
  53. https://opensource.com/resources/virtualization
  54. https://opensource.com/alternatives
  55. https://opensource.com/alternatives/adobe-acrobat
  56. https://opensource.com/alternatives/autocad
  57. https://opensource.com/alternatives/dreamweaver
  58. https://opensource.com/alternatives/gmail
  59. https://opensource.com/alternatives/matlab
  60. https://opensource.com/alternatives/minecraft
  61. https://opensource.com/alternatives/google-photos
  62. https://opensource.com/life/12/6/design-without-debt-five-tools-for-designers
  63. https://opensource.com/alternatives/microsoft-publisher
  64. https://opensource.com/alternatives/skype
  65. https://opensource.com/alternatives/slack
  66. https://opensource.com/alternatives/trello
  67. https://opensource.com/alternatives
  68. https://opensource.com/resources/linux
  69. https://opensource.com/downloads/cheat-sheets
  70. https://opensource.com/downloads/cheat-sheets
  71. https://opensource.com/downloads/ansible-cheat-sheet
  72. https://opensource.com/downloads/ansible-k8s-cheat-sheet
  73. https://opensource.com/downloads/cheat-sheet-awk-features
  74. https://opensource.com/downloads/bash-cheat-sheet
  75. https://opensource.com/downloads/blender-hotkey-cheat-sheet
  76. https://opensource.com/downloads/c-programming-cheat-sheet
  77. https://opensource.com/downloads/curl-command-cheat-sheet
  78. https://opensource.com/downloads/emacs-cheat-sheet
  79. https://opensource.com/downloads/firewall-cheat-sheet
  80. https://opensource.com/downloads/freedos-commands-cheat-sheet
  81. https://opensource.com/content/cheat-sheet-gimp
  82. https://opensource.com/downloads/cheat-sheet-gnome-3
  83. https://opensource.com/downloads/groff-macros-cheat-sheet
  84. https://opensource.com/downloads/go-cheat-sheet
  85. https://opensource.com/downloads/cheat-sheet-i3-window-manager-keybinding
  86. https://opensource.com/downloads/inkscape-cheat-sheet
  87. https://opensource.com/irc-cheat-sheet
  88. https://opensource.com/downloads/java-cheat-sheet
  89. https://opensource.com/downloads/javascript-cheat-sheet
  90. https://opensource.com/downloads/kubectl-cheat-sheet
  91. https://opensource.com/downloads/kubernetes-cheat-sheet
  92. https://opensource.com/downloads/linux-common-commands-cheat-sheet
  93. https://opensource.com/downloads/linux-permissions-cheat-sheet
  94. https://opensource.com/downloads/microservices-cheat-sheet
  95. https://opensource.com/downloads/cheat-sheet-networking
  96. https://opensource.com/downloads/pandoc-cheat-sheet
  97. https://opensource.com/downloads/pip-cheat-sheet
  98. https://opensource.com/downloads/cheat-sheet-python-37-beginners
  99. https://opensource.com/downloads/getting-started-raspberry-pi-cheat-sheet
 100. https://opensource.com/downloads/cheat-sheet-selinux
 101. https://opensource.com/downloads/advanced-ssh-cheat-sheet
 102. https://opensource.com/downloads/cheat-sheets
 103. https://opensource.com/downloads/7-essential-pypi-libraries
 104. https://opensource.com/downloads/python-3-ebook
 105. https://opensource.com/downloads/jupyter-guide
 106. https://opensource.com/downloads/python-gaming-ebook
 107. https://opensource.com/downloads/bash-programming-guide
 108. https://opensource.com/downloads/cheat-sheets
 109. https://opensource.com/downloads/devops-transformation
 110. https://opensource.com/downloads/small-scale-scrum
 111. https://opensource.com/downloads/devsecops
 112. https://opensource.com/downloads/devops-monitoring-guide
 113. https://opensource.com/downloads/devops-hiring-guide
 114. https://opensource.com/downloads/cheat-sheets
 115. https://opensource.com/downloads/ansible-quickstart
 116. https://opensource.com/downloads/containers-primer
 117. https://opensource.com/downloads/kubernetes-sysadmin
 118. https://opensource.com/downloads/cheat-sheets
 119. https://opensource.com/downloads/getting-started-kubernetes-ebook
 120. https://opensource.com/downloads/guide-inter-process-communication-linux
 121. https://opensource.com/downloads/collaboration-tools-ebook
 122. https://opensource.com/downloads/organization-tools
 123. https://opensource.com/downloads/desktop-tools
 124. https://opensource.com/downloads/java-serverless-ebook
 125. https://opensource.com/downloads/home-automation-ebook
 126. https://opensource.com/downloads/chaos-engineering-kubernetes
 127. https://opensource.com/downloads/kubernetes-sysadmin
 128. https://opensource.com/downloads/raspberry-pi-guide
 129. https://opensource.com/downloads/kubernetes-raspberry-pi
 130. https://opensource.com/yearbook/2017
 131. https://opensource.com/yearbook/2015
 132. https://opensource.com/yearbook/2016
 133. https://opensource.com/yearbook/2017
 134. https://opensource.com/yearbook/2018
 135. https://opensource.com/downloads/2019-yearbook-special-edition
 136. https://opensource.com/open-organization/resources/book-series
 137. https://opensource.com/open-organization/resources/field-guide
 138. https://opensource.com/open-organization/resources/leaders-manual
 139. https://opensource.com/open-organization/resources/culture-change
 140. https://opensource.com/open-organization/resources/educators-guide
 141. https://opensource.com/open-organization/resources/workbook
 142. https://opensource.com/open-organization/resources/organize-innovation
 143. https://opensource.com/about
 144. https://opensource.com/about
 145. https://opensource.com/participate
 146. https://opensource.com/opensourcecom-team
 147. https://opensource.com/user/register
 148. https://opensource.com/rules-comments-and-discussions
 149. https://opensource.com/correspondent-program
 150. https://opensource.com/faq
 151. https://opensource.com/how-submit-article
 152. https://opensource.com/submission-style-guide
 153. https://opensource.com/article/20/1/write-for-us
 154. https://opensource.com/contact
 155. https://opensource.com/user/login
 156. https://opensource.com/user/register
 157. http://twitter.com/opensourceway
 158. https://www.facebook.com/opensourceway
 159. https://opensource.com/feed
 160. https://opensource.com/
 161. https://opensource.com/tags/linux
 162. https://opensource.com/tags/command-line
 163. https://opensource.com/tags/kubernetes
 164. https://opensource.com/tags/programming
 165. https://opensource.com/tags/go
 166. https://opensource.com/tags/javascript
 167. https://opensource.com/tags/python
 168. https://opensource.com/tags/containers
 169. https://opensource.com/tags/sysadmin
 170. https://opensource.com/tags/devops
 171. https://opensource.com/tags/gaming
 172. https://opensource.com/tags/hardware
 173. https://opensource.com/tags/3d-printing
 174. https://opensource.com/tags/arduino
 175. https://opensource.com/tags/raspberry-pi
 176. https://opensource.com/tags/government
 177. https://opensource.com/tags/law
 178. https://opensource.com/open-organization
 179. https://opensource.com/open-organization/resources/open-org-definition
 180. https://opensource.com/open-organization/resources/open-decision-framework
 181. https://opensource.com/resources
 182. https://opensource.com/resources/what-open-source
 183. https://opensource.com/resources/projects-and-applications
 184. https://opensource.com/resources/organizations
 185. https://opensource.com/resources/cloud
 186. https://opensource.com/alternatives
 187. https://opensource.com/resources/linux
 188. https://opensource.com/downloads/cheat-sheets
 189. https://opensource.com/about
 190. https://opensource.com/users/jnyjny
 191. https://opensource.com/user/286636/feed
 192. https://opensource.com/article/19/7/structure-multi-file-c-part-2?rate=pScr3ey-IhX03i7BT13Vz3tC-6J54dDYCptWoY5GAP4
 193. https://opensource.com/eloqua-embedded-email-capture-block.html?offer_id=70160000000QzXNAA0
 194. https://opensource.com/article/19/7/how-structure-multi-file-c-program-part-1
 195. https://github.com/jnyjny/MeowMeow.git
 196. https://en.wikipedia.org/wiki/Codec
 197. https://opensource.com/article/19/5/how-write-good-c-main-function
 198. https://github.com/JnyJny/meowmeow/blob/master/main.h
 199. https://github.com/JnyJny/meowmeow/blob/master/main.c
 200. https://github.com/JnyJny/meowmeow/blob/master/mmencode.h
 201. https://github.com/JnyJny/meowmeow/blob/master/mmdecode.h
 202. http://www.opengroup.org/onlinepubs/009695399/functions/feof.html
 203. http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html
 204. http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html
 205. http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html
 206. http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html
 207. https://github.com/JnyJny/meowmeow/blob/master/table.h
 208. http://www.opengroup.org/onlinepubs/009695399/functions/feof.html
 209. http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html
 210. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 211. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 212. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 213. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 214. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 215. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 216. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 217. http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html
 218. http://www.opengroup.org/onlinepubs/009695399/functions/fputc.html
 219. https://opensource.com/tags/programming
 220. https://opensource.com/users/jnyjny
 221. https://opensource.com/users/jnyjny
 222. https://opensource.com/article/21/11/community-code-stories
 223. https://opensource.com/article/21/11/jekyll-config-files
 224. https://opensource.com/article/21/10/mark-text-markdown-editor
 225. https://opensource.com/article/21/10/programming-bugs
 226. https://opensource.com/article/21/10/learn-ada-2021
 227. https://opensource.com/article/21/9/yaml-cheat-sheet
 228. http://creativecommons.org/licenses/by-sa/4.0/
 229. https://opensource.com/eloqua-embedded-subscribe.html?offer_id=70160000000QzXNAA0
 230. https://twitter.com/OpenSourceWay
 231. https://www.facebook.com/opensourceway
 232. http://www.youtube.com/opensourceway
 233. https://fosstodon.org/@osdc
 234. https://opensource.com/feed
 235. https://opensource.com/privacy-policy
 236. https://opensource.com/legal
 237. https://opensource.com/contact
 238. https://opensource.com/opensourcecom-team
 239. http://opensource.org/
 240. https://enterprisersproject.com/
 241. http://creativecommons.org/licenses/



---
