filename: c_sorting-array-of-structs_multif_20220903.txt
https://stackoverflow.com/questions/8721189/how-to-sort-an-array-of-structs-in-c

How to sort an array of structs in C?

   I have got an array of the following structs:
typedef struct _my_data_ {
	unsigned int id;
	double latitude;
	double longitude;
	unsigned int content_len;
	char* name_dyn;
	char* descr_dyn;
} mydata;

   and I would like to sort it ascending by the ID field. I read it is possible to sort arrays using the
   qsort function but I am not sure how to correctly use it when sorting structs.

***
   You need a structure comparator function that matches the prototype of the function expected by
   qsort(), viz:

int md_comparator(const void *v1, const void *v2) {
	const mydata *p1 = (mydata *)v1;
	const mydata *p2 = (mydata *)v2;
	if (p1->id < p2->id)
		return -1;
	else if (p1->id > p2->id)
		return +1;
	else
		return 0;
}

   If you ever get to a more complex sort criterion, this is still a good basis because you can add
   secondary criteria using the same skeleton:

int md_comparator(const void *v1, const void *v2) {
	const mydata *p1 = (mydata *)v1;
	const mydata *p2 = (mydata *)v2;
	if (p1->latitude < p2->latitude)
		return -1;
	else if (p1->latitude > p2->latitude)
		return +1;
	else if (p1->longitude < p2->longitude)
		return -1;
	else if (p1->longitude > p2->longitude)
		return +1;
	else
		return 0;
}

   Clearly, this repeats for as many criteria as you need. If you need to call a function (strcmp()?) to
   compare values, call it once but assign the return to a local variable and use that twice:

int md_comparator(const void *v1, const void *v2) {
	const mydata *p1 = (mydata *)v1;
	const mydata *p2 = (mydata *)v2;
	int rc;
	if (p1->latitude < p2->latitude)
		return -1;
	else if (p1->latitude > p2->latitude)
		return +1;
	else if (p1->longitude < p2->longitude)
		return -1;
	else if (p1->longitude > p2->longitude)
		return +1;
	else if ((rc = strcmp(p1->name_dyn, p2->name_dyn)) < 0)
		return -1;
	else if (rc > 0)
		return +1;
	else
		return 0;
}

   Also, this template works when data members are unsigned integers, and it avoids overflow problems
   when comparing signed integers. Note that the short cut you might sometimes see, namely variations
   on:

int md_comparator(const void *v1, const void *v2) { /* BAD */
                                                    /* BAD */
	const mydata *p1 = (mydata *)v1;                /* BAD */
	const mydata *p2 = (mydata *)v2;                /* BAD */
	return(p1->id - p2->id);                        /* BAD */
}                                                   /* BAD */

   is bad if id is unsigned (the difference of two unsigned integers is never negative), and subject to
   overflow if the integers are signed and of large magnitude and opposite signs.


---
https://scanftree.com/programs/c/to-sort-array-of-structure/

To sort array of Structure

   Write a C program to accept records of the different states using array of structures. The structure
   should contain char state, population, literacy rate, and income. Display the state whose literacy
   rate is highest and whose income is highest.

   Problem to display the highest literate rate and the highest income of a state using array of
   structures

#include<stdio.h>
#define M 50

struct state {
	char name[50];
	long int population;
	float literacyRate;
	float income;
} st[M]; /* array of structure */

int main() {
	int i, n, ml, mi, maximumLiteracyRate, maximumIncome;
	float rate;
	ml = mi = -1;
	maximumLiteracyRate = maximumIncome = 0;

	printf("Enter how many states:");
	scanf("%d", &n);

	for (i = 0; i < n; i++) {
		printf("\nEnter state %d details :", i);

		printf("\nEnter state name : ");
		scanf("%s", &st[i].name);

		printf("\nEnter total population : ");
		scanf("%ld", &st[i].population);

		printf("\nEnter total literary rate : ");
		scanf("%f", &rate);
		st[i].literacyRate = rate;

		printf("\nEnter total income : ");
		scanf("%f", &st[i].income);
	}

	for (i = 0; i < n; i++) {
		if (st[i].literacyRate >= maximumLiteracyRate) {
			maximumLiteracyRate = st[i].literacyRate;
			ml++;
		}
		if (st[i].income > maximumIncome) {
			maximumIncome = st[i].income;
			mi++;
		}
	}

	printf("\nState with highest literary rate :%s", st[ml].name);
	printf("\nState with highest income :%s", st[mi].name);

	return (0);
}

Output:

Enter how many states:3

Enter state 0 details :
Enter state name : Maharashtra
Enter total population : 1000
Enter total literary rate : 90
Enter total income : 10000

Enter state 1 details :
Enter state name : Goa
Enter total population : 300
Enter total literary rate : 94
Enter total income : 5000

Enter state 2 details :
Enter state name : Gujrat
Enter total population : 900
Enter total literary rate : 78
Enter total income : 7000

The state whose literary rate is the highest : Goa
The state whose income is the highest : Maharashtra


---
https://www.codingninjas.com/codestudio/library/structure-sorting-in-c

Structure sorting in C
May 13, 2022

Struct which is short for structure is user-defined datatypes found in C and C++. It is different from
arrays as the same holds data items of the same datatype whereas struct can hold data items of different
data types under a single name.
Creating a Struct

The keyword ‘struct’ is used to create a structure in C and C++. Below is the syntax for declaring a struct.

struct struct_name {
	//Members declaration
	//Datatype declaration
	type_1 member1; 
	type_2 member2;
	.
	.
	.
	type_n membern;
};

Declaring Struct variables
There are two ways to declare struct variables. Either it can be declared during struct declaration or
declared as basic datatypes. Let us study more about it.
Declaring structure variables during structure declaration

We can add optional object names before we place the semicolon at the end of the structure definition. These
object names are used to initialize struct objects of a similar kind.

Example

struct Adult {
	char full_name;
	int age;
}Professional,Student;

Declaring structure variables like basic data types
To declare struct variables like basic data types, the struct_name is used to create new objects.

Example

struct Adult {
	string full_name;
	int age;
};

int main() {
	Person Professional;
	Person Student;
}

Initializing Struct members
This is done using parenthesis ‘{}’ and struct members are initialized by the means of struct objects and is
not possible through declaration. 

Example

struct Adult {
	string full_name;
	int age;
};

int main() {
	Adult Professional = {"Sita",35 };
	Adult Student = {"Gita",23 };
}

Accessing struct elements
The struct elements can be accessed by dot (.). It can be explained through the following example.

Example

#include <bits/stdc++.h>
using namespace std;

struct Adult {
	string full_name;
	int age;
}Professional,Student;


int main() {
	Professional.name = "Sita";
	Professional.age = 35;

	Student.name = "Gita";
	Student.age = 23;

	// we access the elements here using the "." (dot) and display
	cout <<Professional.name <<" "<<Professional.age << endl ;
	cout << Student.name << " "<< Student.age;
}

Output

Sita 35
Gita 23

Sorting Structs
In the sorting of structures, all the properties of the structure object are sorted on the basis of the
properties of the object. To sort the given data which might be in form of an array of integers or strings
in ascending order, let's take an example.

Example

Suppose you have been given a class database and you are assigned to sort names of students according to
their enrolment number. So for that, we first need to create a structure that can store their roll numbers
and names. Then a compare function is created to sort the data. In the main function, an array is created to
take the input for the roll number and name of the students. Then we call the sort function to process the
input. And then the sorted list is displayed using a for loop. 
Structure Declaration

typedef struct class {
	int roll_no;
	string sname;
}data;

Program to sort struct class

#include <bits/stdc++.h>
using namespace std;

//struct declaration
typedef struct class {
	int roll_no
	string sname;
}data;

//function to sort
bool compare(data a, data b) {
	//for descending order replace with a.roll_no >b.roll_no
	if(a.roll_no < b.roll_no)
		return 1;
	else
		return 0;
}

//main function
int main() {
	int n,i;
	cout<<"Enter the Total number of students : \n";
	cin>>n;

	//array of structure creation
	data array[n];
	cout<<"Enter roll number and student name :\n";

	for(i=0;i<n;i++) {
		cin>>array[i].roll_no;
		cin>>array[i].sname;
	}

	sort(array,array+n,compare); //sort function call
	cout<<"Sorted list : "<<endl;
	
	for(i=0;i<n;i++) {
		cout<<array[i].roll_no<<" ";
		cout<<array[i].sname<<endl;
	}

	return 0;
}

Output

Enter the Total number of students :
2
Enter roll number and student name :
001 Ayushi
002 Abhishek
Sorted list :
001 Ayushi
002 Abhishek

Time Complexity: O(n), since we have a for loop running for n number of times.
Space Complexity: O(n), since an array has been created for n number of students.

---
https://discuss.codechef.com/t/sorting-structure-in-c-using-qsort/49541/2

Sorting Structure in C using qsort()
10, 2020

   Hi
   Can someone please help me out, I'm trying to sort user defined Structure , using predefined function
   qsort().
   I'm getting segmentation fault.

***
   There are 2 changes that are needed:
1. In qsort function call
qsort(arr, n, sizeof(struct Student ),comparator);

2. Inside comparator:
int comparator(const void* p0, const void* p1) {
	struct Student* ps0 = (struct Student*) p0;
	struct Student* ps1 = (struct Student*) p1;
	return strcmp( ps0->name, ps1->name);
}

***
   I have looked at your code and there are quite a number of optimisations you can do to make your code
   more efficient and effective.

struct Student * arr = (struct Student *) malloc(n * sizeof(struct Student));
by:
struct Student * arr = malloc(n * sizeof(*arr));

   Why? Because you are already storing the return address of malloc() function into a pointer which can
   extract the value from the address, don't do double casting.
   To know more about it, refer to
   [https://stackoverflow.com/questions/605845/do-i-cast-the-result-of-malloc?rq=1]
   Do I need to cast the return type of malloc() / calloc()?

qsort(arr, n, sizeof(struct Student *),comparator);
by:
qsort(arr, n, sizeof(*arr), comparator);

 * You need to change your comparator() function, it should be:

int comparator(const void* p0, const void* p1) {
	struct Student *ps0 = (struct Student*) p0;
	struct Student *ps1 = (struct Student*) p1;
	return strcmp( ps0->name, ps1->name);
}

   Whenever working with void* or void pointers a.k.a generic pointers, remember that whenever
   de-referencing void*, you need to first type-cast into the pointer which can extract the data from
   the memory location to which the void* is pointing to which in this case is struct Student*.

   You can also write your comparator() function like this:

int comparator(const void* p0, const void* p1) {
	return strcmp(((struct Student*) p0) -> name, ((struct Student *) p1) -> name);
}


---
https://jeffpar.github.io/kbarchive/kb/073/Q73853/

Sorting Structures with the C qsort() Function
26-JUL-2001

The information in this article applies to:

- The C Run-Time (CRT), included with:
   - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
   - Microsoft C for OS/2, versions 5.1, 6.0, 6.0a
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, 16-bit edition, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Editions, versions 1.0, 2.0, 2.1, 4.0, 5.0
-------------------------------------------------------------------------------

SUMMARY
The Microsoft C and QuickC run-time library function qsort() is useful for
sorting data; however, it is necessary to provide qsort() a compare function for
the type of data being sorted. This sometimes causes confusion when that type is
a structure. The sample program below illustrates how to use qsort() to sort an
array of structures.

MORE INFORMATION
In the sample code, the animal structure contains both an integer, which is the
key to be sorted on, and an array of char that contains the animal's name. The
compare() function receives two pointers to type struct animal and returns -1,
1, or 0 (zero) if the first element is less than, greater than, or equal to the
first element, respectively.

Sample Code


/* Compile options needed: none
 *
 * This example program uses the C run-time library function qsort()
 * to sort an array of structures.
 */

#include <stdio.h>
#include <stdlib.h>

typedef int (*compfn)(const void*, const void*);

struct animal { int  number;
				char name[15];
			  };

struct animal array[10]  = { {	1, "Anaconda"	 },
							 {	5, "Elephant"	 },
							 {	8, "Hummingbird" },
							 {	4, "Dalmatian"	 },
							 {	3, "Canary"		 },
							 {	9, "Llama"		 },
							 {	2, "Buffalo"	 },
							 {	6, "Flatfish"	 },
							 { 10, "Zebra"		 },
							 {	7, "Giraffe"	 }	};

void printarray(void);
int  compare(struct animal *, struct animal *);

void main(void) {
	printf("List before sorting:\n");
	printarray();

	qsort((void *) &array,            // Beginning address of array
	10,                               // Number of elements in array
	sizeof(struct animal),            // Size of each element
	(compfn)compare );                // Pointer to compare function

	printf("\nList after sorting:\n");
	printarray();
}

int compare(struct animal *elem1, struct animal *elem2) {
	if ( elem1->number < elem2->number)
		return -1;

	else if (elem1->number > elem2->number)
		return 1;

	else
		return 0;
}

void printarray(void) {
	int i;

	for (i = 0; i < 10; i++)
		printf("%d:  Number %d is a %s\n",
				i+1, array[i].number, array[i].name);
}

Additional query words:
======================================================================
Keywords          : kbcode kbCRT kbVC kbVC100 kbVC150 kbVC151 kbVC152 kbVC200 kbVC210 kbVC400 kbVC500
Technology        : kbVCsearch kbAudDeveloper kbCRT
Version           : MS-DOS:5.1,6.0,6.00a,6.00ax,7.0 WINDOWS:1.0,1.5,1.51,1.52; WINDOWS NT:1.0,2.0,2.1,4.0,5.0
Issue type        : kbinfo
=============================================================================


---
https://gist.github.com/shahril96/6806ac51c0b4d713bfc8

   Example of sorting struct using qsort inside standard C

/* Performance of qsort, worst case O(n log n)
Example input :
3
4 9
-3 48
-100 48
Example output :
before sort --
x = 4, y = 9
x = -3, y = 48
x = -100, y = 48
after sort --
x = -100, y = 48
x = -3, y = 48
x = 4, y = 9 */

#include <stdio.h>
#include <stdlib.h>

typedef struct list {
	int x, y;
} List;

void print_struct(List *struct_ptr, int size) {
	for(int i = 0; i < size; i++) {
		printf("x = %d, y = %d\n", struct_ptr[i].x, struct_ptr[i].y);
	}
}

int cmp_ret(const void *aptr, const void *bptr) {
	int a = ((List *)aptr)->x, b = ((List *)bptr)->x;
	return (a > b) - (a < b);
}

int main() {
	int n;
	scanf("%d", &n);
	List *li = (List *)malloc(sizeof(List) * n);

	for(int i = 0; i < n; i++) {
		scanf("%d %d", &li[i].x, &li[i].y);
	}

	puts("\nbefore sort --");
	print_struct(li, n);

	qsort(li, n, sizeof(List), cmp_ret);
	puts("\nafter sort --");
	
	print_struct(li, n);
	free(li);
}


---

