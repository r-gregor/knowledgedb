iflename: c_working-with-hexadecimal-values-multif_20241204.txt
https://www.includehelp.com/c/working-with-hexadecimal-values-in-c-programming-language.aspx

Working with Hexadecimal values in C programming language

   Hexadecimal value has 16 alphanumeric values from 0 to 9 and A to F, with the base 16. (Read more
   about Computer number systems), here we will learn how to work with hexadecimal values in c
   programming language?

Representation of Hexadecimal numbers in C programming
   In C programming language, a Hexadecimal number is represented by preceding with "0x" or "0X", thus
   the value in Hexadecimal can be written as "0x64" (which is equivalent to 100 in Decimal).

Assigning the Hexadecimal number in a variable
   There is no special type of data type to store Hexadecimal values in C programming, Hexadecimal
   number is an integer value and you can store it in the integral type of data types (char, short or
   int).

   Let suppose, we have two values in Hexadecimal "64" (100 in Decimal) and "FAFA" (64250 in Decimal).

   We are storing "64" in an unsigned char variable (64 is small value and can be stored with in a
   Byte) and "FAFA" in the int variable.

   Consider the following statements
unsigned char a=0x64;
unsigned char b=0xFAFA;

Printing the Hexadecimal number of a variable
   To print integer number in Hexadecimal format, "%x" or "%X" is used as format specifier in
   printf() statement.

   "%x" prints the value in Hexadecimal format with alphabets in lowercase (a-f).
   "%X" prints the value in Hexadecimal format with alphabets in uppercase (A-F).

Example
   Consider the code, which is printing the values of a and b using both formats
int main() {
	unsigned char a=0x64;
	int b=0xFAFA;

	printf("value of a: %X [%x]\n",a,a);
	printf("value of b: %X [%x]\n",b,b);

	return 0;
}

Output

value of a: 64 [64]
value of b: FAFA [fafa]

Reading value in Hexadecimal format
   "%x" or "%X" is used with scanf() statement to read the value from the user.

Example
   Consider the following code

#include <stdio.h>

int main() {
	unsigned char a;
	int b;

	printf("Enter value of a: ");
	scanf("%x",&a);
	printf("Enter value of b: ");
	scanf("%x",&b);

	printf("Value of a: Hex: %X, Decimal: %d\n",a,a);
	printf("Value of b: Hex: %X, Decimal: %d\n",b,b);

	return 0;
}

Output

Enter value of a: 64
Enter value of b: FAFA
Value of a: Hex: 64, Decimal: 100
Value of b: Hex: FAFA, Decimal: 64250

Declaring integer array by assigning hexadecimal values
   Consider the following example, where integer array is declaring with the Hexadecimal values and
   printing in both formats Decimal and Hexadecimal.

Example

#include <stdio.h>
int main() {
	int arr[]={0x64, 0xAB0, 0xA0A0, 0xFAFA, 0x100};
	int i;

	printf("Array elements are\n");
	for(i=0;i<5;i++)
		printf("Decimal: %d, Hex: %X\n",arr[i],arr[i]);

	return 0;
}

Output

Array elements are
Decimal: 100, Hex: 64
Decimal: 2736, Hex: AB0
Decimal: 41120, Hex: A0A0
Decimal: 64250, Hex: FAFA
Decimal: 256, Hex: 100


---
https://www.includehelp.com/c-programs/input-hexadecimal-value-in-c.aspx

Input hexadecimal value in C language
September 06, 2018

   Here, we are going to learn how to input a value in hexadecimal format? To input value in hexadecimal
   format using scanf() – we use "%x" or "%X" format specifier.

Problem statement
   In C programming language, we are able to input a hexadecimal value using scanf() function,
   for that – we use %x or %X format specifier.

Syntax

 scanf("%x", &variable_name);

Example

Input:
Input a hex value: FA

Output:
Value in hexadecimal format: FA, Decimal format: 250

Input hexadecimal value in C language

#include <stdio.h>

int main() {
	unsigned char var1;
	unsigned short var2;
	unsigned int var3;

	printf("Enter 1 byte  value in Hexadecimal: ");
	scanf("%x", &var1);
	printf("Enter 2 bytes value in Hexadecimal: ");
	scanf("%x", &var2);
	printf("Enter 4 bytes value in Hexadecimal: ");
	scanf("%x", &var3);

	printf("Value of var1 in HEX: %X, Decimal: %d\n", var1,var1);
	printf("Value of var2 in HEX: %X, Decimal: %d\n", var2,var2);
	printf("Value of var3 in HEX: %X, Decimal: %d\n", var3,var3);

	return 0;
}

Output

Enter 1 byte  value in Hexadecimal: FA
Enter 2 bytes value in Hexadecimal: 20AC
Enter 4 bytes value in Hexadecimal: 1234ABD0
Value of var1 in HEX: FA, Decimal: 250
Value of var2 in HEX: 20AC, Decimal: 8364
Value of var3 in HEX: 1234ABD0, Decimal: 305441744


---
https://www.quora.com/How-do-I-convert-ascii-hexadecimal-code-to-letters-in-C-language

How do I convert ascii hexadecimal code to letters in C language?

***
One way is to use the scanf family of functions, here's an example with sscanf, which works on character
arrays:

#include <stdio.h>

int main ( int argc, char **argv ) {
	char c;
	int i;
	/* Interpret each argument as a hex byte: */
	for ( i=1; i<argc; i++ ) {
		sscanf ( argv[i], "%x", &c );
		putchar (c);
	}
	putchar ( '\n' );
}

Compile, and run:

$> make convert
cc -O2 -pipe   convert.c  -o convert
$> ./convert 48 65 6c 6c 6f
Hello

Hey presto, letters from hexadecimal ASCII.

***
To convert ASCII hexadecimal code to letters in C, you can follow these steps:

    Read the Hexadecimal String: Read the input string that contains the hexadecimal values.  Convert Hex to
    Decimal: Use a function to convert each pair of hexadecimal digits to their corresponding decimal value.
    Convert Decimal to Character: Convert the decimal value to its corresponding ASCII character.

Here is a simple C program that demonstrates this process:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void hexToAscii(const char *hex) {
	int len = strlen(hex);
	// Ensure the length is even
	if (len % 2 != 0) {
		printf("Invalid hexadecimal input.\n");
		return;
	}

	// Create a buffer to hold the ASCII result
	char ascii[len / 2 + 1]; // +1 for the null terminator
	ascii[len / 2] = '\0'; // Null-terminate the string

	for (int i = 0; i < len; i += 2) {
		// Convert each pair of hex digits to a character
		char hexPair[3] = {hex[i], hex[i + 1], '\0'};
		ascii[i / 2] = (char)strtol(hexPair, NULL, 16);
	}

	printf("ASCII Output: %s\n", ascii);
}

int main() {
	const char *hexInput = "48656c6c6f20576f726c6421"; // Example: "Hello World!"
	hexToAscii(hexInput);
	return 0;
}

Explanation of the Code:
    Function :
    - It takes a string of hexadecimal characters as input.
    - It checks if the length of the input string is even. If not, it prints an error message.
    - It initializes a character array ascii to hold the converted ASCII characters and null-terminates it.

    Loop through the Hex String:
    - The loop iterates through the hexadecimal string two characters at a time.
    - It creates a temporary string hexPair to hold each pair of hex digits and converts it to a decimal value
      using strtol with base 16.
    - The resulting decimal value is cast to a char and stored in the ascii array.

    Main Function:
    - An example hexadecimal string representing "Hello World!" is defined and passed to the hexToAscii
      function.

Output:

When you run this program, it will output:
ASCII Output: Hello World!

This approach can be adapted to handle different input formats or error checking as needed.


---
https://c-for-dummies.com/blog/?p=2252

From Hex to Text
December 24, 2016

   Do you speak hex? As a programmer, do you look at 0xF and see 1111 in binary? Do you see 15 decimal?
   What about the ASCII code? Do you know the letter for code 0x41? Are you that good?
   The character for ASCII code 0x41 is 'A', which you’d know if you are either a total nerd or have
   been programming for some time — or both! I never set out to memorize hex / decimal / binary / ASCII;
   it just happened.

   Still, occasionally the nerds present information in a fashion designed to be easily picked up by
   nerds, but ignored by anyone else.

   Recently I saw a post about computer pioneer Dennis Ritchie. He died the same year as Steve Jobs,
   but few people lavish the praise upon Dr. Ritchie that they attribute to Jobs. In fact, Jobs
   contributions to computer science pale in comparison to what Dr. Ritchie did, including inventing the
   C language and Unix.

   I’ll leave it up to you to review Dr. Ritchie’s many accomplishments. Yet, recently I saw someone
   compare Ritchie and Jobs, at the end of which they wrote:

   79 6f 75 20 74 77 61 74 73

   The numbers I recognized as hexadecimal, thanks to the F in 6f. I’ve not memorized the ASCII table
   completely, but I know that the codes represent characters — text. The 0x020 specifically is the
   space. To translate the rest of the codes into characters, I’d either have to examine an ASCII table
   or write code that translates the ASCII into text.

   I did the latter.

   Here you find the code I wrote to translate hex bytes, similar to those formatted above, and generate
   the corresponding ASCII string. The code doesn’t check input, so it’s not bulletproof. It’s something
   I wrote quickly just in case the issue came up again:

01 #include <stdio.h>
02
03 #define SIZE 32
04
05 int main()
06 {
07     char output[SIZE];
08     int c;
09     int x = 0;
10
11     printf("Type hex (l/c) digits, 0 to end: ");
12     while(x < SIZE)
13     {
14         scanf("%2x",&c);
15         output[x] = (char)c;
16         if(c == 0) break;
17         x++;
18     }
19     printf("\n%s\n",output);
20
21     return(0);
22 }

   Line 7 creates a buffer for 32 characters, which is 31 characters plus the '\0' at the end of a
   string.

   The while loop at Line 12 uses variable x as an index to count characters. Text is read at Line 14
   with the scanf() function, which is set to recognize 2-digit hexadecimal values as input.

   The character is stored in the output[] buffer at offset x in Line 15.

   Line 16 tests for value 0 as input, which terminates the loop before x reaches 32.

   Line 19 prints the result.

   Here is a sample run:
Type hex (l/c) digits, 0 to end: 48 65 6c 6c 6f 21 0

Hello!

   The scanf() function terminates input at any whitespace character, so I could type the hex digits
   each on a line by itself or just use spaces to separate each.


---

