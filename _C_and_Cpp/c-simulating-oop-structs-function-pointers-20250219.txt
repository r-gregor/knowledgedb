filename: c_simulating-oop-structs-function-pointers_20250219.txt
https://cboard.cprogramming.com/c-programming/116335-simulating-oop-structs-function-pointers.html

Simulating OOP with structs and function pointers?

     First of all I do not want any crap about "why don't you use C++?". I need a lot of interfacing
     with assembly and I want to keep it as simple as possible, that means avoiding C++ at all costs.
     (please no commenting on that and just go along with my wishes, it's more complicated than I'm
     willing to explain)

     Would it be possible to define a struct in C that held value members and function points and use
     that as a OOP style class? I just seems to deceptively simple to work. Could I also simulate
     inheratence by just adding members of the super class onto the base class? Once again seems
     deceptively simple. Any key OOP features I'm missing besides operator overloading?
     Thanks in advance.

***
     1 - Can I define a struct that has function pointers as members? - Yes.
     2 - Can I make a structure have other structures as members? - Yes.
     Is that what you're asking?

***
     Yes, you can. Proof of that is that the first version of Bjarne's C++ compiler didn't generate
     assembler, it generated C code, to be compiled by the C compiler.
     Obviously, as you mention, operator overloading and templates require processing before the C
     compiler can take over. But all the basic features such as virtual functions and inheritance can
     be solved in C. Multiple inheritance gets a bit messy, and if the compiler doesn't support
     anonymous [nameless] structs in other structs.

***
     So C++ is really just a redundancy?
     EDIT:
     I'm just asking this because it makes no sense (in my opinion) to use a redundant (and slower)
     langauge.

***
     Yes - what you're asking is very possible. One of the things I like about C is your style can be
     procedural, functional, or object-oriented. It's nice. In fact, it's my understanding that there
     are parts of the Linux kernel (which, like your project, needs to remain simple and use a lot of
     assembly) has parts that almost resemble the use of classes. I've never seen the actual code - but
     using C in an OOP style is certainly possible.

***
     First of all I do not want any crap about "why don't you use C++?".

     No worries.

     Would it be possible to define a struct in C that held value members and function points and use
     that as a OOP style class?

     You can put a function pointer in a struct, but it can't point to anything by default AFAIK. So
     that means you can't define the function in the struct, and you will have to assign the function
     pointer "per object" if you are trying to use a struct like a class. So I would say, don't bother
     trying to emulate OOP style coding to that extent.

     There is no problem emulating OOP funtionality tho. Since you are the programmer, hopefully you
     should be able to remember which functions do what, without having them associated as method
     calls. So rather that calling "mystruct.new(parameters)":
     Code:

struct {
	char *data;
	int num;
} mystruct;

mystruct *initialize_object(char *data, int num) {
	struct mystruct *ptr=malloc(sizeof(struct mystruct));
	ptr->data = data;
	ptr->num = num;
	return ptr;
}

     Any methods you want "associated" with the class would just be:
     Code:

whatevertype class_method(struct mystruct *ptr) {
	[perform operations]
	return as appropriate;
}

     If you keep your function definitions in alphabetical order, you will have:
     Code:

int myclass_method1(...);
char myclass_method2(...);
etc myclass_method3(...);

     and if you are really worried C is too confusing you can put these sets in separate header files
     or something

***
     Yes, Linux [and Windows] drivers use a "virtual member class" structure as the way to connect the
     open, read, write, and close functions of the specific driver implementation back into the generic
     driver framework.

***
     Instead of this:
     Code:

 struct my_class {
	void (*func1)( struct my_class *, ... );
	void (*func2)( struct my_class *, ... );
	void (*func3)( struct my_class *, ... );
};

my_class *foo = new_my_class( ... );
foo->func1( foo, ... );

     Do this:
     Code:

struct my_class;

struct my_class_vtable {
	void (*func1)( struct my_class *, ... );
	void (*func2)( struct my_class *, ... );
	void (*func3)( struct my_class *, ... );
};

struct my_class {
	struct my_class_vtable *vtable;
};

struct my_class *foo = new_my_class( ... );
foo->vtable->func1( foo, ... );

     There is absolutely no point in wasting tons of memory keeping the function pointers in every
     instance of the "class."

     Code:
//try
//{
        if (a) do { f( b); } while(1);
        else   do { f(!b); } while(1);
//}

***
     IMO it is silly to use function pointers for this at all.
     It is silly if there is no need for it - it's just extra overhead then. But if there is a need to
     do different things for different objects in the same outer function then function pointers is
     definitely the way to go. The other option is to have functions that do something like this:
     Code:

int func(struct something *this) {
	if(this->type = type_a)
		do_type_a_work....
	else if (this->type = type_b)
		do_type_b_work...
}

     That gets very messy very quickly [and yes, it may be possible to use switch here, but it's not
     fixing the REAL problem - which is that you need to determine what the type is, and then do the
     work necessary]. Imagiine that you have to do this in 5-6 or more different functions.
     With function pointers, you can simply call the function belonging to the struct. No messing about
     with if-statements.

***
     Just submit the instance of the struct/object to that function. That's what you're doing anyway.
     With the pointer, if you modify the functions parameters, you now have to change the prototype AND
     the function pointer in the struct. Yuck.
     I don't think you understood what I meant. Say we have this:
     Code:

struct animal {
	void (*talk)(struct animal *this);
};


struct cat {
	struct animal;
};

struct dog {
	struct animal;
};

void dogtalk(struct animal *this) {
	printf("Bark, bark!\n");
}

void cattalk(struct animal *this) {
	printf("Meow, meow\n");
}

void dog_construct(struct dog *this) {
	this->talk = dogtalk;
}

void cat_construct(struct cat *this) {
	this->talk = cattalk;
}

int main() {
	struct cat c;
	struct dog d;

	cat_construct(&c);
	dog_contstruct(&d);

	d.talk((struct animal *)&d);
	c.talk((struct animal *)&c);
}

     Now, imagine you have half a dozen different functions, with half a dozen different animals - it
     gets very messy.


---

