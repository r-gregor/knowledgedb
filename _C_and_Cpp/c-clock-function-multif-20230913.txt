filename: c_clock-function-multif_20230913.txt
https://www.fresh2refresh.com/c-programming/c-time-related-functions/

C - Time related functions

   Time functions in C are used to interact with system time routine and formatted time outputs are
   displayed. Example programs for the time functions are given below.

   ----------------------------------------------------------------------------------------------------------
   Function    Description
   ----------------------------------------------------------------------------------------------------------
   setdate()   This function used to modify the system date
   getdate()   This function is used to get the CPU time
   clock()     This function is used to get current system time
   time()      This function is used to get current system time as structure
   difftime()  This function is used to get the difference between two given times
   strftime()  This function is used to modify the actual time format
   mktime()    This function interprets tm structure as calendar time
   localtime() This function shares the tm structure that contains date and time informations
   gmtime()    This function shares the tm structure that contains date and time informations
   ctime()     This function is used to return string that contains date and time informations
   asctime()   Tm structure contents are interpreted by this function as calendar time. This time is converted
               into string.
   ----------------------------------------------------------------------------------------------------------

Example program for setdate() function in C:
   This function is used to modify the system date. Please note that other C compilers may not support
   this setdate() function except turbo C.

#include<stdio.h>
#include<dos.h>
#include<conio.h>

int main() {
	struct date dt;

	printf("Enter new date in the format(day month year)");
	scanf("%d%d%d",&dt.da_day,&dt.da_mon,&dt.da_year);

	setdate(&dt);

	printf("Now, current system date is %d-%d-%d\n"
			,dt.da_day,dt.da_mon,dt.da_year);

	return 0;
}

Output:

   Enter new date in the format (day month year)
   01 12 2012
   Now, current system date is 01-12-2012

Example program for getdate() function in C:
   This function is used to get the CPU time. Please note that other C compilers may not support this
   getdate() function except turbo C.

#include<stdio.h>
#include<dos.h>

int main() {
	struct date dt;

	getdate(&dt);

	printf("Operating system's current date is %d-%d-%d\n"
			,dt.da_day,dt.da_mon,dt.da_year);

	return 0;
}

Output:

    Operating system's current date is 12-01-2012

Example program for clock() function in C:
   This function is used to get current system time.

#include <stdio.h>
#include <time.h>
#include <math.h>

int main() {
	int i;
	clock_t CPU_time_1 = clock();
	printf("CPU start time is : %d \n", CPU_time_1);
	for(i = 0; i < 150000000; i++);
	clock_t CPU_time_2 = clock();
	printf("CPU end time is : %d", CPU_time_2);
}

 Output:

   CPU start time is : 0

   CPU end time is  : 380000

Example program for time() function in C:
   This function is used to get current system time as structure.

#include <stdio.h>
#include <time.h>

int main () {
	time_t seconds;
	seconds = time (NULL);

	printf ("Number of hours since 1970 Jan 1st " \
			"is %ld \n", seconds/3600);
	return 0;
}

Output:

   Number of hours since 1970 Jan 1st is 374528

Example program for difftime() function in C:
   This function is used to get the difference between two given times.

#include <stdio.h>
#include <time.h>

int main() {
	time_t begin,end;
	long i;
	begin= time(NULL);
	for(i = 0; i < 150000000; i++);
	end = time(NULL);
	printf("for loop used %f seconds to complete the " \
			"execution\n", difftime(end, begin));
	return 0;
}

Output:

   for loop used 15.000000 seconds to complete the execution

Example program for strftime(), asctime() and localtime() in C:
     * strftime()    - This function is used to modify the actual time format.
     * asctime()   - tm structure contents are interpreted by asctime() function as calendar time. This
       time is converted into string.
     * localtime() - This function shares the tm structure that contains date and time informations.

#include <stdio.h>
#include <time.h>

#define LEN 150

int main () {
	char buf[LEN];
	time_t curtime;
	struct tm *loc_time;

	//Getting current time of system
	curtime = time (NULL);

	// Converting current time to local time
	loc_time = localtime (&curtime);

	// Displaying date and time in standard format
	printf("%s", asctime (loc_time));

	strftime (buf, LEN, "Today is %A, %b %d.\n", loc_time);
	fputs (buf, stdout);
	strftime (buf, LEN, "Time is %I:%M %p.\n", loc_time);
	fputs (buf, stdout);

	return 0;
}

Output:

   Sat Sep 22 01:15:03 2012

   Today is Saturday, Sep 22.

   Time is 01:15 AM.

Example program for mktime() and ctime() functions in C:
     * mktime() function interprets tm structure as calendar time.
     * ctime() function is used to return string that contains date and time informations.

#include <stdio.h>
#include <time.h>

int main() {
	struct tm strtime;
	time_t timeoftheday;

	strtime.tm_year = 2008-1900;
	strtime.tm_mon = 1;
	strtime.tm_mday = 4;
	strtime.tm_hour = 02;
	strtime.tm_min = 30;
	strtime.tm_sec = 38;
	strtime.tm_isdst = 0;

	timeoftheday = mktime(&strtime);
	printf(ctime(&timeoftheday));

	return 0;
}

Output:

   Mon Feb 4 02:30:38 2008

Example program for gmtime() function in C:
   This function shares the tm structure that contains date and time informations.

#include <stdio.h>
#include <time.h>

int main() {

	time_t orig_format;
	time(&orig_format);

	printf ("Universal Time is %s",
			asctime(gmtime(&orig_format)));

	return 0;
}

Output:

   Universal Time is Sat Sep 22 08:11:40 2012



---
https://www.tutorialspoint.com/c_standard_library/c_function_clock.htm

C library function - clock()

Description
   The C library function clock_t clock(void) returns the number of clock ticks elapsed since the
   program was launched. To get the number of seconds used by the CPU, you will need to divide by
   CLOCKS_PER_SEC.

   On a 32 bit system where CLOCKS_PER_SEC equals 1000000 this function will return the same value
   approximately every 72 minutes.

Declaration
   Following is the declaration for clock() function.
clock_t clock(void)

Parameters
     * NA

Return Value
   This function returns the number of clock ticks elapsed since the start of the program. On failure,
   the function returns a value of -1.

Example
   The following example shows the usage of clock() function.

#include <time.h>
#include <stdio.h>

int main () {
	clock_t start_t, end_t;
	double total_t;
	int i;

	start_t = clock();
	printf("Starting of the program, start_t = %ld\n", start_t);

	printf("Going to scan a big loop, start_t = %ld\n", start_t);
	for(i=0; i< 10000000; i++) {}
	end_t = clock();
	printf("End of the big loop, end_t = %ld\n", end_t);

	total_t = (double)(end_t - start_t) / CLOCKS_PER_SEC;
	printf("Total time taken by CPU: %f\n", total_t  );
	printf("Exiting of the program...\n");

	return(0);
}

   Let us compile and run the above program that will produce the following result âˆ’
Starting of the program, start_t = 1194
Going to scan a big loop, start_t = 1194
End of the big loop, end_t = 26796
Total time taken by CPU: 0.025602
Exiting of the program...



---
https://www.geeksforgeeks.org/clock-function-in-c-c/

clock() function in C/C++
28 Sep, 2018

   The clock() function is defined in the ctime header file. The clock() function returns the
   approximate processor time that is consumed by the program. The clock() time depends upon how the
   operating system allocate resources to the process that's why clock() time may be slower or faster
   than the actual clock.

   Syntax:
clock_t clock( void );

   Parameters: This function does not accept any parameter.

   Return Value: This function returns the approximate processor time that is consumed by the program
   and on failure function returns -1.

   Below program illustrates the implementation of clock() function:

   // C++ program to demonstrate
   // example of clock() function.

#include<bits/stdc++.h>
using namespace std;

int main () {
	float a;
	clock_t time_req;

	// Without using pow function
	time_req = clock();

	for(int i=0; i<200000; i++) {
		a = log(i*i*i*i);
	}

	time_req = clock()- time_req;
	cout << "Processor time taken for multiplication: "
		<< (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;

	// Using pow function
	time_req = clock();

	for(int i=0; i<200000; i++) {
		a = log(pow(i, 4));
	}

	time_req = clock() - time_req;
	cout << "Processor time taken in pow function: "
		<< (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;

	return 0;
}


   Output:
Processor time taken for multiplication: 0.006485 seconds
Processor time taken in pow function: 0.022251 seconds



---
https://www.educba.com/clock-in-c/

clock() in C
April 4, 2023

Introduction to clock() in C
   Clock() plays a significant role in entire C programming as it helps in maintaining the timing record
   with proper hierarchy. The elapses or records based on timings with a number of ticks will help in
   making a 32-bit system clock on a per-second basis. The return value returns function with a number
   of clock ticks that get elapsed with the start of each program but in case of failure, it returns a
   value of -1. Clock function is part of the library C function that mainly starts the flow with the
   inclusion of the ctime header file.

   Syntax:
   There is a proper syntax that represents the clock() function by returning some approximate processor
   time which further gets consumed by a program. Depending upon the clock time allocation of resources
   with each of the operating systems gets allocated. Syntax representation is as follows:
clock_k clock(void)

   Where clock_k signifies the function with keyword clock and parameter to return void type.

How clock() works in C?
     * Clock function is mostly used to determine processor time within an operating system.
     * It helps in allocating the time resources to the processor by counting the number of ticks per
       second for any manipulation.
     * Clock function basically uses the following versions where it makes use of C language as ANSI/ISO
       9899-1990
     * There are other C functions as well which are similar to clock function and are represented
       within the standard library:

Time_0 func (time.h)
     * Clock() function follows some algorithmic code represented by the minutes and time example for:

   Minute + Time Minute + Time
     * The algorithmic flow goes in a way where it first checks for the repeat loop whether it exists or
       not and if it is greater than 0 or not if the condition checking gets satisfied then it will
       decrement the number of elapses or ticks per the second basis or else.
     * If it does not satisfy the condition, then it will in turn land into another scenario where delay
       or repeat will take place for less than 0 value.
     * Then further it will call for a power check whether it sustains or not then it will move into the
       increment of no-of minutes after that it will be counted in the done state for a completed
       operation as per flow chart depiction.

   Psuedocode

# include <time.h>
clock_h  strt, end;
double cpu_time_usd;
start=clock();
// Perform Work
end = clock();
cpu_time_usd = ( (double) (end-start)) // This gives clock value on per second basis...

     * As per pseudocode initially, a start and end time exists with the clock() function then a
       variable for cpu_time_usd is taken where the clock function is then assigned to the start
       function.
     * It will then perform all work for manipulation.
     * Once the work comes to end the clock() function result will be assigned to the end() function
       further giving the manipulation of CPU timings on a per-second basis for start and end at the
       time of resource allocation.
     * The clock function return is the amount of elapsed time for processing since the program gets
       started at the beginning of any program.
     * If error the function, in turn, returns -1.

Examples
   Here are the following examples mentioned below.

Example #1
   This program demonstrates how the time is consumed by the function for its processing as shown in the
   output below.

   Code:

#include <stdio.h>
#include <time.h>

void func_1() {
	printf("func_1() starts the flow... \n");
	printf("Press enter_button to stop func_1 when entered.. \n");
	while(1) {
		if (getchar())
			break;
	}
	printf("func_1() gets an end here.. \n");
}

int main() {
	clock_t t_0;
	t_0 = clock();
	func_1();
	t_0 = clock() - t_0;
	double time_consumed = ((double)t_0)/CLOCKS_PER_SEC;
	printf("func_1() took %f seconds for execution of some value.. \n", time_consumed);
	return 0;
}

   Output:
func_1() starts the flow... 
Press enter_button to stop func_1 when entered.. 
func_1() gets an end here.. 
func_1() took 0.000000 seconds for execution of some value.. 

   Explanation:
   Clock() function in C here is used for demonstrating the flow where func_1 consumes the flow of time
   with the execution of some value and its time as well. It takes some time for execution and allocates
   resources as per the operating system. If pressed enter then it will get halted with the required
   value as shown in the output.

Example #2
   This function demonstrates the time taken by fib_time(20) for the consumption of time within the
   processor for any manipulation as shown in the output.

#include<stdio.h>

int fib_time(int a_0) {
	if (a_0 <= 1)
		return a_0;
	return fib_time(a_0-1) + fib_time(a_0-2);
}

int main () {
	printf("The number coming out of fib_time is: %d", fib_time(20));
	return 0;
}

   Output:

The number coming out of fib_time is: 6765

   Explanation: In this program, the number coming out of fib_time comes as the final compiled time of
   the fib_time() function that is used for the overview it is the final compilation time.

Example #3
   This program demonstrates the current time as part of ctime standard library to determine the current
   time as part of the clock() function for comparison.

#include <stdio.h>
#include <time.h>

int main () {
	time_t currnt_time;
	time(&currnt_time);
	printf("Current_time comes_out to be: = %s", ctime(&currnt_time));
	return(0);
}

   Output:

   output 3 output 3

Example #4
   Difftime is another c reference function that is also similar to the clock() function but with some
   of the major differences which are depicted in the output below.

#include <stdio.h>
#include <time.h>

int main () {
	time_t tm_1,tm_2;
	char get_inpt [258];
	double diff_sc;
	time (&tm_1);
	printf ("Enter name of_fav food: ");
	gets (get_inpt);
	time (&tm_2);
	diff_sc = difftime (tm_2,tm_1);
	printf ("It took almost %.2lf seconds_for typing the time...\n", diff_sc );
	return 0;
}

   Output:

Enter name of_fav food: banana
It took almost 2.00 seconds_for typing the time...

   Explanation: This program demonstrates the function diff_sc with some of the time differences in
   comparison and it helps in understanding the instantaneous time for switching or any other
   functionality to work. Here one option is given by entering the name of fav food and comparing and
   fetching the instance of time with a difference with respect to the operating system as shown in the
   output.

   The clock () function in C plays an important role as it helps developers gain insight into the
   timing constraints with respect to the current system or processor in use. It gives developers the
   ability to differentiate and troubleshoot even if some of the patches and releases are made with help
   of a check and run this clock() and ctime function as part of the same standard library for
   verification.



---
https://www.w3resource.com/c-programming/time/c-clock.php


C clock() function
December 20 2022

C clock() function - Report CPU time used
   The clock() function is used to get the processor time used by the process since the beginning of an
   implementation-defined era related only to the process invocation.

   Syntax:
clock_t clock(void)

   Parameters:
   Not available

   Return value from clock() function
     * If the value of the processor time is not available or cannot be represented, the clock()
       function returns the value (clock_t)-1.

   Example: clock() function
   Following function prints the time that has elapsed since the program was invoked:

#include <time.h>
#include <stdio.h>

double time1, time_diff;

int main(void) {
	int n;

	time1 = (double) clock();  // get initial time
	time1 = time1 / CLOCKS_PER_SEC;  // in seconds

	/* Running the FOR loop 100000000 times */
	for (n=0; n<100000000; n++);

	/* call clock a second time */
	time_diff = (((double) clock()) / CLOCKS_PER_SEC) - time1;
	printf("The elapsed time is %lf seconds\n", time_diff);
}

   Output:
The elapsed time is 0.144000 seconds



---
https://people.cs.rutgers.edu/~pxk/416/notes/c-tutorials/gettime.html

C Tutorial: Use Linux's high resolution clock

   Note: The clock_gettime system call described here is not supported by OS X.

Clock_gettime
   The clock_gettime system call is a successor to the gettimeofday system call with a few key
   changes: higher precision and the ability to request specific clocks. It fills in a structure
   containing two fields: a seconds and a nanosecond count of the time since the Epoch (00:00 1 January,
   1970 UTC). This is similar to the struct timeval that gettimeofday used except that the microsecond
   field is now replaced with a nanosecond field.

struct timespec {
	time_t   tv_sec;        /* seconds */
	long     tv_nsec;       /* nanoseconds */
};

   The clock_gettime system call has the following usage:
   
   #include <time.h>
   int clock_gettime(clockid_t clk_id, struct timespec *tp);

   The second parameter is the time structure that will be filled in by the system call to contain the
   value of the clock. The first parameter, clock ID, allows you to specify the clock you are interested
   in using. The following are available:

   ----------------------------------------------------------------------------------------------------------
   clock ID                 meaning
   ----------------------------------------------------------------------------------------------------------
   CLOCK_REALTIME           System-wide real-time clock. This clock is supported by all implementations and
                            returns the number of seconds and nanoseconds since the Epoch. This clock can be
                            set via clock_settime but doing so requires appropriate privileges. When the system
                            time is changed, timers that measure relative intervals are not affected but timers
                            for absolute point in times are.

   CLOCK_REALTIME_COARSE    (Linux-specific) Faster than CLOCK_REALTIME but not as accurate.
   CLOCK_MONOTONIC          Represents monotonic time since some unspecified starting point. This clock
                            cannot be set.

   CLOCK_MONOTONIC_RAW      (Linux-specific) Similar to CLOCK_MONOTONIC, but provides access to a raw
                            hardware-based time that is not subject to NTP adjustments.

   CLOCK_MONOTONIC_COARSE   (Linux-specific) Like CLOCK_MONOTONIC but faster and not as accurate.
   CLOCK_PROCESS_CPUTIME_ID High-resolution per-process timer from the CPU.
   CLOCK_THREAD_CPUTIME_ID  Thread-specific CPU-time clock.
   ----------------------------------------------------------------------------------------------------------

   As with gettimeofday, the resolution depends on the implementation, so do not always expect to get
   nanosecond precision. The clock_getres system call returns the resolution of the specified clock.
   This is informational data since you do not need to apply any scaling factors to data returned by
   clock_gettime: the values are in seconds and nanoseconds.

   #include <time.h>
   int clock_getres(clockid_t clk_id, struct timespec *res);

   For example, if a clock's resolution is 1024 Hz (1/1,024 second), then the resulting resolution is
   976562.5 nanoseconds, which will be reported by clock_getres as 976562.

Which clock to use
   For getting the system's idea of the time of day (in seconds since the Epoch), one should use

   clock_gettime(CLOCK_REALTIME, &tp).

   For measuring elapsed time, CLOCK_MONOTONIC is recommended. This clock will not necessarily reflect
   the time of day but, unlike CLOCK_REALTIME, it is guaranteed to always be linearly increasing
   (although not necessarily between reboots). CLOCK_MONOTONIC is affected by adjustments caused by the
   Network Time Protocol (NTP) daemon. However, NTP adjustments will not cause this clock to jump; it's
   rate might be adjusted to compensate for clock drift. CLOCK_REALTIME, on the other hand, may leap
   forward or even backward after a time adjustment.

   CLOCK_MONOTONIC_RAW is available only on some Linux kernels and the tick rate will never be adjusted
   by NTP. This is fine for short programs but a clock drift over longer periods of time may produce
   inaccurate results.

   The CLOCK_PROCESS_CPU_TIME_ID clock measures only the CPU time consumed by the process. If the kernel
   puts the process to sleep, the time it spends waiting is not counted. If a process has multiple
   threads, CLOCK_THREAD_CPUTIME_ID is similar but measures only the CPU time spent on the thread that
   is making the request.

Example
   To compile a program that uses clock_gettime, you need to link with librt.a (the real-time library)
   by specifying -lrt on your compile line.

   This example marks the start time by getting the value of CLOCK_MONOTONIC. The process then sleeps
   for a second and marks the stop time by getting the value of CLOCK_MONOTONIC a second time. It then
   does the same thing again but uses CLOCK_PROCESS_CPUTIME_ID. Since the CPU is not used for the time
   that the process is sleeping, the results are substantially shorter.


[https://people.cs.rutgers.edu/~pxk/416/notes/c-tutorials/files/gettime.c]

/*
 * gettime - get time via clock_gettime
 * N.B.: OS X does not support clock_gettime
 * 
 * Paul Krzyzanowski
 */

#include <stdio.h>      /* for printf */
#include <stdint.h>     /* for uint64 definition */
#include <stdlib.h>     /* for exit() definition */
#include <time.h>       /* for clock_gettime */

#define BILLION 1000000000L

int localpid(void) {
	static int a[9] = { 0 };
	return a[0];
}

main(int argc, char **argv) {
	uint64_t diff;
	struct timespec start, end;
	int i;

	/* measure monotonic time */
	clock_gettime(CLOCK_MONOTONIC, &start); /* mark start time */
	sleep(1);       /* do stuff */
	clock_gettime(CLOCK_MONOTONIC, &end);   /* mark the end time */

	diff = BILLION * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
	printf("elapsed time = %llu nanoseconds\n", (long long unsigned int) diff);

	/* now re-do this and measure CPU time */
	/* the time spent sleeping will not count (but there is a bit of overhead */
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &start);        /* mark start time */
	sleep(1);       /* do stuff */
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &end);          /* mark the end time */

	diff = BILLION * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
	printf("elapsed process CPU time = %llu nanoseconds\n", (long long unsigned int) diff);

	exit(0);
}

   Save this file by control-clicking or right clicking the download link and then saving it as
   gettime.c.

   Compile this program via:
   gcc -o gettime gettime.c -lrt

   If you don't have gcc, You may need to substitute the gcc command with cc or another name of your
   compiler.

   Run the program:
   ./gettime

   result:

elapsed time = 1009601500 nanoseconds
elapsed process CPU time = 0 nanoseconds



---
https://www.ibm.com/docs/en/zos/2.3.0?topic=functions-clock-determine-processor-time

clock() â€” Determine processor time
2021-03-03

Single UNIX Specification, Version 3

Format
#include <time.h>
clock_t clock(void);

General description
Approximates the processor time used by the program, since the beginning of an implementation-defined time
period that is related to the program invocation. To measure the time spent in a program, call the clock()
function at the start of the program, and subtract its returned value from the value returned by subsequent
calls to clock(). Then, to obtain the time in seconds, divide the value returned by clock() by CLOCKS_PER_SEC.

If you use the system() function in your program, do not rely on clock() for program timing, because calls
to system() may reset the clock.

In a multithread POSIX C application, if you are creating threads with a function that is based on a POSIX.4a
draft standard, the clock() function is thread-scoped.

Returned value
If the time is available and can be represented, clock() returns the calculated time.

If unsuccessful, clock() returns (clock_t)-1. clock() may return -1 when running with STIMER REAL TQE
present on MVSâ„¢/ESA Version 3 Release 1 Modification 2 (or earlier) system. Special behavior for XPG4: If
_XOPEN_SOURCE or _XOPEN_SOURCE_EXTENDED are defined when your application is compiled, CLOCKS_PER_SEC is
defined as 1000000. Also, in this case, the following C/370 pragma in the <time.h> header is used to compile
your application:

#pragma map ( clock(), "@@OCLCK")

Because of this pragma, when your application executes, it will attempt to access an XPG4 version of clock()
which returns a clock_t value in units of 1000000 CLOCKS_PER_SEC. The XPG4 version of clock() is only
available if POSIX(ON) is specified for execution of your application.

If _XOPEN_SOURCE or _XOPEN_SOURCE_EXTENDED are defined when you compile your program AND your application is
run with POSIX(OFF), clock() will return (clock_t)-1.

If neither _XOPEN_SOURCE or _XOPEN_SOURCE_EXTENDED are defined when you compile your application, the
historical C/370 value of CLOCKS_PER_SEC will be used and clock() calls in your application will be mapped
to the historical C/370 version of clock() which returns a clock_t value in historical C/370 CLOCKS_PER_SEC
units whether your application executes with POSIX(ON) or POSIX(OFF).

Example

/*	This example prints the time elapsed since the program was invoked.  */
#include <time.h>
#include <stdio.h>

double time1, timedif;	 /* use doubles to show small values */

int main(void) {
	time1 = (double) clock();             /* get initial time */
	time1 = time1 / CLOCKS_PER_SEC;       /*    in seconds	 */

	/* call clock a second time */
	timedif = ( ((double) clock()) / CLOCKS_PER_SEC) - time1;
	printf("The elapsed time is %f seconds\n", timedif);
}

Related information
    time.h â€” Time and date
    time(),time64() â€” Determine current UTC time



---
https://www.codingunit.com/c-reference-time-h-function-clock

C Reference function clock()

Usage of clock():
   clock_t clock ( void );

Parameters:
   None.

Return Value:
   The number of clock ticks elapsed since the program start. If the function fails then it will return
   a value of -1. The clock_t type is defined in ctime.h.

Explanation:
   The function returns the number of clock ticks elapsed since the start of the program.

   The macro constant expression CLOCKS_PER_SEC specifies the relation between a clock tick and a second
   (clock ticks per second).

   Note:The initial moment of reference used by clock as the beginning of the program on different
   platforms.

Source code example of clock():

#include <stdio.h>
#include <time.h>

void sec_wait ( int sec ) {
	clock_t wait_till_end;
	wait_till_end = clock () + sec * CLOCKS_PER_SEC ;
	while (clock() < wait_till_end) {}
}

int main () {
	int i;
	printf ("Starting countdown...\n");
	for (i=10; i>0; i--) {
		printf ("%d\n",i);
		sec_wait (1);
		if ( i == 3 )
			printf ("Engine started...\n");
	}
	printf ("and lift off....\n");
	return 0;
}


Output example of the program above:

        Starting countdown...
        10
        9
        8
        7
        6
        5
        4
        3
        Engine started...
        2
        1
        And lift off....


   This entry was posted in C Reference time.h Functions. You can follow any responses to this entry
   through the RSS 2.0 feed. Both comments and pings are currently closed. Tweet This! Tweet
   This! or use to share this post with others.



---

