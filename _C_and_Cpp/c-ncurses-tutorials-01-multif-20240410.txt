filename: c_ncurses-tutorials_01-multif_20240410.txt
https://www.sbarjatiya.com/notes_wiki/index.php/Using_ncurses_library_with_C

Using ncurses library with C

Steps for using ncurses library in C program

    1. #include <ncurses.h>
    2. Compile using -lncurses
    3. Call initscr(). It allocates memory for present window which is called stdscr.
    4. Use printw() in place of printf().
    5. Don't forget to use refresh() after every or series of printw() so that changes reflect on
       window. Changes are made only in memory by printw() to see those changes we must refresh() the
       screen.
    6. Always use endwin() when you end the program. Forgetting to use it may result in crashing the
       terminal window.

   You now know sufficient to initialize the window, print something and close the window. Try using it
   before proceeding.

Example(01)

#include <ncurses.h>

int main() {
	initscr();                        /* Start curses mode              */
	printw("Hello World !!!");        /* Print Hello World              */
	refresh();                        /* Print it on to the real screen */
	getch();                          /* Wait for user input            */
	endwin();                         /* End curses mode                */

	return 0;
}

   echo() and noecho()
          These functions control the echoing of characters typed by the user to the terminal. noecho()
          switches off echoing. The reason you might want to do this is to gain more control over
          echoing or to suppress unnecessary echoing while taking input from the user through the
          getch() etc. functions.

   keypad()
          It enables the reading of function keys like F1, F2, arrow keys etc. Almost every interactive
          program enables this, as arrow keys are a major part of any User Interface. Do keypad(stdscr,
          TRUE) to enable this feature for the regular screen (stdscr).

   raw() and cbreak()
          Normally the terminal driver buffers the characters a user types until a new line or carriage
          return is encountered. But most programs require that the characters be available as soon as
          the user types them. The above two functions are used to disable line buffering. The
          difference between these two functions is in the way control characters like suspend (CTRL-Z),
          interrupt and quit (CTRL-C) are passed to the program. In the raw() mode these characters are
          directly passed to the program without generating a signal. In the cbreak() mode these control
          characters are interpreted as any other character by the terminal driver.

   Try the aove commands with the following example and some code of your own.

Example(02)

#include <ncurses.h>

int main() {
	int ch;

	initscr();                      /* Start curses mode              */
	raw();                          /* Line buffering disabled        */
	keypad(stdscr, TRUE);           /* We get F1, F2 etc..            */
	noecho();                       /* Don't echo() while we do getch */

	printw("Type any character to see it in bold\n");
	ch = getch();                   /* If raw() hadn't been called
	                                 * we have to press enter before it
	                                 * gets to the program            */

	if (ch == KEY_F(2)) {            /* Without keypad enabled this will */
		printw("F2 Key pressed");   /*  not get to us either            */

	/* Without noecho() some ugly escape
	 * charachters might have been printed
	 * on screen                    */
	} else {
		printw("The pressed key is ");
		attron(A_BOLD);
		printw("%c", ch);
		attroff(A_BOLD);
	}

	refresh();                      /* Print it on to the real screen */
	getch();                        /* Wait for user input */
	endwin();                       /* End curses mode                */

	return 0;
}

   What is a window?
   A Window is an imaginary screen defined by curses system. A window does not mean a bordered
   window which you usually see on Win9X platforms. When

   curses is initialized, it creates a default window named stdscr which represents your 80x25 (or the
   size of window in which you are running) screen. If you are doing simple tasks like printing few
   strings, reading input etc., you can safely use this single window for all of your purposes. You can
   also create windows and call functions which explicitly work on the specified window.

   For example, if you call
   printw("Hi There !!!");
   refresh();

   It prints the string on stdscr at the present cursor position. Similarly the call to
   refresh(), works on stdscr only.

   Say you have created windows then you have to call a function with a 'w' added to the usual
   function.
   wprintw(win, "Hi There !!!");
   wrefresh(win);

   As you will see in the rest of the document, naming of functions follow the same convention.
   For each function there usually are three more functions.

    printw(string);                 /* Print on stdscr at present cursor position     */
    mvprintw(y, x, string);         /* Move to (y, x) then print string               */
    wprintw(win, string);           /* Print on window win at present cursor position */
                                    /* in the window                                  */
    mvwprintw(win, y, x, string);   /* Move to (y, x) relative to window              */
                                    /* co-ordinates and then print                    */

   Usually the w-less functions are macros which expand to corresponding w-function with stdscr as the
   window parameter.

   move(row, column)
          Moves the cursor to row,column.

   addch()
          These functions put a single character into the current cursor location and advance the
          position of the cursor. You can give the character to be printed but they usually are used to
          print a character with some attributes. Example addch(ch | A_BOLD | A_UNDERLINE)

Example(03)

#include <ncurses.h>                                 /* ncurses.h includes stdio.h */
#include <string.h>

int main() {
	char mesg[]="Just a string";                     /* message to be appeared on the screen */
	int row,col;                                     /* to store the number of rows and *
	                                                 * the number of colums of the screen */
	initscr();                                       /* start the curses mode */
	getmaxyx(stdscr,row,col);                        /* get the number of rows and columns */
	mvprintw(row/2,(col-strlen(mesg))/2,"%s",mesg);  /* print the message at the
	                                                           center of the screen */

	mvprintw(row-2,0,"This screen has %d rows and %d columns\n",row,col);
	printw("Try resizing your window(if possible) and then run this program again");
	refresh();
	getch();
	endwin();

	return 0;
}

   getmaxyx()
          The above program introduces us to a new function getmaxyx(), a macro defined in ncurses.h. It
          gives the number of columns and the number of rows in a given window. getmaxyx() does this by
          updating the variables given to it. Since getmaxyx() is not a function we don't pass pointers
          to it, we just give two integer variables.

   addstr()
          addstr() is used to put a character string into a given window. This function is similar to
          calling addch() once for each character in a given string. This is true for all output
          functions. There are other functions from this family such as mvaddstr(),mvwaddstr() and
          waddstr(), which obey the naming convention of curses.(e.g. mvaddstr() is similar to the
          respective calls move() and then addstr().) Another function of this family is addnstr(),
          which takes an integer parameter(say n) additionally. This function puts at most n characters
          into the screen. If n is negative, then the entire string will be added.

   All these functions take y co-ordinate first and then x in their arguments.

   getch()
          These functions read a single character from the terminal. But there are several subtle facts
          to consider. For example if you don't use the function cbreak(), curses will not read your
          input characters contiguously but will begin read them only after a new line or an EOF is
          encountered. In order to avoid this, the cbreak() function must used so that characters are
          immediately available to your program. Another widely used function is noecho(). As the name
          suggests, when this function is set (used), the characters that are keyed in by the user will
          not show up on the screen.

   scanw()
          These functions are similar to scanf() with the added capability of getting the input from any
          location on the screen.

   getstr()
          These functions are used to get strings from the terminal. In essence, this function performs
          the same task as would be achieved by a series of calls to getch() until a newline, carriage
          return, or end-of-file is received. The resulting string of characters are pointed to by str,
          which is a character pointer provided by the user.


Example(04)

#include <ncurses.h>                        /* ncurses.h includes stdio.h */
#include <string.h>

int main() {
	char mesg[]="Enter a string: ";         /* message to be appeared on the screen */
	char str[80];
	int row,col;                            /* to store the number of rows and *
	                                         * the number of colums of the screen */
	initscr();                              /* start the curses mode */
	getmaxyx(stdscr,row,col);               /* get the number of rows and columns */

	mvprintw(row/2,(col-strlen(mesg))/2,"%s",mesg);

	/* print the message at the center of the screen */
	getstr(str);
	mvprintw(LINES - 2, 0, "You Entered: %s", str);
	getch();
	endwin();

	return 0;
}

   Using Attributes
          We have seen an example of how attributes can be used to print characters with some special
          effects. Attributes, when set prudently, can present information in an easy, understandable
          manner. The following program takes a C file as input and prints the file with comments in
          bold. Scan through the code.

Example(05)

#include <ncurses.h>

int main(int argc, char *argv[]) {
	int ch, prev;
	FILE *fp;
	int goto_prev = FALSE, y, x;

	if (argc != 2) {
		printf("Usage: %s <a c file name>\n", argv[0]);
		exit(1);
	}

	fp = fopen(argv[1], "r");

	if (fp == NULL) {
		perror("Cannot open input file");
		exit(1);
	}

	initscr();                      /* Start curses mode */

	prev = EOF;
	while((ch = fgetc(fp)) != EOF) {
		if (prev == '/' && ch == '*') {  /* If it is / and * then olny
			                             * switch bold on */
			attron(A_BOLD);
			goto_prev = TRUE;       /* Go to previous char / and
			                         * print it in BOLD */
		}

		if (goto_prev == TRUE) {
			getyx(stdscr, y, x);
			move(y, x - 1);
			printw("%c%c", '/', ch); /* The actual printing is done
			                          * here */
			ch = 'a';                /* 'a' is just a dummy
			                          * character to prevent */
			// "/*/" comments.
			goto_prev = FALSE;      /* Set it to FALSE or every
			                         * thing from here will be / */
		} else {
			printw("%c", ch);
		}
		refresh();
		if (prev == '*' && ch == '/') {
			attroff(A_BOLD);        /* Switch it off once we got *
			                           and then / */
		}
		prev = ch;
	}
	getch();
	endwin();                       /* End curses mode                */
	return 0;
}

   Don't worry about all those initialization and other crap. Concentrate on the while loop. It reads
   each character in the file and searches for the pattern /*. Once it spots the pattern, it switches
   the BOLD attribute on with * attron() . When we get the pattern */ it is switched off by attroff() .

   The above program also introduces us to two useful functions getyx() and move(). The first function
   gets the co-ordinates of the present cursor into the variables y, x. Since getyx() is a macro we
   don't have to pass pointers to variables. The function move() moves the cursor to the co-ordinates
   given to it.

   The above program is really a simple one which doesn't do much. On these lines one could write a more
   useful program which reads a C file, parses it and prints it in different colors. One could even
   extend it to other languages as well.

   The details of various attributes available and their functions
   Let's get into more details of attributes. The functions attron(), attroff(), attrset() , and
   their sister functions attr_get() etc.. can be used to switch attributes on/off , get
   attributes and produce a colorful display.

   The functions attron and attroff take a bit-mask of attributes and switch them on or off,
   respectively. The following video attributes, which are defined in <curses.h> can be passed to
   these functions.

    A_NORMAL        Normal display (no highlight)
    A_STANDOUT      Best highlighting mode of the terminal.
    A_UNDERLINE     Underlining
    A_REVERSE       Reverse video
    A_BLINK         Blinking
    A_DIM           Half bright
    A_BOLD          Extra bright or bold
    A_PROTECT       Protected mode
    A_INVIS         Invisible or blank mode
    A_ALTCHARSET    Alternate character set
    A_CHARTEXT      Bit-mask to extract a character
    COLOR_PAIR(n)   Color-pair number n

   We can OR(|) any number of above attributes to get a combined effect. If you wanted reverse video
   with blinking characters you can use
   attron(A_REVERSE | A_BLINK);

   attron() vs. attrset()
          Then what is the difference between attron() and attrset()? attrset sets the attributes of
          window whereas attron just switches on the attribute given to it. So attrset() fully overrides
          whatever attributes the window previously had and sets it to the new attribute(s). Similarly
          attroff() just switches off the attribute(s) given to it as an argument. This gives us the
          flexibility of managing attributes easily.But if you use them carelessly you may loose track
          of what attributes the window has and garble the display. This is especially true while
          managing menus with colors and highlighting. So decide on a consistent policy and stick to it.
          You can always use standend() which is equivalent to attrset(A_NORMAL) which turns off all
          attributes and brings you to normal mode.

   attrget()
          The function attr_get() gets the current attributes and color pair of the window. Though we
          might not use this as often as the above functions, this is useful in scanning areas of
          screen. Say we wanted to do some complex update on screen and we are not sure what attribute
          each character is associated with. Then this function can be used with either attrset or
          attron to produce the desired effect.

   chgat() // **gat not get**
          It actually is a useful one. This function can be used to set attributes for a group of
          characters without moving. I mean it !!! without moving the cursor :-) It changes the
          attributes of a given number of characters starting at the current cursor location.
          We can give -1 as the character count to update till end of line. If you want to change
          attributes of characters from current position to end of line, just use this.
          chgat(-1, A_REVERSE, 0, NULL);
          This function is useful when changing attributes for characters that are already on the
          screen. Move to the character from which you want to change and change the attribute.

          Other functions wchgat(), mvchgat(), wchgat() behave similarly except that the w functions
          operate on the particular window. The mv functions first move the cursor then perform the work
          given to them. Actually chgat is a macro which is replaced by a wchgat() with stdscr as the
          window. Most of the "w-less" functions are macros.

Example(06)

#include <ncurses.h>

int main(int argc, char *argv[]) {
	initscr();                      /* Start curses mode            */
	start_color();                  /* Start color functionality    */

	init_pair(1, COLOR_CYAN, COLOR_BLACK);
	printw("A Big string which i didn't care to type fully ");
	mvchgat(0, 0, -1, A_BLINK, 1, NULL);
	/*
	 * First two parameters specify the position at which to start
	 * Third parameter number of characters to update. -1 means till
	 * end of line
	 * Forth parameter is the normal attribute you wanted to give
	 * to the charcter
	 * Fifth is the color index. It is the index given during init_pair()
	 * use 0 if you didn't want color
	 * Sixth one is always NULL
	 */
	refresh();
	getch();
	endwin();                       /* End curses mode                */
	return 0;
}

Windows creating and deleting

Example(07)

#include <ncurses.h>

WINDOW *create_newwin(int height, int width, int starty, int startx);
void destroy_win(WINDOW *local_win);

int main(int argc, char *argv[]) {
	WINDOW *my_win;
	int startx, starty, width, height;
	int ch;
	initscr();                  /* Start curses mode            */
	raw();                      /* Line buffering disabled, Pass on
	                             * everty thing to me           */
	noecho();

	keypad(stdscr, TRUE);               /* I need that nifty F2         */
	height = 3;
	width = 10;
	starty = (LINES - height) / 2;      /* Calculating for a center placement */
	startx = (COLS - width) / 2;        /* of the window                */
	printw("Press F2 to exit");
	refresh();

	my_win = create_newwin(height, width, starty, startx);

	while((ch = getch()) != KEY_F(2)) {
		switch(ch) {
			case KEY_LEFT:
				destroy_win(my_win);
				my_win = create_newwin(height, width, starty,--startx);
				break;

			case KEY_RIGHT:
				destroy_win(my_win);
				my_win = create_newwin(height, width, starty,++startx);
				break;

			case KEY_UP:
				destroy_win(my_win);
				my_win = create_newwin(height, width, --starty,startx);
				break;

			case KEY_DOWN:
				destroy_win(my_win);
				my_win = create_newwin(height, width, ++starty,startx);
				break;
		}
	}
	endwin();                   /* End curses mode                */
	return 0;
}

WINDOW *create_newwin(int height, int width, int starty, int startx) {
	WINDOW *local_win;
	local_win = newwin(height, width, starty, startx);
	box(local_win, 0 , 0);              /* 0, 0 gives default characters
	                                       for the vertical and horizontal
	                                       lines                       */
	wrefresh(local_win);                /* Show that box                */
	return local_win;
}

void destroy_win(WINDOW *local_win) {
	/* box(local_win, ' ', ' '); : This won't produce the desired
	 * result of erasing the window. It will leave it's four corners
	 * and so an ugly remnant of window.  */

	wborder(local_win, ' ', ' ', ' ',' ',' ',' ',' ',' ');

	/* The parameters taken are
	 * 1. win: the window on which to operate
	 * 2. ls: character to be used for the left side of the window
	 * 3. rs: character to be used for the right side of the window
	 * 4. ts: character to be used for the top side of the window
	 * 5. bs: character to be used for the bottom side of the window
	 * 6. tl: character to be used for the top left corner of the window
	 * 7. tr: character to be used for the top right corner of the window
	 * 8. bl: character to be used for the bottom left corner of the window
	 * 9. br: character to be used for the bottom right corner of the window */

	wrefresh(local_win);
	delwin(local_win);
}



---
https://rhardih.io/2010/04/using-ncurses-in-c-for-text-user-interfaces-featuring-xcode/

Using ncurses in C for Text User Interfaces, featuring Xcode
April 21, 2010

Premise
   Being the *nix fanboy that I am, I love having terminal access to my system. Most *nix based OS's
   have the same base set of awesome command-line tools. The majority of these are simply "set and run"
   programs, but some have Text User Interfaces, (TUI), as well. A few of my favourites include
   screen, bmon, htop and lynx. Be sure to check those out if you haven't already.

   If you've ever written a small command-line program that relied on any kind of user input, you've
   probably already coded your own rudimentary menu system at some point. It's really not that
   difficult, but.. things can quickly get messy and you'd soon wish you had found an easier way of
   handling terminal control. Enter ncurses (new curses), a library for writing terminal-independent
   TUIs.

The project
   There's quite a few run-of-the-mill tutorials for curses out there, but doing a traditional "Hello
   World!" program just feels so uninspired. Instead we are going to do a simplified version of the
   classic game Snake, let's call it PieceOfCakeSnake. In PieceOfCakeSnake you win simply by
   playing, there is no opponents, no consumables and no way of dying. Just a single, fixed-size, snake
   moving around in it's little box world. The game starts right away upon launch and Snakey, our main
   character, is moving happily along from the get-go. The game ends when 'x' is pressed.

Hammer and chisel
   For no particular reason, I'm going to use Xcode for PieceOfCakeSnake and write it in C. If
   you want to use another editor be my guest, it's much the same since it's going to be run in a
   regular terminal anyway.

   Now fire up Xcode and create a new project. Chose "Command Line Utility" > "Standard Tool". Name the
   project and save it where you want.

   Xcode have already created a main.c file for us that simply outputs "Hello World!" and exits. Click
   "Run" > "Console" and click "Build and Go". If all is well, the program builds without error and you
   should see something like this:

   Now, ncurses comes native with Mac OS X, but for other systems you might need to install it
   beforehand. E.g. for Ubuntu there is the libncurses5 package.

   There is still a little more to be done before we start coding. To get access to all the ncurses
   functions we have to tell the linker, to include the library at compile time. This is done by adding
   the line #include <ncurses.h> at the top of main.c and by supplying the linker flag -lncurses to the
   compiler. If you are compiling this from the terminal with GCC, the command would be:
$> gcc main.c -lncurses -o pocs main.c

   Where pocs is the resultant executable. In Xcode however, we rely on the provided build system and
   so, the linker flag is set in the project properties. Click "Project" > "Edit Project Settings",
   chose the "Build" tab and find the field named "Other Linker Flags" and insert "-lncurses".

   That should do it, we are set to go.

Let's see some code
   In this first step, we'll create a world for Snakey, a square box positioned in the middle of the
   terminal screen. Here's the code:
#include

#define WORLD_WIDTH 50
#define WORLD_HEIGHT 20

int main(int argc, char *argv[]) {

	WINDOW *snakeys_world;
	int offsetx, offsety;

	initscr();
	refresh();

	offsetx = (COLS - WORLD_WIDTH) / 2;
	offsety = (LINES - WORLD_HEIGHT) / 2;

	snakeys_world = newwin(WORLD_HEIGHT,
	                       WORLD_WIDTH,
	                       offsety,
	                       offsetx);

	box(snakeys_world, 0 , 0);
	wrefresh(snakeys_world);
	getch();
	delwin(snakeys_world);
	endwin();

	return 0;
}

   Notice the WINDOW type. With ncurses everything is drawn on windows. By default, ncurses sets up a
   root window, stdscr, which backdrops the current terminal display.

   To use it we call initscr(), which prepares the terminal for curses mode, allocates memory for stdscr
   and so forth.

   The windows in ncurses are buffered, in the sense that you can do multiple drawing operations on a
   window, before making them show up on screen. To display the contents of a window in the actual
   terminal, the window needs to be refreshed.

   For stdscr, this is done by calling refresh(), for child windows we use wrefresh(). This also shows
   the easy-to-remember naming convention used in the ncurses library - most functions that can be
   applied to stdscr, also has a counterpart, which applies to child windows, simply named by prepending
   a 'w' to the function name. E.g. refresh() and wrefresh(). We'll se more of this in the finished
   version.

   Instead of drawing the box manually, we take a shortcut by creating a new window and using the
   function box() to draw a border around the window. box() can use any displayable character to draw
   the borders. Using 0 defaults to a system specific line character.

   Note: COLS and LINES are environment variables, that holds the current width and height of your
   terminal. That is the number of horizontal and vertical character positions available in the window.

   The getch() function is simply there to pause program execution until some keyboard input is
   received. Thus a key press exits the program.

   Functions delwin() and endwin() handles memory deallocation and returns the terminal to it's former
   state. If these are omitted, the terminal will not behave as expected upon program termination and
   will probably need to be reset.

Time for some action
   Now for the fun part - putting Snakey in his box and getting him to move about. Since this entry is
   about ncurses, I'm not going to go into the mechanics of the game itself. It's a very simple
   implementation and the code should be rather self explanatory. You can download the source file
   here or just read from the following:

#include <ncurses.h>

#define TICKRATE 100

#define WORLD_WIDTH 50
#define WORLD_HEIGHT 20

#define SNAKEY_LENGTH 40

enum direction { UP, DOWN, RIGHT, LEFT };

typedef struct spart {
	int x;
	int y;
} snakeypart;

int move_snakey(WINDOW *win, int direction, snakeypart snakey[]);

int main(int argc, char *argv[]) {

	WINDOW *snakeys_world;
	int offsetx, offsety, i, ch;

	initscr();
	noecho();
	cbreak();
	timeout(TICKRATE);
	keypad(stdscr, TRUE);

	printw("PieceOfCakeSnake v. 1.0  -  Press x to quit...");

	refresh();

	offsetx = (COLS - WORLD_WIDTH) / 2;
	offsety = (LINES - WORLD_HEIGHT) / 2;

	snakeys_world = newwin(WORLD_HEIGHT,
	                       WORLD_WIDTH,
	                       offsety,
	                       offsetx);

	snakeypart snakey[SNAKEY_LENGTH];

	int sbegx = (WORLD_WIDTH - SNAKEY_LENGTH) / 2;
	int sbegy = (WORLD_HEIGHT - 1) / 2;

	for (i = 0; i < SNAKEY_LENGTH; i++) {
		snakey[i].x = sbegx + i;
		snakey[i].y = sbegy;
	}

	int cur_dir = RIGHT;

	while ((ch = getch()) != 'x') {
		move_snakey(snakeys_world, cur_dir, snakey);
		if (ch != ERR) {
			switch(ch) {
				case KEY_UP:
					cur_dir = UP;
					break;
				case KEY_DOWN:
					cur_dir = DOWN;
					break;
				case KEY_RIGHT:
					cur_dir = RIGHT;
					break;
				case KEY_LEFT:
					cur_dir = LEFT;
					break;
				default:
					break;
			}
		}
	}

	delwin(snakeys_world);
	endwin();

	return 0;
}

int move_snakey(WINDOW *win, int direction, snakeypart snakey[]) {

	wclear(win);

	for (int i = 0; i < SNAKEY_LENGTH - 1; i++) {
		snakey[i] = snakey[i + 1];
		mvwaddch(win, snakey[i].y, snakey[i].x, '#');
	}

	int x = snakey[SNAKEY_LENGTH - 1].x;
	int y = snakey[SNAKEY_LENGTH - 1].y;
	switch (direction) {
		case UP:
			y - 1 == 0 ? y = WORLD_HEIGHT - 2 : y--;
			break;
		case DOWN:
			y + 1 == WORLD_HEIGHT - 1 ? y = 1 : y++;
			break;
		case RIGHT:
			x + 1 == WORLD_WIDTH - 1 ? x = 1 : x++;
			break;
		case LEFT:
			x - 1 == 0 ? x = WORLD_WIDTH - 2 : x--;
			break;
		default:
			break;
	}

	snakey[SNAKEY_LENGTH - 1].x = x;
	snakey[SNAKEY_LENGTH - 1].y = y;

	mvwaddch(win, y, x, '#');
	box(win, 0 , 0);
	wrefresh(win);

	return 0;
}

   There is a few new ncurses functions being used here. Let's start at the top. In main I've added:
noecho();
cbreak();
timeout(TICKRATE);
keypad(stdscr, TRUE);
printw("PieceOfCakeSnake v. 1.0  -  Press x to quit...");

   From top to bottom. noecho() subverts the terminal from printing back the users key presses. This is
   useful, since otherwise we would quickly have a lot of garbage on-screen from using the arrow keys to
   guide Snakey.

   cbreak() disables line buffering and feeds input directly to the program. If this wasn't called,
   character input would be delayed until a newline was entered. Since we would like immediate response
   from Snakey, this is needed.

   timeout() sets an input delay, in milliseconds, for stdscr, which is applied during input with
   getch() and sibling functions. If the user doesn't input anything within this given time period,
   getch() returns with value ERR. Useful in this part of the code, where we would like Snakey to move,
   even when we are not pressing any keys.:

while ((ch = getch()) != 'x') {
	move_snakey(snakeys_world, cur_dir, snakey);
	if (ch != ERR) {
		...
	}
}

   while ((ch = getch()) != 'x') { move_snakey(snakeys_world, cur_dir, snakey); if (ch != ERR) { ... } }

   The keypad() function enables or disables special input characters for a given window. F keys and
   arrow keys for example.

   printw() works like the standard library function printf. That is print a given string at the current
   cursor location.

   To separate things a little, we have an auxiliary function move_snakey(), which handles movement and
   redrawing of Snakey within the box. There is a few ncurses specific functions in there as well:

   You could chose to add and remove individual characters if you want to be explicit, but I'm lazy, so
   I clear the whole window and redraw it again every time Snakey has moved. Clearing is done with
   clear() for stdscr and wclear() for child windows.

   The last function to mention is mvwaddch(), which moves, notice mv, to coordinate x, y, in a child
   window, notice w, and adds a character at that position.

   The mv prepend, like w, is also a part of the naming convention of ncurses. Thus most drawing
   operations have an extended version, that besides the item to be drawn, takes a set of coordinates of
   where to move the cursor before drawing it. E.g. printw() and mvprintw.

Goodbye Snakey
   PieceOfCakeSnake is a very simple demonstration and only shows a very small subset of the features
   available with ncurses. For the inspired reader however, it should be no problem extending the game
   with a menu system, a scoreboard and more, using only the small part demonstrated here.



---
https://www.viget.com/articles/game-programming-in-c-with-the-ncurses-library/

Game Programming in C with the Ncurses Library
March 25, 2014

   If you've ever wanted to create a simple video game that oozes lo-fi 1980's home computer nostalgia,
   you should definitely check out the ncurses programming library. It's a modern implementation of
   the original curses library that shipped with early versions of BSD UNIX. You might not be
   familiar with the name "ncurses", but you use it every time you type the characters t-o-p into your
   terminal.

   To show the most basic usage of how you would use the ncurses library in your program, let's create a
   simple simulation of a "ball" bouncing back and forth across the screen:

   Make sure you have a C compiler installed on your machine and have the ncurses headers available. I'm
   writing this on OSX Mavericks (which requires installing XCode), but other flavors of Unix should
   have the headers available for installation if they don't ship with the OS (e.g. apt-get install
   libncurses5-dev on Ubuntu).

   Once you have the necessary dependencies installed, let's start with the basic building block of any
   ncurses-based program: the window.

Windows

   Since we have a simple simulation, we only need to create a single window and draw to it:
initscr(); // Initialize the window
noecho();  // Don't echo any keypresses
curs_set(FALSE); // Don't display a cursor

   To test this right now, create a Makefile:
# Makefile
LDFLAGS=-lncurses

all: demo

   And a source file (we'll continue to use this file as we enhance the functionality over the course of
   this post):

// demo.c
#include <ncurses.h>
#include <unistd.h>

int main(int argc, char *argv[]) {

	initscr();
	noecho();
	curs_set(FALSE);
	sleep(1);
	endwin(); // Restore normal terminal behavior
}

   Then compile and run the program:
$> make && ./demo

   You'll see the screen go blank for a second and then your previous terminal will be restored. Not
   particularly exciting, but it sets the stage for drawing to the screen.

Drawing
   Printing characters to our newly-created window is pretty simple. You treat the screen as a series of
   XY coordinates when deciding where to display text. Since characters are buffered before they're
   displayed on the screen, you need to refresh the window to see them.

   For this, we use the function mvprintw() in combination with refresh():

#include <ncurses.h>
#include <unistd.h>

int main(int argc, char *argv[]) {

	initscr();
	noecho();
	curs_set(FALSE);

	mvprintw(0, 0, "Hello, world!");
	refresh();
	sleep(1);
	endwin();
}

   Now, the text 'Hello, world!' will appear in the upper left corner of the screen for a second before
   your terminal window is restored. Remember that it's important that you call refresh() when you want
   to update your display -- forgetting to do this will prevent the text from being printed on the
   screen.

Moving an Object
   Now that we can print text to the screen, let's move a "ball" across the screen. To do that, we'll
   print the 'o' character at an initial position on the screen and advance it to the right (hit ^C to
   exit):

#include <ncurses.h>
#include <unistd.h>

#define DELAY 30000

int main(int argc, char *argv[]) {
	int x = 0, y = 0;

	initscr();
	noecho();
	curs_set(FALSE);

	while(1) {
		clear(); // Clear the screen of all
		         // previously-printed characters
		mvprintw(y, x, "o"); // Print our "ball" at the current xy position
		refresh();

		usleep(DELAY); // Shorter delay between movements
		x++; // Advance the ball to the right
	}

	endwin();
}

   This will advance the "ball" from the upper left portion of the screen all the way to the right in
   one-second intervals. After a few seconds, you'll notice some undesireable behavior -- when the ball
   reaches the right-most portion of the screen, it continues to move even though we can no longer see
   it.

Collision Detection
   Now that we've got object movement down, let's make it bounce off the "walls". For this you'll use
   the getmaxyx() macro to get the dimensions of the screen and add some simple collision detection
   logic for great justice.

#include <ncurses.h>
#include <unistd.h>

#define DELAY 30000

int main(int argc, char *argv[]) {
	int x = 0, y = 0;
	int max_y = 0, max_x = 0;
	int next_x = 0;
	int direction = 1;

	initscr();
	noecho();
	curs_set(FALSE);

	// Global var `stdscr` is created by the call to `initscr()`
	getmaxyx(stdscr, max_y, max_x);

	while(1) {
		clear();
		mvprintw(y, x, "o");
		refresh();

		usleep(DELAY);

		next_x = x + direction;

		if (next_x >= max_x || next_x < 0) {
			direction*= -1;
		} else {
			x+= direction;
		}
	}

	endwin();
}

   Now the ball bounces as expected -- from left to right and back again, but if you resize the
   right-hand side of the window you'll notice that the ball either goes off the screen or bounces back
   before it hits the edge.

Handling Window Resizing
   In our simple example, handling the case where the user resizes the window while the simuluation is
   running is trivial. Moving the call to getmaxyx() into the main loop will reset the "wall" location:

#include <ncurses.h>
#include <unistd.h>

#define DELAY 30000

int main(int argc, char *argv[]) {

	// ...

	while(1) {
		getmaxyx(stdscr, max_y, max_x);

		clear();
		mvprintw(y, x, "o");
		refresh();

		// ...

	}

	// ...
}

   Now resizing the window when the program is running produces the desired result -- the ball
   consistently bounces off the new "wall" location.

Next Steps
   This should serve as a good starting point for making your own interactive console games. If you've
   read this far and want a more in-depth introduction to the features and useage of the library, check
   out the NCURSES Programming HOWTO and Writing Programs with NCURSES tutorials.

   As your games become more complex, you'll want to read up on the advanced windowing capabilities of
   the library -- take a look at the functions newwin, subwin, wrefresh, and mvwprintw
   to get started. I'll talk more about these and other related topics in future posts.

   For reference, a complete version of the code discussed in this post is
   [https://gist.github.com/reagent/9743630]available as a Gist.



---

