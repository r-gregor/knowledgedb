filename: c_doubly-linked-lists-and-double-pointers_20221127.txt
https://gist.github.com/raemarks/fe71437af4bbc96c3a14

Doubly Linked Lists and Double Pointers (CptS 122 tutoring)

/*
 * Let's talk about doubly-linked lists in C. When we are inserting into a doubly-linked list, we have four
 * situations we need to consider:
 * 1. Inserting into an empty list
 * 2. Inserting the new node so it's the first element in the list
 * 3. Inserting the new node in the middle of the list
 * 4. Inserting the new node so it's the last element of the list
 * Observe our Node struct:
 */
typedef struct node {
	int data;
	struct node *prev;
	struct node *next;
}Node;

/* Our prototype for insert in order: */
void insert_in_order(Node **list, Node *newNode);

/*
 * Our preconditions are that newNode already has its data field assigned and that its prev and next fields
 * are NULL.
 */

/* Let's write insert_in_order. */
void insert_in_order(Node **list, Node *newNode) {

	/* Maintain two pointers to the previous and current nodes: */
	Node *prev, *curr;
	prev = NULL;
	curr = *list;

	/* Case 1: consider if the list is empty: */
	if (*list == NULL) {
		*list = newNode;
		return;
	}

	/* Now iterate until we find the correct position in the list: */
	while (curr != NULL && curr->data < newNode->data) {
		prev = curr;
		curr = curr->next;
	}

	/*
	 * Case 2: now consider if we are at the beginning of the list. We know we haven't entered the loop if
	 * prev never got reassigned:
	 */
	if (prev == NULL) {
		newNode->next = curr;

		/* Next line not needed if it's a singly linked list */
		curr->prev = newNode;
		*list = newNode;
	}

	/* Case 3: now consider if we are in between nodes in the list: */
	else if (curr != NULL) {
		prev->next = newNode;
		newNode->next = curr;

		/* Next two lines not needed if it's a singly linked list */
		curr->prev = newNode;
		newNode->prev = prev;
	}

	/*
	 * Case 4: now consider if we are inserting at the end of the list. We know we are at the end if curr is
	 * NULL, but we know at this point that we must be at the end, since the list is not empty, we aren't
	 * inserting at the front, and we aren't inserting in the middle:
	 */
	else {
		prev->next = newNode;
		/* Next line not needed if singly linked list */
		newNode->prev = prev;
	}

	/* Now we are done! */
	return;
}

/*
 * Whenever you need to modify a list, always consider your previous and next pointers, and which need to be
 * assigned.
 * It's always a good idea
 * to draw your list and
 * n n n
 * | | -> | | -> | | -> NULL
 * | | <- | | <- | |
 * p p
 */

/*
 * Now why do we need a double pointer?
 * In C, everything is passed by copy. If we were to pass list as a single pointer, *list, we would be
 * copying the value of list back in main, which is simply a number representing an address. That means if we
 * modify list, not *list, in insert_in_order, it just changes the LOCAL variable list (local to
 * insert_in_order), which is just a number, to be a different number that represents a different address.
 * Now the list in insert_in_order points to the correct list, while the one in main does not. The address
 * back in main was NOT modified, since it was passed by copy. To change this, we pass in a double pointer.
 * Then, when we dereference once with *list, we are now looking at the value of list in main, its number
 * value representing an address. If we modify *list to point to a new Node, we make the list back in main
 * also point to that new node. This is a common bug for new programmers, and if you don't understand double
 * pointers, you will find it very difficult to know why your list isn't being modified.
 */



---

