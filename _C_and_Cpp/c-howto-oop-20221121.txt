
filename: c_howto_oop_20221121.txt
https://www.quora.com/How-is-object-oriented-programming-sometimes-done-in-plain-C-instead-of-C-and-what-are-\
                      the-occasions-and-advantages-of-doing-so/answer/Rob-Menke

How is object-oriented programming sometimes done in plain C instead of C++, and what are the occasions and
advantages of doing so?

Despite what others have answered, it is perfectly reasonable to do object-oriented programming in C. Heck, 
I've seen object-oriented assembly.

Before we delve into the weeds, let's first get a few definitions out of the way. Booch defines an object as
a thing that has state, behavior, and identity. By that definition, everything is an object: a C int
variable fits the bill, as it has state (numerical value), behavior (you can perform arithmetic with it),
and identity (you can take its address). It doesn't match the concept that most developers have of an object
("I know it when I see it") but it does match the definition.

Now, object-oriented programming is a paradigm where software is built around the concepts of objects and
managing the complexity of their interactions. Per Booch, the object model means that the objects in the
design must offer:
	- Abstraction,
	- Encapsulation,
	- Modularity, and
	- Hierarchy.

Does C offer these facilities? Yes, but not through language constructs; rather, we insist that the objects
are accessed only through their interfaces and modification to the object in any other way will result in
the dreaded undefined behavior. This differs from languages like Java or C++, where such rules are enforced
by language constructs.

For abstraction, we use functions and function pointers to implement behavior.

For encapsulation we can either hide the structure by only exposing it to the methods or publish the
structure and rely on documentation to discourage people from poking around the insides. (One should note
that encapsulation is rarely enforced even in Java or C++: it is fairly easy to access fields in a C++ object
by offset calculations, and Java offers the reflection package which may be used to disable access
restrictions.)

Modularity can be achieved through naming conventions.
Hierarchy can be done through composition.

Enough of theory! How about an example?
Let's go for the archetypical OOP example: a hierarchy for describing geometric shapes. Our system will only
support two types for now: circles and rectangles. The only operation we will allow on shapes is computation
of the area. Our convention will be that fields within a struct that begin with an underscore are private
and must not be modified outside of the method calls. We could hide the structure of a shape altogether by
forcing people to work only with incomplete types but that can be horribly inefficient (see: Objective-C).
We'll put all our cards on the table and tell people not to mess with internals.

// shape.h 
 
struct shape { 
	double (*_area)(struct shape *this); 
}; 
 
struct circle { 
	struct shape _base; 
	double       _radius; 
}; 
 
struct rect { 
	struct shape   _base; 
	double _width, _height; 
}; 
 
// Constructors 
extern void init_circle(struct circle *this, double radius); 
extern void init_rect(struct rect *this, double width, double height); 
 
// Destructors 
extern void deinit_circle(struct circle *this); 
extern void deinit_rect(struct rect *this); 
 
// Alternately, move the definitions of struct circle and struct rect 
// into the .c file and define: 
// 
//    extern struct shape *make_circle(double radius); 
//    extern struct shape *make_rect(double width, double height); 
//    extern void free_shape(struct shape *); 
// 
// but you lose the ability to create small objects on the stack. 
 
// Virtual methods 
extern double area(struct shape *); 

And the implementation:

static double _circle_area(struct shape *s) { 
	struct circle *this = (struct circle *)s; 
	return M_PI * this->_radius * this->_radius; 
} 
 
static double _rect_area(struct shape *s) { 
	struct rect *this = (struct rect *)s; 
	return this->_width * this->_height; 
} 
 
void init_circle(struct circle *this, double radius) { 
	this->_base._area = _circle_area; 
	this->_radius = radius; 
	return obj; 
} 
 
void init_square(struct square *this, double width, double height) { 
	this->_base._area = _square_area; 
	this->_width = width; 
	this->_height = height; 
	return obj; 
} 
 
// Not really necessary but included for completeness 
void deinit_circle(void *this) {} 
void deinit_square(void *this) {} 
 
double area(struct shape *this) { 
	return (this->_area)(this); 
} 

Finally, some sample code:

void print_area(struct shape *ptr) { 
	printf("area = %f\n", area(ptr)); 
} 
 
int main() { 
	struct circle c; init_circle(&c, 4.0); 
	struct rect r;   init_rect(&r, 3.0, 5.0); 
 
	print_area((struct shape *)&c); 
	print_area((struct shape *)&r); 
 
	deinit_rect(&r); 
	deinit_circle(&c); 
} 

If that looks strange and unlikely to be in published software, understand that the original X Window System
was written in a style quite similar to that. You could probably clean it up using some macros... or fall back
to m4 if the preprocessor isn't enough... or write a small DSL to automatically generate C with the proper
casting and init/deinit calls... and oops! you've just reinvented C++.

So, to answer your questions: yes, it can be done in plain C and the advantage is portability especially if
your target platform only has a C compiler, but the disadvantage is it requires a lot of boilerplate.


---

