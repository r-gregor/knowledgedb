filename: c_for-loop-vs-while-loop_20220823.txt
from: https://stackoverflow.com/questions/2950931/for-vs-while-in-c-programming

FOR loop vs WHILE loop (google search)

A while loop will always evaluate the condition first.

while (condition) {
	//gets executed after condition is checked
}

A do/while loop will always execute the code in the do{} block first and then evaluate the condition.

do {
	//gets executed at least once
} while (condition);

A for loop allows you to initiate a counter variable, a check condition, and a way to increment your counter
all in one line.

for (int x = 0; x < 100; x++) {
	//executed until x >= 100
}

At the end of the day, they are all still loops, but they offer some flexibility as to how they are executed.

Here is a great explanation of the reasoning behind the use of each different type of loop that may help
clear things up.

The main difference between the for's and the while's is a matter of pragmatics: we usually use FOR when
there is a known number of iterations, and use WHILE constructs when the number of iterations in not known
in advance. The while vs do ... while issue is also of pragmatics, the second executes the instructions once
at start, and afterwards it behaves just like the simple while.

For loops are especially nice because they are concise. In order for this for loop:

for (int x = 0; x < 100; x++) {
	//executed until x >= 100
}

to be written as a while loop, you'd have to do the following:

int count = 0;
while (count < 100) {
	//do stuff
	count++;
}

In this case, there's just more stuff to keep up with and the count++; could get lost in the logic. This
could end up being troublesome depending on where count gets incremented, and whether or not it should get
incremented before or after the loop's logic. With a for loop, your counter variable is always incremented
before the next iteration of the loop, which adds some uniformity to your code.

For the sake of completeness, it's probably meaningful to talk about break and continue statements here
which come in handy when doing loop processing.

break will instantly terminate the current loop and no more iterations will be executed.

//will only run "do stuff" twice
for (int x = 0; x < 100; x++) {
	if (x == 2) {
		break;
	}
	//do stuff
}

continue will terminate the current iteration and move on to the next one.

//will run "do stuff" until x >= 100 except for when x = 2
for (int x = 0; x < 100; x++) {
	if (x == 2) {
		continue;
	}
	//do stuff
}

Note that in a for loop, continue evaluates the part3 expression of for (part1; part2; part3); in contrast,
in a while loop, it just jumps to re-evaluate the loop condition.


---

