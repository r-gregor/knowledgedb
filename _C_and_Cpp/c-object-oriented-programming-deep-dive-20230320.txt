filename: c_object-oriented-programming-deep-dive_20230320.txt
https://code.quora.com/Object-Oriented-Programming-in-C-A-Deep-Dive

How to properly do Object-Oriented code in C. No ugly, manually made vtables necessary for virtual
methods either.

Object-Oriented Programming in C: A Deep Dive

Object-oriented programming (OOP) has been a commonly used paradigm since its widespread use in the late
80s and present. C nowadays, though supremely important in that it's the roots in the tree of our modern
computer systems, has largely been casted aside since it's lost its sex appeal.

The idea of doing OOP in C elicits different reactions. Most programmers will think "why not just use
C++?", others will say "you can't do that in C", the last group will say "that'll take way too long!"

Other than the fact that Objective-C is glossed over (good in my opinion), one would be surprised to find
that C actually has different strategies for accomplishing object-oriented programming. To be specific,
there are actually THREE ways to accomplish OOP in C (aptly named):

	Open style.
	Pointer style.
	and GTK style.

There are also three ways to apply function/method polymorphism in C as well:

	Struct style.
	Disjoint style.
	and Interface style.

Before we dive into OOP with C, I will do a quick recap of what the paradigm of OOP entails; in OOP,
there are three core principles:

	Encapsulation.
	Inheritance.
	Polymorphism.

As far as it can be given, C can apply all three of these core principles. Now we will do our deep dive
by first looking at the Open style of OOP style C.

Open Style
In this variation of OOP C, Open style is the simplest to apply where you have the struct and its methods
defined within the header file and the methods are implemented in its respective module file. Let's take
a look at a classic OOP example using an animal class!

	/* base.h */
	#ifndef ANIMAL_INCLUDED
	#	define ANIMAL_INCLUDED

	struct animal;
	typedef void speakfunc_t(const struct animal *a);

	typedef struct animal {
		speakfunc_t *vspeak;
		float weight;
	} animal_t;

	struct animal *animal_new(float weight);
	struct animal animal_create(float weight);
	void animal_del(struct animal *a);
	void animal_cleanup(struct animal **a_ref);

	void animal_speak(const struct animal *a);
	float animal_get_weight(const struct animal *a);
	void animal_set_weight(struct animal *a, float weight);

	#endif /* ANIMAL_INCLUDED */

Now let's analyze the header file.

We have a defined class: struct animal.

The methods are new (heap constructor), create (heap/other constructor), del (singular destructor),
cleanup (destructor and cleaner), and speak.

the class members consist of a virtual method called vspeak and a floating point data called weight.

Now let's take a look at how these methods will be implemented.

	/* base.c */
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include "base.h"
	
	static void _animal_speak(const struct animal *const a) {
		(void) a;
		puts("grrrr.");
	}
	
	struct animal *animal_new(const float weight) {
		struct animal *a = calloc(1, sizeof *a);
		if( a != NULL )
			*a = animal_create(weight);
		return a;
	}
	
	struct animal animal_create(const float weight) {
		struct animal a = { .weight = weight, .vspeak = &_animal_speak};
		return a;
	}
	
	void animal_del(struct animal *const a) {
		if( a == NULL )
			return;
		else {
			memset(a, 0, sizeof *a);
			free(a);
		}
	}
	
	void animal_cleanup(struct animal **a_ref) {
		if( a_ref == NULL || *a_ref == NULL )
			return;
		else {
			animal_del(*a_ref), *a_ref = NULL;
		}
	}
	
	void animal_speak(const struct animal *const a) {
		if( a == NULL )
			return;
		else (*a->vspeak)(a);
	}
	
	float animal_get_weight(const struct animal *const a) {
		return a != NULL ? a->weight : 0.f;
	}
	
	void animal_set_weight(struct animal *const a, const float weight) {
		if( a == NULL )
			return;
		else {
			a->weight = weight;
		}
	}

As you can see, Open style is the most straight forward of OOP style in C, it's almost no different to
how most of modern C code is actually written.

Function pointers are used to implement virtual methods, we have basic encapsulation by focusing actions
and data manipulations through the methods. But what about inheritance you ask? Also applicable:

	/* derived.h */
	#include "base.h"

	typedef struct hominid {
		struct animal base;
		float height;
	} hominid_t;

	struct hominid *hominid_new(float height, float weight);
	struct hominid hominid_create(float height, float weight);
	void hominid_del(struct hominid *h);
	void hominid_cleanup(struct hominid **h_ref);

	void hominid_speak(const struct hominid *);
	float hominid_get_weight(const struct hominid *h);
	void hominid_set_weight(struct hominid *h, float weight);

	float hominid_get_height(const struct hominid *h);
	void hominid_set_height(struct hominid *h, float height);

Implementing inheritance is where more advanced C skills come into play. If you recall in C class,
the address of a struct instance is always the address to the first member of that struct.

That means that a pointer to type struct hominid will be also valid as a pointer to struct animal! However
this is not advised in modern C because this will break the strict aliasing rule which can incur undefined
behavior but there is a more defined behavior way to accomplish the same thing: through a union!

	union {
		struct hominid *h;
		struct animal *a;
	} p = {hom};

	animal_set_weight(p.a, 400.f);
	hominid_set_height(p.h, 3.f);

Another strategy you can do is either:

	Get the address of the base instance:

	struct animal *base = &hom->base;
	animal_set_weight(base, 400.f);

	Or just simply use the base instance altogether:

	animal_set_weight(&hom->base, 400.f);
	(*hom->base.vspeak)(&hom->base);

Personally, I think it's cleaner to use the union strategy but that's just my opinion.

Pointer Style
Pointer style is an alternative to Open style where you use the power granted by pointers to implement
data hiding!

Let's reuse the Open style example header and modify it to showcase the differences:

	/* base.h */
	#ifndef ANIMAL_INCLUDED
	#	define ANIMAL_INCLUDED

	struct animal;
	typedef void speakfunc_t(const struct animal *a);

	typedef struct animal animal_t;

	struct animal *animal_new(float weight);
	void animal_del(struct animal *a);
	void animal_cleanup(struct animal **a_ref);

	void animal_speak(const struct animal *a);
	float animal_get_weight(const struct animal *a);
	void animal_set_weight(struct animal *a, float weight);

	#endif /* ANIMAL_INCLUDED */

In case you haven't noticed, Pointer style omits the struct definition in the header and instead moves
the struct definition into the module file and has the init constructor removed.

The benefit of this is that you achieve true data hiding. Nobody can know what the definition of the
struct really is unless they have access to the source code!

The downside is that you can create the class instances through heap allocation instead of having the options
to either heap allocate or instantiate an instance from different storage like global or stack storage.

GTK Style
GTK style is a variation of Pointer style but instead of leading off pointers, GTK style implements a
rather interesting approach. In GTK Style, you can choose to define the struct in the header if you wish.

At first, GTK style doesn't look too different from Pointer style (besides the struct definition)...

	/* base.h */
	#ifndef ANIMAL_INCLUDED
	#	define ANIMAL_INCLUDED

	struct animal;
	typedef void speakfunc_t(const struct animal *a);

	typedef struct animal {
		float weight;
		speakfunc_t *vspeak;
	} animal_t;

	struct animal *animal_new(float weight);
	void animal_del(struct animal *a);
	void animal_cleanup(struct animal **a_ref);

	void animal_speak(const struct animal *a);
	float animal_get_weight(const struct animal *a);
	void animal_set_weight(struct animal *a, float weight);

	#endif /* ANIMAL_INCLUDED */

At least until you implement inheritance with it!

	/* derived.h */
	#include "base.h"

	typedef struct hominid {
		struct animal base;
		float height;
	} hominid_t;

	struct animal *hominid_new(float height, float weight);
	void hominid_del(struct animal *h);
	void hominid_cleanup(struct animal **h_ref);

	void hominid_speak(const struct animal *h);
	float hominid_get_weight(const struct animal *h);
	void hominid_set_weight(struct animal *h, float weight);
	float hominid_get_height(const struct animal *h);
	void hominid_set_height(struct animal *h, float height);

Quite a twist! GTK style deviates from Pointer style by always using a pointer to the base class! This
can be tricky to do but the case here is when someone creates an instance to a struct hominid, the user
is given a pointer to a struct animal. The data is still that of a struct hominid and the methods that
are specific to struct hominid will downcast the pointer from struct animal to struct hominid and do
what needs to be done, again through the power of using a union.

Let's take a look at this by using hominid_set_height as the example since struct animal doesn't have
a member called height:

	void hominid_set_height(struct animal *const a, const float height) {
		if( a == NULL )
			return;
		else {
			/* using restrict here since we're aliasing in a different scope. */
			union {
				struct animal *restrict a;
				struct hominid *restrict h;
			} p = {a};
			p.h->height = height;
		}
	}

Now we've taken a look at the different ways that C can implement the core OOP principles but what about
the different ways that C can implement polymorphism?

Struct Style
The first style of polymorphism that can be implemented in C is struct style which was the primary style
used in the three examples we looked at to implement OOP in C.

Simply a struct-class that implements the members and the virtual methods together with no serious
distinction:

	struct xyz {
		void (*speak)(struct *xyz, ...);
		...
	} abc;

	abc.speak(&abc, ...);

	/* strangely, this is syntactic sugar! */
	(*abc.speak)(&abc, ...);

Disjointed Style
Disjointed style is the form of polymorphism that's used by the C standard library (believe it or
not!) and an example of this can be seen through the use of qsort and bsearch!

It's called disjoint style because the virtual function isn't specifically tied to the class implementation
which gives a benefit of not taking up more memory to store a function pointer and passing that cost
onto the stack memory instead of possibly on heap memory.

	void qsort(void *base, size_t num, size_t size, int (*comparator)(const void *a, const void *b));

	void *bsearch(const void *key, const void *base, size_t num, size_t size, int (*comparator)(const
	void *a, const void *b));

	void f(struct xyz *p, void (*const speak)(struct xyz *, ...)) {
		(*speak)(p, ...);
	}

I've actually used disjointed style polymorphism in my custom data structure implementations to implement
virtual destructors.

	void vec_clear(struct vec *vec, void dtor(void **ptr_ref));

Interface Style

Interface style is a slight variation of the struct style. It's basically a structure of nothing but
function pointers which can be either used to implement your own vtables (don't please) or neatly use
in a struct containing members.

	struct xyz;

	struct a_iface {
		void (*speak)(struct xyz *, ...);
		bool (*eat)(struct xyz *, ...);
		bool (*play)(struct xyz *, ...);
	};

	struct xyz {
		struct a_iface i;
		...
	} a;

	a.i.speak(&a, ...);
	(*a.i.speak)(&a, ...);

With a C compiler that supports C11, you can use anonymous nested structs/unions to clean up that extra
member access syntax and also inline the entire struct into the main struct-class:

	struct xyz {
		struct {
			void (*speak)(struct xyz *, ...);
			bool (*eat)(struct xyz *, ...);
			bool (*play)(struct xyz *, ...);
		};
		...
	} a;

	a.speak(&a, ...);
	(*a.speak)(&a, ...);

There we go, looks alot cleaner.

Conclusion:
As you can see, there are plenty of different strategies one can use to implement not just OOP for C
but also different strategies to also implement polymorphism.

If you're thinking "I'd rather use C++", then I'd say sure but remember that sometimes people want or
have to use C. What if a developer is tasked with making a framework or library that needs to have a
wider reaching developer audience? By having a C library or framework in an OOP manner, you can make
interfaces to the other languages alot more simpler.

An OOP-styled C library can have an easier interfacing with other OOP languages like C++, Java, Python,
C#, etc.

Any questions you have concerning this post will be answered!



---

