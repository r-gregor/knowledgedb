filename: c_quora_extremely_clever_problem_solving_20231009.txt
https://www.quora.com/What-are-some-examples-of-extremely-clever-problem-solving-in-the-software-development-world/answer/Troy-Hoffman-8

What are some examples of extremely clever problem solving in the software development world?

***
In 1983, this guy was a computer programmer at Lucasfilm.

He was optimizing a real time animation program and wanted to "unroll" a loop in C. This is a way to
optimize code by reducing the number of times the computer has to check if the loop can be ended.

This was the original loop:

send(to, from, count)
register short *to, *from;
register count;
{
	do {                          /* count > 0 assumed */
		*to = *from++;
	} while(--count > 0);
}

Normally, a loop is unrolled by dividing the loops by a number and copying the code within the loop
that many times. So, something that loops 64 times would loop 8 times with the code repeated 8 times,
eliminating 56 times that the program has to check if the loop is complete like this:

send(to, from, count)
register short *to, *from;
register count;
{
	register n = count / 8;
	do {
		*to = *from++;
		*to = *from++;
		*to = *from++;
		*to = *from++;
		*to = *from++;
		*to = *from++;
		*to = *from++;
		*to = *from++;
	} while (--n > 0);
}

The problem was that he didn't know ahead of time how many times it would loop, so he couldn't be
guaranteed an even division. This would normally be handled with two loops, one like the above code
and one for the remainder. He wanted it more compact and even more optimized though, so he drew on his
experience with assembly, looked at the spec for the switch statement in C and realized he could mix a
loop and a case statement to do this:

send(to, from, count)
register short *to, *from;
register count;
{
	register n = (count + 7) / 8;
	switch (count % 8) {
		case 0: do { *to = *from++;
		case 7:      *to = *from++;
		case 6:      *to = *from++;
		case 5:      *to = *from++;
		case 4:      *to = *from++;
		case 3:      *to = *from++;
		case 2:      *to = *from++;
		case 1:      *to = *from++;
		} while (--n > 0);
	}
}

His name is Tom Duff, and that brilliant block of code is known as Duff's device. When I was first
learning C, a senior developer told me about it and explained it to me. I was so impressed, that I
scoured my code for a loop to unroll and successfully implemented it.

Granted, my code was fast enough and it didn't make much of a difference in performance, but I was
able to say I used Duff's device. Yes, it was premature optimization, but I didn't care. It was Duff's
flippin' device!

Edit:
I've had a few people suggest edits to change "*to" to "*to++". The samples of the original code
and the Duff's device (first and last samples) are taken verbatim from Tom Duff's 1983 email to Ron Gomes,
Dennis Ritchie, and Rob Pike.

[**1]https://swtch.com/duffs-device/td-1983.txt

It was copying from an array to a programmed IO data register, which is why it's "*to" instead
of "*to++".

---
[**1]
https://swtch.com/duffs-device/td-1983.txt

From research!ucbvax!dagobah!td  Sun Nov 13 07:35:46 1983
Received: by ucbvax.ARPA (4.16/4.13)
	id AA18997; Sun, 13 Nov 83 07:35:46 pst
Received: by dagobah.LFL (4.6/4.6b)
	id AA01034; Thu, 10 Nov 83 17:57:56 PST
Date: Thu, 10 Nov 83 17:57:56 PST
From: ucbvax!dagobah!td (Tom Duff)
Message-Id: <8311110157.AA01034@dagobah.LFL>
To: ucbvax!decvax!hcr!rrg, ucbvax!ihnp4!hcr!rrg, ucbvax!research!dmr,
	ucbvax!research!rob

Consider the following routine, abstracted from code which copies an
array of shorts into the Programmed IO data register of an Evans &
Sutherland Picture System II:

	send(to, from, count)
	register short *to, *from;
	register count;
	{
		do
			*to = *from++;
		while(--count>0);
	}

(Obviously, this fails if the count is zero.)
The VAX C compiler compiles the loop into 2 instructions (a movw and
a sobleq, I think.)  As it turns out, this loop was the bottleneck in
a real-time animation playback program which ran too slowly by about 50%.
The standard way to get more speed out of something like this is to unwind
the loop a few times, decreasing the number of sobleqs.  When you do that,
you wind up with a leftover partial loop.  I usually handle this in C with
a switch that indexes a list of copies of the original loop body.  Of
course, if I were writing assembly language code, I'd just jump into the
middle of the unwound loop to deal with the leftovers.	Thinking about this
yesterday, the following implementation occurred to me:

	send(to, from, count)
	register short *to, *from;
	register count;
	{
		register n=(count+7)/8;
		switch(count%8){
		case 0: do{*to = *from++;
		case 7:    *to = *from++;
		case 6:    *to = *from++;
		case 5:    *to = *from++;
		case 4:    *to = *from++;
		case 3:    *to = *from++;
		case 2:    *to = *from++;
		case 1:    *to = *from++;
			}while(--n>0);
		}
	}

Disgusting, no?  But it compiles and runs just fine.  I feel a combination
of pride and revulsion at this discovery.  If no one's thought of it before,
I think I'll name it after myself.

It amazes me that after 10 years of writing C there are still little corners
that I haven't explored fully.	(Actually, I have another revolting way to
use switches to implement interrupt driven state machines but it's too
horrid to go into.)

Many people (even bwk?) have said that the worst feature of C is that
switches don't break automatically before each case label.	This code forms
some sort of argument in that debate, but I'm not sure whether it's for or
against.

	yrs trly
	Tom


---

