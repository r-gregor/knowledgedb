filename: c-wto-work-with-compound-literals-that-contain-20250609.txt
https://www.reddit.com/r/C_Programming/comments/1cknoxc/how_to_work_with_c_compound_literals_that_contain/

How to work with C compound literals that contain self referring struct fields within the initializer list

   I have been trying to do something like this:
// Suppose
struct foo {
	int a, b, c;
};

// Then we have a variable initialization that might look like this
struct foo bar = {
	.a = 3,
	.b = 4,
	.c = bar.a + bar.b   // Initialized to 7, because of .a and .b values
}; // This works fine

// I'm trying to get this same behavior, but within a compound literal, i.e

void* ptr = &(struct foo) { .a = 3, .b = 4, .c = .a + .b };

// Of course this doesn't compile if we simply leave it as .c = .a + .b

   So my question is, is there a way to achieve this self reference type of struct initializer, I want
   to do something rather complicated with a struct, but I want to make it in one expression, I don't
   want to create an extra statement or extra variables?

***
Why not just wrap the initialization with a macro?

i.e.

#define MAKEFOO(x, y) ( &(struct foo) { .a = (x), .b = (y), .c = (x) + (y) } )

then you'd use it like this:

void *ptr = MAKEFOO(3, 4);
some_foo_func(ptr);

Does that halp?
Though I'm not so sure about just creating a pointer to a struct without the struct actually existing
somewhere in memory. Personally, I would instead do this:

#define MAKEFOO(x, y) ( (struct foo) { .a = (x), .b = (y), .c = (x) + (y) } )

...

foo f = MAKEFOO(3, 4);
some_foo_func(&f);

I might be wrong about this (being able to instantiate a struct and only have a pointer to it) but it seems
like you need to at least allocate memory for it somewhere, whether on the stack (like I've just demonstrated
above) or via malloc(). Someone let me know what the situation is.

EDIT: Forgot a closing parenthesis on my macro.

***
define SET_STRUCT(x,y) (struct foo){.a=x, .b=y, .c=x+y}


---

