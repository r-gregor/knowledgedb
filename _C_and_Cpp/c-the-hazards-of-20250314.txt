filename: c_the-hazards-of_20250314.txt
https://www.lagerdata.com/articles/the-hazards-of-c

The hazards of C
April 16, 2021

   What does the following C program print:

#include <stdio.h>
#include <stdint.h>

int main(void) {
	uint16_t x = 45000;
	uint16_t y = 50000;
	uint32_t z = x * y;  // 45,000 * 50,000 is 2,250,000,000
	printf("%" PRIu32 "\n", z);
	return 0;
}

   (PRIu32 is just the platform-specific printf format string argument for an unsigned 32-bit int, there's no
   trickery or magic there)

   Go ahead and compile it with gcc -Wall -Wextra and then run it. No warnings, and I get 2250000000, which
   matches the mathematical definition of 40,000 * 50,000 - no big deal, right? Wrong! You may have just
   invoked undefined behavior.

   If you did, the compiler is legally allowed to make demons fly out of your nose.

   But how? All we did was multiply 2 unsigned integers into an unsigned integer which is wide enough to hold
   the result. The problem is C's integer promotion rules.

   If you are on a platform where  is 4 bytes, then an int can represent the entire range of values of a
   uint16_t, so y are both promoted to int before multiplying. Multiplying the two promoted int values results
   in a value of 2,250,000,000, which is larger than the largest 2,147,483,647. Signed integer overflow!
   That's undefined behavior. Luckily my compiler chose to use wrapping arithmetic, and not emit demons, which
   means I get the right result and my nose remains free of demons. However, it's not required to do so. Try
   recompiling with the -ftrapv flag:

$> gcc -ftrapv test.c
$> ./a.out
[1]    97121 illegal hardware instruction  ./a.out



---

