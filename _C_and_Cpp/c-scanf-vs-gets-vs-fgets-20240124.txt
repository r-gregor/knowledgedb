filename: c_scanf-vs-gets-vs-fgets_20240124.txt
https://copyprogramming.com/howto/c-scanf-vs-gets-vs-fgets

Comparison of C's scanf(), gets(), and fgets() Functions
2023-05-14

One solution highlights that the function lacks protection against buffer overflows, while another
solution acknowledges that preventing buffer overflow is not possible.

Question:
I have been working on a program that converts a string of characters (assuming they are numbers) into
an integer. The program is relatively straightforward.

Upon completion, I observed certain unusual "bugs" that I cannot explain due to my limited understanding
of the workings of the scanf() , gets() , and fgets() functions, despite having gone through a significant
amount of literature.

To avoid excess wording, here's the program's code.

#include <stdio.h>
#define MAX 100

int CharToInt(const char *);

int main() {
	char str[MAX];
	printf(" Enter some numbers (no spaces): ");
	gets(str);
	//    fgets(str, sizeof(str), stdin);
	//    scanf("%s", str);
	printf(" Entered number is: %d\n", CharToInt(str));
	return 0;
}

int CharToInt(const char *s) {
	int i, result, temp;
	result = 0;
	i = 0;
	while(*(s+i) != '\0') {
		temp = *(s+i) & 15;
		result = (temp + result) * 10;
		i++;
	}
	return result / 10;
}

The issue I've encountered is that the program functions flawlessly only when utilizing the gets() feature.

When fgets() is utilized, the outcome is slightly inaccurate due to the fgets() function that reads the
last newline character (ASCII value 10), causing the result to be disturbed.

The usage of scanf() function leads to inaccurate results, as the first character seems to have an ASCII
value of -52, which is unexplainable.

Given that gets() is not recommended, I'm curious whether fgets() could be utilized here to avoid reading
as ignores) newline . Additionally, I'm interested in understanding the purpose of the scanf() feature
in this software.

Solution 1:
	Avoid utilizing 'gets' as it does not safeguard against a 'buffer overflow' vulnerability. This implies
	that the buffer's size cannot be specified, resulting in the possibility of a user entering a line that
	exceeds the buffer's capacity, hence overwriting memory.

	Exercise caution when utilizing 'scanf' since it can lead to similar 'Buffer Overflow' complications as 
	'gets' if used carelessly. Furthermore, it presents additional challenges that make it challenging to
	employ accurately.

	In general, 'fgets' is the preferred option, even though it may be
	inconvenient due to the need to remove newlines, determine 'buffer size' in advance, and decide how to
	handle lines that are too long. There are alternative functions available, such as 'getline' on POSIX
	systems, or Chuck Falconer's public domain 'ggets' function, which offer dynamic
	allocation. Additionally, it's worth noting that 'ggets' behaves like 'gets', as it removes trailing
	newlines.

Solution 2:
To avoid gets, it's recommended to use fgets as it can detect when the buffer was too small
and there's more to be read. However, if you prefer fgets that doesn't read the new-line, you can opt
for fscanf and apply a scan-set conversion such as "%N[^ ]" where the buffer size minus one replaces
'N'. This way, you won't lose the indication of a too-small buffer.

To eliminate the final new-line from a buffer after reading, an unconventional yet simple method is
available using fgets. Although not the intended use of strtok, I frequently utilize this approach
rather than the intended method, which I usually avoid.

Solution 3:
This code has multiple issues that we need to address. We'll rectify the poorly labeled variables
and functions and further examine the problems.

	To operate on a string instead of a single character, it is necessary to rename 'CharToInt()'
	to the appropriate 'StringToInt()'.

	The 'CharToInt()' function is considered hazardous as it neglects to verify whether
	the user mistakenly provides a NULL pointer.

	The validation process skips invalid input, which may result in the inclusion of bogus values in the
	output. For instance, entering non-digits as input will yield inaccurate results. For example, the
	code '*(s+i) & 15' may produce a value of 14 when the input 'N' is entered.

	It is suggested that the unidentified 'temp' located at 'CharToInt()' [sic.] be referred to as 'digit', as
	it accurately reflects its nature.

	The 'return result / 10;' is merely a poor workaround to overcome a flawed implementation
	- it's essentially a kludge.

	The name given to 'MAX' is also problematic as it could potentially clash with its
	standard usage, which is exemplified by '#define MAX(X,y) ((x)>(y))?(x):(y)'.

	Using '*(s+i)' might make the code verbose and less readable. Instead, it is better to use
	'*s' to avoid cluttering the code with an unnecessary temporary index like 'i'.

gets()
The occurrence of buffer overflow is a major concern since it can lead to disastrous consequences. To
illustrate, if the buffer size is limited to 2 and the user inputs more than 2 characters, the buffer
will overflow, as shown in str.

scanf()
This is just as detrimental as it can result in a buffer overflow for the input string.

When scanf() function is used, the output is incorrect because the initial character seems to have an
ASCII value of -52, which was mentioned earlier.

The bug could not be replicated as it was caused by incorrect usage of scanf().

fgets()
By specifying the buffer size, which accounts for the NULL character, you ensure that the input string
buffer is not overflowed, making it a secure approach.

getline()
Some individuals have proposed utilizing the C POSIX standard as an alternative to the current
solution. Regrettably, Microsoft solely incorporates the standard C++ string template function, rendering
the C version impractical and non-portable. While Microsoft's C++ code has been accessible since at
least version 6, it is not applicable to the current query since it specifically pertains to C and not C++.
Misc.

Finally, it should be noted that the existing version has a flaw where it fails to detect integer overflow.
This flaw leads to negative numbers when the user inputs excessively large numbers. For example,
9876543210 becomes -18815698 . This issue requires fixing as well.

For an unsigned int , resolving this issue is relatively simple. We can identify an overflow occurrence
by comparing the current and previous partial numbers and returning the lower value.

Performing the task for signed int requires some additional effort. While in assembly we could examine
the carry-flag, there is no uniform method available in C to accomplish detect overflow with signed int
math. However, as we are multiplying by a constant * 10 , we can detect this effortlessly by utilizing
an equivalent equation.

n = x*10 = x*8 + x*2

In case of an overflow in x*8, it is reasonable to assume that x*10 will also overflow. In the case
of a 32-bit integer, x*8 will overflow at 0x100000000, so detecting when x is greater than or equal to
0x20000000 is sufficient. To avoid making assumptions about the number of bits in the int , we only need
to check if the top 3 Most Significant Bits (MSBs) are set.

Moreover, we require a secondary test for overflow. If the concatenation of digits sets the msb (sign
bit), it indicates that the number has also exceeded its limit.
Code

Included in this package is a secure version and a code for identifying overflow in the unsafe
versions. Additionally, signed and unsigned variations are provided through #define SIGNED 1.

#include <stdio.h>
#include <ctype.h> // isdigit()
// 1 fgets
// 2 gets
// 3 scanf
#define INPUT 1
#define SIGNED 1
// re-implementation of atoi()
// Test Case: 2147483647 -- valid	 32-bit
// Test Case: 2147483648 -- overflow 32-bit
int StringToInt( const char * s ) {
	int result = 0, prev, msb = (sizeof(int)*8)-1, overflow;
	if( !s )
		return result;
	while( *s ) {
		if( isdigit( *s ) ) // Alt.: if ((*s >= '0') && (*s <= '9')) {
			prev     = result;
			overflow = result >> (msb-2); // test if top 3 MSBs will overflow on x*8
			result  *= 10;
			result  += *s++ & 0xF;// OPTIMIZATION: *s - '0'
			if( (result < prev) || overflow ) // check if would overflow
				return prev;
		} else {
			break; // you decide SKIP or BREAK on invalid digits
		}
	}
	return result;
}

// Test case: 4294967295 -- valid     32-bit
// Test case: 4294967296 -- overflow  32-bit
unsigned int StringToUnsignedInt( const char * s ) {
	unsigned int result = 0, prev;
	if( !s )
		return result;
	while( *s ) {
		if( isdigit( *s ) ) // Alt.: if (*s >= '0' && *s <= '9') {
			prev    = result;
			result *= 10;
			result += *s++ & 0xF; // OPTIMIZATION: += (*s - '0')
			if( result < prev ) // check if would overflow
				return prev;
		} else {
			break; // you decide SKIP or BREAK on invalid digits
		}
	}
	return result;
}

int main() {
	int  detect_buffer_overrun = 0;
	#define   BUFFER_SIZE 2    // set to small size to easily test overflow
	char str[ BUFFER_SIZE+1 ]; // C idiom is to reserve space for the NULL terminator
	printf(" Enter some numbers (no spaces): ");
#if   INPUT == 1
	fgets(str, sizeof(str), stdin);
#elif INPUT == 2
	gets(str); // can overflows
#elif INPUT == 3
	scanf("%s", str); // can also overflow
#endif
#if SIGNED
	printf(" Entered number is: %d\n", StringToInt(str));
#else
	printf(" Entered number is: %u\n", StringToUnsignedInt(str) );
#endif
	if( detect_buffer_overrun )
		printf( "Input buffer overflow!\n" );
	return 0;
}

Solution 4:
It's accurate that gets should never be utilized. To use fgets , all you have to do is overwrite the newline.

char *result = fgets(str, sizeof(str), stdin);
char len = strlen(str);
if(result != NULL && str[len - 1] == '\n') {
	str[len - 1] = '\0';
} else {
	// handle error
}

In the absence of embedded NULLs , an alternative approach is to use POSIX getline.

char *line = NULL;
size_t len = 0;
ssize_t count = getline(&line, &len, stdin);
if(count >= 1 && line[count - 1] == '\n') {
	line[count - 1] = '\0';
} else {
	// Handle error
}

The benefit of utilizing getline is that it automatically handles allocation and reallocation, manages
any potential embedded NULLs, and provides a count, eliminating the need to deal with strlen . It is
important to note that getline cannot be used with an array, and the pointer must either be NULL or
capable of being freed.

I'm uncertain about the problem you're encountering with the code labelled as scanf.
Difference between getch() and scanf() functions, there's a newline left behind in the input stream
which causes the subsequent scanf () to skip input in the loop. Note that getch () is non-standard
function. You can use getchar () instead. Or Change it to: scanf (" %c",&t);

Differences between gets(str) and scanf("%s", str)
Question:
Can you provide an example to explain the distinctions between gets(str) and scanf("%s", str) when str
is a character array ?

Solution:
Here is a demonstration of the distinction between scanf() and gets().
---------------------------------------------------------------------------------------------
SCANF()                                            GETS()
---------------------------------------------------------------------------------------------
when scanf() is used to read string input          when gets() is used to read input it stops
it stops reading when it encounters white-         reading input when it encounters newline
space, newline or EOF                              or EOF.
                                                   It does NOT stop reading the input on en-
                                                   countering whitespace as it considers
                                                   whitespace as a string

it is used to read input of any datatype           it is used for string input
---------------------------------------------------------------------------------------------

To learn more about the distinctions between scanf and gets in C, visit this link:
https://www.geeksforgeeks.org/difference-between-scanf-and-gets-in-c/

C - how gets() work after scanf?, When I do the space, it first does scanf then the gets and after that
it print the number and print the string. By adding a space, scanf("%d ", &num); does not return until
non-white-space is entered after the number (as in 'a' in the following). Since stdin is usually line
buffered, this means input of 2 lines needs to first occur. ...

Why is gets() more dangerous than scanf()?
Question:
Both functions have the capability to cause a buffer overflow, but while scanf() is recommended, gets()
should always be avoided.

Is the reason for scanf() only related to the allowances for formatting arguments, or are there additional
factors at play?

Solution 1:
The gets procedure lacks protection from buffer overflows.

By utilizing the scanf format string, you can specify the maximum length of the string that will be
retrieved from standard input and placed into a designated memory buffer. For instance, if you implement
scanf("%10s ", str); , the maximum allowable length will be 10 characters. Remember that the str buffer
must be 11 bytes long to accommodate the NULL terminating character.

To optimize performance, it is recommended to utilize the fgets function instead of solely relying on
scanf to work around buffer overflow issues in gets.

Solution 2:
The issue with gets() is that it allows input of more characters than the buffer size, which is a
problem. Additionally, gets() is outdated and no longer used in C11. Therefore, the comparison between
gets() and scanf() is no longer applicable. However, scanf() also has issues when handling unformatted data.

An alternative and preferable choice would involve using fgets() to obtain the input and then manipulating
it accordingly.

Solution 3:
As prevent buffer overflow cannot be achieved, using fgets is a better option since it allows for a
specified maximum buffer length, making it safer.

Solution 4:
Preventing a malformed input case is not feasible with gets . However, scanf provides the ability to
regulate the quantity of data being read.


---

