filename: c_fixed-size-memory-pool-multif_20230809.txt
https://www.sanfoundry.com/c-tutorials-pool-free-memory-uses/

What is Free Pool of Memory in C?

   Question: What is a Pool of Free Memory and How is this Used in C?

   Answer: Two processes malloc() and free() maintain available memory in the System as pool of free
   memory for use by processes requiring dynamic allocation. When a program requests for dynamic
   allocation, malloc() attempts to allocate requested block of memory from this pool. If memory
   allocation is successful, program uses this chunk and after it's done frees this up back to the pool
   by calling free() function.

   If for reasons, say pool doesn't have enough memory, malloc() may request the O.S. to arrange the
   requested chunk, O.S. tries to free up memory to this pool. But if O.S., too, failed, memory
   allocation to program gets failed. In this case, malloc() returns NULL pointer. Therefore, it's
   mandatory to verify whether pointer returned by malloc() isn't NULL before using it. Be careful not
   to dereference the NULL pointer!

   You can write a subroutine to verify pointer returned by malloc(). Let's consider a simple program,
/*
 * malloc_free.c -- Let's allocate memory dynamically and free that
 * up for reuse
 */

#include <stdio.h>
#include <stdlib.h>           /* declarations for malloc(), free() etc. */

int main(void) {
	int *pi, i, nbytes = 0;   /* by default nbytes value 0 */
	void *p2v;

	puts("\nLet's try to get memory chunk, specify number of bytes"
	     " u want...\n");

	scanf("%d", &nbytes);
	pi = malloc(nbytes);

	printf("Now, we verify if required %d bytes allocated"
	       " successfully.\n", nbytes);

	if (pi == NULL) {
		puts("Error: Pool short of memory!");
		exit(1);
	} else {
		puts("Yes Succeeded!\n");
	}

	puts("Good! Now, let's use dynamic memory...\n");
	printf("User type in %d integers one by one...\n",
	        nbytes / sizeof(int));

	for (i = 0; i < nbytes / sizeof(int); i++)
		scanf("%d", (pi + i));

	puts("");

	printf("User, let's see what had u typed...\n");

	for (i = 0; i < nbytes / sizeof(int); i++)
		printf("%d ", *(pi + i));

	puts("");

	puts("Let's return allocated memory to system for reuse.");
	free(pi);        /* free up memory */
	puts("Thank you!\n");
	return 0;
}

   Let's observe the output,
Let's try to get memory chunk, specify number of bytes u want...

20
Now, we verify if required 20 bytes allocated successfully.
Yes Succeeded!

Good! Now, let's use dynamic memory...

User type in 5 integers one by one...
23
12
432
34
22

User, let's see what had u typed...
23 12 432 34 22
Let's return allocated memory to system for reuse.
Thank you!

***
The syntax of malloc() and free() functions,
	void *malloc(size_t num_of_bytes);
	void free(void *);

   When memory allocation is requested using malloc(), it tries to allocate the requested chunk and
   returns pointer of type void to the beginning of that chunk. We know that pointer to void can be
   converted to any other type. And memory allocated then be used by the program. One more thing is that
   memory allocated by malloc() is in no way initialized.

   Further, malloc() allocates specified amount of memory as no. of bytes. So, in order to obtain memory

   for 10 integers, we better write as
	int n = 10;
	int *pi;

	pi = (int *)malloc(n * sizeof(int));

   Notice that malloc() returned type void * which converted to type int *. sizeof operator used to
   evaluate size of type int on a Linux machine which we multiplied by n to evaluate memory for 10
   integers. The benefit obtained here is program is more portable as size of type int varies on
   different implementations.
   advertisement

   After you are done with the allocation and no longer want to use it, return the block back to pool of
   free memory, by calling free(), for re-allocation to other part of your program or use by other
   process.

	void free(pi);

   If you didn't return memory back to the pool immediately after you were no longer needed it, it would
   return to the pool when program exits. But till then program retained the block and so why it's of no
   use to other processes.


---
https://stackoverflow.com/questions/11749386/implement-own-memory-pool

Implement own memory pool

   I want to allocate a certain amount of memory upfront and use that memory for the rest of the
   program. The program will basically be allocating memory for a few strings and structs. How do I
   implement this? What data structures are used to store the pointers and how do I use it to give me a
   specific amount?

   For example, if I malloc 1 MB of space and have it in a pointer p, how do I carve out a 250 KB piece
   from it ?

   This is just meant to be a quick and dirty implementation.
	 * c
	 * memory-management

***
	 * There are countless ways to do this, and various tradeoffs for memory overhead vs. speed, etc. A
	   simple way is to maintain a linked list of free memory blocks. Each entry in the list is an
	   address and length. When you do an allocation/free you update the free list.
	 * How do I, for example, combine two memory blocks or split one block into two ?
	 * 2
	   Well, if you do char *a = malloc(1000000); then you can do char *b = &a[250000] , char *c =
	   &a[500000] char *d = &a[750000] . Now the pointers a, b, c and d each point to a 250kB memory
	   block. Just as with any other buffers, you'll need to make sure you don't access past those
	   block.

2 Answers 2

***
   If you want to be able to return memory to the pool, it gets more complicated. However, for the quick
   and not-quite-so-dirty approach, you may want to implement some code that you can use again...

typedef struct pool {
	char * next;
	char * end;
} POOL;

POOL * pool_create( size_t size ) {
	POOL * p = (POOL*)malloc( size + sizeof(POOL) );
	p->next = (char*)&p[1];
	p->end = p->next + size;
	return p;
}

void pool_destroy( POOL *p ) {
	free(p);
}

size_t pool_available( POOL *p ) {
	return p->end - p->next;
}

void * pool_alloc( POOL *p, size_t size ) {
	if( pool_available(p) < size ) return NULL;
	void *mem = (void*)p->next;
	p->next += size;
	return mem;
}

   In my experience, when using pools like this to allocate many objects, I want to precalculate how
   much memory will be needed so that I'm not wasteful, but I also don't want to make any mistakes (like
   not allocating enoudh). So I put all the allocation code inside a loop, and set up my pool allocation
   functions to accept a flag that performs a 'dummy' allocation on an empty pool. The second time
   around the loop, I have already calculated the size of the pool so I can create the pool and do the
   real allocations all with the same function calls and no duplicate code. You'd need to change my
   suggested pool code, because you can't do this with pointer arithmetic if the memory hasn't been
   allocated.

	 * 2
	   Well, 'quick and dirty' was requested =) It's pretty simple to make a pool_alloc_aligned()
	   function.
	 * Don't you think that p->end = (char*)p + size + sizeof(pool) - 1;
	 * @dexterous_stranger No. p->next is already at (char*)p + sizeof(pool), and p->end should be one
	   past the last available byte so that pool_available works.
	 * How would this be extended to make the pool growable when out of size?
	 * Maybe a linked list of pools?

***
   Memory Management using Memory Pool -

   Memory Pool is the way to pre-allocate the blocks of memory of the same size. For example, various
   objects of the same class. Thus, it is more about designing the 'Memory Model' ofyour software.

   Example - An animated gif has various frames. Let's say each frame needs maximum 1024 KB only. Also,
   if we know that we can have maximum two frames only, then we can avoid fragmentation by
   pre-allocating the memory for each frame.

   [note] - Memory Pool is more applicable where we know the behaviour of the system at design time.
   Thus, memory pool concept is not applicable everywhere.
   //============================================================================ // Name :
   MemoryPool.cpp // Author : // Version : // Copyright : SHREYAS JOSHI // Description :
   //============================================================================
#include <iostream>
#include <malloc.h>

struct memPool {

private:
	char *m_poolPtr;
	char *m_nextAvailAddr;
	char *m_endAddr;

public:
	/** Methods for the structure **/
	void poolCreate(size_t size);
	void poolDestroy();
	void * poolAlloc(size_t size);

	memPool():m_poolPtr(NULL),m_nextAvailAddr(NULL),m_endAddr(NULL) {
		std::cout<<"memPool constructor Invoked"<<std::endl;
	}

	~memPool() {
		std::cout<<"memPool Destructor Invoked"<<std::endl;
		m_poolPtr = NULL;
		m_nextAvailAddr = NULL;
		m_endAddr = NULL;
	}
};

/** Create a Pool of memory - makes a program hassle free of doing malloc multiple times **/
/** Also, Fragmentation can be avoided with the Memory Pool concept **/
/** A pool concept is useful, when you know at design time.how much memory is required for
the similar type of objects in total**/

void memPool::poolCreate(size_t size) {
	m_poolPtr = (char *) malloc(size);

	if(m_poolPtr == NULL) {
		std::cout<<"Pool Create Failed"<<std::endl;
		//printf("Pool Create Failed \r\n");
	}

	m_nextAvailAddr = m_poolPtr;
	/** note the addressing starts from zero - thus you have already counted zero**/
	m_endAddr = m_poolPtr + size - 1;

	//printf("The Pool Head Pointer = %p \r\n",m_poolPtr);
	std::cout<<"Pool Head Pointer = "<<static_cast<void *>(m_poolPtr)<<std::endl;
	
	//printf("The Pool m_nextAvailAddr = %p \r\n",m_nextAvailAddr);
	std::cout<<"Pool m_nextAvailAddr = "<<static_cast<void *>(m_nextAvailAddr)<<std::endl;

	//printf("The Pool m_endAddr = %p \r\n",m_endAddr);
	std::cout<<"Pool m_endAddr = "<<static_cast<void *>(m_endAddr)<<std::endl;
}


/** Destroy the entire pool in one shot ********/
void memPool::poolDestroy() {
	free(m_poolPtr);

	/** Remember free first then assign to NULL **/
	m_poolPtr = NULL;

	/** Update Housekeeping--data structure **/
	m_nextAvailAddr = NULL;
	m_endAddr = NULL;
}

/** Allocate some space from the pool ********/
/** Check if the space is available or not **/
/** Do the housekeeping - update the nextAvail Addr in the structure**/
void * memPool::poolAlloc(size_t size) {
	void *mem = NULL;

	if( (m_endAddr != NULL) && (m_nextAvailAddr != NULL)) {

		/** This is according to fencing problem - add 1 when you are find a difference of sequence to
		calculate the space within **/
		size_t availableSize = m_endAddr - m_nextAvailAddr + 1;

		/** check for the availability **/
		if(size > availableSize ) {
			//std::cout<<"Warning!! the available size = "<<availableSize<< "requested size = "<<size<<std::endl;
			printf("Warning!! the available size = %u and requested size = %u \r\n",availableSize, size);
			mem = NULL;
		} else {
			/** store the available pointer to the user**/
			mem = m_nextAvailAddr;
			
			//printf("The user return pointer is = %p \r\n ",mem);
			std::cout<<"The user return pointer is = "<<static_cast <void *>(mem)<<std::endl;

			/*** advance the next available pointer **/
			m_nextAvailAddr += size;

			//printf("The next available pointer is = %p \r\n ",m_nextAvailAddr);
			std::cout<<"The next available pointer is = "<<static_cast<void *>(m_nextAvailAddr)<<std::endl;
		}
	}

	return mem;
}

int main(int argc, char *argv[]) {
	memPool gifAnimatedImageFramesBlk;

	/** Let's say each frame needs 512 kb **/
	char *gifFrame1 = NULL;
	char *gifFrame2 = NULL;
	char *gifFrame3 = NULL;

	/** 1 MB Pool for the GIF IMAGE FRAMES **/
	gifAnimatedImageFramesBlk.poolCreate(1024*1024*1024);

	/*** 512 KB **/
	gifFrame1 = (char *)gifAnimatedImageFramesBlk.poolAlloc(512*1024*1024);

	//printf("Got the gifFrame1..pointer- == %p \r\n ",gifFrame1);
	std::cout<<"Got the gifFrame1..pointer- == "<<static_cast<void *>(gifFrame1)<<std::endl;

	/** again 512 MB **/
	gifFrame2 = (char *)gifAnimatedImageFramesBlk.poolAlloc(512*1024*1024);
	std::cout<<"Got the gifFrame2..pointer- == "<<static_cast<void *>(gifFrame2)<<std::endl;

	//printf("Got the gifFrame2..pointer- == %p \r\n ",gifFrame2);

	/*************Exhausted the pool memory now **************/

	/** This will fail ****************/
	gifFrame3 = (char *)gifAnimatedImageFramesBlk.poolAlloc(1);

	std::cout<<"Got the gifFrame3..pointer- == "<<static_cast<void *>(gifFrame3)<<std::endl;
	//printf("Got the gifFrame3..pointer- == %p \r\n ",gifFrame3);

	/*****Destroy the Pool now *****************/
	gifAnimatedImageFramesBlk.poolDestroy();

	gifFrame3 = (char *)gifAnimatedImageFramesBlk.poolAlloc(1);

	std::cout<<"Got the gifFrame3..pointer- == "<<static_cast<void *>(gifFrame3)<<std::endl;

	//printf("Got the gifFrame3..pointer- == %p \r\n ",gifFrame3);

	gifFrame3 = (char *)gifAnimatedImageFramesBlk.poolAlloc(1);

	std::cout<<"Got the gifFrame3..pointer- == "<<static_cast<void *>(gifFrame3)<<std::endl;
	//printf("Got the gifFrame3..pointer- == %p \r\n ",gifFrame3);

	return 0;
}

   [note] - In order to print the value of char * in C++ using ostream::operator<<, the char * should be
   typecasted to void * using static_cast (pointer_Name). The problem is that if the C++ compiler sees
   the char *, then it looks for the NULL terminator - '\0'. In this case, there is no NULL terminator
   '\0'. So, you will see an undefined behaviour.

   Advantages of Memory Pool
	1. You can avoid fragmentation of memory. Even if the system has required memory space, the malloc()
	   will fail when the desired contigous block size is not available.
	2. The space is reserved, and the frequent malloc() and free() is avoided. This will save time.
	3. When malloc() is called for many sub-blocks, the administrative/meta data is associated with each
	   allocated sub-blocks. This will consume unnecessary space. Instead, one big block allocation will
	   avoid the multiple administrative/meta data.
	4. If the memory space is restricted, then it is easy to investigate for the memory leaks. If memory
	   is exhausted in Pool, then memory pool will return NULL. Thus, you can isolate a memory leak
	   problem easily.


---
https://codereview.stackexchange.com/questions/204406/fixed-sized-memory-pool-in-c

Fixed-sized memory pool in C

   I'm learning C and I am currently implementing a memory pool.

   I'm writing it in steps, first I implemented a fixed-sized memory pool then I will try to implement a
   memory pool with a known size of elements but an unknown number of elements and ultimately try to
   write a generic one that is just a block of memory that can allocate any size.

   The pool is actually a block of memory that is initialized with values that are pointers to the next
   memory like so:
 ______________
|0x8 |0x10|NULL|
|____|____|____|
 ^	  ^    ^
 0x0  0x8  0x10

   I want to know if I'm heading in the right direction. There is the code

   allocator.h:
#include <stdlib.h>

typedef struct FixedPoolAllocator FixedPoolAllocator;

FixedPoolAllocator* FixedPoolAllocator_new(size_t nmemb, size_t size);

void* FixedPoolAllocator_alloc(FixedPoolAllocator *allocator);

void FixedPoolAllocator_free(FixedPoolAllocator *allocator, void *ptr);

void FixedPoolAllocator_destroy(FixedPoolAllocator *allocator);

   allocator.c:
#include "allocator.h"

#define MAX(a, b) (((a) > (b)) ? (a) : (b))

typedef struct FixedPoolAllocator {

	// The currently free space in which a value can be stored
	size_t *currentFree;
	size_t numOfMembers;
	size_t memberSize;

	// The actual memory block, It is of type char* so that pointer arithmetic will be easier
	char *mem;

} FixedPoolAllocator;

FixedPoolAllocator* FixedPoolAllocator_new(size_t nmemb, size_t size) {
	if (0 == size || 0 == nmemb) return NULL;

	FixedPoolAllocator *ret = malloc(sizeof *ret);
	if (NULL == ret) return NULL;

	// Make sure that the size of each member is atleast size_t so that the members can store a memory address
	size_t member_size = MAX(sizeof(size_t), size);

	ret->mem = malloc(nmemb * member_size);
	if (NULL == ret->mem) return NULL;

	// The initial free member
	ret->currentFree = (size_t*)ret->mem;

	ret->numOfMembers = nmemb;
	ret->memberSize = size;
	size_t *temp = ret->currentFree;

	// Assign each member with the address of the next member
	size_t i;

	for (i = 0; i < nmemb - 1; i++) {
		*temp = (size_t) (ret->mem + (i+1) * member_size);
		temp = (size_t*) ((char*)temp + member_size);
	}

	// The last member points to NULL
	*temp = (size_t)NULL;

	return ret;
}

void* FixedPoolAllocator_alloc(FixedPoolAllocator *allocator) {
	if (NULL == allocator || NULL == allocator->currentFree) return NULL;

	// Return the currently free member and update currentFree to the next member in the list
	void *ret = allocator->currentFree;
	allocator->currentFree = (size_t*)*allocator->currentFree;

	return ret;
}

void FixedPoolAllocator_free(FixedPoolAllocator *allocator, void *ptr) {
	size_t ptr_as_value = (size_t)ptr;

	// Assign the pointed value with the current free member
	*(size_t*)ptr = (size_t)allocator->currentFree;

	// Update the currenty free member to be the one that was just freed
	allocator->currentFree = ptr;
}

void FixedPoolAllocator_destroy(FixedPoolAllocator *allocator) {
	free(allocator->mem);
	free(allocator);
}

***
   Only a small review

   Alignment not guaranteed
   temp = (size_t*) ((char*)temp + member_size); attempts to convert a char* to size_t *, yet
   (char*)temp + member_size is not known to be properly aligned for a size_t*. Insufficient alignment
   is undefined behavior.

   Detect overflow
   As the true product of nmemb * member_size may exceed SIZE_MAX:
if (SIZE_MAX/nmemb > member_size) {
	Handle_Overflow();  // clean-up, return NULL;
}
... =  malloc(nmemb * member_size);

   Strange uses of size_t as pointer
   // The last member points to NULL *temp = (size_t)NULL; implies something wrong. If codes needs a
   pointer, use a pointer, not size_t. If code needs a size, doesn't use a pointer. Note that size_t and
   pointers do not necessarily covert well back and forth. They might not be the same memory width
   either.

***
   If you want enough size to fit a void* then actually use sizeof(void*). If you really want to use an
   integer type instead of a pointer type then use intptr_t instead of size_t.
size_t member_size = MAX(sizeof(void*), size);

   You leak if you fail to allocate the actual pool:

if (NULL == ret->mem) {
	free(ret);
	return NULL;
}

   Initializing the pool can be done simpler:

// Assign each member with the address of the next member
size_t i;
for (i = 0; i < nmemb - 1; i++) {
	*temp = (void*) ((char*)temp + member_size);
	temp = (void*) ((char*)temp + member_size);
}

   You can also avoid that entire initialization loop by using an extra member that marks the high water
   mark (the furthest element that was ever allocated) and is used when allocator->currentFree == NULL:

void* FixedPoolAllocator_alloc(FixedPoolAllocator *allocator) {
	if (NULL == allocator) return NULL;

	if (NULL == allocator->currentFree) {
		// nothing in freelist, increment highWater
		if (allocator->highWater == ret->numOfMembers) return NULL;

		void *ret = (void*) (allocator->mem + allocator->highWater);
		allocator->highWater += allocator->memberSize;
		return ret;
	}

	// Return the currently free member and update currentFree to the next member in the list
	void *ret = allocator->currentFree;
	allocator->currentFree = (void*)*allocator->currentFree;

	return ret;
}


---
https://codereview.stackexchange.com/questions/253119/statically-allocated-memory-pool-in-c-for-embedded-systems

Statically allocated memory pool in C for embedded systems

   I made a statically allocated memory pool for embedded systems. I think it needs a little work but it
   works fine so far.

   How it works: An array of size MEMORY_POOL_SIZE is first reserved in memory and that's actually the
   space and the whole program uses to get memory from.
   The number of allocations that can happen at the same time are limited and defined from
   MEMORY_POOLS_NUM. The current implementation below uses 16384 bytes of memory space and 64 concurrent
   memory allocations. The numbers don't have to be power of 2.

   When the program wants to allocate some memory, it access the memory allocator which passes a pointer
   back to the program.

   It is thread safe, which means the program is not interrupted during the allocation or de-allocation
   of the memory pool.

   When the size an allocated space needs to change (realloc) everything in memory has to move. When the
   pointers of the mem_allocator point to a different address, the program will break and for this
   reason the pointers that are passed back to the program point to the address of the start_p.

   -- mem_pool.h --
#ifndef MEM_POOL_H
#define MEM_POOL_H

#include <inttypes.h>

/**
 * \brief      Allocates a chunk from the memory pool
 * \param buf  Must be a double NULL pointer.
 * \param size Must be greater than zero.
*/
void mem_pool_alloc(uint8_t ** buf, uint16_t size);

/**
 * \brief         Re-allocates a chunk from the memory pool.
 *                The new chunk is always bigger.
 * \param buf     Must be a double NULL pointer.
 * \param size    Must be greater than zero.
*/
void mem_pool_realloc(uint8_t ** buf, uint16_t new_size);

/**
 * \brief      Release a chunk from the memory pool.
 * \param buf  Must be a double pointer.
*/
void mem_pool_free(uint8_t ** buf);

#endif

   -- mem_pool.c --
#include "mem_pool.h"
#include <stddef.h>
#include <stdbool.h>

#define MEMORY_POOL_SIZE	(16384) /** The size in bytes of the statically allocated memory */
#define MEMORY_POOLS_NUM	(64)	/** The number of elements of the memory allocator */

typedef struct {
	bool     locked;    /** Shows whether the element of the memory allocator is reserved or not */
	uint8_t* start_p;   /** The pointer to the first element in the statically allocated memory */
	uint16_t size;      /** The total size of the chunk that is allocated from the memory */

} MemPoolAllocator;

/**
 * The statically allocated array in memory.
 */
static volatile uint8_t memory_pool[MEMORY_POOL_SIZE];

/**
 * Memory allocator struct. It is used to allocate memory in the pool.
 */
static volatile MemPoolAllocator mem_allocator[MEMORY_POOLS_NUM];

void mem_pool_alloc(uint8_t ** buf, uint16_t size) {
	ASSERT(buf != NULL);
	ASSERT(*buf == NULL);
	ASSERT(size > 0);

	__disable_irq();

	for (uint8_t i = 0; i < MEMORY_POOLS_NUM; i++) {
		if (mem_allocator[i].locked == false) {
			mem_allocator[i].locked = true;
			// Find the first unlocked element.
			if (i > 0) {
				mem_allocator[i].start_p = mem_allocator[i - 1].start_p + mem_allocator[i - 1].size;
			} else {
				// If the element is the first one the pointer of the chunk points to the first byte of
				// the statically allocated memory.
				mem_allocator[i].start_p = memory_pool;
			}
			mem_allocator[i].size = size;

			// The double pointer points to the address of the pointer.
			// This allows the pointers that the program use to be updated in case
			// a re-allocation is needed.
			*buf = &mem_allocator[i].start_p;

			__enable_irq();
			return;
		}
	}

	*buf = NULL;
	__enable_irq();
}

void mem_pool_realloc(uint8_t ** buf, uint16_t new_size) {
	ASSERT(buf != NULL);
	ASSERT(new_size > 0);

	__disable_irq();

	if (*buf == NULL) {
		mem_pool_alloc(buf, new_size);
	} else {
		for (uint8_t id = 0; id < MEMORY_POOLS_NUM; id++) {
			if (*buf == &mem_allocator[id].start_p) {
				// The current element must be locked.
				ASSERT(mem_allocator[id].locked == true);

				// Starting from the end, all elements of the memory pool and
				// the memory allocator must move as many as the new_size variable.
				for (uint8_t x = MEMORY_POOLS_NUM - 1; x > id; x--) {
					if (mem_allocator[x].locked == true) {

						uint16_t temp_size = mem_allocator[x].size;
						uint16_t offset_size = new_size - mem_allocator[x].size;

						for (uint16_t a = mem_allocator[x].size; a > 0; a--) {
							*(mem_allocator[x].start_p + a + offset_size - 1) = *(mem_allocator[x].start_p + a - 1);
							*(mem_allocator[x].start_p + a - 1) = 0; // Initialize the new space to 0.
						}
						mem_allocator[x].start_p += offset_size;
						mem_allocator[x].size = new_size;
					}
				}
				break;
			}
		}
	}

	__enable_irq();
}

void mem_pool_free(uint8_t ** buf) {
	if ((*buf == NULL) || (buf == NULL)) {
		return;
	}

	__disable_irq();

	uint8_t id = 0;
	for (id = 0; id < MEMORY_POOLS_NUM; id++) {
		if (*buf == &mem_allocator[id].start_p) {
			ASSERT(mem_allocator[id].locked == true);

			mem_allocator[id].locked = false;
			*buf = NULL;

			for (uint16_t i = 0; i < mem_allocator[id].size; i++) {
				mem_allocator[id].start_p[i] = 0;
			}
			mem_allocator[id].start_p = NULL;
			mem_allocator[id].size = 0;

			break;
		}
	}
	__enable_irq();
}

***
Consider using void pointers
   Prefer using void pointers in your memory pool API, as this allows the caller to pass in any type of
   pointer without having to explicitly cast them. So for example:
void mem_pool_alloc(void **buf, uint16_t size);

Naming things
   There are several ways the names of constants, variables and functions can be improved. First: avoid
   repeating mem and memory in private variables and functions inside mem_pool.c. It is already clear
   from the context that everything has to do with memory pools. So for example:
#define POOL_SIZE (16384)
...
static uint8_t pool[POOL_SIZE];

   Futhermore, MemPoolAllocator is a misnomer, this struct just represents a single allocation from the
   memory pool. Also, there is only one pool, so NUM_POOLS is wrong as well. I would instead write:
#define NUM_ALLOCATIONS (64)

typedef struct {
	...
} Allocation;

static Allocation allocations[NUM_ALLOCATIONS];

Avoid unnecessary use of volatile
   You should not make things volatile unnecessarily. The volatile keyword doesn't make access atomic,
   and while it prevents the compiler from reordering access to volatile variables with respect to other
   volatile variables, it doesn't prevent the CPU itself from reordering access.

   I would check if __disable_irq() and __enable_irq() themselves act as memory barriers. If so, that
   will be enough to guarantee that everything stays consistent. Then the compiler is free to reorder
   access to the variables between those two statements as it sees fit, resulting in better optimized
   code.

Unnecessary member variable locked
   I see that you do not allow allocations of zero length. This means you can use the member variable
   size to check whether an allocation is in use or not, and you don't need locked anymore:
void *mem_pool_alloc(uint16_t size) {
	...
	for (uint8_t i = 0; i < NUM_ALLOCATIONS; i++) {
		if (allocations[i].size == 0) {
			// This allocation is free
			...

Check if there is enough space in the pool
   allocations larger than the size of the whole pool. But second, even if there is enough free space in
   the pool as a whole, it doesn't check whether there is enough space at the location it has chosen.
   Consider this order of events:
void *p1, *p2, *p3;
mem_pool_alloc(&p1, 10);
mem_pool_alloc(&p2, 10);
mem_pool_alloc(&p3, 10);
mem_pool_free(&p2);
mem_pool_alloc(&p2, 20); // will overwrite p3

   What you should do is find a free spot that is large enough to hold the new allocation. And due to
   fragmentation there might not be, unless you move allocations here as well.

Your reallocation algorithm doesn't move anything before the allocation that is resized
   When moving existing allocations to make space for the new size of an allocation during
   mem_pool_realloc(), you only consider moving allocations after the one being resized. But what if
   it's already the last one? You should handle moving allocations both before and after: move
   allocations before towards the start of the pool, and allocations after towards the end of the pool,
   to make enough space in the middle of the pool.

***
   Design:
	 * Consider making an API that enforces the caller to allocate aligned chunks. This will make the
	   code much more robust on 32 bit systems. You can still let them state the desired size in bytes,
	   but do the actual allocation on aligned chunks (32 bits etc). It's strange that your code does
	   not address alignment at all(?) as far as I can see.
	 * Avoid asserts inside library code. They don't add much but slow everything down. Besides that,
	   the proper way to deal with "dumb" errors such as null pointers or other nonsense parameters is
	   to enforce the error checking on the caller through documentation. It's not the job of your
	   function to chase down application layer bugs in the calling application.
	   If you need actual error handling rather than "halt and catch fire like a PC", then return an
	   enum error code from the functions and let the caller deal with the errors.
	 * Hitting the global interrupt mask is questionable practice in general. This must be documented
	   too. Besides, your library has no use case that requires the library itself to prevent race
	   conditions with interrupts. So in the normal use-case, all this achieves is to screw up the
	   real-time performance of any program using your library, for no reason what so ever. Not sexy at
	   all. In this case "thread safety" is not a feature, but a burden. The user could as well have
	   shut down the relevant interrupts in the caller code.
	 * volatile achieves nothing in this case, unless you somehow expect the user to DMA data straight
	   into the memory pool. In which case you should design a special version of the memory pool for
	   that specific purpose.

   Style:
	 * Place all library includes in the header. This documents to the user who reads your header which
	   library dependencies it got.
	 * I'd use stdint.h over inttypes.h because the former is mandatory for all C systems, including
	   embedded ("freestanding") systems. inttypes.h is not necessarily supported by embedded compilers
	   and apart from including stdint.h, it only contains misc printf formatting goo that you don't
	   need anyway.
	 * Parenthesis around integer constants in macros (16384) is superfluous and only adds clutter. You
	   only need to use parenthesis when dealing with function-like macros.


---
