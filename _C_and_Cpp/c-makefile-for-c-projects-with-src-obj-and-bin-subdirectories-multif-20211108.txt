filename: c_makefile-for-c-projects-with-src-obj-and-bin-subdirectories-multif_20211108.txt
https://coderedirect.com/questions/138847/how-can-i-create-a-makefile-for-c-projects-with-src-obj-and-bin-subdirectories

How can I create a Makefile for C projects with SRC, OBJ, and BIN subdirectories?
Asked  5 Months ago    Answers:  5	 Viewed   25 times

A few months ago, I came up with the following generic Makefile for school assignments:

<code>
# ------------------------------------------------
# Generic Makefile
#
# Author: yanick.rochon@gmail.com
# Date:   2010-11-05
#
# Changelog :
#         0.01 - first version
# ------------------------------------------------

# project name (generate executable with this name)
TARGET     = projectname

CC         = gcc -std=c99 -c
# compiling flags here
CFLAGS     = -Wall -I.

LINKER     = gcc -o
# linking flags here
LFLAGS     = -Wall

SOURCES    := $(wildcard *.c)
INCLUDES   := $(wildcard *.h)
OBJECTS    := $(SOURCES:.c=*.o)
rm         = rm -f

$(TARGET): obj
	@$(LINKER) $(TARGET) $(LFLAGS) $(OBJECTS)
	@echo "Linking complete!"

obj: $(SOURCES) $(INCLUDES)
	@$(CC) $(CFLAGS) $(SOURCES)
	@echo "Compilation complete!"

clean:
	@$(rm) $(TARGET) $(OBJECTS)
	@echo "Cleanup complete!"
</code>

This will basically compile every .c and .h file to generate .o files and the executable projectname
all in the same folder.

Now, I'd like to push this a little. How can I write a Makefile to compile a C project with the following
directory structure?

 ./
 ./Makefile
 ./src/*.c;*.h
 ./obj/*.o
 ./bin/<executable>

In other words, I'd like to have a Makefile that compiles C sources from ./src/ into ./obj/ and then
link everything to create the executable in ./bin/.

I've tried to read different Makefiles, but I simply can't make them work for the project structure
above; instead, the project fails to compile with all sorts of errors. Sure, I could use full blown IDE
(Monodevelop, Anjuta, etc.), but I honestly prefer to stick with gEdit and the good ol' terminal.

Is there a guru who can give me a working solution, or clear information about how this can be done? Thank
you!

** UPDATE (v4) **

The final solution :

<code>
# ------------------------------------------------
# Generic Makefile
#
# Author: yanick.rochon@gmail.com
# Date:   2011-08-10
#
# Changelog:
#    2010-11-05 - first version
#    2011-08-10 - added structure : sources, objects, binaries
#                 thanks to http://stackoverflow.com/users/128940/beta
#    2017-04-24 - changed order of linker params
# ------------------------------------------------

# project name (generate executable with this name)
TARGET     = projectname

CC         = gcc
# compiling flags here
CFLAGS     = -std=c99 -Wall -I.

LINKER     = gcc
# linking flags here
LFLAGS     = -Wall -I. -lm

# change these to proper directories where each file should be
SRCDIR     = src
OBJDIR     = obj
BINDIR     = bin

SOURCES    := $(wildcard $(SRCDIR)/*.c)
INCLUDES   := $(wildcard $(SRCDIR)/*.h)
OBJECTS    := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
rm         = rm -f


$(BINDIR)/$(TARGET): $(OBJECTS)
	@$(LINKER) $(OBJECTS) $(LFLAGS) -o $@
	@echo "Linking complete!"

$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	@$(CC) $(CFLAGS) -c $< -o $@
	@echo "Compiled "$<" successfully!"

.PHONY: clean
clean:
	@$(rm) $(OBJECTS)
	@echo "Cleanup complete!"

.PHONY: remove
remove: clean
	@$(rm) $(BINDIR)/$(TARGET)
	@echo "Executable removed!"
</code>

 Answers

***
	it's kind of indiscriminate, making all sources prerequisites of every object,
	it often uses the wrong source (as you discovered with file1.o and file2.o)
	it tries to build executables instead of stopping at objects, and
	the name of the target (foo.o) is not what the rule will actually produce (obj/foo.o).

I suggest the following:

OBJECTS  := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@
	@echo "Compiled "$<" successfully!"

The $(TARGET) rule has the same problem that the target name does not actually describe what the rule
builds. For that reason, if you type make several times, Make will rebuild the target each time, even
though there is no reason to. A small change fixes that:

$(BINDIR)/$(TARGET): $(OBJECTS)
	$(LINKER) $@ $(LFLAGS) $(OBJECTS)
	@echo "Linking complete!"

Once that's all in order, you might consider more sophisticated dependency handling; if you modify one
of the header files, this makefile will not know which objects/executables must be rebuilt. But that
can wait for another day.

EDIT:
Sorry, I omitted part of the $(OBJECTS) rule above; I've corrected it. (I wish I could use "strike"
inside a code sample.)

***
First off, Levenshtein distance is defined as the minimum number of edits required to transform string A
to string B, where an edit is the insertion, or deletion of a single character, or the replacement of a
character with another character. So it's very much the "difference between two strings", for a certain
definition of distance. =)

It sounds like you're looking for a distance function F(A, B) that gives a distance between strings A and
B and a threshold N where strings with distance less than N from each other are candidates for typos. In
addition to Levenshtein distance you might also consider Needleman-Wunsch. It's basically the same
thing but it lets you provide a function for how close a given character is to another character. You
could use that algorithm with a set of weights that reflect the positions of keys on a QWERTY keyboard
to do a pretty good job of finding typos. This would have issues with international keyboards though.

If you have k strings and you want to find potential typos, the number of comparisons you need to make is
O(k^2). In addition, each comparison is O(len(A)*len(B)). So if you have a million strings you're going
to find yourself in trouble if you do things naively. Here are a few suggestions on how to speed things up:

	Apologies if this is obvious, but Levenshtein distance is symmetrical, so make sure you aren't
	computing F(A, B) and F(B, A).
	abs(len(A) - len(B)) is a lower bound on the distance between strings A and B. So you can skip
	checking strings whose lengths are too different.

One issue you might run into is that "1st St." has a pretty high distance from "First Street", even
though you probably want to consider those to be identical. The easiest way to handle this is probably
to transform strings into a canonical form before doing the comparisons. So you might make all strings
lowercase, use a dictionary that maps "1st" to "first", etc. That dictionary might get pretty big,
but I don't know a better way to deal with this issues.

Since you tagged this question with php, I'm assuming you want to use php for this. PHP has a built-in
levenshtein() function but both strings have to be 255 characters or less. If that's not long enough
you'll have to make your own. Alternatively, you investigate using Python's difflib.



---
http://ostack.cn/?qa=552512/

How can I create a Makefile for C projects with SRC, OBJ, and BIN subdirectories?

   A few months ago, I came up with the following generic Makefile for school assignments:
<code>
# ------------------------------------------------
# Generic Makefile
#
# Author: yanick.rochon@gmail.com
# Date  : 2010-11-05
#
# Changelog :
#	0.01 - first version
# ------------------------------------------------

# project name (generate executable with this name)
TARGET   = projectname

CC       = gcc -std=c99 -c
# compiling flags here
CFLAGS   = -Wall -I.

LINKER   = gcc -o
# linking flags here
LFLAGS   = -Wall

SOURCES  := $(wildcard *.c)
INCLUDES := $(wildcard *.h)
OBJECTS  := $(SOURCES:.c=*.o)
rm       = rm -f

$(TARGET): obj
	@$(LINKER) $(TARGET) $(LFLAGS) $(OBJECTS)
	@echo "Linking complete!"

obj: $(SOURCES) $(INCLUDES)
	@$(CC) $(CFLAGS) $(SOURCES)
	@echo "Compilation complete!"

clean:
	@$(rm) $(TARGET) $(OBJECTS)
	@echo "Cleanup complete!"
</code>

   This will basically compile every .c and .h file to generate .o files and the executable projectname
   all in the same folder.

   Now, I'd like to push this a little. How can I write a Makefile to compile a C project with the
   following directory structure?
 ./
 ./Makefile
 ./src/*.c;*.h
 ./obj/*.o
 ./bin/<executable>

   In other words, I'd like to have a Makefile that compiles C sources from ./src/ into ./obj/ and then
   link everything to create the executable in ./bin/.

   I've tried to read different Makefiles, but I simply can't make them work for the project structure
   above; instead, the project fails to compile with all sorts of errors. Sure, I could use full blown
   IDE (Monodevelop, Anjuta, etc.), but I honestly prefer to stick with gEdit and the good ol' terminal.

   Is there a guru who can give me a working solution, or clear information about how this can be done?
   Thank you!

   ** UPDATE (v4) **

   The final solution :
<code>
# ------------------------------------------------
# Generic Makefile
#
# Author:  yanick.rochon@gmail.com
# Date:    2011-08-10
#
# Changelog :
#    2010-11-05 - first version
#    2011-08-10 - added structure : sources, objects, binaries
#                 thanks to http://stackoverflow.com/users/128940/beta
#    2017-04-24 - changed order of linker params
# ------------------------------------------------

# project name (generate executable with this name)
TARGET    = projectname

CC        = gcc
# compiling flags here
CFLAGS    = -std=c99 -Wall -I.

LINKER    = gcc
# linking flags here
LFLAGS    = -Wall -I. -lm

# change these to proper directories where each file should be
SRCDIR    = src
OBJDIR    = obj
BINDIR    = bin

SOURCES  := $(wildcard $(SRCDIR)/*.c)
INCLUDES := $(wildcard $(SRCDIR)/*.h)
OBJECTS  := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
rm       = rm -f


$(BINDIR)/$(TARGET): $(OBJECTS)
	@$(LINKER) $(OBJECTS) $(LFLAGS) -o $@
	@echo "Linking complete!"

$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	@$(CC) $(CFLAGS) -c $< -o $@
	@echo "Compiled "$<" successfully!"

.PHONY: clean
clean:
	@$(rm) $(OBJECTS)
	@echo "Cleanup complete!"

.PHONY: remove
remove: clean
	@$(rm) $(BINDIR)/$(TARGET)
	@echo "Executable removed!"
</code>

***
   First, your $(OBJECTS) rule is problematic, because:
	1. it's kind of indiscriminate, making all sources prerequisites of every object,
	2. it often uses the wrong source (as you discovered with file1.o and file2.o)
	3. it tries to build executables instead of stopping at objects, and
	4. the name of the target (foo.o) is not what the rule will actually produce (obj/foo.o).

   I suggest the following:
OBJECTS  := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@
	@echo "Compiled "$<" successfully!"

   The $(TARGET) rule has the same problem that the target name does not actually describe what the rule
   builds. For that reason, if you type make several times, Make will rebuild the target each time, even
   though there is no reason to. A small change fixes that:
$(BINDIR)/$(TARGET): $(OBJECTS)
	$(LINKER) $@ $(LFLAGS) $(OBJECTS)
	@echo "Linking complete!"

   Once that's all in order, you might consider more sophisticated dependency handling; if you modify
   one of the header files, this makefile will not know which objects/executables must be rebuilt. But
   that can wait for another day.

   EDIT:
   Sorry, I omitted part of the $(OBJECTS) rule above; I've corrected it. (I wish I could use "strike"
   inside a code sample.)



---
https://gist.github.com/keeferrourke/fe72476a8dd8c4c02ff18eaed74e1de0

   Generic Makefile

   Makefile
<code>
# Generic makefile for a C project
# Written by Keefer Rourke <mail@krourke.org>
#
# This file is Public Domain or, in places where public domain works
# are not recognized, licensed as CC0. Legal text:
# <https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt>
#
# This Makefile should not rely and any GNU-specific functionality,
# though it is based on the GNU make documentation which is available
# at: <https://www.gnu.org/software/make/manual/make.html>

# specify the shell, in case the SHELL variable is not set or is not
# inherited from the environment
SHELL = /bin/bash

# set suffix list, to prevent confusion between different make programs
# line 17 clears an implied suffix list, and line 18 sets a new one
.SUFFIXES:
.SUFFIXES: .c .h .o

# project set up and directories
CC      = gcc
INCLDIR = include/
BINDIR  = bin/
OBJDIR  = obj/
SRCDIR  = src/

# final executable name
_BIN    = a.out
BIN     = $(addprefix $(BINDIR), $(_BIN))

# files; here all object files will be stored in $(OBJDIR), with the
# same base names as corresponding c files from SRCDIR
SRC     = $(wildcard src/*.c)
_OBJS   = $(patsubst src/%.c, %.o, $(SRC))
OBJS    = $(addprefix $(OBJDIR), $(_OBJS))

# compilation flags
CFLAGS = -Wall -std=c99 -pedantic -g -I$(INCLDIR)
OFLAGS =


# compile binary and object files
.PHONY: all
all: $(BIN) docs

$(BIN): $(BINDIR) $(OBJS)
	$(CC) $(OFLAGS) $(OBJS) -o $(BIN)

$(BINDIR):
	mkdir -p $(BINDIR)

$(OBJS): $(OBJDIR) $(SRC)
	$(CC) $(CFLAGS) -c $(SRC) -o $(OBJS)

$(OBJDIR):
	mkdir -p $(OBJDIR)


# generate docs with doxygen
# this is intended to be used with a Doxyfile that specifies LaTeX
# output; modify as required for different documentation formats
#
# DOCDIR and TEXDIR must match the appropriate directories specified in
# Doxyfile
DOCDIR = docs/
TEXDIR = latex/

.PHONY: docs docs-clean
docs: Doxyfile
	doxygen
#   generate PDF from LaTeX sources
	cd $(DOCDIR)$(TEXDIR) && $(MAKE)
	mv $(DOCDIR)$(TEXDIR)refman.pdf $(DOCDIR)

docs-clean:
	cd $(DOCDIR)$(TEXDIR) && $(MAKE) clean


# clean entire project directory
.PHONY: clean
clean:
	- rm -rf $(BINDIR) $(OBJDIR) $(DOCDIR)


# check code quality
.PHONY: cppcheck memcheck
cppcheck:
	cppcheck --enable=all --language=c --std=c99 --inconclusive \
	--suppress=missingInclude $(SRC) -i $(INCLDIR)

memcheck: all
	valgrind -v --show-leak-kinds=all --leak-check=full --track-origins=yes \
	./$(BIN)

# debugging make
print-% :
	@echo $* = $($*)
</code>

   The print-% target is very helpful for debugging your Makefile itself, or for doing some tricks with
   the shell. You can call this target to print make variables to the console.

   Try running
$> make print-SRC print-OBJS print-OUT

   You should get something like:
SRC = src/one.c src/two.c src/three.c
OBJS = obj/one.o obj/two.o obj/three.o
OUT = bin/a.out



---
https://stackoverflow.com/questions/7004702/how-can-i-create-a-makefile-for-c-projects-with-src-obj-and-bin-subdirectories

How can I create a Makefile for C projects with SRC, OBJ, and BIN subdirectories?
A few months ago, I came up with the following generic Makefile for school assignments:

<code>
# ------------------------------------------------
# Generic Makefile
#
# Author: yanick.rochon@gmail.com
# Date:   2010-11-05
#
# Changelog :
#         0.01 - first version
# ------------------------------------------------

# project name (generate executable with this name)
TARGET   = projectname

CC       = gcc -std=c99 -c
# compiling flags here
CFLAGS   = -Wall -I.

LINKER   = gcc -o
# linking flags here
LFLAGS   = -Wall

SOURCES  := $(wildcard *.c)
INCLUDES := $(wildcard *.h)
OBJECTS  := $(SOURCES:.c=*.o)
rm        = rm -f

$(TARGET): obj
	@$(LINKER) $(TARGET) $(LFLAGS) $(OBJECTS)
	@echo "Linking complete!"

obj: $(SOURCES) $(INCLUDES)
	@$(CC) $(CFLAGS) $(SOURCES)
	@echo "Compilation complete!"

clean:
	@$(rm) $(TARGET) $(OBJECTS)
	@echo "Cleanup complete!"
</code>

This will basically compile every .c and .h file to generate .o files and the executable projectname
all in the same folder.

Now, I'd like to push this a little. How can I write a Makefile to compile a C project with the following
directory structure?

 ./
 ./Makefile
 ./src/*.c;*.h
 ./obj/*.o
 ./bin/<executable>

In other words, I'd like to have a Makefile that compiles C sources from ./src/ into ./obj/ and then
link everything to create the executable in ./bin/.

I've tried to read different Makefiles, but I simply can't make them work for the project structure
above; instead, the project fails to compile with all sorts of errors. Sure, I could use full blown IDE
(Monodevelop, Anjuta, etc.), but I honestly prefer to stick with gEdit and the good ol' terminal.

Is there a guru who can give me a working solution, or clear information about how this can be done? Thank
you!

** UPDATE (v4) **

The final solution :

# ------------------------------------------------
# Generic Makefile
#
# Author: yanick.rochon@gmail.com
# Date:   2011-08-10
#
# Changelog :
#    2010-11-05 - first version
#    2011-08-10 - added structure : sources, objects, binaries
#                 thanks to http://stackoverflow.com/users/128940/beta
#    2017-04-24 - changed order of linker params
# ------------------------------------------------

# project name (generate executable with this name)
TARGET   = projectname

CC       = gcc
# compiling flags here
CFLAGS   = -std=c99 -Wall -I.

LINKER   = gcc
# linking flags here
LFLAGS   = -Wall -I. -lm

# change these to proper directories where each file should be
SRCDIR   = src
OBJDIR   = obj
BINDIR   = bin

SOURCES  := $(wildcard $(SRCDIR)/*.c)
INCLUDES := $(wildcard $(SRCDIR)/*.h)
OBJECTS  := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
rml      = rm -f


$(BINDIR)/$(TARGET): $(OBJECTS)
	@$(LINKER) $(OBJECTS) $(LFLAGS) -o $@
	@echo "Linking complete!"

$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	@$(CC) $(CFLAGS) -c $< -o $@
	@echo "Compiled "$<" successfully!"

.PHONY: clean
clean:
	@$(rm) $(OBJECTS)
	@echo "Cleanup complete!"

.PHONY: remove
remove: clean
	@$(rm) $(BINDIR)/$(TARGET)
	@echo "Executable removed!"

***
First, your $(OBJECTS) rule is problematic, because:

	it's kind of indiscriminate, making all sources prerequisites of every object,
	it often uses the wrong source (as you discovered with file1.o and file2.o)
	it tries to build executables instead of stopping at objects, and
	the name of the target (foo.o) is not what the rule will actually produce (obj/foo.o).

I suggest the following:

OBJECTS  := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@
	@echo "Compiled "$<" successfully!"

The $(TARGET) rule has the same problem that the target name does not actually describe what the rule
builds. For that reason, if you type make several times, Make will rebuild the target each time, even
though there is no reason to. A small change fixes that:

$(BINDIR)/$(TARGET): $(OBJECTS)
	$(LINKER) $@ $(LFLAGS) $(OBJECTS)
	@echo "Linking complete!"

Once that's all in order, you might consider more sophisticated dependency handling; if you modify one
of the header files, this makefile will not know which objects/executables must be rebuilt. But that
can wait for another day.

EDIT:
Sorry, I omitted part of the $(OBJECTS) rule above; I've corrected it. (I wish I could use "strike"
inside a code sample.)

***
	with your suggested changes, I get : obj/file1.o: In function 'main': \n main.c:(.text+0x0): multiple
	definition of 'main' \n obj/main.o:main.c:(.text+0x0): first defined here -
	Yanick Rochon
	Aug 10 '11 at 5:18

***
	@Yanick Rochon: I made a mistake pasting the first line of my $(OBJECTS) rule; I've edited it. With
	the bad line I got an error, but not the one you got... -

***
You can add the -I flag to the compiler flags (CFLAGS) to indicate where the compiler should look for
source files , and the -o flag to indicate where the binary should be left:

CFLAGS     = -Wall -I./src
TARGETPATH = ./bin

$(TARGET): obj
	@$(LINKER) $(TARGETPATH)/$(TARGET) $(LFLAGS) $(OBJECTS)
	@echo "Linking complete!"

In order to drop the object files into the obj directory, use the -o option when compiling. Also, look
at the $@ and $< automatic variables.

For example, consider this simple Makefile

CFLAGS= -g -Wall -O3
OBJDIR= ./obj

SRCS=$(wildcard *.c)
OBJS=$(SRCS:.c=.o )
all:$(OBJS)

%.o: %.c
   $(CC) $(CFLAGS) -c $< -o $(OBJDIR)/$@

Update>

By looking at your makefile, I realize you are using the -o flag. Good. Continue using it, but add a
target directory variable to indicate where the output file should be written.

***
I have stopped writing makefiles these days, if your intention is to learn go ahead, else you have good
makefile generator that comes with eclipse CDT. If you want some maintainability / multiple project
support with in your build tree, have a look at the following -

https://github.com/dmoulding/boilermake I found this pretty good..!



---
https://spin.atomicobject.com/2016/08/26/makefile-c-projects/

 A Super-Simple Makefile for Medium-Sized C/C++ Projects

I've used Make for a lot for small projects, but for larger ones, it was just too tedious. Until recently,
there were four things I wanted my build system to do for me that I hadn't figured out how to do in Make:

	Out-of-source builds (object files get dumped in a separate directory from the source)
	Automatic (and accurate!) header dependencies
	Automatic determination of list of object/source files
	Automatic generation of include directory flags

Here is a simple Makefile that will do all these things and works with C, C++, and assembly:

Makefile

<code>
TARGET_EXEC ?= a.out

BUILD_DIR ?= ./build
SRC_DIRS ?= ./src

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

CPPFLAGS ?= $(INC_FLAGS) -MMD -MP

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CC) $(OBJS) -o $@ $(LDFLAGS)

# assembly
$(BUILD_DIR)/%.s.o: %.s
	$(MKDIR_P) $(dir $@)
	$(AS) $(ASFLAGS) -c $< -o $@

# c source
$(BUILD_DIR)/%.c.o: %.c
	$(MKDIR_P) $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	$(MKDIR_P) $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


.PHONY: clean

clean:
	$(RM) -r $(BUILD_DIR)

-include $(DEPS)

MKDIR_P ?= mkdir -p
</code>


Not too bad!
Also, if you don't care about out-of-source builds, you can use this even simpler Makefile, which
takes advantage of the built-in implicit rules:
 
Makefile

<code>
TARGET ?= a.out
SRC_DIRS ?= ./src

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)
OBJS := $(addsuffix .o,$(basename $(SRCS)))
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

CPPFLAGS ?= $(INC_FLAGS) -MMD -MP

$(TARGET): $(OBJS)
	$(CC) $(LDFLAGS) $(OBJS) -o $@ $(LOADLIBES) $(LDLIBS)

.PHONY: clean
clean:
	$(RM) $(TARGET) $(OBJS) $(DEPS)

-include $(DEPS)
</code>

To use one of them, put the Make code in a file call Makefile (make sure the TAB characters get copied! Make
is very picky about those) and all of your source and headers in the directory or a subdirectory of ./src
(you can change this directory by changing SRC_DIRS). Then make sure you have CC and CFLAGS set to what
you need for your project or just use the Make defaults.
Then type make.

If you run into issues, running make -d can be helpful.

Here's an overview of how it works:
Out-of-Source Builds

I want all the artifacts from a build to end up in some directory (I usually name it "./build")
that's separate from the source. This makes is easy to do a clean (just rm -rf ./build) even if other
artifacts besides the ones generated via Make end up there. It also makes a lot of other things, such
as grep'ing the source, a lot nicer.

To do this in Make, you mostly just need to prepend your output directory to the beginning of your
pattern rules. For example, instead of a pattern like: %.o: %.c, which would map your .c files for .o
files in the same directory, you can use $(BUILD_DIR)%.o: %.c.
Automatic Header Dependencies

Handling the header dependencies is perhaps the most tedious thing about using the classic Make
technique. Especially since, if you mess it up, you don't get any explicit errors-things just don't
get re-compiled when they ought to be. This can lead to .o files having different ideas about what types
or prototypes look like.

There is documentation for this here. However, the docs seem to assume that the dependency files are
generated in a separate step from the compile step, which complicates things.

If you generate the dependency files as part of the compilation step, things get much simpler. To
generate the dependency files, all you have to do is add some flags to the compile command (supported
by both Clang and GCC):

	-MMD -MP
	which will generate a .d file next to the .o file. Then to use the .d files, you just need to find
	them all:
	DEPS := $(OBJS:.o=.d)
	and then -include them:
	-include $(DEPS)

Automatic Determination of List of Object/Source Files
First, find all of the source files in the given source directories. The simplest and fastest way I
found to do this was to just shell out and use find.

	SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)
	But because Make works backward from the object files to the source, we need to compute all the
	object files we want from our source files. I basically just prepend a $(BUILD_DIR)/ and append a
	.o to every source file path:
	OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
	And then you can make your target depend on the objects files:
	Makefile

	$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	  $(CC) $(OBJS) -o $@ $(LDFLAGS)

Automatic Generation of Include Directory Flags

I used a similar technique to generate include directory flags. Find all the directories under the given
source directories:

	INC_DIRS := $(shell find $(SRC_DIRS) -type d)
	And then prefix them with a -I:
	INC_FLAGS := $(addprefix -I,$(INC_DIRS))

Hope those techniques are helpful for you.


---

