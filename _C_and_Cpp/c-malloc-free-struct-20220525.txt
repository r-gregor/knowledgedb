filename: c_malloc-free-struct_20220525.txt
https://www.delftstack.com/howto/c/c-malloc-struct/

Allocate Struct Memory With malloc in C
January-10, 2021

	1. Use malloc With the sizeof Operator to Allocate Struct Memory in C
	2. Use the for Loop to Allocate Memory for an Array of Structs in C

   This article will explain several methods of how to allocate struct memory with malloc in C.

Use malloc With the sizeof Operator to Allocate Struct Memory in C
   malloc is the core function for dynamic memory allocation in C that takes a single integer argument
   representing the number of bytes to be allocated. To allocate the memory of the custom struct object
   that has been defined, we should call the sizeof operator and retrieve the amount of memory the
   object needs to be stored.

   Note that we can pass the sizeof(MyObject) expression directly into the malloc call as an argument.
   One caveat about malloc is that successfully allocated memory is not initialized, meaning that there
   may be some garbage values stored. To counter this issue, the C library provides another useful
   function - calloc to automatically initialize the memory region with zero. The following example
   shows memory allocation for the single MyObject structure.

#include <stdio.h>
#include <stdlib.h>

enum VALID {FALSE, TRUE};

typedef struct {
	int valid;
	int *data;
	size_t size;
} MyObject;

int main() {
	int *tmp = NULL;
	MyObject *my1 = malloc(sizeof(MyObject));

	my1->valid = TRUE;
	my1->data = tmp;
	my1->size = sizeof tmp;

	free(my1);
	exit(EXIT_SUCCESS);
}

Use the for Loop to Allocate Memory for an Array of Structs in C
   It's often useful to declare an array of structures, which may require a larger memory region than
   available on the stack. Thus, we need to allocate the array as dynamic memory. The following example
   code demonstrates the case when the array of 100 pointers to the MyObject structs is declared on the
   stack, but each individual MyObject object is allocated on dynamic memory (heap).

   Note that we also implemented the initMyObject function to initialize each member in the MyObject for
   testing purposes only. The function returns -1 if the passed pointer is null, and the if statement is
   put in the for loop to make sure the corresponding error message is printed.

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

enum VALID {FALSE, TRUE};

typedef struct {
	int valid;
	int *data;
	size_t size;
} MyObject;

int initMyObject(MyObject *obj, int val, int *dat, size_t siz) {
	if (!obj) {
		return -1;
	}

	obj->valid = val;
	obj->data = dat;
	obj->size = siz;
	return 0;
}

int main() {
	int *tmp = NULL;

	MyObject *arr[MAX];
	for (int i = 0; i < MAX; ++i) {
		arr[i] = malloc(sizeof(MyObject));
		if (initMyObject(arr[i], TRUE, tmp, sizeof(tmp)) == -1) {
			fprintf(stderr, "[ERROR] initMyObject() failed\n");
			break;
		}
	}

	printf("finished\n");

	exit(EXIT_SUCCESS);
}

   Although, there's an erroneous part of the previous program that can not be allowed in any production
   code. The program exits without deallocating memory regions that's been dynamically allocated in the
   loop. Note that, similar to the allocation, each individual element of the array must be freed. Thus,
   we implemented a separate function, deallocMyObjectArray, to executed iterative calls to free in the
   following code sample.

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

enum VALID {FALSE, TRUE};

typedef struct {
	int valid;
	int *data;
	size_t size;
} MyObject;

int initMyObject(MyObject *obj, int val, int *dat, size_t siz) {
	if (!obj) {
		return -1;
	}

	obj->valid = val;
	obj->data = dat;
	obj->size = siz;

	return 0;
}

int deallocMyObjectArray(MyObject *arr[], size_t len) {
	if (!arr) {
		return -1;
	}

	for (int i = 0; i < len; ++i) {
		free(arr[i]);
	}

	return 0;
}

int main() {
	int *tmp = NULL;

	MyObject *arr[MAX];
	for (int i = 0; i < MAX; ++i) {
		arr[i] = malloc(sizeof(MyObject));

		if (initMyObject(arr[i], TRUE, tmp, sizeof(tmp)) == -1) {
			fprintf(stderr, "[ERROR] initMyObject() failed\n");
			break;
		}
	}

	deallocMyObjectArray(arr, MAX);
	printf("finished\n");

	exit(EXIT_SUCCESS);
}



---

