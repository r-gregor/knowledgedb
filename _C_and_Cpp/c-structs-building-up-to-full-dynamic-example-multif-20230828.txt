filename: c_structs-building-up-to-full-dynamic-example-multif_20230828.txt
http://www.wellho.net/mouth/4340_Simple-C-structs-building-up-to-full-dynamic-example.html

   Simple C structs - building up to full, dynamic example
   2014-12-03

   During the final day of our "Learning to program in C" course - today - we built up an example that
   introduced structs, then added dynamic memory allocation so that we ended up with a flexible program
   capable of taking an unlimited amount of data. The build up examples also show (in the last program)
   reading of data from a file, tokenising a string, and extracting numbers from the various fields.

   [**1] to Simple demonstation of a structure
   [**2] to Copying Strings in and out of a structure
   [**3] to An Array of Structures
   [**4] to Structure Pointers
   [**5] to Dynamic allocation of memory for structs
   [**6] to Dynamic allocation for struct and struct pointers, and populating from file
   [**7] to Data for final example


---
[**1]
http://www.wellho.net/resources/ex.php?item=c209/trains_01.c

   Simple demonstation of a structure

   Source code: trains_01.c Module: C209

#include <stdio.h>

/* Simple demonstation of a structure */

typedef struct {
	int length;
	int seats;
	char destiny[41];
	char time[6];
} Train;

int main(void) {
	Train soton;
	int totseats;
	soton.length = 2;
	soton.seats = 78;
	totseats = soton.length * soton.seats;
	printf("Train has %d seats\n",totseats);

	return 0;
}

/* Sample Output
trainee@kingston:~/c_dec14$ ./trains_01
Train has 156 seats
trainee@kingston:~/c_dec14$
*/


---
[**2]
http://www.wellho.net/resources/ex.php?item=c209/trains_02.c

   Copying Strings in and out of a structure

   Source code: trains_02.c Module: C209

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Copying Strings in and out of a structure */

typedef struct {
		int length;
		int seats;
		char destiny[41];
		char time[6];
} Train;

int main(void) {
	Train soton, chelt;
	int totseats;
	soton.length = 2;
	soton.seats = 78;
	strncpy(&soton.destiny,"Southampton Cental",40);
	strncpy(&soton.time,"06:38",5);
	/* Above lines give warnings:
	   trains_02.c:18:2: warning: passing argument 1 of 'strncpy' from incompatible pointer type [enabled by default]
	   /usr/include/string.h:131:14: note: expected 'char * __restrict__' but argument is of type 'char (*)[41]'
	   See later examples in the series for how to fix this
	 */

	chelt.length = 3;
	chelt.seats = 75;
	strncpy(&chelt.destiny,"Cheltenham Spa",40);
	strncpy(&chelt.time,"07:18",5);
	totseats = soton.length * soton.seats;
	printf("Train has %d seats\n",totseats);
	printf("Train goes to %s\n",&soton.destiny[0]);
	printf("Train goes to %s\n",soton.destiny);
	totseats = chelt.length * chelt.seats;
	printf("Train has %d seats\n",totseats);
	printf("Train goes to %s\n",&chelt.destiny[0]);
	printf("Train goes to %s\n",chelt.destiny);

	return 0;
}

/* Sample output
trainee@kingston:~/c_dec14$ ./trains_02
Train has 156 seats
Train goes to Southampton Cental
Train goes to Southampton Cental
Train has 225 seats
Train goes to Cheltenham Spa
Train goes to Cheltenham Spa
trainee@kingston:~/c_dec14$
*/



---
[**3]
http://www.wellho.net/resources/ex.php?item=c209/trains_03.c

   An Array of Structures

   Source code: trains_03.c Module: C209

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* An Array of Structures */

typedef struct {
	int length;
	int seats;
	char destiny[41];
	char time[6];
} Train;

int main(void) {
	Train options[2];
	int totseats; int k;
	options[0].length = 2;
	options[0].seats = 78;
	strncpy((char *)&options[0].destiny,"Southampton Cental",40);
	strncpy((char *)&options[0].time,"06:38",5);
	options[1].length = 3;
	options[1].seats = 75;
	strncpy((char *)&options[1].destiny,"Cheltenham Spa",40);
	strncpy((char *)&options[1].time,"07:18",5);
	for (k=0; k<2; k++) {
		totseats = options[k].length * options[k].seats;
		printf("Train has %d seats\n",totseats);
		printf("Train goes to %s\n",&options[k].destiny[0]);
	}

	return 0;
}

/* Sample Output
trainee@kingston:~/c_dec14$ ./trains_03
Train has 156 seats
Train goes to Southampton Cental
Train has 225 seats
Train goes to Cheltenham Spa
trainee@kingston:~/c_dec14$
*/


---
[**4]
http://www.wellho.net/resources/ex.php?item=c209/trains_04.c

   Structure Pointers

   Source code: trains_04.c Module: C209

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Structure Pointers and how to dereference them */

typedef struct {
	int length;
	int seats;
	char destiny[41];
	char time[6];
} Train;

void makeTrain(Train *current, int len, int spc, char * where, char * when) {
	// Two ways of doing the same 'dereference'
	(*current).length = len;
	current->seats = spc;

	// And again ...
	strncpy((*current).destiny, where, 40);
	strncpy(current->time, when, 5);
}

int main(void) {
	Train options[2];
	int totseats; int k;
	makeTrain(&options[0], 2, 78, "Southampton Airport", "06:38");
	makeTrain(&options[1], 3, 75, "Cheltenham Spa", "07:19");

	for (k=0; k<2; k++) {
		totseats = options[k].length * options[k].seats;
		printf("Train has %d seats\n",totseats);
		printf("Train goes to %s\n",&options[k].destiny[0]);
	}

	return 0;
}

/* Sample Output
trainee@kingston:~/c_dec14$ ./trains_04
Train has 156 seats
Train goes to Southampton Airport
Train has 225 seats
Train goes to Cheltenham Spa
trainee@kingston:~/c_dec14$
*/


---
[**5]
http://www.wellho.net/resources/ex.php?item=c209/trains_05.c

   Dynamic allocation of memory for structs

   Source code: trains_05.c Module: C209

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Dynamic allocation of memory for structs */

typedef struct {
	int length;
	int seats;
	char destiny[41];
	char time[6];
} Train, *ransport;

Transport makeTrain(int len, int spc, char * where, char * when) {
	Transport current;

	// Allocate heap memory
	current = (Transport)malloc(sizeof(Train));

	current->length = len;
	current->seats = spc;
	strncpy(current->destiny, where, 40);
	strncpy(current->time, when, 5);
	return current;
}

int main(void) {
	Transport options[2];
	int totseats; int k;
	options[0] = makeTrain(2, 78, "Southampton Airport", "06:38");
	options[1] = makeTrain(3, 75, "Cheltenham Spa", "07:19");
	for (k=0; k<2; k++) {
		totseats = options[k]->length * options[k]->seats;
		printf("Train has %d seats\n",totseats);
		printf("Train goes to %s\n",options[k]->destiny);
	}

	for (k=0; k<2; k++) {
		free(options[k]);
	}

	return 0;
}
   
/* Sample Output
trainee@kingston:~/c_dec14$ ./trains_05
Train has 156 seats
Train goes to Southampton Airport
Train has 225 seats
Train goes to Cheltenham Spa
trainee@kingston:~/c_dec14$
*/


---
[**6]
http://www.wellho.net/resources/ex.php?item=c209/trains_06.c

   Dynamic allocation for struct and struct pointers, and populating from file
   
   Source code: trains_06.c Module: C209

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Dynamic allocation for struct and struct pointers, and populating from file */

typedef struct {
	int length;
	int seats;
	char destiny[41];
	char time[6];
} Train, *Transport;

Transport makeTrain(int len, int spc, char *where, char *when){
	Transport current;

	// Allocate heap memory
	current = (Transport)malloc(sizeof(Train));

	current->length = len;
	current->seats = spc;
	strncpy(current->destiny, where, 40);
	strncpy(current->time, when, 5);
	return current;
}

int main(void) {
	Transport *options = NULL;
	FILE *current;
	char lyne[121];
	char *token1, *token2;
	char *token3, *token4;
	char **position;
	int totseats; int k;
	int so_far = 0;
	current = fopen("services.txt", "r");
	while (fgets(lyne, 120, current)) {
		token1 = strtok(lyne,"\t"); /* First Token */
		token2 = strtok(NULL,"\t"); /* Next Token */
		token3 = strtok(NULL,"\t"); /* Next Token */
		token4 = strtok(NULL,"\n"); /* Next Token */
		options = realloc(options, sizeof(Transport)*(so_far+1));

		options[so_far++] = makeTrain(atoi(token1),
		                              atoi(token2), 
		                              token3,
		                              token4);
	}
	fclose(current);

	for (k=0; k<so_far; k++) {
		totseats = options[k]->length * options[k]->seats;
		printf("Train has %d seats\n",totseats);
		printf("Train goes to %s\n",options[k]->destiny);
	}

	for (k=0; k<so_far; k++) {
		free(options[k]);
	}

	free(options);

	return 0;
}

/* Sample Output
trainee@kingston:~/c_dec14$ ./trains_06
Train has 150 seats
Train goes to Southampton Airport
Train has 150 seats
Train goes to Northampton Ferry Terminal
Train has 780 seats
Train goes to Southampton Airport
Train has 360 seats
Train goes to Northampton Ferry Terminal
Train has 78 seats
Train goes to Southampton Airport
Train has 150 seats
Train goes to Northampton Ferry Terminal
Train has 150 seats
Train goes to Northampton Ferry Terminal
Train has 78 seats
Train goes to Southampton Airport
Train has 360 seats
Train goes to Northampton Ferry Terminal
Train has 78 seats
Train goes to Southampton Airport
trainee@kingston:~/c_dec14$
*/



---
[**7]
http://www.wellho.net/resources/ex.php?item=c209/services.txt

   Data for trains_06.c example

   Source code: services.txt Module: C209

   2	75 Southampton Airport	06:38
   2	75 Northampton Ferry Terminal	07:20
   10	78 Southampton Airport	07:57
   8	45 Northampton Ferry Terminal	09:43
   1	78 Southampton Airport	10:15
   2	75 Northampton Ferry Terminal	14:32
   2	75 Northampton Ferry Terminal	14:52
   1	78 Southampton Airport	16:40
   8	45 Northampton Ferry Terminal	17:59
   1	78 Southampton Airport	19:21


---

