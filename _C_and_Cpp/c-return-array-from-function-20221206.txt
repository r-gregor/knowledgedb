filename: c_return-array-from-function_20221206.txt
https://www.javatpoint.com/return-an-array-in-c

Return an Array in C

What is an Array?
   An array is a type of data structure that stores a fixed-size of a homogeneous collection of data. In
   short, we can say that array is a collection of variables of the same type.

   For example, if we want to declare 'n' number of variables, n1, n2...n., if we create all these
   variables individually, then it becomes a very tedious task. In such a case, we create an array of
   variables having the same type. Each element of an array can be accessed using an index of the
   element.

   Let's first see how to pass a single-dimensional array to a function.

Passing array to a function

#include <stdio.h>

void getarray(int arr[]) {
	printf("Elements of array are : ");
	for(int i=0;i<5;i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
}

int main() {
	int arr[5]={45,67,34,78,90};
	getarray(arr);
	return 0;
}

   In the above program, we have first created the array arr[] and then we pass this array to the
   function getarray(). The getarray() function prints all the elements of the array arr[].

   Output
Elements of array are : 45 67 34 78 90 

Passing array to a function as a pointer
   Now, we will see how to pass an array to a function as a pointer.

#include <stdio.h>

void printarray(char *arr) {
	printf("Elements of array are : ");
	for(int i=0;i<5;i++) {
		printf("%c ", arr[i]);
	}
	printf("\n");
}

int main() {
	char arr[5]={'A','B','C','D','E'};
	printarray(arr);
	return 0;
}

   In the above code, we have passed the array to the function as a pointer. The function printarray()
   prints the elements of an array.

   Output
Elements of array are : A B C D E 

Note: From the above examples, we observe that array is passed to a function as a reference which means
that array also persist outside the function.

How to return an array from a function
   Returning pointer pointing to the array

#include <stdio.h>

int *getarray() {
	int arr[5];
	printf("Enter the elements in an array : ");
	for(int i=0;i<5;i++) {
		scanf("%d", &arr[i]);
	}
	return arr;
}

int main() {
	int *n;
	n=getarray();
	printf("\nElements of array are :");
	for(int i=0;i<5;i++) {
		printf("%d", n[i]);
	}
	printf("\n");

	return 0;
}

   In the above program, getarray() function returns a variable 'arr'. It returns a local variable, but
   it is an illegal memory location to be returned, which is allocated within a function in the stack.
   Since the program control comes back to the main() function, and all the variables in a stack are
   freed. Therefore, we can say that this program is returning memory location, which is already
   de-allocated, so the output of the program is a segmentation fault.

   Output

Enter the elements in an array : 1
2
3
4
5
Segmentation fault (core dumped)

   There are three right ways of returning an array to a function:
	 * Using dynamically allocated array
	 * Using static array
	 * Using structure

Return an Array in C
   Returning array by passing an array which is to be returned as a parameter to the function.

#include <stdio.h>

int *getarray(int *a) {

	printf("Enter the elements in an array : ");
	for(int i=0;i<5;i++) {
		scanf("%d", &a[i]);
	}
	return a;
}

int main() {
	int *n;
	int a[5];
	n=getarray(a);
	printf("\nElements of array are :");
	for(int i=0;i<5;i++) {
		printf("%d", n[i]);
	}
	printf("\n");

	return 0;
}

   Output
Enter the elements in an array : 1
2
3
4
5

Elements of array are :12345

Returning array using malloc() function.

#include <stdio.h>
#include <malloc.h>

int *getarray() {
	int size;
	printf("Enter the size of the array : ");
	scanf("%d",&size);
	int *p= malloc(sizeof(size));
	printf("\nEnter the elements in an array : ");
	for(int i=0;i<size;i++) {
		scanf("%d",&p[i]);
	}
	return p;
}

int main() {
	int *ptr;
	ptr=getarray();
	int length=sizeof(*ptr);
	printf("Elements that you have entered are : ");
	for(int i=0;i<length;i++) {
		printf("%d ", ptr[i]);
	}
	printf("\n");

	return 0;
}

   Output

Enter the size of the array : 4

Enter the elements in an array : 1
2
3
4
Elements that you have entered are : 1 2 3 4

Using Static Variable

#include <stdio.h>
#define NUM_ELEMENTS 7

int *getarray() {
	static int arr[NUM_ELEMENTS];
	printf("Enter the elements in an array : ");
	for(int i=0;i<NUM_ELEMENTS;i++) {
		scanf("%d",&arr[i]);
	}
	return arr;

}

int main() {
	int *ptr;
	ptr=getarray();
	printf("\nElements that you have entered are : ");
	for(int i=0;i<NUM_ELEMENTS;i++) {
		printf("%d ", ptr[i]);
	}
	printf("\n");
}

   In the above code, we have created the variable arr[] as static in getarray() function, which is
   available throughout the program. Therefore, the function getarray() returns the actual memory
   location of the variable 'arr'.

   Output
Enter the elements in an array : 10
20
30
40
50
60
70

Elements that you have entered are : 10 20 30 40 50 60 70

Using Structure
   The structure is a user-defined data type that can contain a collection of items of different types.
   Now, we will create a program that returns an array by using structure.

#include <stdio.h>
#include<malloc.h>
#define NUM_ELEMENTS 8

struct array {
	int arr[NUM_ELEMENTS];
};

struct array getarray() {
	struct array y;
	printf("Enter the elements in an array : ");
	for(int i=0;i<NUM_ELEMENTS;i++) {
		scanf("%d",&y.arr[i]);
	}
	return y;
}

int main() {
	struct array x=getarray();
	printf("Elements that you have entered are :");
	for(int i=0;i<NUM_ELEMENTS;i++) {
		printf("%d ", x.arr[i]);
	}
	printf("\n");
	return 0;
}

   Output

Enter the elements in an array : 4
5
6
7
8
9
1
2
Elements that you have entered are :4 5 6 7 8 9 1 2

---

