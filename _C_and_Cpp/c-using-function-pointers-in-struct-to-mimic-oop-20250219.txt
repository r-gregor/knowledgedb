filename: c_using_function_pointers_in_struct_to_mimic_oop_20250219.txt
https://www.reddit.com/r/learnprogramming/comments/urtqkg/using_function_pointers_in_struct_to_mimic_oop_in/?rdt=43418

Using function pointers in struct to mimic OOP in C

   Hello there. I recently picked up C and discovered function pointers in c and it got me thinking,
   what if I used it in structs? I did a bit of messing around and came up with a program that sort of
   mimics 'OOP':

#include <stdio.h>

int square(int x) {
	return x*x;
}

typedef struct {
	int val;
	int (*square)(int);
} num;

void num_init(num *number) {
	number -> val = 5;
	number -> square = square;
	return;
}

int main() {
	num number;
	num_init(&number);
	printf("%d\n", number.square(5));
	printf("%d\n", number.val);
	return 0;
}

   This program declares the struct num and it contains 2 members: val and a function pointer,
   arithmetic. There is also a initializer function called num_init which takes the structure variable
   of num and assigns a value to num.val (in this case 5) and the function pointer of square. This is
   somewhat like the __init__ function in python, but now externally set.

   My question is, would this technically count as object orientated programming. The definition of OOP
   is as follows from this source:

   "Object-Oriented Programming languages use objects that contain both data and code."

   The struct num contains data such as val, and it contains code such as the square function after
   initialization; so here are my final questions:
     * Would this technically mean that my code is object orientated, since I can extract data from this
       object and execute code from it?
     * Is this already used in modern code or libraries, and if so, why is it not considered OOP?

   Thanks and have a great day!

***
Yep. Part of the class system is doing something similar under the hood. It just gets complicated quickly. If
you keep making macros and preprocessor parsing steps you'll eventually end up simulating c++. Badly. That's
how c++ happened, in a way. It was originally called "c with classes".

OOP isn't a binary thing, there are degrees and types of it. But by and large I'd say C's OOP is incidental at
best. It doesn't have most of what a modern OOP language user expects, or not without extreme effort that's
not worth it.

***
 Yes, I'd call this OO. You're basically just implementing it as a layer on top of the language rather than
 letting the language provide you with the syntactic sugar, but it works great if you're consistent about your
 usage.

I've seen variations of this same idea used before. The biggest example I can think of is GObject, the
foundation of GTK and many other GNU graphics libraries on Linux. You can read more about their approach
here: https://en.wikibooks.org/wiki/C_Programming/GObject[**1]

***
At a very general, hand waving, level this is what classes are. They're data structures with pointers to
functions that operate over those structures.

OOP (like functional programming) is more of an idea, a way of viewing the world, than a set of techniques. To
a CPU there are no "objects", no "messages" or anything like that, only functions and data. This matters
because it's a fundamentally human consideration to program in the OOP style. Because of that, the tools that
are made available to you, the programmer, are of high importance when programming in a given style; the
extent to which things like inheritance, type safety, private members and the like are all easy to achieve is
really the determining factor on whether a language "supports" OOP or not.

You can make similar arguments for functional programming - it's possible to do immutability, first-class
functions and those kinds of things in C, but when you use Haskell you don't even have to think about how it's
all working under the hood.

All languages eventually compile down to CPU instructions, so you have to understand OOP at the human level.


---
[**1]
https://en.wikibooks.org/wiki/C_Programming/GObject

C Programming/GObject

   Since the C Programming-Language was not created with Object Oriented Programming in mind, it has no
   explicit support for classes, inheritance, polymorphism and other OO Concepts. Neither does it have
   its own Virtual Table[**2], which is found in object-oriented languages such C++, Java and C#.
   Therefore, it might not be as easy to implement an object-oriented programming paradigm using only
   C's language features and standard library. However, it can be done using structures which contain
   both function pointers as well as data, for example, or by using third-party libraries.

   There are many third-party libraries designed to add support for object-oriented programming in C.
   The most general-purpose and widely used among these is the GObject System, which is part of Glib.
   The GObject System comes with its own virtual table. To create an object in C using the GObject
   system, it has to be sub-classed from the GObject struct.

Object-Creation
   In this example a new object will be implemented directly derived from GObject. For simplicity, the
   object is named MyObject.

Declaring An Object
   To create a simple non-derivable (final) object, two structs must be declared, the instance and the
   class. They are declared using a macro:

/* in myobject.h */
G_DECLARE_FINAL_TYPE (MyObject, my_object, MY, OBJECT, GObject)

   This declares two structures, MyObject and MyObjectClass. MyObject must be defined in the C
   implementation, and MyObjectClass is already defined by the macro.

Boiler-Plate Code
   Since the GObject System is just a third-party library and therefore cannot make any changes to the C
   Language itself, creating a new object requires a lot of boiler-plate code. This is mostly handled by
   the macro shown above. However, the following is also required:

/* in myobject.h */
#define MY_TYPE_OBJECT my_object_get_type ()

   The macro defines several functions, namely MY_OBJECT () and MY_OBJECT_CLASS (), used for casting,
   MY_IS_OBJECT () and MY_IS_OBJECT_CLASS () for testing whether an object or class is of the correct
   type and MY_OBJECT_GET_CLASS () for getting the class structure from an instance.

Defining The Object
   Before use, the newly created object must be defined, along with the instance structure.
/* in myobject.c */

struct _MyObject {
	GObject parent_instance;
	/* other members */
};

G_DEFINE_TYPE (MyObject, my_object, G_TYPE_OBJECT)

Static Functions
   There are a few static functions that may or may not to be defined, depending on your object. For a
   minimal object these ones are compulsory:

/* in myobject.c */
static void my_object_class_init (MyObjectClass *klass) {
	/* code */
}

static void my_object_init (MyObject *self) {
	/* code */
}

The Constructor
   There is no internal way of allocating memory for an object in C. Therefore an explicit constructor
   must be declared for the new object.

/* in myobject.c */
GObject *my_object_new (void) {
	return g_object_new (MY_TYPE_OBJECT, 0);
}

Object-Usage
   Although creating the object using its own pointer-type is perfectly valid, it is recommended to use
   the pointer-type of the object at the top of the hierarchy i.e the furthest off base class. The newly
   created object may now be used like this:

/* in main.c */
/* Note: GObject is at the top of the hierarchy. */
/* declaration and construction */
GObject *myobj = my_object_new ();

/* destruction */
g_object_unref(myobj);

Inheritance

Concept
   Inheritance is one of the most widely used and useful OO Concepts. It provides an efficient way to
   reuse existing code by wrapping it up into an object and then sub-classing it. The new classes are
   known as derived classes. Many object hieriarchies can be created using inheritance. Inheritance is
   also one of the most efficient ways of abstracting code.

Implementation
   In the GObject System, inheritance can be achieved by sub-classing GObject. Since C provides no
   keyword or operator for inheritance, a derived object is usually made by declaring the base instance
   and base class as a member of the derived instance and derived class respectively. In C code:

/* derived object instance */
struct _DerivedObject {
	/* the base instance is a member of the derived instance */
	BaseObject parent_instance;
};


---
[**2]
https://stackoverflow.com/questions/66040677/implementing-basic-vtable-in-c

Implementing basic vtable in C

   I'm trying to emulate the most basic (toy) case of a vtable in C. Here is a basic example:

typedef struct Person {
	int id;
	char *name;
} Person;

   And let's say we add in one method (i.e., function pointer):

typedef struct Person {
	int id;
	char *name;
	void (*print_name)(Person);
} Person;

   And now we'll initialize it and fill in the pieces with this (let's ignore memory leaks):

#include <stdio.h>
#include <stdlib.h>

typedef struct Person Person;
typedef struct Person {
	int id;
	char *name;
	void (*print)(Person *self);
} Person;

void print_name(Person *person) {
	printf("Hello %s\n", person->name);
}

Person *init_person(void) {
	Person *person = malloc(sizeof(Person));
	person->print = print_name;
}

int main(void) {
	Person *p = init_person();
	p->name = "Greg";
	p->print(p);
	return 0;
}

   If I were to factor out the functions from the Person and put it in a Person_VTable, such as the
   following:

typedef struct Person {
	int id;
	char *name;
	Person_VTable *vtable;
} Person;

typedef struct Person_VTable {
	???
} Person_VTable;

   What would be the proper way to (1) create the vtable, and (2) initialize the Person object with the
   new vtable? Note, I know this is an entirely trivial example and it can be done in better ways, but
   I'm seeing how it can be done with an external 'vtable' to the main object I'm working work.

   Also, does this also mean if I have a vtable, instead of just having the one 'self' to reference the
   object it's coming from when in the struct itself, such as:

void (*print)(Person *self);

   I need to have two indirections, so I know both the object and the vtable location? Something like:

void (*print)(Person *self_obj, Person_VTable *self_vt);

   If so, that's a lot of overhead!

***
   A basic vtable is nothing more than an ordinary struct containing function pointers, which can be
   shared between object instances. There are two basic ways one can implement them. One is to make the
   vtable pointer an ordinary struct member (this is how it works in C++ under the hood):

#include <stdio.h>
#include <stdlib.h>

typedef struct Person Person;
typedef struct Person_VTable Person_VTable;

struct Person {
	int id;
	char *name;
	const Person_VTable *vtable;
};

struct Person_VTable {
	void (*print)(Person *self);
};

void print_name(Person *person) {
	printf("Hello %s\n", person->name);
}

static const Person_VTable vtable_Person = {
	.print = print_name
};

Person *init_person(void) {
	Person *person = malloc(sizeof(Person));
	person->vtable = &vtable_Person;
	return person;
}

int main(void) {
	Person *p = init_person();
	p->name = "Greg";
	p->vtable->print(p);
	return 0;
}

   Another is to use fat pointers (this is how it's implemented in Rust):

#include <stdio.h>
#include <stdlib.h>

typedef struct Person Person;
typedef struct Person_VTable Person_VTable;

typedef struct Person_Ptr {
	Person *self;
	const Person_VTable *vtable;
} Person_Ptr;

struct Person {
	int id;
	char *name;
};

struct Person_VTable {
	void (*print)(Person_Ptr self);
};

void print_name(Person_Ptr person) {
	printf("Hello %s\n", person.self->name);
}

static const Person_VTable vtable_Person = {
	.print = print_name
};

Person_Ptr init_person(void) {
	Person_Ptr person;
	person.self = malloc(sizeof(Person));
	person.vtable = &vtable_Person;
	return person;
}

int main(void) {
	Person_Ptr p = init_person();
	p.self->name = "Greg";
	p.vtable->print(p);
	return 0;
}

   In C, the preferred way is the former, but that's mostly for syntax reasons: passing structs between
   functions by value doesn't have a widely-agreed-upon ABI, while passing two separate pointers is
   rather unwieldy syntactically. The other method is useful when attaching a vtable to an object whose
   memory layout is not under your control.

   In essence, the only advantages of vtables over ordinary function pointer members is that they
   conserve memory (each instance of the struct only needs to carry one vtable pointer) and protect
   against memory corruption (the vtables themselves can reside in read-only memory).

***
   You can do this without making too many changes. To start, we will define the Person and
   Person_VTable types:

typedef struct Person Person;
typedef struct Person_VTable {
	void (*print) (Person* self);
} Person_VTable;

typedef struct Person {
	int id;
	char* name;
	Person_VTable *vtable;
} Person;

   Here we have replaced the previous Person function pointer with a pointer to the Person_VTable type,
   which will hold our functions. The Person_VTable itself is almost identical to what the functions in
   the Person type were previously -- notice even that the function signatures are the same. For
   example:

// old
typedef struct Person {
	// ...
	void (*print)(Person *self);
} Person;

// new
typedef struct Person_VTable {
	// ...
	void (*print)(Person *self);
} Person_VTable;

   Our init function is also similar, however now we need to malloc for the Person_VTable object, since
   that is now held outside our main Person object. This will give us:

Person* init_person(void) {
	Person *person = malloc(sizeof(Person));
	// malloc the vtable and attach the print method to it.
	person->vtable        =  malloc(sizeof(Person_VTable));
	person->vtable->print = print_name;
	return person;
}

   Finally, to put everything together with a working example [https://godbolt.org/z/6qrfxz]here:

#include<stdio.h>
#include<stdlib.h>

typedef struct Person Person;
typedef struct Person_VTable {
	void (*print) (Person* self);
} Person_VTable;

typedef struct Person {
	int id;
	char* name;
	Person_VTable *vtable;
} Person;

void print_name(Person* person) {
	printf("Hello %s\n", person->name);
}

Person* init_person(void) {
	Person *person = malloc(sizeof(Person));
	person->vtable  =  malloc(sizeof(Person_VTable));
	person->vtable->print = print_name;
	return person;
}
int main(void) {
	Person* self = init_person();
	self->name = "Greg";
	self->vtable->print(self);
	return 0;
}


---

