filename: c_typedef-multif_20211014.txt
https://www.javatpoint.com/typedef-in-c

typedef in C

The typedef is a keyword used in C programming to provide some meaningful names to the already existing
variable in the C program. It behaves similarly as we define the alias for the commands. In short,
we can say that this keyword is used to redefine the name of an already existing variable.

Syntax of typedef
	typedef <existing_name> <alias_name>

In the above syntax, 'existing_name' is the name of an already existing variable while 'alias name'
is another name given to the existing variable.

For example, suppose we want to create a variable of type unsigned int, then it becomes a tedious task
if we want to declare multiple variables of this type. To overcome the problem, we use a typedef keyword.
	typedef unsigned int unit;

In the above statements, we have declared the unit variable of type unsigned int by using a typedef keyword.

Now, we can create the variables of type unsigned int by writing the following statement:
	unit a, b;

instead of writing:
	unsigned int a, b;

Till now, we have observed that the typedef keyword provides a nice shortcut by providing an alternative
name for an already existing variable. This keyword is useful when we are dealing with the long data
type especially, structure declarations.

Let's understand through a simple example.

#include <stdio.h>

int main() {
	typedef unsigned int unit;
	unit i,j;
	i=10;
	j=20;
	printf("Value of i is :%d",i);
	printf("\nValue of j is :%d",j);
	return 0;
}

Output

Value of i is :10
Value of j is :20

Using typedef with structures

Consider the below structure declaration:
	struct student {
		char name[20];
		int age;
	};
	struct student s1;

In the above structure declaration, we have created the variable of student type by writing the following
statement:
struct student s1;

The above statement shows the creation of a variable, i.e., s1, but the statement is quite big. To avoid
such a big statement, we use the typedef keyword to create the variable of type student.

	struct student {
		char name[20];
		int age;
	};
	typedef struct student stud;
	stud s1, s2;

In the above statement, we have declared the variable stud of type struct student. Now, we can use the
stud variable in a program to create the variables of type struct student.

	The above typedef can be written as:
	typedef struct student {
		char name[20];
		int age;
	} stud;
	stud s1,s2;

From the above declarations, we conclude that typedef keyword reduces the length of the code and complexity
of data types. It also helps in understanding the program.

Let's see another example where we typedef the structure declaration.

<code>
#include <stdio.h>

typedef struct student {
	char name[20];
	int age;
}stud;

int main() {
	stud s1;
	printf("Enter the details of student s1: ");
	printf("\nEnter the name of the student:");
	scanf("%s",&s1.name);
	printf("\nEnter the age of student:");
	scanf("%d",&s1.age);
	printf("\n Name of the student is : %s", s1.name);
	printf("\n Age of the student is : %d", s1.age);
	return 0;
}
</code>

Output

Enter the details of student s1:
Enter the name of the student: Peter
Enter the age of student: 28
Name of the student is : Peter
Age of the student is : 28

Using typedef with pointers
We can also provide another name or alias name to the pointer variables with the help of the typedef.

For example, we normally declare a pointer, as shown below:
	int* ptr;

We can rename the above pointer variable as given below:
	typedef int* ptr;

In the above statement, we have declared the variable of type int*. Now, we can create the variable of
type int* by simply using the 'ptr' variable as shown in the below statement:
	ptr p1, p2 ;

In the above statement, p1 and p2 are the variables of type 'ptr'.


---
https://www.ibm.com/docs/en/i/7.1?topic=definitions-examples-typedef

Examples of typedef definitions

The following statements define LENGTH as a synonym for int and then use this typedef to declare length,
width, and height as integer variables:

typedef int LENGTH;
LENGTH length, width, height;

The following declarations are equivalent to the above declaration:
int length, width, height;

Similarly, typedef can be used to define a structure, union, or C++ class. For example:
typedef struct {
	int scruples;
	int drams;
	int grains;
} WEIGHT;

The structure WEIGHT can then be used in the following declarations:
WEIGHT	chicken, cow, horse, whale;

In the following example, the type of yds is "pointer to function with no parameter specified, returning
int".
typedef int SCROLL();
extern SCROLL *yds;

In the following typedefs, the token struct is part of the type name: the type of ex1 is struct a;
the type of ex2 is struct b.

typedef struct a { char x; } ex1, *ptr1;
typedef struct b { char x; } ex2, *ptr2;

Type ex1 is compatible with the type struct a and the type of the object pointed to by ptr1. Type ex1
is not compatible with char, ex2, or struct b.

----------- C++ only ---------------
In C++, a typedef name must be different from any class type name declared within the same scope. If
the typedef name is the same as a class type name, it can only be so if that typedef is a synonym of
the class name. This condition is not the same as in C. The following can be found in standard C headers:
typedef class C { /*  data and behavior  */ } C;

A C++ class defined in a typedef without being named is given a dummy name and the typedef name for
linkage. Such a class cannot have constructors or destructors. For example:

typedef class {
	Trees();
} Trees;

Here the function Trees() is an ordinary member function of a class whose type name is unspecified. In
the above example, Trees is an alias for the unnamed class, not the class type name itself, so Trees()
cannot be a constructor for that class.
----------- End of C++ only --------


---
https://www.educative.io/edpresso/how-to-use-the-typedef-struct-in-c

How to use the typedef struct in C

   The C language contains the typedef keyword to allow users to provide alternative names for the
   primitive (e.g., int) and user-defined (e.g struct) data types.

   Remember, this keyword adds a new name for some existing data type but does not create a new type.

Syntax
   svg viewer (Submit)

   Using typedef struct results in a cleaner, more readable code, and saves the programmer keystrokesâ€‹.
   However, it also leads to a more cluttered global namespace which can be problematic for large
   programs.

Examples
   The following code snippets illustrate how to use the typedef struct.

1. Variable declaration without using typedef:

<code>
#include<stdio.h>

struct Point {
	int x;
	int y;
};

int main() {
	struct Point p1;
	p1.x = 1;
	p1.y = 3;
	printf("%d \n", p1.x);
	printf("%d \n", p1.y);
	return 0;
}
</code>


2. Using the typedef keyword:
   Note that there is no longer a need to type struct again and again with every declaration of the
   variable of this type.

Method one:

<code>
#include<stdio.h>

struct Point{
	int x;
	int y;
};

typedef struct Point Point;

int main() {
	Point p1;
	p1.x = 1;
	p1.y = 3;
	printf("%d \n", p1.x);
	printf("%d \n", p1.y);
	return 0;
}
</code>


Method two:

<code>
#include<stdio.h>

typedef struct Point{
	int x;
	int y;
} Point;

int main() {
	Point p1;
	p1.x = 1;
	p1.y = 3;
	printf("%d \n", p1.x);
	printf("%d \n", p1.y);
	return 0;
}
</code>


---

