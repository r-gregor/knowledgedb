https://wiki.sei.cmu.edu/confluence/display/c/DCL21-C.+Understand+the+storage+of+compound+literals


Understand the storage of compound literals
Apr 20, 2023

   Subclause 6.5.2.5 of the C Standard [[48]ISO/IEC 9899:2011] defines a compound literal as

   A postfix expression that consists of a parenthesized type name followed by a
   brace-enclosed list of initializers. . . . The value of the compound literal is that of
   an unnamed object initiated by the initializer list.

   The storage for this object is either static (if the compound literal occurs at file scope)
   or automatic (if the compound literal occurs at block scope), and the storage duration is
   associated with its immediate enclosing block. For example, in the function

void func(void) {
	int *ip = (int[4]){1,2,3,4};
	/* ... */
}

   following initialization, the int pointer ip contains the address of an unnamed object of
   type int[4], allocated on the stack. Once func returns, any attempts to access this object
   will produce undefined behavior.

   Note that only one object is created per compound literal-even if the compound literal
   appears in a loop and has dynamic initializers.

   This recommendation is a specific instance of DCL30-C. Declare objects with appropriate
   storage durations.

Noncompliant Code Example ??
   In this noncompliant code example, the programmer mistakenly assumes that the elements of
   the ints array of the pointer to int_struct are assigned the addresses of distinct
   int_struct objects, one for each integer in the range [0, MAX_INTS - 1]:

#include <stdio.h>

typedef struct int_struct {
	int x;
} int_struct;

#define MAX_INTS 10

int main(void){
	size_t i;
	int_struct *ints[MAX_INTS];

	for (i = 0; i < MAX_INTS; i++) {
		ints[i] = &(int_struct){i};
	}

	for (i = 0; i < MAX_INTS; i++) {
		printf("%d\n", ints[i]->x);
	}

	return 0;
}

   However, only one int_struct object is created. At each iteration of the first loop, the x
   member of this object is set equal to the current value of the loop counter i. Therefore,
   just before the first loop terminates, the value of the x member is MAX_INTS - 1.

   Because the storage duration of the compound literal is associated with the for loop that
   contains it, dereferencing ints in the second loop results in undefined behavior
   9 (Annex J of the C Standard).

   Even if the region of memory that contained the compound literal is not written to between
   loops, the print loop will display the value MAX_INTS - 1 for MAX_INTS lines. This is
   contrary to the intuitive expected result, which is that the integers 0 through MAX_INTS -
   1 would be printed in order.

Compliant Solution
   This compliant solution uses an array of structures rather than an array of pointers. That
   way, an actual copy of each int_struct (rather than a pointer to the object) is stored.

#include <stdio.h>

typedef struct int_struct {
	int x;
} int_struct;

#define MAX_INTS 10

int main(void){
	size_t i;
	int_struct ints[MAX_INTS];

	for (i = 0; i < MAX_INTS; i++) {
		ints[i] = (int_struct){i};
	}

	for (i = 0; i < MAX_INTS; i++) {
		printf("%d\n", ints[i].x);
	}

	return 0;
}



---
http://nickdesaulniers.github.io/blog/2013/07/25/designated-initialization-with-pointers-in-c/

Designated Initialization With Compound Literals in C
Jul 25, 2013

   Just a quick post on something I just discovered and found neat (I always find obscure C
   syntax interesting). I was trying to figure out how to use a C designated initializer,
   where a member was a pointer to another designated initializer. At this point, you need a
   compound literal. Just a quick background on C initialization:

// verbosely create an array with a known size
int arr [3];
arr[0] = 1;
arr[1] = 2;
arr[2] = 3;
// => [1, 2, 3]

// concisely create an array with a known size
int arr [3] = { 1, 2, 3 }; // => [1, 2, 3]

// creates an array with unspecified values initialized to 0
int arr [4] = { 1, 2, 3 }; // => [1, 2, 3, 0]

// truncates declaration
int arr [1] = { 1, 2, 3 }; // => [1]

// based on number of initializers
int arr [] = { 1, 2, 3 }; // => [1, 2, 3]

   Let's look at how we might have initialized a struct in C89. In C89, you are required to
   declare local variables at the top of a block. A previous initialization of a point struct
   might have looked like:

struct point {
	int x, y;
};

{
	struct point a;
	a.x = 2;
	a.y = 3;
}

   Just as we can define array literals in C using the initializer list syntax, we can use the
   same concise syntax for initializing structs!

// point a is located at (2, 3)
struct point a = { 2, 3 };

   Well, this can be bad. Where would point a be located if say a fellow team mate came along
   and modified the definition of the point struct to:

struct point {
	int y, x; // used to be 'int x, y;'
};

   Suddenly point a points to (3, 2), not (2, 3). It's better if you use designated
   initializers to declare the values for members of your struct. It's up to the compiler to
   decide on the order of initialization, but it wont mess up where the data is intended to
   go.

// point b is located at (2, 3)
struct point b = { .y = 3, .x = 2 };

   So now we have designated initializers, cool. What about if we want to use the same syntax
   to reassign point b?

b = { .x = 5, .y = 6 };
//    ^
// error: expected expression

   While you are being explicit about the shape of the struct that you are trying to assign to
   b, the compiler cannot figure out that you're trying to assign a point struct to another
   point struct. A C cast would probably help here and that's what the concept of compound
   literals are.
b = (struct point) { .x = 5, .y = 6 }; // works!

   Notice: I just combined a compound literal with a designated initializer. A compound
   literal on its own would look like:

b = (struct point) { 5, 6 }; // works!

   To recap we can define points like so:

struct point a;
a.x = 1;
a.y = 2; // C89 (too verbose)
struct point b = { 3, 4 }; // initializer list (struct member order specific)
struct point c = { .x = 5, .y = 6 }; // designated initializer (non struct member order specific)
struct point d = (struct point) { .x = 7, .y = 8 }; // compound literal (cast + designated initialization)

   My favorite part of compound literals is that you can define values inline of an argument
   list. Say you have a function prototype like:

int distance (struct point, struct point);

// instead of calling it like this
// (creating temp objects just to pass in)
struct point a = { .x = 1, .y = 2 };
struct point b = { .x = 5, .y = 6 };
distance(a, b);

// we can use compound literals
distance((struct point) { .x = 1, .y = 2 }, (struct point) { .x = 5, .y = 6 });

   So compound literals help with reassignment of structs, and not storing temporary variables
   just to pass as function arguments. What happens though when one of your members is a
   pointer? C strings are easy because they already have a literal value:

struct node {
	char *value;
	struct node *next;
};

// just using designated initialization
struct node a = {
	.value = "hello world",
	.next = NULL
};


   But what happens if we want to initialize node.next? We could do:
struct node b = {
	.value = "foo",
	.next = NULL
};
a.next = &b;

   Again, we have to define b before assigning it to a.next. That's worthwhile if you need to
   reference b later in that scope, but sometimes you don't (just like how compound literals
   can help with function arguments)! But that's where I was stumped. How do you nest
   designated initializers when the a member is a pointer to another designated initializer? A
   first na√Øve attempt was:

struct node c = {
	.value = "bar",
	.next = {
		.value = "baz",
//      ^
// error: designator in initializer for scalar type 'struct node *'
		.next = NULL
	}
};

   WTF? Well, if you go back to the example with nodes a and b, we don't assign the value of b
   to a.next, we assign it a pointer to b. So how can we use designated initializers to
   define, say, the first two nodes of a linked list? Compound literals. Remember, a compound
   literal is essentially a designated initialization + cast.

struct node d = {
	.value = "qux",
	.next = &((struct node) {
			.value = "fred",
			.next = NULL
			})
};

   And that works, but why? d.next is assigned an address of a compound literal. Granted, you
   probably don't want to be declaring your entire linked list like this, as nesting gets out
   of control fast. I really like this style because it reminds me of JavaScript's syntax for
   declaring object literals. It would look nicer if all of your nested structs were values
   and not references though; then you could just use designated initializers and wouldn't
   need compound literals or address of operators.

   What's your favorite or most interesting part of C syntax?



---
https://theinsomniacprogrammer.medium.com/anonymous-arrays-and-structures-in-c-using-compound-literals-f1ad528b6b0f

Anonymous arrays and structures in C using Compound Literals

Compound literals seem to be a slightly lesser know feature in C. They essentially allow us to
create anonymous arrays...

   Compound literals seem to be a slightly lesser know feature in C. They essentially allow us
   to create anonymous arrays, structures and unions in C like in many other languages.

   Here are some examples of where it might be useful to use Compound Literals...

Passing anonymous structures to functions
   Here below you can see we didn't need to declare a Numbers structure in the main function,
   we directly passed an anonymous structure to the increment function and the increment
   function also returns an anonymous structure back to the display function... there wasn't a
   need to declare any variable unnecessarily. The syntax to create an anonymous structure is
   (type) {initializer_list} ... it's like type-casting an initialization list.

#include <stdio.h>

typedef struct {
	int n1;
	int n2;
} Numbers;

Numbers increment(Numbers n) {
	return (Numbers) {.n1=(++n.n1), .n2=(++n.n2)};
}

void display(Numbers n) {
	printf("\n(%d, %d)\n", n.n1, n.n2);
}

int main(void) {
	display(increment((Numbers) {2, 3}));

	return 0;
}

   Output:
(3,4)

Anonymous Arrays (Strings)

Converting integer Characters to Strings
   Another use-case which I have used personally is when you want to append characters to
   strings by using the character's unicode value.

   Here's a demo:

#include <stdio.h>
#include <string.h>

int main() {
	char prefix[16] = "ABC";
	printf("\n%s\n", strcat(prefix, "D"));
	printf("\n%s\n", strcat(prefix, (char []) {69, '\0'}));

	return 0;
}

   Output:
ABCD
ABCDE

// The compound literal
 (char []) {69, '\0'}

// is equivalent to the string literal
 "E"

   Here we see that in the 1st printf we just use a string literal to append the "D". But what
   if we needed to perform some sort of enumeration where we needed to refer to the character
   by it's unicode integer value. We could use a compound literal to create an anonymous
   character array with the 1st element as the unicode value (69 -> 'E') and then ending the
   array with the null terminator '\0'.

Anonymous arrays and structures in C using Compound Literals

Compound literals seem to be a slightly lesser know feature in C. They essentially allow us to
create anonymous arrays ...



---
https://www.mikeash.com/pyblog/friday-qa-2011-02-18-compound-literals.html

   Compound Literals
   2011-02-18

   We're back to our regular schedule at last. For today's edition, I'm taking a break from
   the usual reader-driven format to discuss a topic of my own choosing: compound literals in
   C99.

   Compound literals are a relatively unknown feature in C. They are fairly new. Introduced as
   part of the C99 standard in 2000, they've been around for a while, but for a language that
   dates to the 1960s, it's a recent addition.

   C99 added a lot of useful features to the language that modern Mac and iOS programmers tend
   to take for granted. Many of these existed as compiler extensions beforehand. Simple
   features like // comments, the long long type, and the ability to mix variable declarations
   and code are all new in C99. Compound literals are much less well known than these
   features, but are equally standard and can be handy, and this is why I want to talk about
   them today.

   Compound Literal Basics
   Compound literals provide a way to write values of arbitrary data types in code. An
   expression like "hello" is a string literal that has type char *. A compound literal is
   simply a different kind of expression that has whatever type you're after. For example,
   it's possible to create an expression which produces the same C string as the string
   literal, but with explicit character-by-character construction:

	(char []){ 'h', 'e', 'l', 'l', 'o', '\0' }

   This is not particularly useful, of course. However, more useful things can be done with
   the syntax as well:

	(NSSize){ 1, 2 }

   This is equivalent to NSMakeSize(1, 2) but without the need for an external function.
   Similar syntax will work for any type, even custom-defined structs.

   Compound literal syntax closely matches variable initialization syntax. For example:

	NSSize s = { 1, 2 };
	(NSSize){ 1, 2 }; // same value

	int x[] = { 3, 4, 5 };
	(int []){ 3, 4, 5 }; // same

   And in general, if a variable is declared with an initializer, then a compound literal with
   the same type and value can be written by sticking the type in parentheses and placing the
   initializer immediately after it:

	Type name = { val };
	(Type){ val };

   There is one exception to this rule. Primitive types (like int) don't require {} to be
   initialized, but {} is still required to create a compound literal. It is not the same to
   write (int)3 and (int){ 3 }, although they act similarly in many cases. The former simply
   takes the integer constant 3 and uselessly casts it to int, whereas the latter is
   essentially a variable declaration with no name.

   Basic Tricks
   The ability to create custom struct values is probably the most useful obvious application
   of compound literals. Although Cocoa takes care of its most common types with NSMakeRect
   and friends, there are still places to put compound literals to good use.

   For example, a CGRect is really just an CGPoint and an CGSize. CGRectMake takes four
   discrete numbers, but sometimes it's more convenient to just deal with those two elements.
   Compound literals let you do that inline:

	[layer setFrame: (CGRect){ origin, size }];

   The ability to create array literals can also be useful. For example, this creates a string
   containing a copyright symbol:

	[NSString stringWithCharacters: (unichar []){ 0x00a9 } length: 1]

   Scope
   A compound literal is essentially an anonymous variable declaration and initialization. As
   such, it follows the same scoping rules as regular variables. For example, this is
   perfectly legal:

	int *ptr;
	ptr = (int []){ 42 };
	NSLog(@"%d", *ptr);

   The compound literal is still in scope when the NSLog executes, so it is legal to
   dereference the pointer. This, however, is not legal:

	int *ptr;
	do {
		ptr = (int []){ 42 };
	} while(0);
	NSLog(@"%d", *ptr);

   The compound literal's lifetime is tied to the scope of the do/while loop, and it no longer
   exists afterwards. The NSLog statement may print junk or crash.

   Mutability
   One really unintuitive thing about compound literals is that, unless you declare their type
   as const, they produce mutable values. The following is perfectly legal, albeit completely
   pointless, code:
	(int){ 0 } = 42;

   Less uselessly, this fact means that you can take the address of compound literals, and
   it's safe to pass them to code which will modify the pointed-to value. There are a lot of
   functions which take a pointer as a parameter purely to allow passing different data types,
   but ultimately they just want a primitive. Using compound literals, you can pass that
   primitive value inline instead of having to create a temporary variable.

   For example, a common operation on sockets is to set the SO_REUSEADDR option. This tells
   the OS to free up the socket's port for use as soon as the socket is closed, instead of the
   default behavior of waiting a few minutes first. This option is set using setsockopt. It
   can be used to set various parameters which need different argument types, so it simply
   takes a void * and a length. This is how it's normally used to set this option:

	int yes = 1;
	setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes));

   Using compound literals, we can make it look more natural:

	setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &(int){ 1 }, sizeof(int));

   This is a fairly minor aesthetic thing, but it is a bit cleaner and more readable. It'll
   also clutter up the debugger with one fewer local variable.

   Another place where this comes in handy is writing methods which take an NSError **
   parameter to pass error information to the caller. By convention, it's legal to pass NULL
   as the pointer to indicate that the caller doesn't care about the error. This means that at
   every place where an error can occur, the pointer must be checked. This gets a bit tedious:
	- (BOOL)doWithError: (NSError **)error
	{
		if(fail1)
		{
			if(error)
				*error = [NSError ...];
			return NO;
		}

		if(fail2)
		{
			if(error)
				*error = [NSError ...];
			return NO;
		}

		if(fail3)
		{
			if(error)
				*error = [NSError ...];
			return NO;
		}

		return YES;
	}

   By using a compound literal to create some local storage, you can ensure that the error
   pointer is always valid, and thus eliminate the constant checks:
	- (BOOL)doWithError: (NSError **)error
	{
		error = error ? error : &(NSError *){ nil };

		if(fail1)
		{
			*error = [NSError ...];
			return NO;
		}

		if(fail2)
		{
			*error = [NSError ...];
			return NO;
		}

		if(fail3)
		{
			*error = [NSError ...];
			return NO;
		}

		return YES;
	}

   This costs some efficiency, because it creates error objects unnecessarily if the parameter
   is NULL, but that generally wouldn't matter, and the result is somewhat more readable. It
   also allows the method to call other error-returning methods in a natural way and make use
   of the result before returning the error to the caller:
	- (BOOL)doWithError: (NSError **)error
	{
		error = error ? error : &(NSError *){ nil };

		BOOL success = [obj doWithError: error];
		if(!success)
		{
			// don't bail out if we can work around it
			if(![[*error domain] isEqual: CanWorkAroundDomain])
				return NO;
		}

		if(fail1)
		{
			*error = [NSError ...];
			return NO;
		}

		return YES;
	}

   Vararg Macros
   I discussed using compound literals and macros a bit in my post on C macros, but it's
   useful enough that it bears repeating. By using a compound literal to create an array, you
   can easily create a macro which takes variable arguments and then does something useful
   with them. As an example, this macro makes it simpler to create NSArray objects:
	#define ARRAY(...) [NSArray \
		arrayWithObjects: (id []){ __VA_ARGS__ } \
		count: sizeof((id []){ __VA_ARGS__ }) / sizeof(id)]

   By using the id [] syntax with compound literals, and by using sizeof on the resulting
   array, you can create macros which do useful things with an arbitrary number of arguments.

   Conclusion
   Compound literals are a nice trick to simplify and clarify code. They are not universally
   applicable, and you must take care not to use them in situations where they hurt more than
   they help. However, they are a nice tool to have in your bag of tricks, and they help make
   C a little more useful and generic.



---
https://www.tutorialspoint.com/compound-literals-in-c

Compound Literals in C
30-Jul-2019

   In this section we will see what is the compound literals in C. The compound literals are
   introduced in C99 standard in C. Using this feature, it can create unnamed objects. In the
   following example we will see how to use compound literal to generate object without any
   name.

Example

#include<stdio.h>

struct point {
	int x;
	int y;
};

void display_point(struct point pt) {
	printf("(%d,%d)
			", pt.x, pt.y);
}

main() {
	display_point((struct point) {10, 20});
}

Output
(10,20)



---
https://gcc.gnu.org/onlinedocs/gcc/Compound-Literals.html

6.28 Compound Literals

   A compound literal looks like a cast of a brace-enclosed aggregate initializer list. Its value is an
   object of the type specified in the cast, containing the elements specified in the initializer.
   Unlike the result of a cast, a compound literal is an lvalue. ISO C99 and later support compound
   literals. As an extension, GCC supports compound literals also in C90 mode and in C++, although as
   explained below, the C++ semantics are somewhat different.

   Usually, the specified type of a compound literal is a structure. Assume that struct foo and
   structure are declared as shown:

struct foo {int a; char b[2];} structure;

   Here is an example of constructing a struct foo with a compound literal:

structure = ((struct foo) {x + y, 'a', 0});

   This is equivalent to writing the following:

{
	struct foo temp = {x + y, 'a', 0};
	structure = temp;
}

   You can also construct an array, though this is dangerous in C++, as explained below. If all the
   elements of the compound literal are (made up of) simple constant expressions suitable for use in
   initializers of objects of static storage duration, then the compound literal can be coerced to a
   pointer to its first element and used in such an initializer, as shown here:

char **foo = (char *[]) { "x", "y", "z" };

   Compound literals for scalar types and union types are also allowed. In the following example the
   variable i is initialized to the value 2, the result of incrementing the unnamed object created by
   the compound literal.

int i = ++(int) { 1 };

   As a GNU extension, GCC allows initialization of objects with static storage duration by compound
   literals (which is not possible in ISO C99 because the initializer is not a constant). It is handled
   as if the object were initialized only with the brace-enclosed list if the types of the compound
   literal and the object match. The elements of the compound literal must be constant. If the object
   being initialized has array type of unknown size, the size is determined by the size of the compound
   literal.

static struct foo x = (struct foo) {1, 'a', 'b'};
static int y[] = (int []) {1, 2, 3};
static int z[] = (int [3]) {1};

   The above lines are equivalent to the following:

static struct foo x = {1, 'a', 'b'};
static int y[] = {1, 2, 3};
static int z[] = {1, 0, 0};

   In C, a compound literal designates an unnamed object with static or automatic storage duration. In
   C++, a compound literal designates a temporary object that only lives until the end of its
   full-expression. As a result, well-defined C code that takes the address of a subobject of a compound
   literal can be undefined in C++, so G++ rejects the conversion of a temporary array to a pointer. For
   instance, if the array compound literal example above appeared inside a function, any subsequent use
   of foo in C++ would have undefined behavior because the lifetime of the array ends after the
   declaration of foo.

   As an optimization, G++ sometimes gives array compound literals longer lifetimes: when the array
   either appears outside a function or has a const-qualified type. If foo and its initializer had
   elements of type char *const rather than char *, or if foo were a global variable, the array would
   have static storage duration. But it is probably safest just to avoid the use of array compound
   literals in C++ code.


---

