filename: c_allows-pass-by-value-of-struct-as-function-argument-but-not-array_20240723.txt
https://www.quora.com/Is-it-true-that-C-allows-one-to-pass-by-value-an-entire-struct-even-a-large-struct-as-a-function-argument-but-does-not-allow-one-to-pass-by-value-an-array-even-a-small-array-as-a-function-argument-instead-requiring/answer/Joe-Zbiciak

Is it true that C allows one to pass by value an entire struct - even a large struct - as a function
argument but does not allow one to pass by value an array - even a small array - as a function argument
(instead requiring pointers)? If so, why?

Yep! The same goes for return values as well.

This passes a large structure by value to and from a function:

struct Big {
	char array[1000000];
};

struct Big foo(struct Big big) {
	for (int i = 0; i < 1000000; ++i) {
		big.array[i] ^= 1;
	}

	return big;
}

C doesn't permit passing even a tiny array such as char a[1] by value, either as an argument or a
return value, however.

Why?

To make it easier to catch errors while porting B code to C.
In B, arrays didn't have names-at least the contiguous storage associated with the array didn't. B
didn't have types, either. You operated on machine words. A given word would behave as a pointer or
an integer or a character or a function address based on how you used it. Word-sized locations in memory
were referred to as cells.

If you declared an array variable in B, what you really got was a variable consisting of a single
cell. In turn, that cell was initialized the starting address of an unnamed, contiguous collection of
cells elsewhere. You could even assign different addresses to that variable. Function arguments and
return values were always just words as well. You didn't pass arrays to and from functions, you passed
addresses to the elements.

C was derived from B and shared much of the syntax. But, C also added a bunch of new functionality,
including a type system. With that type system came structures (struct). That forced Dennis Ritchie to
reconsider how arrays were handled.

He's already told the story, so I'll just quote it here:

    Embryonic C

    NB existed so briefly that no full description of it was written. It supplied the types int and char,
    arrays of them, and pointers to them, declared in a style typified by

int i, j;
char c, d;
int iarray[10];
int ipointer[];
char carray[10];
char cpointer[];

    The semantics of arrays remained exactly as in B and BCPL: the declarations of iarray and carray
    create cells dynamically initialized with a value pointing to the first of a sequence of 10 integers
    and characters respectively. The declarations for ipointer and cpointer omit the size, to assert
    that no storage should be allocated automatically. Within procedures, the language's interpretation
    of the pointers was identical to that of the array variables: a pointer declaration created a cell
    differing from an array declaration only in that the programmer was expected to assign a referent,
    instead of letting the compiler allocate the space and initialize the cell.

    Values stored in the cells bound to array and pointer names were the machine addresses, measured
    in bytes, of the corresponding storage area. Therefore, indirection through a pointer implied no
    run-time overhead to scale the pointer from word to byte offset. On the other hand, the machine code
    for array subscripting and pointer arithmetic now depended on the type of the array or the pointer:
    to compute iarray[i] or ipointer+i implied scaling the addend i by the size of the object referred to.

    These semantics represented an easy transition from B, and I experimented with them for some
    months. Problems became evident when I tried to extend the type notation, especially to add structured
    (record) types. Structures, it seemed, should map in an intuitive way onto memory in the machine,
    but in a structure containing an array, there was no good place to stash the pointer containing
    the base of the array, nor any convenient way to arrange that it be initialized. For example, the
    directory entries of early Unix systems might be described in C as

struct {
	int     inumber;
	char    name[14];
};

    I wanted the structure not merely to characterize an abstract object but also to describe a collection of
    bits that might be read from a directory. Where could the compiler hide the pointer to name that the
    semantics demanded? Even if structures were thought of more abstractly, and the space for pointers
    could be hidden somehow, how could I handle the technical problem of properly initializing these
    pointers when allocating a complicated object, perhaps one that specified structures containing
    arrays containing structures to arbitrary depth?

    The solution constituted the crucial jump in the evolutionary chain between typeless BCPL and typed
    C. It eliminated the materialization of the pointer in storage, and instead caused the creation of
    the pointer when the array name is mentioned in an expression. The rule, which survives in today's C,
    is that values of array type are converted, when they appear in expressions, into pointers to the
    first of the objects making up the array.

    This invention enabled most existing B code to continue to work, despite the underlying shift in
    the language's semantics. The few programs that assigned new values to an array name to adjust
    its origin-possible in B and BCPL, meaningless in C-were easily repaired. More important, the
    new language retained a coherent and workable (if unusual) explanation of the semantics of arrays,
    while opening the way to a more comprehensive type structure.

Link: https://www.bell-labs.com/usr/dmr/www/chist.html

Because C did away with the separate pointer to the array, the old B practice of reassigning that pointer
no longer works. That is, in B you could do this:

/* Swap two array pointers: */
auto a[10];
auto b[10];

a = b;

That replaces the pointer in the cell named a with the pointer value from the cell named b. (And, in
this example, if you didn't save a's original value somewhere, it's now lost forever.)

In C, that no longer works. You need separate pointer variables, like this:

int a[10], *pa = a;
int b[10], *pb = b;

pa = pb;

If arrays were first class types that permitted whole-array assignment, the original program would change
meaning dramatically. So, instead array assignment is forbidden, forcing a hard break.

Meanwhile, C allowed you to continue using the old B syntax for pointer parameters in K&R style function
declarations:

int foo(array)
	int array[]
{
	...
}

When ANSI C came along, this practice was carried forward into ANSI C prototypes, unfortunately.

/* These mean exactly the same thing: */
int foo(int *array);
int foo(int array[]);
int foo(int array[42]);

In the linked page, Dennis points out the consequence:
    On the other hand, C's treatment of arrays in general (not just strings) has unfortunate implications
    both for optimization and for future extensions. [...] More fundamentally, the definition of C
    so specifically describes the semantics of arrays that changes or extensions treating arrays as
    more primitive objects, and permitting operations on them as wholes, become hard to fit into the
    existing language.

So what about struct? The B language didn't have data types, including struct. That came into
existence later in C's history. Therefore, free of the backward-compatibility burden, struct could
become a first-class type. C allowed copying structures by assignment and passing structures as function
arguments¹ and return values fairly early in the language's history.²

This inconsistency between arrays and structures has nothing to do with the cost of copying arguments
passed by value. It has everything to do with C's relationship to B, and the way Dennis designed the
language to provide a smoother transition from B to C.

For folks interested in reading more about the relationship between arrays and pointers in various
contexts, these answers might be helpful:
https://www.quora.com/What-is-the-difference-between-pointer-array/answer/Joe-Zbiciak?no_redirect=1


---

