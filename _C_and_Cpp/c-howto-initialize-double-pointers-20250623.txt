filename: c-howto-initialize-double-pointers-20250623.txt
https://stackoverflow.com/questions/50998284/how-to-initialize-double-pointers

How To Initialize Double Pointers

I am experimenting with double pointers in ANSI C.

Here is the source code:

#include <stdio.h>

int main(void) {
	char **str;
	char **str_zero = str;
	*str++ = "Test";
	*str = NULL;

	while (*str_zero != NULL ) {
		printf("%s\n",*str_zero++);
	}
}

I am wondering why this program does not work unless I do the following first:

#include <stdio.h>

int main(void) {

	static char * a = "The";
	char **str = &a;
	char **str_zero = str;
	*str++ = "Test";
	*str = NULL;

	while (*str_zero != NULL ) {
		printf("%s\n",*str_zero++);
	}
}

And then delete the static char variable.
Strangely, after deleting static char *a, the first source code works perfectly?!!
How is it possible for the compiler to behave that way?

***
    To initialize a double pointer: double *d = NULL. To initialize a pointer to a pointer: void **v = NULL

***
    In the first sample, str is uninitialised, so using its value to initialise str_zero, or all the
    subsequent things (dereferencing and incrementing using *str++, etc) give undefined behaviour. Undefined
    behaviour essentially means "anything can happen as a result of doing this", including different
    behaviours at different times such as you are seeing. As to why adding and removing a declaration
    affects anything, that depends on internal workings of the compiler (e.g. faced with a single change
    that introduces undefined behaviour, the compiler may simply not bother to re-emit object code). -

***
Below is your code where I have added some comments that answer the above question.

#include <stdio.h>

int main(void) {
	char **str;  // Now you have a "pointer to pointer to char" variable
                 // The value of the variable is uninitialized

	char **str_zero = str;  // Now you have another "pointer to pointer to char" variable
                            // But you initialize it using an uninitialized variable (str)
                            // That's undefined behavior so from now on anything may happen


	*str++ = "Test";  // Here you make "whatever str points to" point to a string literal
                      // and increment str
                      // As str is uninitialized this is again UB

	*str = NULL;      // UB as str is still uninitialized

	while (*str_zero != NULL ) {     // UB as str_zero was initialized from uninitialized str
		printf("%s\n",*str_zero++);  // UB as str_zero was initialized from uninitialized str
	}
}

Now let's take a look at your second code example:

#include <stdio.h>

int main(void) {
	static char *a = "The";  // Now you have a "pointer to char" variable
                             // It's properly initialized to point to a string literal

	char **str = &a;  // Now you have a "pointer to pointer to char" variable
                      // It's properly initialized to point to a char pointer

	char **str_zero = str;   // Now you have another "pointer to pointer to char" variable
                             // It's properly initialized from another initialized variable

	*str++ = "Test";  // Here you make "whatever str points to" point to a string literal
                      // and increment str
                      // As str pointed to the variable a, the variable a now points
                      // to the string literal "Test"
                      //
                      // As str was incremented it does not point to the variable a anymore
                      // Now str points to a "char pointer" just after variable a

	*str = NULL;      // This is UB. str points to a "char pointer" just after variable a
                      // but you have not allocated a char pointer there so when
                      // you dereference str it's UB

	while (*str_zero != NULL ) {     // This is ok the first time but once str_zero is incremented
		printf("%s\n",*str_zero++);  // This is ok the first time but once str_zero is incremented
	}                                // it's again UB

}

***
I decided the following is a better method of implementing the source code:

#include <stdio.h>

int main(void) {

	static char *s = NULL;
	char **str = &s;
	char **str_zero = str;

	*str++ = "Swiss";
	*str = NULL;

	printf("%s\n",*str_zero);
}

***
    This is still undefined behavior.
    If you remove *str = NULL; it'll be ok.
    How about if I replace *str = NULL; with *str = s;


---

