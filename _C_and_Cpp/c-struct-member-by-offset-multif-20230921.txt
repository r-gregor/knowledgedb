filename: c_struct-member-by-offset-multif_20230921.txt
https://www.geeksforgeeks.org/the-offsetof-macro/

The OFFSETOF() macro

   We know that the elements in a structure will be stored in sequential order of their declaration. How
   to extract the displacement of an element in a structure? We can make use of offsetof macro.
   Usually we call structure and union types (or classes with trivial constructors) as plain old data
   (POD) types, which will be used to aggregate other data types. The following non-standard macro can
   be used to get the displacement of an element in bytes from the base address of the structure
   variable.

#define OFFSETOF(TYPE, ELEMENT) ((size_t)&(((TYPE *)0)->ELEMENT))

   Zero is casted to type of structure and required element's address is accessed, which is casted to
   size_t. As per standard size_t is of type unsigned int. The overall expression results in the number
   of bytes after which the ELEMENT being placed in the structure. For example, the following code
   returns 16 bytes (padding is considered on 32 bit machine) as displacement of the character variable
   c in the structure Pod.

/* C++ */
#include <iostream>
using namespace std;

#define OFFSETOF(TYPE, ELEMENT) ((size_t)&(((TYPE *)0)->ELEMENT))

typedef struct PodTag {
	int i;
	double d;
	char c;
} PodType;

int main() {
	cout << OFFSETOF(PodType, c);

	return 0;
}


/* C */
#include <stdio.h>
#define OFFSETOF(TYPE, ELEMENT) ((size_t)&(((TYPE *)0)->ELEMENT))

typedef struct PodTag {
	int i;
	double d;
	char c;
} PodType;

int main() {
	printf("%lu", OFFSETOF(PodType, c));

	getchar();
	return 0;
}


   In the above code, the following expression will return the displacement of element c in the
   structure PodType.

OFFSETOF(PodType, c);

   After preprocessing stage the above macro expands to

   ((size_t)&(((PodType *)0)->c))


   Since we are considering 0 as address of the structure variable, c will be placed after 16 bytes of
   its base address i.e. 0x00 + 0x10. Applying & on the structure element (in this case it is c) returns
   the address of the element which is 0x10. Casting the address to unsigned int (size_t) results in
   number of bytes the element is placed in the structure. Note: We may consider the address operator &
   is redundant. Without address operator in macro, the code de-references the element of structure
   placed at NULL address. It causes an access violation exception (segmentation fault) at runtime. Note
   that there are other ways to implement offsetof macro according to compiler behaviour. The ultimate
   goal is to extract displacement of the element. We will see practical usage of offsetof macro in
   liked lists to connect similar objects (for example thread pool) in another article. Article compiled
   by Venki. Please write comments if you find anything incorrect, or you want to share more information
   about the topic discussed above. References: 1. Linux Kernel code. 2.



---
https://stackoverflow.com/questions/2043871/how-can-i-get-set-a-struct-member-by-offset

How can I get/set a struct member by offset

   Ignoring padding/alignment issues and given the following struct, what is best way to get and set the
   value of member_b without using the member name.

struct mystruct {
	int member_a;
	int member_b;
}

struct mystruct *s = malloc(sizeof(struct mystruct));

   Put another way; How would you express the following in terms of pointers/offsets:
s->member_b = 3;
printf("%i",s->member_b);

   My guess is to
     * calculate the offset by finding the sizeof the member_a (int)
     * cast the struct to a single word pointer type (char?)
     * create an int pointer and set the address (to *charpointer + offset?)
     * use my int pointer to set the memory contents

   but I get a bit confused about casting to a char type or if something like memset is more apropriate
   or if generally i'm aproching this totally wrong.

   Cheers for any help

***
   The approach you've outlined is roughly correct, although you should use offsetof instead of
   attempting to figure out the offset on your own. I'm not sure why you mention memset -- it sets the
   contents of a block to a specified value, which seems quite unrelated to the question at hand.

   Here's some code to demonstrate how it works:
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>

typedef struct x {
	int member_a;
	int member_b;
} x;

int main() {
	x *s = malloc(sizeof(x));
	char *base;
	size_t offset;
	int *b;

	// initialize both members to known values
	s->member_a = 1;
	s->member_b = 2;

	// get base address
	base = (char *)s;

	// and the offset to member_b
	offset = offsetof(x, member_b);

	// Compute address of member_b
	b = (int *)(base+offset);

	// write to member_b via our pointer
	*b = 10;

	// print out via name, to show it was changed to new value.
	printf("%d\n", s->member_b);
	return 0;
}

***
   The full technique:
    1. Get the offset using offsetof:
     b_offset = offsetof(struct mystruct, member_b);

    2. Get the address of your structure as a char * pointer.
     char *sc = (char *)s;

    3. Add the add the offset to the structure address, cast the value to a pointer to the appropriate
       type and dereference:
     *(int *)(sc + b_offset)

***
   Ignoring padding and alignment, as you said...

   If the elements you're pointing to are entirely of a single type, as in your example, you can just
   cast the structure to the desired type and treat it as an array:
printf("%i", ((int *)(&s))[1]);

***
   It's possible calculate the offset based on the struct and NULL as reference pointer e.g
   " &(((type *)0)->field)"

   Example:

struct my_struct {
	int x;
	int y;
	int *m;
	int *h;
};

int main() {
	printf("offset %d\n", (int) &((((struct my_struct*)0)->h)));
	return 0;
}

***
   In this particular example, you can address it by *((int *) ((char *) s + sizeof(int))). I'm not sure
   why you want that, so I'm assuming didactic purposes, therefore the explanation follows.

   The bit of code translates as: take the memory starting at address s and treat it as memory pointing
   to char. To that address, add sizeof(int) char-chunks - you will get a new address. Take the value
   that the address thus created and treat it as an int.

   Note that writing *(s + sizeof(int)) would give the address at s plus sizeof(int) sizeof(mystruct)
   chunks

   Edit: as per Andrey's comment, using offsetof:

   *((int *) ((byte *) s + offsetof(struct mystruct, member_b)))

   Edit 2: I replaced all bytes with chars as sizeof(char) is guaranteed to be 1.

***
   It sounds from your comments that what you're really doing is packing and unpacking a bunch of
   disparate data types into a single block of memory. While you can get away with doing that with
   direct pointer casts, as most of the other answers have suggested:

void set_int(void *block, size_t offset, int val) {
	char *p = block;
	*(int *)(p + offset) = val;
}

int get_int(void *block, size_t offset) {
	char *p = block;
	return *(int *)(p + offset);
}

   The problem is that this is non-portable. There's no general way to ensure that the types are stored
   within your block with the correct alignment, and some architectures simply cannot do loads or stores
   to unaligned addresses. In the special case where the layout of your block is defined by a declared
   structure, it will be OK, because the struct layout will include the necessary padding to ensure the
   right alignment. However since you can't access the members by name, it sounds like this isn't
   actually what you're doing.

   To do this portably, you need to use memcpy:

void set_int(void *block, size_t offset, int val) {
	char *p = block;
	memcpy(p + offset, &val, sizeof val);
}

int get_int(void *block, size_t offset) {
	char *p = block;
	int val;

	memcpy(&val, p + offset, sizeof val);
	return val;
}



---
https://en.wikipedia.org/wiki/Offsetof

offsetof

   From Wikipedia, the free encyclopedia

   C's offsetof()
   macro is an ANSI C library feature found in
   stddef.h. It evaluates to the offset (in bytes) of a given member within a struct or
   union type, an expression of type
   size_t. The offsetof() macro takes two parameters, the first being a structure name, and the
   second being the name of a member within the structure. It cannot be described as a C
   prototype.

Implementation
   The "traditional" implementation of the macro relied on the compiler obtaining the offset of a member
   by specifying a hypothetical structure that begins at address zero:
#define offsetof(st, m) \
    ((size_t)&(((st *)0)->m))

   This can be understood as taking a null pointer of type structure
   st, and then obtaining the address of member

   m within said structure. While this implementation works correctly in many compilers, it has
   generated some debate regarding whether this is undefined behavior according to the C
   standard, since it appears to involve a dereference of a null pointer (although,
   according to the standard, section 6.6 Constant Expressions, Paragraph 9, the value of the object is
   not accessed by the operation). It also tends to produce confusing compiler diagnostics if one of the
   arguments is misspelled.

   An alternative is:

#define offsetof(st, m) \
    ((size_t)((char *)&((st *)0)->m - (char *)0))

   It may be specified this way because the standard does not specify that the internal representation
   of the null pointer is at address zero. Therefore the difference between the member address and the
   base address needs to be made. Again, since these are constant expressions it can be calculated at
   compile time and not necessarily at run-time.

   Some modern compilers (such as GCC) define the macro using a special form (as a language
   extension) instead, e.g.

#define offsetof(st, m) \
    __builtin_offsetof(st, m)

   This builtin is especially useful with C++
   classes or structs that declare a custom unary operator &.

Usage
   It is useful when implementing generic data structures in C. For example, the Linux kernel uses
   offsetof() to implement container_of(), which allows something like a mixin type to find the
   structure that contains it:

#define container_of(ptr, type, member) ({ \
                const typeof( ((type *)0)->member ) *__mptr = (ptr); \
                (type *)( (char *)__mptr - offsetof(type,member) );})

   This macro is used to retrieve an enclosing structure from a pointer to a nested element, such as
   this iteration of a linked list of
   my_struct objects:

struct my_struct {
	const char *name;
	struct list_node list;
};

extern struct list_node * list_next(struct list_node *);

struct list_node *current = /* ... */

while (current != NULL) {
	struct my_struct *element = container_of(current, struct my_struct, list);
	printf("%s\n", element->name);
	current = list_next(&element->list);
}

   The linux kernel implementation of container_of uses a GNU C extension called statement
   expressions. It's possible a statement expression was used to ensure type safety and
   therefore eliminate potential accidental bugs. There is, however, a way to implement the same
   behaviour without using statement expressions while still ensuring type safety:

#define container_of(ptr, type, member) ((type *)((char *)(1 ? (ptr) : &((type *)0)->member) - offsetof(type,member)))

   At first glance, this implementation may seem more complex than necessary, and the unusual use of the
   conditional operator may seem out of place. A simpler implementation is possible:

#define container_of(ptr, type, member) ((type *)((char *)(ptr) - offsetof(type, member)))

   This implementation would also serve the same purpose, however, there's a fundamental omission in
   terms of the original linux kernel implementation. The type of ptr is never checked against the type
   of the member, this is something that the linux kernel implementation would catch.

   In the aforementioned type-checked implementation, the check is performed by the unusual use of the
   conditional operator. The constraints of the conditional operator specify that if the operands to the
   conditional operator are both pointers to a type, they must both be pointers to compatible types. In
   this case, despite the fact that the value of the third operand of the conditional expression will
   never be used, the compiler must perform a check to ensure that (ptr) and &((type *)0)->member are
   both compatible pointer types.

Limitations
   Usage of offsetof is limited to POD types in C++98, standard-layout classes in
   C++11, and more cases are conditionally-supported in C++17, otherwise it has
   an undefined behavior. While most compilers will generate a correct result even in cases that don't
   respect the standard, there are edge cases when
   offsetof will either yield an incorrect value, generate a compile-time warning or error, or outright
   crash the program. This is especially the case for virtual inheritance. The following program
   will generate several warnings and print obviously suspicious results when compiled with gcc 4.7.3 on
   an amd64 architecture:

#include <stddef.h>
#include <stdio.h>

struct A {
	int  a;
	virtual void dummy() {}
};

struct B: public virtual A {
	int  b;
};

int main() {
	printf("offsetof(A, a) : %zu\n", offsetof(A, a));
	printf("offsetof(B, b) : %zu\n", offsetof(B, b));
	return 0;
}

   Output is:
offsetof(A, a) : 8
offsetof(B, b) : 8



---
https://cboard.cprogramming.com/c-programming/139595-structures-members-structures-offset.html

Structures as members of structures & offset

     Code:
void main() {
	struct a {
		struct b {
			int i;
			float f;
		}x;

		struct c {
			int j;
			float g;
		}y;
	}z;

	fun(&z.y);
}

void fun(struct c * p) {
	int offset;
	struct b * address;

	offset = (char *) & ((struct c *) (&((struct a *)0) -> y) -> j) - (char *)((struct    a*)0);

	address = (struct b *)((char *) & (p -> j) - offset);
	address -> i = 200;
}

     Can anyone explain how exactly are the two lines inside fun() that are assigning values to offset
     & address working ?

***
     I think "barely" is the word you're looking for. Actually, I'm a little concerned about
     "(&((struct a *)0) -> y)"; presumably the compiler can figure out not to follow the null pointer,
     but that's what you're trying to make it do.
     In theory, you're figuring out the offset of the struct c inside your struct a (by pretending you
     have such an object at address 0), then using that to do some trickery to go "backwards" to get to
     the struct b inside your function when it has been passed in the struct c object. (Heaven forbid
     you use "offsetof", or just actually do something legal and pass in the struct a object itself.)

***
     Ok, first of I noticed the code snippet you provided used void main(). This is no longer standards
     compliant as I am sure you know but to allow myself to sleep tonight I feel obligated to post the
     link on how main() should be defined.
     Second, my disclaimer: The following discussion involves code that is not standards compliant.
     According to ISO standard you cannot dereference a NULL pointer or perform some of these variable
     aliases. This results in undefined behavior which means the results vary from implementation to
     implementation.
     Third, sometimes things like this are useful and have been used in OS development where the
     developers are allowed to make assumptions on how the code will react. I mean, h**l even John
     Carmack used goto.
     So let's take a look at that first piece of code:
     Code:
offset = (char *) & ((struct c *) (&((struct a *)0) -> y) -> j) - (char *)((struct    a*)0);

     The first part is the easy part, we will cast the result to type char* which is the type of actual
     memory addresses. Now the second part:
     Code:
(struct c *) (&((struct a *)0) -> y) -> j)

     The ((struct a*)0) performs a trick which returns the base address for struct a. Having an address
     of a is the same as a pointer to 'a' so to access the members of object 'a' with ptr 'a' you would
     use pointer notation e.g. a->y->j. Then we obtain the address of j with &j.
     The next part of the line:
     Code:
(char *)((struct    a*)0);

     Performs the same trick that we talked about above, e.g. it returns the base address of a. So now
     for offset we are performing this calculation:
     Code:
offset = (address of j) - (address of a)

     This gives us the number of bytes from the start of struct 'a' that the j member is located.
     Now on to the next piece:
     Code:
address = (struct b *)((char *) & (p -> j) - offset);

     With the above knowledge this is a little easier to tackle. So we are tacking the actual memory
     address of member j with this line &(p->j). The char* we discussed above.
     So with the actual memory address of j we are subtracting offset which as we discussed is the
     number of bytes from the begginning of the struct. So we are doing:
     Code:
address = (address of j) - (number of bytes into the structure j is)

     Since math works, we now have the actual memory address of the first thing in struct 'a', which if
     you look at the definition for the struct you see that the first thing in struct 'a' is struct b.
     So now we have the memory address of struct b, which is the same as having a ptr to struct b.
     *note we casted the memory address to pointer type struct b above so the compiler would know about
     the members*
     So with that ptr we can assign values the way you would do pointers, e.g.
     Code:
address->i=200;

     That about sums it up, let me know if you have any questions.

     Now, please, for the love of all things good and holy, think about what you're doing! Don't just
     run around willy-nilly, coding like a drunk two-year-old ...

     ... Just don't be surprised when I say you aren't using standard C anymore, and as such,are off
     in your own little universe that I will completely disregard.
     Warning: Some or all of my posted code may be non-standard and as such should not be used and in
     no case looked at.

***
     This seems like an awfully convoluted way of just doing:

     Code:
void *p = &z.x.i;

     If you have a way to directly access the member, which you do, given that you are directly
     querying them to find out where they are, then you don't need to find the offset.
     Anyway, this wouldn't even compile. func has no idea what a "struct b" or a "struct c" is.
     Quzah.

     Hope is the first step on the road to disappointment.

***
     With the line of logic you are suggesting, I could be misunderstanding you btw, why bother to
     write the traditional "Hello World" program. I mean what use is that? Who would ever just need to
     know how to print "Hello World" to the screen? Might as well just start to learn programming by
     designing a GUI word processor, at least that is a real world problem that would teach you real
     world skills.

     If I need to know the offset of a variable, I can simply use offsetof. If I don't want to, I can
     still do it:

     Code:
void *p = &somestruct;
void *q = &somestruct.member;
int ptrdif = q - p;

***
     In *nix they use it for container_of() or whatever it is called. And offsetof() use to use this
     type of hackery to accomplish it's task. All I am saying is even though the example was over
     simplified it demonstrated a memory accessing technique and the OP just wanted to know how that
     technique worked. Simple as that.
     The OP may decide that they want to go on and make a compiler or OS for themselves and may run
     into a situation where they would need to use something like this to solve a problem. I believe I
     explained that in my second and third point of my original post.


---
http://dev.fyicenter.com/Interview-Questions/c/How_can_I_determine_the_byte_offset_of_a_field_w.html

   How can I determine the byte offset of a field within a structure?

   ANSI C defines the offsetof() macro in <stddef.h>, which lets you compute the offset of field f in
   struct s as offsetof(struct s, f). If for some reason you have to code this sort of thing yourself,
   one possibility is

   #define offsetof(type, f) ((size_t) \
   ((char *)&((type *)0)->f - (char *)(type *)0))

   This implementation is not 100% portable; some compilers may legitimately refuse to accept it.
   (The complexities of the definition above bear a bit of explanation. The subtraction of a carefully
   converted null pointer is supposed to guarantee that a simple offset is computed even if the internal
   representation of the null pointer is not 0. The casts to (char *) arrange that the offset so
   computed is a byte offset. The nonportability is in pretending, if only for the purposes of address
   calculation, that there is an instance of the type sitting at address 0. Note, however, that since
   the pretend instance is not actually referenced, an access violation is unlikely.)


---
https://en.cppreference.com/w/c/language/struct

Struct declaration

   A struct is a type consisting of a sequence of members whose storage is allocated in an ordered
   sequence (as opposed to union, which is a type consisting of a sequence of members whose storage
   overlaps).

   The type specifier for a struct is identical to the union type specifier except for the
   keyword used:

 Syntax

   struct attr-spec-seq    (optional) name     (optional) { struct-declaration-list } (1)
   struct attr-spec-seq    (optional) name                                            (2)

   1) Struct definition: introduces the new type struct name and defines its meaning
   2) If used on a line of its own, as in struct name ;, declares but doesn't define the struct name
   (see forward declaration below). In other contexts, names the previously-declared struct, and
   attr-spec-seq is not allowed.

   name - the name of the struct that's being defined

   struct-declaration-list - any number of variable declarations, bit-field declarations, and

   static assert declarations. Members of incomplete type and members of function type are not
   allowed (except for the flexible array member described below)

   attr-spec-seq - (C23)optional list of attributes, applied to the struct type

 Explanation
   Within a struct object, addresses of its elements (and the addresses of the bit-field allocation
   units) increase in order in which the members were defined. A pointer to a struct can be cast to a
   pointer to its first member (or, if the member is a bit-field, to its allocation unit). Likewise, a
   pointer to the first member of a struct can be cast to a pointer to the enclosing struct. There may
   be unnamed padding between any two members of a struct or after the last member, but not before the
   first member. The size of a struct is at least as large as the sum of the sizes of its members.

   If a struct defines at least one named member, it is allowed to additionally declare its last member
   with incomplete array type. When an element of the flexible array member is accessed (in an
   expression that uses operator . or -> with the flexible array member's name as the right-hand-side
   operand), then the struct behaves as if the array member had the longest size fitting in the memory
   allocated for this object. If no additional storage was allocated, it behaves as if an array with 1
   element, except that the behavior is undefined if that element is accessed or a pointer one past that
   element is produced. Initialization and the assignment operator ignore the flexible array member.
   sizeof omits it, but may have more trailing padding than the omission would imply. Structures with
   flexible array members (or unions who have a recursive-possibly structure member with flexible array
   member) cannot appear as array elements or as members of other structures.

struct s { int n; double d[]; }; // s.d is a flexible array member

struct s t1 = { 0 };          // OK, d is as if double d[1], but UB to access
struct s t2 = { 1, { 4.2 } }; // error: initialization ignores flexible array

// if sizeof (double) == 8
struct s *s1 = malloc(sizeof (struct s) + 64); // as if d was double d[8]
struct s *s2 = malloc(sizeof (struct s) + 40); // as if d was double d[5]

s1 = malloc(sizeof (struct s) + 10); // now as if d was double d[1]. Two bytes excess.
double *dp = &(s1->d[0]);    // OK
*dp = 42;                    // OK
s1->d[1]++;                  // Undefined behavior. 2 excess bytes can't be accessed
                             // as double.

s2 = malloc(sizeof (struct s) + 6);  // same, but UB to access because 2 bytes are
                                     // missing to complete 1 double
dp = &(s2->d[0]);            //  OK, can take address just fine
*dp = 42;                    //  undefined behavior

*s1 = *s2; // only copies s.n, not any element of s.d
           // except those caught in sizeof (struct s)

   (since C99)

   Similar to union, an unnamed member of a struct whose type is a struct without name is known as
   anonymous struct. Every member of an anonymous struct is considered to be a member of the enclosing
   struct or union, keeping their structure layout. This applies recursively if the enclosing struct or
   union is also anonymous.

struct v {
	union { // anonymous union
		struct { int i, j; }; // anonymous structure
		struct { long k, l; } w;
	};
	int m;
} v1;

v1.i = 2;   // valid
v1.k = 3;   // invalid: inner structure is not anonymous
v1.w.k = 5; // valid

   Similar to union, the behavior of the program is undefined if struct is defined without any named
   members (including those obtained via anonymous nested structs or unions).
   (since C11)

 Forward declaration
   A declaration of the following form
   struct attr-spec-seq    (optional) name ;

   hides any previously declared meaning for the name name in the tag name space and declares name as a
   new struct name in current scope, which will be defined later. Until the definition appears, this
   struct name has incomplete type.

   This allows structs that refer to each other:
struct y;
struct x { struct y *p; /* ... */ };
struct y { struct x *q; /* ... */ };

   Note that a new struct name may also be introduced just by using a struct tag within another
   declaration, but if a previously declared struct with the same name exists in the tag name space,
   the tag would refer to that name

struct s* p = NULL;    // tag naming an unknown struct declares it
struct s { int a; };       // definition for the struct pointed to by p

void g(void) {
	struct s;              // forward declaration of a new, local struct s
	                       // this hides global struct s until the end of this block
	struct s *p;           // pointer to local struct s
	                       // without the forward declaration above,
	                       // this would point at the file-scope s
	struct s { char* p; }; // definitions of the local struct s
}

 Keywords
   struct

 Notes
   See struct initialization for the rules regarding the initializers for structs.

   Because members of incomplete type are not allowed, and a struct type is not complete until the end
   of the definition, a struct cannot have a member of its own type. A pointer to its own type is
   allowed, and is commonly used to implement nodes in linked lists or trees.

   Because a struct declaration does not establish scope, nested types, enumerations and enumerators
   introduced by declarations within struct-declaration-list are visible in the surrounding scope where
   the struct is defined.

 Example

   Run this code

#include <stddef.h>
#include <stdio.h>

int main(void) {
	struct car { char *make; char *model; int year; }; // declares the struct type
	                                                   // declares and initializes an object of a previously-declared struct type
	struct car c = {.year=1923, .make="Nash", .model="48 Sports Touring Car"};
	printf("car: %d %s %s\n", c.year, c.make, c.model);

	// declares a struct type, an object of that type, and a pointer to it
	struct spaceship { char *make; char *model; char *year; }
	ship = {"Incom Corporation", "T-65 X-wing starfighter", "128 ABY"},
		 *pship = &ship;

	printf("spaceship: %s %s %s\n", ship.year, ship.make, ship.model);

	// addresses increase in order of definition
	// padding may be inserted
	struct A { char a; double b; char c;};
	printf("offset of char a = %zu\noffset of double b = %zu\noffset of char c = %zu\n"
			"sizeof(struct A) = %zu\n", offsetof(struct A, a), offsetof(struct A, b),
			offsetof(struct A, c), sizeof(struct A));
	struct B { char a; char b; double c;};
	printf("offset of char a = %zu\noffset of char b = %zu\noffset of double c = %zu\n"
			"sizeof(struct B) = %zu\n", offsetof(struct B, a), offsetof(struct B, b),
			offsetof(struct B, c), sizeof(struct B));

	// A pointer to a struct can be cast to a pointer to its first member and vice versa
	char* pmake = (char*)pship;
	pship = (struct spaceship *)pmake;
}

   Possible output:
car: 1923 Nash 48 Sports Touring Car
spaceship: 128 ABY Incom Corporation T-65 X-wing starfighter
offset of char a = 0
offset of double b = 8
offset of char c = 16
sizeof(struct A) = 24
offset of char a = 0
offset of char b = 1
offset of double c = 8
sizeof(struct B) = 16


---

