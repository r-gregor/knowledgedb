filename: c_pointers-as-structure-member_multif_20220513.txt
https://overiq.com/c-programming-101/pointers-as-structure-member-in-c/

Pointers as Structure Member in C
July 27, 2020

   We can also have a pointer as a member of the structure. For example:

struct test {
	char name[20];
	int *ptr_mem;
};

struct test t1, *str_ptr = &t1;

   Here ptr_mem is a pointer to int and a member of structure test.

   There are two ways in which we can access the value (i.e address) of ptr_mem:
	1. Using structure variable - t1.ptr_mem
	2. Using pointer variable - str_ptr->ptr_mem

   Similarly, there are two ways in which we can access the value pointed to by ptr_mem.
	1. Using structure variable - *t1.ptr_mem
	2. Using pointer variable - *str_ptr->ptr_mem

   Since the precedence of dot(.) operator is greater than that of indirection(*) operator, so in the
   expression *t1.ptr_mem the dot(.) is applied before the indirection(*) operator. Similarly in the
   expression *str_ptr->ptr_mem, the arrow (->) operator is applied followed by indirection(*) operator.

   The following program demonstrates everything we have learned so far in this lesson.

#include<stdio.h>

struct student {
	char *name;
	int age;
	char *program;
	char *subjects[5];
};

int main()
{
	struct student stu = {
							"Lucy",
							25,
							"CS",
							{"CS-01", "CS-02", "CS-03", "CS-04", "CS-05" }
						};

	struct student *ptr_stu = &stu;
	int i;

	printf("Accessing members using structure variable: \n\n");

	printf("Name: %s\n", stu.name);
	printf("Age: %d\n", stu.age);
	printf("Program enrolled: %s\n", stu.program);

	for(i = 0; i < 5; i++) {
		printf("Subject : %s \n", stu.subjects[i]);
	}

	printf("\n\nAccessing members using pointer variable: \n\n");

	printf("Name: %s\n", ptr_stu->name);
	printf("Age: %d\n", ptr_stu->age);
	printf("Program enrolled: %s\n", ptr_stu->program);

	for(i = 0; i < 5; i++) {
		printf("Subject : %s \n", ptr_stu->subjects[i]);
	}

	// signal to operating system program ran fine
	return 0;
}

   Expected Output:

Accessing members using structure variable:

Name: Lucy
Age: 25
Program enrolled: CS
Subject : CS-01
Subject : CS-02
Subject : CS-03
Subject : CS-04
Subject : CS-05
Accessing members using pointer variable:

Name: Lucy
Age: 25
Program enrolled: CS
Subject : CS-01
Subject : CS-02
Subject : CS-03
Subject : CS-04
Subject : CS-05

   How it works:
   In lines 3-9, a structure student is declared which have four members namely: name, age, program and
   subjects. The type of members is as follows:

	---------------------------------------------------
	Name                Type
	---------------------------------------------------
	name                a pointer to char
	age                 int
	program             pointer to char
	subjects            an array of 5 pointers to char
	---------------------------------------------------

   In lines 13-18, a variable stu of type struct student is declared and initialized. Since name and
   program are pointers to char so we can directly assign string literals to them. Similarly, subjects
   is an array of 5 pointers to char, so it can hold 5 string literals.

   In line 20, a pointer variable ptr_stu of type struct student is declared and assigned the address of
   stu using & operator.

   From lines 25-27, three printf() statement is used to print name, age and program using structure
   variable stu.

   In lines 29-32, a for loop is used to loop through all the elements of an array of pointers
   *subjects[5]. And print the names of the subjects using structure variable.

   From lines 36-38, three printf() statement is used to print name, age and program using pointer
   variable ptr_stu.

   In lines 40-43, a for loop is used to loop through all the elements of an array of pointers
   *subjects[5]. And print the names of the subjects using pointer variable.



---
https://aticleworld.com/pointers-as-member-of-structure-in-c/

   Pointers as member pointers as member

   A pointer could be a member of structure, but you should be careful before creating the
   pointer as a member of structure in C. Generally we take a pointer as a member when we don't know the
   length of the data which need to store.

   Let's see an example to the better understanding,
typedef struct {
	int iLen;
	char *pcName;
} Info;

   The above structure "Info" contains two members, integer variable (iLen) and a pointer to the
   character (pcName).

How to access pointer member of structure in C
   Similar to another members pointer member is also access by the structure variable or pointer with
   the help of dot ( . ) or arrow ( -> ) operator. The left (first) operand of the operator should
   be variable of structure or pointer to the structure and right (second) operand shall name of a
   pointer member that you want to access.

   See the below code, in which we are creating a structure variable and initializing the variable
   with literal string and their length. We are also assigning the address of the structure variable
   (MyInfo) to the pointer to the structure (ptrMyInfo).

#include<stdio.h>

typedef struct {
	int iLen;
	char *pcName;
} Info;


int main() {

	//structure variable
	Info MyInfo = { 11,  "Aticleworld"};

	//pointer to structure
	Info *ptrMyInfo = &MyInfo;

	//Used arraw operator
	printf("ptrMyInfo->pcName = %s\n\n",ptrMyInfo->pcName);


	//Used dot operator
	printf("PMyInfo.pcName = %s\n",MyInfo.pcName);

	return 0;
}

   Output:

	ptrMyInfo->pcName = Aticleworld
	MyInfo.pcName = Aticleworld

   If you like the video course, you can check this course created by my friends Kenny Kerr. The
   course contains video lectures of 4.13-hour length covering all basic topics of c language.


How to assign a value to a pointer member of structure in C
   Before assigning a value to a pointer you should assign a valid memory. If you don't assign a
   valid memory, you will get the undefined behavior. There is two way to access the value of a pointer
   member of a structure in C.

1. Using the structure variable

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct {
	int *piData;
	char *pcName;
} Info;


int main() {

	//structure variable
	Info MyInfo;

	//Allocate memory for integer
	MyInfo.piData =  malloc(sizeof(int));

	//check allocated memory
	if((MyInfo.piData) == NULL) {
		printf("FAIL TO ALLOCATE MEMORY\n");

		return 0;
	}

	// Copy 12 in piData
	*MyInfo.piData = 12;

	printf("MyInfo.piData = %d\n",*MyInfo.piData);

	//Allocate memory for pointer to char
	MyInfo.pcName = malloc(sizeof(char) * 12);

	//check allocated memory
	if((MyInfo.pcName) == NULL) {
		free(MyInfo.piData);
		printf("FAIL TO ALLOCATE MEMORY\n");

		return 0;
	}

	//Copy data in pcName
	strncpy(MyInfo.pcName,"Aticleworld", (*MyInfo.piData));
	printf("MyInfo.pcName = %s\n",MyInfo.pcName);

	//Free allocated memory
	free(MyInfo.piData);
	free(MyInfo.pcName);

	return 0;
}

   Output:

	MyInfo.piData = 12
	MyInfo.pcName = Aticleworld

   How does the above program work?
   In the above program, MyInfo is a structure variable. Using the MyInfo we can access the members of
   the structure piData and pcName. As we know that we have to provide a valid memory to the pointer
   before assigning a value, so here I am using the malloc (memory management function) to allocate
   heap memory for the pointers.

   After the allocation of the memory, I am copying the data in piData and pcName and displaying the
   copied data on the console using the printf.

2. Using the pointer to the structure
   Similar to the structure variable you can access the pointer member using the pointer to structure.
   But the difference is that when you are going to access using the pointer to structure you should
   assign memory to the pointer. See the below example code.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct {
	int *piData;
	char *pcName;

} Info;


int main() {

	//pointer to structure
	Info *ptrMyInfo = NULL;

	//Assign memory to the pointer
	ptrMyInfo = malloc(sizeof(Info));

	//check allocated memory
	if((ptrMyInfo) == NULL) {
		printf("FAIL TO ALLOCATE MEMORY\n");

		return 0;
	}

	//Allocate memory for integer
	ptrMyInfo->piData =  malloc(sizeof(int));

	//check allocated memory
	if((ptrMyInfo->piData) == NULL) {
		free(ptrMyInfo);
		printf("FAIL TO ALLOCATE MEMORY\n");

		return 0;
	}

	// Copy 12 in piData
	*ptrMyInfo->piData = 12;

	printf("ptrMyInfo.piData = %d\n",*ptrMyInfo->piData);

	//Allocate memory for pointer to char
	ptrMyInfo->pcName = malloc(sizeof(char) * 12);

	//check allocated memory
	if((ptrMyInfo->pcName) == NULL) {
		free(ptrMyInfo->piData);
		free(ptrMyInfo);
		printf("FAIL TO ALLOCATE MEMORY\n");

		return 0;
	}

	//Copy data in pcName
	strncpy(ptrMyInfo->pcName,"Aticleworld", (*ptrMyInfo->piData));
	printf("ptrMyInfo.pcName = %s\n",ptrMyInfo->pcName);

	//Free allocated memory
	free(ptrMyInfo->piData);
	free(ptrMyInfo->pcName);
	free(ptrMyInfo);

	return 0;
}

   Output:

	MyInfo.piData = 12
	MyInfo.pcName = Aticleworld



---
https://aticleworld.com/pointer-inside-a-structure/

How to access pointer inside structure in C

   It is not a big deal to access pointer inside a structure in c but still, there are a lot of people
   who make mistakes. In this article, I will write a method to describe the way to how to access a
   pointer from a structure.

   Here I am assuming you have already knowledge of structure and pointers. If you want a quick
   revision, please read the below articles.
	1. structure in  C
	2. pointers in C

   Let's take an example to understand the way to how to access pointer from a structure in C.

   Suppose StudentInfo is a structure, this structure contains all the information of students like
   their name, age, roll number, address. Our requirement here to create a method to write the
   information into the structure. Before reading this example if you don't know the dynamic memory
   allocation, please read the below articles.
	1. Dynamic memory allocation
	2. Problem with Dynamic Memory Allocation
	3. How to dynamically allocate a 1D and 2D array in c

   See below example code,

#include <stdio.h>
#include<stdlib.h>
#include <string.h>

//Calculate size of structure
#define SIZE_STRUCTURE(x) sizeof(x)

//Size of the student name
#define NAME_SIZE	 40

//Size of the address
#define ADDRESS_SIZE  80


//structure template
typedef struct {
	int age;
	int roll_number;
	char *name;
	char *address;

} sStudentInfo;


//To clear input buffer
void ClearNewLines(void) {
	int c;
	do {
		c = getchar();
	}
	while (c != '\n' && c != EOF);
}

//Function to write information into the structure
sStudentInfo* writeStudentInfo(void) {
	sStudentInfo *writeInfo = NULL; //declare pointer to structure
	int studentAge = 0; //declare var to store student age
	int studentRollNumber = 0; //declare var to store student roll number
	char studentName[NAME_SIZE] = { 0 }; //declare array to store student name
	char studentAddress[ADDRESS_SIZE] = { 0 }; //declare array to store student Address

	writeInfo = malloc(SIZE_STRUCTURE(sStudentInfo));//Allocate memory for structure pointer
	if (writeInfo == NULL)
		return NULL;

	printf("Enter the Age: "); //Enter Age of the student
	scanf("%d", &studentAge);
	ClearNewLines(); //Clear new Line
	writeInfo->age = studentAge; // Write age

	printf("\nEnter the roll number: ");//Enter roll number of the student
	scanf("%d", &studentRollNumber);

	ClearNewLines(); //Clear new Line
	writeInfo->roll_number = studentRollNumber;

	printf("\nEnter the name: ");//Enter name of the student
	fgets(studentName, NAME_SIZE, stdin);

	writeInfo->name = malloc(NAME_SIZE);
	if (writeInfo->name == NULL)
		return NULL;

	strncpy(writeInfo->name, studentName, NAME_SIZE);

	printf("\nEnter the address: "); //Enter addressof the student
	fgets(studentAddress, ADDRESS_SIZE, stdin);

	writeInfo->address = malloc(ADDRESS_SIZE);
	if (writeInfo->address == NULL)
		return NULL;

	strncpy(writeInfo->address, studentAddress, ADDRESS_SIZE);

	return writeInfo;
}

//Main function
int main(int argc, char *argv[]) {
	sStudentInfo *pTomInfo = NULL;

	pTomInfo = writeStudentInfo();
	if (pTomInfo == NULL) {
		printf("Fail to write student info\n");
		return 0;
	}

	printf("\n\n\n\n\n\n<!****	Read Information of student  ****!>\n\n\n\n\n\n");

	printf("Age: %d\n", pTomInfo->age); //Print Age of the student

	printf("Roll number: %d\n", pTomInfo->roll_number);//Print roll number of the student

	printf("Name: %s\n", pTomInfo->name);//Print name of the student

	printf("Address: %s\n", pTomInfo->address);//Print address of the student

	free(pTomInfo->name); //free allocated memory for name
	pTomInfo->name = NULL; //Avoid to make dangling pointer

	free(pTomInfo->address); //free allocated memory for address
	pTomInfo->address = NULL; //Avoid to make dangling pointer

	free(pTomInfo); //free allocated memory for structure
	pTomInfo = NULL; //Avoid to make dangling pointer

	return 0;
}

   Output:

	Enter the Age: 28

	Enter the roll number: 1234

	Enter the name: Amlendra kumar

	Enter the address: Noida, India


   For efficiency, a pointer to the structures is generally passed to functions. The members of
   structures that are passed within the functions are accessed to perform dereferencing a structure
   pointer and selecting a member using the dot operator ( . ). It is very difficult to dereference the
   structure pointer every time.

   Therefore, C provides a special pointer operator, (called arrow) to access a member of a
   structure pointed to by a pointer variable. The operator is a combination of minus symbol, -,
   followed by a greater-than symbol, >.

   Arrow operator is exactly equivalent to a dereference operation followed by the dot ( . ) operator as
   shown below:
(*pTomInfo).age;

   Remember, this is the same as:
pTomInfo->age;

Some Important Observations of the above code:

   1. The below two statements are very necessary, generally, people make mistakes here and forget to
   allocate separate memory for the pointers within the structure.

   Like in above example, I have allocated separate memory for the student name and address.
writeInfo->name = malloc(sizeof(studentName));
if(writeInfo->name == NULL)
return NULL;

writeInfo->address = malloc(sizeof(studentAddress));
if(writeInfo->address == NULL)
return NULL;

   2. Generally, people deallocates the memory allocated for structure pointers before deallocating the
   memory of structure members.

   3. Use the fgets in place of the scanf and gets. It prevents the overflow.


---

