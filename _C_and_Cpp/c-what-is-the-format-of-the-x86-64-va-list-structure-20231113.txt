filename: c_what-is-the-format-of-the-x86-64-va-list-structure_20231113.txt
https://www.appsloveworld.com/c/100/9/what-is-the-format-of-the-x86-64-va-list-structure?expand_article=1

What is the format of the x86_64 va_list structure?

     the va_list type
     the va_list type is an array containing a single element of one structure containing the necessary
     information to implement the va_arg macro.

 typedef struct {
	 unsigned int gp_offset;
	 unsigned int fp_offset;
	 void *overflow_arg_area;
	 void *reg_save_area;
 } va_list[1];

     the va_start macro
     the va_start macro initializes the structure as follows:

     reg_save_area: the element points to the start of the register save area.

     oveflow_arg_area: this pointer is used to fetch arguments passed on the stack. it is initialized
     with the address of the first argument passed on the stack, if any, and then always updated to
     point to the start of the next argument on the stack.

     gp_offset: the element holds the offset in bytes from reg_save_area to the place where the next
     available general purpose argument register is saved. in case all argument registers have been
     exhausted, it is set to the value 48 (6 * 8).

     fp_offset: the element holds the offset in bytes from reg_save_area to the place where the next
     available floating point argument register is saved. in case all argument registers have been
     exhausted, it is set to the value 304 (6 * 8 + 16 * 16).

   In i386 architecture, the va_list is a pointer type. however, in amd64 architecture, it is an array
   type. what is the difference? actually, if you apply an & operation to a pointer type, you will get
   the address of this pointer variable. but no matter how many times you apply & operation to an array
   type, the value is the same, and is equal to the address of this array.

   So, what should you do in amd64? the easiest way to pass variable of va_list in a function is just
   passing it with no * or & operator.

   for example:

void foo(const char *fmt, ...) {
	va_list ap;
	int cnt;
	va_start(ap, fmt);
	bar(fmt, ap);
	va_end(ap);
	return cnt;
}

void bar(const char *fmt, va_list ap) {
	va_arg(ap, int);
	//do something
	test(ap);
}

void test(va_list ap) {
	va_arg(ap, int);
	//do something
}

   it just works! and you don't need to worry about how many arguments you have got.

   it turns out the problem was gcc's making va_list an array type. my function was of the signature:
void foo(va_list ap);

   and i wanted to pass a pointer to ap to another function, so i did:

void foo(va_list ap) {
	bar(&ap);
}

   unfortunately, array types decay to pointer types in function argument lists, so rather than passing
   a pointer to the original structure, i was passing a pointer to a pointer.

   to work around the problem, i changed the code to:

void foo(va_list ap) {
	va_list ap2;
	va_copy(ap2, ap);
	bar(&ap2);
	va_end(ap2);
}

   this is the only portable solution i could come up with, that accounts for both the possibility that
   va_list is an array type and the possibility that it's not.



---

