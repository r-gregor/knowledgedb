filename: zig_tuple-vs-anonymous-struct_multif_20250313.txt
https://ziggit.dev/t/tuple-vs-anonymous-struct/4110

Tuple vs anonymous struct
April 27, 2024

   What is the difference between a tuple and anonymous struct - syntactically, semantically, and
   implementation wise?

   Sometimes I'm not even sure which one I'm using.

***
   Anonymous struct literals behave like normal structs and have named fields that are accessed with
   anon.field syntax. Tuples are anonymous struct literals where the fields don't have names. Tuple
   fields are instead accessed via tup[i] syntax (or tup.@"i") and you can use tup.len to get the number
   of fields.

pub fn main() void {
	const tup = .{ 3.1, "hello" };
	const anon = .{ .a = 3.1, .b = "hello" };
	@compileLog(tup);
	@compileLog(anon);
}

Compile Log Output:
@as(struct{comptime comptime_float = 3.1, comptime *const [5:0]u8 = "hello"}, .{ 3.1, "hello" })
@as(struct{comptime a: comptime_float = 3.1, comptime b: *const [5:0]u8 = "hello"}, .{ .a = 3.1, .b = "hello"})

***
   You can also just create tuple types yourself:
const MyTuple = struct { f32, i32 };
my_tuple: MyTuple = .{ 3.1, -2 };

   So there is nothing uniquely different about the types for those anonymous literals, and I was wrong
   to say that "tuples are anonymous struct literals."

***
   There are a lot of concepts with similar names:

     * "Anonymous Struct" = a struct type without a name

return struct {
	name: []const u8,
};

       All the struct type names are derived.
     * "Struct Literal" = a struct value
       Point{.x = 0, .y = 0}

     * "Anonymous Struct Literal" = struct literal (value) without a name
  const pt: Point = .{.x = 0, .y = 0};

     * "Tuple" = struct type without field names
  const names: struct{[]const u8, []const u8} = .{"John", "Doe"};

     * "Anonymous Struct Type" = a struct created from an anonymous struct literal with unknown result type
  const unknown = .{ .answer = 42};

***
   A tuple is an anonymous struct without field names.
   Implementation wise tuple is a struct with field names @"0", @"1", ...

   Syntactically:
   Tuple declaration: struct { []const u8, i32}
   Struct declaration: struct { name: []const u8, value: i32}


---
https://zig.guide/language-basics/anonymous-structs/

Anonymous Structs
Apr 24, 2024

The struct type may be omitted from a struct literal. These literals may coerce to other struct types.

test "anonymous struct literal" {
	const Point = struct { x: i32, y: i32 };

	const pt: Point = .{
		.x = 13,
		.y = 67,
	};
	try expect(pt.x == 13);
	try expect(pt.y == 67);
}

Anonymous structs may be completely anonymous i.e. without being coerced to another struct type.

test "fully anonymous struct" {
	try dump(.{
		.int = @as(u32, 1234),
		.float = @as(f64, 12.34),
		.b = true,
		.s = "hi",
	});
}

fn dump(args: anytype) !void {
	try expect(args.int == 1234);
	try expect(args.float == 12.34);
	try expect(args.b);
	try expect(args.s[0] == 'h');
	try expect(args.s[1] == 'i');
}

Anonymous structs without field names may be created and are referred to as tuples. These have many of the
properties that arrays do; tuples can be iterated over, indexed, can be used with the ++ and ** operators, and
have a len field. Internally, these have numbered field names starting at "0", which may be accessed with the
special syntax @"0" which acts as an escape for the syntax - things inside @"" are always recognised as
identifiers.

An inline loop must be used to iterate over the tuple here, as the type of each tuple field may differ.

test "tuple" {
	const values = .{
		@as(u32, 1234),
		@as(f64, 12.34),
		true,
		"hi",
	} ++ .{false} ** 2;
	try expect(values[0] == 1234);
	try expect(values[4] == false);
	inline for (values, 0..) |v, i| {
		if (i != 2) continue;
		try expect(v);
	}
	try expect(values.len == 6);
	try expect(values.@"3"[0] == 'h');
}

