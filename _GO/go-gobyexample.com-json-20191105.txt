filename: go_gobyexample.com_json_20191105.txt
https://gobyexample.com/json

Go by Example: JSON

Go offers built-in support for JSON encoding and
decoding, including to and from built-in and custom
data types.

                                                       |  package main
                                                       | 
                                                       |  import (
                                                       |      "encoding/json"
                                                       |      "fmt"
                                                       |      "os"
                                                       |  )
                                                       | 
                                                       |  type response1 struct {
We'll use these two structs to demonstrate encoding    |      Page   int
and decoding of custom types below.                    |      Fruits []string
                                                       |  }
                                                       | 
                                                       |  type response2 struct {
Only exported fields will be encoded/decoded in JSON.  |      Page   int      `json:"page"`
Fields must start with capital letters to be exported. |      Fruits []string `json:"fruits"`
                                                       |  }
                                                       | 
                                                       |  func main() {
                                                       | 
First we'll look at encoding basic data types to JSON  |      bolB, _ := json.Marshal(true)
strings. Here are some examples for atomic values.     |      fmt.Println(string(bolB))
                                                       | 
                                                       |      intB, _ := json.Marshal(1)
                                                       |      fmt.Println(string(intB))
                                                       | 
                                                       |      fltB, _ := json.Marshal(2.34)
                                                       |      fmt.Println(string(fltB))
                                                       | 
                                                       |      strB, _ := json.Marshal("gopher")
                                                       |      fmt.Println(string(strB))
                                                       | 
And here are some for slices and maps, which encode to |      slcD := []string{"apple", "peach", "pear"}
JSON arrays and objects as you'd expect.               |      slcB, _ := json.Marshal(slcD)
                                                       |      fmt.Println(string(slcB))
                                                       | 
                                                       |      mapD := map[string]int{"apple": 5, "lettuce": 7}
                                                       |      mapB, _ := json.Marshal(mapD)
                                                       |      fmt.Println(string(mapB))
                                                       | 
The JSON package can automatically encode your custom  |      res1D := &response1{
data types. It will only include exported fields in    |          Page:   1,
the encoded output and will by default use those names |          Fruits: []string{"apple", "peach", "pear"}}
as the JSON keys.                                      |      res1B, _ := json.Marshal(res1D)
                                                       |      fmt.Println(string(res1B))
                                                       | 
You can use tags on struct field declarations to       |      res2D := &response2{
customize the encoded JSON key names. Check the        |          Page:   1,
definition of response2 above to see an example of     |          Fruits: []string{"apple", "peach", "pear"}}
such tags.                                             |      res2B, _ := json.Marshal(res2D)
                                                       |      fmt.Println(string(res2B))
                                                       | 
Now let's look at decoding JSON data into Go values.   |      byt := []byte(`{"num":6.13,"strs":["a","b"]}`)
Here's an example for a generic data structure.        | 
                                                       | 
We need to provide a variable where the JSON package   | 
can put the decoded data. This map[string]interface{}  |      var dat map[string]interface{}
will hold a map of strings to arbitrary data types.    | 
                                                       | 
                                                       |      if err := json.Unmarshal(byt, &dat); err != nil {
Here's the actual decoding, and a check for associated |          panic(err)
errors.                                                |      }
                                                       |      fmt.Println(dat)
                                                       | 
In order to use the values in the decoded map, we'll   | 
need to convert them to their appropriate type. For    |      num := dat["num"].(float64)
example here we convert the value in num to the        |      fmt.Println(num)
expected float64 type.                                 | 
                                                       | 
Accessing nested data requires a series of             |      strs := dat["strs"].([]interface{})
conversions.                                           |      str1 := strs[0].(string)
                                                       |      fmt.Println(str1)
                                                       | 
We can also decode JSON into custom data types. This   |      str := `{"page": 1, "fruits": ["apple", "peach"]}`
has the advantages of adding additional type-safety to |      res := response2{}
our programs and eliminating the need for type         |      json.Unmarshal([]byte(str), &res)
assertions when accessing the decoded data.            |      fmt.Println(res)
                                                       |      fmt.Println(res.Fruits[0])
                                                       | 
In the examples above we always used bytes and strings |      enc := json.NewEncoder(os.Stdout)
as intermediates between the data and JSON             |      d := map[string]int{"apple": 5, "lettuce": 7}
representation on standard out. We can also stream     |      enc.Encode(d)
JSON encodings directly to os.Writers like os.Stdout   |   }
or even HTTP response bodies.                          | 
                                                       | 
                                                       |            $ go run json.go
                                                       |            true
                                                       |            1
                                                       |            2.34
                                                       |            "gopher"
                                                       |            ["apple","peach","pear"]
                                                       |            {"apple":5,"lettuce":7}
                                                       |            {"Page":1,"Fruits":["apple","peach","pear"]}
                                                       |            {"page":1,"fruits":["apple","peach","pear"]}
                                                       |            map[num:6.13 strs:[a b]]
                                                       |            6.13
                                                       |            a
                                                       |            {1 [apple peach]}
                                                       |            apple
                                                       |            {"apple":5,"lettuce":7}

We've covered the basic of JSON in Go here, but check out the
JSON and Go blog post and JSON package docs for more.


---
