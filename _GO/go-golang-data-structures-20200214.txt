filename: go_golang-data-structures_20200214.txt
https://staging.mindbowser.com/golang-data-structures/

Go Data Structures

   As we have seen how control flow and functions work in [69]Chapter - 4 of our Golang tutorial, let's
   have a look at major Golang Data Structures.

Array -
   Well, almost every programmer knows what is array. But let's revisit the concept one more time -
   Basically, array is number of elements of same type stored in sequential order. We use arrays to
   store fixed no. of more elements which is really a good data structure.
   We need to follow below syntax to create an array :
var var_name [size]var_type

   Example -
var arr [10]int //It will create an array with name"arr" of 10 integers

     * Once you declare an array with its size you are not allowed to change it.
     * If you try to insert more elements than array size, compiler will give you an error.
     * By default array size is 0 (zero)
     * Array index starts from 0th index
     * We can set value directly to array at particular index array_name[index]=value
     * The inbuilt len returns length of an array

   Go provides a convenient way of storing elements.
func main() {
    var x [5]int
    x[3] = 1000
    fmt.Println(x)
    b := [5]int {54,76,34,2,3,} /*we have initialized this array and notice extra trailing,
    after last element of array which is required in Go. we no need to specify type because
    Go can figure it out */
}

main.go
package main
import (
    "fmt"
)

func main() {
    var name [50]string //array of 50 string elements
    fmt.Println(name)
    name[43] = "Welcome to Go Programming"
    fmt.Println(name)
    var x [100]string
    fmt.Println("Length of arr x:", len(x)) //calculate length of array
    z := [5]int{43, 78, 54, 23, 22}
    fmt.Println(z)
    
    for i := 65; i <= 122; i++ {
        x[i-65] = string(i)
    }
    
    fmt.Println(x)
}

Data Structures : Slice
   Slice is same like an array but it has variable length so we don't need to specify the length to it.
   It will grow whenever it exceeds its size. Like an array, slice also has index and length but its
   length can be changed.
     * Slice also has continuous segments of memory locations
     * The default value of uninitialized slice is nil
     * Slices does not store the data. It just provides reference to an array
     * As we change the elements of slice, it will modify corresponding elements of that array

   Syntax for slice creation is:
var var_name []var_type

   The only difference between slice and array is that there is no need to specify length while creating
   slice.
var x[] float64

   Here, slice of type float64 elements will be created with length 0 & capacity 0
func main() {
    nums := []int{5,7,4,8,9} //No need to specify length
    fmt.Println(nums)
}

   We can also create slice by using make() also which is available in builtin package of golang
func make(Type,size IntegerType)Type
x := make([]string,5) --> Here the capacity of slice equal to length of it

   This will create slice of underlying string array having size for 5 elements
   Length--> No. of elements present
   Capacity--> Total Size
   The length and capacity of slice can be obtained by using len(slice), cap(slice)
   Below is another example -
array := []float64{1,2,3,4,5} //slice of float64 elements
x := array[0:5]
fmt.Println(x)

   Normally we switch ON value of a variable but Golang allows you to switch ON type also.
var a [10]int --> equivalent as a[0:10], a[:10], a[0:], a[:]

   You can do slicing on string because string is slice of bytes.
   Remember --> String is made up of runes (Uni Code). A rune is Unicode UTF Code point (for 'A'-65',
   'a-97'). A Unicode code point is 1 to 4 bytes.
   
   So, strings are made up of runes, runes are made up of bytes, so strings are made up of bytes.
   A string is bunch of bytes, slice of bytes.
   You can access slice elements by using range in for loop.
   There are built in functions to calculate length by using len(slice), capacity by using cap(slice),
   append one slice to another by using append(slice) and copy(slice) to copy one slice to other.
   We can create slice in three ways:
     * Using var
     * Shorthand Notation
     * make( )

func main() {
    elements := []int{3, 5, 2, 6, 2}
    arrays := make([]int, 0, 3) //Creating slice with make( )
    for n := range elements {
        fmt.Println("Elements", n)
    }

    for i := 0; i < 80; i++ {
        arrays = append(arrays, i) // to append i elements to slice
        fmt.Println("Len:", len(arrays), "Capacity:", cap(arrays), "Value: ", arrays[i])
    }
}

   Here in above program you can see how length and capacity increases when it exceeds size limits. The
   capacity will be doubled when size exceeds the capacity.
   If we think that our slice might grow ,we can set capacity which is larger than length. This gives
   slice room to grow without creating new array every time our slice grows.
   We also can create slice inside another slices like -
sliceOne := make([][]int,0) //slice of slice of int

main.go
package main
import (
    "fmt"
)

func main() {
    primes := []int{1, 3, 5, 7, 9, 11}
    fmt.Printf("%T\n", primes) //type []int
    fmt.Println(primes) //[1 3 5 7 9 11]
    fmt.Println(primes[2:4]) // [5 7] 3rd 4th element
    
    var info []byte //Slice using var
    elements := []int{3, 5, 2, 6, 2} //Slice using shorthand notation
    arrays := make([]int, 0, 3) //Creating slice with make( )
    //String slice
    str := []string{"Amazing", "Brilliant", "Good One", "Excellent"}
    
    for n := range elements {
        fmt.Println("Elements", n)
    }
    
    for i := 0; i < 80; i++ {
        arrays = append(arrays, i) //append i elements to arrays
        fmt.Println("Len:", len(arrays), "Capacity:",
        cap(arrays), "Value: ", arrays[i])
    }

    fmt.Println("Info elements:", info)
    for i, vals := range str {
        fmt.Println("Values", i, vals)
    }
    
    //Slice of Slice
    OutIn := make([][]int, 0, 3)
    
    for i := 0; i < 3; i++ {
        out := make([]int, 0, 4)
        for j := 0; j < 4; j++ {
            out = append(out, j)
        }
        OutIn = append(OutIn, out)
    }
    fmt.Println(OutIn)
}

Data Structures : Map
   One of the most important and useful data structure in computer science is Hash Table. Golang
   provides map data structure which implements hashtable. An unique key value pair like dictionary is
   used to lookup values based on the key.
map [keyType] valueType

   Map is represented by keyword map having key type in []and value types.
   The default value of map is nil as it is reference type like pointer or slice and for nil key and
   value pairs are 0.
   This includes unordered pairs. Maps are like literals but unique keys are required.
var dictionary map[string]int //map using var
dictionary["Zero"]=1
fmt.Println(dictionary["Zero"]) //Accessing value using key

   Here map name is dictionary having key value pairs of string & int type.
   The values are accessed using key values. The maps can be created by using make( ) also which is more
   effective to use.
dictionary := make(map[string]int) //map using make()

   The make() creates a hash data structure and return map value pointed by key. Go provides familiar
   syntax to work with map data structure.
   The functions provided are len(map) and delete(mapName,key)
   
func main() {
    var details = map[int]string{101: "Jordan", 102: "Roger", 103: "Rafel"} //using var
    fmt.Println(details)
    fmt.Println(details[102])
    countries := make(map[string]string) //Shorthand and make
    countries["US"] = "United States"
    countries["IND"] = "India"
    fmt.Println(countries)
}

   Comma OK idiom : If we are looking for value related to particular key then map returns two values:
   one value if found and value that indicates success or failure(not present). We call this comma OK
   idiom.
func main() {
    countries := make(map[string]string)
    countries["US"] = "United States"
    countries["IND"] = "India"
    if val, ok := countries["IND"] ; ok { //comma ok idiom
        fmt.Println("Value", val, "is present")
        fmt.Println(ok) //it will return true as ok is bool type
    }
}

   Range : Range is used to iterate over the slice and map along with for loop. When range is used with
   slice it returns two values- 1st one is index and 2nd one is copy of the element at that index.
   
func main() {
countries := make(map[string]string)
    countries["US"] = "United States"
    countries["IND"] = "India"
    for country, capital := range countries {
        fmt.Println(country, "-->", capital)
    }
}

<main.go>
package main
import (
    "fmt"
)
func main() {
    var details = map[int]string{101: "Jordan", 102: "Roger", 103: "Rafel"}
    fmt.Println(details)
    fmt.Println(details[102]) //Accessing value based on keys
    countries := make(map[string]string) //Shorthand and make
    countries["US"] = "United States"
    countries["IND"] = "India"
    countries["UK"] = "United Kingdom"
    fmt.Println(countries)
    
    capitals := map[string]string{ //Shorthand composite literal
        "India": "Delhi",
        "US": "Washington"}
        
    capitals["UK"] = "Great Britian" //Adding an entry
    capitals["NZ"] = "Wellington"
    capitals["UK"] = "London" //Updating entry
    fmt.Println(capitals, " of length", len(capitals)) //len() for Length
    delete(capitals, "NZ") //deleting entry
    fmt.Println(capitals)
    
    //Comma OK
    if value, present := capitals["US"]; present {
        fmt.Println("Value", value, "is present")
        fmt.Println("Status:", present)
    }
    
    for country, capital := range countries {
        fmt.Println(country, "-->", capital)
    }
    
    //map inside map
    CountryInfo := map[string]map[string]int {
        "INDIA": {"IN": 91},
        "United States of America": {"US": 1}, //always give the,after last element
    }
    
    for key, val := range CountryInfo {
        fmt.Println(key, "--->", val)
    }
}

Data Structure - Struct
     * Encapsulation --> state ["fields"] behaviour ["methods"] export / unexported
     * Reusability --> Inheritance ["Embedded Types"]
     * Polymorphism --> Interfaces
     * Overriding --> Promotion

   Golang doesn't have keyword 'Class' but it has 'struct' which is contains named collection of
   fields/properties. Struct is also there in 'C' language.

Struct -->

     * user defined type
     * we declare the type
     * the type has fields
     * the type can also have "tags"
     * the type has an underlying type
     * in this case, underlying type is struct
     * we declare variables of the type
     * we initialize those variables
     * initialize with specific value or with default values.

   In some object oriented languages methods are composed within struct or class
Class Animal{
    public void eat() {
        // ...
    } //Method defined in the class itself
}

   But in Golang, they are 'associated' with struct.
type Animal struct{ }
func (e Animal ) eat () {
    // ...
} //Methods defined outside but works on same struct

   A struct is defined by using type and struct keyword along with meaningful name
type House struct {}
type Car struct {}
type #Mobile struct {} //invalid

   Here type defines new type followed by name of struct and then struct keyword
   Example -
type Mobile struct {
    brand string
    model string
    price int
}

   We can create instance of our struct Mobile in many ways like
var mob Mobile

   This will create local variable mob and sets default value to its fields (0 for int, " " for string,
   0.0 for float)
mob := new(Mobile)

   It will allocate memory to all fields by setting default values and returning pointer to it
   (*Mobile). More often we need to give values to each of the fields. We can do this in two ways:
mob := Mobile{brand:"Samsung", model:"Galaxy", price:24500}

   OR
mob := Mobile {"Samsung, Galaxy, 24500"}

Fields -->
   We need to define meaningful name & type for fields or properties. We can initialize fields with its
   value or can keep blank so it will use default value.
   We have to access the struct fields with ". (dot)" only.

Accessibility and Visibility of struct and variables

   There is no concept like public, private, protected for the visibility purpose in Golang. As Golang
   is simple, if the first letter of the struct name or variable name is capital then it is visible
   outside that package.
type Mobile struct{ //this struct can be exported
    brand string //not exported
    Model string //exported
}

Methods
   Go supports methods to define struct.
func (receiverName receiverType) functionName(arguments) returnType

   In between the keyword func and functionName, we've added the receiver. "Receiver" is like
   parameter-it has its name and type, and by creating this we have to call the function using "."
   operator.
   You cannot declare a method with a receiver whose type is defined in another package.

Sample Code
func (mob *Mobile) show () string { //func associated with Mobile
    mob.brand = "Xiomi"
    return mob.brand
}

..........
var mob Mobile
fmt.Println(mob.show())

   Methods having pointer receivers can modify the value to which the receiver points.
   We can define method on any type defined in struct as well as from same package but you cannot define
   method on type from another package.
main.go
package main
import (
    "fmt"
)

type width int //user defined type
type Mobile struct {
    brand string
    model string
    price int
}

func (mob Mobile) display() string { //func associated with Mobile
    mob.brand = "Xiomi"
    return mob.brand
}

func (mob *Mobile) show() string { //func associated with Mobile
    mob.brand = "Xiomi"
    return mob.brand
}

func main() {
    var height width
    fmt.Println(height)
    m := Mobile{}
    fmt.Println(m) //Default values inside struct{" " 0}
    var mob Mobile //Instance creation using var
    fmt.Println(mob)
    mobs := new(Mobile)
    fmt.Println(mobs)
    phone := Mobile{"Samsung", "Galaxy", 24500} //Struct initialization
    fmt.Println("Before Change:", phone)
    fmt.Println("Function Call", phone.display()) // Xiomi
    fmt.Println("After Change:", phone) //still old values are coming
    {"Samsung","Galaxy",24500}
    fmt.Println("Function Call:", phone.show()) //calling show()
    fmt.Println("After Change:", phone) //Here changed values will reflect
}

Type Aliasing -

   We can create aliases for the type that you want to use.
<main.go>
package main

import ("fmt" "strings")

type s string

func (myStr s) Upper() string {
    return strings.ToUpper(string(myStr))
}

func main() {
    fmt.Println(s("hello").Upper())
}

   We can also attach methods to the types. See the "time" package having type Duration -
   [https://golang.org/pkg/time/#Duration]

Embedded Types -
   A struct's properties/fields usually represent has-a relationship like inheritance. Suppose we have a
   struct person.
type Person struct {
    Name string
}

func (per *Person) speak () {
    fmt.Println("Hello, I'm", per.Name)
}

   And now if we want to create a new struct. We can do like this -
type Mobile struct {
    Person //Embedded type
    Model string
}

   So, Go supports relationship like this by using embedded type, also known as anonymous fields.
   Here, we are using type Person by embedding into Mobile. Now to access the struct Person fields we
   can use type name.
mob := new(Mobile)
mob.Person.speak( )

Promotion -
   Embedding is the composition not inheritance, but Go supports something called "promotion" where the
   fields and methods of the embedded type becomes available to the embedding type.
   This is something like inheritance but actually not inheritance.
<main.go>
package main

import (
    "Fmt"
)

type Person struct {
    FirstName string
    LastName string
    Age int
}

func (per *Person) show() {
    fmt.Println(per.FirstName, "", per.LastName, "", per.Age)
}

func (cust *Customer) show() { //method overriding based on receiver
    fmt.Println(cust.ContactNo)
}

type Customer struct {
    Person //embedded type
    ContactNo int
}

func main() {
    cust := Customer{
        Person: Person {
            "John",
            "Matthew",
            25,
        },
    ContactNo: 9965,
    }
    
    cust.Person.show()
    cust.show()
}

   Go automatically handles conversion between values and pointers for method calls. You may want to use
   a pointer receiver type to avoid copying method calls.

Struct Pointer
   We can use struct pointer to access struct fields -
mob := &Mobile {"Lenovo","A6","6700"}
fmt.Println(mob.brand, mob.model, mob.price)

   Well, we have covered some of the major Data Strucutres for Golang in this chapter. In the [**1]Part
   II of this chapter, we will dive deeper and explore some more Golang Data Structures. Make sure you
   check it out!


---
[**1]
https://staging.mindbowser.com/golang-data-structures-2/

https://staging.mindbowser.com/golang-data-structures-2/

Go Data Structures

   As we have explored major Data Structures in Part I of  Fifth Chapter,  let's dive deeper in Part II -

JSON
   JSON(JavaScript Object Notation) is simple text based data interchanging format. Basically we use
   structs for JSON for putting and receiving the data. It is lightweight and gives faster performance
   to access the data

Encoding -
     * Marshal --> to encode GO values to JSON in string format
     * Unmarshal --> to decode JSON data to GO values
     * Encoding --> same as Marshal but in streams
     * Decoding --> same as unmarshal but from streams

   Go has built-in support for JSON encoding by providing functions in "json/encoding" package.

Marshalling
   Marshalling converts the [70]Golang object to JSON encoding into strings. Golang has provided
   marshal() function for this -
func Marshal( v interface {}) ([]byte,error)

   This function will convert the given data structure into JSON in []byte format which we need to
   convert into string.
   Example - Given data structure Person
   
type Person struct {
    Name string
    Address string
    age int /* this field will not be converted into JSON as
         should start with capital letter */
}

   Create an instance of Person
per:=Person{"George","United Kingdom",25}

   Now, we can marshal encoded JSON using marshal( ) function.But dont forget to import the
   "encoding/json" package.
B, err := json.Marshal(per)

   If marshalling happens, then err will be nil and b will be [] byte containing JSON data like below.
b == []byte {`{"Name":"George","Address":"United Kingdom"}`}

   Here, as per above struct age field will not come because it is not exported which is mandatory for
   all fields.
   Now, we need to convert this []byte to string. So do the type casting
string(b)

   Now, JSON will be like {"Name":"George","Address":"United Kingdom"}
   Points:
     * All fields should start with capital letter so that they will be exported
     * JSON objects only support strings as keys; if you want to encode map
       type to JSON then it must be in map[string] T
     * There is no way for encoding of channels, function types into JSON
     * Cyclic data structures are not supported
     * Pointers are dereferenced before encoded into JSON

Unmarshalling
   Unmarshalling converts the JSON data to GO objects. Golang has provided unmarshal( ) function for
   this -
func Unmarshal(data []byte,v interface{ })

   Here, we specify JSON text as string and converts into []byte slice
   Now, first create the place of that struct type where decoded data will be stored.
var per Person

   Now call json.Unmarshal( ) by passing it a []byte of JSON data and a pointer to per.
err := json.Unmarshal(b,&per)

   If the JSON fits and matches with struct fields, after the call err will be nil and data from b will
   have been stored in the struct m, but non-matched fields will not be decoded
   String keys in JSON must be matched to struct fields.

Tags
   The tags are given to the fields to attach meta information and acquired by using reflection. It is
   used to provide info on how struct field is encoded to or decoded from another format (or stored
   /retrieved from database), but you can use it to store whatever meta-info you want either for another
   package or for your use.
   As we see in the documentation of reflect. StructTag, by convention the value of a tag string is a
   space-separated key:"value" pairs,
   Example -
type User struct{
    Name string ` json:"name" xml:"name" ` //tag in backticks
}

   If you want to send some field value empty then write "omitempty" flag in order to let JSON parser
   know.
type User struct{
    Name string ` json:"name" xml:"name" `
    Age int `json:"omitempty"`
}

   With omitempty JSON value will be { }
   We can use reflection(reflect package) to access the tag values of struct fields. We need to acquire
   the type of struct and then we can give query to fields e.g. Type.Field(i int) /
   Type.FieldbyName(name string)
   This will return value of struct field.
   The commonly used tag keys are -->
     * json --> used by json.encoding package, detailed at json.Marshal()
     * xml --> used by encoding/xml, detailed at xml.Marshal()
     * yaml --> used by gopkg.in/yaml.v2 package, at yaml.Marshal()
     * bson--> used by gobson package, detailed at bson.Marshal()
     * Other - orm, db, gorm, datastore, schema, asn

package main
import (
    "encoding/json"
    "fmt"
)

type person struct {
    Firstname string
    Lastname string
    Age int `json:"Umar"` //tag in backticks
    notexported int //will not be exported
}

func main() {
    p1 := person{"Rob", "Pike", 24, 007}
    bs1, _ := json.Marshal(p1) // Marshalling
    fmt.Println(string(bs1))
    bs := []byte(bs1)
    json.Unmarshal(bs, p1) //Unmarshalling
    fmt.Println(bs)
}

json.go

Encoding
   Encoding works with writer and writing streams of JSON data. The GO has provided below function for
   encoding JSON through writer interface -
func (enc *Encoder) Encode (v interface{ }) error

json.NewEncoder(os.Stdout).Encode(p1)

   If we see the source code, the NewEncoder(w *io.Writer) *Encoder takes writer and returns pointer to
   an Encoder for encoding and os.Stdout are open files pointing to standard input. Stdout is a pointer
   to file and pointer to a file implements  func(f *file ) Write(b []byte) (n int,err error) and that
   means it is implementing this method from Writer interface. (Polymorphism)

package main
import (
    "encoding/json"
    "fmt"
    "os"
)

type person struct {
    Name string
    Age int
}

func main() {
    p1 := person{"George", 23}
    json.NewEncoder(os.Stdout).Encode(p1) /* Encoding through Streams */
    fmt.Println(p1.Name, "--", p1.Age)
}

Decoding
   Decoding works with reader and reading streams of JSON data. The GO has provided below function for
   encoding JSON through writer interface -
func (dec *Decoder) Decode (v interface{ }) error

   NewReader( ) will return a reader and give it to NewDecoder( ) so that it will decode the JSON.
json.NewDecoder(reader).Decode(&p1)

package main

import (
    "encoding/json"
    "fmt"
    "strings"
)

type person struct {
    Name string
    Age int
    address int //this field will not be exported
}

func main() {
    var p1 person
    reader := strings.NewReader(`{"Name":"James", "Age":24, "address":"New York"}`) // JSON
    json.NewDecoder(reader).Decode(&p1)
    fmt.Println(p1.Name)
    fmt.Println(p1.Age)
    fmt.Println(p1.address)
}

Strings
   Golang's standard library has provided built-in functions to deal with strings in the "strings"
   package.
   "Computer" --> This string has 8 runes. So no need of counting for finding its length as there is
   built-in function len( ) for calculating its length.
   In Golang, we use len( ) for slice, array, map for measuring their length. So this makes language
   more clear and understandable.
   
func main(){
    var s string="Computer"
    fmt.Println(len(s))
 }

   More functions - https://golang.org/pkg/strings/

package main

import "fmt"
import s "strings" //we can also give prefixes and use
import "strings" //also we can use normally

var b = fmt.Println //prefix for fmt.Println()
func main() {
    var str string = "Computer-Security"
    fmt.Println(len(str)) //length: 18
    fmt.Println("Contains:", s.Contains(str, "ecu")) //true
    fmt.Println("Compare:", s.Compare(str, "Computer Security"))
    
    /*return 0 if a==b,-1 if a<b,+1 if a>b*/
    fmt.Println("Count", strings.Count(str, "e")) //returns 2
    b("Index:", s.Index(str, "m")) // returns 2
    b("ToLower", strings.ToLower(str))
    b("ToUpper", strings.ToUpper(str))
    b("Replace", s.Replace(str, "e", "i", 2)) /* replace e by i for 2 Occurrences */
    b("Split", strings.Split(str, "-"))
}

Interface
   An interface is an abstract type. It doesn't expose the representation or internal structure of its
   values, or set of basic operation they support; it reveals only some of their methods. When you have
   value of an interface type, you don't know only what it is; you only know what it can do.
   Interfaces are named collection of method signatures only (like java). To implement an interfaces in
   Go, we need to implement all the methods of that interface.
   Like a struct we can create interface by specifying type keyword followed by its name and keyword
   interface that will contain methods.
type interface_name interface {
    /* method signature (one or more method sets) */
}

   Example -
type shape interface{
    area( ) float64 //method
} /* interface creation with method declaration */

   Now anything that has same method signature implements interface like -
type square struct {
    side float64
}

func (sq square) area( ) float64 { //area( ) associated with square struct
    Return sq.side * sq.side
}

   In above sample example, area( ) associated with square struct has same signature like shape
   interface area( ) that means shape interface is implemented by square struct.
   See the below example,
<shapeI.go>
package IShape

type Shape interface {
    Area() float64
}

<CircleI.go>
package SCircle

import ("math")

type Circle struct {
    Radius float64
}

func (c Circle) Area() float64 { //Here, Area( )is implemented
    return math.Pi * c.Radius * c.Radius
}

<SquareI.go>
package SSquare

type Square struct {
    Side float64
}

func (s Square) Area() float64 { //Here, Area( )is implemented
    return s.Side * s.Side
}

<main.go>
package main

import (
    "fmt"
    "interface/basic/IShape" /* These are packages I've created */
    "interface/basic/SCircle"
    "interface/basic/SSquare"
)

func info(s IShape.Shape) { /* Now here info( ) will accept dynamically
    any of type of square or circle because
    Shape is implemented by both of them*/
    fmt.Println(s)
    fmt.Println(s.Area())
}

func main() {
    s := SSquare.Square{10}
    info(s) /* Here, I've passed square type */
    c := SCircle.Circle{7}
    info(c) /* Here, I've passed circle type */
}

   This is what we call Polymorphism. Polymorphism is ability to write code that take on different
   behaviour through its implementation of types.
   When you are passing an interface value,then there is no guarantee whether interface type is or isn't
   pointer. In the above example, we created function based on value receiver and we passed associated
   values of square or circle to it.
   Just take method with pointer receiver.
func (c *Circle) Area() float64 {
}

   Now if we try to pass interface value to it, it will give an error
   Circle does not implement Shape(Area method requires pointer receiver). So for the pointer receivers
   we need to pass the *Circle pointer to the Shape instead of a Circle value, by using new(Circle) or
   &Circle.

Remember :
   Interfaces are types that just declare the behavior. This behavior is never implemented by interface
   directly, but instead by user defined types; values of user defined type can be assigned to values &
   interface type. This assignment stores values of user defined type into interface value. - Bill
   Kenedy
   Interfaces can also be used as fields.
type struct MultiShape {
    shapes []Shape
}

   If you see "bufio" and "ioutil" package in Go's language specification, you'll get something like
   this -
func NewScanner(r io.Reader) *Scanner

--> bufio.NewScanner(res.Body)

   --> In the Body interface, ReadCloser interface is implemented which again implements Reader interface
   that means Indirectly we are dealing with the Reader.
func ReadAll(r io.Reader) ([]byte, error)

--> ioutil.ReadAll(res.Body)

   --> Same as above
func NewReader(rd io.Reader) *Reader

   We need to define meaningful name & type for fields or properties. We can initialize fields with its
   value or can keep blank so it will use default value.
   In other languages (like Java), we have to explicitly say that this interface is implemented by
   other. But in Go interfaces are implemented implicitly so you don't need to say like that you just
   need to use the correct method signature to use from interface.
type ReaderWriter {
    Reader
    Writer
} /* This is called embedding of interfaces */

   A type satisfies an interface if it possesses all methods that interface requires. Conceptually,
   value of interface type or interface value has two components - A concrete type and concrete value.

Sort Package
     * type Interface

   "Sort" package has interface called type Interface. Sort package provides sorting of any sequence
   according to ordering function. Go's Sort function assumes nothing about representation of sequence.
   Instead, it uses sort.interface for specifying sorting sequence and sorting algorithm.
   An in-place algorithm needs 3 things - length of sequence for comparing two elements and way to swap
   two elements- so it contains 3 methods.
package sort
type Interface interface{
    Len( ) int
    Less(i,j int) bool
    Swap(i,j int) /* Method sets */
}

   So if you want to use sorting then we need to implement these methods from sort.Interface package and
   then apply Sort( ) on it.
   Package sort provided primitives for sorting slices and user defined collection.
<main.go>
package main

import (
    "fmt"
    "sort"
)

type Person struct {
    Name string
    Age int
}

type ByAge []Person /*This type of []Person has implemented sort.Interface interface*/

func (b ByAge) Len() int {
    return len(b)
}

func (b ByAge) Swap(i, j int) {
    b[i], b[j] = b[j], b[i]
}

func (b ByAge) Less(i, j int) bool {
    return b[i].Age > b[j].Age
}

func main() {
    persons := []Person{
        {"George", 34},
        {"Robin", 43},
        {"Stuart", 23}
    }
    
    peoples := []string{"Keyboard", "mouse", "Computer"}
    rev := []string{"Book", "Literature", "Novel"}
    ints := []int{54, 76, 33, 12, 54, 76}
    fmt.Println("Before Sort:", persons)
    fmt.Println("Before Sort:", peoples)
    sort.Strings(peoples) /* Sorting string slice */
    sort.Sort(sort.Reverse(sort.StringSlice(rev)))
    fmt.Println("Reversed String Slice", rev)
    sort.Sort(sort.IntSlice(ints))
    fmt.Println("Sorted Integer value", ints)
    fmt.Println("After Sort:", peoples)
    sort.Sort(ByAge(persons))
    fmt.Println("After Sort:", persons)
}

Empty Interface
   Empty interface has zero methods. It is like Object class (which is superclass of all classes in java
   and accept any object). Similar to this, empty interface accepts any interface to itself.
   An empty interface can hold any hold values of any type.
   Empty interfaces are used by code that handles values of any type.
   For example, fmt.Println(a ...interface{ }) (n int,err error) takes any type number of arguments of
   type interface{ }.
main.go
package main

import (
    "fmt"
)

type vehicles interface{ } //Empty interface
type vehicle struct {
    speed string
    color string
}

type car struct {
    vehicle
    wheels int
    doors int
}

type plane struct {
    vehicle
    jet bool
}

type boat struct {
    vehicle
    capacity int
}

func specifications(veh interface{}) { /* accepting anything*/
    fmt.Println(veh)
}

func main() {
    audiR8 := car{vehicle{"240 KMPH", "White"}, 4, 4}
    benz := car{vehicle{"250 KMPH", "Black"}, 4, 4}
    boeing := plane{vehicle{"500 KMPH", "White"}, true}
    sanger := boat{vehicle{"350 KMPH", "Saffron"}, 10000}
    travelling := []vehicles{audiR8, benz, boeing, sanger}
    for key, value := range travelling {
        fmt.Println(key, "-", value)
    }
    specifications(audiR8)
    specifications(benz)
    specifications(boeing)
    specifications(sanger)
}

Conversion vs Assertion
   Conversion is converting to one type from another type like int to float. Assertion is different from
   conversion.
   Conversion process deals with two concepts like -
     * Widening --> Converting from Lower to Higher data type
     * Narrowing --> Converting from Higher to Lower data type

   Example -
var x=15 //int type
var y=15.45
fmt.Println(float(x)) --> 15.00
fmt.Println(int(y)) --> 15

var x rune='a'
var y int32='b'
fmt.Println(x)
fmt.Println(y)
fmt.Println(string(x)) -->a
fmt.Println(string(y)) -->b

   Now come to assertion, sometimes you want to know the exact type of interface variable, in this case
   you have to use type assertion.
interface_variable.(type)


package main

import "fmt"
func display(v interface{ }) {
    fmt.Printf("Value is:%v",v.(int)) /*assert or test the correct va*/
}

func main(){
    display(10)
}

   O/P: 10
   But here, if we put v.(string) then we will get running panic error
   panic: interface conversion: interface {} is int, not string
   goroutine 1 [running]:
   main.display(0x497e00, 0xc0420361c0)
   For this, assertion actually returns boolean value to tell whether this operation holds or not

 package main
 
import "fmt"

func display(v interface{ }) {
    if v,ok:=v.(string);ok {
        fmt.Printf("Value is:%v",v.(int)) /*assert/test the correct val*/
    }else{
    fmt.Println("Value is not string")
    }
}

func main(){
    display(10)
}

   O/P: Value is not string
   This time o/p will be "value is not string" instead of getting panic error. We can also use type
   switch


---
