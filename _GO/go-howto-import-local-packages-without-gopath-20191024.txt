filename: go_howto-import-local-packages-without-gopath_20191024.txt
https://stackoverflow.com/questions/17539407/how-to-import-local-packages-without-gopath/17539525#17539525

How to import local packages without gopath

   I've used GOPATH but for this current issue I'm facing it does not help. I want to be able to create
   packages that are specific to a project:
myproject/
+-- binary1.go
+-- binary2.go
+-- package1.go
+-- package2.go

   I tried multiple ways but how do I get package1.go to work in the binary1.go or the binary2.go and so
   on?

   For example; I want to be able to import "package1" and then be able to run go build binary1.go and
   everything works fine without the error being thrown that the package cannot be found on GOROOT or
   GOPATH. The reason why I need this kind of functionality is for large scale projects; I do not want
   to have to reference multiple other packages or keep them in one large file.

***
       You're supposed to put the source files for each binary into its own directory. - fuz Jul 9
       '13 at 6:41
     * All the .go files in a single directory are part of the same package, and you don't need to
       import files in the same package (i.e., the same directory). You mentioned working outside of
       GOPATH, which is one of the capabilities of the new Go modules system.
       This [**1][https://stackoverflow.com/a/57314494/11210494]answer covers
       module structure, importing local packages, arranging packages within a module, whether or not to
       have multiple modules in single repository, etc. - typical182 Aug 2 at 20:51
     * And this behavior is ok with everyone? That you basically can't import your local sub-packages
       unless you specify the entire git/repo/to/my/project path? I just don't see the reason why anyone
       would want this behavior. What if you move your project to another location (i.e. Docker image),
       you need to alter all paths again? I'm looking for answers why this is so complicated.
       - milosmns Aug 18 at 14:55

***
   Go dependency management summary:
     * vgo if your go version is: x >= go 1.11
     * dep or vendor if your go version is: go 1.6 >= x < go 1.11
     * Manually if your go version is: x < go 1.6

   Edit 3: Go 1.11 has a feature vgo which will replace dep.

   To use vgo, see Modules documentation. TLDR below:
export GO111MODULE=on
go mod init
go mod vendor # if you have vendor/ folder, will automatically integrate
go build

   This method creates a file called go.mod in your projects directory. You can then build your project
   with go build. If GO111MODULE=auto is set, then your project cannot be in $GOPATH.

   Edit 2: The vendoring method is still valid and works without issue. vendor is largely a manual
   process, because of this dep and vgo were created.

   Edit 1: While my old way works it's not longer the "correct" way to do it. You should be using vendor
   capabilities, vgo, or dep (for now) that are enabled by default in Go 1.6; see. You basically add
   your "external" or "dependent" packages within a vendor directory; upon compilation the compiler will
   use these packages first.
 
   Found. I was able import local package with GOPATH by creating a subfolder of package1 and then
   importing with import "./package1" in binary1.go and binary2.go scripts like this :

   binary1.go
...
import (
    "./package1"
      )
...

   So my current directory structure looks like this:
myproject/
+-- binary1.go
+-- binary2.go
+-- package1/
|   +-- package1.go
+-- package2.go

   I should also note that relative paths (at least in go 1.5) also work; for example:
import "../packageX"

***
       That works ok until you have two subfolders with one referring to another. For example, if
       package2 was also a subfolder and it needed package1, the system breaks. - Carl Apr 4 '14 at
       1:52
     * 7
       import "../package1" - Felix Rabe Oct 14 '14 at 11:57
     * 11
       Relative import paths are a bad idea. - Dave C Apr 1 '15 at 15:59
     * 1
       if #golang provides 'namespace', I can agree with you that 'relative import path' or
       'sub-packages' are a bad ideas'. - mission.liao Sep 9 '15 at 11:15
     * 1
       Function name should begin with Capitilized keyword - kokemomuke Sep 8 '16 at 14:11

***
   There's no such thing as "local package". The organization of packages on a disk is orthogonal to any
   parent/child relations of packages. The only real hierarchy formed by packages is the dependency
   tree, which in the general case does not reflect the directory tree.

   Just use
import "myproject/packageN"

   and don't fight the build system for no good reason. Saving a dozen of characters per import in any
   non trivial program is not a good reason, because, for example, projects with relative import paths
   are not go-gettable.

   The concept of import paths have some important properties:
     * Import paths can be be globally unique.
     * In conjunction with GOPATH, import path can be translated unambiguously to a directory path.
     * Any directory path under GOPATH can be unambiguously translated to an import path.

   All of the above is ruined by using relative import paths. Do not do it.

   PS: There are few places in the legacy code in Go compiler tests which use relative imports. ATM,
   this is the only reason why relative imports are supported at all.

***
       I recommend taking a look at this intro video for a better understanding of packages and the
       GOPATH. youtube.com/watch?v=XCsL89YtqCs - Joshua Pinter Apr 8 '14 at 21:47
     * 7
       I think this is bad advise. If you end up using gopkg.in for versioning, for example, you're out
       of luck with absolute import paths for your "mini" pakages, as described above. Either you break
       the source repo or the versioned one becomes useless. - Greg Nov 21 '14 at 4:20
     * import "myproject/packageN". myproject is the folder name that holds my project?
       - securecurve Mar 9 '16 at 11:07
     * That's completely wrong, how do I use it with private repositories now? - agilob Jun 28 '18
       at 14:43

***
   Perhaps you're trying to modularize your package. I'm assuming that package1 and package2 are, in a
   way, part of the same package but for readability you're splitting those into multiple files.

   If the previous case was yours, you could use the same package name into those multiples files and it
   will be like if there were the same file.

   This is an example:

   add.go
package math

func add(n1, n2 int) int {
   return n1 + n2
}

   subtract.go
   
package math

func subtract(n1, n2 int) int {
    return n1 - n2
}

   donothing.go
   
package math

func donothing(n1, n2 int) int {
    s := add(n1, n2)
    s = subtract(n1, n2)
    return s
}

   I am not a Go expert and this is my first post in StackOveflow, so if you have some advice it will be
   well received.

***
   I have a similar problem and the solution I am currently using uses Go 1.11 modules. I have the
   following structure
- projects
  - go.mod
  - go.sum
  - project1
    - main.go
  - project2
    - main.go
  - package1
    - lib.go
  - package2
    - lib.go

   And I am able to import package1 and package2 from project1 and project2 by using
import (
    "projects/package1"
    "projects/package2"
)

   After running go mod init projects. I can use go build from project1 and project2 directories or I
   can do go build -o project1/exe project1/*.go from the projects directory.

   The downside of this method is that all your projects end up sharing the same dependency list in
   go.mod. I am still looking for a solution to this problem, but it looks like it might be fundamental.

***
   To add a "local" package to your project, add a folder (for example "package_name"). And put your
   implementation files in that folder.
src/github.com/GithubUser/myproject/
 +-- main.go
 +---package_name
       +-- whatever_name1.go
       +-- whatever_name2.go

   In your package main do this:
import "github.com/GithubUser/myproject/package_name"

   Where package_name is the folder name and it must match the package name used in files
   whatever_name1.go and whatever_name2.go. In other words all files with a sub-directory should be of
   the same package.

   You can further nest more subdirectories as long as you specify the whole path to the parent folder
   in the import.

***
       Doesnt work with private repositories. - agilob Jun 28 '18 at 14:43
     * 2
       This is a fine suggestion, except that during any kernel panic the stack trace that's dumped from
       the binary shows the github.com path for example, not always the most desirable behavior. There
       are flags to suppress this, but it shouldn't be necessary just to achieve simple package
       organization, and I've found that it does fail on occasion. - Kenny Powers Jul 2 '18 at 0:01


---
[**1]
https://stackoverflow.com/a/57314494/11210494

Organize local code in packages using Go modules

   I can not find a way to factor out some code from main.go into a local package when using Go modules
   (go version >= 1.11) outside of $GOPATH.

   I am not importing any external dependencies that need to be included into go.mod, I am just trying
   to organize locally the source code of this Go module.

   The file main.go:
package main

// this import does not work
import "./stuff"

func main() {
    stuff.PrintBaz()
}

   The file ./stuff/bar.go (pretending to be a local package):
package stuff

import "log"

type Bar struct {
    Baz int
}

func PrintBaz() {
    baz := Bar{42}
    log.Printf("Bar struct: %v", baz)
}

   The file go.mod (command go mod init foo):
module foo

go 1.12

   When executing go run main.go:
     * If I import "./stuff", then I see build command-line-arguments: cannot find module for path
       _/home/<PATH_TO>/fooprj/stuff.
     * If I import "stuff", then I see build command-line-arguments: cannot load stuff: cannot find
       module providing package stuff.
     * If I import stuff "./stuff" with a package alias, then I see again: build command-line-arguments:
       cannot find module for path _/home/<PATH_TO>/fooprj/stuff.

   I can not find a way to make local packages work with go modules.
     * What's wrong with the code above?
     * How can I import local packages into other Go code inside a project defined with Go modules (file
       go.mod)?

***
   First you have to choose a name for your project and write it to go.mod file. This name belongs to
   root directory of the project. Each new package you create must be located inside it's own
   subdirectory and its name should match directory name.

   go.mod:
module myprojectname

   or (preferred way, see @typical182's comment for details)
module github.com/myname/myproject

   Then import your project's packages like:
import myprojectname/stuff

   or
import github.com/myname/myproject/stuff

   Files of package stuff should be located inside project's stuff directory. You name these files as
   you like.

   Also it's possible to create deeper project structure. For instance, you decided to separate source
   code files from other ones (like app configs, docker files, static files, etc...). Let's move stuff
   directory inside pkg, every go file inside pkg/stuff still have stuff package name. To import stuff
   package just write:
import myprojectname/pkg/stuff

   Nothing stops you from creating more levels in the hierarchy like
   github.com/myuser/myproject/pkg/db/provider/postgresql, where:
     * github.com/myuser/myproject - project name.
     * postgresql - package name.
     * pkg/db/provider/postgresql - path to the package relative to project's root.

   You can read more about go modules here: https://github.com/golang/go/wiki/Modules

   Check out this repository to get useful information about various patterns used in project
   organizing: https://github.com/golang-standards/project-layout If you go inside pkg directory you
   will find out which open source projects use pkg directory in their structure.

***
     * Do you normally have your go.mod, go.sum, and main.go files in the root directory of your repo?
       - dmigo Jun 20 at 14:16
     * go.mod and go.sum - yes. main.go is entry point to your program. If you have single entry point
       just place it in root directory, otherwise check cmd directory README.md file in
       github.com/golang-standards/project-layout - Vadim Ashikhman Jun 21 at 20:54
     * Is the layout provided in the repo still way to go? Don't go modules change that? - dmigo Jun
       25 at 16:21
     * Go modules do not define project layout structure, you can use go modules with any layout of your
       choice. You can read more about go modules here github.com/golang/go/wiki/Modules#modules
       - Vadim Ashikhman Jun 26 at 10:43
     * 1
       Defining your module in the go.mod as module myprojectname (instead of module
       github.com/myname/myproject) is a bit dangerous, and will most likely fail later in a way that
       surprises you. It is almost always better to use the full path including a hostname of where you
       intend to publish it eventually, or pick as hostname as if it will be published someday (unless
       you are doing something throwaway like a quick test that starts go mod init tempmod and you
       intend to delete the module soon). Some more details in this answer. - typical182 Aug 1
       at 17:51

***
Module structure

   The most common and easiest approach is:
     * Use a single go.mod per repository, and
     * Place the single go.mod file in the repository root, and
     * Use the repository name as the module path declared in the module line in the go.mod
      + (If you are using a vanity url, then you would use the vanity url instead of the
        repository name in your go.mod).

   For example, if your repo is github.com/my/repo, then you would place a single go.mod in the repo
   root, with the first line reading module github.com/my/repo. That can be created by cd'ing to the
   repo root and running go mod init github.com/my/repo.

   Following this helps you stay on the happy path with modules, and it avoids multiple subtleties.

   Russ Cox commented in #26664:
     For all but power users, you probably want to adopt the usual convention that one repo = one
     module. It's important for long-term evolution of code storage options that a repo can contain
     multiple modules, but it's almost certainly not something you want to do by default.

   There is much more about multi-module repositories in the "Multi-module Repositories" FAQ section
   on the modules wiki. Those 6 or so FAQs in that section should be read in their entirety by anyone
   considering veering off the recommendation above.

Arranging packages within a module
   Once you have set up your go.mod, you can arrange your packages in directories however you see fit in
   directories underneath the directory containing the go.mod, as well as in the directory with the
   go.mod. Three good articles about how to arrange your code in packages:
     * https://rakyll.org/style-packages/
     * https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1#.ds38va3pp
     * https://www.goinggo.net/2017/02/design-philosophy-on-packaging.html

   Those articles are classics that pre-date the introduction of modules, but the philosophies in them
   still apply to how to arrange your packages within a module.

Importing other packages in the same module

   When importing another package with modules, you always use the full path including the module path.
   This is true even when importing another package in the same module. For example, if a module
   declared its identity in its go.mod as module github.com/my/repo, and you had this organization:
repo/
+-- go.mod      <<<<< Note go.mod is located in repo root
+-- pkg1
|   +-- pkg1.go
+-- pkg2
    +-- pkg1.go

   Then pkg1 would import its peer package as import "github.com/my/repo/pkg2". Note that you cannot use
   relative import paths like import "../pkg2" or import "./subpkg". (This is part of what OP hit above
   with import "./stuff").

Modules vs. repositories vs. packages vs. import paths
   A Go module is a collection of related Go packages that are versioned together as a single unit.
   Modules record precise dependency requirements and create reproducible builds.

   Summarizing the relationship between repositories, modules, and packages:
     * A repository contains one or more Go modules (most often exactly one module in the repository
       root).
     * Each module contains one or more Go packages.
     * Each package consists of one or more Go source files that all reside in a single directory.
     * Go source code:
      + declares its own package with a package foo statement.
      + automatically has access to other Go source code in the same package.
      + imports code from another package via an import path supplied in an import statement such as
        import "github.com/my/repo/pkg1". The import path always starts with the module path of that
        package, regardless of whether that package is in the same module or a different module.


---
