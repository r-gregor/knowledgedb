filename: go_struct-keyword-and-struct-composite-literal-explained_20191128.txt
https://stackoverflow.com/questions/45122905/how-do-struct-and-struct-work-in-go

How do struct{} and struct{}{} work in Go?

   I am wondering what does "struct{}" and "struct{}{}" mean in Go? An example is as follows:
array[index] = struct{}{}

   or
make(map[type]struct{})

***
   struct is a [https://golang.org/ref/spec#Keywords]keyword in Go. It is used to define
   [https://golang.org/ref/spec#Struct_types]struct types, which is a sequence of named elements.

   For example:
type Person struct {
    Name string
    Age  int
}

   The struct{} is a struct type with zero elements. It is often used when no information is to be
   stored. It has the benefit of being 0-sized, so usually no memory is required to store a value of
   type struct{}.

   struct{}{} on the other hand is a [https://golang.org/ref/spec#Composite_literals]composite literal, it
   constructs a value of type struct{}. A composite literal constructs values for types such as structs, arrays,
   maps and slices. Its syntax is the type followed by the elements in braces.
   Since the "empty" struct (struct{}) has no fields, the elements list is also empty:
   
         struct{}  {}
        |  ^     | ^
          type     empty element list

   As an example let's create a "set" in Go. Go does not have a builtin set data structure, but it has a
   builtin map. We can use a map as a set, as a map can only have at most one entry with a given key.
   And since we want to only store keys (elements) in the map, we may choose the map value type to be
   struct{}.

   A map with string elements:
var set map[string]struct{}
// Initialize the set
set = make(map[string]struct{})

// Add some values to the set:
set["red"] = struct{}{}
set["blue"] = struct{}{}

// Check if a value is in the map:
_, ok := set["red"]
fmt.Println("Is red in the map?", ok)
_, ok = set["green"]
fmt.Println("Is green in the map?", ok)

   Output:
Is red in the map? true
Is green in the map? false

   Note that however it may be more convenient to use bool as the value type when creating a set out of
   a map, as the syntax to check if an element is in it is simpler. For details, see
   [**1]How can I create an array that contains unique strings?.

***
   Struct is a go keyword for defining struct types which are just user defined types composed of
   variables of whatever arbitrary type you decide.
type Person struct {
    Name string
    Age  int
}

   Structs can also be empty with Zero elements. However Struct{}{} has a different meaning. This is a
   composite struct literal. It inline defines a struct type and defines an struct and assigns no
   property.
emptyStruct := Struct{} // This is an illegal operation
// you define an inline struct literal with no types
// the same is true for the following

car := struct{
          Speed  int
          Weight float
       }
       
// you define a struct be do now create an instance and assign it to car
// the following however is completely valid

car2 := struct{
          Speed  int
          Weight float
       }{6, 7.1}

//car2 now has a Speed of 6 and Weight of 7.1

   This line here just creates a map of empty struct literals which is perfectly legal.
make(map[type]struct{})

   It is the same as
make(map[type]struct{
        x int
        y int
     })


---
[**1]
https://stackoverflow.com/questions/33207197/how-can-i-create-an-array-that-contains-unique-strings/33207265#33207265

How can I create an array that contains unique strings?

I want to create an array that contains unique strings. How can I do that?

var paths = make([]string, 0)

func main() {
    // Members are added dynamically
    paths = append(paths, "aaa")
    paths = append(paths, "bbb")
    paths = append(paths, "bbb")
    paths = append(paths, "ccc")

    // convert ["aaa", "bbb", "bbb", "ccc"] -> ["aaa", "bbb", "ccc"] 
    // or can I use some class that disallow the same string automaticaly?
}

***
If you want a collection of unique elements, that is the Set data type. Go does not have a set data type, but
you can use a map[string]bool to act as a set.

For a "nice" set, use a map with bool value type (with true values) and exploit the zero value. For a set with
the smallest memory footprint, use a map with struct{} value type as values of struct{} type occupy no memory;
and use the comma-ok idiom to tell if a value is in the set / map.

Here's how the "nice" version of set looks like. Instead of a slice add your elements to a map[string]bool as
the key with a true as the value:

m := make(map[string]bool)

m["aaa"] = true
m["bbb"] = true
m["bbb"] = true
m["ccc"] = true

To check if an element is already in the collection (map), you can simply use an index expression:

exists := m["somevalue"]

This exploits the zero value, that is if the map does not yet contain an element, the zero value of the value
type is returned which is false in case of bool type, properly indicating that the element is not in the
collection.

Elements in a map have no fixed order. If you need to keep the order (e.g. insertion order), then use a slice
(to remember the order) and a map (to tell if an element to be added is new). This is easiest with
a helper add() function:

var m = make(map[string]bool)
var a = []string{}

func main() {
    add("aaa")
    add("bbb")
    add("bbb")
    add("ccc")
}

func add(s string) {
    if m[s] {
        return // Already in the map
    }
    a = append(a, s)
    m[s] = true
}



