filename: go_sorting_maps_20191126.txt
https://groups.google.com/forum/#!topic/golang-nuts/FT7cjmcL7gw

Sort map keys by values

Assuming I have a map[string]int, what's the easiest way to sort the keys by their values?
(In Python I'd do sorted(m, key=lambda k: m[k])).

***
You could make an object that implements sort.Interface that does the usual thing, except swaps both the key
and value in a list.

[https://gist.github.com/1236125]
<code>
package main

import "fmt"
import "sort"

func main() {
    m := map[string]int{
        "One":   1,
        "Two":   2,
        "Three": 3,
        "Ten":   10,
        "Fifty": 50,
    }
    vs := NewValSorter(m)
    fmt.Printf("%v\n", *vs)
    vs.Sort()
    fmt.Printf("%v\n", *vs)
}

type ValSorter struct {
    Keys []string
    Vals []int
}

func NewValSorter(m map[string]int) *ValSorter {
    vs := &ValSorter{
        Keys: make([]string, 0, len(m)),
        Vals: make([]int, 0, len(m)),
    }
    for k, v := range m {
        vs.Keys = append(vs.Keys, k)
        vs.Vals = append(vs.Vals, v)
    }
    return vs
}

func (vs *ValSorter) Sort() {
    sort.Sort(vs)
}

func (vs *ValSorter) Len() int           { return len(vs.Vals) }
func (vs *ValSorter) Less(i, j int) bool { return vs.Vals[i] < vs.Vals[j] }
func (vs *ValSorter) Swap(i, j int) {
    vs.Vals[i], vs.Vals[j] = vs.Vals[j], vs.Vals[i]
    vs.Keys[i], vs.Keys[j] = vs.Keys[j], vs.Keys[i]
}
</code>

Output:
{[Ten Fifty One Three Two] [10 50 1 3 2]}
{[One Two Three Ten Fifty] [1 2 3 10 50]}


***
[Andrew Gerrand] 5+
// A data structure to hold a key/value pair.
type Pair struct {
    Key string
    Value int
}

// A slice of Pairs that implements sort.Interface to sort by Value.
type PairList []Pair
func (p PairList) Swap(i, j int) { p[i], p[j] = p[j], p[i] }
func (p PairList) Len() int { return len(p) }
func (p PairList) Less(i, j int) bool { return p[i].Value < p[j].Value }

// A function to turn a map into a PairList, then sort and return it. 
func sortMapByValue(m map[string]int) PairList {
    p := make(PairList, len(m))
    i := 0
    for k, v := range m {
        p[i] = Pair{k, v}
    }
    sort.Sort(p)
    return p
}

***
Here's what I did recently. Unlike the other solutions proposed, it sorts only the keys. (I used descending
order because I wanted to get the highest-scoring categories on top; if you want ascending order, make Less()
use < instead of >.):

<code>
package main

// sort a map's keys in descending order of its values.

import "sort"

type sortedMap struct {
    m map[string]int
    s []string
}

func (sm *sortedMap) Len() int {
    return len(sm.m)
}

func (sm *sortedMap) Less(i, j int) bool {
    return sm.m[sm.s[i]] > sm.m[sm.s[j]]
}

func (sm *sortedMap) Swap(i, j int) {
    sm.s[i], sm.s[j] = sm.s[j], sm.s[i]
}

func sortedKeys(m map[string]int) []string {
    sm := new(sortedMap)
    sm.m = m
    sm.s = make([]string, len(m))
    i := 0
    for key, _ := range m {
        sm.s[i] = key
        i++
    }
    sort.Sort(sm)
    return sm.s
}
</code>

Note that the sortedMap type is private to this file; it is not intended to be used for long-term storage.

***
I think Andrew Gerrand's solution is the most idiomatic (or at least, it's the one I came up with too :)
Is this still the best way to solve this problem? I love Go, but this seems to be one of those (usually rare)
cases where the Python version is 10x more concise :(

*** 
If you consider Andrew's solution too verbose, here's a short one (of cause not so short as Python).

    var keys := make([]string, 0, len(m))
    for k := range(m) {
    keys := append(keys, k)
    }

    villa.SortF(len(keys),

    func(i, j int)bool { return m[keys[i] < m[keys[j]] },

    func(i, j) { keys[i], keys[j] = keys[j], keys[i] })



villa.SortF is defined in githum.com/daviddengcn/go-villa, you can copy its source out if you don't want to
import it.

***
Even shorter would be:

    keys := make([]string, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
    sort.Strings(keys)


Of course this is key sorting. The OP was concerned with sorting the keys according to the values (essentially
sorting-by-proxy), which is different from what has recently been demonstrated.


---
