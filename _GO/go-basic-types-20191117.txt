filename: go_basic-types_20191117.txt
http://www.golangbootcamp.com/book/types

Chapter 3 Types

3.1 Basic types
bool
string

Numeric types:

uint        either 32 or 64 bits
int         same size as uint
uintptr     an unsigned integer large enough to store the uninterpreted bits of
            a pointer value
uint8       the set of all unsigned  8-bit integers (0 to 255)
uint16      the set of all unsigned 16-bit integers (0 to 65535)
uint32      the set of all unsigned 32-bit integers (0 to 4294967295)
uint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)

int8        the set of all signed  8-bit integers (-128 to 127)
int16       the set of all signed 16-bit integers (-32768 to 32767)
int32       the set of all signed 32-bit integers (-2147483648 to 2147483647)
int64       the set of all signed 64-bit integers
            (-9223372036854775808 to 9223372036854775807)

float32     the set of all IEEE-754 32-bit floating-point numbers
float64     the set of all IEEE-754 64-bit floating-point numbers

complex64   the set of all complex numbers with float32 real and imaginary parts
complex128  the set of all complex numbers with float64 real and imaginary parts

byte        alias for uint8
rune        alias for int32 (represents a Unicode code point)

Example of some of the built-in types:

package main

<code>
import (
    "fmt"
    "math/cmplx"
)

var (
    goIsFun bool       = true
    maxInt    uint64       = 1<<64 - 1
    complex complex128 = cmplx.Sqrt(-5 + 12i)
)

func main() {
    const f = "%T(%v)\n"
    fmt.Printf(f, goIsFun, goIsFun)
    fmt.Printf(f, maxInt, maxInt)
    fmt.Printf(f, complex, complex)
}
</code>

bool(true)
uint64(18446744073709551615)
complex128((2+3i))

3.2 Type conversion
The expression T(v) converts the value v to the type T. Some numeric conversions:

var i int = 42
var f float64 = float64(i)
var u uint = uint(f)

Or, put more simply:

i := 42
f := float64(i)
u := uint(f)

Go assignment between items of different type requires an explicit conversion which means that you
manually need to convert types if you are passing a variable to a function expecting another type.
3.3 Type assertion

If you have a value and want to convert it to another or a specific type (in case of interface{}),
you can use type assertion. A type assertion takes a value and tries to create another version in the
specified explicit type.

In the example below, the timeMap function takes a value and if it can be asserted as a map of interfaces{}
keyed by strings, then it injects a new entry called "updated_at" with the current time value.

<code>
package main

import (
    "fmt"
    "time"
)

func timeMap(y interface{}) {
    z, ok := y.(map[string]interface{})
    if ok {
        z["updated_at"] = time.Now()
    }
}

func main() {
    foo := map[string]interface{}{
        "Matt": 42,
    }
    timeMap(foo)
    fmt.Println(foo)
}
</code>

The type assertion doesn't have to be done on an empty interface. It's often used when you have a
function taking a param of a specific interface but the function inner code behaves differently based
on the actual object type. Here is an example:

<code>
package main

import "fmt"

type Stringer interface {
    String() string
}

type fakeString struct {
    content string
}

// function used to implement the Stringer interface
func (s *fakeString) String() string {
    return s.content
}

func printString(value interface{}) {
    switch str := value.(type) {
    case string:
        fmt.Println(str)
    case Stringer:
        fmt.Println(str.String())
    }
}

func main() {
    s := &fakeString{"Ceci n'est pas un string"}
    printString(s)
    printString("Hello, Gophers")

}
</code>

Another example is when checking if an error is of a certain type:

if err != nil {
  if msqlerr, ok := err.(*mysql.MySQLError); ok && msqlerr.Number == 1062 {
    log.Println("We got a MySQL duplicate :(")
  } else {
    return err
  }
}

    Read more in the Effective Go guide

3.4 Structs
A struct is a collection of fields/properties. You can define new types as structs or interfaces (Chapter
7). If you are coming from an object-oriented background, you can think of a struct to be a light class
that supports composition but not inheritance. Methods are discussed at length in Chapter 6

You don't need to define getters and setters on struct fields, they can be accessed automatically. However,
note that only exported fields (capitalized) can be accessed from outside of a package.

A struct literal sets a newly allocated struct value by listing the values of its fields. You can list
just a subset of fields by using the "Name:" syntax (the order of named fields is irrelevant when using
this syntax). The special prefix & constructs a pointer to a newly allocated struct.

<code>
package main

import (
    "fmt"
    "time"
)

type Bootcamp struct {
    // Latitude of the event
    Lat float64
    // Longitude of the event
    Lon float64
    // Date of the event
    Date time.Time
}

func main() {
    fmt.Println(Bootcamp{
        Lat:  34.012836,
        Lon:  -118.495338,
        Date: time.Now(),
    })
}
</code>

Declaration of struct literals:

<code>
package main

import "fmt"

type Point struct {
    X, Y int
}

var (
    p = Point{1, 2}  // has type Point
    q = &Point{1, 2} // has type *Point
    r = Point{X: 1}  // Y:0 is implicit
    s = Point{}     // X:0 and Y:0
)

func main() {
    fmt.Println(p, q, r, s)
}
</code>

Accessing fields using the dot notation:

<code>
package main

import (
    "fmt"
    "time"
)

type Bootcamp struct {
    Lat, Lon float64
    Date     time.Time
}

func main() {
    event := Bootcamp{
        Lat: 34.012836,
        Lon: -118.495338,
    }
    event.Date = time.Now()
    fmt.Printf("Event on %s, location (%f, %f)",
        event.Date, event.Lat, event.Lon)

}
</code>

3.5 Initializing
Go supports the new expression to allocate a zeroed value of the requested type and to return a pointer
to it.

x := new(int)

As seen in (Section 3.4) a common way to "initialize" a variable containing a struct or a reference
to one, is to create a struct literal. Another option is to create a constructor. This is usually done
when the zero value isn't good enough and you need to set some default field values for instance.

Note that following expressions using new and an empty struct literal are equivalent and result in the
same kind of allocation/initialization:

<code>
package main

import (
    "fmt"
)

type Bootcamp struct {
    Lat float64
    Lon float64
}

func main() {
    x := new(Bootcamp)
    y := &Bootcamp{}
    fmt.Println(*x == *y)
}
</code>

Note that slices (Section 4.2), maps (Section 4.4) and channels (Section 8.2) are usually allocated
using make so the data structure these types are built upon can be initialized.

Resources:
    Allocation with new - effective Go
    Composite Literals - effective Go
    Allocation with make - effective Go

3.6 Composition vs inheritance
Coming from an OOP background a lot of us are used to inheritance, something that isn't supported by
Go. Instead you have to think in terms of composition and interfaces.

The Go team wrote a short but good segment on this topic.

Composition (or embedding) is a well understood concept for most OOP programmers and Go supports it,
here is an example of the problem it's solving:

<code>
package main

import "fmt"

type User struct {
    Id     int
    Name     string
    Location string
}

type Player struct {
    Id     int
    Name     string
    Location string
    GameId     int
}

func main() {
    p := Player{}
    p.Id = 42
    p.Name = "Matt"
    p.Location = "LA"
    p.GameId = 90404
    fmt.Printf("%+v", p)
}
</code>

The above example demonstrates a classic OOP challenge, our Player struct has the same fields as the
User struct but it also has a GameId field. Having to duplicate the field names isn't a big deal,
but it can be simplified by composing our struct.

type User struct {
    Id           int
    Name, Location string
}

type Player struct {
    User
    GameId int
}

We can initialize a new variable of type Player two different ways.

Using the dot notation to set the fields:

<code>
package main

import "fmt"

type User struct {
    Id           int
    Name, Location string
}

type Player struct {
    User
    GameId int
}

func main() {
    p := Player{}
    p.Id = 42
    p.Name = "Matt"
    p.Location = "LA"
    p.GameId = 90404
    fmt.Printf("%+v", p)
}
</code>

The other option is to use a struct literal:

<code>
package main

import "fmt"

type User struct {
    Id           int
    Name, Location string
}

type Player struct {
    User
    GameId int
}

func main() {
    p := Player{
        User{Id: 42, Name: "Matt", Location: "LA"},
        90404,
    }
    fmt.Printf(
        "Id: %d, Name: %s, Location: %s, Game id: %d\n",
        p.Id, p.Name, p.Location, p.GameId)
    // Directly set a field defined on the Player struct
    p.Id = 11
    fmt.Printf("%+v", p)
}
</code>

When using a struct literal with an implicit composition, we can't just pass the composed fields. We
instead need to pass the types composing the struct. Once set, the fields are directly available.

Because our struct is composed of another struct, the methods on the User struct is also available to
the Player. Let's define a method to show that behavior:

<code>
package main

import "fmt"

type User struct {
    Id           int
    Name, Location string
}

func (u *User) Greetings() string {
    return fmt.Sprintf("Hi %s from %s",
        u.Name, u.Location)
}

type Player struct {
    User
    GameId int
}

func main() {
    p := Player{}
    p.Id = 42
    p.Name = "Matt"
    p.Location = "LA"
    fmt.Println(p.Greetings())
}
</code>

As you can see this is a very powerful way to build data structures but it's even more interesting when
thinking about it in the context of interfaces. By composing one of your structure with one implementing
a given interface, your structure automatically implements the interface.

Here is another example, this time we will look at implementing a Job struct that can also behave as
a logger.

Here is the explicit way:

<code>
package main

import (
    "log"
    "os"
)

type Job struct {
    Command string
    Logger    *log.Logger
}

func main() {
    job := &Job{"demo", log.New(os.Stderr, "Job: ", log.Ldate)}
    // same as
    // job := &Job{Command: "demo",
    //          Logger: log.New(os.Stderr, "Job: ", log.Ldate)}
    job.Logger.Print("test")
}
</code>

Our Job struct has a field called Logger which is a pointer to another type (log.Logger)

When we initialize our value, we set the logger so we can then call its Print function by chaining the
calls: job.Logger.Print()

But Go lets you go even further and use implicit composition. We can skip defining the field for our
logger and now all the methods available on a pointer to log.Logger are available from our struct:

<code>
package main

import (
    "log"
    "os"
)

type Job struct {
    Command string
    *log.Logger
}

func main() {
    job := &Job{"demo", log.New(os.Stderr, "Job: ", log.Ldate)}
    job.Print("starting now...")
}
</code>

Note that you still need to set the logger and that's often a good reason to use a constructor (custom
constructors are used when you need to set a structure before using a value, see (Section 11.5) ). What
is really nice with the implicit composition is that it allows to easily and cheaply make your structs
implement interfaces. Imagine that you have a function that takes variables implementing an interface
with the Print method. By adding *log.Logger to your struct (and initializing it properly), your struct
is now implementing the interface without you writing any custom methods.
3.7 Exercise

Looking at the User / Player example, you might have noticed that we composed Player using User but it
might be better to compose it with a pointer to a User struct. The reason why a pointer might be better
is because in Go, arguments are passed by value and not reference. If you have a small struct that is
inexpensive to copy, that is fine, but more than likely, in real life, our User struct will be bigger
and should not be copied. Instead we would want to pass by reference (using a pointer). (Section 2.9 &
Section 6.3 discuss more in depth how calling a method on a type value vs a pointer affects mutability
and memory allocation)

Modify the code to use a pointer but still be able to initialize without using the dot notation.

<code>
package main

import "fmt"

type User struct {
    Id           int
    Name, Location string
}

func (u *User) Greetings() string {
    return fmt.Sprintf("Hi %s from %s",
        u.Name, u.Location)
}

type Player struct {
    *User
    GameId int
}

func main() {
    // insert code
}
</code>

Question: We defined the Greetings method on a pointer to a User type. How come we were able to call it
directly on the value?
3.7.1 Solution

<code>
package main

import "fmt"

type User struct {
    Id           int
    Name, Location string
}

func (u *User) Greetings() string {
    return fmt.Sprintf("Hi %s from %s",
        u.Name, u.Location)
}

type Player struct {
    *User
    GameId int
}

func NewPlayer(id int, name, location string, gameId int) *Player {
    return &Player{
        User:    &User{id, name, location},
        GameId: gameId,
    }
}

func main() {
    p := NewPlayer(42, "Matt", "LA", 90404)
    fmt.Println(p.Greetings())
}
</code>

Answer: That is because methods defined on a pointer are also automatically available on the value
itself. The example didn't use a pointer on purpose, so the dot notation was working right away. In
the pointer solution, a zero value player is composed of a nil pointer of type User and therefore,
we can't call a field on a nil pointer.

---
