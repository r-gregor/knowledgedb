filename: go_packages_multif_20191005.txt
https://golangbot.com/packages/

Part 7: Packages
04 April 2017


   This is the tutorial number 7 in Golang tutorial series.

What are packages and why are they used?
   So far we have seen go programs which have only one file which has a main function with a couple
   of other functions. In real world scenarios this approach to writing all source code in a single file
   will not work. It becomes impossible to reuse and maintain code written this way. This is where
   packages save the day.

   Packages are used to organise go source code for better reusability and readability. Packages offer
   compartmentalisation of code and hence it becomes easy to maintain go applications.

   For example lets say we are creating a go image processing application which offers features such as
   image cropping, sharpening, blurring and color enhancement. One way to organise this application is
   to group all code related to a feature in its own package. For example cropping can be an individual
   package, sharpening can be another package. The advantage of this is, the color enhancement feature
   might need some of the functionalities of sharpening. The color enhancement code can simply import(we
   will discuss import in a minute) the sharpening package and start using its functionality. This way
   the code becomes easy to reuse.

   We will step by step create an application which calculates the area and diagonal of a rectangle.

   We will understand packages better through this application.

main function and main package
   Every executable go application must contain a main function. This function is the entry point for
   execution. The main function should reside in the main package.

   The line of code to specify that a particular source file belongs to a package is package
   packagename. This should be first line of every go source file.

   Lets gets started by creating the main function and main package for our application. Create a folder
   inside the src folder of the go workspace and name it geometry. Create a file geometry.go inside the
   geometry folder.

   Write the following code in geometry.go
//geometry.go
package main

import "fmt"

func main() {
    fmt.Println("Geometrical shape properties")
}

   The line of code package main specifies that this file belongs to the main package. The import
   "packagename" statement is used to import an existing package. In this case we import the fmt package
   which contains the Println method. Then there is a main function which prints Geometrical shape
   properties

   Compile the above program by typing go install geometry. This command searches for a file with a main
   function inside the geometry folder. In this case it finds geometry.go. It then compiles it and
   generates a binary named geometry(geometry.exe in the case of windows) inside the bin folder of the
   workspace. Now the workspace structure will be
src
    geometry
            gemometry.go
bin
    geometry

   Lets run the program by typing workspacepath/bin/geometry. Replace workspacepath with the path of
   your go workspace. This command executes the geometry binary inside the bin folder. You should get
   Geometrical shape properties as the output.

Creating custom package
   We will structure the code in such a way that all functionalities related to a rectangle are in
   rectangle package.

   Lets create a custom package rectangle which has functions to determine the area and diagonal of a
   rectangle.

   Source files belonging to a package should be placed in separate folders of their own. It is a
   convention in Go to name this folder with the same name of the package.

   So lets create a folder named rectangle inside the geometry folder. All files inside the rectangle
   folder should start with the line package rectangle as they all belong to the rectangle package.

   Create a file rectprops.go inside the rectangle folder we just created and add the following code.
//rectprops.go
package rectangle

import "math"

func Area(len, wid float64) float64 {
    area := len * wid
    return area
}

func Diagonal(len, wid float64) float64 {
    diagonal := math.Sqrt((len * len) + (wid * wid))
    return diagonal
}

   In the above code we have created two functions which calculate Area and Diagonal. The area of the
   rectangle is the product of the length and width. The diagonal of the rectangle is the square root of
   the sum of squares of the length and width. The Sqrt function in the math package is used to
   calculate the square root.

   Note that the function names Area and Diagonal starts with caps. This is essential and we will
   explain shortly why this is needed.

Importing custom package
   To use a custom package we must first import it. import path is the syntax to import a custom
   package. We must specify the path to the custom package with respect to the src folder inside the
   workspace. Our current folder structure is
src
   geometry
           geometry.go
           rectangle
                    rectprops.go

   The line import "geometry/rectangle" will import the rectangle package.

   Add the following code to geometry.go
//geometry.go
package main

import (
    "fmt"
    "geometry/rectangle" //importing custom package
)

func main() {
    var rectLen, rectWidth float64 = 6, 7
    fmt.Println("Geometrical shape properties")
        /*Area function of rectangle package used
        */
    fmt.Printf("area of rectangle %.2f\n", rectangle.Area(rectLen, rectWidth))
        /*Diagonal function of rectangle package used
        */
    fmt.Printf("diagonal of the rectangle %.2f ",rectangle.Diagonal(rectLen, rectWidth))
}

   The above code imports the rectangle package and uses the Area and Diagonal function of it to find
   the area and diagonal of the rectangle. The %.2f format specifier in Printf is to truncate the
   floating point to two decimal places. The output of the application is
Geometrical shape properties
area of rectangle 42.00
diagonal of the rectangle 9.22

Exported Names
   We capitalised the functions Area and Diagonal in the rectangle package. This has a special meaning
   in Go. Any variable or function which starts with a capital letter are exported names in go. Only
   exported functions and variables can be accessed from other packages. In this case we need to access
   Area and Diagonal functions from the main package. Hence they are capitalised.

   If the function names are changed from Area(len, wid float64) to area(len, wid float64) in
   rectprops.go and from rectangle.Area(rectLen, rectWidth) to rectangle.area(rectLen, rectWidth) in
   geometry.go and if the program is run, the compiler will throw error geometry.go:11: cannot refer to
   unexported name rectangle.area. Hence if you want to access a function outside of a package, it
   should be capitalised.

init function
   Every package can contain a init function. The init function should not have any return type and
   should not have any parameters. The init function cannot be called explicitly in our source code. The
   init function looks like below
func init() {
}

   The init function can be used to perform initialisation tasks and can also be used to verify the
   correctness of the program before the execution starts.

   The order of initialisation of a package is as follows
    1. Package level variables are initialised first
    2. init function is called next. A package can have multiple init functions (either in a single file
       or distributed across multiple files) and they are called in the order in which they are
       presented to the compiler.

   If a package imports other packages, the imported packages are initialised first.

   A package will be initialised only once even if it is imported from multiple packages.

   Lets make some modifications to our application to understand init functions.

   To start with lets add a init function to the rectprops.go file.
//rectprops.go
package rectangle

import "math"
import "fmt"

/*
 * init function added
 */
func init() {
    fmt.Println("rectangle package initialized")
}

func Area(len, wid float64) float64 {
    area := len * wid
    return area
}

func Diagonal(len, wid float64) float64 {
    diagonal := math.Sqrt((len * len) + (wid * wid))
    return diagonal
}

   We have added a simple init function which just prints rectangle package initialised

   Now lets modify the main package. We know that the length and width of a rectangle should be greater
   than zero. We will define this check using init function and package level variables in the
   geometry.go file.

   Modify the geometry.go file as shown below,
//geometry.go
package main

import (
    "fmt"
    "geometry/rectangle" //importing custom package
    "log"
)

/*
 * 1. package variables
*/
var rectLen, rectWidth float64 = 6, 7

/*
*2. init function to check if length and width are greater than zero
*/
func init() {
    println("main package initialized")

    if rectLen < 0 {
        log.Fatal("length is less than zero")
    }

    if rectWidth < 0 {
        log.Fatal("width is less than zero")
    }
}

func main() {
    fmt.Println("Geometrical shape properties")
    fmt.Printf("area of rectangle %.2f\n", rectangle.Area(rectLen, rectWidth))
    fmt.Printf("diagonal of the rectangle %.2f ",rectangle.Diagonal(rectLen, rectWidth))
}

   The following are the changes made to geometry.go
    1. rectLen and rectWidth variables are moved to package level from the main function level.
    2. An init function has been added. The init function prints a log and terminates the program
       execution if either the rectLen or rectWidth is less than zero by using log.Fatal function.

   The order of initialisation of the main package is
    1. The imported packages are first initialised. Hence rectangle package is initialised first.
    2. Package level variables rectLen and rectWidth are initialised next.
    3. init function is called.
    4. main function is called at last

   If you run the program, you will get the following output.
rectangle package initialized
main package initialized
Geometrical shape properties
area of rectangle 42.00
diagonal of the rectangle 9.22

   As expected the init function of the rectangle package is called first followed by the initialisation
   of the package level variables rectLen and rectWidth. The init function of the main package is called
   next. It checks whether rectLen and rectWidth are lesser than zero and terminates if the condition is
   true. We will learn about if statement in detail in a separate tutorial. For now you can assume that
   if rectLen < 0 will check whether rectLen is less than 0 and if it is so, the program will be
   terminated. We have written a similar condition for rectWidth. In this case both the conditions are
   false and the program execution continues. Finally the main function is called.

   Lets modify this program a bit to learn the use of the init function.

   Change the line var rectLen, rectWidth float64 = 6, 7 in geometry.go to var rectLen, rectWidth
   float64 = -6, 7. We have initialised rectLen to negative.

   Now if you run the application, you will see
rectangle package initialized
main package initialized
2017/04/04 00:28:20 length is less than zero

   As usual the rectangle package is initialised followed by the package level variables rectLen and
   rectWidth in the main package. rectLen is negative. Hence when the init function runs next, the
   program terminates after printing length is less than zero.

   The code is available for download at github.

Use of blank identifier
   It is illegal in Go to import a package and not to use it anywhere in the code. The compiler will
   complain if you do so. The reason for this is to avoid bloating of unused packages which will
   significantly increase the compilation time. Replace the code in geometry.go with the following,
//geometry.go
package main

import (

     "geometry/rectangle" //importing custom package
)

func main() {

}

   The above program will throw error geometry.go:6: imported and not used: "geometry/rectangle"

   But it is quite common to import packages when the application is under active development and use
   them somewhere in the code later if not now. The _ blank identifier saves us in those situations.

   The error in the above program can be silenced by the following code,
package main

import (
    "geometry/rectangle"
)

var _ = rectangle.Area //error silencer

func main() {

}

   The line var _ = rectangle.Area silences the error. We should keep track of these kind of error
   silencers and remove them including the imported package at the end of application development if the
   package is not used. Hence it is recommended to write error silencers in the package level just after
   the import statement.

   Sometimes we need to import a package just to make sure the initialisation takes place even though we
   do not need to use any function or variable from the package. For example, we might need to ensure
   that the init function of the rectangle package is called even though we do not use that package
   anywhere in our code. The _ blank identifier can be used in this case too as show below.
package main

import (

     _ "geometry/rectangle"

)
func main() {

}

   Running the above program will output rectangle package initialized. We have successfully initialised
   package even though it is not used anywhere in the code.

   Thats it for packages. Hope you enjoyed reading. Please leave your valuable comments and feedback :).


---
https://thenewstack.io/understanding-golang-packages/

Understanding Golang Packages
30 Oct 2014

   In this post, we will take a look at packages in the Go programming language. When we develop
   software applications, writing maintainable and reusable pieces of code is very important. Go
   provides the modularity and code reusability through it's package ecosystem. Go encourages you to
   write small pieces of software components through packages, and compose your  applications with these
   small packages.

Workspace
   Let's discuss how to organize code in Workspace before discussing Go packages. In Go, programs are
   kept in a directory hierarchy that is called a workspace. A workspace is simply a root directory of
   your Go applications. A workspace contains three subdirectories at its root:
     * src - This directory contains source files organized as packages. You will write your Go
       applications inside this directory.
     * pkg - This directory contains Go package objects.
     * bin - This directory contains executable programs.

   You have to specify the location of the workspace before developing Go programs. The GOPATH
   environment variable is used for specifying the location of Go workspaces.

Packages
   In Go, source files are organized into system directories called packages, which enable code
   reusability across the Go applications. The naming convention for Go package is to use the name of
   the system directory where we are putting our Go source files. Within a single folder, the package
   name will be same for the all source files which belong to that directory. We develop our Go programs
   in the $GOPATH directory, where we organize source code files into directories as packages. In Go
   packages, all identifiers will be exported to other packages if the first letter of the identifier
   name starts with an uppercase letter. The functions and types will not be exported to other packages
   if we start with a lowercase letter for the identifier name.

   Go's standard library comes with lot of useful packages which can be used for building real-world
   applications. For example, the standard library provides a "net/http" package which can be used for
   building web applications and web services. The packages from the standard library are available at
   the "pkg" subdirectory of the GOROOT directory. When you install Go, an environment variable GOROOT
   will be automatically added to your system for specifying the Go installer directory. The Go
   developer community is very enthusiastic for developing third-party Go packages. When you develop Go
   applications, you can leverage these third-party Go packages.

   Package Main
   When you build reusable pieces of code, you will develop a package as a shared library. But when you
   develop executable programs, you will use the package "main" for making the package as an executable
   program. The package "main" tells the Go compiler that the package should compile as an executable
   program instead of a shared library. The main function in the package "main" will be the entry point
   of our executable program. When you build shared libraries, you will not have any main package and
   main function in the package.

   Here's a sample executable program that uses package main in which the function main is the entry
   point.

   Code Listing - 1

package main

import (
    "fmt"
)

func main() {
    fmt.Println("Hello, Gopher!")
}

   Import Packages
   The keyword "import" is used for importing a package into other packages. In the Code Listing -1, we
   have imported the package "fmt" into the sample program for using the function Println. The package
   "fmt" comes from the Go standard library. When you import packages, the Go compiler will look on the
   locations specified by the environment variable GOROOT and GOPATH. Packages from the standard library
   are available in the GOROOT location. The packages that are created by yourself, and third-party
   packages which you have imported, are available in the GOPATH location.

Install Third-Party Packages
   We can download and install third-party Go packages by using "Go get" command. The Go get command
   will fetch the packages from the source repository and put the packages on the GOPATH location.

   The following command in the terminal will install "mgo",  a third-party Go driver package for
   MongoDB, into your GOPATH, which can be used across the projects put on the GOPATH directory:

go get gopkg.in/mgo.v2

   After installing the mgo, put the import statement in your programs for reusing the code, as shown
   below:

import (
    "gopkg.in/mgo.v2"
    "gopkg.in/mgo.v2/bson"
)

   The MongoDB driver, mgo,  provides two packages that we have imported in the above import statement.

Init Function
   When you write Go packages, you can provide a function "init" that will be called at the beginning of
   the execution time. The init method can be used for adding initialization logic into the package.

   Code Listing - 2

package db
import (
    "gopkg.in/mgo.v2"
    "gopkg.in/mgo.v2/bson"
)

func init {
  // initialization code here
}

   In some contexts, we may need to import a package only for invoking it's init method, where we don't
   need to call forth other methods of the package. If we imported a package and are not using the
   package identifier in the program, Go compiler will show an error. In such a situation, we can use a
   blank identifier ( _ ) as the package alias name, so the compiler ignores the error of not using the
   package identifier, but will still invoke the init function.

   Code Listing - 3

package main
import (
    "mywebapp/libs/mongodb/db"
    "fmt"
    "log"
)

func main() {
    //implementation here
}

   In the above sample program, we imported a package named db. Let's say we want to use this package
   only for calling the init method. The blank identifier will enable us to avoid the error from Go
   compiler, and we will be able to invoke the init method defined in the package.

   We can use alias names for packages to avoid package name ambiguity.

   Code Listing - 4

package main
import (
    mongo "mywebapp/libs/mongodb/db"
    mysql "mywebapp/libs/mysql/db"
)

func main() {
    mongodata :=mongo.Get() //calling method of package  "mywebapp/libs/mongodb/db"
    sqldata:=mysql.Get() //calling method of package "mywebapp/libs/mysql/db"
    fmt.Println(mongodata )
    fmt.Println(sqldata )
}

   We are importing two different packages from two different locations, but the name of both packages
   are the same. We can use an alias name for one package, and can use the alias name whenever we need
   to call a method of that package.

Creating and Reusing Packages
   Let's create a sample program for demonstrating a package. Create a source file "languages.go" for
   the package "lib" at the location github.com/shijuvar/go-samples-thenewstack/packagedemo/lib" in the
   GOPATH. Since the "languages.go" belongs to the folder "lib", the package name will be named "lib".
   All files created inside the lib folder belongs to lib package.

   Code Listing - 5

package lib
var languages map[string]string
func init() {
    languages= make(map[string]string)
    languages["cs"] = "C #"
    languages["js"] = "JavaScript"
    languages["rb"] = "Ruby"
    languages["go"] = "Golang"
}

func Get(key string) (string) {
    return languages[key]
}

func Add(key,value string) {
    languages[key]=value
}

func GetAll() (map[string]string) {
    return languages
}

   In the above program, we included an init method so that this method will be invoked at the beginning
   of execution. Let's build our Go package for reusing with other packages. In the terminal window, go
   to the location lib folder, and run the following command:

go install

   The go install command will build the package "lib" which will be available at the pkg subdirectory
   of GOPATH.

   Let's create a "main.go" for making an executable program where we want to reuse the code specified
   in the package "lib".

   Code Listing - 6

package main

import (
    "fmt"
    "github.com/shijuvar/go-samples-thenewstack/packagedemo/lib"
)

func main() {
    lib.Add("dr","Dart")
    fmt.Println(lib.Get("dr"))
    languages:=lib.GetAll()

    for _, v := range languages {
        fmt.Println(v)
    }
}


   In the above program, we import the lib package and call the exported methods provided by the lib
   package.

Summary
   The design philosophy of Go is to build reusable pieces of code as packages, and make your
   application using these packages. Go programs are organized into directories called packages. Go
   encourages you to perform software composition by composing individual pieces of Go packages as an
   application. Go packages enable code reusability, modularity and better maintainability.


---
https://yourbasic.org/golang/packages-explained/

Introduction to packages in 6 easy steps

Basics
   Every Go program is made up of packages and each package has an import path:
     * "fmt"
     * "math/rand"
     * "github.com/yourbasic/graph"

   Packages in the standard library have short import paths, such as "fmt" and "math/rand". Third-party
   packages, such as "github.com/yourbasic/graph", typically have an import path that includes a hosting
   service (github.com) and an organization name (yourbasic).

   By convention, the package name is the same as the last element of the import path:
     * fmt
     * rand
     * graph

   References to other packages' definitions must always be prefixed with their package names, and only
   the capitalized names from other packages are accessible.
package main

import (
    "fmt"
    "math/rand"

    "github.com/yourbasic/graph"
)

func main() {
    n := rand.Intn(100)
    g := graph.New(n)
    fmt.Println(g)
}

Declare a package
   Every Go source file starts with a package declaration, which contains only the package name.

   For example, the file src/math/rand/exp.go, which is part of the implementation of the
   math/rand package, contains the following code.
package rand

import "math"

const re = 7.69711747013104972
...

   You don't need to worry about package name collisions, only the import path of a package must be
   unique. How to Write Go Code shows how to organize your code and its packages in a
   file structure.

Package name conflicts
   You can customize the name under which you refer to an imported package.
package main

import (
    csprng "crypto/rand"
    prng "math/rand"

    "fmt"
)

func main() {
    n := prng.Int() // pseudorandom number
    b := make([]byte, 8)
    csprng.Read(b) // cryptographically secure pseudorandom number
    fmt.Println(n, b)
}

Dot imports
   If a period . appears instead of a name in an import statement, all the package's exported
   identifiers can be accessed without a qualifier.
package main

import (
    "fmt"
    . "math"
)

func main() {
    fmt.Println(Sin(Pi/2)*Sin(Pi/2) + Cos(Pi)/2) // 0.5
}

   Dot imports can make programs hard to read and generally should be avoided.

Package download
   The go get command downloads packages named by import paths, along with their dependencies, and
   then installs the packages.
$ go get github.com/yourbasic/graph

   The import path corresponds to the repository hosting the code. This reduces the likelihood of future
   name collisions.

   The Go Wiki and Awesome Go provide lists of high-quality Go packages and resources.

   For more information on using remote repositories with the go tool, see Command go: Remote import
   paths.

Package documentation
   The GoDoc web site hosts documentation for all public Go packages on Bitbucket, GitHub, Google
   Project Hosting and Launchpad:
     * https://godoc.org/fmt
     * https://godoc.org/math/rand
     * https://godoc.org/github.com/yourbasic/graph

   The godoc command extracts and generates documentation for all locally installed Go programs. The
   following command starts a web server that presents the documentation at http://localhost:6060/.
$ godoc -http=:6060 &


---
https://www.digitalocean.com/community/tutorials/importing-packages-in-go

Importing Packages in Go
August 9, 2019

Introduction
   There will be times when your code needs additional functionality outside of your current program. In
   these cases, you can use packages to make your program more sophisticated. A package represents all
   the files in a single directory on disk. Packages can define functions, types, and interfaces that
   you can reference in other Go files or packages.

   This tutorial will walk you through installing, importing, and aliasing packages.

Standard Library Packages
   The standard library that ships with Go is a set of packages. These packages contain many of the
   fundamental building blocks to write modern software. For instance, the fmt package contains
   basic functions for formatting and printing strings. The net/http package contains functions that
   allow a developer to create web services, send and retrieve data over the http protocol, and more.

   To make use of the functions in a package, you need to access the package with an import statement.
   An import statement is made up of the import keyword along with the name of the package.

   As an example, in the Go program file random.go you can import the math/rand package to generate
   random numbers in this manner:

   random.go
import "math/rand"

   When we import a package, we are making it available in our current program as a separate namespace.
   This means that we will have to refer to the function in dot notation, as in package.function.

   In practice, a function from the math/rand package could look like these examples:
     * rand.Int() which calls the function to return a random integer.
     * rand.Intn() which calls the function to return a random element from 0 up to the specified number
       provided.

   Let's create a for loop to show how we will call a function of the math/rand package within our
   random.go program:

   random.go
package main

import "math/rand"

func main() {
    for i := 0; i < 10; i++ {
        println(rand.Intn(25))
    }
}

   This program first imports the math/rand package on the third line, then moves into a for loop which
   that will run 10 times. Within the loop, the program will print a random integer within the range of
   0 up to 25. The integer 25 is passed to rand.Intn() as its parameter.

   When we run the program with go run random.go, we'll receive 10 random integers as output. Because
   these are random, you'll likely get different integers each time you run the program. The output will
   look something like this:

   Output
6
12
22
9
6
18
0
15
6
0

   The integers will never go below 0 or above 24.

   When importing more than one package, you can use the () to create a block. By using a block you can
   avoid repeating the import keyword on every line. This will make your code look cleaner:

   random.go
import (
    "fmt"
    "math/rand"
)

   To make use of the additional package, we can now format the output and print out the iteration that
   each random number was generated on during the loop:

   random.go
package main

import (
    "fmt"
    "math/rand"
)

func main() {
    for i := 0; i < 10; i++ {
        fmt.Printf("%d) %d\n", i, rand.Intn(25))
    }
}

   Now, when we run our program, we'll receive output that looks like this:

   Output
0) 6
1) 12
2) 22
3) 9
4) 6
5) 18
6) 0
7) 15
8) 6
9) 0

   In this section, we learned how to import packages and use them to write a more sophisticated
   program. So far, we have only used packages from the standard library. Next, let's see how to install
   and use packages that are written by other developers.

Installing Packages
   While the standard library ships with many great and useful packages, they are intentionally designed
   to be general purpose and not specific in nature. This allows developers to build their own packages
   on top of the standard library for their own specific needs.

   The Go tool chain ships with the go get command. This command allows you to install third party
   packages to your local development environment and use them in your program.

   When using go get to install third party packages, it is common for a package to be referenced by its
   canonical path. That path can also be a path to a public project that is hosted in a code repository
   such as GitHub. As such, if you want to import the flect package, you would use the full
   canonical path:
     * go get github.com/gobuffalo/flect

   The go get tool will find the package, on GitHub in this case, and install it into your $GOPATH.

   For this example the code would be installed in this directory:
$GOPATH/src/github.com/gobuffalo/flect

   Packages are often being updated by the original authors to address bugs or add new features. When
   this happens, you may want to use the latest version of that package to take advantage of the new
   features or resolved bug. To update a package, you can use the -u flag with the go get command:
     * go get -u github.com/gobuffalo/flect

   This command will also have Go install the package if it is not found locally. If it is already
   installed, Go will attempt to update the package to the latest version.

   The go get command always retrieves the latest version of the package available. However, there may
   be updates to previous versions of the package that are still newer than you are using, and would be
   useful to update in your program. To retrieve that specific version of the package, you would need to
   use a Package Management tool, such as Go Modules.

   As of Go 1.11, Go Modules are used to manage what version of the package you want imported. The topic
   of package management is beyond the scope of this article, but you can read more about it on the
   Go Modules GitHub page.

Aliasing Imported Packages
   You may want to change a package name if you have a local package already named the same as a third
   party package you are using. When this happens, aliasing your import is the best way to handle the
   collision. You can modify the names of packages and their functions within Go by putting an alias
   name in front of the imported package.

   The construction of this statement looks like this:
import another_name "package"

   In this example, modify the name of the fmt package in the random.go program file. We'll change the
   package name of fmt to f in order to abbreviate it. Our modified program will look like this:

   random.go
package main

import (
    f "fmt"
    "math/rand"
)

func main() {
    for i := 0; i < 10; i++ {
        f.Printf("%d) %d\n", i, rand.Intn(25))
    }
}

   Within the program, we now refer to the Printf function as f.Printf rather than fmt.Printf.

   While other languages favor aliasing a package for ease of use later in the program, Go does not. For
   instance, aliasing the fmt package to f would not be consistent with the style guide.

   When renaming imports to avoid a name collision, you should aim to rename the most local or project
   specific import. For instance, if you had a local package called strings, and you also needed to
   import the system package called strings, you would favor renaming your local package over the system
   package. Whenever possible, it's best to avoid name collision altogether.

   In this section, we learned how we can alias an import to avoid colliding with another import in our
   program. It is important to remember that readability and clarity of your program is important, so
   you should only use aliasing to make the code more readable or when you need to avoid a naming
   collision.

Formatting Imports
   By formatting imports, you can sort the packages into a specific order that will make your code more
   consistent. Additionally, this will prevent random commits from taking place when the only thing that
   changes is the sort order of the imports. Since formatting imports will prevent random commits, this
   will prevent unnecessary code churn and confusing code reviews.

   Most editors will format imports for you automatically, or will let you configure your editor to use
   goimports. It is considered standard practice to use goimports in your editor, as trying to
   manually maintain the sort order of your imports can be tedious and prone to errors. Additionally, if
   any style changes are made, goimports will be updated to reflect those style changes. This ensures
   that you, and anyone that works on your code, will have consistent styling in your import blocks.

   Here is what an example import block may look like before formatting:

import (
    "fmt"
    "os"
    "github.com/digital/ocean/godo"
    "github.com/sammy/foo"
    "math/rand"
    "github.com/sammy/bar"
)

   Running the goimport tool (or with most editors that have it installed, saving the file will run it
   for you), you will now have the following format:

import (
  "fmt"
  "math/rand"
  "os"

  "github.com/sammy/foo"
  "github.com/sammy/bar"

  "github.com/digital/ocean/godo"
)

   Notice that it groups all standard library packages first and then groups third party packages
   together with blank lines. This makes is easier to read and understand what packages are being used.

   In this section we learned that using goimports will keep all of our import blocks properly
   formatted, and prevent unnecessary code churn between developers working on the same files.

Conclusion
   When we import packages we're able to call functions that are not built in to Go. Some packages are
   part of the standard library that installs with Go, and some we will install through go get.

   Making use of packages allows us to make our programs more robust and powerful as we're leveraging
   existing code. We can also create our own packages for ourselves and for other programmers to use
   in future programs.


---
