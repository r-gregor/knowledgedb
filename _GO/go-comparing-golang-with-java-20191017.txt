filename: go_comparing-golang-with-java_20191017.txt
https://dzone.com/articles/comparing-golang-with-java

Comparing Golang with Java

The first impressions of a Java enthusiast when looking at Go's features.

   First of all I would like to make a disclaimer. I am not an expert in Go. I started to study it a few
   weeks ago, thus the statements here are kind of first impressions. I may be wrong in some of the
   subjective areas of this article. Perhaps I will write a review of this one later. But until then
   here it is, and if you are a Java programmer you are welcome to see my feelings and experiences and
   more than welcome to comment and correct me if I am wrong in some statements.

Golang Is Impressive
   As opposed to Java, Go is compiled to machine code and is executed directly. Much like C. Because
   this is not a VM machine it is very much different from Java. It is object oriented and at the same
   time functional to some extent thus it is not just a new C with some automated garbage collection. It
   is somewhere between C and C++ if we think the world of programming languages is linear, which it is
   not. Using a Java programmer's eyes, some things are so much different that learning them is
   challenging and may give a deeper understanding on programming language structures and how objects,
   classes and all these things are ... even in Java.

   I mean that if you understand how OO is implemented in Go, you may also understand some of the
   reasons why Java does things different.

   In short, if you are impatient: do not let yourself freak out by the seemingly weird structure of the
   language. Learn it and it will add to your knowledge and understanding even if you do not have a
   project to be developed in Go.

GC and Not GC
   Memory management is crucial in programming languages. Assembly lets you do all things, or rather it
   requires you to do it all. In C there are some support functions in the standard library but it is
   still up to you to free all memory that you have allocated before calling malloc. Automated memory
   management starts somewhere along C++, Python, Swift and Java. Golang is also in this category.

   Python and Swift use reference counting. When there is a reference to an object the object itself
   holds a counter that counts the number of references that point to it. There are no pointers or
   references backward, but when a new reference gets the value and starts to reference an object the
   counter increases, and when a reference becomes null/nil/whatever or references another object the
   counter goes down. So it is known when the counter is zero, there are no references to the object and
   it can be discarded. The problem with this approach is that an object still may be unreachable while
   the counter is positive. There can be object circles referencing each other and when the last object
   in this circle is released from the static, local and otherwise reachable references, then the circle
   starts to float in the memory like bubbles in water: the counters are all positive but the objects
   are unreachable. The Swift tutorial has a very good explanation of this behavior and how to avoid it.
   But the point is still there: you have to care about memory management somewhat.

   In the case of Java and other JVM languages (including the JVM implementation of Python) the memory
   is managed by the JVM. There is a full blown garbage collection that runs from time to time in one or
   more threads, parallel with the working threads or sometimes stopping those (a.k.a. stop the world)
   marking the unreachable objects, sweeping them and compacting the presumably scattered memory. All
   you have to worry about is performance.

   Golang is also in this category with a small little, tiny exception. It does not have references. It
   has pointers. The difference is crucial. It can be integrated with external C code and for
   performance reasons there is nothing like a reference registry in the runtime. The actual pointers
   are not known to the execution system. The memory allocated can still be analyzed to gather
   reachability information and the unused "objects" can still be marked and swept off, but memory can
   not be moved around to do the compacting. This was not obvious for me from the documentation and as I
   understood the pointer handling I was seeking the magic that Golang wizards implemented to do the
   compacting. I was sorry to learn, they simply did not. There is no magic.

   Golang has a garbage collection but this is not a full GC as in Java, as there is no memory
   compaction. It is not necessarily bad. It can go a long way running servers for a very long time and
   still not have the memory fragmented. Some of the JVM garbage collectors also skip the compacting
   steps to decrease GC pause when cleaning old generations and do the compacting only as a last resort.
   This last resort step in Go is missing and it may cause some problems in rare cases. You are not
   likely to face the problem while learning the language.

Local Variables
   Local variables (and sometimes objects in newer versions) are stored on the stack in the Java
   language. This is also true in C, C++ and in other languages where call-stack as such is implemented.
   Golang is no exception, except...

   Except that you can simply return a pointer to a local variable from a function. That was a fatal
   mistake in C. In case of Go the compiler recognizes that the allocated "object" (I will explain later
   why I use quotes) is escaping the method and allocates it accordingly so it survives the return of
   the function and the pointer will not point to an already abandoned memory location where there is no
   reliable data.

   So it is absolutely legal to [33]write:
package main

import (
    "fmt"
)

type Record struct {
    i int
}

func returnLocalVariableAddress() *Record {
    return &Record{1}
}

func main() {
    r := returnLocalVariableAddress()
    fmt.Printf("%d", r.i)
}

Closures
   You can write functions inside functions and you can return functions just like in a functional
   language (Go is a kind of functional language) and the local variables around it serve as variables
   in a closure.
package main

import (
    "fmt"
)

func CounterFactory(j int) func() int {
    i := j
    return func() int {
        i++
        return i
    }
}

func main() {
    r := CounterFactory(13)
    fmt.Printf("%d\n", r())
    fmt.Printf("%d\n", r())
    fmt.Printf("%d\n", r())
}

Function Return Values
   Functions can return not only one single value, but multiple values. This seems to be a bad practice
   if not used properly. Python does that. Perl does that. It can be of good use. It is mainly used to
   return a value and a 'nil' or error code. This way the old habit of encoding the error into the
   returned type (usually returning -1 as error code and some non-negative value in case there is some
   meaningful return value as in C std library calls) is replaced with something much more readable.

   Multiple values on the sides of an assignment is not only to functions. To swap two values you can
   write:
 a,b = b,a

Object Orientation
   With closures and functions being first class citizens, Go is at least as object oriented as
   JavaScript. But it is actually more than that. Golang has interfaces and structs. But they are not
   really classes. They are [35]value types. They are passed by value and wherever they are stored in
   memory the data there is only the pure data without object headers or anything like that. Structs in
   Go are very much like they are in C - they can contain fields, but they can not extend each other and
   they can not contain methods. Object orientation is approached a bit differently.

   Instead of stuffing the methods into the class definition you can specify the struct when you define
   the method itself. Structs can also contain other structs, and in case there is no name for the field
   you can reference it by the type which becomes its name implicitly. Or you can just reference a field
   or method as they belonged to the top struct.

   For example:
package main

import (
    "fmt"
)

type A struct {
    a int
}

func (a *A) Printa() {
    fmt.Printf("%d\n", a.a)
}

type B struct {
    A
    n string
}

func main() {
    b := B{}
    b.Printa()
    b.A.a = 5
    fmt.Printf("%d\n", b.a)
}

   This is almost a kind of inheritance.

   When you specify the struct on which the method can be invoked, you can specify the struct itself or
   a pointer to it. If the method is applied to the struct then the method will access a copy of the
   caller struct (this struct is passed by value). If the method is applied to a pointer to the struct
   then the pointer will be passed (like passed by reference). In the latter case the method can also
   modify the struct (in this sense the structs are not value types, since value types are immutable).
   Either can be used to fulfill the requirement of an interface. In case of the example above Printa is
   applied to a pointer to the struct A. Go says that A is the receiver of the method.

   Go syntax is also a bit lenient about structs and pointers. In C you can have a struct and you can
   write b.a to access the field of the struct. In case of a pointer to the structure in C you have to
   write b->a to access the same field. In case of a pointer b.a is a syntax error. Go says that writing
   b->a is pointless (you can interpret this literally). Why litter the code with -> operators when the
   dot operator can be overloaded? Field access in case of structs and, well field access through
   pointers. Very logical.

   Because the pointer is as good as the struct itself (to some extent) you can write:
package main

import (
    "fmt"
)

type A struct {
    a int
}

func (a *A) Printa() {
    if a == nil {
        fmt.Println("a is nil")
    } else {
        fmt.Printf("%d\n", a.a)
    }
}

func main() {
    var a *A = nil
    a.Printa()
}

   Yes, this is the point - as a true Java programmer you should not freak out. We did call a method on
   a nil pointer! How can that happen?

Type in in the Variable and Not the Object
   This is why I was using quotes around "object". When Go stores a struct it is a piece of memory. It
   does not have an object header (though it may, since it is a matter of implementation and not the
   language definition, but it reasonably does not). It is the variable that holds the type of the
   value. If the variable type is a struct then it is known already at compile time. If this is an
   interface then the variable will point to the value and simultaneously reference the actual type it
   has the value for.

   If the variable a is an interface and not a pointer to a struct [38]you can not do the same: you get
   a runtime error.

Implementing Interfaces
   Interfaces are very simple in Go, and the same time very complex (or at least different from what
   they are in Java). Interfaces declare a bunch of functions that structs should implement if they want
   to be compliant with the interface. The inheritance is done the same way as with structs. The strange
   thing is that you need not specify in case of a struct that it implements an interface if it does.
   After all it is really not the struct that implements the interface, but rather the set of functions
   that use the struct or a pointer to the struct as receiver. If all the functions are implemented then
   the struct implements the interface. If some of them are missing then the implementation is not
   complete.

   Why do we need the 'implements' keyword in Java and not in Go? Go does not need it because it is
   fully compiled and there is nothing like a classloader that loads separately compiled code during
   runtime. If a struct is supposed to implement an interface but it does not, then this will be
   discovered during compile time without explicitly classifying that the struct does implement the
   interface. You can overcome this and cause a runtime error if you use reflection (that Go has) but
   the 'implements' declaration would not help that anyway.

Go Is Compact
   Go code is compact and not forgiving. In other languages there are characters that are simply
   useless. We got used to them during the last 40 years since C was invented and all other languages
   followed the syntax, but it does not necessarily mean that it is the best way. We all know since C
   that the 'trailing else' problem is best addressed using the { and } around the code branches in the
   'if' statement. (Maybe Perl was the first mainstream C-like syntax language that requested that.)
   However, if we must have the braces there is no point to enclose the condition between parentheses.
   As you could see in the code above:
...
    if a == nil {
        fmt.Println("a is nil")
    } else {
        fmt.Printf("%d\n", a.a)
    }
...

   there is no need and Go does not even allow it. You may also notice that there are no semicolons. You
   can use them, but you need not. Inserting them is a preprocessing step on the source code and it is
   very effective. Most of the time they are clutter anyway.

   You can use ':=' to declare a new variable and assign a value of it. On the right hand side the
   expression defines the type usually, so there is no need to write 'var x typeOfX = expression'. On
   the other hand, if you import a package and assign a variable that you do not use afterwards, it is a
   bug. Since it can be detected during compile time as a code error, compilation fails. Very smart.
   (Though sometimes annoying when I import a package that I intend to use, and before referencing it I
   save the code and IntelliJ intelligently removes the import just to help me.)

Threads and Queues
   Threads and queues are built into the language. They are called goroutines and channels. To start a
   goroutine you only have to write go functioncall() and the function will be started in a different
   thread. Although there are methods/functions in the standard Go library to lock "objects" the native
   multi-thread programming is using channels. Channel is a built-in type in Go that is a fixed size
   FIFO channel of any other type. You can push a value into a channel and a goroutine can pull it off.
   If the channel is full pushing blocks and in case the channel is empty the pull is blocking.

There Are Errors, No Exceptions. Panic!
   Go does have exception handling but this is not supposed to be used like in Java. Exception is called
   'panic' and this is to be used when there is some real panic in the code. In Java terms it is similar
   to some throwable that ends with '...Error'. When there is some exceptional case and some error that
   can be handled, this state is returned by the system call and the application functions are expected
   to follow a similar pattern. For example
package main

import (
    "log"
    "os"
)

func main() {
    f, err := os.Open("filename.ext")
    if err != nil {
        log.Fatal(err)
    }
    defer f.Close()
}

   the function 'Open' returns the file handler and nil, or nil and the error code. If you execute it on
   the Go Playground (click on the link above) you get the error displayed.

   This is not really fitting the practice we became used to when programming in Java. It is easy to
   miss some error condition and write
package main

import (
    "os"
)

func main() {
    f := os.Open("filename.ext")
    defer f.Close()
}

   that just ignores the error. It is also cumbersome to check the possibility of error at each and
   every system or application call that may return errors, when we are interested in a longer chain of
   commands (if any of those produced error and we do not really care which one).

No Finally, Defer Instead
   Closely coupled with the exception handling is the feature that Java implements with the
   try/catch/finally feature. In Java you can have code that is executed in a finally code no matter
   what. Go provides the keyword 'defer' that lets you specify a function call that will be invoked
   before the method returns even if there is/was a panic. This is a solution to the problem that gives
   you less options to abuse. You can not write arbitrary code to be executed deferred only a function
   call. In Java you can even have a return statement in the finally block or see a mess trying to
   handle the situation when the code to be executed in the finally block may also throw exception. Go
   is prone to that. I like that.

Other things...
   that also may seem weird at first are
     * public functions and variables are capitalized, there are no keywords like 'public', 'private'
     * source code of libraries are to be imported into the source of the project (I am not sure I
       understood that properly)
     * lack of generics
     * code generation support built into the language in forms of comment directives (this is really a
       wtf)

   In general Go is an interesting language. It is not a replacement for Java even on a language level.
   Java and Go are not supposed to serve the same type of tasks - Java is enterprise development
   language, Go is a system programming language. Go, just as well as Java, is continuously developing
   so we may see some change in that in the future.


---
