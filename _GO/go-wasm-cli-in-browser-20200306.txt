filename: go_wasm-cli-in-browser_20200306.txt
https://www.arp242.net/wasm-cli.html

Running Go CLI programs in the browser
5 Feb 2020

   Turns out it's almost shockingly easy to run Go CLI programs in the browser with WebAssembly (WASM);
   as an example I'll use my [https://github.com/arp242/uni]uni program. Building is as easy as:
GOOS=js GOARCH=wasm go build -o wasm/main.wasm

   The resulting binary is rather large (5.1M); TinyGo can be used to create smaller builds, but it
   doesn't support os.Args yet, so it won't work here. After gzip compression it's only 1.3M, so
   that's manageable (and still smaller than many "text-only" websites).

   We then need to load the main.wasm binary:
<html>
<head>
    <meta charset="utf-8">
</head>
<body>
    <script src="wasm_exec.js"></script>
    <script>
        const go = new Go();
        WebAssembly.instantiateStreaming(fetch("main.wasm"), go.importObject).then((result) => {
            go.run(result.instance);
        });
    </script>
</body>
</html>

   Copy the wasm_exec.js file from the Go source repo ($(go env GOROOT)/misc/wasm/wasm_exec.js), or
   GitHub.

   You can't load the HTML file the local filesystem as the browser will refuse to load the wasm file;
   you'll have to use a webserver which serves wasm files with the correct MIME type, for example with
   Python:
#!/usr/bin/env python3
import http.server
h = http.server.SimpleHTTPRequestHandler
h.extensions_map = {'': 'text/html', '.wasm': 'application/wasm', '.js': 'application/javascript'}
http.server.HTTPServer(('127.0.0.1', 2000), h).serve_forever()

   Going to http://localhost:2000 will fetch the file and run uni; the JS console should display:
uni: no command given
exit code 1

   As if we typed uni on the CLI. To give it some arguments set go.argv:
<script>
        const go = new Go();
        WebAssembly.instantiateStreaming(fetch("main.wasm"), go.importObject).then((result) => {
            // Remember that argv[0] is the program name.
            go.argv = ['uni', '-q', 'identify', 'wasm'];
            go.run(result.instance);
        });
</script>

   Which will give the expected output in the console:
'w'  U+0077  119    77          &#x77;     LATIN SMALL LETTER W (Lowercase_Letter)
'a'  U+0061  97     61          &#x61;     LATIN SMALL LETTER A (Lowercase_Letter)
's'  U+0073  115    73          &#x73;     LATIN SMALL LETTER S (Lowercase_Letter)
'm'  U+006D  109    6d          &#x6d;     LATIN SMALL LETTER M (Lowercase_Letter)

   Now it's a simple matter of connecting an input element to go.argv; this also fetches the main.wasm
   just once and re-runs it, instead of re-fetching it every time:
<input id="input" style="font: 16px monospace">
<script src="wasm_exec.js"></script>
<script>
    fetch('main.wasm').then(response => response.arrayBuffer()).then(function(bin) {
            input.addEventListener('keydown', function(e) {
                if (e.keyCode !== 13)  // Enter
                    return;

                e.preventDefault();

                const go = new Go();
                go.argv = ['uni'].concat(this.value.split(' '));
                this.value = '';
                WebAssembly.instantiate(bin, go.importObject).then((result) => {
                    go.run(result.instance);
                });
            });
    });
</script>

   Overwrite the global.fs.writeSync from wasm_exec.js to display the output in the HTML page instead of
   the console:
<script>
    fetch('main.wasm').then(response => response.arrayBuffer()).then(function(bin) {
            input.addEventListener('keydown', function(e) {
                if (e.keyCode !== 13)  // Enter
                    return;

                e.preventDefault();

                const go = new Go();
                go.argv = ['uni'].concat(this.value.split(' '));
                this.value = '';

                // Write stdout to terminal.
                let outputBuf = '';
                const decoder = new TextDecoder("utf-8");
                global.fs.writeSync = function(fd, buf) {
                    outputBuf += decoder.decode(buf);
                    const nl = outputBuf.lastIndexOf("\n");
                    if (nl != -1) {
                        window.output.innerText += outputBuf.substr(0, nl + 1);
                        window.scrollTo(0, document.body.scrollHeight);
                        outputBuf = outputBuf.substr(nl + 1);
                    }
                    return buf.length;
                };

                WebAssembly.instantiate(bin, go.importObject).then((result) => {
                    go.run(result.instance);
                });
            });
    });
</script>

   And that's pretty much it; 30 lines of JavaScript to run CLI applications in the browser :-) The only
   change I had to make to uni Go code was
   [https://github.com/arp242/uni/commit/bfd9a565343bce6469c67ea2ae3accad597afcb4#diff-c5818bddd7e55bf1374be45465e9506]adding a build tag.
    
   There are plenty of other things that can be improved: some better styling, reading from stdin,
   keybinds, loading indicator, etc. The [https://arp242.github.io/uni-wasm/]full version does some of that.
   Take a look at [**1][https://github.com/arp242/uni/blob/master/wasm/index.html]index.html
   and [**2][https://github.com/arp242/uni/blob/master/wasm/term.js]term.js in case you're interested.
   It could still be improved further, but I thought this was "good enough" for a basic demo :-)


---
[**1]https://github.com/arp242/uni/blob/master/wasm/index.html

<html>
<head>
    <meta charset="utf-8">
    <title>uni WebAssembly demo</title>
    <style>
        .light, .light input { background-color: #fff;     color: #252525; }
        .dark,  .dark  input { background-color: #252525;  color: #fff; }
        .sepia, .sepia input { background-color: #f4ecd8;; color: #5b4636;; }

        input         { flex-grow: 1; }
        input, button { font: 16px monospace; border: 1px solid #666; }
        input:focus   { box-shadow: 0px 0px .2em #6262fd;; }
        p             { font: 14px sans-serif; margin-top: 1em; }
        div           { display: flex; }
    </style>
</head>
<body class="light">
    <pre id="output"></pre>
    <div><span>$ uni&nbsp;</span><input id="input" disabled placeholder="Loading WebAssembly binary..."></div>
    <p>uni WebAssembly demo; <a href="https://github.com/arp242/uni">homepage</a>, <a href="https://www.arp242.net/wasm-cli.html">details</a>. Type <code>help</code> for usage; the <a href="https://github.com/arp242/uni/#usage">README</a> has more examples.</a></p>

    <p>Colour schemes:
        <button class="light">Light</button>
        <button class="dark">Dark</button>
        <button class="sepia">Sepia</button>
        | Up/down arrows to cycle history, ^L to clear the screen.</p>

    <script src="wasm_exec.js"></script>
    <script src="term.js"></script>
    <script>
        (function() {
            if (!('WebAssembly' in window)) {
                document.body.innerText = 'Sorry, you need a browser with WebAssembly support';
                return;
            }

            set_output(window.output);

            fetch('main.wasm').then(response => response.arrayBuffer()).then(function(bin) {
                window.input.placeholder = 'Ready!';
                window.input.disabled = false;

                readline('uni', window.output, window.input, function(cmd) {
                    window.input.placeholder = '';
                    const go = new Go();
                    go.argv = cmd;
                    go.exit = (code) => {
                        if (code > 0)
                            output.innerText += 'Exit ' + code + '\n';
                    };

                    WebAssembly.instantiate(bin, go.importObject).then((result) => {
                        go.run(result.instance);
                    });
                });
            });
        })();
    </script>

    <script>
        if (location.hash !== '')
            document.body.className = location.hash.substr(1);

        document.querySelectorAll('button').forEach((elem) => {
            elem.addEventListener('click', (e) => {
                e.preventDefault();
                document.body.className = elem.className;
                location.hash = elem.className;
                input.focus();
            });
        });
    </script>
</body>
</html>


---
[**2]https://github.com/arp242/uni/blob/master/wasm/term.js

(function() {
    // Write output to HTML element.
    window.set_output = (output) => {
        // Write stdout to terminal.
        let outputBuf = '';
        const decoder = new TextDecoder("utf-8");
        global.fs.writeSync = (fd, buf) => {
            outputBuf += decoder.decode(buf);
            const nl = outputBuf.lastIndexOf("\n");
            if (nl != -1) {
                output.innerText += outputBuf.substr(0, nl + 1);
                window.scrollTo(0, document.body.scrollHeight);
                outputBuf = outputBuf.substr(nl + 1);
            }
            return buf.length;
        };
    };

    // Provide a readline-like input.
    window.readline = function(progname, output, input, cb) {
        var hist = [], hist_index = 0, reading_stdin = false;

        global.fs.read = (fd, buffer, offset, length, position, callback) => {
            reading_stdin = true;
            output.innerText += 'reading from stdin...\n'
        };

        input.addEventListener('keydown', (e) => {
            //console.log(e.keyCode);

            // ^L
            if (e.ctrlKey && e.keyCode === 76) {
                e.preventDefault();
                output.innerText = '';
            }
            // ^P, arrow up
            else if ((e.ctrlKey && e.keyCode === 80) || e.keyCode === 38) {
                e.preventDefault();
                input.value = hist[hist.length - hist_index - 1] || '';
                if (hist_index < hist.length - 1)
                    hist_index++;
            }
            // Arrow down; no ^N as it seems that can't be overridden: https://stackoverflow.com/q/38838302
            else if (e.keyCode === 40) {
                e.preventDefault();
                input.value = hist[hist.length - hist_index] || '';
                if (hist_index > 0)
                    hist_index--;
            }
            // Enter
            else if (e.keyCode === 13) {
                e.preventDefault();

                if (progname !== '')
                    output.innerText += '$ ' + progname + ' ';
                output.innerText += input.value + "\n";

                if (reading_stdin) {
                    reading_stdin = false;
                    var cmd = (hist[hist.length - 1] + ' ' + input.value).split(' ');
                }
                else {
                    hist.push(input.value);
                    var cmd = input.value.split(' ');
                }

                input.value = '';
                if (cmd.length === 0)
                    return;
                if (cmd[0] !== progname)
                    cmd = [progname].concat(cmd);

                cb(cmd);
            }
        });

        // Focus on load.
        input.focus();
    };
}());


