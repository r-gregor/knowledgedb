https://www.quora.com/In-Go-how-do-I-use-a-map-with-a-string-key-and-a-struct-as-value

In Go how do I use a map with a string key and a struct as value?
Aug 19, 2016

Hi, you would go about solving it as follows.

Iâ€™m assuming you are not referencing the struct using a pointer. A pointer receiver will adress that part of
the memory that the specfic struct allocates whereas a reference will make a local copy of the struct.

type person struct {
    name string
}

var people = map[string]*person{}
    
people["first person"] = &person{name: "My name"}
 
if firstPerson := people["first person"]; firstPerson != nil {
    fmt.Println(firstPerson.name) 
}
 
if noExistingPerson := people["there is no spoon"]; noExistingPerson == nil {
    fmt.Println("This person does not exist")
}


---
https://gist.github.com/feyeleanor/74b7cdcd817a9340a914

Example showing difference between storing struct and *struct in a string:

package main

import "fmt"

type S struct {
    I int
}

func main() {
    m1 := map[string]S{"0": S{0}, "1": S{1}}
    fmt.Println("map[string]struct")
    fmt.Println("\tm1 =", m1)
    fmt.Println("\tchange field I via reference")
    v := m1["0"]
    v.I = 2
    fmt.Println("\tm1 =", m1)
    fmt.Println()

    fmt.Println("\treplace struct in map")
    m1["0"] = S{2}
    fmt.Println("\tm1 =", m1)
    fmt.Println()

    m2 := map[string]*S{"0": &S{0}, "1": &S{1}}
    fmt.Println("map[string]*struct")
    fmt.Printf("\tm2 = map[0:{%v} 1:{%v}]\n", m2["0"].I, m2["1"].I)
    fmt.Println("\tchange field I via reference")
    r := m2["0"]
    r.I = 2
    fmt.Printf("\tm2 = map[0:{%v} 1:{%v}]\n", m2["0"].I, m2["1"].I)
    fmt.Println()

    fmt.Println("\treplace struct in map")
    m2["0"] = &S{3}
    fmt.Printf("\tm2 = map[0:{%v} 1:{%v}]\n", m2["0"].I, m2["1"].I)
    fmt.Println()
}


---
