filename: go_interfaces_20191007.txt
https://www.callicoder.com/golang-interfaces/

Golang Interfaces Tutorial with Examples
Mar 29, 2019

Go Interface
   An interface in Go is a type defined using a set of method signatures. The interface defines the
   behavior for similar type of objects.

   For example, Here is an interface that defines the behavior for Geometrical shapes:
// Go Interface - 'Shape'
type Shape interface {
        Area() float64
        Perimeter() float64
}

   An interface is declared using the type keyword, followed by the name of the interface and the
   keyword interface. Then, we specify a set of method signatures inside curly braces.

Implementing an interface in Go
   To implement an interface, you just need to implement all the methods declared in the interface.

   Go Interfaces are implemented implicitly
   Unlike other languages like Java, you don't need to explicitly specify that a type implements an
   interface using something like an implements keyword.

   Here are two Struct types that implement the Shape interface:
// Struct type 'Rectangle' - implements the 'Shape' interface by implementing all its methods.
type Rectangle struct {
        Length, Width float64
}

func (r Rectangle) Area() float64 {
        return r.Length * r.Width
}

func (r Rectangle) Perimeter() float64 {
        return 2 * (r.Length + r.Width)
}

// Struct type 'Circle' - implements the 'Shape' interface by implementing all its methods.
type Circle struct {
        Radius float64
}

func (c Circle) Area() float64 {
        return math.Pi * c.Radius * c.Radius
}

func (c Circle) Perimeter() float64 {
        return 2 * math.Pi * c.Radius
}

func (c Circle) Diameter() float64 {
        return 2 * c.Radius
}

Using an interface type with concrete values
   An interface in itself is not that useful unless we use it with a concrete type that implements all
   its methods.

   Let's see how an interface can be used with concrete values.
     * An interface type can hold any value that implements all its methods
package main

import (
    "fmt"
    "math"
)

func main() {
    var s Shape = Circle{5.0}
    fmt.Printf("Shape Type = %T, Shape Value = %v\n", s, s)
    fmt.Printf("Area = %f, Perimeter = %f\n\n", s.Area(), s.Perimeter())

    var s1 Shape = Rectangle{4.0, 6.0}
    fmt.Printf("Shape Type = %T, Shape Value = %v\n", s1, s1)
    fmt.Printf("Area = %f, Perimeter = %f\n", s1.Area(), s1.Perimeter())
}

# Output
Shape Type = main.Circle, Shape Value = {5}
Area = 78.539816, Perimeter = 31.415927

Shape Type = main.Rectangle, Shape Value = {4 6}
Area = 24.000000, Perimeter = 20.000000

     * Using Interface types as arguments to functions
package main

import (
    "fmt"
)

// Generic function to calculate the total area of multiple shapes of different types
func CalculateTotalArea(shapes ...Shape) float64 {
    totalArea := 0.0
    for _, s := range shapes {
        totalArea += s.Area()
    }
    return totalArea
}

func main() {
    totalArea := CalculateTotalArea(Circle{2}, Rectangle{4, 5}, Circle{10})
    fmt.Println("Total area = ", totalArea)
}

# Output
Total area =  346.7256359733385

     * Using Interface types as fields
package main

import (
    "fmt"
)

// Interface types can also be used as fields
type MyDrawing struct {
    shapes  []Shape
    bgColor string
    fgColor string
}

func (drawing MyDrawing) Area() float64 {
    totalArea := 0.0
    for _, s := range drawing.shapes {
        totalArea += s.Area()
    }
    return totalArea
}

func main() {
    drawing := MyDrawing{
        shapes: []Shape{
            Circle{2},
            Rectangle{3, 5},
            Rectangle{4, 7},
        },
        bgColor: "red",
        fgColor: "white",
    }

    fmt.Println("Drawing", drawing)
    fmt.Println("Drawing Area = ", drawing.Area())
}

# Output
Drawing {[{2} {3 5} {4 7}] red white}
Drawing Area = 55.56637061435917

Interface values: How does an interface type work with concrete values?

   Under the hood, an interface value can be thought of as a tuple consisting of a value and a concrete
   type:
// interface
(value, type)

   Let's see an example to understand more:
package main

import (
        "fmt"
)

func main() {
        var s Shape

        s = Circle{5}
        fmt.Printf("(%v, %T)\n", s, s)
        fmt.Printf("Shape area = %v\n", s.Area())

        s = Rectangle{4, 7}
        fmt.Printf("(%v, %T)\n", s, s)
        fmt.Printf("Shape area = %v\n", s.Area())
}

# Output
({5}, main.Circle)
Shape area = 78.53981633974483
({4 7}, main.Rectangle)
Shape area = 28

   Checkout the output of the above program and notice how the variable s has information about the
   value as well as the type of the Shape that is assigned to it.

   When we call a method on an interface value, a method of the same name on its underlying type is
   executed.

   For example, in the above program, when we call the method Area() on the variable s, it executes the
   Area() method of its underlying type.

Footnotes

     * [25]How to use interfaces in Go
     * [26]Go Data Structures: Interfaces

   [INS: :INS]

   Liked the Article? Share it on Social media!
   [27]Twitter
   [28]Facebook
   [29]Linkedin
   [30]Reddit
   [INS: :INS]
   Please enable JavaScript to view the [31]Comments powered by Disqus.

Stay in touch

   [32]Facebook
   [33]Twitter
   [34]Linkedin
   [35]Reddit
   [36]Github

Subscribe to our Newsletter

   ____________________
   ____________________
   ____________________
   Subscribe

Recent Articles

   Deploying a full-stack Spring boot, Mysql, and React app on Kubernetes with Persistent Volumes and
   Secrets
   Deploying a stateless Go app with Redis on Kubernetes
   Deploying a containerized Go app on Kubernetes
   Spring Boot, Mysql, React docker compose example
   8 Software engineering principles to live by

Popular Articles

   Spring Boot + Spring Security + JWT + MySQL + React Full Stack Polling App - Part 1
   Building a chat application with Spring Boot and WebSocket
   Java CompletableFuture Tutorial with Examples
   Spring Boot, MySQL, JPA, Hibernate Restful CRUD API Tutorial
   Building a Restful CRUD API with Node.js, Express and MongoDB

Support me

   Love my tutorials? Please support me by donating on the following sites:
   [INS: :INS]
   [INS: :INS]
   [INS: :INS]

   CalliCoder
   Software Development Tutorials written from the heart!
   Copyright Â© 2017-2018
   Resources
     * [37]About & Contact
     * [38]Advertise
     * [39]Recommended Books
     * [40]Recommended Courses
     * [41]Algorithms
     * [42]Privacy Policy
     * [43]Sitemap

   Tools
     * [44]URL Encoder
     * [45]URL Decoder
     * [46]Base64 Encoder
     * [47]Base64 Decoder
     * [48]QRCodeBit
     * [49]ASCII Table
     * [50]JSON Formatter

   Connect
     * [51]Twitter
     * [52]Github
     * [53]Facebook
     * [54]Linkedin
     * [55]Reddit

References

   Visible links
   1. https://plus.google.com/b/103952714703205279563
   2. https://www.callicoder.com/feed.xml
   3. https://www.googletagmanager.com/ns.html?id=GTM-T4Z6B9Q
   4. https://www.callicoder.com/
   5. https://www.callicoder.com/categories/java
   6. https://www.callicoder.com/categories/golang
   7. https://www.callicoder.com/categories/kotlin
   8. https://www.callicoder.com/categories/spring-boot
   9. https://www.callicoder.com/categories/node-js
  10. https://www.callicoder.com/categories/system-design
  11. https://www.callicoder.com/categories/devops
  12. https://www.callicoder.com/categories/javafx
  13. https://www.callicoder.com/about
  14. https://www.callicoder.com/categories/java
  15. https://www.callicoder.com/categories/golang
  16. https://www.callicoder.com/categories/kotlin
  17. https://www.callicoder.com/categories/spring-boot
  18. https://www.callicoder.com/categories/node-js
  19. https://www.callicoder.com/categories/system-design
  20. https://www.callicoder.com/categories/devops
  21. https://www.callicoder.com/categories/javafx
  22. https://www.callicoder.com/about
  23. https://www.callicoder.com/about
  24. https://www.callicoder.com/categories/golang
  25. http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go
  26. https://research.swtch.com/interfaces
  27. https://twitter.com/intent/tweet?text=Golang%20Interfaces%20Tutorial%20with%20Examples&url=https%3a%2f%2fwww.callicoder.com%2fgolang-interfaces%2f&via=callicoder&related=callicoder
  28. http://www.facebook.com/sharer/sharer.php?u=https%3a%2f%2fwww.callicoder.com%2fgolang-interfaces%2f
  29. https://www.linkedin.com/shareArticle?url=https%3a%2f%2fwww.callicoder.com%2fgolang-interfaces%2f&mini=true&title=Golang%20Interfaces%20Tutorial%20with%20Examples&source=CalliCoder
  30. https://reddit.com/submit?url=https%3a%2f%2fwww.callicoder.com%2fgolang-interfaces%2f&title=Golang%20Interfaces%20Tutorial%20with%20Examples
  31. https://disqus.com/?ref_noscript
  32. https://www.facebook.com/callicoder
  33. https://twitter.com/callicoder
  34. https://www.linkedin.com/in/callicoder/
  35. https://www.reddit.com/user/callicoder
  36. https://github.com/callicoder/
  37. https://www.callicoder.com/about
  38. https://www.callicoder.com/advertise
  39. https://www.callicoder.com/recommended-books
  40. https://www.callicoder.com/recommended-courses
  41. https://www.callicoder.com/categories/algorithms
  42. https://www.callicoder.com/privacy-policy
  43. https://www.callicoder.com/sitemap.xml
  44. https://www.urlencoder.io/
  45. https://www.urldecoder.io/
  46. https://www.base64encoder.io/
  47. https://www.base64decoder.io/
  48. https://www.qrcodebit.com/
  49. https://www.asciitable.xyz/
  50. https://www.jsonformatter.io/
  51. https://twitter.com/callicoder
  52. https://github.com/callicoder
  53. https://www.facebook.com/callicoder
  54. https://www.linkedin.com/in/callicoder
  55. https://www.reddit.com/user/callicoder

   Hidden links:
  56. https://www.callicoder.com/deploy-spring-mysql-react-nginx-kubernetes-persistent-volume-secret/
  57. https://www.callicoder.com/deploy-multi-container-go-redis-app-kubernetes/
  58. https://www.callicoder.com/deploy-containerized-go-app-kubernetes/
  59. https://www.callicoder.com/spring-boot-mysql-react-docker-compose-example/
  60. https://www.callicoder.com/software-development-principles/
  61. https://www.callicoder.com/spring-boot-spring-security-jwt-mysql-react-app-part-1/
  62. https://www.callicoder.com/spring-boot-websocket-chat-example/
  63. https://www.callicoder.com/java-8-completablefuture-tutorial/
  64. https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/
  65. https://www.callicoder.com/node-js-express-mongodb-restful-crud-api-tutorial/
  66. https://www.patreon.com/callicoder
  67. https://paypal.me/callicoder/25


---

