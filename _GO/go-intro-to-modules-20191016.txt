filename: go_intro-to-modules_20191016.txt
https://dev.to/prassee/intro-to-modules-on-go-part-1-1k77

Intro to Modules on Go - Part 1

What are Go modules?
   Starting from Go 1.11 'modules' have been introduced to ease / formalize code sharing between Go
   projects much like other mainstream languages.

   Go Modules are very handy way to contain the code into distributable units.
   We declare a project as module by using the go mod command. This modules
   created can be included as "dependency".

Writing a Go Module
   Lets write a module which doubles a number. A Go module is nothing but a simple Go project but that
   resides outside your $GOPATH. Go modules are initialized in project
   with the go mod command. Let create a dir called localmod1 outside $GOPATH
   and init module with the command

$> mkdir localmod1
$> cd localmod1
$> go mod init localmod1

   This above step creates a go.mod file. It has the below contents.
module localmod1

go 1.12

   Create a file called localmod1.go now and put the below code.

<code>
package localmod1

import (
    "fmt"
)

func DblX(x int) int {
    fmt.Printf("dboubling %v", x)
    return x * 2
}
</code>

   now our module is ready with some real code. Next step is to consume it so that we prepare it for
   other modules to use them.

Using published module in another Go module
   Modules can be consumed in two ways either from local or directly from github. Though the latter is
   the most recommended however, on some cases it make sense (and useful) to treat as if they are
   published locally.

   Lets create another module say usingmod1 which uses localmod1.

$> mkdir usingmod1
$> cd usingmod1
$> go mod init usingmod1

   like before the above step creates a empty go.mod file as shown below
module usingmod1
go 1.12

     * local

   Now lets use the 'localmod1' by adding it as a dependency. Since localmod1 is still in our local but
   we can assume that its been published to github thereby creating an alias pointing to location of
   localmod1 absolute path. Add the following lines to go.mod
    require github.com/prassee/localmod1 v0.0.0
    replace github.com/prassee/localmod1 => ../localmod1

   here the git repo github.com/prassee/localmod1 is an imaginary or yet to create location. After
   adding lets run 'go mod tidy' command to let go to formalize our dependency definition. The upadted
   version look like below.
   
    module usingmod1
    replace github.com/prassee/localmod1 => ../localmod1
    go 1.12
    require github.com/prassee/localmod1 v0.0.0-00010101000000-000000000000 // indirect

   Now we are all set to use the imported module in our code. In main.go add the following lines.
   
<code>
package main

import (
    "fmt"
    "github.com/prassee/localmod1"
)

func main() {
    fmt.Printf("using mod1")
    localmod1.DblX(23)
}
</code>

   Thats for now. In the next [**1]part we can explore
   how to publish a module in to Github .

   until then enjoy Go modules ...

   References

   Iam still picking up Go here are the references I've used to learn myself writing Go modules.
   [**2]https://roberto.selbach.ca/intro-to-go-modules/

---
[**1]
https://dev.to/prassee/intro-to-modules-on-go-part-2-ijj

Intro to Modules on Go - Part 2

   In the previous post we saw how to init modules, write one, publish it (locally with replace
   directive) & use it on another Go project / module. This part we are going to publish the module to
   github and get rid of replace way of aliasing.

Publishing to Github
   Publshing to github is a no-brainer just init a git repo and push it to github. However the name of
   the repo does matters here since the consumers of our module would use that as the identifier.

   Lets change the go.mod file on localmod1. So that it points to a proper git repo than just a name.
   
module github.com/prassee/localmod1

go 1.12

   now lets push it to github.
$> git init .
$> git remote add origin git@github.com:prassee/localmod1.git
...
$> git cm 'initial commit'
$> git push origin master

   Now the module is published to github. Lets proceed further to use it on other modules.

Using in other modules
   This step does not require any coding but we just need to edit go.mod file. Lets open usingmod1
   module's go.mod file.
   
module usingmod1
replace github.com/prassee/localmod1 => ../localmod1
go 1.12

require github.com/prassee/localmod1 v0.0.0-00010101000000-000000000000 // indirect

   in the above we just need to replace the 2nd line with the following and updated version should look
   like below.
module usingmod1
require github.com/prassee/localmod1 v1.0.2
go 1.12

   now if we run go mod tidy. we can see its downloading the artifact with the version as we desired.
$> go mod tidy
go: finding github.com/prassee/localmod1 v1.0.2
go: downloading github.com/prassee/localmod1 v1.0.2
go: extracting github.com/prassee/localmod1 v1.0.2

   Notes
     * Across this excercise we never used go get command or had any vendor folder to manage our
       dependenceis.
     * Modules were written outside the GOPATH.

   Thats all folks .... I think I had covered the extent I know about Go Modules.


---
[**2]
https://roberto.selbach.ca/intro-to-go-modules/

Introduction to Go Modules

   The upcoming version 1.11 of the Go programming language will bring experimental support for modules,
   a new dependency management system for Go. A few days ago, I wrote a quick post about it. Since
   that post went live, things changed a bit and as we're now very close to the new release, I thought
   it would be a good time for another post with a more hands-on approach. So here's what we'll do:
   we'll create a new package and then we'll make a few releases to see how that would work.

Creating a Module
   So first things first. Let's create our package. We'll call it "testmod". An important detail here:
   this directory should be outside your $GOPATH because by default, the modules support is disabled
   inside it. Go modules is a first step in potentially eliminating $GOPATH entirely at some point.
$> mkdir testmod
$> cd testmod

   Our package is very simple:
   
<code>
package testmod

import "fmt"

// Hi returns a friendly greeting
func Hi(name string) string {
   return fmt.Sprintf("Hi, %s", name)
}
</code>

   The package is done but it is still not a module. Let's change that.
$> go mod init github.com/robteix/testmod
go: creating new go.mod: module github.com/robteix/testmod

   This creates a new file named go.mod in the package directory with the following contents:
module github.com/robteix/testmod

   Not a lot here, but this effectively turns our package into a module. We can now push this code to a
   repository:
$> git init
$> git add *
$> git commit -am "First commit"
$> git push -u origin master

   Until now, anyone willing to use this package would go get it:
$> go get github.com/robteix/testmod

   And this would fetch the latest code in master. This still works, but we should probably stop doing
   that now that we have a Better Way. Fetching master is inherently dangerous as we can never know for
   sure that the package authors didn't make change that will break our usage. That's what modules aims
   at fixing.

Quick Intro to Module Versioning
   Go modules are versioned, and there are some particularities with regards to certain versions. You
   will need to familiarize yourself with the concepts behind [16]semantic versioning.

   More importantly, Go will use repository tags when looking for versions, and some versions are
   different of others: e.g. versions 2 and greater should have a different import path than versions 0
   and 1 (we'll get to that.) As well, by default Go will fetch the latest tagged version available in a
   repository. This is an important gotcha as you may be used to working with the master branch. What
   you need to keep in mind for now is that to make a release of our package, we need to tag our
   repository with the version. So let's do that.

Making our first release
   Now that our package is ready, we can release it to the world. We do this by using version tags.
   Let's release our version 1.0.0:
$> git tag v1.0.0
$> git push --tags

   This creates a tag on my Github repository marking the current commit as being the release 1.0.0.

   Go doesn't enforce that in any way, but a good idea is to also create a new branch ("v1") so that we
   can push bug fixes to.
$> git checkout -b v1
$> git push -u origin v1

   Now we can work on master without having to worry about breaking our release.

Using our module
   Now we're ready to use the module. We'll create a simple program that will use our new package:

<code>
package main

import (
    "fmt"

    "github.com/robteix/testmod"
)

func main() {
    fmt.Println(testmod.Hi("roberto"))
}
</code>

   Until now, you would do a go get github.com/robteix/testmod to download the package, but with
   modules, this gets more interesting. First we need to enable modules in our new program.
$> go mod init mod

   As you'd expect from what we've seen above, this will have created a new go.mod file with the module
   name in it:
module mod

   Things get much more interesting when we try to build our new program:
$> go build
go: finding github.com/robteix/testmod v1.0.0
go: downloading github.com/robteix/testmod v1.0.0

   As we can see, the go command automatically goes and fetches the packages imported by the program. If
   we check our go.mod file, we see that things have changed:
module mod
require github.com/robteix/testmod v1.0.0

   And we now have a new file too, named go.sum, which contains hashes of the packages, to ensure that
   we have the correct version and files.
github.com/robteix/testmod v1.0.0 h1:9EdH0EArQ/rkpss9Tj8gUnwx3w5p0jkzJrd5tRAhxnA=
github.com/robteix/testmod v1.0.0/go.mod h1:UVhi5McON9ZLc5kl5iN2bTXlL6ylcxE9VInV71RrlO8=

Making a bugfix release
   Now let's say we realized a problem with our package: the greeting is missing ponctuation! People are
   mad because our friendly greeting is not friendly enough. So we'll fix it and release a new version:
// Hi returns a friendly greeting
func Hi(name string) string {
-       return fmt.Sprintf("Hi, %s", name)
+       return fmt.Sprintf("Hi, %s!", name)
}

   We made this change in the v1 branch because it's not relevant for what we'll do for v2 later, but in
   real life, maybe you'd do it in master and then back-port it. Either way, we need to have the fix in
   our v1 branch and mark it as a new release.
$> git commit -m "Emphasize our friendliness" testmod.go
$> git tag v1.0.1
$> git push --tags origin v1

Updating modules
   By default, Go will not update modules without being asked. This is a Good Thing as we want
   predictability in our builds. If Go modules were automatically updated every time a new version came
   out, we'd be back in the uncivilized age pre-Go1.11. No, we need to tell Go to update a modules for
   us.

   We do this by using our good old friend go get:
     * run go get -u to use the latest minor or patch releases (i.e. it would update from 1.0.0 to, say,
       1.0.1 or, if available, 1.1.0)
     * run go get -u=patch to use the latest patch releases (i.e., would update to 1.0.1 but not to
       1.1.0)
     * run go get package@version to update to a specific version (say,
       github.com/robteix/testmod@v1.0.1)

   In the list above, there doesn't seem to be a way to update to the latest major version. There's a
   good reason for that, as we'll see in a bit.

   Since our program was using version 1.0.0 of our package and we just created version 1.0.1, any of
   the following commands will update us to 1.0.1:
$> go get -u
$> go get -u=patch
$> go get github.com/robteix/testmod@v1.0.1

   After running, say, go get -u our go.mod is changed to:
module mod
require github.com/robteix/testmod v1.0.1

Major versions
   According to semantic version semantics, a major version is different than minors. Major versions can
   break backwards compatibility. From the point of view of Go modules, a major version is a different
   package completely. This may sound bizarre at first, but it makes sense: two versions of a library
   that are not compatible with each other are two different libraries.

   Let's make a major change in our package, shall we? Over time, we realized our API was too simple,
   too limited for the use cases of our users, so we need to change the Hi() function to take a new
   parameter for the greeting language:

<code>
package testmod

import (
    "errors"
    "fmt"
)

// Hi returns a friendly greeting in language lang
func Hi(name, lang string) (string, error) {
    switch lang {
    case "en":
        return fmt.Sprintf("Hi, %s!", name), nil
    case "pt":
        return fmt.Sprintf("Oi, %s!", name), nil
    case "es":
        return fmt.Sprintf("Hola, %s!", name), nil
    case "fr":
        return fmt.Sprintf("Bonjour, %s!", name), nil
    default:
        return "", errors.New("unknown language")
    }
}
</code>

   Existing software using our API will break because they (a) don't pass a language parameter and (b)
   don't expect an error return. Our new API is no longer compatible with version 1.x so it's time to
   bump the version to 2.0.0.

   I mentioned before that some versions have some peculiarities, and this is the case now. Versions
   2 and over should change the import path. They are different libraries now.

   We do this by appending a new version path to the end of our module name.
module github.com/robteix/testmod/v2

   The rest is the same as before, we push it, tag it as v2.0.0 (and optionally create a v2 branch.)
$> git commit testmod.go -m "Change Hi to allow multilang"
$> git checkout -b v2 # optional but recommended
$> echo "module github.com/robteix/testmod/v2" > go.mod
$> git commit go.mod -m "Bump version to v2"
$> git tag v2.0.0
$> git push --tags origin v2 # or master if we don't have a branch

Updating to a major version
   Even though we have released a new incompatible version of our library, existing software will not
   break, because it will continue to use the existing version 1.0.1. go get -u will not get version
   2.0.0.

   At some point, however, I, as the library user, may want to upgrade to version 2.0.0 because maybe I
   was one of those users who needed multi-language support.

   I do it but modifying my program accordingly:

<code>
package main

import (
    "fmt"
    "github.com/robteix/testmod/v2"
)

func main() {
    g, err := testmod.Hi("Roberto", "pt")
    if err != nil {
        panic(err)
    }
    fmt.Println(g)
}
</code>

   And then when I run go build, it will go and fetch version 2.0.0 for me. Notice how even though the
   import path ends with "v2", Go will still refer to the module by its proper name ("testmod").

   As I mentioned before, the major version is for all intents and purposes a completely different
   package. Go modules does not link the two at all. That means we can use two incompatible versions in
   the same binary:

<code>
package main
import (
    "fmt"
    "github.com/robteix/testmod"
    testmodML "github.com/robteix/testmod/v2"
)

func main() {
    fmt.Println(testmod.Hi("Roberto"))
    g, err := testmodML.Hi("Roberto", "pt")
    if err != nil {
        panic(err)
    }
    fmt.Println(g)
}
</code>
