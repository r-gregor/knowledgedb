filename: ubuntuguide_video_conversions_20150511.txt
http://ubuntuguide.org/wiki/Video_Conversion

Video Conversion

   This guide does not advocate the illegal duplication of copyrighted content. However, fewer and fewer
   devices use DVDs any longer, and a large amount of video content is distributed on DVDs. It becomes
   necessary to convert video content into formats that can be viewed on devices that no longer used
   DVDs. Furthermore, online content is often in a format that is not universally playable and this also
   requires conversion. Trying to select and encode a video into a format which your device accepts is
   not always a straightforward task.

Introduction

   There are lots of video and audio codecs and lots of methods and preferences for converting between
   formats. These are only some basic examples. A good deal of trial and error is often required for
   successful video conversion.
     * Mencoder and FFMPEG are the two packages that are the workhorses of video conversion. Of these,
       mencoder is faster and generally gives better results.

     * [39]Handbrake uses a streaming algorithm and FFMPEG to "rip" DVDs and can work with many
       different encryption methods. It uses the (superior, open source) [40].MKV container only,
       however (which is not supported by many devices). It also does not support [41]XVID (and uses
       either [42]X264/H.264 or [43]MP4 video codecs) and therefore its video output is also not
       universally accepted by a wide range of devices. As these standards become more widely accepted,
       however, this will be an invaluable encoding tool. On rare occasions I rip a video with Handbrake
       (to .MKV and H.264/MP3) and then convert it to .AVI (XVID/MP3) in a second step (using mencoder).

     * When I originally wrote these articles, .MKV was accommodated by only a handful of DVD players. A
       recent survey of new DVD players shows that most (including widely available inexpensive DVD
       players) will now play files in .MKV format. In fact, it is now difficult to find DVD players
       that will still play .AVI with XVID / DivX video. However, over the years I have accumulated a
       very large collection of .AVI / XVID / MP3 videos. In 2013, there were only a limited number of
       DVD players that advertised DivX and .AVI compatibility that I could find (including some Philips
       players) that would play them all. Check compatibility charts for players carefully if you find
       yourself with a large collection of .AVI / XVID video files.

Mencoder

   [44]Mencoder is part of the [45]MPlayer set of libraries (that also uses several of the FFMPEG
   libraries) for audio/visual conversion. If it is not installed on your system, install it:
sudo apt-get install mencoder

   Usage instructions can be found from the command-line (man mencoder) or [46]here.

MP4 with AAC audio to AVI with Xvid / MP3

     * The [47]AAC audio codec is not compatible with many DVD players and devices due to licensing
       restrictions, whereas the MP3 audio codec is nearly universally accepted. Xvid is the open source
       version of the DivX video codec and is accepted by a very large number of DVD players and other
       devices (even older ones, especially those displaying the DivX logo).

     * The [48].AVI container only allows a [49]constant bitrate, so the MP3 audio must be encoded at
       CBR. If the AAC is [50]5.1, it will be downcoded to stereo for MP3.

     * This example is a two-pass technique that allows the file size to be specified and quality
       optimized for that filesize (using the information generated in the first pass). In this example,
       a 700 MB file is desired (and is specified by the negative value of 620000, which by a quirk of
       mencoder gives an approximately 700 MB file).

mencoder <input.mp4> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=1 -o /dev/null
mencoder <input.mp4> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=2:bitrate=-620000 \
	-o <output.avi>

     * This basic command can be used for most input formats. For example, <input.mp4> can be replaced
       with <input.mkv> (for .MKV videos) or with <input.wmv> (for .WMV videos).

DVD to AVI with Xvid / MP3

     * See the [51]mencoder documentation.
     * Extract a video (in the .vob format) from a DVD to a file with an [52].AVI container and
       [53]XVID/DivX video and [54].MP3 audio using this (2-pass conversion) command:

mencoder dvd://1 -vobsub 999 -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=1 -o /dev/null
mencoder dvd://1 -vobsub 999 -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=2:bitrate=-620000 \
	-o <output.avi>

   where dvd://1 indicates the first track of the DVD.
     * If you are not sure which track contains the content you wish to extract to a file, one way to
       check this is to play the DVD with a media player like VLC, examining the tracks on it:

          VLC -> Media -> Open Disc... -> Play -> Playback -> Navigation

   or from the command line install lsdvd (sudo apt-get install lsdvd) and use it:
lsdvd -v -t 1 /dev/dvd

   This will show a list of the title numbers (for the content tracks) on the DVD (and information about
   them). Use the title number for the content to be extracted.
     * Conversion is much faster when done from from a hard drive than from a physical DVD. It is
       possible to copy the VIDEO_TS and AUDIO_TS folders from the physical DVD to a folder on the hard
       drive. Once you have copied the contents of the DVD to a folder, add the -dvd-device
       /path/to/dvd_folder option to specify it (with the same options as above in addition to the new
       one):

mencoder dvd://1 -dvd-device /path/to/dvd_folder

     * Note the -vobsub 999 option to prevent subtitles from being automatically added. (If you wish to
       hardcode subtitles, use the number of the subtitle track, such as -sid 0 or -vobsubid 0 for the
       default subtitle track or -sid 1 or -vobsubid 1 for the next subtitle track. Note that mencoder
       numbers tracks from 0, so that subtitle track 1 would be designated -sid 0.)

     * Other options for video cropping and scaling can be used. See [55]these hints and [56](se below --- ),
     these tips, as well as [57]this section (Cropping and Scaling).

     * When better audio quality is desired, an audio [58]bitrate more than 128 kb/sec can be used (e.g.
       br=160 or br=192), but this will give a larger file (or will decrease video quality if the
       filesize remains constant). cbr (constant bitrate) is used for mp3lame encoding in .AVI; I
       generally increase the volume of the video by 30% using the vol=3 option, as well. My final audio
       command therefore usually ends up: -oac mp3lame -lameopts cbr:br=128:vol=3.

     * If there are multiple audio tracks, the audio track can be selected with the -aid 1 (or similar)
       option, specifying the number of the desired audio track. (Note: check audio track numbering
       carefully.) The English default audio track is usually -aid 128. To show information about the
       audio tracks, use

lsdvd -a -t 1 /dev/dvd

     * Although the bitrate=-700000 option specifies a target file size of 700000 (approx. 700 MB), this
       actually results in a file size of nearly 800 MB. Specify a target filesize about 15% less than
       actually desired, therefore. For a target 700 Mb file, for example, I use bitrate=-620000.

     * For XVID there is an option to allow video seeking (for fast forwarding or rewinding) in 1 second
       increments (instead of the default 10 second increments): -xvidencopts max_key_interval=25 (seek
       every 25 frames instead of the default 250 frames). This would be included as part of a more
       complex option string, such as -xvidencopts pass=2:max_key_interval=25:bitrate=-620000.

     * In order to play the converted .AVI file on my older DVD players and televisions (and avoid
       significant motion artifacts and pixelation), I find that I must use deinterlacing. Only two
       interlacing methods have worked well for me: -vf pp=lb or -vf yadif=0. There are many methods of
       deinterlacing for mencoder, however (see [59]here and [60]here, for example). Deinterlacing may
       not be necessary for your needs (when used for archival purposes only, for example, or if viewing
       files with media players (such as VLC) that already have built-in deinterlacing capabilities).
       Often recommended when ripping NTSC-format movies (progressive or telecined) is to include the
       option -vf pullup,softskip,harddup, which must be used with a deinterlacing filter, such as -vf
       pullup,softskip,pp=lb,harddup (or -vf pullup,softskip,yadif=0,harddup). The order of the
       telecine/progressive option, the deinterlacing option, and any cropping or scaling options is
       very specific -- read the [61]mencoder documentation carefully when mixing these options.
       Specifically, cropping and scaling (when used) should be done after the
       telecine/progressive/deinterlacing options but before the frame duplication option, e.g. -vf
       pullup,softskip,pp=lb,crop=720:416:0:80,scale=704:304,harddup.

     * Note: You will need [62]libdvdcss2 installed on your system to access DVD data. If your DVD has
       encryption that is not able to be decrypted by libdvdcss, then consider using [63]Handbrake,
       which uses a streaming algorithm to "rip" DVDs.

     * This is the 2-pass command I end up using most often (with 4:3 NTSC videos):

mencoder dvd://1 -dvd-device /path/to/dvd_folder -vf pullup,softskip,pp=lb,scale=640:480,harddup -vobsub 999 \
	-aid 128 -ovc xvid -oac mp3lame -lameopts cbr:br=128:vol=3 -xvidencopts pass=1 -o /dev/null

mencoder dvd://1 -dvd-device /path/to/dvd_folder -vf pullup,softskip,pp=lb,scale=640:480,harddup -vobsub 999 \
	-aid 128 -ovc xvid -oac mp3lame -lameopts cbr:br=128:vol=3 -xvidencopts \
	pass=2:max_key_interval=25:bitrate=-620000 -o <output.avi>

          or

mencoder dvd://1 -dvd-device /path/to/dvd_folder -vf pullup,softskip,pp=lb,harddup -vobsub 999 -aid 128 \
	-ovc xvid -oac mp3lame -lameopts cbr:br=128:vol=3 -xvidencopts pass=1 -o /dev/null

mencoder dvd://1 -dvd-device /path/to/dvd_folder -vf pullup,softskip,pp=lb,harddup -vobsub 999 -aid 128 \
	-ovc xvid -oac mp3lame -lameopts cbr:br=128:vol=3 -xvidencopts \
	pass=2:max_key_interval=25:bitrate=-620000 -o <output.avi>

          Note: While scale=720:540 will also give a 4:3 aspect ratio (1.33), many TVs will only allow a
          maximum height of 480, so I do not use it. Also note that not specifying the scale (as in the
          second command example) always gives a default 720:480 aspect ratio (which is a 1.5 ratio
          instead of 1.33), which may distort the aspect somewhat. I therefore no longer use this second
          command example and instead specify the aspect ratio explicitly (as in the first command
          example).

     * This is the 2-pass command I end up using most often (with 16:9 NTSC videos):

mencoder dvd://1 -dvd-device /path/to/dvd_folder -vf pullup,softskip,pp=lb,scale=720:406,harddup -vobsub 999 \
	-aid 128 -ovc xvid -oac mp3lame -lameopts cbr:br=128:vol=3 -xvidencopts pass=1 -o /dev/null

mencoder dvd://1 -dvd-device /path/to/dvd_folder -vf pullup,softskip,pp=lb,scale=720:406,harddup -vobsub 999 \
	-aid 128 -ovc xvid -oac mp3lame -lameopts cbr:br=128:vol=3 -xvidencopts \
	pass=2:max_key_interval=25:bitrate=-620000 -o <output.avi>

          The scale option is set for use on most widescreen TVs. However, an alternative is to use
          scale=648:364 so that I can play the video on analogue televisions with overscan (I still have
          a few of those).

Using k9copy as a conversion front-end

     * [64]k9copy is a good front-end for mencoder (as well as ffmpeg).
     * To add an option to encode to XVID from an NTSC DVD (when using mencoder within k9copy), I add
       the necessary options to the Video codecs section:

          k9copy -> Configure k9copy -> Encoders -> mencoder -> Add -> label: XVID from NTSC -> first
          pass ->

-ovc xvid -xvidencopts bitrate=$VIDBR:turbo:pass=$PASS:aspect=$ASPECT -vf pullup,softskip,pp=lb,\
	crop=$CROPWIDTH:$CROPHEIGHT:$CROPLEFT:$CROPTOP,scale=$WIDTH:$HEIGHT,dsize=$ASPECT,harddup

   The same command is entered for the "second pass" option as well. For the "one pass" option enter:
-ovc xvid -xvidencopts bitrate=$VIDBR:aspect=$ASPECT -vf pullup,softskip,pp=lb,\
	crop=$CROPWIDTH:$CROPHEIGHT:$CROPLEFT:$CROPTOP,scale=$WIDTH:$HEIGHT,dsize=$ASPECT,harddup

     * To then use this new Video codec option, make sure it is selected:

          k9copy -> Configure k9copy -> MPEG-4 -> Video -> Codec -> XVID from NTSC -> 2 pass (ticked) ->
          Apply

   At the same time, the MP3 (lame) Audio codec option can be selected:

          k9copy -> Configure k9copy -> MPEG-4 -> Audio -> Codec -> mp3 (lame) -> OK

     * Now when the Output: MPEG-4 encoding is selected from the main screen, this "XVID from NTSC"
       Video encoding option will be used.

     * Note that the -vf
       pullup,softskip,pp=lb,crop=$CROPWIDTH:$CROPHEIGHT:$CROPLEFT:$CROPTOP,scale=$WIDTH:$HEIGHT,dsize=$
       ASPECT,harddup option can be used with any Video codec, not just XVID.

AVI to MPG

     * The MPG format is sometimes useful for [65]creating DVDs (using the [66]MPEG-1 or [67]MPEG-2
       video codec, which can be then used for conversion to vob files. If the audio codec of the AVI
       file is already AC3 or MP3, it usually can be copied. This example is taken from the
       [68]MPlayer/Mencoder documentation. Example:

mencoder <input.avi> -of mpeg -ovc lavc -lavcopts vcodec=mpeg1video -oac copy -o <output.mpg>

Increase volume

     * Use the -af volume=3:0 option, where the first number (3 in the example) is the number of
       decibels to increment the volume (a 3 db increment doubles the volume), and the second number is
       0 for hard-clipping and 1 to allow software-based clipping (to prevent oversaturation when the
       sound becomes too loud).

   For example, if I want to double the sound volume of my .AVI video:
mencoder <input.avi> -ovc copy -oac mp3lame -lameopts cbr:br=128 -af volume=3:0 -o <output.avi>

     * This can also be done when encoding to the mp3lame audio codec by adding an option to the mp3lame
       options:

mencoder <input.avi> -ovc copy -oac mp3lame -lameopts cbr:br=128:vol=3 -o <output.avi>

          where vol=3 can be set to any value between -10 and 10. I use vol=3 to increase the volume
          30%. (This method works best for me.)

Re-synchronize audio with video

   If the audio track is out of synch with the video, it can be adjusted using the -audio-delay [sec]
   option. For example, if it is found (using [69]VLC -> Tools -> Track Synchronization, for example)
   that the required delay is 0.700 sec, then re-encode using -audio-delay 0.700:
mencoder <input.avi> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -audio-delay 0.700 -xvidencopts pass=1 \
	-o /dev/null

mencoder <input.avi> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -audio-delay 0.700 -xvidencopts \
	pass=2:bitrate=-620000 -o <output.avi>

Add subtitles to video

     * [70].srt subtitle files are essentially text files with time stamps. They are meant to be used
       with digital video files (such as .AVI files) and are different from the image-based .idx / .sub
       subtitle files (vobsub) used with the [71].vob format found on commercial DVDs.

     * Using mencoder:

mencoder -ovc [codec] [codec opts] -oac copy -sub [sub file.srt] -subfont-text-scale [3 normally]

   In the example above, this would be:
mencoder <input.mp4> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=2:bitrate=-620000 \
	-sub <subtitles.srt> -subfont-text-scale 3 -o <output.avi>

     * If the subtitles are too low or too high on the screen, they can be positioned so that the top
       edge of the subtitles are at a different position using the -subpos 95 option, where the number
       specifies the percentage from the top of the screen where the subtitles will be placed. For
       example, if using the value 95, the top of the subtitles will be placed 95% down the screen. The
       full command would then be, for example:

mencoder <input.mp4> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=2:bitrate=-620000 \
	-sub <subtitles.srt> -subfont-text-scale 3 -subpos 95 -o <output.avi>

     * Full subtitle options can be found in the manual (available from the command-line terminal): man
       mencoder

     * Note: When adding subtitles to an .AVI video, you must transcode it completely. It is not
       sufficient to merely add the subtitle track as listed above -- the entire video must be
       re-transcoded. So, for example:

mencoder <input.avi> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=1 -o /dev/null
mencoder <input.avi> -ovc xvid -oac mp3lame -lameopts cbr:br=128 -xvidencopts pass=2:bitrate=-1200000 \
	-sub <subtitles.srt> -subfont-text-scale 3 -o <output.avi>

Trim a video

     * Using mencoder:

mencoder <input.avi> -ovc copy -oac mp3lame -ss 01:57:12 -endpos 00:04:08 -o <output.avi>

   where -ss indicates the start position of the clip (hh:mm:ss) and -endpos indicates how long the clip
   should be. (I use mp3lame for the audio codec because YouTube accepts that.)

Resize a video

     * Using mencoder:

mencoder <input.avi> -ovc xvid -vf scale=320:240 -oac mp3lame -lameopts cbr:br=128 -xvidencopts \
	pass=2:bitrate=-1200000 -o <output.avi>

   where -vf scale=320x240 indicates that the resulting video should be of that size. The position of
   the suboption in the command string is important.
     * [72]HDTV resolution is usually 1920 x 1080 ("1080p") or 1280 x 720 ("720p"). A [73]standard
       definition widescreen TV has a maximum height of "480p" (usually 853 x 480 but often 720 x 406).
       The standard width:height [74]aspect ratio for cinema is 1.85:1 (although increasingly the
       original filming aspect of 2.35:1 is being used), whereas the average aspect ratio for widescreen
       movies distributed for display on television is 16:9 (1.77:1). When resizing a video, it is good
       to know the original dimensions of the video and maintain the width to height aspect ratio in the
       chosen scale.

          + Example: An HQ video is distributed as 1280 x 692 (which has an aspect ratio of 1.85:1). The
            device (a low resolution television) on which it is to be displayed has a maximum width of
            720. The desired resolution would then be 720 x 390 to keep the aspect ratio at
            approximately 1.85:1. The option would then be -vf scale=720:390. An analog television would
            require 10% [75]overscan, making the maximum width 648. To keep an aspect ratio of 1.85:1
            would require a resolution of 648 x 350, or a scale option of -vf scale=648:350.

          + Example: An HQ video is distributed as 1280 x 544 (which has an aspect ratio of 2.35:1). The
            device (a low resolution television) on which it is to be displayed has a maximum width of
            720. The desired resolution would then be 720 x 306 to keep the aspect ratio at
            approximately 2.35:1. The option would then be -vf scale=720:306. An analog television would
            require 10% [76]overscan, making the maximum width 648. To keep an aspect ratio of 2.35:1
            would require a resolution of 648 x 272, or a scale option of -vf scale=648:272.

          + Example: An HQ video is distributed as 1920 x 1080 (which has an aspect ratio of 16:9, or
            1.77:1). The device (a low resolution television) on which it is to be displayed has a
            maximum width of 720. The desired resolution would then be 720 x 406 to keep the aspect
            ratio at approximately 16:9. The option would then be -vf scale=720:406. An analog
            television would require 10% [77]overscan making the maximum width 648. To keep an aspect
            ratio of 16:9 would require a resolution of 648 x 364, or a scale option of -vf
            scale=648:364.

     * [78]"Standard" definition [79]analog television has a 4:3 ratio (1.33:1), for which a scale of
       640:480 (-vf scale=640:480) is generally preferable.

          + Example: An HQ video is distributed as 960 x 720 (which has an aspect ratio of 1.33:1). The
            device (a low resolution television) on which it is to be displayed has a maximum width of
            720. The desired resolution would then be 720 x 540 to keep the aspect ratio at
            approximately 1.33:1. The option would then be -vf scale=720:540. An analog television would
            require 10% [80]overscan, for which the original standard dimensions 640:480 would suffice.
            To keep the aspect ratio of 1.33:1 and a resolution of 640 x 480, use the scale option of
            -vf scale=640:480.

     * It is possible to use [81]VLC to determine the aspect ratio of the original video while it is
       playing:

          VLC -> Tools -> Codec Information -> Stream 0: Resolution

[57] Cropping and Scaling

     * The -vf filters operate on the video in the order they are loaded. The crop filter uses
       width:height:x-offset:y-offset. (The default x-offset and y-offset is centered, so these are
       optional.) For example, to first crop the 688x464 region of the picture with upper-left corner at
       (x=12,y=4) and then scale the result down to 640x464, the following chain is used:

-vf crop=688:464:12:4,scale=640:464

   If I want to remove subtitles (-sid 999), crop out black bars and extraneous noise at the top/bottom
   of an .mkv video, scale it, and convert to an .avi format, an example command might be:
mencoder <input.mkv> -sid 999 -ovc xvid -oac mp3lame -oac mp3lame -lameopts cbr:br=128 -xvidencopts \
	pass=1:bitrate=-620000 -vf crop=1280:688,scale=720:406 -o <output.avi>

Convert to .MP3 audio file

     * To use Mplayer to extract audio from an .avi file to an ,mp3 .wav file:

mencoder <input.avi> -of rawaudio -oac mp3lame -ovc copy -o <output.mp3>

          + This can be combined with start markers (-ss hh:mm:ss) and a length marker (-endpos
            hh:mm:ss) to extract only a segment of audio from an .avi file. In the following example,
            only audio from starting position at 3 minutes 45 seconds with a length of 2 minutes 4
            seconds will be extracted:

mencoder <input.avi> -ss 00:03:45 -endpos 00:02:04 -of rawaudio -oac mp3lame -ovc copy -o <output.mp3>

     * (Under construction) To use Mplayer to extract audio to a pcm .wav file:

mplayer <input.avi> -vc null -oa pcm -aofile -ss 1441.4 -endpos 260.1 <output.wav>

          + Then convert the .wav file to .mp3 with your favourite converter (such as [82]Audacity or
            SoundConverter).

     * I often use [83]FFMPEG or [84]Audacity and find them to be easier for this task.

Change audio track of video

     * In general, [85]Avidemux is a good video editor for most needs, including muxing and demuxing
       video and audio.

     * For a quick method to change the audio for a video, I like to merely remove the audio from the
       original video file using the -nosound option, for example:

mencoder <input.avi> -ovc copy -nosound -o <outputnosound.avi>

     * Then, I add a new audio file as the audio track to the video using the -audiofile option. For
       example, if I now want to add an .mp3 audio track named <newaudio.mp3>, I would use the command:

mencoder <outputnosound.avi> -ovc copy -oac mp3lame -audiofile <newaudio.mp3> -o <output.avi>

MKV files

     * To manipulate .MKV files directly, install the [86]mkvtoolnix utilities:

sudo apt-get install mkvtoolnix mkvtoolnix-gui

          This toolset includes the mkvextract and mkvmerge tools. Instructions for mkvextract can be
          found from the command-line terminal (man mkvextract) or [87]here.

Extract .MKV audio track

     * Use mkvmerge to identify the tracks:

mkvmerge --identify <input.mkv>

   This command will also list the format of the audio track (AC3, MP3, AAC, etc.)
     * If the audio track to be extracted is track 2, use

mkvextract tracks <input.mkv> 2:<output.ac3>

     * Use an audio editor such as [88]Audacity to edit or modify the audio track as desired (and export
       it to the desired audio format).

     * It is then possible to use the new audio file to [89]change the audio track of the original
       video.

Extract .MKV subtitle file to .SRT subtitle file

     * Use mkvmerge to identify the tracks:

mkvmerge --identify <input.mkv>

     * If the subtitle file to be extracted is track 3, use

mkvextract tracks <input.mkv> 3:<output.srt>

          For this to work, of course, the MKV subtitle track must already be in text ([90].srt) format,
          not image (.sub/.idx) format.

     * If instead of the text-based [91].srt format the subtitle track of the input.mkv video is in the
       image-based vobsub format used with [92].vob commercial DVDs, the mkvextract tool will output the
       subtitles as a pair of output.sub and output.idx files instead. The .sub/.idx subtitle files can
       then be converted into a .srt subtitle file using [93]VobSub2SRT.

     * Edit the .srt subtitle file for errors or unnecessary information (use the gedit text editor
       instead of kate if using Ubuntu instead of Kubuntu):

kate <output.srt>

Remove .MKV subtitles and convert to AVI (XVID/MP3)

   Mastroska container ([94].MKV) video files can have multiple subtitles included. In the default
   conversion from an .MKV container format to an [95].AVI container format, the default subtitle file
   of the .MKV container is automatically hardcoded into the converted .AVI file, which may be
   undesirable. To overcome this behaviour (so that the converted .AVI has no subtitles), use the -sid
   999 option:
mencoder <input.mkv> -sid 999 -ovc xvid -oac mp3lame -lameopts cbr:br=192 -xvidencopts pass=1 -o /dev/null
mencoder <input.mkv> -sid 999 -ovc xvid -oac mp3lame -lameopts cbr:br=192 -xvidencopts \
	pass=2:bitrate=-1200000 -o <outputnosub.avi>

     * To hardcode one of the subtitle tracks onto the .AVI video from the .MKV video, choose the
       subtrack ID, such as -sid 0 or -sid 1.

     * If using NTFS and the error

> Too many audio packets in the buffer: (4096 in 837540 bytes).
> Maybe you are playing a non-interleaved stream/file or the codec
> failed? For AVI files, try to force non-interleaved mode with the
> -ni option.

   appears, then add these options:
-mc 0 -ofps 24000/1001 -noskip

     * Of course, a new .srt subtitle file could then be added to the resulting .AVI file. See [96]this
       section.

FFMPEG

   [97]FFMPEG is the swiss-army knife of video and audio format conversion. It succeeds when no other
   program can. It is free and open source. If it not yet installed on your system as part of another
   package (it is used by many video/audio editors), then install it:
sudo apt-get install ffmpeg

          + A recent .deb package can also be found from the Debian wheezy site for ffmpeg found
            [98]here. Choose the correct package for your system (32-bit i386 or 64-bit amd64).

     * To convert many different formats, read the [99]FFMPEG documentation. Also see [100]this
       tutorial.

Flash video (.flv) to MPG-2 using FFMPEG

     * To convert a saved Flash video (.flv) to an MPEG-2 format playable on a DVD, convert:

ffmpeg -i samplevideo.flv -target ntsc-dvd samplevideo.mpg

     * Then use [101]K3b (or [102]Gnomebaker) to write the mpg file to a New DVD Data Project.

          + For PAL use -target pal-dvd. For widescreen, use -target film-dvd. For other conversion
            tips, see [103]this forum. (Note: Most Flash video has very low resolution, with a screen
            size of 360x270, for example. You may see a slight diminishment in resolution if you wish to
            convert it to 720x480 (which is the NTSC standard size) or other screen size. You can keep
            the original screen size and resolution by omitting the -target parameter.) If your original
            file is 16:9 widescreen and you desire a 4:3 letterbox output for playing on an overscanned
            TV, you may need to pad the file so that the widescreen is not compressed (see [104]this
            forum):

ffmpeg -i samplevideo.flv -target ntsc-dvd -s 648x364 -padleft 36 -padright 36 -padtop 58 \
	-padbottom 58 samplevideo.mpg

     * You can also use the WinFF GUI and add the command (as above) as a "Preset," for subsequent use.
       For example:

          Video converter (WinFF) -> Edit -> Presets ->

                Preset Name: Letterbox -> Preset Label: 16:9 Widescreen to 4:3 Letterbox
                Preset command: -target ntsc-dvd -s 648x364 -padleft 36 -padright 36 -padtop 58
                -padbottom 58
                Ouput file extension: mpg -> Category: DVD

                      -> Add/Update -> Save

     * To convert to MPEG-4 (mp4) files, use

ffmpeg -i samplevideo.flv outputvideo.mp4

     * FFMPEG requires that multiple [105]restricted extra codecs be installed. This can be done in a
       single easy step from the command-line Terminal:

sudo apt-get install kubuntu-restricted-extras

          or

sudo apt-get install ubuntu-restricted-extras

Convert to .MP3 audio file using FFMPEG

Convert Flash video audio to mp3

     * Once you have downloaded flash video content (.flv) from the Internet (using the [106]Video
       Download Helper plug-in for Firefox, for example), the audio component can be converted to an mp3
       using this command (from the command line Terminal). (This will work for any type of video file,
       not just Flash.)

ffmpeg -i nameofvideoclip.flv -ab 160k -ac 2 -ar 44100 -vn nameoffile.mp3

          where -i indicates the input, -ab indicates the bit rate (in this example 160kb/sec), -vn
          means no video ouput, -ac 2 means 2 channels, -ar 44100 indicates the sampling frequency. See
          [107]FFMPEG docs for more info.

   If I only want a segment of the video to be converted, I can use the time markers:
ffmpeg -i nameofvideoclip.flv -ss 00:00:09 -t 00:03:00 -ab 160k -ac 2 -ar 44100 -vn nameoffile.mp3

          where -ss 00:00:09 indicates the point in the video (hh:mm:ss) at which to start conversion
          and -t 00:03:00 indicates the amount of time (from the start point) to convert.

     * As long as [108]FFMPEG is already installed, the [109]Video DownloadHelper plug-in for Firefox
       already has an option to automatically convert an online video (such as those found at YouTube)
       into an .MP3 file. (Settings are adjustable.) From the DownloadHelper icon in Firefox, highlight
       the video to convert, then

          DownloadHelper icon -> Download and Convert -> Converter options: MP3

Edit/convert screencapture with FFMPEG

   Note: This section under construction.
     * Note: I now recommend using mencoder for all video conversion techniques. It uses some of the
       ffmpeg libraries but is faster and gives more reliable and high-quality results.

     * This is only one example of a wide variety of techniques. Once I have a [110]captured video, I
       want to convert it to XVID video (which is the format my older DVD player accepts) and MP3 audio
       (mp3lame), which I will place in an AVI container (which my DVD player also accepts).

ffmpeg -i Punchcast1.avi -vcodec mpeg4 -vtag xvid -acodec libmp3lame -ss 00:00:09 -t 00:03:00 Punchcast2.avi

   I will start conversion (-ss) at second 9 (to eliminate unimportant things at the beginning) and
   convert 3 minutes (-t) of video (00:03:00).
     * I happen to watch my screencasts on my old-fashioned 4:3 television. To do that, I make a
       letterboxed video:

ffmpeg -i Punchcast1.avi -vcodec mpeg4 -vtag xvid -ss 00:00:09 -t 00:03:00 -s 648x364 -padleft 36 \
	-padright 36 -padtop 58 -padbottom 58 -acodec libmp3lame Punchcast3.avi

   My laptop screen is 1366x768, which I reduce to a size of 648x364. My TV wants 720x480, so I pad the
   sides and top/bottom. Why not a width of 720 initially? My older television has 10% overscan, which
   cuts off 10% of the video. I therefore use (at least) 10% padding on the edges.

   In newer versions of FFMPEG, the padding (and many other) options have changed. The proper command is
   now:
ffmpeg -i Punchcast1.avi -vcodec mpeg4 -vtag xvid -ss 00:00:09 -t 00:03:00 -s 648x364 -vf pad 720:480:36:58 \
	-acodec libmp3lame Punchcast3.avi

ffmpeg movie=Punchcast1.avi:seek_point=9 -vcodec copy -acodec libmp3lame Punchcast1f.avi

WinFF (FFMPEG GUI)

   [111]WinFF is a free, GPL-licensed open source GUI frontend for FFMPEG. Install:
sudo apt-get install winff xterm

   Run:

          Menu -> Applications -> Sound & Video -> WinFF

Avidemux (Video editor/convertor GUI)

   I happen to like the command line for video conversion (because the commands are more transparent),
   but many users prefer a GUI interface, for which [112]Avidemux has long been a favourite.

Split a file into segments

   Any file can be [113]split into segments using the Linux command:
split -b 1440k my_big_file

   which will split my_big_file into equal segments of size 1440 kb.

Join .MPG video segments

   Individual video segments (MPEG-2, for example) can easily be joined:
cat samplevideo1.mpg samplevideo2.mpg samplevideo3.mpg > samplevideo123.mpg

          You can then write the resulting MPEG-2 file to a DVD and play it in most DVD players.

VobSub2SRT (Convert subtitles from .sub/.idx to .srt)

     * [114]VobSub2SRT is a simple (GPLv3-licensed) command-line program to convert the image-based .idx
       / .sub subtitle files (used with the [115].vob format found on commercial DVDs) into text-based
       [116].srt text subtitle files by using OCR. It is based on code from the [117]MPlayer project,
       [118]Tesseract as OCR software, and libavutil (part of the [119]FFmpeg project). Install the
       (K)Ubuntu/Debian (.deb) package from a PPA repository:

sudo add-apt-repository ppa:ruediger-c-plusplus/vobsub2srt
sudo apt-get update
sudo apt-get install vobsub2srt

     * Alternatively, you can download and build a version from source code.

          + Install dependencies:

sudo apt-get install pkg-config build-essential cmake libavutil-dev libtesseract-dev

          + For (K)Ubuntu 12.10 (Quantal) also install:

sudo apt-get install libtiff5-dev tesseract-ocr-eng

          + For (K)Ubuntu 12.04LTS (Precise) also install:

sudo apt-get install libtiff4-dev tesseract-ocr tesseract-ocr-eng

               o If you will be converting subtitles in languages other than English, you must install
                 tesseract for any or all of those languages as well:

sudo apt-get install tesseract-ocr-vie tesseract-ocr-deu tesseract-ocr-fra tesseract-ocr-ita
sudo apt-get install tesseract-ocr-nld tesseract-ocr-spa tesseract-ocr-por tesseract-ocr-deu-f

                where vie is for Vietnamese, deu is for German, fra is for French, ita is for Italian,
                nld is for Dutch, spa is for Spanish, por is for Portugeuse, and deu-f is for German
                Fraktur script. If you don't you will get an error of the type: Unable to load
                unicharset file /usr/share/tesseract-ocr/tessdata/xxx.unicharset.

          + Download and unzip the VobSub2SRT .zip file into its own directory:

mkdir vobsub2srt
cd vobsub2srt
wget -O vobsub2srt-current.zip https://github.com/ruediger/VobSub2SRT/zipball/ca53a18108eb08d6e2b853643d8c6838e2489823
unzip vobsub2srt-current.zip
rm vobsub2srt-current.zip

          + This will create a subdirectory with the current version. For example, my version is
            vobsub2srt/ruediger-VobSub2SRT-ca53a18. Change into that directory then compile and install
            the program.

cd ruediger-VobSub2SRT-ca53a18
./configure
make
sudo make install

          + This should install the program vobsub2srt to /usr/local/bin. You can uninstall vobsub2srt
            with sudo make uninstall. You can build a *.deb package (Debian/Ubuntu) with make package.
            The package is created in the build directory.

     * Convert the .sub / .idx pair of subtitle files (named Filename.sub and Filename.idx) into a .srt
       subtitle file (named Filename.srt):

vobsub2srt Filename

          where Filename is the file name of the subtitle files WITHOUT the extension (.sub / .idx).

     * If there are multiple languages in the .sub / .idx pair of subtitle files, you can select which
       language to convert (using the 2-letter [120]ISO 639-1 language code, e.g. en, fr, de, it, es,
       pt, etc.):

vobsub2srt --lang en Filename

     * Edit the .srt subtitle file for OCR mistakes (use the gedit text editor instead of kate if using
       Ubuntu instead of Kubuntu):

kate Filename.srt

Create a commercial (.vob) format DVD

     * The audiovideo container of commercial DVDs uses the [121].vob format. This container requires
       either MPEG-1 or MPEG-2 video (.mpg) and either AC3 or MPEG-2 (.mp2) audio. Therefore, the first
       step in creating a DVD-video in this format is to convert all audiovisual files (to be included
       on it) to .mpg files (with one of those video and audio formats), usually with the MPEG-PS (A+V)
       container. This can be done from the command-line terminal (using mencoder or ffmpeg) or from a
       GUI utility (such as Avidemux).

          + The GUI utility [122]Avidemux is a GUI utility that has standardised settings for file
            conversion. [123]Here is the Avidemux tutorial for conversion to a DVD-video.

               o Open the file and allow the time map and Index to be rebuilt.
               o It is best to convert a file (to be included on the DVD) to a format with MPEG-2
                 (avcodec) video, AC3 (lav) audio, and the MPEG-PS (A+V) container as an intermediate
                 first. The MP2 audio format (the default for Avidemux in "Auto" mode) can also be used,
                 and will result in a much smaller .mpg file than when using AC3 audio, but several of
                 my very old DVD players only recognise AC3 audio (so this has therefore become my
                 personal preference).

                    # The easiest method for doing this is to use the Avidemux Auto DVD wizard.
                      (Avidemux -> Auto -> Optical Disc -> DVD). Select the appropriate souce and
                      destination ratios. (My source videos are usually already in 16:9 widescreen
                      formats, and I want to make DVDs for my widescreen 16:9 TV. I therefore choose
                      16:9 for both the "Source Aspect Ratio" and the "Destination Aspect Ratio.") The
                      Auto DVD Wizard uses MP2 audio by default, but I personally like AC3 audio instead
                      (the format usually used on "commercial" DVDs). I therefore change this using the
                      Audio -> AC3 (lav) option.
                    # It is possible to customise (or initially set) the format options manually as well
                      (see the Avidemux documentation). Select the Video (and make sure the aspect ratio
                      is the one you desire in Video -> Configure -> Configuration: DVD -> Aspect Ratio:
                      16:9 ), Audio, and (container) Format options.

                         @ To be DVD compliant, the resolution must be

                              - 720*480 or 704*480 or 352*480 for NTSC
                              - 720*576 or 704*576 or 352*576 for PAL/SECAM

                            This is set automatically if using the Auto DVD wizard. If your original
                            video does not already have the correct aspect ratio, you will have to use
                            cropping, scaling, and/or black bar "Filter" options until one of the
                            standard resolutions is achieved.

               o Save the file ( Avidemux -> File -> Save -> Save Video... -> myconvertedvideo.mpg ) to
                 activate the conversion process. (If prompted whether to "Reuse the existing log file?"
                 answer "No.")

          + Alternatively, mencoder can be used from the command-line to [124]convert a file to the .mpg
            format.

          + Alternatively, FFMPEG can be used from the command-line to [125]convert a file to the .mpg
            format. A simplified preset option for for conversion to both PAL and NTSC options is
            available.

     * Once all files to be included on the DVD-video have been converted to .mpg files, the utility
       [126]dvdauthor can be used for conversion to .vob format (appropriate for writing to the DVD).
       While this utility can be used from the command-line, "authoring" (conversion) is more easily
       accomplished using one of several available [127]GUI front-ends, which allow creation of menus
       for the DVD as well.

               o With Kubuntu I use KMediaFactory for simple projects. (QDVDAuthor, which is difficult
                 to install in recent Kubuntu versions, is superior and more powerful.
                 [128]KMediaFactory, in contrast, is in the repositories and is adequate (and quick) for
                 most purposes.

                    # Rename the .mpg files (created with Avidemux or other method) carefully. The
                      filename(s) becomes the Title(s) used by KMediaFactory for the video(s) on the DVD
                      menu.
                    # Set up the DVD menu in KMediaFactory.

                         @ KMediaFactory -> Project -> Title -> MyDVDTitle (this will appear on the DVD
                           Menu at the top)
                         @ -> Type: DVD-NTSC -> Aspect: 16:9 -> Destination Folder /home/user/DVDs

                    # Add the .mpg files to the DVD.

                         @ KMediaFactory -> Media -> Add Video -> MyFirstVideofile.mpg ->
                           VideoProperties: Aspect ratio: 16:9

                              - -> Add Video -> MySecondVideofile.mpg -> VideoProperties: Aspect ratio:
                                16:9

                    # Choose the DVD Menu appearance.

                         @ KMediaFactory -> Template -> Preview 3

                    # Choose the output format. For this, I generally create a "DVD folder":

                         @ KMediaFactory -> Output -> DVD Folder

                    # Start the conversion ("DVD authoring") process. If an error appears, the problem
                      usually lies in a non-existent (or write-protected) folder having been specified
                      when setting the "Title" options. Make sure the folder has been specified
                      properly. KMediaFactory will then create the standard AUDIO_TS and VIDEO_TS
                      folders in the folder specified.

                         @ -> Start

                    # Prior to burning I check to make sure that my DVD looks the way I had intended
                      using [129]VLC (VLC -> Media -> Open Disc... -> Browse... -> specified_folder ->
                      Play)

               o In Kubuntu I then use [130]K3b to burn the AUDIO_TS and VIDEO_TS folders to a blank
                 DVD. This can be done in K3b using the "New Video DVD Project" (K3b -> More actions...
                 -> New Video DVD Project) using the AUDIO_TS and VIDEO_TS folders as the data. Edit the
                 name of the DVD to reflect the desired DVD name. "Burn" the DVD. The result will be
                 identical to commercial DVDs. (Note: In recent versions of K3b I have had to "Burn"
                 using the "growisofs" Writing app at 8x Speed and DAO (Disc-At-Once) Writing Mode in
                 order to achieve reliable burns. See [131]here for more details.)

Recommended formats

     * There is only one format that works on all my devices (computer (both Linux and Windows),
       (Android) tablet, (Android) eBook reader, MP3 player, (older) DVD player):

          + .AVI container with XVID/DivX video codec and MP3lame (MP3) audio codec

          I use this for all my devices, and encode video files to about 700 MB. This is a good size
          that gives good quality and allows me to fit many videos on a single SDcard (which I use in my
          mobile devices). For most of my devices, a 128 kb MP3 encoding bitrate is sufficient; I
          previously encoded at 192 kb for MP3lame (which is the default bitrate for AC3 sound), but I
          find this bitrate to be unnecessary. (The higher the encoding bitrate, the larger the encoded
          file, and I try to keep all my files around 700 MB.) The .AVI container has several
          limitations: it does not allow more than stereo audio (i.e. no 5.1 surround sound), does not
          allow multiple subtitle files, and requires a constant bitrate (CBR) audio channel. For
          advanced archival purposes it may not be suitable in the long-term, but currently it is
          desirable for the wide range of devices that accept it. It is also one of the only containers
          guaranteed to be accepted by Windows computers (since the container is originally a
          Windows-based format).

     * I am also able to use an .MP4 container with X264/H.264 video codec and either the AAC audio
       codec or the MP3lame (MP3) audio codec on many devices, but not all. Neither the X264/H.264 video
       nor the AAC audio will play on my (older) DVD player or MP3 player, for example (though it plays
       on my computer and some newer Android tablet devices). Furthermore, the rewind/forward/seek
       function for .MP4 files does not work accurately on many of the devices that do play it.

          + The related .M4V container (the proprietary Apple Quicktime format) works on almost none of
            my devices, and, furthermore, is difficult to decode and re-encode to a different container.
            I shun this format like the plague.

     * The newer .MKV container, though open source and a superior container, is accepted by very few of
       my older devices. It does not play on my (older) DVD player or MP3 player, for example (no matter
       which video and audio codecs are used).

          Nevertheless, most newer DVD players seem to accept the .MKV format. In fact, it is now
          difficult to find DVD players that will still play .AVI with XVID / DivX video. Over the
          years, however, I have accumulated a very large collection of .AVI / XVID / MP3 videos. In
          2013, there were only a limited number of DVD players that advertised DivX and .AVI
          compatibility that I could find (including some Philips players) that would play them all.
          Check compatibility charts for players carefully if you find yourself with a large collection
          of .AVI / XVID video files.

     * My Android (2.3) tablet devices will also not accept the AC3 audio codec (which is the standard
       audio used on commercial DVDs, for example), so most of the time I re-encode any files having AC3
       audio with the MP3lame audio codec instead.

   Retrieved from "[132]http://ubuntuguide.org/wiki/Video_Conversion"


---
[55] http://savvyadmin.com/tag/xvid/

[7]Using Mencoder Profiles

   Posted by admin on January 21, 2015 under [8]Tech Tips | [9]5 Comments to Read

   Here’s a quick tip on using Mencoder profiles that serve as shortcuts for all of your favorite
   settings. This can save you a lot of time, especially when your encoding syntax is lengthy and
   difficult to remember.

   Profiles are stored in the mencoder.conf file located in the appropriate place for your operating
   system. For Linux users, you can create a personalized file in your own home directory,
   ~/.mplayer/mencoder.conf.

   Here’s the syntax you might use on a single-pass XviD project without using profiles.

     mencoder -oac mp3lame -lameopts aq=0:q=0 -ovc xvid -xvidencopts
     fixed_quant=2:max_key_interval=25:vhq=2:bvhq=1:chroma_opt:quant_type=mpeg
     input.avi -o output.avi

   Compare that with the following examples of some of my favorite profiles, and how easy it is to use
   them.

   XviD Single-pass Profile Example

     [xvid]
     profile-desc="MPEG4/MP3 encoding"
     ovc=xvid=1
     xvidencopts=fixed_quant=2:max_key_interval=25:vhq=2:bvhq=1:chroma_opt=1:quant_type=mpeg
     oac=mp3lame=1
     lameopts=aq=0:q=0

     mencoder -profile xvid input.avi -o output.avi

   XviD 2-pass Profile Examples

     [xvid-pass1]
     profile-desc="MPEG4/MP3 encoding - PASS 1"
     ovc=xvid=1
     xvidencopts=pass=1:max_key_interval=25:turbo=1:vhq=0
     nosound=1
     o=/dev/null
     passlogfile=xvid-pass1.log

     [xvid-pass2]
     profile-desc="MPEG4/MP3 encoding - PASS 2"
     ovc=xvid=1
     xvidencopts=pass=2:max_key_interval=25:vhq=2:bvhq=1:chroma_opt=1:quant_type=mpeg:bitrate=2000
     oac=mp3lame=1
     lameopts=aq=0:q=0
     passlogfile=xvid-pass1.log

     mencoder -profile xvid-pass1 input.avi
     mencoder -profile xvid-pass2 input.avi -o output.avi

   x264 2-pass Profile Examples

     [x264-pass1]
     profile-desc="x264 encoding - PASS 1"
     ovc=x264=1
     x264encopts=pass=1:threads=0:subq=1:frameref=1:bframes=3:b_pyramid=normal:weight_b=1:keyint=25
     nosound=1
     o=/dev/null
     passlogfile=x264-pass1.log

     [x264-pass2]
     profile-desc="x264 encoding - PASS 2"
     ovc=x264=1
     x264encopts=pass=2:threads=0:subq=6:frameref=5:partitions=all:8x8dct=1:me=umh:bframes=3:b_pyramid=
     normal:weight_b=1:keyint=25:bitrate=2000
     oac=mp3lame=1
     lameopts=aq=0:q=0
     passlogfile=x264-pass1.log

     mencoder -profile x264-pass1 input.avi
     mencoder -profile x264-pass2 input.avi -o output.avi

   x264 Single-pass Profile Example

     [x264]
     profile-desc="x264 encoding"
     ovc=x264=1
     x264encopts=crf=20:threads=0:subq=6:frameref=5:partitions=all:8x8dct=1:me=umh:bframes=3:b_pyramid=
     normal:weight_b=1:keyint=25
     aspect=16/9
     oac=mp3lame=1
     lameopts=aq=0:q=0

     mencoder -profile x264 input.avi -o output.avi

   Tags: [10]encoding, [11]mencoder, [12]Multimedia, [13]x264, [14]Xvid

[15]Adding Chapters to Videos Using MKV Containers

   Posted by admin on November 4, 2014 under [16]Tech Tips | [17]4 Comments to Read

   If you would like to add chapters to your video files, such as XviD, x264, OGG, etc., simply use the
   [18]Matroska multimedia container format.

   For those of you that have never created Matroska files, visit the [19]Matroska website to find the
   right software for your platform. If you’re using Ubuntu Linux, install the mkvtoolnix package from
   the repositories. It contains all the tools you need to start working with MKV files.

     sudo apt-get-install mkvtoolnix

   The easiest method of creating your chapter definitions is with any text editor, using the following
   format. Feel free to change the name and time values accordingly. Save the file anywhere you can
   remember, e.g. chapter.txt.

     CHAPTER01=00:00:00.000
     CHAPTER01NAME=Chapter 01
     CHAPTER02=00:05:00.000
     CHAPTER02NAME=Chapter 02
     CHAPTER03=00:10:00.000
     CHAPTER03NAME=Chapter 03
     CHAPTER04=00:15:00.000
     CHAPTER04NAME=Chapter 04
     CHAPTER05=00:20:00.000
     CHAPTER05NAME=Chapter 05

   If you want to create a chapter file from an existing DVD, dvdxchap is a great tool for the job if
   you’re using Linux. It’s part of the ogmtools package. For more info, check out the [20]OGMtools
   project web site.

   Installation and three examples of how to use the tool are below.

     sudo apt-get install ogmtools

     dvdxchap /dev/dvd > chapter.txt
     dvdxchap ./VIDEO_TS/ > chapter.txt
     dvdxchap video.iso > chapter.txt

   mkvmerge is the only tool you need to create an MKV file. In the following examples, your source
   video file is called video.avi, and your destination file is video.mkv.

   A simplified version of the mkvmerge syntax is as follows.

     mkvmerge video.avi --chapters chapter.txt -o video.mkv

   I typically like to set my default language to English, and also turn off header compression for all
   tracks since some players don’t play nicely with compression enabled. The syntax and example output
   is displayed below.

     mkvmerge video.avi --default-language eng
     --compression -1:none --chapters chapter.txt -o video.mkv
     mkvmerge v4.2.0 ('No Talking') built on Jul 28 2010 16:47:39
     'video.avi': Using the AVI demultiplexer. Opening file. This may take some time depending on the
     file's size.
     'video.avi' track 0: Using the MPEG-4 part 2 video output module.
     'video.avi' track 1: Using the MPEG audio output module.
     The file 'video.mkv' has been opened for writing.
     'video.avi' track 0: Extracted the aspect ratio information from the MPEG4 layer 2 video data and
     set the display dimensions to 712/416.
     Progress: 100%
     The cue entries (the index) are being written...
     Muxing took 30 seconds.

   That’s really all there is to it. Now any media player that supports MKV chapters will allow you to
   navigate them. My favorites are VLC, Mplayer, and my Western Digital media player, the WD TV Live
   Plus.

   Verify the contents of your MKV using mkvmerge or mkvinfo.

     mkvmerge -i video.mkv
     File 'video.mkv': container: Matroska
     Track ID 1: video (V_MS/VFW/FOURCC, XVID)
     Track ID 2: audio (A_MPEG/L3)
     Chapters: 13 entries

     mkvinfo video.mkv
     + EBML head
     |+ EBML version: 1
     |+ EBML read version: 1
     |+ EBML maximum ID length: 4
     |+ EBML maximum size length: 8
     |+ Doc type: matroska
     |+ Doc type version: 2
     |+ Doc type read version: 2
     + Segment, size 1325519138
     |+ Seek head (subentries will be skipped)
     |+ EbmlVoid (size: 4029)
     |+ Segment information
     | + Timecode scale: 1000000
     | + Muxing application: libebml v1.0.0 + libmatroska v1.0.0
     | + Writing application: mkvmerge v4.2.0 ('No Talking') built on Jul 28 2010 16:47:39
     | + Duration: 5004.680s (01:23:24.680)
     | + Date: Thu Aug 5 00:26:03 2010 UTC
     | + Segment UID: 0x81 0x4b 0xc4 0xf1 0xf4 0x5b 0x6d 0xda 0xc5 0x40 0xc1 0x03 0x3f 0x36 0x0f 0xd9
     |+ Segment tracks
     | + A track
     | + Track number: 1
     | + Track UID: 1318207700
     | + Track type: video
     | + Lacing flag: 0
     | + MinCache: 1
     | + Codec ID: V_MS/VFW/FOURCC
     | + CodecPrivate, length 40 (FourCC: XVID, 0x44495658)
     | + Default duration: 40.000ms (25.000 fps for a video track)
     | + Video track
     | + Pixel width: 480
     | + Pixel height: 416
     | + Display width: 712
     | + Display height: 416
     | + A track
     | + Track number: 2
     | + Track UID: 3206714560
     | + Track type: audio
     | + Codec ID: A_MPEG/L3
     | + Default duration: 24.000ms (41.667 fps for a video track)
     | + Audio track
     | + Sampling frequency: 48000
     | + Channels: 2
     |+ EbmlVoid (size: 1099)
     |+ Chapters
     | + EditionEntry
     | + EditionFlagHidden: 0
     | + EditionFlagDefault: 0
     | + EditionUID: 585228242
     | + ChapterAtom
     | + ChapterUID: 4059317607
     | + ChapterTimeStart: 00:00:00.000000000
     | + ChapterFlagHidden: 0
     | + ChapterFlagEnabled: 1
     | + ChapterDisplay
     | + ChapterString: Chapter 01
     | + ChapterLanguage: eng
     | + ChapterAtom
     | + ChapterUID: 3065648262
     | + ChapterTimeStart: 00:05:00.000000000
     | + ChapterFlagHidden: 0
     | + ChapterFlagEnabled: 1
     | + ChapterDisplay
     | + ChapterString: Chapter 02
     | + ChapterLanguage: eng
     | + ChapterAtom
     | + ChapterUID: 2388361707
     | + ChapterTimeStart: 00:10:00.000000000
     | + ChapterFlagHidden: 0
     | + ChapterFlagEnabled: 1
     | + ChapterDisplay
     | + ChapterString: Chapter 03
     | + ChapterLanguage: eng
     | + ChapterAtom
     | + ChapterUID: 1448933008
     | + ChapterTimeStart: 00:15:00.000000000
     | + ChapterFlagHidden: 0
     | + ChapterFlagEnabled: 1
     | + ChapterDisplay
     | + ChapterString: Chapter 04
     | + ChapterLanguage: eng
     | + ChapterAtom
     | + ChapterUID: 1319721142
     | + ChapterTimeStart: 00:20:00.000000000
     | + ChapterFlagHidden: 0
     | + ChapterFlagEnabled: 1
     | + ChapterDisplay
     | + ChapterString: Chapter 05
     | + ChapterLanguage: eng
     |+ EbmlVoid (size: 101)
     |+ Cluster

   Tags: [21]Linux, [22]Matroska, [23]MKV, [24]mkvmerge, [25]mkvtoolnix, [26]Multimedia, [27]Video,
   [28]x264, [29]Xvid

[30]DVD to XviD Encoding with Mencoder

   Posted by admin on September 19, 2012 under [31]Tech Tips | [32]2 Comments to Read

   If you would like to copy a DVD to an XviD video file using Linux, doing so from the command line
   offers a number of flexibility benefits over many graphical tools. Two fantastic tools for the job
   are lsdvd and mencoder. I like lsdvd because it provides a great deal of information in an easy to
   read format, and mencoder is just a phenomenal tool for multimedia encoding.

   There are some pre-requisite applications you need in order to follow along. Be sure to install
   mplayer, mencoder, lsdvd, lame, and if your DVD’s are encrypted, the libdvdcss2 libraries. If using
   Ubuntu, Debian, etc, then all are available in the repositories, except libdvdcss2 which is available
   in the [33]Medibuntu repositories.

   Quick XviD Encoding Examples (For the Impatient)

   In the following examples, we’ll use mencoder with the most basic of options, allowing mencoder to
   decide which video and audio streams to use. Mencoder’s choice may not be what you want, and the
   audio will also be converted to a high quality VBR stereo MP3. Adjust any settings as you see fit.

   Single-Pass Encoding

   Fixed Quantizer Value of 4 (Good quality, decent file size)

     mencoder dvd:// -oac mp3lame -lameopts q=0:aq=0
     -ovc xvid -xvidencopts fixed_quant=4:autoaspect -o video.avi

   Fixed Quantizer Value of 2 (High quality, larger file size)

     mencoder dvd:// -oac mp3lame -lameopts q=0:aq=0
     -ovc xvid -xvidencopts fixed_quant=2:autoaspect -o video.avi

   Two Pass Encoding

   Pass 1: (no need for audio or quality settings such as bitrate)

     mencoder dvd:// -nosound -passlogfile pass1.log
     -ovc xvid -xvidencopts pass=1:turbo:autoaspect -o /dev/null

   Pass 2 Option 1: (VBR ~ 1500 kbps)

     mencoder dvd:// -oac mp3lame -lameopts q=0:aq=0 -passlogfile pass1.log
     -ovc xvid -xvidencopts pass=2:autoaspect:bitrate=1500 -o video.avi

   Pass 2 Option 2: (VBR ~ Restrict final video size to 1.5 Gb)

     mencoder dvd:// -oac mp3lame -lameopts q=0:aq=0 -passlogfile pass1.log
     -ovc xvid -xvidencopts pass=2:autoaspect:bitrate=-1500000 -o video.avi

   Basic Source Selection Examples

   If you are copying a DVD directly from a physical disc as the examples throughout this post will
   assume, the following two examples will work. The first automatically selects title 1, and the second
   specifies title 2.

     mencoder dvd:// (other options)
     mencoder dvd://2 (other options)

   If you’re encoding a DVD from an ISO or similar image file, or have the contents of a DVD extracted
   to directory, use the -dvd-device option as shown below.

     mencoder dvd:// -dvd-device video.iso (other options)
     mencoder dvd:// -dvd-device /path/to/dvd_directory/ (other options)

   Basic Audio Examples

   To encode the selected audio stream to a high quality VBR stereo MP3 format.

     mencoder dvd:// -oac mp3lame -lameopts q=0:aq=0 (other options)

   If the source audio stream is encoded as AC3 or DTS 5.1 (6 Channels), you can simply copy the stream,
   but remember to specify 6 channels. The default is 2.

     mencoder dvd:// -oac copy -channels 6 (other options)

   To exclude all sound, which is useful for the first pass of a two-pass job, or if you prefer to
   multiplex the audio later, use the -nosound option.

     mencoder dvd:// -nosound (other options)

   Gathering Source Video Information for Informed Encoding Decisions

   First you should identify which DVD title tracks are available, so you can determine which one you
   want to copy. Most DVDs will place the movie as the first track, but you may not always be that
   lucky. You can use lsdvd to list the number of titles, chapters, and audio tracks on your DVD.

     lsdvd /dev/dvd
     Disc Title: DVD_TITLE
     Title: 01, Length: 01:26:08.200 Chapters: 13, Cells: 13, Audio streams: 02, Subpictures: 01
     Title: 02, Length: 00:02:01.120 Chapters: 01, Cells: 01, Audio streams: 02, Subpictures: 01
     Title: 03, Length: 00:02:26.120 Chapters: 01, Cells: 01, Audio streams: 02, Subpictures: 01
     Longest track: 01

   In the example above, we found that Title 01 is the longest at 1 hour 26 minutes, has 13 chapters and
   2 audio streams.

   Use lsdvd again to gather additional information about video properties of this specific title.

     lsdvd -v -t 1 /dev/dvd
     Disc Title: DVD_TITLE
     Title: 01, Length: 01:26:08.200 Chapters: 13, Cells: 13, Audio streams: 02, Subpictures: 01
     VTS: 01, TTN: 01, FPS: 25.00, Format: PAL, Aspect ratio: 4/3, Width: 720, Height: 576, DF: ?

   From the output above, we see that this video is in the PAL format at 25.00 frames per second and an
   aspect ratio of 4/3. Use mplayer to play this title and verify it’s the one you want.

     mplayer dvd://1

   Gathering Source Audio Information

   Use lsdvd to give you more detail on the available audio streams for the title you’re working on.

     lsdvd -a -t 1 /dev/dvd
     Disc Title: DVD_TITLE
     Title: 01, Length: 01:26:08.200 Chapters: 13, Cells: 13, Audio streams: 02, Subpictures: 01
     Audio: 1, Language: nl - Nederlands, Format: ac3, Frequency: 48000, Quantization: drc, Channels:
     2, AP: 0, Content: Undefined, Stream id: 0x80
     Audio: 2, Language: en - English, Format: ac3, Frequency: 48000, Quantization: drc, Channels: 2,
     AP: 0, Content: Undefined, Stream id: 0x81

   The output above shows that there are two audio streams, both AC3 Dolby Digital, however only the
   second one is in English. Mencoder and mplayer allow you to specify your desired audio stream by
   language as shown in the following example.

     mencoder dvd://1 -alang eng (other options)

   If your source has multiple English streams, you can specify which particular audio ID (aid) you
   want. Mplayer can be used to display all available audio identifiers of a DVD. The following command
   is a little long but it should serve you well.

     mplayer dvd://1 -identify -frames 0 -vo null 2>&1 | grep aid
     audio stream: 0 format: ac3 (stereo) language: nl aid: 128.
     audio stream: 1 format: ac3 (stereo) language: en aid: 129.

   From the output above, the English AC3 audio stream we want is identified by aid 129. It can be
   specified when using mplayer and mencoder as shown below.

     mencoder dvd://1 -aid 129 (other options)

   Advanced Single-Pass XviD Encoding

   As mentioned before, you can encode your video using a single-pass fixed quantizer mode. It may not
   be as efficient in size and quality as opposed to a two-pass method, but it can save some time and
   complexity. Here’s the more advanced encoding options I tend to use for virtually all of my XviD
   encoding jobs, coupled with the information we gathered from above. A fixed_quant value between 2 and
   4 work very well. The lower the number the higher the quality and larger the resulting file size.

     mencoder dvd://1 -alang eng -oac mp3lame -lameopts q=0:aq=0
     -ovc xvid -xvidencopts fixed_quant=4:autoaspect:max_key_interval=25:
     vhq=2:bvhq=1:trellis:hq_ac:chroma_me:chroma_opt:quant_type=mpeg
     -o video.avi

   I added a number of quality settings as discussed both in the mencoder man page and this [34]useful
   link here.

   One option that seems to lack a lot of documentation is the max_key_interval setting. It influences
   the seekability of the encoded video. By default, the max_key_interval is set to a value of 250,
   which adds an I-frame at a maximum interval of 250 frames. This equates to approximately every 10
   seconds depending on the frame rate of your source video. I like to set the value to 25 which is
   pretty low and results in a slightly larger file, but provides a seek accuracy of about 1 second.
   That’s just my preference, so feel free to change it as you wish.

   Advanced Two-Pass XviD Encoding

   Using the same advanced XviD encoding options as above, here’s what a two pass encoding job would
   look like.

     mencoder dvd:// -nosound -passlogfile pass1.log
     -ovc xvid -xvidencopts pass=1:turbo:autoaspect:vhq=0:max_key_interval=25
     -o /dev/null

     mencoder dvd:// -oac mp3lame -lameopts q=0:aq=0 -passlogfile pass1.log
     -ovc xvid -xvidencopts pass=2:autoaspect:max_key_interval=25:bitrate=1500:
     vhq=2:bvhq=1:trellis:hq_ac:chroma_me:chroma_opt:quant_type=mpeg -o video.avi

   Cropping Black Borders

   If your video source has black borders, you can crop them out to reduce the overall size of your
   video. For example, you video may resemble the following diagram.
   [35]movie uncropped

   Video with black borders



   These borders can be cropped with a video filter -vf crop=w:h:x:y where w, h, x and y are the width,
   height, x and y coordinates. To help determine which crop values are appropriate, first play your
   video with mplayer using the -vf cropdetect option, and seek through the movie to bright points of
   the movie where the black borders are clearly visible. Dark opening scenes may give you inaccurate
   edge readings.

     mencoder dvd:// -vf cropdetect
     (snipped for brevity)
     [CROP] Crop area: X: 6..711 Y: 0..575 (-vf crop=704:576:8:0).0 0
     [CROP] Crop area: X: 6..711 Y: 0..575 (-vf crop=704:576:8:0).0 0
     [CROP] Crop area: X: 6..711 Y: 0..575 (-vf crop=704:576:8:0).0 0
     [CROP] Crop area: X: 6..711 Y: 0..575 (-vf crop=704:576:8:0).0 0
     [CROP] Crop area: X: 6..711 Y: 0..575 (-vf crop=704:576:8:0).0 0

   Copy the values that mplayer displays in the background terminal as the example above shows and use
   them like the following.

     mencoder dvd:// -vf crop=704:576:8:0 (other options)

   Conclusion

   I hope this post provides you with detail that helps you with your DVD encoding endeavors. Please
   feel free to post your comments, questions and tips. If needed, I’ll adjust the post to include your
   valuable input!

   Tags: [36]DVD, [37]encoding, [38]lsdvd, [39]mencoder, [40]mplayer, [41]Multimedia, [42]Xvid

[43]Convert MKV to Xvid with Mencoder

   Posted by admin on April 9, 2009 under [44]Tech Tips | [45]2 Comments to Read

   I recently wanted to convert some of my 720p and 1080p Matroska Video (MKV) files to the Xvid format
   so that I can play them on my Xbox 360 (check out [46]ushare). I really wanted to make sure that the
   video quality and Dolby Digital 5.1 audio would remain intact, and was pleased to get the job done
   with mencoder.

   In the following example, I decided to use a single pass, fixed quantizer value of 4. The audio will
   simply be copied.

     mencoder movie.mkv -channels 6 -ovc xvid -xvidencopts fixed_quant=4
     -vf harddup -oac copy -o movie.avi

   The Dolby Digital 5.1 (AC3) output was a major pain to figure out because by default, mencoder (and
   mplayer) only will select 2 audio channels. So increasing the value to 6 ensures you receive them
   all. Otherwise, you end up getting standard stereo out all channels.

   There’s a ton of options that you can use, so just be sure to read the man pages for mencoder.

   NOTE 1: This is not an exhaustive or definitive post on quality retention. This is just an easy way
   to re-encode a source video file to Xvid.

   NOTE 2: MKV is only a container file format, meaning that you store audio and video tracks within an
   MKV file, as well as a number of other data types. e.g. Subtitles, Pictures, Fonts, etc. Many times,
   these video and audio tracks may already have been encoded with a codec supported by your media
   player. You could potentially extract the appropriate audio and video tracks with mkvextract (a
   component of the mkvtoolnix package), and recombine them into a container format supported by your
   platform. This is a great option because you would not have to re-encode, saving time and quality
   loss. I’ll update with more examples later.
