filename: optimizing-debian-ubuntu-for-fast-internet-and-efficient-memory-management_20250131.txt
https://hamradio.my/2025/01/optimizing-debian-ubuntu-for-fast-internet-and-efficient-memory-management/

Optimizing Debian/Ubuntu for Fast Internet and Efficient Memory Management

   Debian and Ubuntu are two of the most popular Linux distributions, known for their stability and
   versatility. However, out of the box, they may not be fully optimized for modern workloads. Whether
   you're looking to speed up your internet connection, improve memory management, or boost overall
   system performance, a few tweaks can make a significant difference. In this guide, we'll walk you
   through optimizing your Debian or Ubuntu system for fast internet, efficient memory management, and
   faster application loading using tools like Preload.

Part 1: Optimizing for Fast Internet
   To achieve faster internet speeds, we can tweak the Linux kernel's network settings using sysctl.
   These changes focus on improving throughput, reducing latency, and optimizing buffer sizes.

Step 1: Edit the sysctl.conf File
   Open the /etc/sysctl.conf file in your favorite text editor:
$> sudo nano /etc/sysctl.conf

Step 2: Add or Modify Network-Related Parameters
   Add or update the following lines to the file:
# Increase network buffer sizes
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.rmem_default = 16777216
net.core.wmem_default = 16777216
# (16777216 = 2^24)

# Increase the maximum size of the receive queue
net.core.netdev_max_backlog = 30000

# Increase the number of open files (sockets)
fs.file-max = 2097152
# (2097152 = 2^21)

# Increase the local port range
net.ipv4.ip_local_port_range = 1024 65535
# (65535 = 2^16 - 1)

# Enable TCP window scaling and selective acknowledgments
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_sack = 1

# Increase the maximum number of SYN backlog requests
net.ipv4.tcp_max_syn_backlog = 8192
# (8192 = 2^13)

# Increase the maximum number of connections
net.core.somaxconn = 65535

# Reduce TCP FIN timeout
net.ipv4.tcp_fin_timeout = 15

# Reuse TIME-WAIT sockets for new connections
net.ipv4.tcp_tw_reuse = 1

# Enable TCP Fast Open
net.ipv4.tcp_fastopen = 3

# Disable ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Disable IPv6 (optional)
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1

Step 3: Apply the Changes
   Save the file and apply the changes immediately:
$> sudo sysctl -p

Step 4: Verify the Changes
   Check if the changes have been applied:
sysctl -a | grep net.core
sysctl -a | grep net.ipv4

Part 2: Optimizing Memory Management
   Efficient memory management is crucial for system performance, especially under heavy workloads.
   Here's how to tweak your Debian or Ubuntu system for better memory utilization.

Step 1: Edit the sysctl.conf File
   Open the /etc/sysctl.conf file again:
$> sudo nano /etc/sysctl.conf

Step 2: Add or Modify Memory-Related Parameters
   Add or update the following lines:
# Adjust swappiness (lower values prioritize RAM over swap)
vm.swappiness = 10

# Increase the percentage of system memory for caching
vm.vfs_cache_pressure = 50

# Increase the maximum number of memory map areas
vm.max_map_count = 262144
# (262144 = 2^18)

# Optimize writeback buffer settings
vm.dirty_ratio = 10
vm.dirty_background_ratio = 5
vm.dirty_expire_centisecs = 1000
vm.dirty_writeback_centisecs = 500

# Enable memory overcommit (use with caution)
vm.overcommit_memory = 1

# Increase the size of the TCP window for better network performance
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216

Step 3: Apply the Changes
   Save the file and apply the changes:
$> sudo sysctl -p

Step 4: Verify the Changes
   Check if the changes have been applied:
sysctl -a | grep vm

Part 3: Using Preload for Faster Application Loading
   Preload is a daemon that runs in the background and analyzes your usage patterns to preload
   frequently used applications into memory. This can significantly reduce application startup times.

Step 1: Install Preload
   Install Preload using the following command:
$> sudo apt install preload

Step 2: Configure Preload (Optional)
   The default configuration is usually sufficient, but you can customize it by editing the
   configuration file:
$> sudo nano /etc/preload.conf

Step 3: Restart Preload
   After making changes, restart the Preload service:
$> sudo systemctl restart preload

Step 4: Monitor Preload
   Check the status of Preload to ensure it's running:
$> sudo systemctl status preload

Part 4: Should You Use Transparent HugePages (THP)?
   Transparent HugePages (THP) is a Linux kernel feature that improves performance by using larger
   memory pages (2 MB or 1 GB) instead of the standard 4 KB pages. Here's how to decide whether to use
   THP on your Debian or Ubuntu system.

What is THP?
     * THP dynamically allocates larger memory pages to reduce the overhead of managing page tables and
       improve performance for memory-intensive workloads.
     * It operates in three modes: always, madvise, and never.

When to Use THP
     * Memory-Intensive Applications: Use THP if you run virtual machines, databases, or scientific
       simulations.
     * Gaming: Modern games with large memory footprints may benefit from THP.
     * Multitasking: If you frequently use memory-hungry applications (e.g., browsers with many tabs,
       IDEs), THP can help.
     * High RAM Systems: Systems with 16 GB or more RAM are better suited for THP.

When to Avoid THP
     * Lightweight Workloads: If your usage is light (e.g., web browsing, office apps), THP may not
       provide noticeable benefits.
     * Low RAM Systems: Systems with 4 GB or less RAM may experience fragmentation or increased swap
       usage.
     * Real-Time Applications: THP can cause latency spikes, which are problematic for real-time
       workloads.

Recommended THP Mode
   For most users, the madvise mode is ideal:
$> echo "madvise" | sudo tee /sys/kernel/mm/transparent_hugepage/enabled

How to Disable THP
   If THP causes issues, disable it:
$> echo "never" | sudo tee /sys/kernel/mm/transparent_hugepage/enabled

Part 5: Additional Tools for Performance Optimization
Use Zswap or Zram
     * Zswap: Compresses swap data in RAM before writing to disk.
$> echo 1 | sudo tee /sys/module/zswap/parameters/enabled

     * Zram: Creates a compressed block device in RAM for swap.

$> sudo apt install zram-tools
$> sudo systemctl enable zramswap
$> sudo systemctl start zramswap

Monitor System Performance
   Use tools like htop, glances, or vmstat to monitor system performance:
$> sudo apt install htop glances
$> htop
$> glances

Optimize Boot Times with systemd-analyze
   Analyze and optimize your boot time:
$> systemd-analyze blame
$> systemd-analyze critical-chain

Conclusion
   By optimizing your Debian or Ubuntu system for fast internet, efficient memory management, and faster
   application loading, you can significantly improve performance and responsiveness. Tools like
   Preload, Zswap, and Zram further enhance your system's efficiency. Whether you enable THP depends on
   your specific workload, but for most users, the madvise mode is a safe and effective choice. Always
   test and monitor your system to ensure these tweaks provide the desired benefits.


---

