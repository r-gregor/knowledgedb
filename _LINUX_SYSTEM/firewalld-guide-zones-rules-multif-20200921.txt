filename: firewalld_guide-zones-rules-multif_20200921.txt
https://www.redhat.com/sysadmin/beginners-guide-firewalld

A beginner's guide to firewalld in Linux
September 10, 2020

   The firewall is essential for controlling the flow of network traffic in and out of the Linux server.
   In this article, you'll display, add, and remove firewalld rules.

   Our world has never been more connected than it is right now. Every person, business, government,
   etc. uses the web to communicate, exchange currency and data, and generally go through the motions of
   daily life and operations. However, these connections are not inherently safe, and because of this,
   we have to put defensive measures in place to keep our location, information, and money protected. In
   times past, when someone wanted to secure their possessions, they erected gates and fences to keep
   intruders at a distance. Today, we accomplish these same goals with the use of firewalls. Most Linux
   systems made use of the iptables utility, however, a new technology was on the horizon.

   With the introduction of the Red Hat Enterprise Linux 7.0 (RHEL) in 2011, iptables was superceded
   as firewalld was born. At its core, firewalld is a zone-based firewall. Zone-based firewalls are
   network security systems that monitor traffic and take actions based on a set of defined rules
   applied against incoming/outgoing packets.

All about zones
   Firewalld provides different levels of security for different connection zones. A zone is associated
   with at least one network interface (eth0, for example). We see the preconfigured zones by using the
   following command:
[tcarrigan@server ~]$ firewall-cmd --get-zones
block dmz drop external home internal libvirt public trusted work

   As you see, the zones listed by default are:
     * block
     * dmz
     * drop
     * external
     * home
     * internal
     * libvirt
     * public
     * trusted
     * work

   NOTE: I am using a RHEL 8.2 virtual machine for this demo.

   Generally, the default rule of a firewall is to deny everything and only allow specific exceptions to
   pass through for needed services.

   Many times, it is helpful to see what services are associated with a given zone. To display this
   information, use the following command:

   firewall-cmd --list-all

   Note that if you do not specify a zone, the default zone is queried. Here, the default zone is the
   public zone.
[tcarrigan@server ~]$ firewall-cmd --list-all
public (active)
  target: default
  icmp-block-inversion: no
  interfaces: enp0s3 enp0s8
  sources:
  services: cockpit dhcpv6-client mountd nfs rpc-bind ssh
  ports:
  protocols:
  masquerade: no
  forward-ports:
  source-ports:
  icmp-blocks:
  rich rules:

   If you wish to specify a zone, you simply add --zone=zonename

   For example, to see the external zone, use the following:
[tcarrigan@server ~]$ firewall-cmd --zone=external --list-all
external
  target: default
  icmp-block-inversion: no
  interfaces:
  sources:
  services: ssh
  ports:
  protocols:
  masquerade: yes
  forward-ports:
  source-ports:
  icmp-blocks:
  rich rules:

   If, for some reason, you wanted to change the default zone, you can easily do so by using the
   following command:

   firewall-cmd --set-default=zonename

Allow and deny by service
   Now, the good thing about firewalls is that they keep our networks safe. The bad thing is that there
   is no "one-size fits all" firewall that fits every situation. Because of this, firewalls are
   customized to fit the exact needs of the situation that they are employed in. For example, if I need
   to allow FTP (File Transfer Protocol) transfers in the external zone so that I can move a file over
   port 21, I might use something like this:

   firewall-cmd --zone=external --add-service=ftp

   Here is the actual example from my VM:
[tcarrigan@server ~]$ sudo firewall-cmd --zone=external --add-service=ftp
[sudo] password for tcarrigan:
success

   We see that the daemon returned success, so we should have the FTP service allowed in the external
   zone. To verify this, we need to check the external zone services list:
[tcarrigan@server ~]$ firewall-cmd --zone=external --list-services
ftp ssh

   But, what happens when we reload the firewall configuration?
[tcarrigan@server ~]$ sudo firewall-cmd --reload
success

[tcarrigan@server ~]$ firewall-cmd --zone=external --list-all
external
  target: default
  icmp-block-inversion: no
  interfaces:
  sources:
  services: ssh
  ports:
  protocols:
  masquerade: yes
  forward-ports:
  source-ports:
  icmp-blocks:
  rich rules:

   The new allow rule doesn't survive the reinitialization of the firewalld configuration. To ensure
   that our new rule persists, we need to add the --permanent option. The new command is:

   # firewall-cmd --permanent --zone=external --add-service=ftp

   Once you use the permanent command, you need to reload the configuration for the changes to take
   hold.

   To remove a service, we make one small change to the syntax. Here, I am going to remove the FTP
   service from the external zone permanently:
[tcarrigan@server ~]$ sudo firewall-cmd --permanent --zone=external --remove-service=ftp
Warning: NOT_ENABLED: ftp
success

   We see that the system warns me that FTP has been disabled and that the operation was a success.

Allow and deny by port
   Now, what happens when you need to allow traffic over a non-standard port? Imagine you have a backup
   service that needs to run over a dedicated UDP port. How would you add this exception to your zone?
   The syntax is very user friendly and is only slightly different from what we used for services. To
   add a port to your zone configuration, use the following:
[tcarrigan@server ~]$ sudo firewall-cmd --permanent --zone=external --add-port=60001/udp
success

   We check the allowed ports with the following command:
[tcarrigan@server ~]$ sudo firewall-cmd --zone=external --list-ports
60001/udp

   And to remove the port rule, you guessed it... simply switch --add-port=x to --remove-port=x
[tcarrigan@server ~]$ sudo firewall-cmd --permanent --zone=external --remove-port=60001/udp
success

What's next?

   If, after reading this article, you're wondering what to do with the information, I highly recommend
   firing up your favorite VM (RHEL, Fedora, CentOS, etc.) and start experimenting with the commands
   above. The best way to learn is to get hands-on experience. If you found this content interesting,
   keep an eye on Enable Sysadmin for part two, where you'll dive into creating custom zones and more
   advanced rule creation.


---
https://www.redhat.com/sysadmin/firewalld-zones-and-rules

Introduction to Linux firewalld zones and rules
September 17, 2020

   In this second part of a beginner's guide to firewalld, you'll learn about zones and rules.

   In my previous article, "Beginner's guide to firewalld in Linux," we explored the basics of
   creating allow and deny lists for both services and ports inside of existing zones. If this doesn't
   sound familiar, I recommend that you check out that previous piece. However, if you are up to speed
   with firewalld, zone-based firewalls, and service/port-based rules, then you are in the right
   place. In this article, we look at three slightly more advanced features of firewalld and how to
   configure each. Let's get into it.

Create custom zones
   As discussed previously, zone-based firewalls need zones to operate. The goal is to have different
   security measures for particular zones of the network. Let us assume that we need to create a new
   zone called enable_test. To do this, we use the following command:
[root@server ~]# firewall-cmd --permanent --new-zone=enable_test
success

   This command creates a new, permanent zone titled enable_test. There are no services or ports added
   to enable_test yet. Therefore, no traffic is allowed in or out. If you have a configuration file that
   you normally use for firewall zone configs, you can use it by using this command:
[root@server ~]# firewall-cmd --permanent --new-zone-from-file=file --name=enable_test
success

   Note 1: In --new-zone-from-file=file, file = the file path of the config.

   Note 2: When creating zones, you must use the --permanent flag. You must also --reload the config for
   the changes to take place.

Assign an interface
   Now that we have our new enable_test zone created, we need to associate a network interface with the
   zone. If we don't do this, we won't be able to use the new zone. I am going to associate it with the
   interface enp0s8.

   Add the interface to the zone:
[root@server ~]# firewall-cmd --permanent --zone=enable_test --add-interface=enp0s8
success

   Verify the interface association:
[root@server ~]# firewall-cmd --zone=enable_test --list-interfaces
enp0s8

   If you need to remove the interface:
[root@server ~]# firewall-cmd --remove-interface=enp0s8 --zone=enable_test
success

Advanced rule creation
   Now, here is where things get interesting. There is a lot of flexibility in the rules you can create
   with firewalld. You aren't limited to just "deny this port," "allow this service," and so on... You
   can create highly complex rules for specific situations. These rules are known as rich rules.

   Something to know about firewall rules-in general, they are made up of two parts:
    1. Conditions that must be met before the rule can be enacted.
    2. Actions to be carried out once those conditions are met. These actions are accept, reject, and
       drop.

   Let's assume that we want to create a rule that states something like this:

   Reject all FTP connections from Fedora client 2 (172.25.1.7)
[root@server ~]# firewall-cmd --zone=enable_test --add-rich-rule="rule \
family="ipv4" \
source address=172.25.1.7 \
service name=ftp \
reject \

   Most of these options are self-explanatory; however, you must start with the keyword rule. The family
   option states the type of traffic to enact the rule on. If left blank, it will default to both IPv4
   and IPv6 packets.

Need more info?
   As you might have guessed, there are a huge number of options to create even more complex rules. Be
   sure to check out the firewalld documentation for further information. Hopefully, this look
   behind one of our most important curtains has been an enlightening experience. While firewalls and
   security systems are quite complex, at their most basic levels, they are just a set of rules-rules
   designed not to be broken.


---
