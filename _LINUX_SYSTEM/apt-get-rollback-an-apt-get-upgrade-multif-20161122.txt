filename: /c/Users/gregor.redelonghi/Dropbox/ODPRTO/_TXT/apt-get_rollback-an-apt-get-upgrade-multif_20161122.txt
https://www.cyberciti.biz/howto/debian-linux/ubuntu-linux-rollback-an-apt-get-upgrade/

Rollback an apt-get upgrade if something goes wrong on Debian / Ubuntu Linux

Know the problem before choosing the solution
   I remotely administer a Ubuntu 14.04.3 LTS server in one of those dirt cheap clouds, and I will
   periodically use [13]apt-get command to install packages or do upgrades. I wanted to set up
   [14]“Planet Venus” ( a flexible feed aggregator ) software on my system. For some weird reason, I
   ran:
   $ sudo apt-get -y --install-suggests install planet-venus
   I should have stopped the installation. But, I was too tired and overworked that day. The result was
   a disaster. I ran out of disk space, and it installed 1764 packages on the system. My planet-venus
   installation broke down too. It was one of those days where I made mistakes and forgot to take
   snapshot/backups. Long story short:
   I fucked up :(


   Related: This is not the first time I f*cked up. See [ *** ]my 10 Unix command line mistakes.

Solution
   I tried Google and [16]found this wiki page not so helpful. A couple of mailing list and forum posts
   did not help at all. Finally, a hint come from Twitter:

     Does anyone know a simple way to rollback packages on [17]@Ubuntu Linux 14.04 LTS server?messed
     up.. I need to rollback over 1k+ packages :(

     — nixCraft (@nixcraft) [18]January 17, 2016

How to rollback an apt-get upgrade from command line?
   I quickly ran:
   # grep -A 2 'Start-Date: 2016-01-17 07:56:42' /var/log/apt/history.log
   Sample output (full [ ** ]dump here):

Rollback / undo an apt-get install command
   Rest was easy.

Create the list:
   grep -A 2 'Start-Date: 2016-01-17  07:56:42' /var/log/apt/history.log | tail -1 >/tmp/packages.txt

   Edit the /tmp/packages.txt file and delete Install: word:
   vi /tmp/packages.txt

   OR
   sed -i 's/Install://' /tmp/packages.txt

   Finally, I need to clean up a few things:
tr ',' '\n' < /tmp/packages.txt | sed '/automatic)/d' | awk '{ print $1}' > /tmp/final.packages.txt
wc -l /tmp/final.packages.txt

   Sample outputs:
1764 /tmp/final.packages.txt

Delete the packages
   Now, I have an entire list of all packages installed on that unfaithful day
# less /tmp/final.packages.txt
libmaa3:amd64
ant:amd64
libmimic0:amd64
dc:amd64
libparse-yapp-perl:amd64
gir1.2-clutter-1.0:amd64
libjna-java:amd64
python-egenix-mxbeebase:amd64
libxkbcommon-x11-0:amd64
libmpeg2-4:amd64
libopencv-core2.4:amd64
libdvdread4:amd64
libhunspell-1.3-0:amd64
fonts-lobster:amd64
libtotem-plparser18:amd64
libodbcinstq4-1:amd64
jed-common:amd64
....
..
...
xfonts-cyrillic:amd64
postgresql:amd64
db5.3-util:amd64
libopencore-amrnb0:amd64
firebird2.5-examples:amd64
libboost-random1.54-dev:amd64
libtbb2:amd64
libwxgtk2.8-0:amd64
libc6-x32:amd64
magicfilter:amd64

   Just uninstall it:
# Run as root
# Store packages name in $p
p="$(</tmp/final.packages.txt)"

# Nuke it
apt-get --purge remove $p

#clears out the local repository of retrieved package files
apt-get clean

# Just in case ...
apt-get autoremove

# Verify disk space
df -H

Conclusion
     To help yourself, you must be yourself. Be the best that you can be. When you make a mistake,
     learn from it, pick yourself up and move on. –Dave Pelzer

   I learned that:
    1. The best time to backup is before you do major stuff on the server.
    2. Think twice. Hit enter once.
    3. Never trust blindly the apt-get or any command that has -y option.
    4. Always make the snapshot. Unfortunately, this box still uses ext4. There is no option to set my
       filesystem to BTRFS/ZFS (Linux on ZFS) with this cloud server provider. So I’m stuck with ext4
       for now.




---
[ ** ]
https://www.cyberciti.biz/files/history.log.2016-01.17.txt

Start-Date: 2016-01-17  07:56:42
Commandline: apt-get --install-suggests install planet-venus
Install: libmaa3:amd64 (1.3.2-2, automatic), ant:amd64 (1.9.3-2build1, automatic), libmimic0:amd64 \
(1.0.4-2.1ubuntu1, automatic), dc:amd64 (1.06.95-8ubuntu1, automatic), libparse-yapp-perl:amd64 \
(1.05-12, automatic), gir1.2-clutter-1.0:amd64 (1.16.4-0ubuntu2, automatic), libjna-java:amd64 \
(3.2.7-4, automatic), python-egenix-mxbeebase:amd64 (3.2.7-1build1, automatic),
...

...
libcupsfilters1:amd64 (1.0.52-0ubuntu1.7, automatic), qt4-doc:amd64 \
(4.8.5+git192-g085f851+dfsg-2ubuntu4.1, automatic), texlive-xetex:amd64 (2013.20140215-1, automatic), \
wireless-tools:amd64 (30~pre9-8ubuntu1, automatic), printer-driver-ptouch:amd64 (1.3-8, automatic), \
python3-tk:amd64 (3.4.3-1~14.04.2, automatic), proj-data:amd64 (4.8.0-2ubuntu2, automatic), \
xfonts-cyrillic:amd64 (1.0.3, automatic), postgresql:amd64 (9.3+154ubuntu1, automatic), db5.3-util:amd64 \
(5.3.28-3ubuntu3, automatic), libopencore-amrnb0:amd64 (0.1.3-2ubuntu1, automatic), firebird2.5-examples:amd64 \
(2.5.2.26540.ds4-9ubuntu1, automatic), libboost-random1.54-dev:amd64 (1.54.0-4ubuntu3.1, automatic), \
libtbb2:amd64 (4.2~20130725-1.1ubuntu1, automatic), libwxgtk2.8-0:amd64 (2.8.12.1+dfsg-2ubuntu2, automatic), \
libc6-x32:amd64 (2.19-0ubuntu6.6, automatic), magicfilter:amd64 (1.2-64, automatic)



---
[ *** ]
https://www.cyberciti.biz/tips/my-10-unix-command-line-mistakes.html

My 10 UNIX Command Line Mistakes

userdel Command
   The file /etc/deluser.conf was configured to remove the home directory (it was done by previous sys
   admin and it was my first day at work) and mail spool of the user to be removed. I just wanted to
   remove the user account and I end up deleting everything (note -r was activated via deluser.conf):
   userdel foo

Rebooted Solaris Box
   On Linux [15]killall command kill processes by name (killall httpd). On Solaris it kill all active
   processes. As root I killed all process, this was our main Oracle db box:
   killall process-name

Destroyed named.conf
   I wanted to append a [16]new zone to /var/named/chroot/etc/named.conf file., but end up running:
   ./mkzone example.com > /var/named/chroot/etc/named.conf

Destroyed Working Backups with Tar and Rsync (personal backups)
   I had only one backup copy of my QT project and I just wanted to get a directory called functions. I
   end up deleting entire backup (note -c switch instead of -x):
   cd /mnt/bacupusbharddisk
   tar -zcvf project.tar.gz functions
   I had no backup. Similarly I end up running rsync command and deleted all new files by overwriting
   files from backup set (now Iâ€™ve switched to [17]rsnapshot)
   rsync -av -delete /dest /src
   Again, I had no backup.

Deleted Apache DocumentRoot
   I had [18]sym links for my web server docroot (/home/httpd/http was symlinked to /www). I forgot
   about symlink issue. To save disk space, I ran rm -rf on http directory. Luckily, I had full working
   backup set.

Accidentally Changed Hostname and Triggered False Alarm
   Accidentally changed the current hostname (I wanted to see current hostname settings) for one of our
   cluster node. Within minutes I received an alert message on both mobile and email.
   hostname foo.example.com

Public Network Interface Shutdown
   I wanted to shutdown VPN interface eth0, but ended up shutting down eth1 while I was logged in via
   SSH:
   ifconfig eth1 down

Firewall Lockdown
   I made changes to sshd_config and changed the ssh port number from 22 to 1022, but failed to update
   firewall rules. After a quick kernel upgrade, I had rebooted the box. I had to call remote data
   center tech to reset firewall settings. (now I use [19]firewall reset script to avoid lockdowns).

Typing UNIX Commands on Wrong Box
   I wanted to shutdown my local Fedora desktop system, but I issued halt on remote server (I was logged
   into remote box via SSH):
   halt
   service httpd stop

Wrong CNAME DNS Entry
   Created a wrong DNS CNAME entry in example.com zone file. The end result – a few visitors went to
   /dev/null:
   echo 'foo 86400 IN CNAME lb0.example.com' >> example.com && rndc reload

Failed To Update Postfix RBL Configuration
   In 2006 [20]ORDB went out of operation. But, I failed to update my Postfix RBL settings. One day ORDB
   was re-activated and it was returning every IP address queried as being on its blacklist. The end
   result was a disaster.

Conclusion
   All men make mistakes, but only wise men learn from their mistakes — Winston Churchill.

   From all those mistakes Iâ€™ve learnt that:
    1. Backup = ( Full + Removable tapes (or media) + Offline + Offsite + Tested )
    2. The clear choice for preserving all data of UNIX file systems is dump, which is only tool that
       guaranties recovery under all conditions. (see [21]Torture-testing Backup and Archive Programs
       paper).
    3. Never use rsync with single backup directory. Create a snapshots using rsync or rsnapshots.
    4. Use CVS to store configuration files.
    5. Wait and read command line again before hitting the dam [Enter] key.
    6. Use your well tested perl / shell scripts and open source configuration management software such
       as puppet, Cfengine or Chef to configure all servers. This also applies to day today jobs such as
       creating the users and so on.

   Mistakes are the inevitable, so have you made any mistakes that have caused some sort of downtime?
