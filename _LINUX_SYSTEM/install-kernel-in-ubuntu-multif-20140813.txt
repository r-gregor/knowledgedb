filename: install-kernel-in-ubuntu-multif_20140813.txt
http://www.tecmint.com/install-kernel-in-ubuntu/

Install Kernel 3.16 (Latest Released) in Ubuntu and Derivatives

   By [20]Avishek Kumar Under: [21]Ubuntu On: August 12, 2014
   [INS: :INS]
   Download Your Free eBooks NOW - [22]10 Free Linux eBooks for Administrators

   Before you proceed in this article, we strongly recommend you to go through our last
   article, where we've instructed a step-by-step guide on how to [23]Compile and Install
   Kernel 3.16 (most recent stable release) on Debian GNU/Linux, even if you are not running
   Debian. The former contains a lot of information and statistics which you should know, no
   matter you are running which Linux distribution.
   [24]Install Kernel in Ubuntu
   Install Kernel in Ubuntu

   Install Kernel 3.16 in Ubuntu

   In the last article we compiled and installed Debian Gnu/Linux, the Debian way and tried to
   simply the things as far as possible. This article aims at Installing the latest Linux
   Kernel 3.16 on Ubuntu and its derivatives which includes - Linux Mint, Pinguy OS,
   Peppermint Five, Deepin Linux, Linux Lite, Elementary OS, etc.

   Installing Latest Linux on Ubuntu and derivatives can be Manual which is more configurable
   and more on a Monolithic side, since you have option to Select required packages and
   nothing extra but requires knowledge and little hard work.

   On the other hand there is a way to install latest kernel on Ubuntu the Ubuntu way.
   Moreover it is risk free.

Requirements

   Installing kernel, the later way requires 3 different files to be installed.
    1. Linux Headers
    2. Linux Headers Generic
    3. Linux Image

Step 1: Downloading Kernel 3.16 Packages

   First, go the following link and download the required files, as per your architecture (x86
   and x86_64), which is suitable for you and install them using dpkg. reboot and done.
    1. [25]http://kernel.ubuntu.com/~kernel-ppa/mainline/

   We will be carrying out all of these commands in step-by-step fashion. For demonstration
   purpose, we've taken Ubuntu 14.10 (Utopic) distribution as an example for installing Kernel
   3.16, but same instructions will also work on other Ubuntu versions and derivatives.

For 32-bit Ubuntu and Derivatives

   Download Kernel Headers, Headers Generic and Linux Image.
$ wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.16-utopic/linux-headers-3.16.0-031600_3.1
6.0-031600.201408031935_all.deb
$ wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.16-utopic/linux-headers-3.16.0-031600-gen
eric_3.16.0-031600.201408031935_i386.deb
$ wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.16-utopic/linux-image-3.16.0-031600-gener
ic_3.16.0-031600.201408031935_i386.deb

For 64-bit Ubuntu and Derivatives

$ wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.16-utopic/linux-headers-3.16.0-031600_3.1
6.0-031600.201408031935_all.deb
$ wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.16-utopic/linux-headers-3.16.0-031600-gen
eric_3.16.0-031600.201408031935_amd64.deb
$ wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.16-utopic/linux-image-3.16.0-031600-gener
ic_3.16.0-031600.201408031935_amd64.deb

Step 1: Installing Kernel 3.16 in Ubuntu

   Before we proceed to install, lets check all the downloaded files are at same location or
   not, it will save us from installing 3 different packages individually.
$ ls -l linux*.deb

   [26]Verify Kernel Files
   Verify Kernel Files

   Verify Kernel Files

   Next, install the all the `.deb` packages in one fire.
$ sudo dpkg -i linux*.deb

   [27]Kernel Package Installation
   Kernel Package Installation

   Kernel Package Installation

   It may take a while depending upon your machine processing power. Once the installation is
   successful reboot the machine and login to new kernel.
$ sudo reboot

   Note: It is important to notice any error message at boot time if any, so that it can be
   used to resolve the issue.

   Once, system boots up correctly, verify the latest Kernel installed version.
$ uname -mrns

   [28]Check Kernel Version in Ubuntu
   Check Kernel Version in Ubuntu

   Check Kernel Version

Step 3: Removing Old Kernel

   Remove old kernel, only if your current kernel is working perfectly, you really want to
   remove old kernel and you know what you are doing. Then you can use the following commands
   to remove old kernel.
$ sudo apt-get remove linux-headers-(unused kernel version)
$ sudo apt-get remove linux-image-(unused-kernel-version)

   Once, you remove sucessfully, reboot the machine. Your previous kernel is no longer there.
   You are done!.

   It is worth mentioning - that Kernel 3.16 is going to be released officially with Next
   Major release of Debian 8 (Jessie) and Ubuntu 14.10 (Utopic Unicorn).

   That's all for now. With covering latest kernel installation on Debian, its derivative
   (Ubuntu) and derivatives - Mint, Pinguy OS, Elementary OS, etc. We have done with almost
   half the Linux distos. I'll be here again with another interesting and worth knowing
   article soon.



---
http://www.tecmint.com/install-kernel-3-16-in-debian/

Kernel 3.16 Released - Compile and Install on Debian GNU/Linux

   By [21]Avishek Kumar Under: [22]Debian On: August 9, 2014
   [INS: :INS]
   Download Your Free eBooks NOW - [23]10 Free Linux eBooks for Administrators

   Kernel is the core of any operating System. The primary function of kernel is to act as
   mediator in-between Application - CPU, Application - Memory and Application - Devices
   (I/O). It function as Memory Manager, Device manager and attends System calls besides
   performing other tasks.
   [24]Install Kernel 3.16 in Debian Linux
   Install Kernel 3.16 in Debian Linux

   Compile and Install Kernel 3.16 in Debian Linux

   For Linux, Kernel is its heart. The Linux Kernel is released under GNU General Public
   License. Linus Torvalds developed Linux Kernel in the year 1991 and he came with Initial
   Kernel Release Version 0.01. On 3rd of August, 2014 (this year) Kernel 3.16 has been
   released. In this 22 years, Linux kernel has seen a lots of development. Now there are
   thousand of companies, millions of independent developer contributing to Linux Kernel.

   A rough estimation of big brands and their contribution to the present Linux Kernel which
   is expected to have 17 million lines of code as per Linux Foundation, Linux Kernel
   Development Report.
    1. RedHat - 10.2%
    2. Intel - 8.8%
    3. Texas Instruments - 4.1%
    4. Linaro - 4.1%
    5. SUSE - 3.5%
    6. IBM - 3.1%
    7. Samsung - 2.6%
    8. Google - 2.4%
    9. Vision Engraving Systems - 2.3%
   10. Wolfson Microelectronics - 1.6%
   11. Oracle - 1.3%
   12. Broadcom - 1.3%
   13. Nvidia - 1.3%
   14. Freescale - 1.2%
   15. Ingics Technology - 1.2%
   16. Cisco - 0.9%
   17. Linux Foundation - 0.9%
   18. AMD - 0.9%
   19. Academics - 0.9%
   20. NetAPP - 0.8%
   21. Fujitsu - 0.7%
   22. parallels - 0.7%
   23. ARM - 0.7%

   Seventy percent of kernel development is done by Developers, who are working in Corporates
   and are paid for that, sounds Interesting?

   Linux Kernel 3.16 is released for individual as well as companies in production
   environment, who will be updating their kernel for a number of reason, a few of which
   includes.
    1. Security Patches
    2. Stability Enhancement
    3. Updated Drivers - Better device Support
    4. Processing speed improvement
    5. Latest Functions, etc

   This article aims at updating Debian kernel, the Debian way, which means less manual work,
   less risk yet with perfection. We will also be updating Ubuntu Kernel in the later part of
   this article.

Step 1: Downloading Kernel 3.16

   Before we proceed, we must know about our current kernel, that is installed.
avi@tecmint:~$ uname -mrns

Linux tecmint 3.14-1-amd64 x86_64

   About options:
    1. -s : Print Operating System (`Linux', Here).
    2. -n : Print System Hostname (`tecmint', Here).
    3. -r : Print Kernel Version (`tecmint 3.14-1-amd64', Here).
    4. -m : Print Hardware Instruction Set (`x86_64', Here).

   Download latest stable Kernel from the link below. Don't get confused by patches download
   link there. Download the one which clearly states - "LATEST STABLE KERNEL".
    1. [25]https://www.kernel.org/

   Alternatively you can use wget to download the kernel which is more convenient.
avi@tecmint:~/Downloads$ wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.16.tar.xz

Step 2: Verify Kernel 3.16 Signature

   After the download is finished and before we move ahead, it is strongly advised to verify
   kernel signature.
avi@tecmint:~/Downloads$ wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.16.tar.sign

   The signature verification needs to be done against uncompressed file. This is to require
   one signature against various compression format viz., .gz, .bz2, .xz.

   Next, uncompress Linux Kernel Image.
avi@tecmint:~/Downloads$ unxz linux-3.16.tar.xz

   Verify it against signature.
avi@tecmint:~/Downloads$ gpg --verify linux-3.16.tar.sign

   [26]Verify Kernel Signature
   Verify Kernel Signature

   Verify Kernel Signature

   Note: If above command throws gpg: Can't check signature: public key not found error. That
   means we need to download Public key manually from PGP Server.
avi@tecmint:~/Downloads$ gpg --recv-keys  00411886

   [27]Download Public Key
   Download Public Key

   Download Public Key

   After downloading key, verify the the Key again.
avi@tecmint:~/Downloads$ gpg --verify linux-3.16.tar.sign

   [28]Verify Key
   Verify Key

   Verify Key

   Have you noticed two things about gpg key verification.
    1. gpg: Good signature from "Linus Torvalds <torvalds@linux-foundation.org>".
    2. Primary key fingerprint: ABAF 11C6 5A29 70B1 30AB E3C4 79BE 3E43 0041 1886 .

   Nothing to worry about key fingerprint, we are sure now that the archive is OK and signed.
   Lets move ahead!

Step 3: Installing Required Packages

   Before we go ahead and start building the kernel, we need to install certain packages to
   ease the kernel building and Installation process and do it risk-free Debian way.

   Install libcurse5-dev, fakeroot and kernel-package.
avi@tecmint:~/Downloads$ sudo apt-get install libncurses5-dev
avi@tecmint:~/Downloads$ sudo apt-get install fakeroot
avi@tecmint:~/Downloads$ sudo apt-get install kernel-package

Step 4: Building Kernel 3.16

   After successful installation of the above packages, we are ready to build kernel. Move to
   the extracted Linux Kernel Image (we extracted above, while verifying signature).
avi@tecmint:~/Downloads$ cd linux-3.16/

   Now it's important to copy the current kernel configuration to present working directory as
   root user.
# cp /boot/config-'uname -r' .config

   It is copying /boot/config-'uname -r' to present working directory
   "/home/avi/Downloads/linux-3.16 " and saving it as `.config`.

   Here `uname -r` will automatically be replaced and processed with your currently installed
   kernel version.

   Since a dot file can't be seen the normal way, you need to use option `-a` with ls to view
   this, in your present working directory'.
$ ls -al

   [29]Building Kernel 3.16 in Debian
   Building Kernel 3.16 in Debian

   Building Kernel 3.16

   There are three ways to build a Linux Kernel.
    1. make oldconfig : It is an interactive way in which kernel ask question one by one what
       it should support and what not. It is a Very time consuming Process.
    2. make menuconfig : It is a Command-Line Menu based system where user can enable and
       disable an option. It requires ncurses library hence we Apt that above.
    3. make qconfig/xconfig/gconfig : It is the Graphical Menu based system where user can
       enable and disable an option. It requires QT Library.

   Obviously we will be using `make menuconfig`.

   Afraid of building kernel? You should not be. Its fun, there is lot of stuff you will
   learn. You should keep in mind these following things.
    1. Your hardware needs and appropriate drivers.
    2. Choose new features while you are building kernel yourself like - high memory support.
    3. Optimize kernel - select only those drivers which you need. It will speed up your boot
       process. If you are not sure of any driver, better include that.

   Now, run the `make menuconfig` command.
# make menuconfig

   Important: You must choose "SELECT - ENABLE LOADABLE MODULE SUPPORT", if you forget to do
   this, you are going to get hard times.
   [30]Kernel Menuconfig
   Kernel Menuconfig

   Run Make Menuconfig

   Note: In the open configuration windows you can configure various options for your network
   card, bluetooth, Touchpad, Graphics card, Filesystem support such as NTFS and a lot other
   options.

   There is no tutorial to guide you what you should select and what not. You come to know
   this only by Researching, studying stuff over web, learning from tutorials of tecmint and
   in every other possible way.

   You may see there is an option kernel hacking. Hacking? Yup! Here it means exploration. You
   can add various options under kernel hacking and utilize a lot of features.

   Next, select Generic Driver Options.
   [31]Select Drivers for Kernel Compilation
   Select Drivers for Kernel Compilation

   Select Drivers for Kernel Compilation

   Network Device Support.
   [32]Select Network Support for Kernel
   Select Network Support for Kernel

   Select Network Support for Kernel

   Input Device support.
   [33]Input Device Support for Kernel
   Input Device Support for Kernel

   Input Device Support for Kernel

   Load the configuration file (.config), we saved from /boot/config-`uname -r`.config.
   [34]Load Kernel Configuration
   Load Kernel Configuration

   Load Kernel Configuration

   Click on OK, save and exit. Now clean the source tree and reset the kernel-package
   parameters.
# make-kpkg clean

   [35]Reset Kernel Parameters
   Reset Kernel Parameters

   Reset Kernel Parameters

Step 5: Compiling Kernel 3.16

   Before we start compiling kernel, we need to export CONCURRENCY_LEVEL. CONCURRENCY LEVEL of
   thumb has a rule to add Numeric 1 to the cores of kernel. If you have 2 cores, export
   CONCURRENCY_LEVEL=3. If you have 4 cores, export CONCURRENCY_LEVEL=5.

   To check cores of processor you can user cat command as shown below.
# cat /proc/cpuinfo

Sample Output

Sample Output
processor       : 0
vendor_id       : GenuineIntel
cpu family      : 6
model           : 69
model name      : Intel(R) Core(TM) i3-4005U CPU @ 1.70GHz
stepping        : 1
microcode       : 0x17
cpu MHz         : 799.996
cache size      : 3072 KB
physical id     : 0
siblings        : 4
core id         : 0
cpu cores       : 2
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : 13
wp              : yes

   You see above output, I have 2 cores, so we will exporting 3 cores as shown below.
# export CONCURRENCY_LEVEL=3

   Setting correct CONCURRENCY_LEVEL will speed up the kernel compilation time.
# fakeroot make-kpkg --append-to-version "-tecmintkernel" --revision "1" --initrd kernel_image kerne
l_headers

   Here `tecminkernel` is the kernel build name, it can be anything ranging from your name,
   your host name, your pet name or anything else.
   [36]Building Linux Kernel in Debian
   Building Linux Kernel in Debian

   Building Linux Kernel
   [37]Linux Kernel Compilation in Debian
   Linux Kernel Compilation in Debian

   Linux Kernel Compilation
   [38]Kernel Compilation Process in Debian
   Kernel Compilation Process in Debian

   Kernel Compilation Process
   [39]Kernel Compilation Continues
   Kernel Compilation Continues

   Kernel Compilation Continues

   Kernel compilation takes a lot of time depending upon the modules being compiled and the
   processing power of the machine. Till the time it is compiling look at some of the FAQs of
   kernel compilation.

Frequently Asked Questions

Q1. My kernel is being compiled for a long time. Is it Normal.

   Answer : YUP! It is normal. It depends upon your module selection and machine power.

Q2. If I interrupt the kernel while it was compiling, Do I need to start all over again?

   Answer : Yup! There is no other way.

Q3. The compiled files can be used on different system to update kernel?

   Answer : Yes! The compiled kernel file we will be getting can be used to update other
   kernel of Debian machine of same architecture, with the fact that some of your hardware may
   not work, if it is different on your other machine.

Q4. Will you be hosting your compiled File?

   Answer : Yes! You can download it from the bottom of this page, but we don't guarantee all
   your hardware will work. It is recommended to compile your kernel if you are not that lazy.

Q5. Do I have packages like fakeroot and ncurses5-dev in my repository?

   Answer : Don't ask me. You have the same resource I am having.

Q6. Will I able to boot into last kernel, after I install the latest kernel.

   Answer : Yes you can boot into last kernel, if you have not removed them (see remove unused
   kernel), by selecting Advanced option from the Boot Menu.

Q7. I am facing problem in updating kernel. Will you assist me? Is it chargeable?

   Answer : We can help you through technical aspects of kernel compilation and installation
   and its not chargeable, however you can donate, if you find our work Genuine and worth.

Q8. My company facing Problem in updating Kernel. Will your team assist us? Is it Chargeable?

   Answer : Yes! It comes under our service and is chargeable, which is very nominal and
   competitive. You may drop a mail to us and we will contact you, if You are interested.

   That's the end of FAQ, let me move with compilation process. After successful compilation
   of kernel, it creates two file (Debian package), one directory `above' of our present
   working Directory.

   Our current working directory is.
/home/avi/Downloads/linux-3.16/

   Debian packages are created at.
/home/avi/Downloads

   To verify it, run the following commands.
# cd ..
# ls -l linux-*.deb

   [40]Verify Kernel Packages
   Verify Kernel Packages

   Verify Kernel Packages

   Next, run the Linux image file so created.
# dpkg -i linux-image-3.16.0-tecmintkernel_1_amd64.deb

   [41]Install Kernel Image in Debian
   Install Kernel Image in Debian

   Install Kernel Image

   Run the Linux header file so created.
# dpkg -i linux-headers-3.16.0-tecmintkernel_1_amd64.deb

   [42]Install Kernel Headers in Debian
   Install Kernel Headers in Debian

   Install Kernel Headers

   All done! We have successfully build, compiled and installed Latest Linux Kernel 3.16 on
   Debian with all other dependencies. Moreover Debian package managed to update bootloader
   (GRUB/LILO), automatically. It's time to reboot and test the latest kernel.

   Please sure to notice any error message you might get during booting. It is important to
   understand that error to solve them, if any.
# reboot

   As soon as Debian starts again, click on `Advanced option` to see a list of available and
   installed kernels.
   [43]Kernel Boot Advance Options
   Kernel Boot Advance Options

   Kernel Boot Advance Options

   See a list of installed kernels.
   [44]List Installed Kernels
   List Installed Kernels

   List Installed Kernels

   Select latest compiled Kernel (i.e. 3.16) to boot.
   [45]Boot Installed Kernel
   Boot Installed Kernel

   Boot Installed Kernel

   Check kernel version.
# uname -mrns

   [46]Verify New Kernel Version
   Verify New Kernel Version

   Verify New Kernel Version

   The latest one, installed now is set to boot, automatically and you need not choose it
   every time from advanced boot options.

Step 6: Install Pre-Compiled Kernel 3.16

   For those who don't want to compile kernel of their own on Debian (x86_64) and wants to use
   the pre-compiled kernel that we build in this tutorial, they can download it from the link
   below. This kernel may not work for some of the hardware you may be having.
    1. [47]linux-image-3.16.0-tecmint.com_kernel_1_amd64.deb
    2. [48]linux-headers-3.16.0-tecmint.com_kernel_1_amd64.deb

   Next, install pre-compiled kernel using following command.
# dpkg -i linux-image-3.16.0-tecmint.com_kernel_amd64.deb
# dpkg -i linux-headers-3.16.0-tecmint.com_kernel_amd64.deb

   The unused kernel can be removed from the system using command.
# apt-get remove linux-image-(unused_version_number)

   Caution: You should remove old kernel after testing Latest kernel throughly. Don't take a
   decision in hurry. You should proceed only if you know what you are doing.

   If you did something wrong in removing the kernel you want, or removed the kernel you were
   not supposed to, your system will be in a stage you can't work upon.

   After uninstalling an unused kernel you may get a message like.
    1. The link /vmlinuz is a damaged link.
    2. Removing symbolic link vmlinuz.
    3. You may need to re-run your boot loader[grub].
    4. The link /initrd.img is a damaged link.
    5. Removing symbolic link initrd.img .
    6. You may need to re-run your boot loader[grub].

   This is normal and you need not to worry. Just update your GRUB using the following
   command.
# /usr/sbin/update-grub

   You may need to update your /etc/kernel-img.conf file and disable `do_symlinks`, to disable
   these messages. If you are able to reboot and login again, there is no problem.

   That's all for now. I will be here again with another interesting article. Till then stay
   tuned and connected to Tecmint. Don't forget to provide us with your valuable feedback in
   the comment section below. Also tell us your experience when you encounter Kernel
   compilation and installation.
