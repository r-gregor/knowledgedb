filename: howto_customize-system-locale_multif_20151016.txt
http://askubuntu.com/questions/21316/how-can-i-customize-a-system-locale

How can I customize a system locale?

***
At System → Administration → Language support → Text. I can only choose standard locales, but
I would like to fine-tune. For example in Windows I could customise things like time and date format,
measure units, decimal separator, currency, etc manually - how can I do this in Ubuntu?

***
This answer will demonstrate how to fully customize a locale, optionally using an existing locale as a
base. The type of locale that will be used in this answer is the i18n type; such type of locale will be
implied in every mention of the word "locale" in the body of the answer.

Find a guide

The first thing you need to customize a locale, is get to know the format of the locale. This web locale
editor has a comprehensive description of every field in a locale, despite not being usable by just
anyone in a right-away manner. This will be the guide to use.

Needed tools

The only tools you need to work with locales are

A text editor. Any will do, though VIM will excell.
A text-to-unicode converter. It would be most expected that you didn't have one, so I will provide you
with a simple one. Read the next subsection to obtain it.
I recommend you to create a directory and save everything related with the work you will do on the locale
to it.

Text-to-unicode converter (encodestr)

NOTE: if you are using non-common characters you may have problems with the script I write below; you
might want to take a look at the alternative scripts linked by nass.

Save the following code to a file. This file will be identified by your system as a python script,
which is alright because it is one. This guide assumes you called the script encodestr.

#!/usr/bin/python

def encode(string):
    newstring = str()
    for ch in string:
	newstring += "<U%04X>" % ord(ch)
    return newstring

if __name__ == '__main__':
    import sys
    print encode(sys.argv[1])
    
After you have saved it, give the file execution permission - this will come in handy. You can do that
using nautilus, or by running from a terminal the following command, on the directory in which you saved
the script: chmod +x encodestr.

You can now test this script by running on the same directory: ./encodestr hello. You should get an
output equal to <U0068><U0065><U006C><U006C><U006F>.

Modify an existing locale

Modifying an existing locale is the easiest case, as ideally you will pick a locale that fits your needs
almost totally, in which case you need to make only small modifications. To tailor it, you can use the
guide to know which of the sections are the ones you want to change, and how you can change them. All
the installed locales reside in /usr/share/i18n/locales, however the guide contains pretty much every
locale ever created.

However, the first thing you will notice when you open a locale is that you will read english words as
much as weird <UXXXX> codes. You will need to be able to create these codes - this is where the encodestr
script comes.

When you know which sections you have to change, you need to know each field contained in the section.

For example, the LC_TIME section contains the field t_fmt, and many others. Each field has its own
description on the guide.
Now that you know which fields to modify, use the guide again to find out what values does the field accept.

For example, the field t_fmt accepts text and the common strfmt variables.
Just when you know what to write on the fields you want to modify, run the text through the encodestr
script to get its encoded equivalent.

NOTE: Not every field needs to be encoded, use an existing locale as a reference if needed.

For example, if you want to have the time format Time: %T in the t_fmt field, run ./encodestr "Time:
%T"; this will return <U0054><U0069><U006D><U0065><U003A><U0020><U0025><U0054> and so you will have the
line t_fmt <U0054><U0069><U006D><U0065><U003A><U0020><U0025><U0054> in your locale (in it's respective
section, of course).
After you have modified every field you wanted to, you will need to proceed to install the locale to
the system, so it can be used. Proceed to the installation section for this.

Creating a locale from scratch

As opposed to modifying one, the other method you can use to create your custom locale is working on
it from scratch. This is not very difficult if - again - you use the guide. Here's a useful tip though:
you can copy sections from other locales without actual copy and paste methods. You just have to follow
this format:

LC_SECTION
copy "locale"
END LC_SECTION
Where LC_SECTION is the section you want to modify, and locale is the locale you want to copy that
section from.

For example, if you want to copy the time format in the English locale, you would have this text your
custom locale file:
LC_TIME
copy "en_GB"
END LC_TIME
And that saves you a lot of work and assures that any change made to the referenced locale will be
mirrored to yours.
Installing your custom locale

The steps I am going to show below may not be optimal, but work.

Compile your locale. Don't panic! This takes no time. Just run the command sudo localedef -i custom -f
UTF-8 custom.UTF-8 -c -v where custom is the name of your locale.

Copy your locale to the /usr/share/i18n/locales/ directory. You will definitely need sudo priviledges
to do this, and you can do it with the command sudo cp locale /usr/share/i18n/locales/ where locale is
the filename of your custom locale.

Run the magic command. I actually don't know what exactly this command does, but it is crucial. Run sudo
locale-gen. It is most probable it generates references to the available locales where needed.

Tell your system to use the locale. If you want the locale to be used on a system-wide manner, modify the
/etc/environment file. If not, you can modify your ~/.profile file, or any other one that is sourced at
startup. If you don't know what the latter means don't worry, just use the ~/.profile file. To know what
you have to write in it, first run the locale command. It should issue a list with items like LANGUAGE,
LC_MESSAGES, LC_CTYPE and many others. You will write, for each of the sections you want (listed by the
previous command), on separate lines, this SECTION="locale" where SECTION is the section and locale the
name of your custom locale.

For example, if you want to use the time format from the Netherlands, but the english language, write:
LANGUAGE="en_GB:en"
LC_TIME="nl_NL"
NOTE: If you want to use one locale for every locale setting, write LC_ALL="locale" where locale is the
name of your custom locale. If you want to use a locale for everything but for the language, you can
write LANG="locale" and (on another line, of course) LANGUAGE="locale":XX where XX is the 2 letter code
for the language you want.

For example, if you want to use the Dutch locale and the English language, you could use:
LANG="nl_NL"
LANGUAGE="nl_NL:en"
You have finished

The next time you log in, your locale should be in use. You can test this by running the locale command
again.

Please comment about inconsistencies or false statements in this guide!

***
Hi there, The python code you use, does not work for all cases. For greek chars πμ, it outputs
<U00CF><U0080><U00CE><U00BC>, instead of the expected characters <U03C0><U03BC>. Here is a link that
works. – nass Aug 29 '13 at 18:26

***
Thanks for your input! I have included your comment in the text where it was due :) – Severo Raz Aug 29

***
Not sure what kind of customization you want, but you can set some locale variables using your ~/.locale. For
example, to get english messages but german time and the likes I use

export LC_ALL=""
export LANG="en_GB.utf8"
export LC_CTYPE="de_DE.utf8"
export LC_NUMERIC="de_DE.utf8"
export LC_TIME="de_DE.utf8"
export LC_COLLATE="de_DE.utf8"
export LC_MONETARY="de_DE.utf8"
export LC_MESSAGES="en_GB.utf8"
export LC_PAPER="de_DE.utf8"
export LC_NAME="en_GB.utf8"
export LC_ADDRESS="de_DE.utf8"
export LC_TELEPHONE="de_DE.utf8"
export LC_MEASUREMENT="de_DE.utf8"
export LC_IDENTIFICATION="de_DE.utf8"

Generating custom locales is also possible. See e.g. this guide 
[http://ccollins.wordpress.com/2009/01/06/how-to-change-date-formats-on-ubuntu/] for dates.

***
No, I want lower level customization. For example: English messages, metric units, modified Czech date/time
(DD.MM.YYYY HH:mm instead of D.M.YYYY H.MM), a dot as a decimal separator (there is a comma for this in
Czech locale) and € as the currency (there is Kč currency in Czech locale). – Ivan Jan 13 '11 at 9:20

I see. Taking en_US for LC_NUMERIC and de_DE for LC_MONETARY and LC_MEASUREMENT gives you other side
effects? See also the new link for generating a personal locale. – Carsten Thiel Jan 13 '11 at 11:03


---
http://unix.stackexchange.com/questions/136920/set-custom-locales-in-gnome3-on-fedora-20

Set custom locales in Gnome3 (on Fedora 20)

***
I've created my own custom locales and placed them in /etc/locale.conf which successfully takes effect
if I log in on a virtual console (Ctrl+Alt+F2). In my Gnome3 session those variables are not set,
though. For terminal applications I could just place them in the .bashrc but that won't help me with
graphical applications like Thunderbird and Pidgin.

I have tried to follow these hints: Locale settings in shell initialization not used by GNOME session
and even emulated the bug in Locale - ArchWiki by creating a .pam_environment file, but the locales are
still those set by Gnome3. There is a configuration dialogue in the Gnome settings but it only allows
to set a very limited set of predefined locale combinations and no way to customize them.

The relevant files in my home directory:

user@localhost:~$ ls -lah .dmrc .pam_environment .session .xsession .xsessionrc
lrwxrwxrwx. 1 user user 16 12. Jun 08:57 .dmrc -> /etc/locale.conf
lrwxrwxrwx. 1 user user 16 11. Jun 20:23 .pam_environment -> /etc/locale.conf
lrwxrwxrwx. 1 user user 16 12. Jun 09:09 .session -> /etc/locale.conf
lrwxrwxrwx. 1 user user 16 12. Jun 09:07 .xsession -> /etc/locale.conf
lrwxrwxrwx. 1 user user  9 13. Jun 11:22 .xsessionrc -> .xsession
-rw-rw-r--. 1 user user 66 13. Jun 11:13 .profile

user@localhost:~$ cat .profile
source /etc/locale.conf
The contents of /etc/locale.conf:

LANG="en_US.utf8"
LC_TIME="de_MY.utf8" # NB: de_MY
LC_MONETARY="de_DE.utf8"
LC_PAPER="de_DE.utf8"
LC_NAME="de_DE.utf8"
LC_ADDRESS="de_DE.utf8"
LC_TELEPHONE="de_DE.utf8"
LC_MEASUREMENT="de_DE.utf8"
LC_IDENTIFICATION="de_DE.utf8"

Does anyone know how to set custom locales in Gnome3 ?

***
Background Information
I tested the solution on Fedora 21 with GNOME Shell 3.14.4, but I believe it can be applied to other
versions as well.

First thing to understand is that GNOME desktop environment overrides the system-wide locale definitions
and thus is not affected by /etc/locale.conf. In addition, there are might be applications that have
their own locale configuration and don't use the system or GNOME settings at all. In this guide I will
describe a way to customize the locale settings to your needs and GNOME and the system will be consistent
from the locale perspective.

Checking Current Locale Status

System-wide Settings

From Fedora 21 System Administrator's Guide:

System-wide locale settings are stored in the /etc/locale.conf file, which is read at early boot by the
systemd daemon. The locale settings configured in /etc/locale.conf are inherited by every service or user,
unless individual programs or individual users override them.
To see the current locale status we can run:

$ localectl status
   System Locale: LANG=en_US.UTF-8
		  LC_NUMERIC=en_US.UTF-8
		  LC_TIME=en_US.UTF-8
		  LC_MONETARY=en_US.UTF-8
		  LC_PAPER=en_US.UTF-8
		  LC_MEASUREMENT=en_US.UTF-8
       VC Keymap: us
      X11 Layout: us
GNOME Settings

$ gsettings get org.gnome.system.locale region
'en_US.UTF-8'

GNOME has only one setting. By giving a quick look at the source code of gnome-control-center it seems that
when the set_localed_locale() function is called, it sets all the following categories (LC_TIME, LC_NUMERIC,
LC_MONETARY, LC_MEASUREMENT, LC_PAPER) to the same one locale defined in org.gnome.system.locale region.

Mixing different locale settings seems impossible without creating a custom locale, but fortunately it's
not a very complex task.

Creating Custom Locale
I think the easiest way to explain is by example. In my specific case I wanted to have a custom locale,
primarily based on Hebrew (he_IL) but with LC_NAME, LC_MESSAGES from en_US and LC_TIME (with modified
first_weekday and first_workday) from en_GB.

Grabbing Locale Definition Files
You should have an idea which locales you want to mix. First we need to locate the related definition
files, which can be found in /usr/share/i18n/locales/. Back to my example, I needed the following: he_IL,
en_US and en_GB. I set up a working folder in my home and copied the required files into it:

$ cd /usr/share/i18n/locales
$ mkdir -v ~/custom-locale ; cp -v he_IL en_US en_GB ~/custom-locale/
Creating a New Definition File

I decided to call my locale hc_IL and took he_IL as a basis. The following lines create a new file hc_IL
with the contents from he_IL and on the way replace all the occurrences of a string he_IL inside the
file with hc_IL.

$ cd ~/custom-locale/
$ sed 's/he_IL/hc_IL/g' he_IL > hc_IL
Modifying the New Definition File

Now we can customize the new locale to our needs. Open the newly created file ~/custom-locale/hc_IL with
your favorite text editor. I use vim (it has proper syntax highlighting for locale definition files):
$ vim ~/custom-locale/hc_IL

For those who haven't chosen their favorite editor yet and vim is not their cup of tea, can use gedit :)
$ gedit ~/custom-locale/hc_IL

The file structure is not very complicated. Essentially, it is constructed from sections. From locale(5)
man pages:

The locale definition has one part for each locale category. Each part can be copied from another existing
locale or can be defined from scratch. If the category should be copied, the only valid keyword in the
definition is copy followed by the name of the locale which should be copied.
The notion of copy is very useful. It saves time and the resulting file is clear and concise. For example,
instead of copying entire sections around, you can have:

LC_MESSAGES
copy "en_US"
END LC_MESSAGES
The complete documentation on a locale definition file can be accessed via:

$ man 5 locale
Although, if you just want to create a custom locale, which is a mix of existing ones there's no need
to understand every detail.

In my case I modified the following categories and keywords:

LC_IDENTIFICATION

title	   "Custom Hebrew locale"
source	   "mydomain.ws"
address    "http:////www.mydomain.ws"
contact    ""
email	   "admin@mydomain.ws"
tel	   ""
fax	   ""
language   "Hebrew"
territory  "Israel"
revision   "1.0"
date	   "2015-04-21"

Note: All the "category.." lines in the LC_IDENTIFICATION section have been modified during the file
creation using sed. So we don't need to touch them anymore.
LC_TIME

I copied the complete section from en_GB and modified only the lines that indicate the first day of week
and the first work day:
first_weekday 1
first_workday 1

The rest of the categories I left as they are or replaced their content with the copy directive as in:
LC_NAME
copy "en_US"
END LC_NAME

That's it, the definition file is ready. Don't forget to save the file :)

Compile and Copy the New Locale
Compilation of the new locale is done using the following command as root or using sudo. Replace hc_IL
with your locale:
$ sudo localedef  -c -v -i hc_IL -f UTF-8 hc_IL.UTF-8

If the compilation is successful the compiled locale data is added to the archive file
/usr/lib/locale/locale-archive.

Copy the new locale definition file to the locale definitions directory. Replace hc_IL with your locale:
$ sudo cp -v hc_IL /usr/share/i18n/locales/

Activating the New Locale
In this step we want to configure the system and GNOME to use the new locale.

System-wide Settings

Edit the /etc/locale.conf file as root and set every line that starts with LC_ to your new locale. For
example:

LANG=en_US.UTF-8
LC_NUMERIC=hc_IL.utf8
LC_TIME=hc_IL.utf8
LC_MONETARY=hc_IL.utf8
LC_PAPER=hc_IL.utf8
LC_MEASUREMENT=hc_IL.utf8
GNOME Settings

To activate the new locale in GNOME run the following command. Replace hc_IL with your locale:

$ gsettings set org.gnome.system.locale region "hc_IL.utf8"

Validating the New Settings
The last step is to validate that everything works as expected. To reload all the settings the easiest
for me was to reboot.

Refer to the section "Checking Current Locale Status" to check that the system configuration is correct.
Use GNOME Shell and locale dependent applications (graphical and console) and check that they behave as
expected with the new locale. E.g. if you customized LC_TIME you can run the date command to validate
the date format:

$ date +%x
21/04/15
Note: Everything was tested on Fedora 21 with GNOME 3.14. Other Linux distributions may require additional
or different steps.



---
https://ccollins.wordpress.com/2009/01/06/how-to-change-date-formats-on-ubuntu/

How to change date formats on Ubuntu

In order to change the system date format on Ubuntu, you need to know a little about where the date
format is coming from.	Regional settings, such as date and time formats, as well as language, sort order,
etc. are specified in files called locales.  A locale contains the rules specifying how dates and times
are formatted, amongst other settings.

To find which locale you are currently running, you can issue the following command in a terminal:

locale
On my system this returns:

LANG=en_IE.UTF-8
LC_CTYPE="en_IE.UTF-8"
LC_NUMERIC="en_IE.UTF-8"
LC_TIME=en_IE.UTF-8
LC_COLLATE="en_IE.UTF-8"
LC_MONETARY="en_IE.UTF-8"
LC_MESSAGES="en_IE.UTF-8"
LC_PAPER="en_IE.UTF-8"
LC_NAME="en_IE.UTF-8"
LC_ADDRESS="en_IE.UTF-8"
LC_TELEPHONE="en_IE.UTF-8"
LC_MEASUREMENT="en_IE.UTF-8"
LC_IDENTIFICATION="en_IE.UTF-8"
LC_ALL=

Here I can see that my date and time settings are being specified by “LC_TIME=en_IE.UTF-8”.  LC_*
are environment variables you can use to modify particular uses of your locales.  Run “man locale”
for more information.  The “en_IE” code tells me that I’m using English (en) for the Ireland (IE)
region, thus I have a default date format of “06/01/09”, or “%d/%m/%y” format.	Date formats
here are compatible with the “date” command.

Say for example, I would prefer to use the German date format of “06.01.2009”, or “%d.%m.%Y”.
How would I achieve this?

A simple answer would be to configure your system to use a German locale, by editing /etc/environment
and adding (or modifying) the line:
LC_TIME=de_DE.UTF-8

The problem with this approach, is that more than dates and times are now changed, such as day and month
names (now being in German).

A better way would be to customise your current locale (en_IE in my case).  To do this, change directory
to /usr/share/i18n/locales.  Here you will find many locales for many regions.	Choose the locale you
wish to customise and copy it by executing:
sudo cp en_IE custom

Next chose the date or time format string you would like.  In our case it will be “%d.%m.%Y”.
You can check and modify this string using the date command, as in:
date +%d.%m.%Y

If this returns the date in the format you would like, then you know you have the right format string.
You can find all format codes if you use “man date”.

The date format string, is specified in the locale file using a Unicode notation.  Open our custom locale
using your favourite text editor:

sudo gedit custom
The date format is specified on the line beginning “d_fmt”, and looks like:
d_fmt  "<U0025><U0064><U002F><U0025><U006D><U002F><U0025><U0079>"

You will now have to convert your date format string to Unicode.  You can do this, by looking up the Unicode
equivalent for each character on http://asciitable.com/.  In this way “%” becomes “<U0025>”,
“d” becomes “<U0064>”, “.” becomes “<U002E>”, and so on.  Replace the d_fmt line with
your new format string:
d_fmt	"<U0025><U0064><U002E><U0025><U006D><U002E><U0025><U0059>"

The same process can be used to modify the datetime format (d_t_fmt), date format (d_fmt), time format
(t_fmt), am and pm format (am_pm), and standard 12 hour notation (t_fmt_ampm), as well as other locale
settings.

Save and exit your text editor.  You now have a custom locale in the file “custom”.  In order for
the system to use it, you need to compile it into a system readable locale definition.	This can be done
using the locale compiler by executing:
sudo localedef -f UTF-8 -i custom custom.UTF-8

Now the new custom locale is available to the system, you need to configure the system to use it.  Do this
by editing the file /etc/environment (sudo gedit /etc/environment) and adding (or modifying) the line:
LC_TIME="custom.UTF-8"

All that remains is to log out and log in again, or restart any system services, to see the new format
being applied.



---
http://serverfault.com/questions/54591/how-to-install-change-locale-on-debian

How to install/change locale on Debian?

***
I've written a web application for which the user interface is in Dutch. I use the system's date and time
routines to format date strings in the application. However, the date strings that the system formats are
in English but I want them in Dutch, so I need to set the system's locale. How do I do that on Debian? I
tried setting LC_ALL=nl_NL but it doesn't seem to have any effect:

$ date
Sat Aug 15 14:31:31 UTC 2009
$ LC_ALL=nl_NL date
Sat Aug 15 14:31:36 UTC 2009

I remember that setting LC_ALL on my Ubuntu desktop system works fine. Do I need to install extra packages
to make this work, or am I doing it entirely wrong?

***
is there a way to do this automatically based on the assigned ip address of the server? – Scoop Oct 5

***
Edit /etc/default/locale and set the contents to:

LANG="nl_NL.UTF-8"
You can check which locales you currently have generated using:
# locale -a

You can generate more by editing /etc/locale.gen and uncommenting the lines for the locales that you
want to enable. Then you can generate them by running:
# locale-gen

You can find a list of supported locales in /usr/share/i18n/SUPPORTED

There is more information available on the Debian wiki.

***
/var/lib/belocs/list doesn't exist. You need to edit /etc/locale.gen or run dpkg-reconfigure locales
instead. – pgs Aug 16 '09 at 2:44

***
+1 this answer for describing locale-gen, but as per the previous comment, there's no such file as
/var/lib/belocs/list on my system – telent Jul 12 '11 at 19:52

***
You may need to install the locales package. This will ask you which locales to generate. If it's already
installed, then dpkg-reconfigure locales will let you generate more locales.

***
That only generates locales, not set the system default. – David Pashley Aug 15 '09 at 15:54

***
NO, the final question of dpkg-reconfigure locales is to select the default locale. – pgs Aug 16

***
For a web application, it might be better to use setlocale() inside the program, rather than requiring
that the system default locale be set appropriately outside. Less loose ends that way.

***
None of these answers worked for me, on an LXC container installed with:
lxc-create -n sse-master -t download -n sse-master -- \
    -d debian -r jessie --arch i386
    
I always got the following output from locale-gen, i.e. not generating any locales (none listed):
	$ sudo locale-gen

	Generating locales (this might take a while)...
	Generation complete.

Running dpkg-reconfigure locales and selecting some locales did not update /etc/locale.gen as I expected
it to.

However, when I modified that file manually and uncommented the locales that I wanted, then locale-gen
started working properly:
	$ sudo locale-gen
	Generating locales (this might take a while)...
	  en_GB.UTF-8... done
	  en_US.UTF-8... done
	Generation complete.
	
I was also able to generate locales manually like this:

	sudo localedef -i en_US -f UTF-8 en_US.UTF-8
	sudo localedef -i en_GB -f UTF-8 en_GB.UTF-8

But this was not a permanent solution: I found that running locale-gen without the --keep-existing
option will delete all such manually-generated locales, i.e. every locale not listed (and uncommented)
in /etc/locale.gen.

***
But first you need to have needed language pack installed. On my German based VPS there was no english
language pack pre-installed. So first you check that you have it installed:

aptitude install language-pack-en


---
https://wiki.archlinux.org/index.php/Locale

Locale
Locales are used by glibc and other locale-aware programs or libraries for rendering text, correctly
displaying regional monetary values, time and date formats, alphabetic idiosyncrasies, and other
locale-specific standards.
Contents [hide]
1 Generating locales
2 Setting the locale
2.1 Other uses
3 Supported variables
3.1 LANG: default locale
3.2 LANGUAGE: fallback locales
3.3 LC_TIME: date and time format
3.4 LC_COLLATE: collation
4 LC_ALL
5 Customizing locales
5.1 Setting the first day of the week
6 Tips and tricks
6.1 Launch application with different locale from terminal
6.2 Launch application with different locale from desktop
6.3 Using Python, ViM and UTF-8
7 Troubleshooting
7.1 My terminal does not support UTF-8
7.1.1 Gnome-terminal or rxvt-unicode does not support UTF-8
7.2 My system is still using wrong language
8 See also

Generating locales
Before a locale can be enabled on the system, it has to be generated. The current generated/available
locales can be viewed with:
$ locale -a

The locales that can be generated are listed in the /etc/locale.gen file: their names are defined using the
format [language][_TERRITORY][.CODESET][@modifier]. To generate a locale, first uncomment the corresponding
line in the file (or comment to remove); when doing this, also consider localizations needed by other
users on the system and specific variables. For example, for American-English uncomment en_US.UTF-8 UTF-8.
/etc/locale.gen
...
#en_SG ISO-8859-1
en_US.UTF-8 UTF-8
#en_US ISO-8859-1
...

When done, save the file and generate the uncommented locale(s) by executing:
# locale-gen

Note:
locale-gen also runs with every update of glibc.
UTF-8 is recommended over other options. [1]

Setting the locale
To display the currently set locale and its related environmental settings, type:
$ locale

The locale to be used, chosen among the previously generated ones, is set in locale.conf files, each of
which must contain a new-line separated list of environment variable assignments, for example:
locale.conf
LANG=en_AU.UTF-8
LC_COLLATE=C
LC_TIME=en_DK.UTF-8

A system-wide locale can be set by creating or editing /etc/locale.conf. The same result can be obtained
with the localectl command:
# localectl set-locale LANG=en_US.UTF-8

See man 1 localectl for details.

Tip: During system installation, if the output of locale is to your liking, you can save a little time
by doing: locale > /etc/locale.conf while chrooted.

The system-wide locale can be overridden in each user session by creating or editing ~/.config/locale.conf
(or, in general, $XDG_CONFIG_HOME/locale.conf or $HOME/.config/locale.conf).

Tip:
This can also allow keeping the logs in /var/log in English while using the local language in the user
environment.

You can create a /etc/skel/.config/locale.conf file so that any new users added using useradd and the
-m option will have ~/.config/locale.conf automatically generated.
The precedence of these locale.conf files is defined in /etc/profile.d/locale.sh.
See #Supported variables, man 5 locale.conf and related for details.
Once locale.conf files have been created or edited, their new values will take effect for new sessions
at login. To have the current environment use the new settings, do:
$ LANG= source /etc/profile.d/locale.sh

Note: The LANG variable has to be unset first, otherwise locale.sh will not update the values from
locale.conf. Only new and changed variables will be updated, variables removed from locale.conf will
still be set in the session.

Other uses
Locale variables can also be defined with the standard methods as explained in Environment variables.
For example, in order to test or debug a particular application during development, it could be launched
with something like:
$ LANG="en_AU.UTF-8" ./my_application.sh

Similarly, to set the locale for all processes run from the current shell (for example, during system
installation):
$ export LANG="en_AU.UTF-8"

Supported variables
locale.conf files support the following environment variables:
LANG
LANGUAGE
LC_CTYPE
LC_NUMERIC
LC_TIME
LC_COLLATE
LC_MONETARY
LC_MESSAGES
LC_PAPER
LC_NAME
LC_ADDRESS
LC_TELEPHONE
LC_MEASUREMENT
LC_IDENTIFICATION

LANG: default locale
The locale set for this variable will be used for all the LC_* variables that are not explicitly set.

LANGUAGE: fallback locales
Programs which use gettext for translations respect the LANGUAGE option in addition to the usual
variables. This allows users to specify a list of locales that will be used in that order. If a translation
for the preferred locale is unavailable, another from a similar locale will be used instead of the
default. For example, an Australian user might want to fall back to British rather than US spelling:
locale.conf
LANG=en_AU
LANGUAGE=en_AU:en_GB:en

LC_TIME: date and time format
If LC_TIME is set to en_US.UTF-8, for example, the date format will be "MM/DD/YYYY". If wanting to use
the the ISO 8601 date format of "YYYY-MM-DD" use:
locale.conf
LC_TIME=en_DK.UTF-8

LC_COLLATE: collation
This variable governs the collation rules used for sorting and regular expressions.
Setting the value to C can for example make the ls command sort dotfiles first, followed by uppercase
and lowercase filenames:
locale.conf
LC_COLLATE=C
See also [2].

To get around potential issues, Arch used to set LC_COLLATE=C in /etc/profile, but this method is now
deprecated.

LC_ALL
The locale set for this variable will always override LANG and all the other LC_* variables, whether
they are set or not.
LC_ALL is the only LC_* variable, which cannot be set in locale.conf files: it is meant to be used only
for testing or troubleshooting purposes, for example in /etc/profile.
Customizing locales

The factual accuracy of this article or section is disputed.

Reason: Modified locales will not survive the upgrade of glibc because the relevant file is not in the
backup field in the PKGBUILD. Custom locales should be created instead. (Discuss in Talk:Locale#)

Locales are defined in text files located in /usr/share/i18n/locales/ and can be edited to adapt to
particular needs.
After editing a locale file, do not forget to re-generate the locales for the changes to take effect
after reboot.
Setting the first day of the week
In many countries the first day of the week is Monday. To adjust this, change or add the following lines:
/usr/share/i18n/locales/chosen_locale
LC_TIME
[...]
week		7;19971130;5
first_weekday	2
first_workday	2
Tips and tricks

Launch application with different locale from terminal
For example launch Abiword with Hebrew locale:
$ env LANG=he_IL.UTF-8 abiword &

Launch application with different locale from desktop
Copy the .desktop file to the user home directory so it will take precedence:
$ cp /usr/share/applications/abiword.desktop ~/.local/share/applications/

Edit the Exec command:
~/.local/share/applications/abiword.desktop
Exec=env LANG=he_IL.UTF-8 abiword %U

Using Python, ViM and UTF-8
When executing :!python -c "import sys; print(sys.stdout.encoding)" in ViM, the output may be ANSI_X3.4-1968,
even if the locale is set correctly everyhere. Set the PYTHONIOENCODING environment variable to utf-8
to remedy the situation.

Troubleshooting
My terminal does not support UTF-8
The following lists some (not all) terminals that support UTF-8:
gnustep-terminal
konsole
mlterm
rxvt-unicode
st
VTE-based terminals
xterm - Must be run with the argument -u8. Alternatively run uxterm, which is provided by the package xterm.
Gnome-terminal or rxvt-unicode does not support UTF-8
You need to launch these applications from a UTF-8 locale or they will drop UTF-8 support. Enable the
en_US.UTF-8 locale (or your local UTF-8 alternative) per the instructions above and set it as the default
locale, then reboot.
My system is still using wrong language
It is possible that the environment variables are redefined in other files than locale.conf, for example
~/.pam_environment. See Environment variables#Defining variables for details.
See also

Gentoo Linux Localization Guide
Gentoo Wiki Archives: Locales
ICU's interactive collation testing
Free Standards Group Open Internationalisation Initiative
The Single UNIX Specification definition of Locale by The Open Group
Locale environment variables
