filename: ipfs_getting-started_20160518.txt
https://ipfs.io/docs/getting-started/

Getting Started

If you haven't done so, install ipfs.

During this tutorial, if you have any questions, feel free to ask them in ipfs/support or in #ipfs on
chat.freenode.net.

init the repo

ipfs uses a global local object repository, added to ~/.ipfs:

> ipfs init
initializing ipfs node at /Users/jbenet/.go-ipfs
generating 2048-bit RSA keypair...done
peer identity: Qmcpo2iLBikrdf1d6QU6vXuNb6P7hwrbNPW9kLAH8eG67z
to get started, enter:

  ipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme
Note the hash there may differ. If it does, use the one you got.
Now, try running:

ipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme
You should see something like this:

Hello and Welcome to IPFS!

< ascii img >

If you're seeing this, you have successfully installed
IPFS and are now interfacing with the ipfs merkledag!

 -------------------------------------------------------
| Warning:                                              |
|   This is alpha software. use at your own discretion! |
|   Much is missing or lacking polish. There are bugs.  |
|   Not yet secure. Read the security notes for more.   |
 -------------------------------------------------------

Check out some of the other files in this directory:

  ./about
  ./help
  ./quick-start     <-- usage examples
  ./readme          <-- this file
  ./security-notes
You can explore other objects in there. In particular, check out quick-start:

ipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/quick-start
Which will walk you through several interesting examples.

Going Online

Once you're ready to take things online, run the daemon in another terminal:

> ipfs daemon
Initializing daemon...
API server listening on /ip4/127.0.0.1/tcp/5001
Gateway server listening on /ip4/127.0.0.1/tcp/8080
Wait for all three lines to appear.

Make note of the tcp ports you get. if they are different, use yours in the commands below.
Now, if you're connected to the network, you should be able to see the ipfs addresses of your peers:

> ipfs swarm peers
/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ
/ip4/104.236.151.122/tcp/4001/ipfs/QmSoLju6m7xTh3DuokvT3886QRYqxAzb1kShaanJgW36yx
/ip4/134.121.64.93/tcp/1035/ipfs/QmWHyrPWQnsz1wxHR219ooJDYTvxJPyZuDUPSDpdsAovN5
/ip4/178.62.8.190/tcp/4002/ipfs/QmdXzZ25cyzSF99csCQmmPZ1NTbWTe8qtKFaZKpZQPdTFB
These are a combination of <transport address>/ipfs/<hash-of-public-key>.

Now, you should be able to get objects from the network. Try:

ipfs cat /ipfs/QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg >cat.jpg
open cat.jpg
And, you should be able to give the network objects. Try adding one, and then viewing it in your
favorite browser. In this example, we are using curl as our browser, but you can open the IPFS URL in
other browsers as well:

> hash=`echo "I <3 IPFS -$(whoami)" | ipfs add -q`
> curl "https://ipfs.io/ipfs/$hash"
I <3 IPFS -<your username>
Cool, huh? The gateway served a file from your computer. The gateway queried the DHT, found your machine,
requested the file, your machine sent it to the gateway, and the gateway sent it to your browser.

Note: depending on the state of the network, the curl may take a while. The public gateways may be
overloaded or having a hard time reaching you.
You can also check it out at your own local gateway:

> curl "http://127.0.0.1:8080/ipfs/$hash"
I <3 IPFS -<your username>
By default, your gateway is not exposed to the world, it only works locally.

Fancy Web Console

We also have a web console you can use to check the state of your node. On your favorite web browser, go to:

http://localhost:5001/webui
This should bring up a console like this:

Web console connection view

Now, you're ready:


---
https://ipfs.io/ipfs/QmdPtC3T7Kcu9iJg6hYzLBWR5XCDcYMY7HV685E3kH3EcS/2015/09/15/hosting-a-website-on-ipfs/

Hosting a Website on IPFS

This is a quick tutorial that will teach you how to host a simple static website on IPFS, and use IPNS
to keep a single id when you change the sites content

Step 1. Install IPFS
Install IPFS as described at https://ipfs.io/docs/install/

Step 2. Create a simple static site
All you need is a simple static html page, as long as ALL the links are relative. For the purposes of
this tutorial I have put a simple hello world on gist (direct download, view).

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Hello IPFS!</title>
  <link rel="stylesheet" href="./style.css" />
</head>
<body>
  <h1>Hello IPFS!</h1>
</body>
</html>
view rawindex.html hosted with ? by GitHub
h1 {
  color: green;
}
view rawstyle.css hosted with ? by GitHub
Step 3. Add to IPFS
Next you need to add the site to IPFS.

$ ipfs add -r site/
You should see something like this

added QmTVJ4XtUhqb6KMW8kxDwArVweACcy7VXAfinEks9Fd8cJ site/index.html
added QmZL2UBTwnhcLv66fARL9UV8W8a9ZA4iwTLcaUCsB1u1yW site/style.css
added QmeYxwj4CwCeGVhwi3xLrmBZUUFQdftshSiGLrTdTnWEVV site
The hash on the last line is the root of your site, you can visit is by opening
https://gateway.ipfs.io/ipfs/<your hash here>. So the example site is at
https://gateway.ipfs.io/ipfs/QmeYxwj4CwCeGVhwi3xLrmBZUUFQdftshSiGLrTdTnWEVV

Step 4. Publish to IPNS
Now you have a simple static site hosted on IPFS. The problem is, whenever you update your site, the
hash will change, and any links you have shared will continue pointing to the old version. You need a
way to always share the latest hash. That's where IPNS comes in. It allows you to store a reference to
an IPFS hash under the namespace of your peerID (hash of your public key).

$ ipfs name publish <your site hash>
That will return your peerID and the hash you are publishing to it. You can confirm by running

$ ipfs name resolve <peerId>
or by viewing https://gateway.ipfs.io/ipns/<peerID> (notice the directory is ipns not ipfs).

Step 5. Done
That's it. You're done. Whenever you update your site, just do step 4 again, and IPNS will make sure
anyone asking for your peerID gets the hash of your latest site.



---
