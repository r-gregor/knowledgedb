filename: avahi-advanced-setups-multif_20150617.txt
https://peterlaszlo.wordpress.com/2013/06/27/bonjour-avahi-rpi-windows/

Bonjour, Avahi, RPi, Windows… Setup guide

   After reading about UPnP vs Zeroconf and how easy to implement the later on, I have decided
   to tinker with Zeroconf in my home network. Probably the name of the standard Zeroconf does
   not sound familiar, but its implementation Bonjour (from Applce), and Avahi (from an open
   source project) are much better known. A quick summary: Zeroconf is built on three
   technologies:
     * automatic IP address assignment (without a DHCP server),
     * distributed name resolution using mDNS (without a DNS server)
     * network service publishing/discovery using DNS-SD.

   The first one is not really relevant nowadays, because everyone has a DHCP server in his
   home network. But second and third point is still an unresolved problem.

   The full guide setting it up on Windows, RPi and Chrome:

1. Install Bonjour on Windows

   Getting the latest version of Bonjour from Apple is a bit tricky, because it is not
   available as a standalone download. First you have to download the 64 bit version of iTunes
   from [19]http://www.apple.com/itunes/download/. Open iTunes64Setup.exe in Winrar and
   extract the Bonjour64.msi file. Double click on the extracted Bonjour64.msi file and finish
   the installation steps.

2. Install Avahi on Raspberry PI (Raspbian)

   Log into your RPi with ssh and install libnss-mdns and avahi-utils:

   sudo apt-get update
   sudo apt-get install libnss-mdns avahi-utils

3. Head scratching

   At this point I thought I was done and started to test it with a ping from my Windows
   notebook. Zeroconf publishes your computer with its hostname on the network under the
   .local domain. So my RPi should have been available as raspberrypi.local… but it was not
   working.

   ping raspberrypi.local
   Ping request could not find host raspberrypi.local. Please check the name and try again.

   First I thought that my wifi router running on Openwrt was not forwarding multicast packets
   used by mDNS between the wireless and wired ports, but the following command on my wifi
   router printed 0, which means that was not the case:

   cat /sys/devices/virtual/net/br-lan/bridge/multicast_snooping

   A little snooping on the network with tcpdump from the wifi router quickly revealed the
   real problem: Bonjour on my notebook was sending out mDNS packets using IPv6 and Avahi was
   sending out on IPv4.

   That meant there were two solutions: a) turn off IPv6 on my notebook b) turn on IPv6 on my
   RPi. Obviously I choose the later one…

4. Enable IPv6 on RPi

   Log into your RPi with ssh and load the ipv6 module

   sudo modprobe ipv6

   Then add the ip6 module to list of modules loaded during boot. Open /etc/modules in your
   favorite editor and append ipv6 as the list line in the file. I did it with vi:

   sudo vi /etc/modules

   Then restart the avahi daemon:

   sudo /etc/init.d/avahi-daemon restart
   [ ok ] Restarting Avahi mDNS/DNS-SD Daemon: avahi-daemon.

   Now the name resolution should work on either IPv6 or IPv4:

   C:\>ping raspberrypi.local
   Pinging raspberrypi.local [fe80::ba27:ebff:fe0d:5692%14] with 32 bytes of data:
   Reply from fe80::ba27:ebff:fe0d:5692%14: time=4ms
   Reply from fe80::ba27:ebff:fe0d:5692%14: time=1ms

   C:\>ping -4 raspberrypi.local
   Pinging raspberrypi.local [192.168.0.24] with 32 bytes of data:
   Reply from 192.168.0.24: bytes=32 time=2ms TTL=64
   Reply from 192.168.0.24: bytes=32 time=2ms TTL=64

5. Publish services on your network

   Publishing services with Avahi is easy. I have got the web interface of FHEM running on
   port 8083. To publish it I created /etc/avahi/services/fhem.service with following content:
<?xml version="1.0" standalone='no'?>
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">FHEM on %h</name>
  <service>
    <type>_http._tcp</type>
    <port>8083</port>
  </service>
</service-group>

   To publish the ssh and sftp server, I created /etc/avahi/services/ssh.service with the
   following content:
<?xml version="1.0" standalone='no'?>
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">SSH on %h</name>
  <service>
    <type>_ssh._tcp</type>
    <port>22</port>
  </service>
  <service>
    <type>_sftp-ssh._tcp</type>
    <port>22</port>
  </service>
</service-group>

   The same way you can publish the samba and other services running on your devices. You can
   find the complete service type list here: [20]http://www.dns-sd.org/ServiceTypes.html

   After creating the service definition files, you have to restart the avahi daemon:

   sudo /etc/init.d/avahi-daemon restart
   [ ok ] Restarting Avahi mDNS/DNS-SD Daemon: avahi-daemon.

   You can check the available services on your network with avahi-browser:

   avahi-browse -a -t

6. Install DNSSD plugin in Chrome

   Windows has no proper gui for Zeroconf, but you can install the DNSSD plugin for Chrome
   that makes published web sites easily accessible in Chrome. The installation method has
   changed in the later versions of Chrome for extensions not downloaded the Chrome Web Store:
   [DEL: First you have to download the plugin from [21]http://dnssd.me/ by right clicking on
   „Install for Google Chrome” button. Then open Tools->Extension in Chrome and drag and drop
   the downloaded crx file into it. :DEL]

   Edit:  The Chrome extension is no longer available as [22]Chrome is abandoning NPAPI. You
   can let the Chrome developers know you’d like native browser support by clicking the Star
   on [23]this issue(must be logged-in)



---
http://elinux.org/RPi_Advanced_Setup

RPi Advanced Setup

   Getting Started:

   [24]Buying Guide - for advice on buying the Raspberry Pi.

   [25]SD Card Setup - for information on how to prepare the SD Card used to boot your
   Raspberry Pi.

   [26]Basic Setup - for help with buying / selecting other hardware and setting it up.

   [27]Beginners Guide - you are up and running, now what can you do?

   Advanced Setup - for more extensive information on setting up.

   [28]Trouble Shooting - some things to check if things don't work as expected.

Notes

   WARNING: This page is not suitable for the average user. Information in this page is for
   experienced hackers only.

   This page is a community work in progress in preparation for the first users. If something
   doesn't work or isn't covered in these guides, please feel free to ask on the [29]Forum.
   But before you ask there, make sure you read the [30]FAQs.

   This page is based on [31]BeagleBoardBeginners so the serial port info is applicable only
   under explained circumstances. Also, many Raspberry Pi users will buy pre-programmed SD
   cards and can skip to reading [32]RPi Hardware Basic Setup. We expect that once Raspberry
   Pi boards become generally available helpful volunteers will update this page to match
   Raspberry Pi completely or point to better information elsewhere.

   This page in a major work in progress!

Finding hardware and setting up

   Main article: see [33]RPi Hardware Basic Setup

   You'll need to [34]copy an image to a [35]suitable SD card (or [36]make your own image).
   You'll also need a USB keyboard, TV/Monitor (with HDMI/DVI/Composite/SCART input), and
   power supply (USB charger or a USB port from a powered USB Hub or another computer).

   You'll likely also want a USB mouse, a case, and a USB Hub (a necessity for Model A). A
   powered USB Hub will reduce the demand on the RPi. To connect to the Internet, you'll need
   either an Ethernet/LAN cable (Model B) or a USB WiFi adaptor (either model). See [37]RPi
   VerifiedPeripherals for more information on supported peripherals.

   All this basic verified hardware is available from both [38]Pi Hut's Raspberry Pi Store and
   [39]ModMyPi's Raspberry Pi Shop

   When setting up, it is advisable to connect the power after everything else is ready. See
   [40]RPi_Hardware_Basic_Setup#Connecting_Together.

Serial connection

   For help setting up a serial connection with the Raspberry Pi, see
   [41]RPi_Serial_Connection.

Advanced SD card setup

   Now we want to use an SD card to install some GNU/Linux distro in it and get more space for
   our stuff. You can use either an SD or SDHC card. In the latter case of course take care
   that your PC card reader also supports SDHC. Be aware that you are not dealing with an x86
   processor, but instead a completely different architecture called ARM, so don't forget to
   install the ARM port for the distro you are planning to use.

   Our first step will be the formatting of the SD card.

Formatting the SD card via the mkcard.txt script

    1. Download mkcard.txt from
       [42]http://downloads.angstrom-distribution.org/demo/beaglebone/mkcard.txt
    2. $ chmod +x mkcard.txt
    3. $ ./mkcard.txt /dev/sdX, Where X is the letter of the card. You can find this by
       inserting your card and then running dmesg | tail. You should see the messages about
       the device being mounted in the log. Mine mounts as sdc.

   Once run, your card should be formatted.

Formatting the SD card via fdisk "Expert mode"

   First, lets clear the partition table:
================================================================================
$ sudo fdisk /dev/sdb

Command (m for help): o
Building a new DOS disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content won't be recoverable.

Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)
================================================================================

   Print card info:
================================================================================
Command (m for help): p

Disk /dev/sdb: 128 MB, 128450560 bytes
....
================================================================================

   Note card size in bytes. Needed later below.

   Then go into "Expert mode":
================================================================================
Command (m for help): x
================================================================================

   Now we want to set the geometry to 255 heads, 63 sectors and calculate the number of
   cylinders required for the particular SD/MMC card:
================================================================================
Expert command (m for help): h
Number of heads (1-256, default 4): 255

Expert command (m for help): s
Number of sectors (1-63, default 62): 63
Warning: setting sector offset for DOS compatiblity
================================================================================

   NOTE: Be especially careful in the next step. First calculate the number of cylinders as
   follows:
     * B = Card size in bytes (you got it before, in the second step when you printed the info
       out)
     * C = Number of cylinders

C=B/255/63/512

   When you get the number, you round it DOWN. Thus, if you got 108.8 you'll be using 108
   cylinders.
================================================================================
Expert command (m for help): c
Number of cylinders (1-1048576, default 1011): 15
================================================================================

   In this case 128MB card is used (reported as 128450560 bytes by fdisk above), thus
   128450560 / 255 / 63 / 512 = 15.6 rounded down to 15 cylinders. Numbers there are 255
   heads, 63 sectors, 512 bytes per sector.

   So far so good, now we want to create two partitions. One for the boot image, one for our
   distro.

   Create the FAT32 partition for booting and transferring files from Windows. Mark it as
   bootable.
================================================================================
Expert command (m for help): r
Command (m for help): n
Command action
  e   extended
  p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-245, default 1): (press Enter)
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-245, default 245): +50

Command (m for help): t
Selected partition 1
Hex code (type L to list codes): c
Changed system type of partition 1 to c (W95 FAT32 (LBA))

Command (m for help): a
Partition number (1-4): 1
================================================================================

   Create the Linux partition for the root file system.
================================================================================
Command (m for help): n
Command action
  e   extended
  p   primary partition (1-4)
p
Partition number (1-4): 2
First cylinder (52-245, default 52): (press Enter)
Using default value 52
Last cylinder or +size or +sizeM or +sizeK (52-245, default 245):(press Enter)
Using default value 245
================================================================================

   Print and save the new partition records.
================================================================================
Command (m for help): p

Disk /dev/sdc: 2021 MB, 2021654528 bytes
255 heads, 63 sectors/track, 245 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes

  Device Boot      Start         End      Blocks   Id  System
/dev/sdc1   *           1          51      409626    c  W95 FAT32 (LBA)
/dev/sdc2              52         245     1558305   83  Linux

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.

WARNING: Re-reading the partition table failed with error 16: Device or resource busy.
The kernel still uses the old table. The new table will be used at the next reboot.

WARNING: If you have created or modified any DOS 6.x partitions, please see the fdisk
manual page for additional information.
Syncing disks.
================================================================================

   Now we've got both partitions, next step is formatting them.

   NOTE: If the partitions (/dev/sdc1 and /dev/sdc2) does not exist, you should unplug the
   card and plug it back in. Linux will now be able to detect the new partitions.
================================================================================
$ sudo mkfs.msdos -F 32 /dev/sdc1 -n LABEL
mkfs.msdos 2.11 (12 Mar 2005)

$ sudo mkfs.ext3 /dev/sdc2
mke2fs 1.40-WIP (14-Nov-2006)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
195072 inodes, 389576 blocks
19478 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=402653184
12 block groups
32768 blocks per group, 32768 fragments per group
16256 inodes per group
Superblock backups stored on blocks:
       32768, 98304, 163840, 229376, 294912

Writing inode tables: done
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information:
================================================================================

   All done!

   NOTE: For convenience, you can add the -L option to the mkfs.ext3 command to assign a
   volume label to the new ext3 filesystem. If you do that, the new (automatic) mount point
   under /media when you insert that SD card into some Linux hosts will be based on that
   label. If there's no label, the new mount point will most likely be a long hex string, so
   assigning a label makes manual mounting on the host more convenient.

Setting up the boot partition

   The boot partition must contain the following files, get them from one of the official
   images:(bootable/fat32 partition)
     * bootcode.bin : 2nd stage bootloader, starts with SDRAM disabled
     * [DEL: loader.bin : 3rd stage bootloader, starts with SDRAM enabled :DEL]
     * start.elf: The GPU binary firmware image, provided by the foundation.
     * kernel.img: The OS kernel to load on the ARM processor. Normally this is Linux - see
       instructions for [43]compiling a kernel.
     * [44]cmdline.txt: Parameters passed to the kernel on boot.

   Optional files:
     * [45]config.txt: A configuration file read by the GPU. Use this to override set the
       video mode, alter system clock speeds, voltages, etc.
     * vlls directory: Additional GPU code, e.g. extra codecs. Not present in the initial
       release.

Additional files supplied by the foundation

   These files are also present on the SD card images supplied by the foundation.

   Additional kernels. Rename over kernel.img to use them (ensure you have a backup of the
   original kernel.img first!):
     * kernel_emergency.img : kernel with busybox rootfs. You can use this to repair the main
       linux partition using e2fsck if the linux partition gets corrupted.

   Before the introduction of the 512MB Raspberry PI additional GPU firmware images (start.elf
   files) were delivered, to be copied over start.elf to use them:

   the file called start.elf actually determines how much of the available 256MB of memory is
   assigned to the GPU, but previously each start.elf file gave a fixed split size. The other
   splits were simply very similar files with a different filename, which were copied over the
   one called start.elf that was actually to be used, the others had names like
   arm192_start.elf and such.
     * arm128_start.elf : 128M ARM, 128M GPU split (use this for heavy 3D work, possibly also
       required for some video decoding)
     * arm192_start.elf : 192M ARM, 64M GPU split (this is the default)
     * arm224_start.elf : 224M ARM, 32M GPU split (use this for Linux only with no 3D or video
       processing. Its enough for the 1080p framebuffer, but not much else)
     * arm240_start.elf : 240M ARM, 16M GPU split (use this for headless mode only. It is
       enough to boot the system, but you can not use video at all.)

   Note that actually there is no "default" split, the nature of the software determines what
   is the most suitable split. So a "distro" that is very heavy multimedia oriented will
   normally use the 128/128MB split as the GPU needs a lot of RAM, but a generic desktop
   distro will probably use the 64/192 MB split, and a game that doesn't use the GPU will
   probably use the 32/224MB split.

   However for a situation where there are two memory sizes (256 and 512) this isn't a very
   smart system. For example the maximum GPU memory spit of 256MB /2 = 128 MB would in the
   past give the CPU 128 MB, and the GPU also 128 MB, but when you use that memory split on a
   512 MB PI it would stil give 128 MB to the CPU, and the rest, a whopping 384 MB to the GPU,
   which couldn't do anything with it.

   So the RPF changed the firmware so that a single start.elf you now can give the GPU exactly
   the amount you want, in chunks of 16MB, with 16MB as minimum, and 128MB as maximum.

   The new syntax is to use:

   gpu_mem=(number of megabytes for the GPU)

   So for example putting

   gpu_mem=64

   will give the GPU 64 MB and whatever the rest is (either 192 or 448 MB) to the ARM CPU.

Finally booting GNU/Linux

important steps

   to be completed

Setting up for remote access / headless operation

   If you're anything like me (lazy, with a limited number of monitors), you'll want to get
   your Pi set up for remote access as soon as possible. Luckily, this is easy. These
   instructions assume you're using the official Debian distro for the Pi. Steps 0 & 1 based
   on info from [46]Steve Smith.
     * Step 0. Before you set up SSH, you might want to change the default password on the Pi,
       especially if it'll end up internet-facing. Do this on the Pi's console with the
       following command:
passwd
     * Step 1: Enable SSH with the following command:
sudo mv /boot/boot_enable_ssh.rc /boot/boot.rc
       This will enable sshd on the next boot. Restart the Pi. On reboot, you should see a
       line like the following:
Starting OpenBSD Secure Shell server: sshd
       near the end of the boot sequence. This indicates that sshd is enabled, and you should
       be able to ssh into the Pi. You'll need the Pi's IP adress to do that; get that at the
       Pi's console with:
ip addr
       You may also find it useful to copy an SSH key to the Pi so you don't need to enter a
       password each time you connect. To do that, first check if you've already got a public
       ssh keyfile:
ls ~/.ssh/id_rsa.pub
       If you haven't, you can generate one with:
ssh-keygen -t rsa -C "your_email@youremail.com"
       Finally, copy the keyfile to ~/.ssh/authorized_keys on the Pi (there's a few different
       ways to do this, I used Transmit[47][1] to copy it over SFTP, since I'm a Mac user.
       Windows users have WinSCP[48][2], and Linux users probably already know how to do it ;)
       ). This file contains all of the keys authorised to connect to the Pi, so will probably
       be blank or non-existent on a new Pi. If so, just copy id_rsa.pub to this location. If
       it already exists, add the key from id_rsa.pub to the end of the file.
     * Step 2: IP address config. If your Pi is going to be always-on, or your network is set
       up in a such a way that devices always get the same IP, you can skip the step. However,
       if your Pi's IP is likely to change frequently (say, for instance, you're just powering
       it up every so often to play, and your network assigns IPs first-come first-served
       {like most home routers} ), it's a good idea to set up a consistent network address for
       your Pi. There's two ways to do this: the quick (but brittle) way and the more flexible
       way.
          + The quick way: assign a static IP address to your Pi. This is simple, but runs the
            risk of clashing IP addresses with other devices on your network since your Pi's
            address will no longer be managed by DHCP. I haven't tried this myself, but here's
            some instructions from [49]Andrew Munsell. He's using 192.168.1.222 for his Pi,
            since that's outside the range assigned by his router. Change this address to
            whatever suits.
You can do this in Debian Squeeze on the Raspberry by modifying the /etc/network/interfaces file.

I removed the original iface eth0 line and replaced it with the following:

iface eth0 inet static
address 192.168.1.222
netmask 255.255.255.0
gateway 192.168.1.1

            On reboot, your Pi should now be using the static address specified in
            /etc/network/interfaces.
          + The flexible way: set up avahi / zeroconf. Zeroconf is 'a set of techniques that
            automatically creates a usable Internet Protocol (IP) network without manual
            operator intervention or special configuration servers.'[50][3]. Avahi is an
            implementation of zeroconf which 'ships with most Linux and *BSD
            distributions'[51][4], but not the Pi's Debian distro. Zeroconf will be familiar
            to Apple users as Bonjour, and is pretty clever tech which means that things Just
            Work when sharing stuff across computers on a network. In this context, it means
            that once we've set it up on the Pi, we'll be able to address it as:
raspberrypi.local
            regardless of what IP address it's been assigned on your local network. This is
            handy if its IP is likely to change regularly, and even means we'll continue to be
            able to address it if we're on a different network (say, shuffling between home &
            work networks).
            Information in this section largely gathered from [52]4dc5.

    1. Install avahi with the following commands on the Pi:
sudo apt-get install avahi-daemon
       and then on older Debian installs:
sudo update-rc.d avahi-daemon defaults
       or on newer Raspbian installs:
sudo insserv avahi-daemon
       (if in doubt, you're probably on the newer one).
    2. Create a configfile for Avahi at /etc/avahi/services/multiple.service. I did this with
       the following command:
sudo pico /etc/avahi/services/multiple.service
       The contents of this file should be something like the following, courtesy of aXon on
       the [53]Rasperry Pi forums:
<?xml version="1.0" standalone='no'?>
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
        <name replace-wildcards="yes">%h</name>
        <service>
                <type>_device-info._tcp</type>
                <port>0</port>
                <txt-record>model=RackMac</txt-record>
        </service>
        <service>
                <type>_ssh._tcp</type>
                <port>22</port>
        </service>
</service-group>
    3. Apply the new configuration with:
sudo /etc/init.d/avahi-daemon restart
       The Pi should now be addressable from other machines as raspberrypi.local, for example:
ssh pi@raspberrypi.local
    4. Get Wind/blows to play nice with avahi
       If you've done the first steps correctly and you open up Putty and you try to address
       your pi as raspberrypi.local, it will tell you:
       [54]Puttyerroravahi.png
       This happens for a very good reason: your Windows PC can't interpret the udp-datagrams
       avahi sends and most firewalls don't even allow them to get read. So you'll have to do
       a couple of things extra to get it working.
     ______________________________________________________________________________________

    1. Get Bonjour for Windows
       [55]http://support.apple.com/kb/DL999 Just install it, quick next next next next
       procedure will suffice. Now your computer is able to interpret the UDP datagrams which
       are multicasted by the pi. But we're not out of the woods just yet, if you try to ping
       to your raspberry pi:
C:\Windows\System32>ping raspberrypi.local
Ping-request cannot find host raspberrypi.local.
Check the name and try again.
    2. Tell your firewall: trust me, I'm an engineer.
       Stereotypically, the firewall forbids us to have some fun. First of all, the 5353
       udp-port is blocked on most firewalls, so you have to add an exception for it. Also,
       you'll have to grant internet access to the mDNSresponder.exe, this way, whenever your
       computer tries to connect with a host *.local, mDNS sends a multicast over the local
       subnet to ask whether anyone calls himself *.local. If mDNS isn't granted network
       access, nothing gets multicasted and nobody answers the phone.
       Note: If you have the McAfee firewall, you'll also have to enable UDP-control. If it
       isn't enabled, all UDP-datagrams are ignored.
    3. Enjoy the pleasure of typing raspberrypi.local in Putty
       After these steps, you should be able to ping to raspberrypi.local and even address it
       that way in putty. YMMV, if you're still having troubles at this point, try to ping to
       raspberrypi.local with the firewall turned off. If it works: hey presto, you've got
       your culprit and you can start an educated google search.

   --Live long and geeky 17:14, 17 November 2012 (UTC)

Software development/proving

   A supported platform for the Raspberry is Qt, which is already being worked on. C/C++ is
   supported through a gcc cross-compiling toolchain. On Debian/Ubuntu systems, the packages
   gcc-4.6-arm-linux-gnueabi and g++-4.6-arm-linux-gnueabi provide suitable compilers. For
   other build platforms, [56]Chris has good instructions for building a cross-compiler - this
   should also work in a Cygwin environment on Windows. MinGW may also be supported.

   Python is being pushed forward by the foundation. (Status ??)

   After compiling, using QEMU and a Linux VM would be one way of testing your apps (this also
   works on Windows). Search the forum for the ready-made ARM images.

   The choice of programming languages, IDEs and other tools on the R-Pi is only determined
   by:

   1) The operating system compatibility (at the moment the specific Linux distro used)

   2) The status of the respective ARM package repositories and their binary compatibility

   3) The possibilty to build other software + its dependencies for the R-Pi from sources
   (depends on C cross-compiler ???)

   What kind of software development and testing loop has been proven effective please (from
   someone who's been there and done it)?

   For me (and others, hopefully) that would be very useful.

Sample setup scripts to run after a fresh Raspbian install

   [57]https://github.com/iugamarian/raspberrypisetup

Further reading

   The main Raspberry Pi resources are:
     * Raspberry Pi Foundation-maintained [58]Raspberry Pi home
     * Raspberry Pi Foundation-maintained [59]Raspberry Pi Forum
     * Community-maintained [60]eLinux wiki (see [61]wiki article overview for a list of
       existing articles)

   An alternative startup guide for beginners can be found on h2g2: [62]Introducing the
   Raspberry Pi

   For more guides and projects involving the Raspberry Pi, see [63]RPi Projects.

   
   
http://www.dns-sd.org/ServiceTypes.html

                                DNS SRV (RFC 2782) Service Types

   This temporary registry of DNS SRV (RFC 2782) Service Names is now closed to new entries.

   This temporary registry operated from 2003 to 2010, because during that time the IANA
   assignment procedures did not allow for registration of a service name without an
   associated port number.

   The IANA assignment procedures have now been updated to allow registration of a service
   name without an associated port number. For more information see [1]RFC 6335 "IANA
   Procedures for the Management of the Service Name and Transport Protocol Port Number
   Registry".

   If you already sent a Service Name registration request that does not appear in this list,
   it has been forwarded to IANA for inclusion in the new [2]Unified Service Name and Port
   Number Registry. Please be patient while IANA processes the backlog and records these new
   entries.

   If you have a new Service Name you wish to register, you can now [3]do this directly
   through IANA. Note that (as of 30th August 2011) this is still the old IANA form. After you
   complete it IANA may email you requesting additional information. We expect to see this
   updated shortly with a new form requesting the new RFC 6335 information. Thank your for
   your patience during this transition.

Service Type    Description
------------    -----------

1password       1Password Password Manager data sharing and synchronization protocol
                Roustem Karimov <roustem at agilewebsolutions.com>
                Protocol description: Proprietary
                Defined TXT keys: None

a-d-sync        Altos Design Synchronization protocol
                David Lasker <dave at altosdesign.com>
                Protocol description: Proprietary
                Defined TXT keys: None

abi-instrument  Applied Biosystems Universal Instrument Framework
                Tor Slettnes <slettntn at appliedbiosystems.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  product=<short product name/model>
                  description=<readable name>
                  version=<firmware/instrument controller version>

accessdata-f2d  FTK2 Database Discovery Service
                Rick Russell <rrussell at accessdata.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

accessdata-f2w  FTK2 Backend Processing Agent Service
                Rick Russell <rrussell at accessdata.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

accessone       Strix Systems 5S/AccessOne protocol
                Scott Herscher <scott at strixsystems.com>
                Defined TXT keys: None

accountedge     MYOB AccountEdge
                Defined TXT keys: None

acrobatsrv      Adobe Acrobat
                Defined TXT keys: type, path, FeedType

actionitems     ActionItems
                Sailalong Software <CustomerService at Sailalong.com>
                Defined TXT keys: None

activeraid      Active Storage Proprietary Device Management Protocol
                Skip Levens <skip at activestoragelabs.com>
                Protocol description: Proprietary
                Defined TXT keys: None

activeraid-ssl  Encrypted transport of Active Storage Proprietary Device Management Protocol
                Skip Levens <skip at activestoragelabs.com>
                Protocol description: Proprietary
                Defined TXT keys: None

addressbook     Address-O-Matic
                Massimiliano Ribuoli and Marco Stefani <support at address-o-matic.com>
                Defined TXT keys: None

adobe-vc        Adobe Version Cue
                Defined TXT keys: txtvers=1, name, version, build

adisk           Automatic Disk Discovery
                Bob Bradley <bradley at apple.com>
                Defined TXT keys: sys, dkX

adpro-setup     ADPRO Security Device Setup
                Patrick Noffke <patrick.noffke at adpro.com.au>
                Defined TXT keys: txtvers, type

aecoretech      Apple Application Engineering Services
                Hani Abdelazim <hani at apple.com>
                Defined TXT keys: None

aeroflex        Aeroflex instrumentation and software
                David Hagood <david.hagood at aeroflex.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  orb_server=<port #> (optional) CORBA ORB server used for resource discovery
                  product_id=<string> (optional) ID of licensed product
                  txtvers="*IDN?=<identifier>" (optional) as per LXI specification (for not yet LXI
compatible instruments)

afpovertcp      Apple File Sharing
                Leland Wallace <randall at apple.com>
                Defined TXT keys: u=<username> p=<password> path=<path>

airport         AirPort Base Station
                Bob Bradley <bradley at apple.com>
                Defined TXT keys: waMA;

airprojector    AirProjector
                Yoshinori Nakayama <yoshinori_nakayama at komatsu-trilink.jp>
                Protocol description: [4]http://www.komatsu-trilink.com
                Defined TXT keys:
                  mac=<MAC address>
                  ip=<IP address>
                  note=<Location>
                  use=<Status>
                  mainprog=<Main program version>
                  bootprog=<Boot program version>

airsharing      Air Sharing
                Erik Rogers <erik at avatron.com>, Dave Howell <dave at avatron.com>
                Protocol description: Proprietary
                Defined TXT keys: None

airsharingpro   Air Sharing Pro
                Erik Rogers <erik at avatron.com>, Dave Howell <dave at avatron.com>
                Protocol description: Proprietary
                Defined TXT keys: None

amba-cam        Ambarella Cameras
                Louis Sun <lysun at ambarella.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys:
                  product=<product model name>
                  description=<string name>
                  version=<firmware version>

amiphd-p2p      P2PTapWar Sample Application from "iPhone SDK Development" Book
                Chris Adamson <invalidname at gmail.com>
                Protocol description: iPhone GameKit
                Defined TXT keys: None

animolmd        Animo License Manager
                Phil Barrett <support at cambridgeanimation.com>
                Defined TXT keys: None

animobserver    Animo Batch Server
                Phil Barrett <support at cambridgeanimation.com>
                Defined TXT keys: None

anquetsync      Anquet map synchronization between desktop and handheld devices
                Paul Lesurf <paul.lesurf at vpltd.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

appelezvous     Appelezvous
                Marco Piovanelli <support at ovolab.com>
                Protocol description: Proprietary
                Defined TXT keys: None

apple-ausend    Apple Audio Units
                James McCartney <jmccartney at apple.com>
                Defined TXT keys: None

apple-midi      Apple MIDI
                Doug Wyatt <dwyatt at apple.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

apple-sasl      Apple Password Server
                David M. O'Rourke <daveo at apple.com>
                Defined TXT keys: None

applerdbg       Apple Remote Debug Services (OpenGL Profiler)
                Dave Springer <daves at apple.com>
                Defined TXT keys: None

appletv         Apple TV
                Amandeep Jawa <daap at apple.com>
                Defined TXT keys: txtvers, PrVs, OSsi, MniT

appletv-itunes  Apple TV discovery of iTunes
                Amandeep Jawa <daap at apple.com>
                Defined TXT keys: txtvers

appletv-pair    Apple TV Pairing
                Amandeep Jawa <daap at apple.com>
                Defined TXT keys: txtvers

aquamon         AquaMon
                Defined TXT keys: None

asr             Apple Software Restore
                Shantonu Sen <ssen at apple.com>
                Defined TXT keys: image=<HTTP URL of disk image>

astnotify       Asterisk Caller-ID Notification Service
                Sven Slezak <sunny at mezzo.net>
                Protocol description: [5]http://mezzo.net/asterisk/app_notify.html
                Primary Transport Protocol: UDP
                Defined TXT keys: prefix=<country code prefix> (numeric, additionally '+')

astralite       Astralite
                Tongji University <neo.gui at gmail.com>
                Defined TXT keys: None

async           address-o-sync
                Markus Brand <address-o-sync at slamslash.com>
                Defined TXT keys: None

atlassianapp    Atlassian Application (JIRA, Confluence, Fisheye, Crucible, Crowd, Bamboo) discovery
 service
                Denise Fernandez <dcbfernandez at gmail.com>
                Protocol description: Proprietary
                Defined TXT keys: app.url

av              Allen Vanguard Hardware Service
                Mike Bush <mike.bush at allenvanguard.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

axis-video      Axis Video Cameras
                Kristina Sten <kristina.sten at axis.com>
                Defined TXT keys: None

auth            Authentication Service
                Mike St. Johns <stjohns at arpa.mil>
                Defined TXT keys: None

b3d-convince    3M Unitek Digital Orthodontic System
                Rajiv Aaron Manglani <rajivmanglani at mmm.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers=1, protovers=<api version>, guid=<32 hex digits>

babyphone       BabyPhone
                Johan Kool <johan at koolistov.net>
                Protocol description: Proprietary
                Defined TXT keys: None

bdsk            BibDesk Sharing
                Adam Maxwell <amaxwell at mac.com>
                Protocol description: [6]http://sourceforge.net/projects/bibdesk
                Defined TXT keys: txtvers, authenticate

beacon          Beacon Remote Service
                Jeffrey Sadeli <jeffrey at sadeli.com>
                Protocol description: Proprietary
                Defined TXT keys: version=<product version>, company=<product company>

beamer          Beamer Data Sharing Protocol
                Frank Szczerba <frank at appmobi.com>
                Protocol description: Proprietary
                Defined TXT keys: None

beatpack        BeatPack Synchronization Server for BeatMaker
                Mathieu Garcia <mathieu.garcia at intua.net>
                Protocol description: Proprietary (XML files served via HTTP)
                Defined TXT keys: None

beep            Xgrid Technology Preview
                David Kramer <dkramer at apple.com>
                Defined TXT keys: None

bfagent         BuildForge Agent
                Joe Senner <support at buildforge.com>
                Protocol description: Proprietary
                Defined TXT keys: None

bigbangchess    Big Bang Chess
                Freeverse Software <info at freeverse.com>
                Defined TXT keys: None

bigbangmancala  Big Bang Mancala
                Freeverse Software <info at freeverse.com>
                Defined TXT keys: None

bittorrent      BitTorrent Zeroconf Peer Discovery Protocol
                Robin Perkins <robin.perkins at internode.on.net>
                Protocol description: [7]http://www.bittorrent.org/beps/bep_0026.html
                Defined TXT keys: None

blackbook       Little Black Book Information Exchange Protocol
                David HM Spector <spector at zeitgeist.com> and Paul M Franceus <paul at blueiris.us
>
                Protocol description: Proprietary
                Defined TXT keys:
                  product=<application name>
                  description=<application description name>
                  version=<application version/build number>
                  protovers=<version of protocol in use by by this application>

bluevertise     BlueVertise Network Protocol (BNP)
                Fabrizio Guglielmino <guglielmino at infitsrl.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: role=<master or slave>

bookworm        Bookworm Client Discovery
                Arne Dirks <ad at bnc.net>
                Protocol description: Proprietary
                Defined TXT keys: flavors

bootps          Bootstrap Protocol Server
                Bill Croft <Croft at SUMEX-AIM.STANFORD.EDU>
                Protocol description: [8]RFC 951
                Primary Transport Protocol: UDP
                Defined TXT keys: None

boundaryscan    Proprietary
                Uwe Ziegler, Goepel electronic GmbH, <u.ziegler@goepel.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: blocked=<name of the device>, version=<firmware/instrument control
ler version>

bousg           Bag Of Unusual Strategy Games
                Defined TXT keys: None

bri             RFID Reader Basic Reader Interface
                Thaddeus Ternes <thaddeus.ternes at intermec.com>
                Protocol description: Proprietary
                Defined TXT keys: None

bsqdea          Backup Simplicity
                Qdea <support at qdea.com>
                Defined TXT keys: None

busycal         BusySync Calendar Synchronization Protocol
                David Riggle <dave at busymac.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

caltalk         CalTalk
                Joe Groff <arcata at gmail.com>
                Defined TXT keys: None

cardsend        Card Send Protocol
                Jeff Grossman <jagrossm at andrew.cmu.edu>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

cctv            IP and Closed-Circuit Television for Securitiy applications
                Frank Rottmann <Frank.Rottmann at web.de>
                Protocol description: Proprietary
                Defined TXT keys: u=<username>, p=<password>, path=<path to XML file>

cheat           The Cheat
                Chaz McGarvey <chaz at brokenzipper.com>
                Defined TXT keys: None

chess           Project Gridlock
                Defined TXT keys: None

chfts           Fluid Theme Server
                Defined TXT keys: None

chili           The CHILI Radiology System
                Andre Schroter <A.Schroeter at CHILI-Radiology.com>
                Protocol description: Proprietary
                Defined TXT keys: None

cip4discovery   Discovery of JDF (CIP4 Job Definition Format) enabled devices
                Stefan Daun <secretariat at cip4.org>
                Protocol description: [9]http://www.cip4.org
                Defined TXT keys: None

clipboard       Clipboard Sharing
                Defined TXT keys: None

clique          Clique Link-Local Multicast Chat Room
                Telepathy project <telepathy at lists.freedesktop.org>
                Protocol description: [10]http://telepathy.freedesktop.org/xmpp/clique
                Primary Transport Protocol: UDP
                Defined TXT keys: see [11]http://telepathy.freedesktop.org/xmpp/clique

clscts          Oracle CLS Cluster Topology Service
                David Brower <david.brower at oracle.com>
                Protocol description: Proprietary
                Defined TXT keys: None

collection      Published Collection Object
                Brady Anderson <banderso at novell.com>
                Defined TXT keys: version=?

com-ocs-es-mcc  ElectraStar media centre control protocol
                OC <ocs at ocs.cz>
                Protocol description: Proprietary
                Defined TXT keys: None

contactserver   Now Contact
                Defined TXT keys: None

corroboree      Corroboree Server
                Heath Raftery <heath at hrsoftworks.net>
                Protocol description: Proprietary
                Defined TXT keys: None

cpnotebook2     NoteBook 2
                Circus Ponies Support <support at circusponies.com>
                Protocol description: Proprietary
                Defined TXT keys: None

cvspserver      CVS PServer
                Jim Kingdon <kingdon at harvey.cyclic.com>
                Defined TXT keys: None

cw-codetap      CodeWarrior HTI Xscale PowerTAP
                Ted Woodward <ted at metrowerks.com>
                Protocol description: Proprietary
                Defined TXT keys: None

cw-dpitap       CodeWarrior HTI DPI PowerTAP
                Ted Woodward <ted at metrowerks.com>
                Protocol description: Proprietary
                Defined TXT keys: None

cw-oncetap      CodeWarrior HTI OnCE PowerTAP
                Ted Woodward <ted at metrowerks.com>
                Protocol description: Proprietary
                Defined TXT keys: None

cw-powertap     CodeWarrior HTI COP PowerTAP
                Ted Woodward <ted at metrowerks.com>
                Protocol description: Proprietary
                Defined TXT keys: None

cytv            CyTV
                Network streaming for Elgato EyeTV
                Andreas Junghans <cytv at lucid-cake.net>
                Defined TXT keys: None

daap            Digital Audio Access Protocol (iTunes)
                Amandeep Jawa <daap at apple.com>
                Defined TXT keys: txtvers, Version, iTSh Version, Machine ID, Database ID, Machine N
ame, Password

dacp            Digital Audio Control Protocol (iTunes)
                Amandeep Jawa <daap at apple.com>
                Defined TXT keys: txtvers, Ver, DbId

dancepartner    Dance partner application for iPhone
                Rory McClure <mcclurert at hotmail.com>
                Protocol description: iPhone GameKit
                Defined TXT keys: None

dataturbine     Open Source DataTurbine Streaming Data Middleware
                Tony Fountain <tfountain at ucsd.edu>
                Protocol description: [12]www.dataturbine.org
                Defined TXT keys: None

device-info     Device Info
                Stuart Cheshire <cheshire at apple.com>, Marc Krochmal <marc at apple.com>
                Not a service type. Special name reserved for DNS-SD device info.

difi            EyeHome
                Elgato <support at elgato.com>
                Defined TXT keys: None

disconnect      DisConnect Peer to Peer Game Protocol
                Michael S. Bogovich <info at burnthebox.us>
                Protocol description: Proprietary
                Defined TXT keys: None

dist-opencl     Distributed OpenCL discovery protocol
                William Dillon <wdillon at coas.oregonstate.edu>
                Protocol description: Proprietary
                Defined TXT keys: None

distcc          Distributed Compiler
                Martin Pool <mbp at samba.org>
                Defined TXT keys: None

ditrios         Ditrios SOA Framework Protocol
                Mark Schmatz <ditrios at markschmatz.de>
                Protocol description: [13]http://www.ditrios.org/index.php?link=tutorial/index

                Defined TXT keys: [14]http://www.ditrios.org/index.php?link=tutorial/index#zeroconf

divelogsync     Dive Log Data Sharing and Synchronization Protocol
                Greg McLaughlin <ggregm at moremobilesoftware.com>
                Protocol description: Proprietary
                Defined TXT keys: None

dltimesync      Local Area Dynamic Time Synchronisation Protocol
                Geoff Back <geoff at demonlair.co.uk>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None

dns-llq         DNS Long-Lived Queries
                Kiren Sekar <kiren at apple.com>
                Protocol description: [15]DNS Long-Lived Queries
                Primary Transport Protocol: UDP
                Discovery Protocol: RFC 2782

dns-sd          DNS Service Discovery
                Stuart Cheshire <cheshire at apple.com>, Marc Krochmal <marc at apple.com>
                Not a service type. Special name reserved for DNS-SD meta queries.

dns-update      DNS Dynamic Update Service
                Kiren Sekar <kiren at apple.com>
                DNS Dynamic Update Service for a given domain may not necessarily be provided by
                the principal name servers as advertised by the domain's "NS" records, and may not
                necessarily always be provided on port 53. The "_dns-update._udp.<domain>." SRV reco
rd gives
                the target host and port where DNS Dynamic Update Service is provided for the named
domain.
                Protocol description: [16]RFC 2136, [17]RFC 3007, and others.
                Primary Transport Protocol: UDP
                Discovery Protocol: RFC 2782

domain          Domain Name Server
                Service name originally allocated for Paul Mockapetris <PVM at ISI.EDU>
                Now advertised and browsed-for by numerous independent
                server and client implementations.
                Protocol description: [18]RFC 1034, [19]RFC 1035, and others.
                Primary Transport Protocol: UDP
                Discovery Protocol: RFC 2782

dop             Roar (Death of Productivity)
                Massive Flow Productions <info at massiveflow.de>
                Protocol description: Proprietary
                Defined TXT keys: name=<full username>

dossier         Vortimac Dossier Protocol
                Rob Minerick <rob at vortimac.com>
                Defined TXT keys: None

dpap            Digital Photo Access Protocol (iPhoto)
                Defined TXT keys: txtvers, Version, iPSh Version, Machine ID, Machine Name, Password

dropcopy        DropCopy
                10base-t Interactive <support at 10base-t.com>
                Defined TXT keys: None

dsl-sync        Data Synchronization Protocol for Discovery Software products
                John Hogg <it at discoverysoftware.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

dtrmtdesktop    Desktop Transporter Remote Desktop Protocol
                Daniel Stodle <daniels at cs.uit.no>
                Protocol description: Proprietary
                Defined TXT keys: None

dvbservdsc      DVB Service Discovery
                Peter MacAvock <macavock at dvb.org>
                Protocol description: The protocol is public and is defined in ETSI TS 102 034
                which is freely (including free of charge) available from ETSI at [20]www.etsi.org.
                Defined TXT keys: None

dxtgsync        Documents To Go Desktop Sync Protocol
                Tim Boyle <tboyle at dataviz.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

ea-dttx-poker   Protocol for EA Downtown Texas Hold 'em
                Ben Lewis <apple at method-solutions.com>
                Protocol description: Proprietary
                Defined TXT keys: None

earphoria       Earphoria
                Rogue Amoeba <earphoria at rogueamoeba.com>
                Defined TXT keys: None

eb-amuzi        Amuzi peer-to-peer session synchronization protocol
                Zachary Gramana <contactus at excitabyte.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

ebms            ebXML Messaging
                Matthew MacKenzie <mattm at adobe.com>
                Defined TXT keys: Endpoint=</path/to/endpoint>

ecms            Northrup Grumman/Mission Systems/ESL Data Flow Protocol
                Dan Goff <Dan.Goff at ngc.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ebreg           ebXML Registry
                Matthew MacKenzie <mattm at adobe.com>
                Defined TXT keys: HttpBinding=</path/to/registry/http/binding>

ecbyesfsgksc    Net Monitor Anti-Piracy Service
                Guy Meyer <rominar at mac.com>
                Defined TXT keys: None

edcp            LaCie Ethernet Disk Configuration Protocol
                Nicolas Bouilleaud <nbouilleaud at lacie.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: ip, mac, dhcp, mask, gtwy, wins, name, version

egistix         Egistix Auto-Discovery
                Dave Lindquist <dlindquist at egistix.com>
                Protocol description: Proprietary
                Defined TXT keys: None

eheap           Interactive Room Software Infrastructure (Event Sharing)
                Defined TXT keys: None

embrace         DataEnvoy
                Rob MacGregor <rob.macgregor at sympatico.ca>
                Defined TXT keys: None

ep              Endpoint Protocol (EP) for use in Home Automation systems
                Tommy van der Vorst <tommy at pixelspark.nl>
                Protocol description: [21]developer.pixelspark.nl
                Defined TXT keys: [22]dns-sd_mdns

eppc            Remote AppleEvents
                Steve Zellers <zellers at apple.com>
                Defined TXT keys: None

erp-scale       Pocket Programs ERP-Scale Server Discovery protocol
                Ian Bradley <ian.bradley at pocketprogams.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  Version=<version number>
                  RFC=<RFC destination and status>
                  Device=<Scale device and status>

esp             Extensis Server Protocol
                Loren Barr <lbarr at extensis.com>
                Protocol description: Proprietary
                Defined TXT keys: None

eucalyptus      Eucalyptus Discovery
                Support Team <support at eucalyptus.com>
                Protocol description: [23]Eucalyptus-DNS-SD
                Defined TXT keys: [24]Eucalyptus-DNS-SD

eventserver     Now Up-to-Date
                Defined TXT keys: None

evs-notif       EVS Notification Center Protocol
                Eric Gillet <e.gillet at evs.tv>
                Protocol description: Proprietary
                Defined TXT keys: ID, Address

ewalletsync     Synchronization Protocol for Ilium Software's eWallet
                Dan Amstutz <dan at iliumsoft.com>
                Protocol description: Proprietary
                Defined TXT keys: name=<friendly device name>

example         Example Service Type
                Not a real service type.
                Special 'pretend' service types ("_example._udp" and "_example._tcp")
                reserved for use in illustrative examples in books and other documentation.

exb             Exbiblio Cascading Service Protocol
                Claes-Fredrik Mannby <cf at mannby.com>
                Protocol description: Proprietary
                Defined TXT keys: Will be described at [25]www.exbiblio.com

exec            Remote Process Execution
                Authentication performed using passwords and UNIX login names.
                Defined TXT keys: None

extensissn      Extensis Serial Number
                Extensis <webmaster at extensis.com>
                Defined TXT keys: None

eyetvsn         EyeTV Sharing
                Elgato <support at elgato.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers=1, keyhash=<4 bytes>

facespan        FaceSpan
                Kerry Hazelgren <hazelgren at facespan.com>
                Defined TXT keys: None

fairview        Fairview Device Identification
                Jim Lyle <jim.lyle at siliconimage.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: DevID=<device id>, DevType=<device type>, DevStat=<device status>

faxstfx         FAXstf
                Smith Micro <cs at smithmicro.com>
                Defined TXT keys: None

feed-sharing    NetNewsWire 2.0
                Ranchero Software <info at ranchero.com>
                Defined TXT keys: None

firetask        Firetask task sharing and synchronization protocol
                Gerald Aquila <gerald.aquila at gmail.com>
                Protocol description: Proprietary
                Defined TXT keys: None

fish            Fish
                Oriol Ferrer Mesia <tm05788 at salleurl.edu>
                Defined TXT keys: None

fix             Financial Information Exchange (FIX) Protocol
                Joakim Johansson <joakim.johansson at tbricks.com>
                Protocol description: [26]http://www.fixprotocol.org/specifications
                Defined TXT keys:
                  Currently valid enumerated values:
                   FIX Session Protocol Versions (SESSIONVERSION): 1.1
                   FIX Application Protocol Versions (APPLICATIONVERSION): 2.7, 3.0, 4.0, 4.1, 4.2,
4.3, 4.4, 5.0

                  Possible TXT records defined and their values (replace uppercase text with enumera
tions from the list above):
                   txtvers=1
                   fix=APPLICATIONVERSION
                   fix supported=APPLICATIONVERSION[,APPLICATIONVERSION, ... ,APPLICATIONVERSION]
                   fixt=SESSIONVERSION

fjork           Fjork
                John Schilling <john at jschilling.net>
                Defined TXT keys: None

fl-purr         FilmLight Cluster Power Control Service
                Darrin Smart <dns-sd at filmlight.ltd.uk>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: Proprietary

fmpro-internal  FileMaker Pro
                Clay Maeckel <clay_maeckel at filemaker.com>
                Defined TXT keys: None

fmserver-admin  FileMaker Server Administration Communication Service
                Eric Jacobson <eric_jacobson at filemaker.com>
                Protocol description: Proprietary
                Defined TXT keys: None

fontagentnode   FontAgent Pro
                Insider Software <http://www.insidersoftware.com>
                Defined TXT keys: None

foxtrot-serv    FoxTrot Search Server Discovery Service
                Jerome Seydoux <jerome at ctmdev.com>
                Protocol description: Proprietary
                Defined TXT keys: None

foxtrot-start   FoxTrot Professional Search Discovery Service
                Jerome Seydoux <jerome at ctmdev.com>
                Protocol description: Proprietary
                Defined TXT keys: None

frameforge-lic  FrameForge License
                James W. Walker <jamesw@frameforge3d.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

freehand        FreeHand MusicPad Pro Interface Protocol
                Ted Schroeder <tschroeder at freehandsystems.com>
                Defined TXT keys: None

frog            Frog Navigation Systems
                Rene Jager <renej at frog.nl>
                Protocol description: Proprietary
                Defined TXT keys: type, name, id

ftp             File Transfer
                Service name originally allocated for Jon Postel <postel at isi.edu>
                Now advertised and browsed-for by numerous independent
                server and client implementations.
                Protocol description: [27]RFC 959
                Defined TXT keys: u=<username> p=<password> path=<path>

ftpcroco        Crocodile FTP Server
                Xnet Communications <croco at xdsnet.de>
                Defined TXT keys: None

fv-cert         Fairview Certificate
                Jim Lyle <jim.lyle at siliconimage.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: DevID=<device id>, DevPK=<device public key>

fv-key          Fairview Key
                Jim Lyle <jim.lyle at siliconimage.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: KeyID=<device id>

fv-time         Fairview Time/Date
                Jim Lyle <jim.lyle at siliconimage.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None

garagepad       Entrackment Client Service
                Talkative AB <support at talkative.se>
                Protocol description: Proprietary
                Defined TXT keys: None

gbs-smp         SnapMail
                Eric Harris-Braun <eric at glassbead.com>
                Defined TXT keys: None

gbs-stp         SnapTalk
                Eric Harris-Braun <eric at glassbead.com>
                Defined TXT keys: None

gforce-ssmp     G-Force Control via SoundSpectrum's SSMP TCP Protocol
                Andy O'Meara <andy at soundspectrum.com>
                Protocol description: Proprietary
                Defined TXT keys: None

glasspad        GlassPad Data Exchange Protocol
                Emmanuel Merali <emumerali at gmail.com>
                Protocol description: Proprietary
                Defined TXT keys: guid

glasspadserver  GlassPadServer Data Exchange Protocol
                Emmanuel Merali <emumerali at gmail.com>
                Protocol description: Proprietary
                Defined TXT keys: guid

glrdrvmon       OpenGL Driver Monitor
                Dave Springer <daves at apple.com>
                Defined TXT keys: None

gpnp            Grid Plug and Play
                David Brower <david.brower at oracle.com>
                Protocol description: [28]RFC 3920
                Defined TXT keys: None

grillezvous     Roxio ToastAnywhere(tm) Recorder Sharing
                Defined TXT keys: AppID=<application id> KeyHash=<application license key hash>

growl           Growl
                Defined TXT keys: None

guid            Special service type for resolving by GUID (Globally Unique Identifier)
                Defined TXT keys: Varies; Depends on type of service being offered/resolved
                Although DNS-SD does not recommend or advocate using GUIDs as the primary name
                of an offered service ([29]why not?), it does support use of GUIDs as service names
                where developers want to use them that way.
                Typically users do not browse for GUIDs. They are not user-friendly and not very
                informative. Typically, the service is advertised as usual, using a user-friendly
                name. One of the TXT record attributes is a GUID for the service instance.
                Once the user has browsed and chosen the desired service instance via its user-frien
dly
                name, the service is resolved, the TXT record is retrieved, and the GUID is stored.
                A given network service instance is therefore being advertised two ways, for example
:
                    <User-Friendly-Name>._ptp._tcp.local
                    <GUID>._guid._tcp.local
                On subsequent accesses to the service, the GUID-based name is resolved, and that
                particular service instance is discovered, even if the user has subsequently
                changed the user-friendly name to something else.
                Note: Although each different logical service type needs to have its own different
                DNS-SD service type, all GUID-based names use the same pseudo-type: "_guid._tcp".
                There is no possibility of name conflict because (by definition) GUIDs are globally
unique.

h323            H.323 Real-time audio, video and data communication call setup protocol
                Will MacDonald <will at codian.com>
                Defined TXT keys: None

helix           MultiUser Helix Server
                Larry Atkin <shasta at qsatoolworks.com>
                Protocol description: Proprietary
                Defined TXT keys: None

help            HELP command
                TCP Port Service Multiplexer (TCPMUX)
                RFC 1078

hg              Mercurial web-based repository access
                Protocol description: Proprietary
                Defined TXT keys: None
                  path=<file system pathname to repository>
                  description=<descriptive name of repository>

hinz            HINZMobil Synchronization protocol
                Jorg Laschke <laschke@hinz.de>
                Protocol description: Proprietary
                Defined TXT keys: None

hmcp            Home Media Control Protocol
                Will Lahr <will at disruptivegroup.com>
                Defined TXT keys: None

home-sharing    iTunes Home Sharing
                Amandeep Jawa <daap at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, hQ, iTSh Version, MID, Database ID, dmb, Version, OSsi, h
G, hC, Machine ID

homeauto        iDo Technology Home Automation Protocol
                Tony de Rijk <idotechnology at mac.com>
                Protocol description: Proprietary
                Defined TXT keys: None

honeywell-vid   Honeywell Video Systems
                Shankar Prasad <Shankar.Prasad at honeywell.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None

hotwayd         Hotwayd
                Defined TXT keys: None

howdy           Howdy messaging and notification protocol
                Joseph Sickel <js at ozate.com>
                Protocol description: Proprietary
                Defined TXT keys: None

hpr-bldlnx      HP Remote Build System for Linux-based Systems
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: rh73, rhel3, rhel4, deb31, suse102

hpr-bldwin      HP Remote Build System for Microsoft Windows Systems
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: xp, vista

hpr-db          Identifies systems that house databases for the Remote Build System and Remote Test
System
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: bld, tst, mstr

hpr-rep         HP Remote Repository for Build and Test Results
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: bld, tst, official

hpr-toollnx     HP Remote System that houses compilers and tools for Linux-based Systems
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: rh73, rhel3, rhel4, deb31, suse102

hpr-toolwin     HP Remote System that houses compilers and tools for Microsoft Windows Systems
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: xp, vista

hpr-tstlnx      HP Remote Test System for Linux-based Systems
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: rh73, rhel3, rhel4, deb31, suse102

hpr-tstwin      HP Remote Test System for Microsoft Windows Systems
                Jeffrey J. Walls <jeff.walls at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: xp, vista

hs-off          Hobbyist Software Off Discovery
                Rob Jonson <rob at hobbyistsoftware.com>
                Protocol description: Proprietary
                Defined TXT keys: None

htsp            Home Tv Streaming Protocol
                Andreas Öman <andreas at lonelycoder.com>
                Protocol description: [30]http://trac.lonelycoder.com/hts/wiki/htsp
                Defined TXT keys: None

http            World Wide Web HTML-over-HTTP
                Tim Berners-Lee <timbl at W3.org>
                Protocol description: [31]RFC 2616
                Defined TXT keys: u=<username> p=<password> path=<path to document>
                (see [32]txtrecords.html#http)
                Known Subtypes: _printer
                NOTE: The meaning of this service type, though called just "http", actually
                denotes something more precise than just "any data transported using HTTP".
                The DNS-SD service type "http" should only be used to advertise content that:
                 * is served over HTTP,
                 * can be displayed by "typical" web browser client software, and
                 * is intented primarily to be viewed by a human user.
                Of course, the definition of "typical web browser" is subjective, and may
                change over time, but for practical purposes the DNS-SD service type "http"
                can be understood as meaning "human-readable HTML content served over HTTP".
                In some cases other widely-supported content types may also be appropriate,
                such as plain text over HTTP, or JPEG image over HTTP.
                Content types not intented primarily for viewing by a human user, or not
                widely-supported in web browsing clients, should not be advertised as
                DNS-SD service type "http", even if they do happen to be transported over HTTP.
                Such types should be advertised as their own logical service type with their
                own DNS-SD service type, for example, XUL (XML User Interface Language)
                transported over HTTP is advertised explicitly as DNS-SD service type "xul-http".

https           HTTP over SSL/TLS
                Tim Berners-Lee <timbl at W3.org>
                Protocol description: [33]RFC 2616
                NOTE: Web browsers like Safari and Internet Explorer (with the [34]Bonjour for Windo
ws plugin)
                DO NOT browse for DNS-SD service type "_https._tcp" in addition to browsing for "_ht
tp._tcp".
                This is a conscious decision to reduce proliferation of service types, to help keep
                DNS-SD efficient on the network. Today, if a user types http://www.mybank.com/ into
their
                web browser, the web server automatically redirects the user to https://www.mybank.c
om/.
                Rather than having an entirely different DNS-SD service type for https, we recommend
                using the same redirection mechanism: advertise a plain "http" service, which consis
ts
                of nothing except an HTTP redirection to the desired "https" URL.
                Work is currently being done on adding mechanisms to HTTP and TLS to allow the serve
r
                to tell the client that it needs to activate TLS on the current connection before
                proceeding. If this becomes widely adopted, it further justifies the decision to
                not create a separate DNS-SD service type "_https._tcp", because security becomes
                just another one of the things that is negotiated on a per-connection basis (like
                content-type negotiation today) rather than being an entirely separate thing.

hydra           SubEthaEdit
                TheCodingMonkeys <monkeys at codingmonkeys.de>
                Defined TXT keys: None

hyperstream     Atempo HyperStream deduplication server
                Laurent Charmet <laurent.charmet at atempo.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  version=x.y.z.w
                  uuid=<36 bytes UUID string>
                  host=<real host name>

iax             Inter Asterisk eXchange, ease-of-use NAT friendly open VoIP protocol
                Benjamin Kowarsch <benjamin at sunrise-tel.com> November 2004
                Protocol Description: [35]http://www.cornfed.com/iax.pdf (work in progress)
                Primary Transport Protocol: UDP
                Defined TXT keys:
                  auth          plaintext | md5 | rsakeys
                  userid        alphanumeric, additionally '_', '+', '-'
                  secret        any printable ASCII characters
                  domain        any DNS domain name or IP address
                  extension     alphanumeric, additionally '*', '#', '_', '+', '-'
                  context       alphanumeric, additionally '_', '+', '-'
                  trunk         yes | no | 0 | 1
                  welcome       alphanumeric, additionally '*', '#', '_', '+', '-'
                  voicemail     alphanumeric, additionally '*', '#', '_', '+', '-'
                  reception     alphanumeric, additionally '*', '#', '_', '+', '-'
                  echotest      alphanumeric, additionally '*', '#', '_', '+', '-'
                  ivrtest       alphanumeric, additionally '*', '#', '_', '+', '-'
                All of these TXT record keys are optional, they may be omitted.
                Further keys may be added in the future.

ibiz            iBiz Server
                IGG Software <ian at iggsoftware.com>
                Defined TXT keys: None

ica-networking  Image Capture Networking
                Baskaran Subramaniam <baskaran at apple.com>
                Defined TXT keys: None

ican            Northrup Grumman/TASC/ICAN Protocol
                Laurent Mihalkovic <ljp_m at mac.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ichalkboard     iChalk
                Math Game House Software <mathgamehouse at mac.com>
                Defined TXT keys: None

ichat           iChat 1.0
                Jens Alfke <jens at apple.com>
                Defined TXT keys: Proprietary

iconquer        iConquer
                Andrew Zamler-Carhart <andrew at zamler-carhart.com>
                Defined TXT keys: None

idata           Generic Data Acquisition and Control Protocol
                Carson Fenimore <carson.fenimore at inl.gov>
                Protocol description: Proprietary
                Defined TXT keys: None

idsync          SplashID Synchronization Service
                Justin Cepelak <jcepelak at splashdata.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

ifolder         Published iFolder
                Brady Anderson <banderso at novell.com>
                Defined TXT keys: version=?

ihouse          Idle Hands iHouse Protocol
                Toby Smith <dns at idlehands.net>
                Defined TXT keys: None

ii-drills       Instant Interactive Drills
                Ricky Sharp <rsharp at instantinteractive.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ii-konane       Instant Interactive Konane
                Ricky Sharp <rsharp at instantinteractive.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ilynx           iLynX
                iOS Software <ios at free.fr>
                Defined TXT keys: None

imap            Internet Message Access Protocol
                Mark Crispin <MRC at CAC.Washington.EDU>
                Discovery Protocol: RFC 2782

imidi           iMidi
                Robert Grant <rob at grantedsw.com>
                Defined TXT keys: None

indigo-dvr      Indigo Security Digital Video Recorders
                Haram Lee <layne at indigo-security.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

inova-ontrack   Inova Solutions OnTrack Display Protocol
                Protocol description: Proprietary
                Defined TXT keys: None

idcws           Intermec Device Configuration Web Services
                Thaddeus Ternes <thaddeus.ternes at intermec.com>
                Protocol description: Proprietary web service for configuring embedded devices
                Defined TXT keys: version=<x.xx>

ipbroadcaster   IP Broadcaster
                10base-t Interactive <support at 10base-t.com>
                Defined TXT keys: None

ipp             IPP (Internet Printing Protocol)
                Carl-Uno Manros <manros at cp10.es.xerox.com>
                Defined TXT keys: See [36]BonjourPrinting.pdf.
                Flagship Protocol: printer

ipspeaker       IP Speaker Control Protocol
                Dan Mahn <dan.mahn at digidescorp.com>
                Protocol description: Proprietary
                Defined TXT keys: None

irelay          iRelay application discovery service
                Marc Diamante <pgmp at pgmpsolutions.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

irmc            Intego Remote Management Console
                Olivier Delecluse <odelecluse at intego.com>
                Defined TXT keys: RMC Client Version=<version>, MAC Address=<address>

iscsi           Internet Small Computer Systems Interface (iSCSI)
                Protocol description: [37]RFC 3720
                Defined TXT keys: None

isparx          iSparx
                Philipp Dreiss <dreiss at isparx.de>
                Defined TXT keys: None

ispq-vc         iSpQ VideoChat
                Chris Silverberg <csilverberg at nanocom.com>
                Defined TXT keys: None

ishare          iShare
                Steve Dekorte <steve at dekorte.com>
                Defined TXT keys: None

isticky         iSticky
                Insist <support at isticky.net>
                Defined TXT keys: None

istorm          iStorm
                Math Game House Software <mathgamehouse at mac.com>
                Defined TXT keys: None

itis-device     IT-IS International Ltd. Device
                Ben Webster <b.webster at itisint.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  type=<product type>
                  configuration=<product configuration>
                  description=<human readable description>
                  version=<device and protocol version>

itsrc           iTunes Socket Remote Control
                Kevin Leacock <kevin at itchycode.com>
                Protocol description: [38]http://www.itchycode.com
                Defined TXT keys: None

ivef            Inter VTS Exchange Format
                Harry ten Berge <berge at hitt.nl>
                Protocol description: [39]http://openivef.org
                Defined TXT keys: None

iwork           iWork Server
                IGG Software <ian at iggsoftware.com>
                Defined TXT keys: None

jcan            Northrup Grumman/TASC/JCAN Protocol
                Laurent Mihalkovic <ljp_m at mac.com>
                Protocol description: Proprietary
                Defined TXT keys: None

jeditx          Jedit X
                Satoshi Matsumoto <satoshi at artman21.co.jp>
                Protocol description: [40]http://www.artman21.net
                Defined TXT keys: None

jini            Jini Service Discovery
                Daniel Steinberg <daniel at oreilly.com>
                Protocol description: Convention giving a deterministic programmatic mapping
                between Jini service interface names and subtypes of the DNS-SD service
                meta-type "_jini._tcp". For example, a client wishing to discover objects
                that implement the "com.oreilly.ExampleService" interface would broswse for
                the DNS-SD service subtype "ExampleService.oreilly.com._sub._jini._tcp".
                (Note: Using Apple's Bonjour programming API, service subtypes
                like this are expressed as a comma-separated list following
                main type, e.g. "_jini._tcp,ExampleService.oreilly.com".
                This allows an object that implements several interfaces to specify
                all of those interfaces in a list when it registers its service.
                When browsing for services, at most a single subtype is allowed.)
                Defined TXT keys: None

jtag            Proprietary
                Uwe Ziegler, Goepel electronic GmbH, <u.ziegler@goepel.com>
                Protocol description: Proprietary
                Defined TXT keys: blocked=<name of the device>, version=<firmware/instrument control
ler version>

kerberos        Kerberos
                B. Clifford Neuman <bcn at isi.edu>
                Description: [41]draft-ietf-krb-wg-krb-dns-locate-03.txt
                Discovery Protocol: RFC 2782

kerberos-adm    Kerberos Administration
                Description: [42]draft-ietf-krb-wg-krb-dns-locate-03.txt
                Discovery Protocol: RFC 2782

ktp             Kabira Transaction Platform
                Ramiro Sarmiento <ramiro at kabira.com>
                Protocol description: Proprietary
                Defined TXT keys: None

labyrinth        Labyrinth local multiplayer protocol
                Andreas Alptun <info at illusionlabs.se>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None

lan2p           Lan2P Peer-to-Peer Network Protocol
                smash (Ben Guild) <smash at smashsworld.com>
                Protocol description: [43]http://www.lan2p.com
                Defined TXT keys: None

lapse           Gawker
                Phil Piwonka <wnka at users.sourceforge.net>
                Defined TXT keys: None

lanrevagent     LANrev Agent
                Martin Bestmann <martin at poleposition-sw.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  txtvers
                  server=<main LANrev server for agent>
                  vers=<version of LANrev Agent>
                  build=<build number of LANrev Agent>
                  id=<agent identifier>

lanrevserver    LANrev Server
                Martin Bestmann <martin at poleposition-sw.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ldap            Lightweight Directory Access Protocol
                Tim Howes <Tim.Howes at terminator.cc.umich.edu>
                Protocol description: [44]RFC 2253
                Discovery Protocol: RFC 2782

leaf            Lua Embedded Application Framework
                Ico Doornekamp <ico at saedra.nl>
                Protocol description: Proprietary
                Defined TXT keys:
                  name=<readable name>
                  product=<product name/model>
                  version=<version number>

lexicon         Lexicon Vocabulary Sharing
                Jacob Godwin-Jones <jacob at likethought.com>
                Protocol description: Proprietary
                Defined TXT keys: None

liaison         Liaison
                Brian Cully <shmit at kublai.com>
                Defined TXT keys: None

library         Delicious Library 2 Collection Data Sharing Protocol
                William Shipley <wjs at me.com>
                Protocol description: Proprietary
                Defined TXT keys: None

llrp            RFID reader Low Level Reader Protocol
                Paul Dietrich <registrar at impinj.com>
                Protocol description: [45]EPCglobal
                Defined TXT keys: None

llrp-secure     RFID reader Low Level Reader Protocol over SSL/TLS
                Jason Schoon <jason.schoon at intermec.com>
                Protocol description: [46]EPCglobal
                Defined TXT keys: None

lobby           Gobby
                0x539 dev group [47]gobby.0x539.de
                Defined TXT keys: None

logicnode       Logic Pro Distributed Audio
                Nikolaus Gerteis <ngerteis at apple.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

login           Remote Login a la Telnet
                Automatic authentication performed based on priviledged port numbers
                and distributed data bases which identify "authentication domains".
                Defined TXT keys: None

lonbridge       Echelon LonBridge Server
                Rich Blomseth <rich at echelon.com>
                Protocol description: Proprietary
                Defined TXT keys: None

lontalk         LonTalk over IP (ANSI 852)
                Michael Tennefoss <mtennefoss at echelon.com>
                Defined TXT keys: None

lonworks        Echelon LNS Remote Client
                Michael Tennefoss <mtennefoss at echelon.com>
                Defined TXT keys: None

lsys-appserver  Linksys One Application Server API
                Frank Zerangue <fzerang at cisco.com>
                Protocol description: Proprietary
                Defined TXT keys:
                   path=value (relative URL)
                   engname=value (string)

lsys-camera     Linksys One Camera API
                Frank Zerangue <fzerang at cisco.com>
                Protocol description: Proprietary
                Defined TXT keys:
                   brand=value (string)
                   model=value (string)
                   version=value (string)

lsys-ezcfg      LinkSys EZ Configuration
                Frank Zerangue <fzerang at cisco.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  model=value (string)
                  serial=value (sring)
                  hwversion=value (string)
                  swversion=value (string)
                  ifversion=value (string)
                  type=value (string)
                  mac=value (12 hex digits)

lsys-oamp       LinkSys Operations, Administration, Management, and Provisioning
                Frank Zerangue <fzerang at cisco.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  model=value (string)
                  serial=value (sring)
                  hwversion=value (string)
                  swversion=value (string)
                  ifversion=value (string)
                  type=value (string)
                  mac=value (12 hex digits)

lux-dtp         Lux Solis Data Transport Protocol
                Laurence Flath <lflath at luxsolis.com>
                Defined TXT keys: None

lxi             LXI
                Nick Barendt <nbarendt at vxitech.com>
                Protocol description: Currently in draft; When published, will be found here: [48]ww
w.lxistandard.org
                Defined TXT keys: txtvers, *IDN?=<response defined by IEEE 488; e.g., manufacturer,
model, serial number, version>

lyrics          iPod Lyrics Service
                Gary Giebler <gary at giebler.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

macfoh          MacFOH
                Shaun Wexler <dev at macfoh.com>
                Defined TXT keys: None

macfoh-admin    MacFOH admin services
                Shaun Wexler <dev at macfoh.com>
                Defined TXT keys: None

macfoh-audio    MacFOH audio stream
                Shaun Wexler <dev at macfoh.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

macfoh-events   MacFOH show control events
                Shaun Wexler <dev at macfoh.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

macfoh-data     MacFOH realtime data
                Shaun Wexler <dev at macfoh.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

macfoh-db       MacFOH database
                Shaun Wexler <dev at macfoh.com>
                Defined TXT keys: None

macfoh-remote   MacFOH Remote
                Shaun Wexler <dev at macfoh.com>
                Defined TXT keys: None

macminder       Mac Minder
                Luma Code <support at lumacode.com>
                Defined TXT keys: None

maestro         Maestro Music Sharing Service
                Luke Steffen <lukesteffen at deusty.com>
                Protocol description: Proprietary
                Defined TXT keys: None

magicdice       Magic Dice Game Protocol
                Mike Yenco <mike at yenco.com>
                Protocol description: Proprietary
                Defined TXT keys: None

mandos          Mandos Password Server
                Mandos Maintainers <mandos at fukt.bsnet.se>
                Protocol description: [49]http://www.fukt.bsnet.se/mandos/man/mandos.8#protocol
                Defined TXT keys: None

matrix          MATRIX Remote AV Switching
                Ken Jibiki <ken at kenjij.com>
                Protocol description: Proprietary
                Defined TXT keys: None

mbconsumer      MediaBroker++ Consumer
                Nate Rivard <nrivard at cc.gatech.edu>
                Protocol description: [50]http://coweb.cc.gatech.edu/sysHackfest/128
                Defined TXT keys: None

mbproducer      MediaBroker++ Producer
                Nate Rivard <nrivard at cc.gatech.edu>
                Protocol description: [51]http://coweb.cc.gatech.edu/sysHackfest/128
                Defined TXT keys: None

mbserver        MediaBroker++ Server
                Nate Rivard <nrivard at cc.gatech.edu>
                Protocol description: [52]http://coweb.cc.gatech.edu/sysHackfest/128
                Defined TXT keys: None

mconnect        ClairMail Connect
                Sachin Desai <sachin at clairmail.com>
                Protocol description: Proprietary
                Defined TXT keys: None

mcrcp           MediaCentral
                equinux <mediacentral at equinux.comdu>
                Defined TXT keys: None

mediaboard1     MediaBoardONE Asset and Information Manager data sharing and synchronization protoco
l
                Thomas K. Fischer <thomas.fischer at interservices.de>
                Protocol description: Proprietary
                Defined TXT keys: None

mesamis         Mes Amis
                Providing a means of directly connecting with friends without third-party involvemen
t.
                David Priest <priest at sfu.ca>
                Protocol description: Proprietary
                Defined TXT keys: None

mimer           Mimer SQL Engine
                Mimer <info at mimer.se>
                Defined TXT keys: None

mi-raysat       Mental Ray for Maya
                Autodesk <me.licensing at autodesk.com>
                Defined TXT keys: None

modolansrv      modo LAN Services
                Matt Craig <matt at luxology.com>
                Protocol description: Proprietary
                Defined TXT keys: None

moneysync       SplashMoney Synchronization Service
                Justin Cepelak <jcepelak at splashdata.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

moneyworks      MoneyWorks Gold and MoneyWorks Datacentre network service
                Rowan Daniell <rowan at cognito.co.nz>
                Defined TXT keys: None

moodring        Bonjour Mood Ring tutorial program
                Daniel Steinberg <daniel at oreilly.com>
                Defined TXT keys: txtvers=1 mood=<ascii digit from 0-4>

mother          Mother script server protocol
                Jonathan <jonathan at mugginsoft.com>
                Protocol description: Proprietary
                Defined TXT keys: user, ssl

movieslate      MovieSlate digital clapperboard
                Cliff Joyce <cliffjoyce at pureblend.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

mp3sushi        MP3 Sushi
                Alexandre Carlhian <alex at appeule.com>
                Defined TXT keys: None

mqtt            IBM MQ Telemetry Transport Broker
                AndySC <AndySC at uk.ibm.com>
                Protocol description: [53]mqtt.org
                Defined TXT keys: topics=<open topic to subscribe to for information>, eg topic=/inf
o

mslingshot      Martian SlingShot
                Martin Technology <support at martian.com>
                Defined TXT keys: displayName, passwordRequired, acceptsUpdates

mumble          Mumble VoIP communication protocol
                Thorvald Natvig <thorvald at natvig.com>
                Protocol description: Proprietary
                Defined TXT keys: None

musicmachine    Protocol for a distributed music playing service
                Johan Mjones <johan at nollbit.com>
                Protocol description: [54]http://github.com/nollbit/MusicMachineServer/

                Defined TXT keys: apiversion, passreq

mysync          MySync Protocol
                Martin Redington <mildm8nnered at gmail.com>
                Protocol description: Proprietary
                Defined TXT keys: None

mttp            MenuTunes Sharing
                iThink Software <contact at ithinksw.com>
                Defined TXT keys: None

mxim-art2       Maxim Integrated Products Automated Roadtest Mk II
                Zach Metzinger <zach.metzinger at maxim-ic.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

mxim-ice        Maxim Integrated Products In-circuit Emulator
                Zach Metzinger <zach.metzinger at maxim-ic.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

mxs             MatrixStore
                Object Matrix <support at object-matrix.com>
                Protocol description: Proprietary
                Defined TXT keys: None
                  mxs.system.id=<system id>
                  mxs.system.version=<system layer version>
                  mxs.cluster.id=<cluster id the system belongs to>

ncbroadcast     Network Clipboard Broadcasts
                Thom McGrath <thom at thezaz.com>
                Defined TXT keys: Contact The ZAZ Software <networkclipboard at thezaz.com>

ncdirect        Network Clipboard Direct Transfers
                Thom McGrath <thom at thezaz.com>
                Defined TXT keys: Contact The ZAZ Software <networkclipboard at thezaz.com>

ncsyncserver    Network Clipboard Sync Server
                Thom McGrath <thom at thezaz.com>
                Defined TXT keys: Contact The ZAZ Software <networkclipboard at thezaz.com>

neoriders       NeoRiders Client Discovery Protocol
                Jesse W. Towner <jwtowner at dsmedialabs.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None

net-assistant   Apple Remote Desktop
                Michael Stein <mvs at apple.com>
                Defined TXT keys: None

net2display     Vesa Net2Display
                Kenneth B. Ocheltree <kennetho at us.ibm.com>
                Protocol description: [55]www.ncl.cs.columbia.edu/publications/adeac2006_fordist.pdf
                Defined TXT keys: None

netrestore      NetRestore
                Mike Bombich <bombich at apple.com>
                Defined TXT keys: message, status, progress

newton-dock     Escale
                Paul Guyot <pguyot at kallisys.net>
                Defined TXT keys: None

nfs             Network File System - Sun Microsystems
                Brent Callaghan <brent at terra.eng.sun.com>
                Protocol description: [56]RFC 1813
                Defined TXT keys: path=<path to mount point>

nssocketport    DO over NSSocketPort
                Douglas Davidson <drd at apple.com>
                Defined TXT keys: None

ntlx-arch       American Dynamics Intellex Archive Management Service
                Gary Sands <gsands at tycoint.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, macaddress, protovers, model, serial

ntlx-ent        American Dynamics Intellex Enterprise Management Service
                Gary Sands <gsands at tycoint.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, macaddress, protovers, model, serial

ntlx-video      American Dynamics Intellex Video Service
                Gary Sands <gsands at tycoint.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, macaddress, protovers, model, serial, control, event

ntp             Network Time Protocol
                Service name originally allocated for Dave Mills <Mills at HUEY.UDEL.EDU>
                Now advertised and browsed-for by numerous independent
                server and client implementations.
                Protocol description: [57]RFC 958
                Primary Transport Protocol: UDP
                Defined TXT keys: None

ntx             Tenasys
                Carl Ellis <carl.ellis at tenasys.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None

obf             Observations Framework
                Matthew Baker <matt.baker at intermec.com>
                Protocol description: Proprietary
                Defined TXT keys: version=<value>

objective       Means for clients to locate servers in an Objective (http://www.objective.com) insta
nce.
                Marc Bailey <marc at objective.com>
                Protocol description: Proprietary SOAP/iiop, CORBA/iiop and SOAP/http bindings suppo
rted.
                Defined TXT keys:
                  txtvers='1'
                  type={'production'|'standby'|'test'|'demo'}
                  protocol={['SOAP'],['CORBA']}
                  transport=['iiop']|['http']

oce             Oce Common Exchange Protocol
                Dion Slijp <dion.slijp at oce.com>
                Protocol description: Proprietary
                Defined TXT keys: type, version

od-master       OpenDirectory Master
                Jason Thorpe <thorpej at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: None

odabsharing     OD4Contact
                Objective Decision <od4contact at objective-decision.com>
                Defined TXT keys: None

odisk           Optical Disk Sharing
                Bob Bradley <bradley at apple.com>
                Defined TXT keys: sys, dkX

officetime-sync OfficeTime Synchronization Protocol
                Support <support at officetime.net>
                Protocol description: Proprietary
                Defined TXT keys: None

ofocus-conf     OmniFocus setting configuration
                Timothy J. Wood <tjw at omnigroup.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ofocus-sync     OmniFocus document synchronization
                Timothy J. Wood <tjw at omnigroup.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

olpc-activity1  One Laptop per Child activity
                One Laptop per Child/Collabora Ltd. <devel at lists.laptop.org>
                Protocol description: [58]Shared_Activity_Protocol_1.0
                Primary Transport Protocol: UDP
                Defined TXT keys: [59]Shared_Activity_Protocol_1.0

oma-bcast-sg    OMA BCAST Service Guide Discovery Service
                Stefan Ekenberg <stefan.ekenberg at stericsson.com>
                Protocol description: [60]www.openmobilealliance.org
                Defined TXT keys: None

omni-bookmark   OmniWeb
                The Omni Group <info at omnigroup.com>
                Defined TXT keys: None

omni-live       Service for remote control of Omnisphere virtual instrument
                Glenn Olander <glenn at greenoak.com>
                Protocol description: [61]omni-liveprot.html
                Defined TXT keys: [62]omni-livetxt.html

openbase        OpenBase SQL
                Defined TXT keys: None

opencu          Conferencing Protocol
                Marc Manthey <marc at let.de>
                Protocol description: [63]http://opencu.org.uk
                Primary Transport Protocol: UDP
                Defined TXT keys: None

oprofile        oprofile server protocol
                Rob Bradford <rob at o-hand.com>
                Protocol description: Open source implementation but undocumented as yet
                Defined TXT keys: None

oscit           Open Sound Control Interface Transfer
                Gaspard Bucher <gaspard at teti.ch>
                Protocol description: [64]http://rubyk.org/en/oscit
                Primary Transport Protocol: UDP
                Defined TXT keys: None

ovready         ObjectVideo OV Ready Protocol
                Gary Myers <gmyers at objectvideo.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, protovers

owhttpd         OWFS (1-wire file system) web server
                Paul H Alfille <paul.alfille at gmail.com>
                Protocol description: [65]http://www.owfs.org/index.php?page=owhttpd
                Defined TXT keys: txtvers

owserver        OWFS (1-wire file system) server
                Paul H Alfille <paul.alfille at gmail.com>
                Protocol description: [66]http://www.owfs.org/index.php?page=owserver_protocol
                Defined TXT keys: txtvers

parentcontrol   Remote Parental Controls
                John Scalo <scalo at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: None

passwordwallet  PasswordWallet Data Synchronization Protocol
                Sanford Selznick <sanford-srvtype at selznick.com>
                Protocol description: Proprietary
                Defined TXT keys: None

pcast           Mac OS X Podcast Producer Server
                Nick Brosnahan <nbrosnahan at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: None

p2pchat         Peer-to-Peer Chat (Sample Java Bonjour application)
                Roger Pantos <rpantos at apple.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

panoply         Panoply multimedia composite transfer protocol
                Natarajan Balasundara <rajan at ipanoramii.com>
                Protocol description: Proprietary
                Defined TXT keys: None

parabay-p2p     Parabay P2P protocol
                Vishnu Varadaraj <vishnuv at parabay.com>
                Protocol description: Proprietary
                Defined TXT keys: None

parliant        PhoneValet Anywhere
                Parliant Corporation [67]www.parliant.com
                Defined TXT keys: None

pdl-datastream  Printer Page Description Language Data Stream (vendor-specific)
                Stuart Cheshire <pdl-datastream at apple.com> September 2002
                Defined TXT keys: See [68]BonjourPrinting.pdf.
                Note: Actual PDL depends on printer in question; may be Postscript,
                Epson ESC/P, HP PCL, etc.; contact respective printer vendors for
                details of each individual PDL. List of PDLs supported by a given
                printer is indicated by the "pdl" key in the TXT record.
                Flagship Protocol: printer

pgpkey-hkp      Horowitz Key Protocol (HKP)
                Marc Horowitz <marc at mit.edu>
                Protocol description: [69]http://www.mit.edu/afs/net.mit.edu/project/pks/thesis/pape
r/thesis.html
                Defined TXT keys: None

pgpkey-http     PGP Keyserver using HTTP/1.1
                Jeroen Massar <jeroen at unfix.org>
                Protocol description: [70]RFC 2816
                Defined TXT keys: path=<path on the server where the HKP applications reside>
                                  normally: "path=/pks/"

pgpkey-https    PGP Keyserver using HTTPS
                Jeroen Massar <jeroen at unfix.org>
                Protocol description: [71]RFC 2818
                Defined TXT keys: path=<path on the server where the HKP applications reside>
                                  normally: "path=/pks/"

pgpkey-ldap     PGP Keyserver using LDAP
                Jeroen Massar <jeroen at unfix.org>
                Protocol description: [72]RFC 2251
                Defined TXT keys: None

pgpkey-mailto   PGP Key submission using SMTP
                Jeroen Massar <jeroen at unfix.org>
                Protocol description: [73]RFC 2821
                Defined TXT keys: user=<user portion of the mail address>

photoparata     Photo Parata Event Photography Software
                Sam Carleton <scarleton at miltonstreet.com>
                Protocol description: Proprietary
                Defined TXT keys: None

pictua          Pictua Intercommunication Protocol
                Isaack Rasmussen <isaack at pictua.com>
                Protocol description: Proprietary
                Defined TXT keys: None

piesync         pieSync Computer to Computer Synchronization
                Timothy Wayper <timmy at wunderbear.com>
                Protocol description: Proprietary
                Defined TXT keys: None

piu             Pedestal Interface Unit by RPM-PSI
                James Nikolai <jamesnikolai at rpm-psi.com>
                Protocol description: Proprietary
                Defined TXT keys: None

poch            Parallel OperatiOn and Control Heuristic (Pooch)
                Dean Dauger <D at DaugerResearch.com>
                Defined TXT keys: None

pokeeye         Communication channel for "Poke Eye" Elgato EyeTV remote controller
                Kristoffer Lawson <setok at scred.com>
                Protocol description: Proprietary
                Defined TXT keys: None

pop3            Post Office Protocol - Version 3
                Marshall Rose <mrose at dbc.mtview.ca.us>
                Protocol description: [74]RFC 1939
                Discovery Protocol: RFC 2782

postgresql      PostgreSQL Server
                Defined TXT keys: None

powereasy-erp   PowerEasy ERP
                Ulaganathan Sriramulu <ulag at effigent.com>
                Protocol description: Proprietary
                Defined TXT keys: ip, port, name, instance, cgi-alias, major-version, minor-version,
 custom

powereasy-pos   PowerEasy Point of Sale
                Murthy Parthasarathi <pvmurthy at effigent.com>
                Protocol description: Proprietary
                Defined TXT keys: ip, port, type, device-id, major-version, minor-version, custom

pplayer-ctrl    Piano Player Remote Control
                Juraj Zopp <juraj.zopp at pianoforce.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

presence        Peer-to-peer messaging / Link-Local Messaging
                XMPP Registrar <registrar at xmpp.org>
                Protocol description: [75]http://www.xmpp.org/extensions/xep-0174.html
                Defined TXT keys: See [76]http://www.xmpp.org/registrar/linklocal.html
                Note: Registration updated May 2007. Was formerly listed as "iChat AV" (Apple's IM c
lient
                for Mac OS X) with TXT keys: txtvers, port.p2pj, phsh, vc, 1st, AIM, msg, status, la
st
                When first shipped in Mac OS X 10.2, iChat's peer-to-peer messaging protocol was
                created to solve the problem of serverless messaging between peers on the same link.
                However, there is nothing inherent in the protocol that limits it to being only link
-local;
                it was simply an artifact of iChat in Mac OS X 10.2 using link-local [77]Multicast D
NS to
                discover peers. With the advent of [78]Wide-Area DNS-SD, it is also possible to use
iChat's
                [79]peer-to-peer messaging between machines on different links.

print-caps      Retrieve a description of a device's print capabilities
                Troy Bergstrand <troy.bergstrand at hp.com>
                Protocol description: Proprietary
                Defined TXT keys: None

printer         Spooler (more commonly known as "LPR printing" or "LPD printing")
                Protocol description: [80]RFC 1179
                Defined TXT keys: See [81]BonjourPrinting.pdf.

profilemac      Profile for Mac medical practice management software
                David Sinclair <bonjour at profilemac.com>
                Protocol description: Proprietary
                Defined TXT keys: None

prolog          Prolog
                Mike Brady <brady at cs.tcd.ie>
                Protocol description: Proprietary
                Defined TXT keys: version=<version number>

protonet        Protonet node and service discovery protocol
                Ali Jelveh <ali at protonet.info>
                Protocol description: Proprietary
                Defined TXT keys: version, notes

psap            Progal Service Advertising Protocol
                Soren Weber <sw at ditec-gmbh.de>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: c0, c1, ..., cn

psia            Physical Security Interoperability Alliance Protocol
                Frank Yeh <fyeh at us.ibm.com>
                Protocol description: [82]www.psialliance.org
                Defined TXT keys: txtvers, protovers

ptnetprosrv2    PTNetPro Service
                Profiling and performance analysis protocol for Shark 4.0 and BigTop.
                Apple Computer <perftools-feedback at group.apple.com>
                Defined TXT keys: None

ptp             Picture Transfer Protocol
                Petronel Bigioi <petronel at fotonation.com>
                Defined TXT keys: guid=<Device guid>

ptp-req         PTP Initiation Request Protocol
                Mark Wood <mark.d.wood at kodak.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, guid, c0, c1, c2, ..., where the number of c_n attributes
 is variable

puzzle          Protocol used for puzzle games
                Michael Thomason <mthomason at gmail.com>
                Protocol description: Proprietary
                Defined TXT keys: None

qbox            QBox Appliance Locator
                Geoff Back <geoff.back at autocue.co.uk>
                Protocol description: Proprietary
                Defined TXT keys: None

qttp            QuickTime Transfer Protocol
                Stuart Cheshire <cheshire at apple.com>
                Protocol description: QuickTime media (a ".mov file") transported over HTTP.
                A QTTP-compliant server does not need to implement every detail of the entire HTTP s
pecification
                (e.g. POST and PUT) but it does need to implement HTTP partial GETs to allow a clien
t to perform
                random-access reads into the file rather than having to fetch the entire thing.
                Defined TXT keys: u=<username> p=<password> path=<path to document> (Same as for _ht
tp._tcp)

quinn           Quinn Game Server
                Simon Haertel <simonhaertel at web.de>
                Defined TXT keys: None

rakket          Rakket Client Protocol
                Orion Reblitz-Richardson <orionr at rakket.com>
                Protocol description: Proprietary
                Defined TXT keys: None

radiotag        RadioTAG: Event tagging for radio services
                Andy Buckingham <feedback at radiodns.org>
                Protocol description: [83]http://radiodns.org/docs/tag/RTAG01.pdf
                Defined TXT keys: None

radiovis        RadioVIS: Visualisation for radio services
                Andy Buckingham <feedback at radiodns.org>
                Protocol description: [84]http://radiodns.org/docs/tag/RVIS01.pdf
                Defined TXT keys: None

radioepg        RadioEPG: Electronic Programme Guide for radio services
                Andy Buckingham <feedback at radiodns.org>
                Protocol description: [85]http://radiodns.org/docs/tag/REPG01.pdf
                Defined TXT keys: None

raop            Remote Audio Output Protocol (AirTunes)
                BonjourDev <bonjourdev at apple.com>
                Defined TXT keys: None

rbr             RBR Instrument Communication
                Greg Johnson <greg.johnson at ieee.org>
                Protocol description: Proprietary
                Defined TXT keys: None

rce             PowerCard
                DeVoeSquared <support at devoesquared.com>
                Defined TXT keys: None

rdp             Windows Remote Desktop Protocol
                Jugaari <support at jugaari.com>
                Protocol description: [86]http://msdn.microsoft.com/en-us/library/cc240445.aspx
                Defined TXT keys: None

realplayfavs    RealPlayer Shared Favorites
                RealNetworks <macplayer at real.com>
                Defined TXT keys: None

recipe          Recipe Sharing Protocol
                Daniel G. Taylor <dan at programmer-art.org>
                Protocol description: [87]http://www.recipemanager.org/rsp/
                Defined TXT keys: [88]http://www.recipemanager.org/rsp/rsp10draft.html#dnssd

remote          Remote Device Control Protocol
                Gregory Dudek <dudek at y1d.com>
                Defined TXT keys:
                  txtvers=<TXT record version tag>
                  protovers=<protocol vesion number>
                  forground=<primary device or system>
                  version=<firmware/instrument controller version>

remoteburn      LaCie Remote Burn
                Serge DE LUCA <sdeluca at lacie.com>
                Defined TXT keys: server_version, min_client_version

renderpipe      ARTvps RenderDrive/PURE Renderer Protocol
                Andrew Hoddinott <support at artvps.com>
                Defined TXT keys: None

rendezvouspong  RendezvousPong
                Math Game House Software <mathgamehouse at mac.com>
                Defined TXT keys: None

renkara-sync    Renkara synchronization protocol
                Michael J Primeaux <michael dot primeaux at renkara.com>
                Protocol description: Proprietary
                Defined TXT keys: None

resacommunity   Community Service
                Mr Stephane MONS <stephane.mons at free.fr>
                Protocol description: Proprietary
                Defined TXT keys: None

resol-vbus      RESOL VBus
                Daniel Wippermann <Daniel.Wippermann at resol.de>
                Protocol description: Proprietary
                Defined TXT keys: None

retrospect      Retrospect backup and restore service
                Michael Marks <marks_michael at emc.com>
                Protocol description: Proprietary
                Defined TXT keys: None

rfb             Remote Frame Buffer (used by [89]VNC)
                Andrew van der Stock <ajv at greebo.net>
                Defined TXT keys: None

rfbc            Remote Frame Buffer Client (Used by VNC viewers in listen-mode)
                Ole-Morten Duesund <ole-morten.duesund at bbvisuals.no>
                Defined TXT keys: server=dns-name/ip-address:port of currently displayed VNC server.
                  Empty if not showing anything/available.

rfid            RFID Reader Mach1(tm) Protocol
                Paul Dietrich <registrar at impinj.com>
                Protocol description: Proprietary
                Defined TXT keys: None

riousbprint     Remote I/O USB Printer Protocol
                Rob Newberry <rnewberry at apple.com>
                Defined TXT keys: See [90]BonjourPrinting.pdf.

roku-rcp        Roku Control Protocol
                Don Woodward <dwoodward at rokulabs.com>
                Defined TXT keys: txtvers=1

rql             RemoteQuickLaunch
                Daniel Heffernan <me at daniel.ie>
                Protocol description: Proprietary
                Defined TXT keys: None

rsmp-server     Remote System Management Protocol (Server Instance)
                Geoff Back <geoff at demonlair.co.uk>
                Protocol description: Proprietary
                Defined TXT keys: apiver=<major.minor>

rsync           Rsync
                Andrew Tridgell <tridge at samba.anu.edu.au>
                Protocol description: [91]http://samba.anu.edu.au/rsync
                Defined TXT keys: None

rtsp            Real Time Streaming Protocol
                Rob Lanphier <robla at prognet.com>
                Protocol description: [92]RFC 2326
                Defined TXT keys: None

rubygems        RubyGems GemServer
                Rich Kilmer <rich at infoether.com>
                Protocol description: [93]GemServer
                Defined TXT keys: None

safarimenu      Safari Menu
                Jesus De Meyer <jesus at edot-studios.com>
                Defined TXT keys: None

sallingbridge   Salling Clicker Sharing
                Jonas Salling <jonas at salling.com>
                Protocol description: Proprietary
                Defined TXT keys: None

sallingclicker  Salling Clicker Service
                Jonas Salling <jonas at salling.com>
                Protocol description: Proprietary
                Defined TXT keys: None

salutafugijms   Salutafugi Peer-To-Peer Java Message Service Implementation
                David Walend <david at walend.net> or <dev at salutafugijms.dev.java.net>
                Protocol description: [94]salutafugijms.dev.java.net
                Defined TXT keys: [95]SalutaProperties

sandvox         Sandvox
                Karelia Software
                Protocol description: Proprietary
                Defined TXT keys: None

sc-golf         StrawberryCat Golf Protocol
                Phil Willoughby <phil.willoughby at strawberrycat.com>
                Protocol description: Proprietary
                Defined TXT keys: None

scanner         Bonjour Scanning
                Baskaran Subramaniam <baskaran at apple.com>
                Defined TXT keys: None

schick          Schick
                Heiko Kretschmer <info at wurst-wasser.net>
                Defined TXT keys: None

scone           Scone
                James Moore <jam at wirerimmed.com>
                Defined TXT keys: None

scpi-raw        IEEE 488.2 (SCPI) Socket
                Nick Barendt <nbarendt at vxitech.com>
                Protocol description: Interpreter that accepts IEEE 488.2 commands;
                "scpi-raw" has an IANA reserved port of 5025
                Defined TXT keys: None

scpi-telnet     IEEE 488.2 (SCPI) Telnet
                Nick Barendt <nbarendt at vxitech.com>
                Protocol description: Telnet server that accepts IEEE 488.2 commands;
                "scpi-telnet" has an IANA reserved port of 5024
                Defined TXT keys: None

sdsharing       Speed Download
                Yazsoft <info at yazsoft.com>
                Defined TXT keys: None

see             SubEthaEdit 2
                TheCodingMonkeys <monkeys at codingmonkeys.de>
                Defined TXT keys: txtvers=1, name=<Full Name>, userid=<User ID>, version=2

seeCard         seeCard
                Stefan Pantke <sales at turingart.com>
                Defined TXT keys: None

senteo-http     Senteo Assessment Software Protocol
                Michael Boyle <michaelboyle at smarttech.com>
                Protocol description: Proprietary
                Defined TXT keys: None

sentillion-vlc  Sentillion Vault System
                George Hartz <george.hartz at sentillion.com>
                Protocol description: Proprietary
                Defined TXT keys: None

sentillion-vlt  Sentillion Vault Systems Cluster
                George Hartz <george.hartz at sentillion.com>
                Protocol description: Proprietary
                Defined TXT keys: None

sepvsync        SEPV Application Data Synchronization Protocol
                Kazuya Ogata <info at sepv.jp>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

serendipd       serendiPd Shared Patches for Pure Data
                Hans-Christoph Steiner <hans at eds.org>
                Protocol description: [96]http://at.or.at/serendipd/
                Defined TXT keys: None

servereye       ServerEye AgentContainer Communication Protocol
                Andreas Behr <andreas.behr at kraemer-it.de>
                Protocol description: Proprietary
                Defined TXT keys: None

servermgr       Mac OS X Server Admin
                Jeff Albouze <foup at apple.com>
                Defined TXT keys: None

services        DNS Service Discovery
                Stuart Cheshire <cheshire at apple.com>, Marc Krochmal <marc at apple.com>
                Not a service type. Special name reserved for DNS-SD meta queries.

sessionfs       Session File Sharing
                Anthony Williams <tonydubs at gmail.com>
                Protocol description: This project is for the purposes of research only.  It is the
original work
                of Anthony Williams and Geet Duggal, copyrighted as of 2005.  Website soon to be con
structed.
                Defined TXT keys: Text keys are the file extensions of any file the user plans to sh
are, i.e. pdf, doc, mp3.

sflow           sFlow traffic monitoring
                Peter Phaal <peter.phaal at inmon.com>
                Protocol description: [97]www.sflow.org
                Defined TXT keys: [98]www.sflow.org

sftp-ssh        Secure File Transfer Protocol over SSH
                Bryan Cole <bryan.cole at teraview.com>
                Protocol description: [99]draft-ietf-secsh-filexfer-13.txt
                Defined TXT keys: u=<username> p=<password> path=<path>

shell           like exec, but automatic authentication is performed as for login server.
                Defined TXT keys: None

shifter         Window Shifter server protocol
                Antoine Martin <antoine at nagafix.co.uk>
                Protocol description: [100]http://shifter.devloop.org.uk/protocol.html
                Defined TXT keys:
                  username     The login username to use (optional)
                  ssh_tunnel   Whether an SSH tunnel must be used (required)
                  iface        The network interface the server is on (required - may be empty)
                  version      Software version (required)
                  ID           Server Identifier (requried)

shipsgm         Swift Office Ships
                Verek <info at verek.com>
                Defined TXT keys: None

shipsinvit      Swift Office Ships
                Verek <info at verek.com>
                Defined TXT keys: None

shoppersync     SplashShopper Synchronization Service
                Justin Cepelak <jcepelak at splashdata.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

shoutcast       Nicecast
                Rogue Amoeba <nicecast at rogueamoeba.com>
                Defined TXT keys: None

simmon          Medical simulation patient monitor syncronisation protocol
                Niels Castle <castle at castleandersen.dk>
                Protocol description: Proprietary
                Defined TXT keys: None

simusoftpong    simusoftpong iPhone game protocol
                Anders Svensson <pong at simusoft.dk>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

sip             Session Initiation Protocol, signalling protocol for VoIP
                Benjamin Kowarsch <benjamin at sunrise-tel.com> November 2004
                Protocol Description: [101]http://www.ietf.org/rfc/rfc3261.txt (work in progress)
                Primary Transport Protocol: UDP
                Defined TXT keys:
                  sipver        SIP version
                  sipstd        RFC number of SIP standard to comply with
                  auth          plaintext | md5 | rsakeys
                  userid        alphanumeric, additionally '_', '+', '-'
                  secret        any printable ASCII characters
                  realm         SIP realm (see RFC3261)
                  fromuser      username for SIP "from" header (see RFC3261)
                  fromdomain    domain for SIP "from" header (see RFC3261)
                  registrar     SIP registrar (see RFC3261)
                  proxy         SIP proxy (see RFC3261)
                  natproxy      SIP proxy for NATed clients
                  outproxy      outbound SIP proxy (see RFC3261)
                  stunserver    STUN server DNS name or IP address
                  contact       SIP URI (see RFC3261)
                  dtmfmode      inband | rfc2833 | sipinfo
                  welcome       SIP URI (see RFC3261)
                  voicemail     SIP URI (see RFC3261)
                  reception     SIP URI (see RFC3261)
                  echotest      SIP URI (see RFC3261)
                  ivrtest       SIP URI (see RFC3261)
                Further TXT record keys may be added in the future.

sipuri          Session Initiation Protocol Uniform Resource Identifier
                Jae Woo Lee <jae at cs.columbia.edu>
                Protocol Description: [102]draft-lee-sip-dns-sd-uri-00
                Defined TXT keys: Defined in URL specification

sironaxray      Sirona Xray Protocol
                Michael Dalpiaz <Michael.Dalpiaz at sirona.com>
                Protocol description: Proprietary
                Defined TXT keys: Manufacturer=Sirona

skype           Skype
                Protocol description: [103]http://skype.com/products/explained.html
                Defined TXT keys: platform, status, auth, rversion, version

sleep-proxy     Sleep Proxy Server
                Stuart Cheshire <cheshire at apple.com>, Marc Krochmal <marc at apple.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

slimcli         SliMP3 Server Command-Line Interface
                Dean Blackketter <dean at slimdevices.com>
                Defined TXT keys: None

slimhttp        SliMP3 Server Web Interface
                Dean Blackketter <dean at slimdevices.com>
                Defined TXT keys: None

smartenergy     Smart Energy Profile
                Robby Simpson, PhD <rsimpson at gmail.com>
                Protocol description: [104]http://www.zigbee.org/SmartEnergy
                Defined TXT keys: See [105]http://www.zigbee.org/SmartEnergy

smb             Server Message Block over TCP/IP
                Defined TXT keys: u=<username> p=<password> path=<path>

sms             Short Text Message Sending and Delivery Status Service
                Christian Flintrup <chr at gigahost.dk>
                Protocol description: [106]http://tel.gigahost.dk/docs
                Defined TXT keys: Proprietary

soap            Simple Object Access Protocol
                Andrew Donoho <awd at us.ibm.com>
                Defined TXT keys: None
                Subtypes: The specific SOAP-based protocol being offered.
                Note: Browsing for _soap._tcp as a generic service is useful only in development too
ls.
                For any given application, it should browse for the specific semantic service (subty
pe
                of _soap._tcp) it requires. Browsing for _soap._tcp would simply find all services
                that happened to be built on top of SOAP technology, without regard for whether the
                service they provide is at all relevant to what this application wants to do.

socketcloud     Socketcloud distributed application framework
                Robert Goodyear <robg at brand-up.com>
                Protocol description: Proprietary
                Defined TXT keys: system, service, process, context, direction, status, progress, he
alth, directive, flags

sox             Simple Object eXchange
                Igor Mozolevsky <igor at itaufait.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

sparechange     SpareChange data sharing protocol
                Dave Carrigan <dave at openshut.net>
                Protocol description: Proprietary
                Defined TXT keys: None

spearcat        sPearCat Host Discovery
                Pierre Frisch <pierre.frisch at spearway.com>
                Protocol description: Proprietary
                Defined TXT keys: applicationname=<Application Name>, osname=<OS Name>, sslsupport=<
Uses SSL>

spike           Shared Clipboard Protocol
                Scott Herscher <scott at porchdogsoft.com>
                Defined TXT keys: None

spincrisis      Spin Crisis
                Sphera Software <contact at sphera-soft.com>
                Defined TXT keys: None

spl-itunes      launchTunes
                David Nanian <dnanian at shirt-pocket.com>
                Defined TXT keys: None

spr-itunes      netTunes
                David Nanian <dnanian at shirt-pocket.com>
                Defined TXT keys: None

splashsync      SplashData Synchronization Service
                Justin Cepelak <jcepelak at splashdata.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

ssh             SSH Remote Login Protocol
                Tatu Ylonen <ylo at cs.hut.fi>
                Defined TXT keys: u=<username> p=<password>

ssscreenshare   Screen Sharing
                Defined TXT keys: None

strateges       Strateges
                Jean-Olivier Lanctot-D. <jolivierld at clichesw.com>
                Defined TXT keys: None

sge-exec        Sun Grid Engine (Execution Host)
                Bill Van Etten <Bill at BioTeam.net>
                Defined TXT keys: None

sge-qmaster     Sun Grid Engine (Master)
                Bill Van Etten <Bill at BioTeam.net>
                Defined TXT keys: None
                Note: Sun Grid Engine "Submit Hosts" browse for _sge-qmaster._tcp service
                to find a queue master to which they should submit jobs.
                Sun Grid Engine "Queue Masters" browse for _sge-exec._tcp service
                to find all the execution hosts that are advertising their availability
                and willingness to do that work. For more information see [107]http://bioteam.net/

souschef        SousChef Recipe Sharing Protocol
                Ben <ben at acaciatreesoftware.com>
                Protocol description: Proprietary
                Defined TXT keys: None

sparql          SPARQL Protocol and RDF Query Language
                Alex Tucker <alex at floop.org.uk>
                Protocol description: [108]http://www.w3.org/TR/rdf-sparql-protocol/
                Defined TXT keys:
                  txtvers=1
                  path=<relative or absolute URL of endpoint>
                  protovers=<number> [if not specified then default is 1.0, corresponding to [109]SP
ARQL version]
                  binding=<HTTP | SOAP> [if not specified then default is HTTP]
                  vocabs=<space separated list of URIs> [RDF vocabularies or OWL ontologies used by
the endpoint]
                  metadata=<URL> [to fetch RDF/XML description of SPARQL service]

stanza          Lexcycle Stanza service for discovering shared books
                Marc Prud'hommeaux <support at lexcycle.com>
                Protocol description: SOAP over HTTP
                Defined TXT keys: None

stickynotes     Sticky Notes
                Johnnie Walker <mrwalker at randomsequence.com>
                Defined TXT keys: None

submission      Message Submission
                Jeroen Massar <jeroen at unfix.org>
                Protocol description: [110]RFC 2476
                Defined TXT keys: None

supple          Supple Service protocol
                Dave Christianson <dbc1 at cs.washington.edu>
                Defined TXT keys: type url

surveillus      Surveillus Networks Discovery Protocol
                Mark Lewis <mark at surveillus.com>
                Protocol description: Proprietary
                Defined TXT keys: None

svn             Subversion
                CollabNet [111]www.collab.net
                Defined TXT keys: None

swcards         Signwave Card Sharing Protocol
                Signwave Networking Development Team <mail at signwave.co.uk>
                Protocol description: Proprietary
                Defined TXT keys: None

switcher        Wireless home control remote control protocol
                Steve Splonskowski <splons at splons.com>
                Protocol description: Proprietary
                Defined TXT keys: None

swordfish       Swordfish Protocol for Input/Output
                Jim Wallace <jim at cs.dal.ca>
                Protocol description: [112]www.cs.dal.ca/~jim/Swordfish
                Defined TXT keys: None

sxqdea          Synchronize! Pro X
                Qdea <support at qdea.com>
                Defined TXT keys: None

sybase-tds      Sybase Server
                Defined TXT keys: None

syncopation     Syncopation Synchronization Protocol by Sonzea
                Sonzea, LLC <support at sonzea.com>
                Protocol description: Proprietary
                Defined TXT keys: None

syncqdea        Synchronize! X Plus 2.0
                Qdea <support at qdea.com>
                Defined TXT keys: None

synergy         Synergy Peer Discovery
                Karl Timmermann <timmerk at gmail.com>
                Protocol description: Proprietary
                Defined TXT keys: None

synksharing     SynkSharing synchronization protocol
                Benjamin Rister <support at decimus.net>
                Protocol description: Proprietary
                Defined TXT keys: None

taccounting     Data Transmission and Synchronization
                John MacMullin <john.macmullin at cox.net>
                Protocol description: Proprietary
                Defined TXT keys: None

tango           Tango Remote Control Protocol
                Tony Amundson <tony at blueatlasbroker.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tapinoma-ecs    Tapinoma Easycontact receiver
                Bonjour <bonjour at tapinoma.com>
                Protocol description: Proprietary
                Defined TXT keys: None

taskcoachsync   Task Coach Two-way Synchronization Protocol for iPhone
                Jerome Laheurte <fraca7 at users.sourceforge.net>
                Protocol description: [113]http://sourceforge.net/projects/taskcoach/

                Defined TXT keys: None

tbricks         tbricks internal protocol
                Joakim Johansson <joakim.johansson at tbricks.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers=1, sesna, seid, setype, cosna, coid,
                    cotype, sysna, syna, syid, subsyid, venid, protocols, pid

tcode           Time Code
                Marshall Anschutz <dnssd.tcode at icehousepro.us>
                Protocol description: Proprietary
                Defined TXT keys: None

tcu             Tracking Control Unit by RPM-PSI
                James Nikolai <jamesnikolai at rpm-psi.com>
                Protocol description: Proprietary
                Defined TXT keys: None

te-faxserver    TE-SYSTEMS GmbH Fax Server Daemon
                Tobias Erichsen <erichsen at te-systems.de>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

teamlist        ARTIS Team Task
                ARTIS Software <contact at artissoftware.com>
                Defined TXT keys: None

teleport        teleport
                Julien Robert <jul at abyssoft.com>
                Primary Transport Protocol: UDP
                Defined TXT keys: None

telnet          Telnet
                Service name originally allocated for Jon Postel <postel at isi.edu>
                Now advertised and browsed-for by numerous independent
                server and client implementations.
                Protocol description: [114]RFC 854
                Defined TXT keys: u=<username> p=<password>

tera-fsmgr      Terascala Filesystem Manager Protocol
                Mike Nuss <mike at terascala.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

tera-mp         Terascala Maintenance Protocol
                Mike Nuss <mike at terascala.com>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

tf-redeye       ThinkFlood RedEye IR bridge
                Matt Eagar <matt.eagar at thinkflood.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tftp            Trivial File Transfer
                David Clark <ddc at LCS.MIT.EDU>
                Protocol description: [115]RFC 783
                Primary Transport Protocol: UDP
                Defined TXT keys: None

thumbwrestling  tinkerbuilt Thumb Wrestling game
                Jamie Halmick <jamie at tinkerbuilt.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ticonnectmgr    TI Connect Manager Discovery Service
                Stephen Reid <sreid at ti.com>
                Defined TXT keys: None

timbuktu        Timbuktu
                Neal Trautman <neal at netopia.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tinavigator     TI Navigator Hub 1.0 Discovery Service
                Stephen Reid <sreid at ti.com>
                Defined TXT keys: None

tivo-hme        TiVo Home Media Engine Protocol
                Developer Support <devsupport at tivo.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tivo-music      TiVo Music Protocol
                Developer Support <devsupport at tivo.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tivo-photos     TiVo Photos Protocol
                Developer Support <devsupport at tivo.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tivo-remote     TiVo Remote Protocol
                Developer Support <devsupport at tivo.com>
                Protocol description: Proprietary
                Defined TXT keys: protocol, path, swversion, platform, TSN

tivo-videos     TiVo Videos Protocol
                Developer Support <devsupport at tivo.com>
                Protocol description: Proprietary
                Defined TXT keys: protocol, path, swversion, platform, TSN

todogwa         2Do Sync Helper Tool for Mac OS X and PCs
                Fahad Gilani <fahad at guidedways.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tomboy          Tomboy
                Alex Graveley <alex at beatniksoftware.com>
                Protocol description: [116]http://www.beatniksoftware.com/tomboy
                Defined TXT keys: None

toothpicserver  ToothPics Dental Office Support Server
                Milton Pulis <toothpic at fastq.com>
                Protocol description: Proprietary
                Defined TXT keys: None

touch-able      iPhone and iPod touch Remote Controllable
                Amandeep Jawa <daap at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, CtlN, DbId, Ver, DvTy, OSsi, DvSv

touch-remote    iPhone and iPod touch Remote Pairing
                Amandeep Jawa <daap at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, DvNm, Pair, RemV, RemN, DvTy

tri-vis-client  triCerat Simplify Visibility Client
                Christopher Karper <ckarper at dev.tricerat.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tri-vis-server  triCerat Simplify Visibility Server
                Christopher Karper <ckarper at dev.tricerat.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tryst           Tryst
                Francisco Ryan Tolmasky <ftolmasky at adelphia.net>
                Defined TXT keys: None

tt4inarow       Trivial Technology's 4 in a Row
                Nicolas Payette <payetten at trivialtechnology.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ttcheckers      Trivial Technology's Checkers
                Nicolas Payette <payetten at trivialtechnology.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ttp4daemon      TechTool Pro 4 Anti-Piracy Service
                Micromat <support at micromat.com>
                Protocol description: Proprietary
                Defined TXT keys: None

tunage          Tunage Media Control Service
                Matt Patenaude <MattPat at mattpat.net>
                Protocol description: [117]http://tunage.tuneconnect.net
                Defined TXT keys: None

tuneranger      TuneRanger
                Acertant Technologies, Inc.
                Protocol description: Proprietary
                Defined TXT keys: None

ubertragen      Ubertragen
                Widgetschmie.de
                Defined TXT keys: None

uddi            Universal Description, Discovery and Integration
                Paul Denning <pauld at mitre.org>
                Protocol description: [118]http://uddi.org/pubs/uddi-v3.0.2-20041019.htm
                Defined TXT keys: TBD

uddi-inq        Universal Description, Discovery and Integration Inquiry
                Paul Denning <pauld at mitre.org>
                Protocol description: [119]http://uddi.org/pubs/uddi-v3.0.2-20041019.htm
                Defined TXT keys: TBD

uddi-pub        Universal Description, Discovery and Integration Publishing
                Paul Denning <pauld at mitre.org>
                Protocol description: [120]http://uddi.org/pubs/uddi-v3.0.2-20041019.htm
                Defined TXT keys: TBD

uddi-sub        Universal Description, Discovery and Integration Subscription
                Paul Denning <pauld at mitre.org>
                Protocol description: [121]http://uddi.org/pubs/uddi-v3.0.2-20041019.htm
                Defined TXT keys: TBD

uddi-sec        Universal Description, Discovery and Integration Security
                Paul Denning <pauld at mitre.org>
                Protocol description: [122]http://uddi.org/pubs/uddi-v3.0.2-20041019.htm
                Defined TXT keys: TBD

upnp            Universal Plug and Play
                Andrew Donoho <awd at us.ibm.com>
                Defined TXT keys: None
                Subtypes: The specific UPnP Forum protocol being offered.
                Note: Browsing for _upnp._tcp as a generic service is useful only in development too
ls.
                For any given application, it should browse for the specific semantic service (subty
pe
                of _upnp._tcp) it requires. Browsing for _upnp._tcp would simply find all services t
hat
                happen to use an application protocol designed by the UPnP Forum, without regard for
                whether the service they provide is at all relevant to what this application wants t
o do.

urlbookmark     URL Advertising
                Sven-S. Porst <ssp-web at earthlingsoft.net>
                Protocol description: There is no protocol. Just the advertising via Bonjour is used
.
                Defined TXT keys: URL=<URL that is advertised>, name=<Name of the bookmark>

uswi            Universal Switching Corporation products
                Roger Lemberg <rlemberg at uswi.com>
                Protocol description: [123]www.uswi.com
                Defined TXT keys: None

utest           uTest
                Gregory Power <gpower at apple.com>
                Defined TXT keys: None

uwsgi           Unbit Web Server Gateway Interface
                Roberto De Ioris <info at unbit.it>
                Protocol description: [124]http://projects.unbit.it/uwsgi/wiki/uwsgiProtocol
                Defined TXT keys: None

ve-decoder      American Dynamics VideoEdge Decoder Control Service
                Gary Sands <gsands at tycoint.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, macaddress, protovers, model, serial, path, idp

ve-encoder      American Dynamics VideoEdge Encoder Control Service
                Gary Sands <gsands at tycoint.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, macaddress, protovers, model, serial, path, idp

ve-recorder     American Dynamics VideoEdge Recorder Control Service
                Gary Sands <gsands at tycoint.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, macaddress, protovers, model, serial, path, idp

visel           visel Q-System services
                Lehpaner Sasa <lsasa at visel.it>
                Protocol description: Proprietary
                Defined TXT keys:
                  Version=<service version>
                  Type=<service type>
                  Name=<service Name>
                  Zone=<service zone>
                  ID=<serviceID>
                  SString=<serviceString>
                  SString1=<serviceString>

volley          Volley
                David Catmull <uncommon at uncommonplace.com>
                Protocol description: [125]http://www.uncommonplace.com/volley/wiki/tiki-index.php?p
age=Network+Protocol
                Defined TXT keys: None

vos             Virtual Object System (using VOP/TCP)
                Reed Hedges <reed at interreality.org>, Peter Amstutz <tetron at interreality.org>
                Protocol description: "Creating Interreality" available at [126]http://interreality.
org
                Defined TXT keys:
                  url=<Object URL with full path>
                  type=<Comma-seperated list of object types>
                  title=<Short title of service>
                  descr=<Short description of service>

vue4rendercow   VueProRenderCow
                Defined TXT keys: None

vxi-11          VXI-11 TCP/IP Instrument Protocol
                Nick Barendt <nbarendt at vxitech.com>
                Protocol description: VXI-11 as defined by the [127]VXI Bus Consortium
                Defined TXT keys: None

walkietalkie    Walkie Talkie
                Johan Kool <johan at koolistov.net>
                Protocol description: Proprietary
                Defined TXT keys: None

we-jell         Proprietary collaborative messaging protocol
                Vaughn Amann <vamann at aol.com>
                Protocol description: Proprietary
                Defined TXT keys:
                  user=<user name>
                  stat=<OK, DND, AWY, FWD:uname>
                  agent=<agent type>

webdav          World Wide Web Distributed Authoring and Versioning (WebDAV)
                Y. Y. Goland <yarong at microsoft.com>
                Protocol description: [128]RFC 2518
                Defined TXT keys: u=<username> p=<password> path=<path>

webdavs         WebDAV over SSL/TLS
                Y. Y. Goland <yarong at microsoft.com>
                Protocol description: [129]RFC 2518
                Defined TXT keys: u=<username> p=<password> path=<path>

webissync       WebIS Sync Protocol
                Alex Kac <webis_sync_protocol at webis.net>
                Protocol description: Proprietary
                Defined TXT keys: None

wedraw          weDraw document sharing protocol
                Oleksandr Zakharchuk <zakharchuk at dialogtech.com>
                Protocol description: Proprietary
                Defined TXT keys: None

whamb           Whamb
                Whamb <support at whamb.com>
                Defined TXT keys: None

whistler        Honeywell Video Systems
                Shankar Prasad <shankar.prasad at honeywell.com>
                Protocol description: Proprietary
                Defined TXT keys: None

wired           Wired Server
                Zanka Software <axel at zankasoftware.com>
                Defined TXT keys: None

witap           WiTap Sample Game Protocol
                Rory McGuire <rlpm at apple.com>
                Protocol description: [130]http://developer.apple.com/iphone/library/samplecode/WiTa
p/
                Defined TXT keys: None

witapvoice      witapvoice
                Roberto Garcia <garcia at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: None

wkgrpsvr        Workgroup Server Discovery
                Forest Hill <forest at apple.com>
                Protocol description: Proprietary
                Defined TXT keys: None

workstation     Workgroup Manager
                Kevin Arnold <imlucid at apple.com>
                Defined TXT keys: None

wormhole        Roku Cascade Wormhole Protocol
                Don Woodward <dwoodward at rokulabs.com>
                Defined TXT keys: txtvers=1

workgroup       Novell collaboration workgroup
                Brady Anderson <banderso at novell.com>
                Defined TXT keys: version=? description=?

writietalkie    Writie Talkie Data Sharing
                Yin Ki Lau <xdt_software at oodot.com>
                Protocol description: Proprietary
                Defined TXT keys: None

ws              Web Services
                Andrew Donoho <awd at us.ibm.com>
                Defined TXT keys: None
                Subtypes: The specific Web Services-based protocol being offered.
                Note: Browsing for _ws._tcp as a generic service is useful only in development tools
.
                For any given application, it should browse for the specific semantic service (subty
pe
                of _ws._tcp) it requires. Browsing for _ws._tcp would simply find all services that
                happened to be built on top of Web Services technology, without regard for whether
                the service they provide is at all relevant to what this application wants to do.

wtc-heleos      Wyatt Technology Corporation HELEOS
                Brent Fulgham <bfulgham at wyatt.com>
                Protocol description: Proprietary
                Defined TXT keys: None

wtc-qels        Wyatt Technology Corporation QELS
                Brent Fulgham <bfulgham at wyatt.com>
                Protocol description: Proprietary
                Defined TXT keys: None

wtc-rex         Wyatt Technology Corporation Optilab rEX
                Roy Reapor <rreapor at wyatt.com>
                Protocol description: Proprietary
                Defined TXT keys: None

wtc-viscostar   Wyatt Technology Corporation ViscoStar
                Roy Reapor <rreapor at wyatt.com>
                Protocol description: Proprietary
                Defined TXT keys: None

wtc-wpr         Wyatt Technology Corporation DynaPro Plate Reader
                Brent Fulgham <bfulgham at wyatt.com>
                Protocol description: Proprietary
                Defined TXT keys: None

wwdcpic         PictureSharing sample code
                Marc Krochmal <marc at apple.com>
                Protocol description: [131]http://developer.apple.com/samplecode/PictureSharing/inde
x.html
                Defined TXT keys: None

x-on            x-on services synchronisation protocol
                Matthias Burghardt <m.burghardt at x-on.de>
                Protocol description: Proprietary
                Defined TXT keys: Proprietary

x-plane9        x-plane9
                austin meyer <austin at x-plane.com>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None

xcodedistcc     Xcode Distributed Compiler
                Scott Tooker <tooker at apple.com>
                Defined TXT keys: None

xgate-rmi       xGate Remote Management Interface
                Tim Jobling <tim at cambridgeimaging.co.uk>
                Protocol description: Proprietary
                Defined TXT keys:
                  tech=value (string)
                  model=value (string)
                  version=value (string)

xgrid           Xgrid
                David Kramer <dkramer at apple.com>
                Defined TXT keys: None

xmms2           XMMS2 IPC Protocol
                Tobias Rundstrom <tru at xmms.org>
                Protocol description: [132]http://wiki.xmms2.xmms.se/index.php/XMMS2_IPC_Protocol
                Defined TXT keys: None

xmp             Xperientia Mobile Protocol
                Henric Bergh <henric.bergh at xperientia.com>
                Protocol description: Proprietary
                Defined TXT keys: txtvers, user, system, nodeid, desc

xmpp-client     XMPP Client Connection
                Peter Saint-Andre <stpeter at jabber.org>
                Protocol description: [133]RFC 3920
                Discovery Protocol: RFC 2782

xmpp-server     XMPP Server Connection
                Peter Saint-Andre <stpeter at jabber.org>
                Protocol description: [134]RFC 3920
                Discovery Protocol: RFC 2782

xsanclient      Xsan Client
                Jeff Albouze <foup at apple.com>
                Defined TXT keys: None

xsanserver      Xsan Server
                Jeff Albouze <foup at apple.com>
                Defined TXT keys: None

xsansystem      Xsan System
                Jeff Albouze <foup at apple.com>
                Defined TXT keys: None

xserveraid      XServe Raid
                Bob Bradley <bradley at apple.com>
                Defined TXT keys: Contact Apple at <bonjourdev at apple.com>

xsync           Xserve RAID Synchronization
                Bob Bradley <bradley at apple.com>
                Defined TXT keys: Contact Apple at <bonjourdev at apple.com>

xtimelicence    xTime License
                AppMac Software <appmac at appmac.com>
                Defined TXT keys: None

xtshapro        xTime Project
                AppMac Software <appmac at appmac.com>
                Defined TXT keys: None

xul-http        XUL (XML User Interface Language) transported over HTTP
                Eran Gampel <eran at aoe6.net>
                Protocol description: [135]XML User Interface Language (XUL) over HTTP.
                Defined TXT keys: u=<username> p=<password> path=<path to document> (Same as for _ht
tp._tcp)

yakumo          Yakumo iPhone OS Device Control Protocol
                Daniel Heffernan <me at daniel.ie>
                Protocol description: Proprietary
                Primary Transport Protocol: UDP
                Defined TXT keys: None
   