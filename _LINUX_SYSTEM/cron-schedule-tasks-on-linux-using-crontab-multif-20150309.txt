filename: cron_schedule-tasks-on-linux-using-crontab-multif_20150309.txt
http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/

                                    Schedule Tasks on Linux Using Crontab

   If you've got a website that's heavy on your web server, you might want to run some processes like
   generating thumbnails or enriching data in the background. This way it can not interfere with the
   user interface. [2]Linux has a great program for this called cron. It allows tasks to be
   automatically run in the background at regular intervals. You could also use it to automatically
   create backups, synchronize files, [3]schedule updates, and much more. Welcome to the wonderful world
   of [4]crontab.

Crontab

   The crontab (cron derives from chronos, Greek for time; tab stands for table) command, found in Unix
   and Unix-like operating systems, is used to schedule commands to be executed periodically. To see
   what crontabs are currently running on your system, you can open a terminal and run:

$ sudo crontab -l

   To edit the list of cronjobs you can run:

$ sudo crontab -e

   This wil open a the default editor (could be vi or pico, if you want you can [5]change the default
   editor) to let us manipulate the crontab. If you save and exit the editor, all your cronjobs are
   saved into crontab. Cronjobs are written in the following format:

* * * * * /bin/execute/this/script.sh

Scheduling explained

   As you can see there are 5 stars. The stars represent different date parts in the following order:
     * minute (from 0 to 59)
     * hour (from 0 to 23)
     * day of month (from 1 to 31)
     * month (from 1 to 12)
     * day of week (from 0 to 6) (0=Sunday)

  Execute every minute

   If you leave the star, or asterisk, it means every. Maybe that's a bit unclear. Let's use the the
   previous example again:

* * * * * /bin/execute/this/script.sh

   They are all still asterisks! So this means execute /bin/execute/this/script.sh:
     * every minute
     * of every hour
     * of every day of the month
     * of every month
     * and every day in the week.

   In short: This script is being executed every minute. Without exception.

  Execute every Friday 1AM

   So if we want to schedule the script to run at 1AM every Friday, we would need the following cronjob:

0 1 * * 5 /bin/execute/this/script.sh

   Get it? The script is now being executed when the system clock hits:
     * minute: 0
     * of hour: 1
     * of day of month: * (every day of month)
     * of month: * (every month)
     * and weekday: 5 (=Friday)

  Execute on workdays 1AM

   So if we want to schedule the script to Monday till Friday at 1 AM, we would need the following
   cronjob:

0 1 * * 1-5 /bin/execute/this/script.sh

   Get it? The script is now being executed when the system clock hits:
     * minute: 0
     * of hour: 1
     * of day of month: * (every day of month)
     * of month: * (every month)
     * and weekday: 1-5 (=Monday til Friday)

  Execute 10 past after every hour on the 1st of every month

   Here's another one, just for practicing

10 * 1 * * /bin/execute/this/script.sh

   Fair enough, it takes some getting used to, but it offers great flexibility.

Neat scheduling tricks

   What if you'd want to run something every 10 minutes? Well you could do this:

0,10,20,30,40,50 * * * * /bin/execute/this/script.sh

   But crontab allows you to do this as well:

*/10 * * * * /bin/execute/this/script.sh

   Which will do exactly the same. Can you do the the math? ; )

Special words

   For the first (minute) field, you can also put in a keyword instead of a number:

@reboot     Run once, at startup
@yearly     Run once  a year     "0 0 1 1 *"
@annually   (same as  @yearly)
@monthly    Run once  a month    "0 0 1 * *"
@weekly     Run once  a week     "0 0 * * 0"
@daily      Run once  a day      "0 0 * * *"
@midnight   (same as  @daily)
@hourly     Run once  an hour    "0 * * * *"

   Leaving the rest of the fields empty, this would be valid:

@daily /bin/execute/this/script.sh

Storing the crontab output

   By default cron saves the output of /bin/execute/this/script.sh in the user's mailbox (root in this
   case). But it's prettier if the output is saved in a separate logfile. Here's how:

*/10 * * * * /bin/execute/this/script.sh >> /var/log/script_output.log 2>&1

  Explained

   Linux can report on different levels. There's standard output (STDOUT) and standard errors (STDERR).
   STDOUT is marked 1, STDERR is marked 2. So the following statement tells Linux to store STDERR in
   STDOUT as well, creating one datastream for messages & errors:

2>&1

   Now that we have 1 output stream, we can pour it into a file. Where > will overwrite the file, >>
   will append to the file. In this case we'd like to to append:

>> /var/log/script_output.log

Mailing the crontab output

   By default cron saves the output in the user's mailbox (root in this case) on the local system. But
   you can also configure crontab to forward all output to a real email address by starting your crontab
   with the following line:

MAILTO="yourname@yourdomain.com"

  Mailing the crontab output of just one cronjob

   If you'd rather receive only one cronjob's output in your mail, make sure this package is installed:

$ aptitude install mailx

   And change the cronjob like this:

*/10 * * * * /bin/execute/this/script.sh 2>&1 | mail -s "Cronjob ouput" yourname@yourdomain.com

Trashing the crontab output

   Now that's easy:

*/10 * * * * /bin/execute/this/script.sh > /dev/null 2>&1

   Just pipe all the output to the null device, also known as the black hole. On Unix-like operating
   systems, /dev/null is a special file that discards all data written to it.

Caveats

   Many scripts are tested in a BASH environment with the PATH variable set. This way it's possible your
   scripts work in your shell, but when run from cron (where the PATH variable is different), the script
   cannot find referenced executables, and fails.

   It's not the job of the script to set PATH, it's the responsibility of the caller, so it can help to
   echo $PATH, and put PATH=<the result> at the top of your cron files (right below MAILTO).
   [6]Author's profile picture

    Kevin van Zonneveld

---
https://www.debian-administration.org/article/56/Command_scheduling_with_cron

Command scheduling with cron

   Posted by [12]Steve on Mon 13 Dec 2004 at 19:25
   Tags: [13]cron, [14]crontab, [15]scheduling

   Many pieces of system administration can be automated via perl scripts, or shell scripts which run at
   regular intervals. For example you might have a script to check that your disk isn't full which runs
   once an hour - informing you if there are problems. The most common mechanism for scheduling commands
   on Unix systems is via the cron package. This allows users to schedule arbitary commands to run at
   arbitary times with regular frequency.

   In Debian [16]the cron package is installed as part of the base system, and will be running by
   default.

   Cron, as supplied in Debian, has two purposes:
     * To run system jobs on a daily/weekly/monthly basis
     * To allow users to setup their own schedules

   The system schedules are setup when the package is installed, via the creation of some special
   directories:
/etc/cron.d
/etc/cron.daily
/etc/cron.hourly
/etc/cron.monthly
/etc/cron.weekly

   Except for the first one which is special, these directories allow scheduling of system-wide jobs in
   a coarse manner. Any script which is executable and placed inside them will run at the frequency
   which its name suggests.

   For example if you place a script inside /etc/cron.daily it will be executed once per day, every day.

   The time that the scripts run in those system-wide directories is not something that an
   administration typically changes, but the times can be adjusted by editing the file /etc/crontab. The
   format of this file will be explained shortly.

   The normal manner which people use cron is via the crontab command. This allows you to view or edit
   your crontab file, which is a per-user file containing entries describing commands to execute and the
   time(s) to execute them.

   To display your file you run the following command:
crontab -l

   root can view any users crontab file by adding "-u username", for example:
crontab -u skx -l  # List skx's crontab file.

   The format of these files is fairly simple to understand. Each line is a collection of six fields
   separated by spaces.

   The fields are:
    1. The number of minutes after the hour (0 to 59)
    2. The hour in military time (24 hour) format (0 to 23)
    3. The day of the month (1 to 31)
    4. The month (1 to 12)
    5. The day of the week(0 or 7 is Sun, or use name)
    6. The command to run

   More graphically they would look like this:
*     *     *     *     *  Command to be executed
-     -     -     -     -
|     |     |     |     |
|     |     |     |     +----- Day of week (0-7)
|     |     |     +------- Month (1 - 12)
|     |     +--------- Day of month (1 - 31)
|     +----------- Hour (0 - 23)
+------------- Min (0 - 59)

   (Each of the first five fields contains only numbers, however they can be left as '*' characters to
   signify any value is acceptible).

   Now that we've seen the structure we should try to ru na couple of examples.

   To edit your crontabe file run:
crontab -e

   This will launch your default editor upon your crontab file (creating it if necessary). When you save
   the file and quit your editor it will be installed into the system unless it is found to contain
   errors.

   If you wish to change the editor used to edit the file set the EDITOR environmental variable like
   this:
export EDITOR=/usr/bin/emacs
crontab -e

   Now enter the following:
0   *   *   *   * /bin/ls

   When you've saved the file and quit your editor you will see a message such as:
crontab: installing new crontab

   You can verify that the file contains what you expect with :
crontab -l

   Here we've told the cron system to execute the command "/bin/ls" every time the minute equals 0, ie.
   We're running the command on the hour, every hour.

   Any output of the command you run will be sent to you by email, if you wish to stop this then you
   should cause it to be redirected, as follows:
0   *   *   *   *  /bin/ls   >/dev/null 2&>1

   This causes all output to be redirected to /dev/null - meaning you won't see it.

   Now we'll finish with some more examples:
# Run the `something` command every hour on the hour
0   *   *   *   * /sbin/something

# Run the `nightly` command at ten minutes past midnight every day
10  0   *   *   * /bin/nightly

# Run the `monday` command every monday at 2 AM
0   2   *   *   1  /usr/local/bin/monday

   One last tip: If you want to run something very regularly you can use an alternate syntax: Instead of
   using only single numbers you can use ranges or sets.

   A range of numbers indicates that every item in that range will be matched, if you use the following
   line you'll run a command at 1AM, 2AM, 3AM, and 4AM:
# Use a range of hours matching 1, 2, 3 and 4AM
*   1-4   *   *   * /bin/some-hourly

   A set is similar, consisting of a collection of numbers seperated by commas, each item in the list
   will be matched. The previous example would look like this using sets:
# Use a set of hours matching 1, 2, 3 and 4AM
*   1,2,3,4   *   *   * /bin/some-hourly

