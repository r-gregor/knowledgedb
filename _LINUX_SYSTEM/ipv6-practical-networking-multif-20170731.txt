filename: ipv6_practical-networking-multif_20170731.txt
https://www.linux.com/learn/intro-to-linux/2017/7remote-sessions-over-ipv6-ssh-scp-and-rsync

Remote Sessions Over IPv6 with SSH, SCP, and Rsync

   Our familiar old file-copying friends SSH, SCP, and Rsync are all IPv6-ready, which is the good news.
   The bad news is they have syntax quirks which you must learn to make them work. Before we get into
   the details, though, you might want to review the previous installments in our meandering IPv6
   series:
     * [43]Practical Networking for Linux Admins: TCP/IP
     * [44]Practical Networking for Linux Admins: Real IPv6
     * [45]Practical Networking for Linux Admins: IPv4 and IPv6 LAN Addressing
     * [46]Practical Networking for Linux Admins: IPv6 Routing

SSH and SCP
   Like all good Linux admins, you know and use SSH and SCP. Both have some differences and quirks for
   IPv6 networks. These quirks are in the remote addresses, so once you figure those out, you can script
   SSH and SCP just like you're used to, and use [47]public key authentication.

   By default, the sshd daemon listens for both IPv4 and IPv6 protocols. You can see this with netstat:
$ sudo netstat -pant|grep sshd
tcp   0  0 0.0.0.0:22  0.0.0.0:*  LISTEN   1228/sshd
tcp6  0  0 :::22       :::*       LISTEN   1228/sshd

   You may disable either one with the AddressFamily setting in sshd_config. This example disable IPv6:
AddressFamily inet

   The default is any. inet6 means IPv6 only.

   On the client side, logging in over IPv6 networks is the same as IPv4, except you use IPv6 addresses.
   This example uses a global unicast address in the private LAN address range:
$ ssh carla@2001:db8::2

   Just like IPv4, you can log in, run a command, and exit all at once. This example runs a script to
   back up my files on the remote machine:
$ ssh carla@2001:db8::2 backup

   You can also streamline remote root logins. Wise admins disable root logins over SSH, so you have to
   log in as an unprivileged user and then change to a root login. This is not so laborious, but we can
   do it all with a single command:
$ ssh -t  carla@2001:db8::2 "sudo su - root -c 'shutdown -h 120'"
carla@2001:db8::2's password:
[sudo] password for carla:

Broadcast message from carla@remote-server
        (/dev/pts/2) at 9:54 ...

The system is going down for halt in 120 minutes!

   The shutdown example will stay open until it finished running, so you can change your mind and cancel
   the shutdown in the usual way, with Ctrl+c.

   Another useful SSH trick is to force IPv6 only, which is great for testing:
$ ssh -6 2001:db8::2

   You can also force IPv4 with with -4.

   You may access hosts on your link local network by using the link local address. This has an
   undocumented quirk that will drive you batty, except now you know what it is: you must append your
   network interface name to the remote address with a percent sign.
$ ssh carla@fe80::ea9a:8fff:fe67:190d%eth0

   scp is weird. You have to specify the network interface with the percent sign for link local
   addresses, enclose the address in square braces, and escape the braces:
$ scp filename \[fe80::ea9a:8fff:fe67:190d%eth0\]:
carla@fe80::ea9a:8fff:fe67:190d's password:
filename

   You don't need the interface name for global unicast addresses, but still need the escaped braces:
$ scp filename \[2001:db8::2\]:
carla@2001:db8::2's password:
filename

   This example logs into a different user account on the remote host, specifies the remote directory to
   copy the file into, and changes the filename:
scp filename userfoo@\[fe80::ea9a:8fff:fe67:190d%eth0\]:/home/userfoo/files/filename_2

Rsync
   rsync requires enclosing the remote IPv6 address in various punctuations. Global unicast addresses do
   not need the interface name:

$ rsync -av /home/carla/files/ 'carla@[2001:db8::2]':/home/carla/stuff
carla@f2001:db8::2's password:
sending incremental file list

sent 100 bytes  received 12 bytes  13.18 bytes/sec
total size is 6,704  speedup is 59.86

   Link local addresses must include the interface name:

$ rsync -av /home/carla/files/ 'carla@[fe80::ea9a:8fff:fe67:190d%eth0]':/home/carla/stuff

   As always, remember that the trailing slash on your source directory, for example /home/carla/files/,
   means that only the contents of the directory are copied. Omitting the trailing slash copies the
   directory and its contents. Trailing slashes do not matter on your target directory.


---
https://www.linux.com/learn/intro-to-linux/2017/6/practical-networking-linux-admins-tcpip
Practical Networking for Linux Admins: TCP/IP

   Linux grew up with a networking stack as part of its core, and networking is one of its strongest
   features. Let's take a practical look at some of the TCP/IP fundamentals we use every day.

It's IP Address
   I have a peeve. OK, more than one. But for this article just one, and that is using "IP" as a
   shortcut for "IP address". They are not the same. IP = Internet Protocol. You're not managing
   Internet Protocols, you're managing Internet Protocol addresses. If you're creating, managing, and
   deleting Internet Protocols, then you are an uber guru doing something entirely different.

Yes, OSI Model is Relevant
   TCP is short for Transmission Control Protocol. TCP/IP is shorthand for describing the Internet
   Protocol Suite, which contains multiple networking protocols. You're familiar with the Open Systems
   Interconnection (OSI) model, which categorizes networking into seven layers:
     * 7. Application layer
     * 6. Presentation layer
     * 5. Session layer
     * 4. Transport layer
     * 3. Network layer
     * 2. Data link layer
     * 1. Physical layer

   The application layer includes the network protocols you use every day: SSH, TLS/SSL, HTTP, IMAP,
   SMTP, DNS, DHCP, streaming media protocols, and tons more.

   TCP operates in the transport layer, along with its friend UDP, the User Datagram Protocol. TCP is
   more complex; it performs error-checking, and it tries very hard to deliver your packets. There is a
   lot of back-and-forth communication with TCP as it transmits and verifies transmission, and when
   packets get lost it resends them. UDP is simpler and has less overhead. It sends out datagrams once,
   and UDP neither knows nor cares if they reach their destination.

   TCP is for ensuring that data is transferred completely and in order. If a file transfers with even
   one byte missing it's no good. UDP is good for lightweight stateless transfers such NTP and DNS
   queries, and is efficient for streaming media. If your music or video has a blip or two it doesn't
   render the whole stream unusable.

   The physical layer refers to your networking hardware: Ethernet and wi-fi interfaces, cabling,
   switches, whatever gadgets it takes to move your bits and the electricity to operate them.

Ports and Sockets
   Linux admins and users have to know about ports and sockets. A network socket is the combination of
   an IP address and port number. Remember back in the early days of Ubuntu, when the default
   installation did not include a firewall? No ports were open in the default installation, so there
   were no entry points for an attacker. "Opening a port" means starting a service, such as an HTTP,
   IMAP, or SSH server. Then the service opens a listening port to wait for incoming connections.
   "Opening a port" isn't quite accurate because it's really referring to a socket. You can see these
   with the netstat command. This example displays only listening sockets and the names of their
   services:
$ sudo netstat -plnt
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address     Foreign Address State  PID/Program name
tcp        0      0 127.0.0.1:3306    0.0.0.0:*       LISTEN 1583/mysqld
tcp        0      0 127.0.0.1:5901    0.0.0.0:*       LISTEN 13951/qemu-system-x
tcp        0      0 192.168.122.1:53  0.0.0.0:*       LISTEN 2101/dnsmasq
tcp        0      0 192.168.122.1:80  0.0.0.0:*       LISTEN 2001/apache2
tcp        0      0 192.168.122.1:443 0.0.0.0:*       LISTEN 2013/apache2
tcp        0      0 0.0.0.0:22        0.0.0.0:*       LISTEN 1200/sshd
tcp6       0      0 :::80             :::*            LISTEN 2057/apache2
tcp6       0      0 :::22             :::*            LISTEN 1200/sshd
tcp6       0      0 :::443            :::*            LISTEN 2057/apache2

   This shows that MariaDB (whose executable is mysqld) is listening only on localhost at port 3306, so
   it does not accept outside connections. Dnsmasq is listening on 192.168.122.1 at port 53, so it is
   accepting external requests. SSH is wide open for connections on any network interface. As you can
   see, you have control over exactly what network interfaces, ports, and addresses your services accept
   connections on.

   Apache is listening on two IPv4 and two IPv6 ports, 80 and 443. Port 80 is the standard unencrypted
   HTTP port, and 443 is for encrypted TLS/SSL sessions. The foreign IPv6 address of :::* is the same as
   0.0.0.0:* for IPv4. Those are wildcards accepting all requests from all ports and IP addresses. If
   there are certain addresses or address ranges you do not want to accept connections from, you can
   block them with firewall rules.

   A network socket is a TCP/IP endpoint, and a TCP/IP connection needs two endpoints. A socket
   represents a single endpoint, and as our netstat example shows a single service can manage multiple
   endpoints at one time. A single IP address or network interface can manage multiple connections.

   The example also shows the difference between a service and a process. apache2 is the service name,
   and it is running four processes. sshd is one service with one process listening on two different
   sockets.

Unix Sockets
   Networking is so deeply embedded in Linux that its Unix domain sockets (also called inter-process
   communications, or IPC) behave like TCP/IP networking. Unix domain sockets are endpoints between
   processes in your Linux operating system, and they operate only inside the Linux kernel. You can see
   these with netstat:
$ netstat -lx
Active UNIX domain sockets (only servers)
Proto RefCnt Flags       Type       State         I-Node   Path
unix  2      [ ACC ]     STREAM     LISTENING     988      /var/run/dbus/system_bus_socket
unix  2      [ ACC ]     STREAM     LISTENING     29730    /run/user/1000/systemd/private
unix  2      [ ACC ]     SEQPACKET  LISTENING     357      /run/udev/control
unix  2      [ ACC ]     STREAM     LISTENING     27233    /run/user/1000/keyring/control

   It's rather fascinating how they operate. The SOCK_STREAM socket type behaves like TCP with reliable
   delivery, and SOCK_DGRAM is similar to UDP, unordered and unreliable, but fast and low-overhead.
   You've heard how everything in Unix is a file? Instead of networking protocols and IP addresses and
   ports, Unix domain sockets use special files, which you can see in the above example. They have
   inodes, metadata, and permissions just like the regular files we use every day.

   If you want to dig more deeply there are a lot of excellent books. Or, you might start with man tcp
   and man 2 socket. Next week, we'll look at network configurations, and whatever happened to IPv6?


---
https://www.linux.com/learn/intro-to-linux/2017/6/practical-networking-linux-admins-real-ipv6
Practical Networking for Linux Admins: Real IPv6

   When last we met, we reviewed essential TCP/IP basics for Linux admins in [43]Practical Networking
   for Linux Admins: TCP/IP. Here, we will review network and host addressing and find out whatever
   happened to IPv6?

IPv4 Ran Out Already
   Once upon a time, alarms were sounding everywhere: We are running out of IPv4 addresses! Run in
   circles, scream and shout! So, what happened? We ran out. [44]IPv4 Address Status at ARIN says
   "ARIN's free pool of IPv4 address space was depleted on 24 September 2015. As a result, we no longer
   can fulfill requests for IPv4 addresses unless you meet certain policy requirements..." Most of us
   get our IPv4 addresses from our Internet service providers (ISPs), so our ISPs are duking it out for
   new address blocks.

   What do we do about it? Start with bitter laughter, because service providers and device
   manufacturers are still not well-prepared, and IPv6 support is incomplete despite having more than a
   decade to implement it. This is not surprising, given how many businesses think computing is like
   office furniture: buy it once and use it forever (except, of course, for the executive team, who get
   all the shiny new doodads while us worker bees get stuck with leftovers). Google, who sees all and
   mines all, has some [45]interesting graphs on IPv6 adoption. Overall adoption is about 18 percent,
   with the United States at 34 percent and Belgium leading at 48 percent.

   What can we Linux nerds do about this? Linux, of course, has had IPv6 support for ages. The first
   stop is your ISP; visit [46]Test IPv6 to learn their level of IPv6 support. If they are IPv6-ready,
   they will assign you a block of addresses, and then you can spend many fun hours roaming the Internet
   in search of sites that can be reached over IPv6.

IPv6 Addressing
   IPv6 addresses are 128-bit, which means we have a pool of 2^128 addresses to use. That is
   340,282,366,920,938,463,463,374,607,431,768,211,456, or 340 undecillion, 282 decillion, 366
   nonillion, 920 octillion, 938 septillion, 463 sextillion, 463 quintillion, 374 quadrillion, 607
   trillion, 431 billion, 768 million, 211 thousand and 456 addresses. Which should be just about enough
   for the Internet of Insecure Intrusive Gratuitously Connected Things.

   In contrast, 32-bit IPv4 supplies 2^32 addresses, or just under 4.3 billion. Network address
   translation (NAT) is the only thing that has kept IPv4 alive this long. NAT is why most home and
   small businesses get by with one public IPv4 address serving large private LANs. NAT forwards and
   rewrites your LAN addresses so that lonely public address can serve multitudes of hosts in private
   address spaces. It's a clever hack, but it adds complexity to firewall rules and services, and in my
   not-quite-humble opinion that ingenuity would have been better invested in moving forward instead of
   clinging to inadequate legacies. Of course, that's a social problem rather than a technical problem,
   and social problems are the most challenging.

   IPv6 addresses are long at 8 hexadecimal octets. This is the loopback address, 127.0.0.1, in IPv6:
0000:0000:0000:0000:0000:0000:0000:0001

   Fortunately, there are shortcuts. Any quad of zeroes can be condensed into a single zero, like this:
0:0:0:0:0:0:0:1

   You can shorten this even further, as any unbroken sequence of consecutive zeros can be replaced with
   a pair of colons, so the loopback address becomes:
::1

   Which you can see on your faithful Linux system with ifconfig:
$ ifconfig lo
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host

   I know, we're supposed to use the ip command because ifconfig is deprecated. When ip formats its
   output as readably as ifconfig then I will consider it.

Be Quiet and Drink Your CIDR
   Classless Inter-Domain Routing (CIDR) defines how many addresses are in a network block. For the
   loopback address, ::1/128, that is a single address because it uses all 128 bits. CIDR notation is
   described as a prefix, which is confusing because it looks like a suffix. But it really is a prefix,
   because it tells you the bit length of a common prefix of bits, which defines a single block of
   addresses. Then you have a subnet, and finally the host portion of the address. 2001:0db8::/64
   expands to this:
2001:db8:0000:0000:0000:0000:0000:0000
_____________|____|___________________
network ID   subnet  interface address

   When your ISP gives you a block of addresses, they control the network ID and you control the rest.
   This example gives you 18,446,744,073,709,551,616 individual addresses and 65,536 subnets. Mediawiki
   has a great page with charts that explains all of this, and how allocations are managed, at [47]Range
   blocks/IPv6

   2000::/3 is the global unicast range, or public routable addresses. Do not use these for
   experimentation without blocking them from leaving your LAN. Better yet, don't use them and move on
   to the next paragraph.

   The 2001:0DB8::/32 block is reserved for documentation and examples, so use these for testing. This
   example assigns the first available address to interface enp0s25, which is what is what Ubuntu calls
   my eth0 interface:
# ip -6 addr add 2001:0db8::1/64 dev enp0s25
$ ifconfig enp0s25
enp0s25   Link encap:Ethernet  HWaddr d0:50:99:82:e7:2b
          inet6 addr: 2001:db8::1/64 Scope:Global

   Increment up from :1 in hexadecimal: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f, 10, 11, 12, 13,
   14, 15, 16, 17, 18, 19, 1a, 1b, and so on.

   You can add as many addresses as you like to a single interface. You can ping them from the host
   they're on, but not from other hosts on your LAN because you need a router. Next week, we'll set up
   routing.

IPcalc
   All of these fine hexadecimal addresses are converted from binary. Where does the binary come from?
   The breath of angels. Or maybe the tears of unicorns, I forget. At any rate, you're welcome to work
   these out the hard way, or install ipcalc on your Linux machine, or use any of the nice web-based IP
   calculators. Don't be too proud to use these because they're lifesavers, especially for routing, as
   we'll see next week.


---
https://www.linux.com/learn/intro-to-linux/2017/6/practical-networking-linux-admins-ipv6-and-ipv6-lan-addressing
Practical Networking for Linux Admins: IPv4 and IPv6 LAN Addressing

   We're cruising now. We know important basics about [43]TCP/IP and [44]IPv6. Today we're learning
   about private and link-local addressing. Yes, I know, I promised routing. That comes next.

Private Address Spaces
   IPv4 and IPv6 both have private address spaces. These are not meant to leave your private network,
   and you may use them without requesting assignments from an official authority, like your Internet
   service provider. Or, if you're a bigwig, a direct allocation from a [45]regional Internet registry.

IPv4 Private Addresses
   You're probably familiar with IPv4 private addressing, as we've all been using it since forever.
   There are four different private address spaces:
     * 10.0.0.0/8 (10.0.0.0 to 10.255.255.255), 16,777,216 addresses
     * 172.16.0.0/12 (172.16.0.0 to 172.31.255.255), 1,048,576 addresses
     * 192.168.0.0/16 (192.168.0.0 to 192.168.255.255), 65,536 addresses
     * 169.254.0.0/16 (169.254.0.0 to 169.254.255.255), 65,536 addresses

   Let's talk about the last one first, 169.254.0.0/16, because I find it annoying. I never warmed up to
   it because it just gets in my way. That is the link-local auto-configuration block, also called Avahi
   Zeroconf. Microsoft Windows and some Linux distributions use these, so even when you don't assign an
   IP address to a network interface, or it does not receive one via DHCP, it will get a 169.254.0.0/16
   address. What's the point? Supposedly easy ad hoc networking, and enabling communication with a host
   when other means of address assignment fail. Link-local addresses are accessible only within their
   own broadcast domains and are not routable. I've been disabling it since forever without missing it.
   If you find it useful, perhaps you could share a comment on how you use it.

   The other three address spaces are routable, even outside your LAN. That is why most firewall
   tutorials include rules to stop these from leaving your network. Most ISPs block them as well.

   The four hexadecimal octets in IPv4 addresses are conversions from binary. This is a fun topic for
   another day; you might investigate it because IPv4 addressing makes more sense in binary. For
   everyday use, this is what you need to know:

   Each octet is 8 bits, and the total is 32 bits.

   10.0.0.0/8 means the subnet mask is 8 bits, 255.0.0.0. You cannot change the first octet, 10, which
   is the network ID. The remaining three octets are the host ID, 24 bits, and you can change them
   however you like. Each octet has possible values ranging from 0-255. 10.0.0.0 and 10.255.255.255 are
   reserved and you cannot use them for host addresses, so your usable addresses are 10.0.0.1 to
   10.255.255.254.

   172.16.0.0/12 has a 12-bit subnet mask, 255.240.0.0, which does not divide up neatly into hexadecimal
   octets. 172.16.0.0 and 172.31.255.255 are reserved and you cannot use them, so your usable addresses
   are 172.16.0.1 to 172.31.255.254.

   192.168.0.0/16 has a 16-bit subnet mask, 255.255.0.0. Again, the first and last addresses are
   reserved, so your usable addresses are 192.168.0.1 to 192.168.255.254.

   So, you ask, just what are the first and last addresses reserved for? The first address identifies
   your subnets, for example 192.168.1.0. The last address is the broadcast address. Suppose your subnet
   is 192.168.1.0/24, then 192.168.1.255 is the broadcast address. These broadcasts go to every host on
   the network segment, hence the term "broadcast domain". This is how DHCP and routing tables are
   advertised.

IPv6 Private Addresses
   IPv6 private link-local addresses, for whatever reason, are not pebbles in my shoes the way IPv4
   link-local addresses are. Maybe because they're so alien they bounce off my brain. And I have no
   choice, as the IPv6 protocol requires these. You can view yours with either the ip or ifconfig
   command:
$ ifconfig
ifconfig wlan0
    wlan0 Link encap:Ethernet  HWaddr 9c:ef:d5:fe:8f:20
          inet addr:192.168.0.135  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::b07:5c7e:2e69:9d41/64 Scope:Link

   These fall into the fe80::/10 range. You can ping your computer:
$ ping6 -I wlan0 fe80::b07:5c7e:2e69:9d41
PING fe80::b07:5c7e:2e69:9d41(fe80::b07:5c7e:2e69:9d41)
from fe80::b07:5c7e:2e69:9d41 wlan0: 56 data bytes
64 bytes from fe80::b07:5c7e:2e69:9d41:
icmp_seq=1 ttl=64 time=0.032 ms

   With ping6, you must always specify your interface name, even if it is the only one. You can discover
   your LAN neighbors:
$ ping6 -c4 -I wlan0 ff02::1
PING ff02::1(ff02::1) from fe80::b07:5c7e:2e69:9d41
wlan0: 56 data bytes
64 bytes from fe80::b07:5c7e:2e69:9d41:
icmp_seq=1 ttl=64 time=0.078 ms
64 bytes from fe80::4066:50ff:fee7:3ac4:
icmp_seq=1 ttl=64 time=20.7 ms (DUP!)
64 bytes from fe80::9eef:d5ff:fefe:17c:
icmp_seq=1 ttl=64 time=27.7 ms (DUP!)

   Cool, I have two neighbors. ff02::1 is a special link-local multicast address for discovering all
   link-local hosts. man ping tells us that DUP! means "ping will report duplicate and damaged packets.
   Duplicate packets should never occur, and seem to be caused by inappropriate link-level
   retransmissions." In this context, it's nothing to worry about, so I ping my neighbors:
$ ping6 -c4 -I wlan0 fe80::4066:50ff:fee7:3ac4
64 bytes from fe80::4066:50ff:fee7:3ac4:
icmp_seq=1 ttl=64 time=4.72 ms

   How is it that we can ping our LAN neighbors on their link-local addresses, when we couldn't ping the
   2001:0DB8::/32 addresses we created in last week's installment? Because the routing is automatic. You
   won't see IPv6 routes with the good ol' route command, but must use the ip command:
$ ip -6 route show
fe80::/64 dev wlan0  proto kernel  metric 256  pref medium

   Pretty slick. Come back next week, and we will really do some routing.


---
https://www.linux.com/learn/intro-to-linux/2017/7/practical-networking-linux-admins-ipv6-routing
Practical Networking for Linux Admins: IPv6 Routing

   Our story so far: We have learned the important bits about [42]TCP/IP, [43]IPv6, and [44]IPv4 and
   IPv6 LAN Addressing, which is all very excellent. But, if you want your computers to talk to each
   other, then you must know about routing.

Simple Test Lab
   Now we have a good use for the ip command. ip assigns multiple addresses to network interfaces, which
   is totally groovy because you can practice setting up and testing routing without needing a herd of
   computers. All you need to get started is two computers connected to the same Ethernet switch. In the
   following examples, I'm using a desktop PC and a laptop connected to an old 8-port gigabit switch.
   Yes, I know, there are newer switches that are so fast they reach the future before we do. Any
   Ethernet switch you want to use is fine.

   If you are using Network Manager it will try to find a DHCP server when you plug in your Ethernet
   cables, so don't run any name services on your test lab.

Assigning and Removing IP Addresses
   First check your network interface names. The output is snipped for clarity:
$ ip addr show
1: lo: <LOOPBACK,UP,LOWER_UP>
[...]
2: enp0s25: <BROADCAST,MULTICAST,UP,LOWER_UP>
[...]
3: wlx9cefd5fe8f20: <BROADCAST,MULTICAST,UP,LOWER_UP>
[...]

   My Ubuntu system likes to give network interfaces strange names. enp0s25 is my wired Ethernet
   interface. Let's give it an IPv6 address from the range reserved for examples and documentation (see
   [45]Practical Networking for Linux Admins: Real IPv6):
$ sudo ip -6 addr add 2001:0db8::1/64 dev enp0s25

   Let us admire our new address (again with trimmed output), and note also how the link local address
   is assigned automatically:
$ ip addr show
2: enp0s25: <BROADCAST,MULTICAST,UP,LOWER_UP>
    link/ether d0:50:99:82:e7:2b brd ff:ff:ff:ff:ff:ff
    inet6 2001:db8::1/64 scope global
    inet6 fe80::d250:99ff:fe82:e72b/64 scope link

   Assign an address to the second host:
$ sudo ip -6 addr add 2001:0db8::2/64 dev eth0

   Now the two hosts can ping each other. Remember, ping6 requires specifying the network interface,
   even if you only have one:
$ ping6 -I enp0s25 2001:db8::2
PING 2001:db8::2(2001:db8::2) from 2001:db8::1 enp0s25: 56 data bytes
64 bytes from 2001:db8::2: icmp_seq=1 ttl=64 time=1.01 ms

   You can also ping the link local addresses:
$ ping6 -I enp0s25 fe80::ea9a:8fff:fe67:190d
PING fe80::ea9a:8fff:fe67:190d(fe80::ea9a:8fff:fe67:190d)
from fe80::d250:99ff:fe82:e72b enp0s25: 56 data bytes
64 bytes from fe80::ea9a:8fff:fe67:190d: icmp_seq=1 ttl=64 time=0.531 ms

   link/ether is the MAC address. Note the scope values of global and link. global is a routable
   address, while link is the link local address that operates only within a single network segment. In
   IPv4 networks this is called a broadcast domain, which contains all hosts within a single logical
   network segment. Unlike IPv4 networks, IPv6 does not use a broadcast address. IPv4 has three address
   types: unicast, multicast and broadcast. As the excellent [46]TCP/IP Guide says:

     "Broadcast addressing as a distinct addressing method is gone in IPv6. Broadcast functionality is
     implemented using multicast addressing to groups of devices."

   Delete an address this way:
$ sudo ip -6 addr del 2001:0db8::1/64 dev enp0s25

Create Route
   Now we'll add a second address to one of our test machines that's in a different subnet. In the
   2001:0db8::0/64 network, the first four octets define the network, and the last four are the host
   addresses. The "2" in the host address on my second test machine helps me remember which machine is
   which, so I'll recycle that for the new subnet:
$ sudo ip -6 addr add 2001:db8:0:1::2/64 dev eth0

   I ping the new address from the first test machine, to no avail:
$ ping6 -I enp0s25 2001:db8:0:1::2
connect: Network is unreachable

   So, I'll create a route to the new subnet. Run ip -6 route show first to see your existing routing
   table, and copy it for a reference. Then create the new route:
$ sudo ip -6 route add 2001:db8:0:1::0/64 dev enp0s25

   Now look what ping does:
$ ping6 -I enp0s25 2001:db8:0:1::2
PING 2001:db8:0:1::2(2001:db8:0:1::2) from 2001:db8::1 enp0s25: 56 data bytes
64 bytes from 2001:db8:0:1::2: icmp_seq=1 ttl=64 time=0.583 ms

   Success! We are networking nerds deluxe! Just to make sure, delete the route and try ping again:
$ sudo ip -6 route del 2001:db8:0:1::0/64 dev enp0s25
$ ping6 -I enp0s25 2001:db8:0:1::2
connect: Network is unreachable

   None of these configurations survive a reboot. This is good news when you want to wipe everything and
   start over, but not so good news when you want to keep them. Every Linux distribution has its own
   special way of configuring IP addresses and static routes. If you're running Network Manager you can
   configure everything with it. You can also push all of this to clients with a DHCP server, such as
   the excellent [47]Dnsmasq, which provides name services, router advertisement, and network booting.
   All of which are large topics for another day. Until then, be well and enjoy being an IPv6 guru.
