filename: ssh_reverse-ssh-tunneling_20180906.txt
https://www.howtoforge.com/reverse-ssh-tunneling

Reverse SSH Tunneling
   Have you ever wanted to ssh to your Linux box that sits behind NAT? Now you can with reverse SSH
   tunneling. This document will show you step by step how to set up reverse SSH tunneling. The reverse
   SSH tunneling should work fine with Unix like systems.

   Let's assume that Destination's IP is 192.168.20.55 (Linux box that you want to access).

   You want to access from Linux client with IP 138.47.99.99.

   Destination (192.168.20.55) <- |NAT| <- Source (138.47.99.99)

   1. SSH from the destination to the source (with public IP) using the command below:

   ssh -R 19999:localhost:22 [17][email protected]

   * port 19999 can be any unused port.

   2. Now you can SSH from source to destination through SSH tunneling:

   ssh localhost -p 19999

   3. 3rd party servers can also access 192.168.20.55 through Destination (138.47.99.99).

   Destination (192.168.20.55) <- |NAT| <- Source (138.47.99.99) <- Bob's server

   3.1 From Bob's server:

   ssh [18][email protected]

   3.2 After the successful login to Source:

   ssh localhost -p 19999

   * the connection between destination and source must be alive at all time.

   Tip: you may run a command (e.g. watch, top) on Destination to keep the connection active.

Comments

Step 1
   I recommand to use ssh option -f to detach ssh process from the tty and -N to not execute any command
   over ssh (the connexion is just used for port forwarding)

   Using key authentication (option -i) is quite better too and make this command to be run within a
   boot script (like /etc/rc.local) :

   ssh -i /path/to/priv/key/id_rsa -f -N -R 19999:localhost:22 [26][email protected]

Step 3
   In your example, you have to give a shell access to 138.47.99.99 to a foreign user (bob) in order to
   let him connect to destination.

   If bob does not need any shell access to 138.47.99.99, you can specify the remote port forwarder to
   listen on one specific interface or any (instead of 127.0.0.1 by default) :

   ssh -i /path/to/priv/key/id_rsa -f -N -R *:19999:localhost:22 [27][email protected]
