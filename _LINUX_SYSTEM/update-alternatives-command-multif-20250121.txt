filename: update-alternatives-command_multif_20250121.txt
https://www.baeldung.com/linux/update-alternatives-command

The update-alternatives Command in Linux
July 24, 2024

1. Overview
Linux systems allow easily switching between programs of similar functionality or goal. So we can set a given
version of a utility program or development tool for all users. Moreover, the change applies not only to the
program itself but to its configuration or documentation as well.

In this tutorial, we'll learn about the update-alternatives command.

2. Command's Basics
With update-alternatives we can run different programs under a generic name. We call these programs
alternatives. A well-known example is editor, which can refer to vim, nano, or joe.

The command uses symbolic links to keep track of alternatives. Then, update-alternatives accepts commands to
manage alternatives without going through the underlying links.

Now, let's check the command's version:
$> update-alternatives --version
Debian update-alternatives version 1.21.1.

This is free software; see the GNU General Public License version 2 or later for copying conditions. There is
NO warranty.

Let's notice that the command is of Debian origin, but it's also adopted in other distributions like Fedora.
However, on Debian-like distributions, it well integrates with the rest of the system. So we'll work on Ubuntu
22.04 LTS.

3. The editor Example
Let's check editor, which is usually set during the installation of the system. So, let's review its
configuration with config:
$> update-alternatives --config editor
...

Let's notice the Selection column with a numeric key to pick up the alternative. The star symbol indicates
that nano is the current alternative. Next, we see the path to the program. Then comes the program's priority
and status - either auto or manual.

4. Selecting Alternative
Let's discern the manual and auto mode. In manual mode, we don't need to regard priorities. On the contrary,
the automatic mode always sets the alternative with the highest priority.

So, the auto mode is helpful to keep order after installing a new alternative or a new package. In addition,
an automatic choice is a fail-safe option after removing the current alternative.

4.1. Choosing the Alternative in Manual Mode With config
Now let's change the program hidden behind the generic name editor. So we need to run update-alternatives with
config as sudo user. Subsequently, we're going to choose vim.tiny:
...

4.2. Choosing the Alternative With set
Instead of working interactively, we can select the current editor with the set command. However, we need the
path to the desired program. So, let's obtain it with the list command:
$> update-alternatives --list editor
/bin/ed
/bin/nano
/usr/bin/mcedit
/usr/bin/vim.basic
/usr/bin/vim.tiny

Then, let's choose mcedit:
$> sudo update-alternatives --set editor /usr/bin/mcedit
update-alternatives: using /usr/bin/mcedit to provide /usr/bin/editor (editor) in manual mode

4.3. Set Back to Auto Mode
Let's switch the editor's alternatives back to auto mode. So, we can use config once again and select zero.
However, we can use the auto command as well:
$> sudo update-alternatives --auto editor
update-alternatives: using /bin/nano to provide /usr/bin/editor (editor) in auto mode

5. Links Configuration
Assuming that nano is our choice, let's check with whereis what editor really is:
$> whereis editor
editor: /usr/bin/editor /usr/share/man/man1/editor.1.gz

Then let's examine /usr/bin/editor:
$> ls -all /usr/bin/editor
lrwxrwxrwx 1 root root 24 Apr 19 12:03 /usr/bin/editor -> /etc/alternatives/editor

Thus, it doesn't point to /bin/nano, as we'd expect at the first glance. Let's follow this link:
$> ls -all /etc/alternatives/editor
lrwxrwxrwx 1 root root 17 Aug  9 18:24 /etc/alternatives/editor -> /usr/bin/nano

So, the interim link in the /etc/alternatives folder points to the actual program. Furthermore, this folder is
a place to keep all alternative links system-wide.

5.1. Querying Alternatives Links With display
Now, let's extract editor's links with display:
$> update-alternatives --display editor
editor - auto mode
link best version is /bin/nano
link currently points to /bin/nano
link editor is /usr/bin/editor
slave editor.1.gz is /usr/share/man/man1/editor.1.gz
slave editor.da.1.gz is /usr/share/man/da/man1/editor.1.gz
# ...
/bin/ed - priority -100
slave editor.1.gz: /usr/share/man/man1/ed.1.gz
# ...
/usr/bin/vim.tiny - priority 15
slave editor.1.gz: /usr/share/man/man1/vim.1.gz
# ...

From the output, we can learn that we're in the automatic mode, that the current editor is nano, and that nano
has the best score alternative. Then, we're provided with data concerning all other editor's alternatives.

5.2. Master and Slave Links
Let's find out from display's output that the link to the actual program may be accompanied by slave links.
Consequently, the program's link is the master one. The slave links point to other files and should follow the
change of the master. In our case, they point to manuals.

So, let's select vim as editor and check editor's manual:
$> sudo update-alternatives --set editor /usr/bin/vim.tiny
update-alternatives: using /usr/bin/vim.tiny to provide /usr/bin/editor (editor) in manual mode

Which turns out to be the vim's one:
$> man editor | head -n 1
VIM(1)                 General Commands Manual               VIM(1)

So, the change of the editor's alternative is reflected by the appropriate change to the manual.

Let's notice that we can set slaves links not only to documentation but also to configuration or even other
executable files. So we have a flexible way to change the whole surroundings of the program with one command.

6. Managing Alternatives
Let's look through some common actions which we can take during work with the alternatives.

6.1. Adding New Alternative With install
Let's assume that we've installed yet another editor, micro:
$> sudo apt-get install micro

Next, we can add it to the alternatives with install:
sudo update-alternatives --install /usr/bin/editor editor /usr/bin/micro 100

Let's look through the command's arguments:
/usr/bin/editor - the alternative link - it's the same for all alternatives
editor - the generic name - it corresponds to the link
/usr/bin/micro - the path to the actual editor
100 - new alternative's priority

Let's notice that the priority is higher than the highest to date. So the new editor becomes the automatic
mode choice. However, we can't overwrite the manual selection in this way.

6.2. Updating Slave Links
With micro selected, let's try to obtain the editor's manual:
$> man editor
No manual entry for editor

So we need to add a slave link to the micro's links group. First, let's check the editor's links:
$> sudo update-alternatives --display editor
editor - auto mode
link best version is /usr/bin/micro
link currently points to /usr/bin/micro
link editor is /usr/bin/editor
slave editor.1.gz is /usr/share/man/man1/editor.1.gz
# more output skipped

So we can find a slave manual link /usr/share/man/man1/editor.1.gz. Unfortunately, it doesn't exist:
$> ls /usr/share/man/man1/editor.1.gz
ls: cannot access '/usr/share/man/man1/editor.1.gz': No such
file or directory

Thus, let's check what micro offers with whereis:
$> whereis micro
micro: /usr/bin/micro /usr/share/man/man1/micro.1.gz

Finally, we need to reinstall micro and add the lacking manual link with slave:
$> sudo update-alternatives --install /usr/bin/editor editor
/usr/bin/micro 100 \
--slave /usr/share/man/man1/editor.1.gz editor.1.gz
/usr/share/man/man1/micro.1.gz

Let's notice the syntax similar to that of install. First, we need to provide the generic link, then the
generic name - editor.1.gz, and finally the location of the actual file.  Moreover, with one call to
update-alternatives we can add as many slave links as we want.

6.3. Deleting Alternative With remove
Now, let's get rid of the micro alternative in the editor group with remove:
$> sudo update-alternatives --remove editor /usr/bin/micro

Let's notice that we need the path to the targeted program.  Then, if the removed alternative has been chosen
manually, the group switches to the auto mode. On the other hand, removing the automatic choice alternative
leads to selecting a new one with the highest priority.

6.4. Listing Alternatives With get-selections
Finally, let's list all alternatives available in the system with the get-selections command:
$> update-alternatives --get-selections
animate              auto    /usr/bin/animate-im6.q16
animate-im6          auto    /usr/bin/animate-im6.q16
arptables            auto    /usr/sbin/arptables-nft
awk                  auto    /usr/bin/gawk
builtins.7.gz        auto    /usr/share/man/man7/bash-builtins.7.gz
c++                  auto    /usr/bin/g++
# ...

So we see the master name, status, and file name of the actual program.

7. Integration With the Software Manager
On Debian-like Linux distributions, alternatives may update during installing or removing applications with
apt-get.

As an example, let's install one more editor, joe:
$> sudo apt-get install joe

Now, let's go straight to checking editor with display:
alternative joe 1

So, we can see that joe is on the list with priority 70. As we've been in the auto mode, it makes joe the new
choice.

Let's notice that this happens thanks to the postinst script, which is triggered after the installation of the
package. By the same token, the prerm and postrm scripts update alternatives during the removal of the
package.

These scripts come with a package, which contains the program. In the case of joe, we can find joe.postinst
and joe.prerm in /var/lib/dpkg/info.

Some packages as e.g. micro doesn't provide the means to update the alternative system. So, if such a program
is the current one, we can face a warning about a dangling alternative after removal.

8. Conclusion
In this article, we learned how to manage alternative programs. First, we introduced the update-alternatives
command, which facilitates the managing of the different programs in the group of alternatives. Then, we
studied the example of the editor group.

Next, we examined the underlying system of symbolic links.  Moreover, we learned that slave links could switch
other files related to the alternative.

As the next topic, we looked through some common actions with alternatives. Finally, we checked how the
installation or removal of the program's package might update-alternatives.


---
https://www.redhat.com/en/blog/alternatives-command

Introduction to the alternatives command in Linux
March 10, 2020

   Abstractions can be helpful to users because many users don't care how their computer achieves a task
   as long as it's on target. In fact, even applications don't always care how something is achieved as
   long as all of its system calls are answered correctly. In theory, a Linux sysadmin can offer many
   system tools according to function rather than by the exact name of the executable, but that often
   requires a lot of symlinking and version tracking. Unless that is, you use the alternatives command.

   The alternatives command began its life as, interestingly, an alternative. Originally, this was a
   convenience utility, written in Perl, from the Debian Linux project, called update-alternatives. Red
   Hat rewrote the command without Perl, and it's been propagated throughout Fedora-based distributions
   such as Red Hat and CentOS, as well as other distributions that look to Red Hat for the functional
   definition of the Linux Standard Base (LSB).

When to use the alternatives command
   A simple and realistic example: you have a command on your system called em, which launches a simple
   text editor. It's been the go-to editor for your userbase for years, many people have based workflows
   around it and some maintain highly customized configs for it. However, your userbase has made it
   clear to you recently that they can't survive any longer without emoji support in their terminal
   editors and em doesn't support Unicode.

   You find a Unicode-enabled fork of em called nem, but you know that 99% of your users are used to em,
   have scripts that call em, and will continue to think of any replacement application as em no matter
   what you do. The easy solution to this situation, and many other examples similar to it, is to
   designate the new nem binary as the preferred alternative to the em binary when the em command is
   used.

   Manually creating a symlink might seem tempting, but that's not resistant to updates from a package
   manager, nor is it centralized.

   The alternatives command is most useful when managing "generic" application names. Of course in the
   UNIX world, "generic" isn't always generic any more than "Kleenex" or "Xerox" is in the real world,
   so terms like java, (x)emacs(-nox), (n)vi(m), whois, and iptables are often some of the first to have
   alternatives defined for them. For truly generic terms, like EDITOR and CC, the alternatives command
   is not considered an appropriate solution. For those terms, because they're environment
   variables and should be defined in /etc or $HOME/.profile.

   Creating a new alternative
   Continuing with the example scenario of an old binary called em being supplanted by the new variant
   nem, it's easy to create an alternative entry. In this example, you must rename the original command,
   although in other instances this isn't necessary because the command isn't exactly what people think
   it is in the first place (java, for example, is rarely located in /usr/bin directly). If you do need
   to change the name of a binary, the right way to do that is in its RPM spec file, such that the RPM
   installing the command provides the binary under the new name.

   In a pinch, especially if you're phasing the command out anyway, you could remove the command from
   the system's package management and just keep a custom version of the old command available /opt or
   similar.

   For this example, assume you've renamed the original editor em2 (denoting its latest version number).

   Now you have two binaries (em2 and nem) to be associated with one command: em. To help keep the
   different roles of terminology clear, assume that em and nem are both micro Emacs-style editors. In
   that case, a very generic term for the alternative being created might be µemacs(using the µ symbol
   to mean "micro") or uemacs for simplicity.

   Create an alternative for the original by providing:
     * a location for the "generic" symlink
     * a name for the alternative (I've decided upon uemacs, to make it clear that it's a reference name
       rather than a specific binary)
     * the binary to be executed when these symlinks are called
     * a priority level to indicate which alternative is preferred

$> sudo alternatives --install /usr/bin/em uemacs /opt/em-legacy/em2 1

   Create an alternative for the new binary, with a high priority because it's your preferred binary:
$> sudo alternatives --install /usr/bin/em uemacs /usr/local/bin/nem 99

   These commands create a new symlink, /usr/bin/em, pointing to /etc/alternatives/em, which you can in
   turn point to either /opt/em-legacy/em2 or /usr/local/bin/nem. The human-friendly reference to this
   bundle of alternatives is uemacs, which has been arbitrarily chosen by the systems administrator
   because it's descriptive and memorable. You can choose the destination of the alternative symlink
   using the --config option:
$> sudo alternatives --config uemacs
[sudo] password for seth:

There are 2 programs which provide 'uemacs'.

  Selection    Command
-----------------------------------------------
*+ 1           /usr/local/bin/nem
   2           /opt/em-legacy/em2

Removing an alternative
   Sometimes alternatives are long-term solutions, and other times they're just to help users or admins
   to transition to something new. If you need to remove an alternative for any reason, you can do that
   with the --remove-all option, followed by the "generic" name of the alternative. In this example,
   that's uemacs:
$> sudo alternatives --remove-all uemacs

   This removes everything about uemacs from the alternatives subsystem: the symlink in /usr/bin and
   /etc/alternatives. If you only want to remove one choice from an alternative, then use the --remove
   option, providing the alternative name (uemacs in this example) and the path of the choice you want
   to drop:
$> sudo alternatives --remove uemacs /opt/em-legacy/em2

Alternatives
   The alternatives command has many more features, including the ability to symlink dependent
   components when a specific alternative is chosen. In addition to handling a lot of the heavy lifting,
   alternatives keeps your inconsistencies centralized. You can check in on what alternatives are in
   place, so you don't have to remember from day to day that emacs is actually emacs-26.3, or that java
   isn't java-1.8 but /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0, and so on:
$> alternatives --list

   Linux is all about choice and flexibility, and the alternatives command is an example of how both
   users and admins can benefit from some clever sleight-of-hand.


---
https://manpages.ubuntu.com/manpages/trusty/man8/update-alternatives.8.html

updtae-alternatives MAN page

update-alternatives - maintain symbolic links determining default commands

SYNOPSIS
       update-alternatives [option...] command


DESCRIPTION
       update-alternatives  creates,  removes,  maintains  and  displays  information  about  the
       symbolic links comprising the Debian alternatives system.

       It is possible for several programs  fulfilling  the  same  or  similar  functions  to  be
       installed  on  a  single  system at the same time.  For example, many systems have several
       text editors installed at once.  This gives choice to the users of a system, allowing each
       to use a different editor, if desired, but makes it difficult for a program to make a good
       choice for an editor to invoke if the user has not specified a particular preference.

       Debian's alternatives system aims to solve this problem.  A generic name in the filesystem
       is  shared  by all files providing interchangeable functionality.  The alternatives system
       and the system administrator together determine which actual file is  referenced  by  this
       generic name.  For example, if the text editors ed(1) and nvi(1) are both installed on the
       system, the alternatives system will cause the generic name /usr/bin/editor  to  refer  to
       /usr/bin/nvi  by default. The system administrator can override this and cause it to refer
       to /usr/bin/ed instead, and the alternatives system will  not  alter  this  setting  until
       explicitly requested to do so.

       The  generic  name is not a direct symbolic link to the selected alternative.  Instead, it
       is a symbolic link to a name in the alternatives directory, which in turn  is  a  symbolic
       link  to  the  actual  file  referenced.   This is done so that the system administrator's
       changes can be confined within the /etc directory: the FHS (q.v.) gives reasons  why  this
       is a Good Thing.

       When  each  package providing a file with a particular functionality is installed, changed
       or removed, update-alternatives is called to update information about  that  file  in  the
       alternatives  system.  update-alternatives is usually called from the postinst (configure)
       or prerm (install) scripts in Debian packages.

       It is often useful for a number of alternatives to  be  synchronized,  so  that  they  are
       changed  as a group; for example, when several versions of the vi(1) editor are installed,
       the man page referenced by /usr/share/man/man1/vi.1 should correspond  to  the  executable
       referenced  by /usr/bin/vi.  update-alternatives handles this by means of master and slave
       links; when the master is changed, any associated slaves are changed too.  A  master  link
       and its associated slaves make up a link group.

       Each  link  group is, at any given time, in one of two modes: automatic or manual.  When a
       group is in automatic mode, the alternatives system will automatically decide, as packages
       are  installed  and  removed,  whether  and  how to update the links.  In manual mode, the
       alternatives system will retain the choice of the administrator  and  avoid  changing  the
       links (except when something is broken).

       Link  groups  are  in automatic mode when they are first introduced to the system.  If the
       system administrator makes changes to  the  system's  automatic  settings,  this  will  be
       noticed  the  next  time  update-alternatives  is run on the changed link's group, and the
       group will automatically be switched to manual mode.

       Each alternative has a priority associated with it.  When a link  group  is  in  automatic
       mode,  the  alternatives  pointed  to by members of the group will be those which have the
       highest priority.

       When using the --config option, update-alternatives will list all of the choices  for  the
       link  group  of  which  given  name  is the master alternative name. The current choice is
       marked with a '*'.  You will then be prompted for your choice regarding this  link  group.
       Depending  on  the  choice  made, the link group might no longer be in auto mode. You will
       need to use the --auto option in order to return to the automatic mode (or you  can  rerun
       --config and select the entry marked as automatic).

       If  you  want  to  configure  non-interactively  you can use the --set option instead (see
       below).

       Different packages providing the same file need to do so cooperatively.  In  other  words,
       the  usage  of update-alternatives is mandatory for all involved packages in such case. It
       is  not  possible  to  override  some  file  in  a  package  that  does  not  employ   the
       update-alternatives mechanism.


TERMINOLOGY
       Since  the  activities of update-alternatives are quite involved, some specific terms will
       help to explain its operation.

       generic name (or alternative link)
              A name, like /usr/bin/editor, which refers, via the alternatives system, to one  of
              a number of files of similar function.

       alternative name
              The name of a symbolic link in the alternatives directory.

       alternative (or alternative path)
              The  name  of a specific file in the filesystem, which may be made accessible via a
              generic name using the alternatives system.

       alternatives directory
              A directory, by default /etc/alternatives, containing the symlinks.

       administrative directory
              A directory, by default /var/lib/dpkg/alternatives, containing update-alternatives'
              state information.

       link group
              A set of related symlinks, intended to be updated as a group.

       master link
              The  alternative  link  in a link group which determines how the other links in the
              group are configured.

       slave link
              An alternative link in a link group which is  controlled  by  the  setting  of  the
              master link.

       automatic mode
              When  a  link  group is in automatic mode, the alternatives system ensures that the
              links in the group point to the highest priority alternative  appropriate  for  the
              group.

       manual mode
              When  a  link  group  is  in manual mode, the alternatives system will not make any
              changes to the system administrator's settings.


COMMANDS

       --install link name path priority [--slave link name path]...
              Add a group of alternatives to the system.  link is the generic name for the master
              link,  name  is  the name of its symlink in the alternatives directory, and path is
              the alternative being introduced for the master link.  The arguments after  --slave
              are  the  generic  name,  symlink  name  in  the  alternatives  directory  and  the
              alternative path for a slave link.  Zero or more --slave options, each followed  by
              three  arguments,  may be specified. Note that the master alternative must exist or
              the call will fail. However if a slave alternative doesn't exist, the corresponding
              slave  alternative  link  will  simply  not  be  installed (a warning will still be
              displayed). If some real file is installed where an  alternative  link  has  to  be
              installed, it is kept unless --force is used.

              If  the  alternative  name  specified  exists  already in the alternatives system's
              records, the information supplied will be added as a new set  of  alternatives  for
              the  group.  Otherwise, a new group, set to automatic mode, will be added with this
              information.  If the group is in automatic mode, and the newly added  alternatives'
              priority  is  higher  than  any  other  installed  alternatives for this group, the
              symlinks will be updated to point to the newly added alternatives.

       --set name path
              Set the program path as alternative for name.  This is equivalent to  --config  but
              is non-interactive and thus scriptable.

       --remove name path
              Remove an alternative and all of its associated slave links.  name is a name in the
              alternatives directory, and path is an absolute filename to  which  name  could  be
              linked.  If name is indeed linked to path, name will be updated to point to another
              appropriate alternative (and the group is put back in automatic mode),  or  removed
              if  there  is  no such alternative left.  Associated slave links will be updated or
              removed, correspondingly.  If the link is not currently pointing to path, no  links
              are changed; only the information about the alternative is removed.

       --remove-all name
              Remove all alternatives and all of their associated slave links.  name is a name in
              the alternatives directory.

       --all  Call --config on all alternatives. It can be usefully combined with --skip-auto  to
              review  and  configure all alternatives which are not configured in automatic mode.
              Broken alternatives are also displayed.  Thus  a  simple  way  to  fix  all  broken
              alternatives is to call yes '' | update-alternatives --force --all.

       --auto name
              Switch  the  link  group behind the alternative for name to automatic mode.  In the
              process, the master symlink and its slaves are updated  to  point  to  the  highest
              priority installed alternatives.

       --display name
              Display  information  about  the  link  group.   Information displayed includes the
              group's mode (auto or manual), which alternative the master link  currently  points
              to,   what   other  alternatives  are  available  (and  their  corresponding  slave
              alternatives), and the highest priority alternative currently installed.

       --get-selections
              List all master alternative names  (those  controlling  a  link  group)  and  their
              status.  Each  line  contains up to 3 fields (separated by one or more spaces). The
              first field is the alternative name, the second one is the status (either "auto" or
              "manual"), and the last one contains the current choice in the alternative (beware:
              it's a filename and thus might contain spaces).

       --set-selections
              Read configuration of alternatives on standard input in  the  format  generated  by
              update-alternatives --get-selections and reconfigure them accordingly.

       --query name
              Display  information  about  the  link  group like --display does, but in a machine
              parseable way (see section QUERY FORMAT below).

       --list name
              Display all targets of the link group.

       --config name
              Show available alternatives for a link group and allow the  user  to  interactively
              select which one to use. The link group is updated.

       --help Show the usage message and exit.

       --version
              Show the version and exit.


OPTIONS

       --altdir directory
              Specifies  the  alternatives  directory,  when  this  is  to  be different from the
              default.

       --admindir directory
              Specifies the administrative directory, when this  is  to  be  different  from  the
              default.

       --log file
              Specifies   the   log  file,  when  this  is  to  be  different  from  the  default
              (/var/log/alternatives.log).

       --force
              Let update-alternatives replace or drop any real file that is  installed  where  an
              alternative link has to be installed or removed.

       --skip-auto
              Skip  configuration  prompt  for  alternatives  which  are  properly  configured in
              automatic mode. This option is only relevant with --config or --all.

       --verbose
              Generate more comments about what update-alternatives is doing.

       --quiet
              Don't generate any comments unless errors occur.


EXIT STATUS

       0      The requested action was successfully performed.

       2      Problems were encountered whilst parsing the command line or performing the action.


ENVIRONMENT

       DPKG_ADMINDIR
              If set and the --admindir option has not been specified, it will  be  used  as  the
              base administrative directory.


FILES

       /etc/alternatives/
              The default alternatives directory.  Can be overridden by the --altdir option.

       /var/lib/dpkg/alternatives/
              The default administration directory.  Can be overridden by the --admindir option.


QUERY FORMAT

       The update-alternatives --query format is using an RFC822-like flat format. It's made of n
       + 1 blocks where n is the number of alternatives available in the queried link group.  The
       first block contains the following fields:

       Name: name
              The alternative name in the alternative directory.

       Link: link
              The generic name of the alternative.

       Slaves: list-of-slaves
              When  this  field is present, the next lines hold all slave links associated to the
              master link of the alternative. There is one slave per line. Each line contains one
              space,  the  generic  name of the slave alternative, another space, and the path to
              the slave link.

       Status: status
              The status of the alternative (auto or manual).

       Best: best-choice
              The path of the best alternative for this link group. Not present if  there  is  no
              alternatives available.

       Value: currently-selected-alternative
              The  path  of  the currently selected alternative. It can also take the magic value
              none. It is used if the link doesn't exist.

       The other blocks describe the available alternatives in the queried link group:

       Alternative: path-of-this-alternative
              Path to this block's alternative.

       Priority: priority-value
              Value of the priority of this alternative.

       Slaves: list-of-slaves
              When this field is present, the next lines hold all slave  alternatives  associated
              to  the  master  link  of  the  alternative. There is one slave per line. Each line
              contains one space, the generic name of the slave alternative, another  space,  and
              the path to the slave alternative.

       Example
              $ update-alternatives --query editor
              Name: editor
              Link: /usr/bin/editor
              Slaves:
               editor.1.gz /usr/share/man/man1/editor.1.gz
               editor.fr.1.gz /usr/share/man/fr/man1/editor.1.gz
               editor.it.1.gz /usr/share/man/it/man1/editor.1.gz
               editor.pl.1.gz /usr/share/man/pl/man1/editor.1.gz
               editor.ru.1.gz /usr/share/man/ru/man1/editor.1.gz
              Status: auto
              Best: /usr/bin/vim.basic
              Value: /usr/bin/vim.basic

              Alternative: /bin/ed
              Priority: -100
              Slaves:
               editor.1.gz /usr/share/man/man1/ed.1.gz

              Alternative: /usr/bin/vim.basic
              Priority: 50
              Slaves:
               editor.1.gz /usr/share/man/man1/vim.1.gz
               editor.fr.1.gz /usr/share/man/fr/man1/vim.1.gz
               editor.it.1.gz /usr/share/man/it/man1/vim.1.gz
               editor.pl.1.gz /usr/share/man/pl/man1/vim.1.gz
               editor.ru.1.gz /usr/share/man/ru/man1/vim.1.gz


DIAGNOSTICS

       With  --verbose  update-alternatives  chatters  incessantly  about  its  activities on its
       standard output channel.  If problems occur, update-alternatives outputs error messages on
       its  standard  error channel and returns an exit status of 2.  These diagnostics should be
       self-explanatory; if you do not find them so, please report this as a bug.


EXAMPLES

       There are several packages which provide a text editor compatible with vi, for example nvi
       and  vim.  Which  one is used is controlled by the link group vi, which includes links for
       the program itself and the associated manpage.

       To display the available packages which provide vi and the current setting for it, use the
       --display action:

              update-alternatives --display vi

       To  choose  a  particular  vi  implementation,  use this command as root and then select a
       number from the list:

              update-alternatives --config vi

       To go back to having the vi implementation chosen automatically, do this as root:

              update-alternatives --auto vi


---

