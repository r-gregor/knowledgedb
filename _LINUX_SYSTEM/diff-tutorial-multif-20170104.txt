filename: /c/Users/gregor.redelonghi/Dropbox/ODPRTO/_TXT/diff-tutorial-multif_20170104.txt
https://www.howtoforge.com/tutorial/linux-diff-command-file-comparison/

How to do line-by-line comparison of files in Linux using diff command

On this page

    1. [16]Linux Diff Command
    2. [17]Diff Usage/Examples
    3. [18]Conclusion

   If you are a Linux user, and your job involves working on various Linux distributions, there may be
   times when you'll find yourself typing commands on a Linux system with no GUI. This means you'll no
   longer be able to access your favorite GUI applications - for example, say, Gedit for file editing -
   that you usually use for your regular work.

   Irrespective of whether you are a system admin or a developer, file comparison is a task that's
   common to almost everybody's work. What if you need to compare two files while working on a CLI-only
   Linux system? Your favorite GUI-based comparison tool will obviously won't be there at your
   disposal. Needless to say, you'll have to make do with a command line utility to get your job done.

   In Linux, the diff command can be used to compare two files, but the thing is that there's a slight
   learning curve involved with this utility. If you don't know how diff works, and are looking for
   quick tutorial to get started, look no further, as in this article, we will discuss the basics of
   this command along with some easy to understand examples.

   Before we proceed, keep in mind that all the examples in this tutorial have been tested on Ubuntu
   14.04 with Bash version 4.3.11(1) and diff version 3.3.


Linux Diff Command
   Instead of directly jumping on to examples, it's good to know a bit about the command first. The
   [19]man page of the diff command reveals that the tool compares files line by line. Its syntax is:

   diff [OPTION]... FILES

   While [OPTION] represents the various command line options the tool offers, FILES is usually a couple
   of file names. Although the diff man page contains useful information about the command, the full
   documentation for diff is maintained as a Texinfo manual. If the info and diff programs are properly
   installed at your site, the command

   info diff

   should give you access to the complete manual.


Diff Usage/Examples
   Now let's discuss how diff is used. For this, let's begin with a basic example. Suppose following are
   the two files that we want to compare:

   file1:
test
test2
test3

   file2:
test
test23
test3

   Here's how you can use the diff command to compare these two files:

   diff file1 file2

   And here's the output the above command produces:
2c2
< test2
---
> test23

   The output seems cryptic, right? We'll come to it in a bit. Let's first understand the basic
   structure of the output that diff produces in general.

   The first thing to keep in mind is that the output represents the changes required to transform file1
   (usually the original file) into file2 (the new or changed file). The output usually consists of
   lines that begin with a number (or a range) followed by an alphabet (a,d, or c) and another number
   (or range). For example 2c2 (from the output above).

   The first number represents the line (or range of lines) from file1 (original file), while the last
   number represents the line (or range of lines) from file2 (the new file). As for the alphabet in
   between, a represents added, d is for deleted, and c represents changed.

   So, 2c2 means second line in the original file has changed and needs to be replaced with the second
   line from the new file in order to make the files same. If you manually compare the two files (file1
   and file2) then you'll see that's exactly the case.

   As for the three lines that follow 2c2 in the aforementioned example, the one that starts with '<' is
   nothing but the second line from file1, and the one that begins with '>' is nothing but the line in
   question from file 2. The three hyphens in between them (---) are just for separation purposes.

   Is there any need to revisit the output of the first example now? Most likely not as the above
   explanation should have made it self explanatory. Now, let's take another example.

   So, here's file1:
Hi all,
This is a diff command tutorial
from HowtoForge.
Hope you'll benefit from it.
Thanks.

   Here's file2:
Hi all,
Welcome to HowtoForge.
In this tutorial, we'll discuss the diff tool.
Hope you'll find it beneficial.
Thanks.

   Here's the command (which remains the same):

   diff file1 file2

   And here's the output:
2,4c2,4
< This is a diff command tutorial
< from HowtoForge.
< Hope you'll benefit from it.
---
> Welcome to HowtoForge.
> In this tutorial, we'll discuss the diff tool.
> Hope you'll find it beneficial.

   So you can see that in this case, the main output - 2,4c2,4 - consists of multiple numbers both
   before and after the alphabet. These are basically ranges - 2,4 represents line number 2,3, and 4. So
   the output means that line numbers 2 to 4 in the original file (file1) have changed, and need to be
   replaced by line numbers 2 to 4 from file2 in order to make the files same.

   Moving on, let's change the contents of the files a bit. While the file1 remains the same, file2 now
   becomes:
Welcome to HowtoForge.
In this tutorial, we'll discuss the diff tool.
Hope you'll find it beneficial.
Thanks.
This is a diff command tutorial
from HowtoForge.
Hope you'll benefit from it.
Thanks.

   Now, if you run the diff command, the following output will be produced:
0a1,5
> Welcome to HowtoForge.
> In this tutorial, we'll discuss the diff tool.
> Hope you'll find it beneficial.
> Thanks.
>

   So you can see that the tool immediately recognized that the second paragraph in file2 is nothing but
   the what all file1 contains. So the output says that line 1 to 5 from file2 should be appended at the
   beginning of file1 to make the two files same.

   And if you delete the last line ("Thanks.") from file2, here's the output:
0a1,5
> Welcome to HowtoForge.
> In this tutorial, we'll discuss the diff tool.
> Hope you'll find it beneficial.
> Thanks.
>
4d8
< Thanks.

   You can see that the output now also contains 4d8, which means that the fourth line in file1 should
   be deleted in order to make both files in sync beginning at line number 8. Of course, this is after
   you address the 0a1,5 change that's mentioned first.


Conclusion

   Agreed, the output of the diff command isn't easy to comprehend, but the learning curve isn't that
   steep. Spend a couple of hours with the tool, and you'll surely get comfortable with it. As for the
   tutorial, we've just scratched the surface here. Take a look at the command's man page, and you'll
   realize that there's much more to learn about diff, something which we'll do in the [20]next part of
   this tutorial series.


---
https://www.howtoforge.com/tutorial/linux-diff-command-options/

How to do line-by-line comparison of files in Linux using diff command - Part II

On this page

    1. [16]Diff command options
         1. [17]1. Report when the files are identical
         2. [18]2. Copied context and Unified context
         3. [19]3. Output an 'ed' script
         4. [20]4. Produce output in two columns
         5. [21]5. Hide common lines
         6. [22]6. Show C function each change is in
         7. [23]7. Recursively compare subdirectories
         8. [24]8. Treat absent files as empty
    2. [25]Conclusion

   In the [26]first part of this diff command tutorial series, we discussed the basics of the command,
   including how it works and how the output it produces can be comprehended. While there's definitely a
   bit of learning curve involved with this command line utility, it's worth learning especially if your
   daily work involves performing file-related tasks on a CLI-only Linux machines.

   Assuming that you already know the basic usage of the diff command, in this tutorial, we'll discuss
   the various command line options the tool provides, through some easy to understand examples.

   But before we proceed, keep in mind that all the examples in this tutorial have been tested on Ubuntu
   14.04 with Bash version 4.3.11(1) and diff version 3.3.


Diff command options
1. Report when the files are identical

   By default, when diff command detects that the files being compared are identical, it does not
   produce any output.

   $ diff file1 file2
   $

   But, there exists a command line option (-s) using which you can force the command to report this in
   the output:

   $ diff -s file1 file2
   Files file1 and file2 are identical

2. Copied context and Unified context
   These are basically two different formats in which the diff command can produce its output. Copied
   context is enabled using the -c command line option, while Unified context is enabled using -u.
   Following is an example of the former:

   $ diff -c file1 file2
   *** file1 2016-12-29 09:36:47.175597647 +0530
   --- file2 2016-12-29 09:19:55.799558326 +0530
   ***************
   *** 1,3 ****
   Hi
   ! Helllo
   Bye
   --- 1,3 ----
   Hi
   ! Hello
   Bye

   So, in the Copied context output format, the differing lines are indicated by an exclamation mark
   (!).

   And here's the example of the Unified context format:

   $ diff -u file1 file2
   --- file1 2016-12-29 09:36:47.175597647 +0530
   +++ file2 2016-12-29 09:19:55.799558326 +0530
   @@ -1,3 +1,3 @@
   Hi
   -Helllo
   +Hello
   Bye

   [27]In this output format, + and - symbols before lines denote versions of the differing line
   : '-' when line in file1 is missing from file2, '+' when line in file2 was added to file1.

3. Output an 'ed' script
   The diff command is also capable of producing commands that the 'ed' editor can use to convert the
   original file (file1 in our examples here) into the new file (file2). Here's how you do this:

   Suppose file1 and file2 contain the following change:

   $ diff file1 file2
   2c2
   < Helllo
   ---
   > Hello

   Now, use the -e command line option to produce the output the 'ed' editor understands, and redirect
   that output into a file:

   diff -e file1 file2 > out

   Here's what out contains in this case:
2c
Hello
.

   What you need to next is to add the command 'w' at the end of the out file.
2c
Hello
.
w

   Now, run the following command:

   ed - file1 < out

   And you'll see that file1 and file2 are now identical.

   $ diff file1 file2
   $

   For more information on this functionality, head [28]here.

4. Produce output in two columns
   Normally, the diff command produces output in the following way:

   $ diff file1 file2
   2c2
   < Helllo
   ---
   > Hello

   But there exists a command line option (-y) that directs diff to produce output in two separate
   columns. Here's an example:

   $ diff -y file1 file2
   Hi                               Hi
   Helllo                         | Hello
   Bye                              Bye

   As you can see, this output format uses a '|' to indicate lines that the different.

5. Hide common lines
   If you observe the output shown in the previous section (point 4 above), you'll notice that with -y
   command line option, diff - in the output - produces common lines as well. In case you need to
   suppress these identical lines, you can use the --suppress-common-lines option.

   [29][email protected]:~$ diff -y --suppress-common-lines file1 file2
   Helllo                                   | Hello


6. Show C function each change is in
   For cases where you use diff to compare two C language files, there's a command line option (-p) that
   directs the utility to show precisely which C function each change is in. For example, suppose these
   are the two C files:

   file1.c:
#include<stdio.h>
void compare(float x, float y)
{
 if(x == y) // incorrect way
 {
 printf("\n EQUAL \n");
 }
}
int main(void)
{
 compare(1.234, 1.56789);
 return 0;
}

   file2.c:
#include<stdio.h>
void compare(float x, float y)
{
 if(x == y)
 {
 printf("\n EQUAL \n");
 }
}
int main(void)
{
 compare(1.234, 1.56789);
 return 0;
}

   Here's the output when both files are compared normally:

   $ diff file1.c file2.c
   5c5
   < if(x == y) // incorrect way
   ---
   > if(x == y)

   And here's the output, when the files are compared using the -p option:

   $ diff -p file1.c file2.c
   *** file1.c 2016-12-29 11:45:36.587010816 +0530
   --- file2.c 2016-12-29 11:46:39.823013274 +0530
   ***************
   *** 2,8 ****
   void compare(float x, float y)
   {
   ! if(x == y) // incorrect way
   {
   printf("\n EQUAL \n");
   }
   --- 2,8 ----
   void compare(float x, float y)
   {
   ! if(x == y)
   {
   printf("\n EQUAL \n");
   }

   So as you can see, with -p, diff gives you a more detailed look at where the change is, indicating
   the differing lines using an exclamation mark (!).

7. Recursively compare subdirectories
   The diff command also lets you recursively compare subdirectories, but that's not its default
   behavior. What I mean to say is, if you take the following case:

   $ diff diff-files/ second-diff-files/
   diff diff-files/file1 second-diff-files/file1
   1c1
   < Hi
   ---
   > i
   diff diff-files/file2 second-diff-files/file2
   2c2
   < Hello
   ---
   > ello

   The diff command only compared files in the top level directories, but if you use the command line
   option -r (which is for recursive diff), you'll see that the even the files present in subdirectories
   are compared:

   $ diff -r diff-files/ second-diff-files/
   diff -r diff-files/file1 second-diff-files/file1
   1c1
   < Hi
   ---
   > i
   diff -r diff-files/file2 second-diff-files/file2
   2c2
   < Hello
   ---
   > ello
   diff -r diff-files/more-diff-files/file1 second-diff-files/more-diff-files/file1
   1c1
   < Hi
   ---
   > i
   diff -r diff-files/more-diff-files/file2 second-diff-files/more-diff-files/file2
   2c2
   < Hello
   ---
   > ello

8. Treat absent files as empty
   The diff command also provides an option using which you can direct the tool to treat absent files as
   empty. For example, if you compare file1 with file3 (that doesn't exist), the default behaviour of
   diff is to produce an error:

   $ diff file1 file3
   diff: file3: No such file or directory

   This is not wrong per se; in fact this makes perfect sense. But there might be cases where-in you'd
   not want the diff command to throw error for such situations (while being part of a bash script, may
   be?), then for those scenarios, you can use the -N command line option that forces the command to
   treat absent files as empty, and continue with the comparison.

   $ diff -N file1 file3
   1,5d0
   < Hi
   <
   < Helllo
   <
   < Bye

Conclusion
   If you go through both parts of this tutorial series properly, and practice all the examples that the
   articles contain, then it won't be stretch to say that you'll end up having a good command on the
   tool. Of course, we couldn't discuss everything related to diff in this series, but rest assured that
   many of the important features/functionalities have been covered.

   For those who'd like to know more about the utility, the [30]man page is always there for you. And
   not to mention that you should keep using the tool frequently with different set of files so as to
   simulate different use cases.
