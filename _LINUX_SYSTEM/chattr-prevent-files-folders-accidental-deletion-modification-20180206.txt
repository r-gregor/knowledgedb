filename: chattr_prevent-files-folders-accidental-deletion-modification_20180206.txt
https://www.ostechnix.com/prevent-files-folders-accidental-deletion-modification-linux/

Prevent Files And Folders From Accidental Deletion Or Modification In Linux
February 5, 2018

   Some times, I accidentally “SHIFT+DELETE” my data. Yes, I am an idiot who don’t double check what I
   am exactly going to delete. And, I am too dumb or lazy to backup the data. Result? Data loss! They
   are gone in a fraction of second. I do it every now and then. If you’re anything like me, I’ve got a
   good news. There is a simple, yet useful commandline utility called “chattr” (abbreviation of Change
   Attribute) which can be used to prevent files and folders from accidental deletion or modification in
   Unix-like distributions. It applies/removes certain attributes to a file or folder in your Linux
   system. So the users can’t delete or modify the files and folders either accidentally or
   intentionally, even as root user. Sounds useful, isn’t it?
   [INS: :INS]
   Download – [53]Free eGuide: “7 Completely Free VPN Services to Protect Your Privacy”

   In this brief tutorial, we are going to see how to use chattr in real time in-order to prevent files
   and folders from accidental deletion in Linux.

Prevent Files And Folders From Accidental Deletion Or Modification In Linux

   By default, Chattr is available in most modern Linux operating systems. Let us see some examples.

   The default syntax of chattr command is:
chattr [operator] [switch] [filename]

   chattr has the following operators.
     * The operator ‘+’ causes the selected attributes to be added to the existing attributes of the
       files;
     * The operator ‘-‘ causes them to be removed;
     * The operator ‘=’ causes them to be the only attributes that the files have.

   Chattr has different attributes namely – aAcCdDeijsStTu. Each letter applies a particular attributes
   to a file.
     * a – append only,
     * A – no atime updates,
     * c – compressed,
     * C – no copy on write,
     * d – no dump,
     * D – synchronous directory updates,
     * e – extent format,
     * i – immutable,
     * j – data journalling,
     * P – project hierarchy,
     * s – secure deletion,
     * S – synchronous updates,
     * t – no tail-merging,
     * T – top of directory hierarchy,
     * u – undeletable.

   In this tutorial, we are going to discuss the usage of two attributes, namely a, i which are used to
   prevent the deletion of files and folders. That’s what our topic today, isn’t? Indeed!

Prevent files from accidental deletion

   Let me create a file called file.txt in my current directory.
$ touch file.txt

   Now, I am going to apply “i” attribute which makes the file immutable. It means you can’t delete,
   modify the file, even if you’re the file owner and the root user.
$ sudo chattr +i file.txt

   You can check the file attributes using command:
$ lsattr file.txt

   Sample output:
----i---------e---- file.txt

   Now, try to remove the file either as a normal user or with sudo privileges.
$ rm file.txt

   Sample output:
rm: cannot remove 'file.txt': Operation not permitted

   Let me try with sudo command:
$ sudo rm file.txt

   Sample output:
rm: cannot remove 'file.txt': Operation not permitted

   Let us try to append some contents in the text file.
$ echo 'Hello World!' >> file.txt

   Sample output:
bash: file.txt: Operation not permitted

   Try with sudo privilege:
$ sudo echo 'Hello World!' >> file.txt

   Sample output:
bash: file.txt: Operation not permitted

   As you noticed in the above outputs, We can’t delete or modify the file even as root user or the file
   owner.

   To revoke attributes, just use “-i” switch as shown below.
$ sudo chattr -i file.txt

   Now, the immutable attribute has been removed. You can now delete or modify the file.
$ rm file.txt

   Similarly, you can restrict the directories from accidental deletion or modification as described in
   the next section.
   [INS: :INS]

Prevent folders from accidental deletion and modification

   Create a directory called dir1 and a file called file.txt inside this directory.
$ mkdir dir1 && touch dir1/file.txt

   Now, make this directory and its contents (file.txt) immutable using command:
$ sudo chattr -R +i dir1

   Where,
     * -R – will make the dir1 and its contents immutable recursively.
     * +i – makes the directory immutable.

   Now, try to delete the directory either as normal user or using sudo user.
$ rm -fr dir1
$ sudo rm -fr dir1

   You will get the following output:
rm: cannot remove 'dir1/file.txt': Operation not permitted

   Try to append some contents in the file using “echo” command. Did you make it? Of course, you
   couldn’t!

   To revoke the attributes back, run:
$ sudo chattr -R -i dir1

   Now, you can delete or modify the contents of this directory as usual.

Prevent files and folders from accidental deletion, but allow append operation

   We know now how to prevent files and folders from accidental deletion and modification. Next, we are
   going to prevent files and folders from deletion, but allow the file for writing in append mode only.
   That means you can’t edit, modify the existing data in the file, rename the file, and delete the
   file. You can only open the file for writing in append mode.

   To set append mode attribution to a file/directory, we do the following.

   For files:
$ sudo chattr +a file.txt

   For directories:
$ sudo chattr -R +a dir1

   A file/folder with the ‘a’ attribute set can only be open in append mode for writing.

   Add some contents to the file(s) to check whether it works or not.
$ echo 'Hello World!' >> file.txt
$ echo 'Hello World!' >> dir1/file.txt

   Check the file contents using cat command:
$ cat file.txt
$ cat dir1/file.txt

   Sample output:
Hello World!

   You will see that you can now be able to append the contents. It means we can modify the files and
   folders.

   Let us try to delete the file or folder now.
$ rm file.txt

   Output:
rm: cannot remove 'file.txt': Operation not permitted

   Let us try to delete the folder:
$ rm -fr dir1/

   Sample output:
rm: cannot remove 'dir1/file.txt': Operation not permitted

   To remove the attributes, run the following commands:

   For files:
$ sudo chattr -R -a file.txt

   For directories:
$ sudo chattr -R -a dir1/

   Now, you can delete or modify the files and folders as usual.

   For more details, refer the man pages.
man chattr

Wrapping up

   Data protection is one of the main job of a System administrator. There are numerous free and
   commercial data protection software are available on the market. Luckily, we’ve got this built-in
   tool that helps us to protect the data from accidental deletion or modification. Chattr can be used
   as additional tool to protect the important system files and data in your Linux system.

---
chattr(1) - Linux man page

Name
   chattr - change file attributes on a Linux file system

Synopsis
   chattr [ -RVf ] [ -v version ] [ mode ] files...

Description
   chattr changes the file attributes on a Linux file system.

   The format of a symbolic mode is +-=[acdeijstuADST].

   The operator '+' causes the selected attributes to be added to the
   existing attributes of the files; '-' causes them to be removed; and
   '=' causes them to be the only attributes that the files have.

   The letters 'acdeijstuADST' select the new attributes for the files:
   append only (a), compressed (c), no dump (d), extent format (e),
   immutable (i), data journalling (j), secure deletion (s), no
   tail-merging (t), undeletable (u), no atime updates (A), synchronous
   directory updates (D), synchronous updates (S), and top of directory
   hierarchy (T).

   The following attributes are read-only, and may be listed by
   [2]lsattr(1) but not modified by chattr: huge file (h), compression
   error (E), indexed directory (I), compression raw access (X), and
   compressed dirty file (Z).

Options

   -R
          Recursively change attributes of directories and their contents.
   -V
          Be verbose with chattr's output and print the program version.
   -f
          Suppress most error messages.
   -v version
          Set the file's version/generation number.

Attributes

   When a file with the 'A' attribute set is accessed, its atime record is
   not modified. This avoids a certain amount of disk I/O for laptop
   systems.

   A file with the 'a' attribute set can only be open in append mode for
   writing. Only the superuser or a process possessing the
   CAP_LINUX_IMMUTABLE capability can set or clear this attribute.

   A file with the 'c' attribute set is automatically compressed on the
   disk by the kernel. A read from this file returns uncompressed data. A
   write to this file compresses data before storing them on the disk.
   Note: please make sure to read the bugs and limitations section at the
   end of this document.

   When a directory with the 'D' attribute set is modified, the changes
   are written synchronously on the disk; this is equivalent to the
   'dirsync' mount option applied to a subset of the files.

   A file with the 'd' attribute set is not candidate for backup when the
   dump(8) program is run.

   The 'E' attribute is used by the experimental compression patches to
   indicate that a compressed file has a compression error. It may not be
   set or reset using chattr(1), although it can be displayed by
   lsattr(1).

   The 'e' attribute indicates that the file is using extents for mapping
   the blocks on disk. It may not be removed using chattr(1).

   The 'I' attribute is used by the htree code to indicate that a
   directory is being indexed using hashed trees. It may not be set or
   reset using chattr(1), although it can be displayed by [5]lsattr(1).

   The 'h' attribute indicates the file is storing its blocks in units of
   the filesystem blocksize instead of in units of sectors, and means that
   the file is (or at one time was) larger than 2TB. It may not be set or
   reset using chattr(1), although it can be displayed by [6]lsattr(1).

   A file with the 'i' attribute cannot be modified: it cannot be deleted
   or renamed, no link can be created to this file and no data can be
   written to the file. Only the superuser or a process possessing the
   CAP_LINUX_IMMUTABLE capability can set or clear this attribute.

   A file with the 'j' attribute has all of its data written to the ext3
   journal before being written to the file itself, if the filesystem is
   mounted with the "data=ordered" or "data=writeback" options. When the
   filesystem is mounted with the "data=journal" option all file data is
   already journalled and this attribute has no effect. Only the superuser
   or a process possessing the CAP_SYS_RESOURCE capability can set or
   clear this attribute.

   When a file with the 's' attribute set is deleted, its blocks are
   zeroed and written back to the disk. Note: please make sure to read the
   bugs and limitations section at the end of this document.

   When a file with the 'S' attribute set is modified, the changes are
   written synchronously on the disk; this is equivalent to the 'sync'
   mount option applied to a subset of the files.

   A directory with the 'T' attribute will be deemed to be the top of
   directory hierarchies for the purposes of the Orlov block allocator.
   This is a hint to the block allocator used by ext3 and ext4 that the
   subdirectories under this directory are not related, and thus should be
   spread apart for allocation purposes. For example it is a very good
   idea to set the 'T' attribute on the /home directory, so that
   /home/john and /home/mary are placed into separate block groups. For
   directories where this attribute is not set, the Orlov block allocator
   will try to group subdirectories closer together where possible.

   A file with the 't' attribute will not have a partial block fragment at
   the end of the file merged with other files (for those filesystems
   which support tail-merging). This is necessary for applications such as
   LILO which read the filesystem directly, and which don't understand
   tail-merged files. Note: As of this writing, the ext2 or ext3
   filesystems do not (yet, except in very experimental patches) support
   tail-merging.

   When a file with the 'u' attribute set is deleted, its contents are
   saved. This allows the user to ask for its undeletion. Note: please
   make sure to read the bugs and limitations section at the end of this
   document.

   The 'X' attribute is used by the experimental compression patches to
   indicate that a raw contents of a compressed file can be accessed
   directly. It currently may not be set or reset using chattr(1),
   although it can be displayed by lsattr(1).

   The 'Z' attribute is used by the experimental compression patches to
   indicate a compressed file is dirty. It may not be set or reset using
   chattr(1), although it can be displayed by lsattr(1).

Author
   chattr was written by Remy Card <[9]Remy.Card@linux.org>. It is
   currently being maintained by Theodore Ts'o <[10]tytso@alum.mit.edu>.

Bugs and Limitations
   The 'c', 's', and 'u' attributes are not honored by the ext2 and ext3
   filesystems as implemented in the current mainline Linux kernels. These
   attributes may be implemented in future versions of the ext2 and ext3
   filesystems.

   The 'j' option is only useful if the filesystem is mounted as ext3.

   The 'D' option is only useful on Linux kernel 2.5.19 and later.

Availability
   chattr is part of the e2fsprogs package and is available from
   http://e2fsprogs.sourceforge.net.
