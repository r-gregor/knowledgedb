filename: group-management-from-cli-20250513.txt
https://thenewstack.io/linux-group-management-from-the-command-line/

Linux: Group Management From the Command Line
May 11th, 2025

  Creat a group, add users to the group, create a folder that needs to be accessible by the group, and
  give that folder the proper permissions so that everyone in the group can access its contents.

  Group management is an important task on Linux because it makes managing users considerably
  easier.

  Although you might be thinking that group management is more for a server environment, what if
  you have a Linux desktop machine that multiple people use? For instance, your family could have a
  single Linux computer, and everyone in the house has a login.

  What if you need to make a particular folder on that machine available to everyone who logs in? Maybe
  that folder contains various family-related documents or even how-tos for different household chores?

  Don't worry, this isn't nearly as hard as you might think. Or maybe you have a small business with a single
  computer? There are several similar use cases, each of which could require (or benefit from) group
  management. But how do you manage groups on Linux? I'm going to show you how it's done from the command
  line interface.

  What I'm going to do is walk you through the process of creating a group, adding users to the group,
  creating a folder that needs to be accessible by the group and giving that folder the proper
  permissions so that everyone in the group can access the contents of the folder.

  Believe it or not, this is a very common scenario, and you'll be glad you know how to make it happen. Are
  you ready? Let's get our group on.

What You'll Need
  The only things you'll need for this are a running instance of Linux and a user with sudo privileges.
  The distribution used doesn't matter, because all the commands you'll find here are available on just
  about every flavor of Linux on the market.

Creating a New Group
  The first thing we'll do is create a group. Let's call that group "Family." (You can name it whatever
   you like.) To create this group, open your terminal app and issue the command:
$> sudo groupadd family

   Remember, you don't have to name your group "Family." If you want a different name, simply swap it
   out in the command.

   You can then verify the group was created with the command:
$> grep family /etc/group

   You should see something like this in the output:
family:x:1004:

   The 1004 is the Group ID (GID).

Adding Users to the Group
   Next, we'll add some users to the group. Let's say you have the following family members who use the
   computer and need access to the folder in question:
     * jit
     * gilly
     * aleister
     * elsa

   To add the users, one at a time, to the family group, we use the usermod command like so:
$> sudo usermod -aG family jit
$> sudo usermod -aG family gilly
$> sudo usermod -aG family aleister
$> sudo usermod -aG family elsa

   You could add them all at once using a for loop like so:
$> for user in jit gilly aleister elsa; do sudo usermod -aG family "$user"; done

Creating a Shared Folder
   Next, we'll create a shared folder that everyone in the group will be able to access. Using sudo,
   let's create the folder in /srv/ with the command:
$> sudo mkdir /srv/family

   Next, we have to change the ownership of the new folder, so the family group has access. Do that with
   the command:
$> sudo chown -R :family /srv/family

  We use the -R option to ensure any sub folders within family will also have the same group ownership.
  Finally, we have to change the permissions of the folder, such that everyone in the group can read and
  write to any file within family. This is done with the command:
$> sudo chmod -R 770 /srv/family

Testing the New Setup
   Log in as one of the member of the family group. First, make sure you can view the folder with:
$> ls /srv/

   You should see family listed in the output.

   Next, let's test to make sure we can add files to the folder with:
$> touch /srv/family/test

   You should receive nothing in the output, which means the file was created. Verify it with:
$> ls /srv/family

   Let's verify that we can modify the file with:

   View the contents of that file with:
$> less /srv/family/test

   You should see Hello, New Stack! at the top of the file.

Removing a User From a Group
   Let's say one of those family members moves out of the house, and they no longer need access to the
   family folder. Instead of changing permissions to the folder, you have to use the gpasswd command to
   remove the user from the group. That command looks like this:
$> sudo gpasswd -d USER family

   Where USER is the username to be removed.

Deleting a Group
   If you have a group that is no longer in use, you can always delete it with the command:
$> sudo groupdel GROUP

   Where GROUP is the name of the group to be deleted. It's important, however, to understand that you
   cannot delete the primary group for a user. For example, when you create the user jit, Linux also
   creates a corresponding group called jit. You could remove jit from the "Family" group but you cannot
   remove jit from the jit group.

   And that's the basics of group management in Linux. Although you might not have a need for this just
   yet, at some point in your Linux life, you will.


---

