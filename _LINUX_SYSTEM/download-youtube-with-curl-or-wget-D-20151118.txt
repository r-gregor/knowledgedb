filename: download-youtube-with-curl-or-wget_D_RWRP.txt
---
http://www.commandlinefu.com/commands/view/7718/download-youtube-video-with-wget

Download Youtube video with wget!
Terminal - Download Youtube video with wget!
wget http://www.youtube.com/watch?v=dQw4w9WgXcQ -qO- | sed -n
"/fmt_url_map/{s/[\'\"\|]/\n/g;p}" | sed -n '/^fmt_url_map/,/videoplayback/p'
| sed -e :a -e '$q;N;5,$D;ba' | tr -d '\n' | sed -e 's/\(.*\),\(.\)\{1,3\}/\1/'
| wget -i - -O surprise.flv
2011-01-25 04:19:06
User: Eno
Functions: sed tr wget

Download Youtube video with wget!

Nothing special required, just wget, sed & tr!
Show sample output | Add to favourites | Report as malicious
Alternatives

There are 36 alternatives - vote for the best!
Terminal - Alternatives
Know a better way?

If you can do better, submit your command here.
What others think

oops! it's not working for me. I'm getting this error:

sed: 1: "/fmt_url_map/{s/[\'"\|] ...": extra characters at the end of p command

No URLs found in -.
Comment by kaartz 122 weeks and 6 days ago

I'm having the same problem with kaartz... I'm running OS X with the wget
being ported to OS X.
Comment by TCorbin 122 weeks and 1 day ago

Weird, it's working fine on GNU/Linux, I'll check that tomorrow on OSX ;)
Comment by Eno 122 weeks ago

the command works fine for me on Cygwin. for OS X, the sed implementation
does support replacing with "\n" and hence the error. i tinkered with the
command a bit and made it work on OS X using awk instead.
wget "http://www.youtube.com/watch?v=dQw4w9WgXcQ" -qO-
| awk '/fmt_url_map/{gsub(/[\|\"]/,"\n");print}' | sed -n
"/^fmt_url_map/,/videoplayback/p" | sed -e :a -e '$q;N;2,$D;ba' | tr -d '\n'
| sed -e "s/\(.*\),\(.\)\{1,3\}/\1/;s/\\\//g" | wget -i - -O surprise.flv
Comment by ixseven 121 weeks and 3 days ago

Hi, With Firefox plugin, DownloadHelper you can get the real URL. So when
you have the real link you can do :
screen wget -O fileName.flv
"http://v21.lscache7.c.youtube.com/videoplayback?sparams=id%2Cexpire%2Cip%2Cipbits%2Citag%2Calgorithm%2Cburst%2Cfactor%2Coc%3AU0dYTVZST19FSkNNOF9OTFND&fexp=901316&algorithm=throttle-factor&itag=34&ipbits=0&burst=40&sver=3&signature=72BE5F2A3EDB50B05354CA542AE807B50C9F2CE1.87EA6771ABAB2B13E867C17E7F8894F77209DD68&expire=1298671200&key=yt1&ip=0.0.0.0&factor=1.25&id=5415eea9d2ca1a35"
Comment by ilanehazout 118 weeks and 5 days ago

Now it's not working since unicode symbol substitution. to get it work you
should add "sed 's/\\u0026/\&/g' " at first. So that the result command is:
wget http://www.youtube.com/watch?v=dQw4w9WgXcQ -qO- | sed
's/\\u0026/\&/g' | sed -n "/fmt_url_map/{s/[\'\"\|]/\n/g;p}" | sed -n
'/^fmt_url_map/,/videoplayback/p' | sed -e :a -e '$q;N;5,$D;ba' | tr -d '\n'
| sed -e 's/\(.*\),\(.\)\{1,3\}/\1/' | wget -i - -O surprise.flv
Comment by aikikode 114 weeks and 6 days ago

Hi all

I have tried all the command to DL a youtube vid from a playlist

Here come what work for me:

mplayer -dumpstream -dumpfile "$i.flv" $(curl -s "

Just made a loop to take all the vid from a playlist but the only problem
is the time that it take because it really read the vid and put it in a file :x

Hope it will work for you guys
Comment by BlckG33k 103 weeks and 4 days ago

I tried it in RHEL 6 and got the error.

Check this.

[chankey@localhost ~]$ wget http://www.youtube.com/watch?v=Ss_MZMJ28_Y
-qO- | sed -n "/fmt_url_map/{s/[\'\"\|]/\n/g;p}" | sed -n
'/^fmt_url_map/,/videoplayback/p' | sed -e :a -e '$q;N;5,$D;ba' | tr -d '\n'
| sed -e 's/\(.*\),\(.\)\{1,3\}/\1/' | wget -i - -O surprise.flv

--2011-07-19 10:54:25--
http://o-o.preferred.nrt04s02.v12.lscache7.c.youtube.com/videoplayback?sparams=id%2Cexpire%2Cip%2Cipbits%2Citag%2Cratebypass

Resolving o-o.preferred.nrt04s02.v12.lscache7.c.youtube.com... 74.125.171.172,
2404:6800:4004:3::c

Connecting to
o-o.preferred.nrt04s02.v12.lscache7.c.youtube.com|74.125.171.172|:80...
connected.

HTTP request sent, awaiting response... 400 Bad Request

2011-07-19 10:54:25 ERROR 400: Bad Request.
Comment by ChankeyPathak 98 weeks and 1 day ago

cool
Comment by ZhaoZijie 30 weeks and 1 day ago

---
http://go2linux.garron.me/wget-to-download-youtube-videos


Download Youtube videos with wget

Date: 2007-12-06 00:00:00 -0400

Update: 2010-04-06, you may also want to read get_flash_videos

Here there is an easy way to download Youtube videos using wget.

First thing we need is the video ID which we are going to get using also
wget together with grep.

First locate the page of the video you want to download, I will use for this
example one showing compizfusion in action.

wget -O /tmp/page.tmp http://www.youtube.com/watch?v=UHvAXLBMWGI

Then using cat and grep we will get the video ID

cat /tmp/page.tmp | grep video_id=

This will be the output

var fullscreenUrl =
'/watch_fullscreen?video_id=UHvAXLBMWGI&l=51&t=OEgsToPDskKBFLkte03dOnia39Rzd63j&sk=7Ayx8rGROMLJrkh6LkXj7AC&fs=1&title=CompizFusion';
var relatedVideoGridUrl =
'/related_ajax?video_id=UHvAXLBMWGI&view_type=G&watch3=1&search=compiz%20linux%20ubuntu';
var relatedVideoListUrl =
'/related_ajax?video_id=UHvAXLBMWGI&view_type=L&watch3=1&search=compiz%20linux%20ubuntu';

Check that you have more than one Video_id, but only the first one is the one
we want, check that the others says "relatedVideo", we do not want those ones.

Now download the video.

wget -O /tmp/video.flv
'http://www.youtube.com/get_video?video_id=UHvAXLBMWGI&l=51&t=OEgsToPDskKBFLkte03dOnia39Rzd63j&sk=7Ayx8rGROMLJrkh6LkXj7AC&fs=1&title=CompizFusion'

check out that I am sending the output to /tmp/video.flv you of course can
use any other file and directory you may want, after this you can play the
video with any player you usually use.

If you liked this article please share it.

---
http://linux.byexamples.com/archives/302/how-to-wget-flv-from-youtube/

To strip flv from youtube links, you have to complete two steps. Firstly
extract the encrypted string from a youtube link, next append to get_video.php
and download through wget.

The youtube links, that people distribute around will looks something
like below

http://www.youtube.com/watch?v=B6fnR--IDKc

Step one, download it and extract the encrypted strings using grep.

wget -O test http://www.youtube.com/watch?v=B6fnR--IDKc

-O is to force the output filename as specified. The case above, output
filename will be ‘test’.

To extract the encrypted string, use grep

grep "player2.swf" test

Updates! Due to the changes of youtube, the grep shown above was no longer
working, grep “fullscreen” instead, read the comment for more details.

The encrypted string will be in between player2.swf? and “

hl=en&video_id=B6fnR--IDKc&l=34&t=OEgsToPDskIlg4F-gKjbwl_pqIP6IPeI&soff=1&sk=V7GrH18hYLfT0sz5dm7GXgC

Step two, append the string to http://www.youtube.com/get_video.php? and
start download.

wget -O test.flv
"http://www.youtube.com/get_video.php?hl=en&video_id=B6fnR--IDKc&l=34&t=OEgsToPDskIlg4F-gKjbwl_pqIP6IPeI&soff=1&sk=V7GrH18hYLfT0sz5dm7GXgC"

Too much manual works?
You can write a bash script to ease your download, turn all manual steps into
one simple step. Let say the script is know as dltube.sh, you just need to
execute this:

dltube.sh http://www.youtube.com/watch?v=B6fnR--IDKc

You will get the output filename as the_title_of_the_youtube.flv.

There are some hints , in case you are interested on creating this bash script.

1. The title of the flv, you can grep it from ‘test’ (first output file from
youtube link shows above).

grep "id=\"video_title\"" test

The output will be

<h1 id="video_title">xvidcap screen capture on mplayer</h1>

2. You can extract the title from the grep string using cut.

grep "id=\"video_title\"" test | cut -d">" -f2 | cut -d"<" -f1

Check out command cut for usage examples.

Enjoy your bash scripting :D

---
https://calomel.org/youtube_wget.html

Youtube Downloader Wget Perl Script
download videos and even convert them to mp3 or ogg


Why use wget to download YouTube videos ?

    Normally, when you want to watch a Youtube video you have to use Adobe
    Flash in a browser like Firefox, Chrome (Chromium), Opera or Safari. Adobe
    Flash is incredibly inefficient, a huge security hole and notoriously
    buggy. Another issue is youtube's constant slow buffering speeds. It is
    frustrating if you are constantly waiting for the video to buffer in an
    interactive session.

    An alternative is to use a script to download your videos for viewing
    later. Using wget may or may not be faster then flash in the browser
    depending on the youtube mirror you connect to. So, the idea is to
    pre-download a bunch of videos and when you are ready to watch them,
    they play at the highest quality with no youtube buffer pausing at
    all. We like to watch videos using VLC which uses less CPU time then
    flash and can play videos at higher than 1x speeds. In fact, we watch
    almost all of our vids at 2x (use the + key on the keypad on the right).

    We also prefer a simpler scripted solution which does not rely on too
    many dependencies or proprietary code. For example, youtube-dl requires
    Python libraries and others require Javascript, Greesemonkey or even
    PHP to work in Firefox. Simple is better to audit and modify as needed.


    Latest Version: 0.33

        Rewrote the code to use perl's strict and taint security measures.
        Choose the file type and file extension like mp4, webm, avi or flv.
        Choose the resolution like 1080p, 720p, 640 standard resolution or
        even 144p (176x144) mobile.
        The script will now retry downloading the video if the wget download
        fails for any reason. You have the option to set how many retries
        you would like allow.
        For developers, we have added a DEBUG option to help those modifying
        the script or if you are trying to make you own youtube downloader.
        The script is compatible with native IPv6 clients connecting to
        either IPv4 or IPv6 youtube servers. This is true for native IPv6
        to IPv6 networks or even if you are using a IPv6 tunnel.



Advantages of a scripted solution

    AdBlock Plus and NoScript safe, No Adobe Flash needed: To download the
    Youtube video just cut and paste the URL from the browser's URL bar. You
    do not need to start the video or anything. In fact, if you have NoScript
    you do not even have to allow java script on the Youtube site. You just
    need the link and paste it after the script. Simple and easy.

    Unlimited download speed: There are no download rate limits with the URL
    we extract from the HTML page. The videos will download as fast as the
    Youtube cache server will send the data. The speed primarily depends
    on the popularity of the video; the most asked for videos are put on
    the highest bandwidth cache servers. Using a testing server on Linode
    (Xen VPS Hosting) we easily saw 24 megabytes per second downloads. The
    maximum upload and download limits on a Linode server is 45 megabytes
    per second. BTW, Linode gets a 10 out of 10 for overall quality in our
    opinion. On a side note, we have not found a reliable way of choosing the
    fastest mirror server. If your ISP has mirror servers they are normally
    slower then Google so we suggest finding their ips and blocking the
    ISP mirrors.

    No Advertisements: The script will _not_ download any ads or advertisements
    like what you would see if you used the browser to watch flash videos. The
    reason is the ads are not part of the video, but a flash overlay Youtube
    inserts. We do not do anything to remove the ads at all. When you see
    an ad on Youtube the video is actually paused and the advertisement is
    overlaid on top of the video window. When the ad finishes the overlay
    is removed and video is unpaused.



Getting Started

    The youtube download script is written in Perl and can be run on Linux,
    Mac OSX, OpenBSD, FreeBSD or any operating system supporting perl. Since
    we are using perl the UNIX shell you use, like bash, tcsh, csh or sh does
    not matter. There is only one dependency you need to have installed on
    your system; the system binary "wget" and it needs to be in your shell's
    default path. Wget is incredibly useful not only for this perl script,
    but for any scripting you may do on the future. BTW, the standard wget
    package will allow you to download videos using HTTP or HTTPS. To make
    it easy we included the following lines to install these packages using
    your OS's package manager.

    ## Ubuntu Linux
    apt-get install wget

    ## FreeBSD
    pkg_add -r wget   --OR--  pkg install wget

    ## OpenBSD
    pkg_add -i wget



    The Youtube Download Perl script

    To use the script, copy and paste the block of perl code from the following
    text box to a file. We are going to call the script youtube_wget.pl for
    this example, but you can name it anything you like. Remember to make
    the file executable too, "chmod 755 youtube_wget.pl".

    #!/usr/bin/perl -T

    use strict;
    use warnings;

    #
    ##  Calomel.org  ,:,  Download Youtube videos and music using wget
    ##    Script Name : youtube_wget_video.pl
    ##    Version     : 0.33
    ##    Valid from  : May 2013
    ##    URL Page    : https://calomel.org/youtube_wget.html
    ##    OS Support  : Linux, Mac OSX, OpenBSD, FreeBSD or any system
    with perl
    #                `:`
    ## Two arguments
    ##    $1 Youtube URL from the browser
    ##    $2 prefix to the file name of the video (optional)
    #

    ############  options  ##########################################

    # Option: what file type do you want to download? The string is used
    to search
    # in the youtube URL so you can choose mp4, webm, avi or flv.  mp4 seems to
    # work on the most players like android, ipod, ipad, iphones, vlc and
    mplayer.
    my $fileType = "mp4";

    # Option: what visual resolution or quality do you want to download? List
    # multiple values just in case the highest quality video is not available,
    the
    # script will look for the next resolution. You can choose "highres" for 4k
    # (4096x2304), "hd1080" for 1080p, "hd720" for 720p, "itag=18" which means
    # standard definition 640x380 and "itag=17" which is mobile resolution 144p
    # (176x144). The script will always prefer to download the highest
    resolution
    # video format from the list if available. Do not download highres
    4k content
    # unless you have a 4k tv. That would just be silly.
    my $resolution = "hd1080,hd720,itag=18";

    # Option: How many times should the script retry the download if wget
    fails for
    # any reason? Do not make this too high as a reoccurring error will
    just hit
    # youtube over and over again. A value of 3 to 10 works well.
    my $retryTimes = 5;

    # Option: do you want the resolution of the video in the file name? zero(0)
    is
    # no and one(1) is yes. This option simply puts "_hd1080.mp4" or similar
    at the
    # end of the file name.
    my $resolutionFilename = 0;

    # Option: turn on DEBUG mode. Use this to reverse engineering this code
    if you are
    # making changes or you are building your own youtube download script.
    my $DEBUG=0;

    #################################################################

    ## clear the environment and set our path
    $ENV{ENV} ="";
    $ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";

    ## initialize retry loop and resolution variables
    my $prefix = "";
    my $retry = 1;
    my $retryCounter = 0;
    my $resFile = "unknown";
    my $user_url = "";
    my $user_prefix = "";

    ## collect the URL from the command line argument and untaint the input
    chomp($user_url = $ARGV[0]);
    my $url = "$1" if ($user_url =~ m/^([a-zA-Z0-9\-\&\?\=\:\.\/\_]+)$/
    or die "\nError: Illegal characters in YouTube URL\n\n" );

    ## declare the user defined file name prefix if specified and untaint
    the input
    if (defined($ARGV[1])) {
       chomp($user_prefix = $ARGV[1]);
       $prefix = "$1" if ($user_prefix =~ m/^([a-zA-Z0-9\_\-\.\ ]+)$/ or die
       "\nError: Illegal characters in filename prefix\n\n" );
    }

    ## retry getting the video if the script fails for any reason
    while ( $retry != 0 && $retryCounter < $retryTimes ) {

    ## download the html code from the youtube page suppling the page title
    and the
    ## video url. The page title will be used for the local video file name
    and the
    ## url will be sanitized and passed to wget for the download.
    my $html = `wget -Ncq -e convert-links=off --keep-session-cookies
    --save-cookies /dev/null --no-check-certificate "$url" -O-`  or die
    "\nThere was a problem downloading the HTML file or the video is not
    open to the public.\n\n";

    ## format the title of the page to use as the file name
    my ($title) = $html =~ m/<title>(.+)<\/title>/si;
    $title =~ s/[^\w\d]+/_/g or die "\nError: title of the HTML page not
    found. Check the URL.\n\n";
    $title =~ s/_youtube//ig;
    $title =~ s/^_//ig;
    $title = lc ($title);
    $title =~ s/_amp//ig;

    ## collect the URL of the video from the HTML page
    my ($download) = $html =~ /"url_encoded_fmt_stream_map"(.*)/ig;

    # Print all of the separated strings in the HTML page
    print "\n$download\n\n" if ($DEBUG == 1);

    # This is where we look through the HTML code and select the file type and
    # video quality.
    my @urls = split(',', $download);
    OUTERLOOP:
    foreach my $val (@urls) {
    #   print "\n$val\n\n";

        if ( $val =~ /$fileType/ ) {
           my @res = split(',', $resolution);
           foreach my $ress (@res) {
             if ( $val =~ /$ress/ ) {
             print "\n\nGOOD\n\n" if ($DEBUG == 1);
             print "$val\n" if ($DEBUG == 1);
             $resFile = $ress;
             $resFile = "sd640" if ( $ress =~ /itag=18/ );
             $resFile = "mb144" if ( $ress =~ /itag=17/ );
             $download = $val;
             last OUTERLOOP;
             }
           }
        }
    }

    ## clean up the url by translating unicode and removing unwanted strings
    $download =~ s/\:\ \"//;
    $download =~ s/%3A/:/g;
    $download =~ s/%2F/\//g;
    $download =~ s/%3F/\?/g;
    $download =~ s/%3D/\=/g;
    $download =~ s/%252C/%2C/g;
    $download =~ s/%26/\&/g;
    $download =~ s/sig=/signature=/g;
    $download =~ s/\\u0026/\&/g;
    $download =~ s/(type=[^&]+)//g;
    $download =~ s/(fallback_host=[^&]+)//g;
    $download =~ s/(quality=[^&]+)//g;

    ## collect the url and sig since the html page randomizes their order
    my ($signature) = $download =~ /(signature=[^&]+)/;
    my ($youtubeurl) = $download =~ /(http?:.+)/;
    $youtubeurl =~ s/&signature.+$//;

    ## combine the url and sig in order
    $download = "$youtubeurl\&$signature";

    ## a bit more cleanup as youtube
    $download =~ s/&+/&/g;
    $download =~ s/&itag=\d+&signature=/&signature=/g;

    ## combine file variables into the full file name
    my $filename = "unknown";
    if ( $resolutionFilename == 1 ) {
       $filename = "$prefix$title\_$resFile.$fileType";
      } else {
       $filename = "$prefix$title.$fileType";
    }

    ## Process check: Are we currently downloading this exact same video? Two
    of the
    ## same wget processes will overwrite themselves and corrupt the video.
    my $running = `ps auwww | grep [w]get | grep -c "$filename"`;
    print "\nNumber of the same wgets running: $running\n" if ($DEBUG == 1);
    if ($running >= 1)
      {
       print "\nAlready downloading the same filename, exiting: $filename\n";
       exit 0;
      };

    ## Print the long, sanitized youtube url for testing and debugging
    print "\n$download\n" if ($DEBUG == 1);

    ## print the file name of the video collected from the web page title
    for us to see on the cli
    print "\n Download: $filename\n\n";

    ## Background the script. Use "ps" if you need to look for the process
    ## running or use "ls -al" to look at the file size and date.
    fork and exit;

    ## Download the video
    system("wget", "-Ncq", "-e", "convert-links=off", "--load-cookies",
    "/dev/null", "--tries=10", "--timeout=20", "--no-check-certificate",
    "$download", "-O", "$filename");

    ## Print the error code of wget
    print "     error code: $?\n" if ($DEBUG == 1);

    ## Exit Status: Check if the file exists and we received the correct
    error code
    ## from system call. If the download experienced any problems the script
    will run again and try
    ## continue the download till the file is downloaded.

    if( $? == 0 && -e "$filename" && ! -z "$filename" )
       {
          print " Finished: $filename\n\n" if ($DEBUG == 1);
          $retry = 0;
       }
     else
       {
         print STDERR "\n FAILED: $filename\n\n" if ($DEBUG == 1);
        $retry = 1;
        $retryCounter++;
        sleep $retryCounter;
       }
    }

    #### EOF #####



How do I use the script ?

    Once you have the script setup you just need to find a Youtube video. We
    chose a link from Tobygames showing a funny moment in Fallout 3:
    New Vegas which is 1 minute and 10 seconds long. Execute the script
    with the youtube URL copy and pasted from Firefox's URL bar. Make note
    you can add one more argument to the end of the command line to add a
    prefix to the file name. Here is an example of both options; notice the
    change in files names as the second example has "toby_" as the file name
    prefix. Also note some of the URLS through youtube have ampersands "&"
    in them. For these types of URL's just use double quotes around the url
    so your shell passes the full string into the script.

    ## Example 1: Here we just pass the youtube URL
    #
    user@machine$ ./youtube_wget.pl http://www.youtube.com/watch?v=ejkm5uGoxs4

         Download: radscorpion.mp4


    ## Example 2: Here we pass the Youtube URL and the file name prefix "toby_"
    #
    user@machine$ ./youtube_wget.pl http://www.youtube.com/watch?v=ejkm5uGoxs4
    toby_

         Download: toby_radscorpion.mp4

    The video will download in the background and save to your current
    directory. You can play it with your favorite video player, we prefer
    VLC for example.



Things to keep in mind...

    File name is the same as the name of the web page: Notice the file name
    is the same as the title of the Youtube web page. We have also scrubbed
    the title to take out all special characters and reduce all letters to
    lower case. This makes it easier read and to run on the command line.

    Only the highest video quality: The script works by reducing the YouTube
    link's HTML code to just the URL to download the video. We have setup
    the script to only download the highest quality video available. The
    qualities will be 1080p, 720p or 480p respectively.

    Save Location: The video will be saved in your current directory.

    Script methodology: The wget line will run in the background. You can start
    as many of these downloads as you want. We have started as many as a dozen
    simultaneous downloads without issue. The script will finish silently;
    meaning when the download is finished you will not get any notification.

    Wget process state: You can check if the download is running by looking
    at the process list (ps) and grep'ing for wget. Something like, ps -aux |
    grep wget will work. At this point there is no way to tell how fast the
    download is going. What you can do is look at the file size change using
    ls -la and estimate from there. You can start watching the video file
    right away too. The file is downloaded serially, so as soon as the file
    starts downloading you should be able to start VLC if want to watch the
    video right away.

    Video file type: The video will download in the file type you specify. mp4
    seems to be the most compatible type but WebM which is also called
    VP8 and AVI are available. WebM is a digital multimedia container file
    format promoted by the open-source WebM Project headed by Google. It
    comprises a subset of the Matroska multimedia container format. If you
    current media player does not support webm then you need a codec for your
    OS. Just search on Google for "webm codec" and you should get pointed in
    the right direction. Note, you can play this format with the VLC media
    player which is available on all OS's. VLC is a free and open source
    cross-platform multimedia player and framework that plays most multimedia
    files as well as DVD, Audio CD, VCD, and various streaming protocols. VLC
    can also play the videos at greater than 1x speed by hitting the plus
    "+" key on the keypad. When playing videos at anything faster than 1x
    the sound will be automatically pitch corrected. For example, we like
    to watch Quill18, Day9 and Sacriel42 videos at 2x.

    Always use the latest script version: Youtube changes the format of
    their HTML pages every once in a while which consequently breaks download
    scripts like what we have here. The average amount of time between HTML
    format changes is three(3) months. If you find this script no longer
    works make sure to check back on this page for any updates. We will
    do our best to keep this command line option working since we use this
    script at least once a day. Make note, at the top of the script we have
    the version number and date the script is good from. We will also post on
    the RSS feed (link at the top of the page) when a new version is available.



How do I make an audio mp3 or ogg from a youtube video ?

    At some point you will want to save off the sound from a video. A
    good case is downloading an instructional video and listening to it on
    your music player like a Sansa Clip, iPad, iPhone or iPod. We like to
    download class videos from the Massachusetts Institute of Technology
    (MIT) and listen to them in the car.

    You can use the above download script to get a video and convert the
    video's soundtrack to MP3 (or OGG or any other) format using avconv. You
    will need to install avconv in order to extract the audio. For Ubuntu use
    "apt-get install libav-tools". OpenBSD "pkg_add -i ffmpeg" and FreeBSD use
    "pkg_add -r ffmpeg" instead if avconv is not available as a package. For
    Mac OSX you may want to look at ffmpegX.

    ## Convert the audio from a Youtube video to mp3 or ogg, audio only.

    ## download the video. (Same link to Tobygames as above)
    user@machine$ ./youtube_wget.pl https://www.youtube.com/watch?v=ejkm5uGoxs4
      Downloading:  radscorpion.flv

    ## Convert video to mp3, audio only
    user@machine$ avconv -i radscorpion.flv -vn -ab 128 toby_audio.mp3

    ## Convert video to ogg, audio only
    user@machine$ avconv -i radscorpion.flv -vn -ab 128 toby_audio.ogg



Questions?

How can I download Youtube Playlists ?

    We suggest using the perl script, YTPlaylistFetcher by Kai. Simply download
    the script and make it executable. Then run the script with "-f url"
    followed by the youtube playlist URL. The script will collect all of
    the playlist urls in the text file "url". You can then use our download
    script in a while loop to download all the videos. Works perfectly.

    # collect the urls from the youtube playlist. For example, SSoHPKC's well
    # done walkthrough of Fallout New Vegas consisting of 116 videos.
    ./ytplaylistfetcher -f url
    "https://www.youtube.com/playlist?list=PL59360CCC81082296"

    # now download the videos with our script including a 30 second pause
    between
    # requests to reduce load on youtube's servers as well as our local I/O.
    while read input; do ./youtube_wget.pl $input;sleep 30; done < url



How about an Android device app ?

    Yes, if you have an Android phone or tablet then check out the Android
    App - YouTube Downloader . You can even choose the format of the video
    from mp4, to avi to webm! Note: the app is not in the Google store yet,
    but you can download it directly from the sourceforge link we provided.

Is there a GUI or "clickable" download tool I can use ?

    The best Firefox add-on we have found is called Flash Video Downloader -
    Youtube Downloader by Pavel Shcherbakov . It is incredibly easy to use
    and offers multiple download formats and a choice of low, medium, high
    or HD quality. We use this add on all the time when it is easier to use
    Firefox then our perl script.

I have a patch or the script is broke

    You are welcome to mail us. Please make sure you look at any errors the
    script outputs to see if you can see the cause of the error. The contact
    link is at the bottom of this page.

    ---
    http://www.marksanborn.net/howto/using-wget-to-download-youtube-videos/


Using Wget to Download Youtube Videos

May 27th, 2008

Today I am going to show you a neat way of downloading Youtube videos using
wget. Most Linux distros will come with wget. If you don’t have it, check
with your distro for instructions on how to install it. Windows users can
get wget here.

First locate the url of the video you want to download.

Hmmm… Here is a good one:

http://youtube.com/watch?v=eBGIQ7ZuuiU

Then open up your terminal and type:

wget -O deleteMeLater.tmp http://www.youtube.com/watch?v=eBGIQ7ZuuiU

This command will quickly download the page’s html.

Since Youtube has other flash objects and related videos we need to find
the one we want. Fortunately Youtube uses the same layout for all their videos.

cat deleteMeLater.tmp | grep fullscreenUrl

This gives me the url I need for the video:

var fullscreenUrl =
'/watch_fullscreen?fs=1&BASE_YT_URL=http%3A%2F%2Fyoutube.com%2F&vq=None&video_id=eBGIQ7ZuuiU&l=210&sk=QHSGy-6-eiJ6h5qtrj1kR2OJanvL6tLlC&fmt_map=&t=OEgsToPDskIjlCX_1shTRBRDv2UQzVb-&hl=en&plid=AAROOIUyvpMFnjvzAAAAoARsYAg&tk=6J3d54cPnMJP7mUN2BtMkd2OmbgxTvB_GPcrV3ckGUbzd7KVMiH1kA%3D%3D&title=Rick
Roll';

We are mostly interested in the video_id= portion of the URL. Finally,
to download the video we can use:

wget -O rickroll.flv
'http://www.youtube.com/get_video?video_id=eBGIQ7ZuuiU&l=210&sk=QHSGy-6-eiJ6h5qtrj1kR2OJanvL6tLlC&fmt_map=&t=OEgsToPDskIjlCX_1shTRBRDv2UQzVb-&hl=en&plid=AAROOIUyvpMFnjvzAAAAoARsYAg&tk=6J3d54cPnMJP7mUN2BtMkd2OmbgxTvB_GPcrV3ckGUbzd7KVMiH1kA%3D%3D&title=Rick
Roll'

You can change the file name rickroll.flv to anythingYouWant.flv. Wget will
save the .flv (flash video) in the current directory.

Posted by Mark Sanborn May 27th, 2008 howto

---
https://gist.github.com/turicas/1131175

youtube-download-merge.sh
Shell

#!/bin/bash
###############################################################################
# This script downloads a lot of videos from YouTube and merge them into a #
# single .FLV file using mencoder. #
# #
# Requires Python, wget|curl and mencoder #
# Python and wget actually are installed on many GNU/Linux distributions and #
# Mac OS (sorry, Windows' users) #
# To install mencoder in Ubuntu/Debian, just execute as root: #
# aptitude install mencoder #
# #
# License: GPLv2 #
# #
# Resources: #
# http://www.github.com/rg3/youtube-dl #
# http://www.mplayerhq.hu/DOCS/HTML/en/mencoder.html #
# #
# Written by Álvaro Justen aka Turicas #
# Contact me: alvarojusten [no-spam_AT_] gmail [_DOT_no-spam] com #
# http://github.com/turicas #
# http://twitter.com/turicas #
###############################################################################

echodate() {
echo [$(date +"%Y-%m-%d %H:%m:%S")] $@
}

OUTPUT_FILENAME="vinicius-teles_2012-o-ano-em-que-a-terra-parou-porque-o-software-travou.flv"
VIDEO_CODES="cwXiF3EH-Tk BUqsqT9WKUI FS3wQ0YGzrw ODl7D2FyZNE aIge6vbEViE
1AAhf00ymEY U9-qFpvQ0tQ"
YOUTUBE_DL_URL="https://raw.github.com/rg3/youtube-dl/33d507f1fe828b186dec9b61ff4fc6b5fdcf42b2/youtube-dl"

echodate 'Downloading youtube-dl...'

if [ ! -z "$(which wget)" ]; then
wget -c -t 0 "$YOUTUBE_DL_URL" -O youtube-dl
elif [ ! -z "$(which curl)" ]; then
curl "$YOUTUBE_DL_URL" > youtube-dl
else
echodate "You need either wget or curl to download youtube-dl. Exiting..."
exit 1
fi
chmod +x youtube-dl

video_codes_flv=""
total_videos=0
for video_code in $VIDEO_CODES; do
let total_videos="$total_videos + 1"
video_codes_flv="$video_codes_flv $video_code.flv"
done

echodate 'Starting video downloads...'
i=0
for video_code in $VIDEO_CODES; do
let i="$i + 1"
echodate "Downloading video $i/$total_videos..."
./youtube-dl "http://www.youtube.com/watch?v=$video_code"
done

echodate "Merging videos to '$OUTPUT_FILENAME'..."
merge_videos="mencoder -oac pcm -ovc copy -o "$OUTPUT_FILENAME"
$video_codes_flv"
rm -rf "$OUTPUT"
if [ ! -z "$(which mencoder)" ]; then
$merge_videos
else
echodate "Sorry, you don't have mencoder installed. Install it runnig:
sudo aptitude install mencoder"
echodate "Then, run this command:"
echo $merge_videos
exit 2
fi

---
http://www.linuxscrew.com/2010/05/19/youtube-dl-download-youtube-videos-in-ubuntu-using-command-line/


youtube-dl: download youtube videos in Ubuntu using command line
Previous Next

    Artem Nosulchik
    May 19, 2010
    34

    applications
    shell
    tips
    ubuntu

If you use Ubuntu (or other Linux distribution) and you wish to download some
video from youtube.com into .flv file you can try using youtube-dl command
line utility. It just downloads videos without any online applications,
converters or etc. Type the following command in terminal to get it installed:

sudo apt-get install youtube-dl
Let’s imagine you would like to download the following video:
http://www.youtube.com/watch?v=2leg8mUE9rs (this is part of Military Parade
at Red Square in Russia at 9th of May 2010). Just run youtube-dl download
utility as follows:

youtube-dl http://www.youtube.com/watch?v=2leg8mUE9rs

and in a few minutes you will get 2leg8mUE9rs.flv file that could be viewed
using almost any video player like my favorite one VLC.

---
http://arun.wordpress.com/2007/01/29/download-youtube-videos-the-linux-way/

Download YouTube Videos : The Linux Way !
January 29, 2007 by arun

In this article I will outline a few methods to download YouTube Videos to
your system and getting them to play in your favorite player. We will go in
a step-wise way :

A. Getting the Video

    Online Tools

    There are some sites like KeepVid.com which allow users to input a YouTube
    link and they would give you the download link. So get the download link
    from this site and download the flv file.

    Firefox Plugin
    There is a firefox extension which allows you to download YouTube videos
    as you watch them. I haven’t tried this.
    Command Line Tools
    This is the safest and best way (for CLI junkies :-D ). Download the
    script YouTube-dl (thanks to Ricardo Garcia Gonzalez for this nice
    script). Just put that script in your ~/bin or /usr/bin directories or
    somewhere in the application path.
    To download the flv video do this :
    youtube-dl
    e.g : youtube-dl http://www.youtube.com/watch?v=D1R-jKKp3NA

B. Playing the video

    Use VLC Player or MPlayer or Kaffeine to play the flash video.
    If the above method doesn’t work out (It din’t in my case)..Then go the
    difficult way :
	Get ffmpeg for your system. SuSE users can get it here.
	Convert the flv video to avi (or any other format) using ffmpeg :
	ffmpeg -i my_flash_video.flv the_avi_file.avi
	Now drag and drop the avi file into your favorite video player n
	watch the video :-)

Still unsatisfied ?! “Dude I’m a *nix user. I can’t sit and do all these
steps to get a simple video playing !!” No probs. We will write a shell
script to do all this work for you.

Note : I found the downloader in youtube-dl quite slow. So I tweaked it a
bit(I don’t know python :-D ) to use an external downloader (axel rocks!). Open
the file youtube-dl in your favorite editor and change the following lines :

282 # Abort here if in simulate mode
283 if cmdl_opts.simulate:
284	sys.exit()

to the following :

282 # Abort here if in simulate mode
283 if cmdl_opts.simulate:
284	cond_print(video_data.geturl())
285	sys.exit()

That will make the script output the downloadable video link to the standard
output (when run in simulate mode). Now write the shell script :
#!/bin/bash
if [ $# -ne 2 ]
then
echo "Usage : $0 <youtube_file_link> <output_file_without_extension>"
echo "e.g : $0 http://www.youtube.com/watch?v=D1R-jKKp3NA steve_jobs"
else
outputfile=".avi"
todnload=`youtube-dl -s $1 | tail -n 1 -`
echo "Got the file.."$todnload
axel -n 100 $todnload -o $2".flv" # wget -c $todnload -O $2".flv" .if you
don't use axel
echo "Download Completed..."
ffmpeg -i $2".flv" $2$outputfile  # get the avi file
fi

Done. Now paste that code into a file utube in your path. Then run utube as :
utube http://www.youtube.com/watch?v=D1R-jKKp3NA steve_jobs

This will give 2 files steve_jobs.flv and steve_jobs.avi ;)
Just drag the *.avi to kaffeine and enjoy the speech by Steve Jobs !

Technorati Tags: youtube, google, linux, axel, download, videos, shell, cli,
command line,
About these ads
Rate this:






3 Votes

Share the love:

    Twitter18
    Pinterest
    Facebook14
    Google +1
    More

Like this:
This entry was posted in Life. Bookmark the permalink.
Post navigation
‹ Connect to MSN, Yahoo, AIM using GTalk (psi)
100000 Visitors ! ›
41 thoughts on “Download YouTube Videos : The Linux Way !”

    wanderlust says:
    February 25, 2007 at 11:50 am

    the firefox plugin, if used along with some download manager is quite
    hassle-free. two clicks, and you’re done.
    Downloading videos is very, very useful if you want to watch a video,
    but can’t due to the slow buffering. downloads complete in max fifteen
    minutes, much faster than it’ll take to buffer it and watch it.
    Reply
    bbb says:
    March 5, 2007 at 11:37 am

    http://www.snatchvid.com/ try this site it works great!
    Reply

    Pingback: Voglia di Linux » Blog Archive » Scaricare video di Youtube

    Pingback: Computerstammtisch » Blog Archive » Runterladen von
    Youtube-Videos
    marc says:
    May 11, 2007 at 1:09 am

    I use http://www.savetube.com to save youtube videos
    Reply
    David Emerson says:
    July 12, 2007 at 7:05 am

    excellent!
    Thank you!
    And thanks especially to Ricardo Garcia Gonzalez for his script.

    Rather than modifying the youtube-dl.py script, you can just use the
    ‘-g’ option:
    -g, –get-url print final video URL only

    I also find the title option to be useful:
    -2, –title-too used with -g, print title too

    (It may be that these are recent additions to the script :-)

    A few recommendations for your bash script: it’s good to get in the
    habit of using the newer $(command) syntax for command substitution
    rather than the old `backtick` syntax. Here’s why:
    http://wooledge.org/mywiki/BashFAQ/082

    Also, the script seems to be displaying here with “smart quotes” rather
    than “standard double quotes”. If I was to copy/paste the script as
    it is, it would not work because of those smart quotes, and that’s the
    kinda thing that’s really tricky for a newbie to figure out.

    On my system (debian etch, using codecs from debian-multimedia.org)
    mplayer can play the original flv files! no conversions needed – yay!

    Cheers,
    David
    Reply
    arun says:
    July 16, 2007 at 8:54 am

    Thanks for the information. I will post an updated version of this script
    with the changes :-)
    Reply
    tek1024 says:
    February 6, 2008 at 10:49 am

    Thanks for echoing this script here! It was precisely what I was
    looking for.

    # off-topic:

    I just wanted to point out that WordPress by default uses smartquotes —
    even within <code>blocks</code> — which means that a direct copy+paste of
    the code block above will fail out in bash. We used to be able to escape
    smart quotes by disabling certain filters, but that method is deprecated
    and no longer works (so if you Google it, make sure you limit the date
    to within the last 6mo).

    I won’t spew URLs here, but if you Google “Trials and tribulations of
    using WordPress to display code syntax”, you’ll come across a post that
    might help.
    Reply
    arun says:
    February 6, 2008 at 9:58 pm

    I could directly copy/paste the code into VIM. Just make sure you’ve
    the paste mode enabled with “:set paste”.
    Thanks for the pointer, but unfortunately wordpress.com doesn’t allow
    user plugins. Enjoy the script :-)
    Reply
    Fariz says:
    March 20, 2008 at 5:10 pm

    use Qttube..a linux GUI apps.
    Reply
    Mr.Legend says:
    March 31, 2008 at 2:32 am

    Hi,
    you can download youtube videos on
    http://www.downloadyoutubevids.com
    Here you can also search, watch and download youtue videos.
    All in One :-)
    Reply
    deadly says:
    May 20, 2008 at 6:56 am

    http://home.gna.org/clive/
    clive is a video extraction tool for user-uploaded video hosts such as
    Youtube, Google Video, Dailymotion, Guba and Metacafe. It can be chained
    with 3rd party tools for subsequent video re-encoding and playing and
    playing.

    If you run ubuntu:

    sudo apt-get install clive
    Reply
    urbanvoodoo says:
    August 28, 2008 at 7:12 pm

    There’s also another way to download youtube videos, and videos from
    many other sites using the command line in linux. check this out.

    Reply
    urbanvoodoo says:
    August 28, 2008 at 7:14 pm

    Forgot to insert the link. sorry.
    Reply
    jazz says:
    September 19, 2008 at 1:40 am

    R u lot 4 real,all u do is start download from youtube then press pause.Let
    the video download then when it has finished go to your temp folder the
    video will be there.With your web browser still open drag the file from
    temp 2 where ever u want to save file its that easy.But remember not to
    close the browser down till you have removed video from temp folder
    Reply
    Flecha says:
    November 4, 2008 at 11:12 pm

    Great Tutorial!
    Reply

    Pingback: Update Download youtube videos in linux « Inside Out

    Pingback: How I Save Videos from YouTube « technobody
    Anne On says:
    January 9, 2009 at 8:17 pm

    There’s a simple script here that works with new YouTube updates:

    http://blog.johnlawrence.net/2008/12/youtube-download-shell-script/
    Reply
    ropi81 says:
    September 21, 2009 at 11:28 am

    youtube-dl has moved! Please update your bookmarks!

    The new website is located at http://bitbucket.org/rg3/youtube-dl/
    Reply
    sad guy says:
    April 2, 2010 at 10:16 pm

    Extracting URL “t” parameter… failed.
    Error: unable to extract URL “t” parameter.
    Try again several times. It may be a temporary problem.
    Other typical problems:

    * Video no longer exists.
    * Video requires age confirmation but you did not provide an account.
    * You provided the account data, but it is not valid.
    * The connection was cut suddenly for some reason.
    * YouTube changed their system, and the program no longer works.

    Try to confirm you are able to view the video using a web browser.
    Use the same video URL and account information, if needed, with this
    program.
    When using a proxy, make sure http_proxy has http://host:port format.
    Try again several times and contact me if the problem persists.
    Reply
    tarek says:
    April 30, 2010 at 4:59 pm

    just let the video completes buffering then go to “” / tmp “” you will
    find the video there SIMPLE WAY
    Reply
    jcash says:
    December 1, 2010 at 7:51 pm

    You don’t need it.

    On your Linux(For Ubuntu) Go to Places–>File system–>tmp–>Video will
    be bottom(will have same file name as video)—>Finally just copy it from
    there/Paste it into desired location !!!!!!!

    The youtube video will appear there after it has fully loaded onto the
    browser screen.

    So all you really have to do is click on your favorite youtube video
    and then following the instructions above to get it.
    Reply

    Pingback: How Can I Save Movies From YouTube To My Hard Drive? | What
    is your SOLUTION? ZNS!
    desdecode says:
    April 2, 2011 at 11:35 am

    I wrote a bash script that might be useful to somebody, it extracts
    all of the flash video files out of your firefox cache that are above
    a certain size and copies them to a separate folder.

    I run it after I’ve been on youtube for a while and it saves everything
    I’ve been watching:


    #!/bin/bash
    # flvcache script

    CACHE=~/.mozilla/firefox/xxxxxxxx.default/Cache
    OUTPUTDIR=~/Videos/flvs
    MINFILESIZE=2M

    for f in `find $CACHE -size +$MINFILESIZE`
    do
    a=$(file $f | cut -f2 -d ' ')
    o=$(basename $f)
    if [ "$a" = "Macromedia" ]
    then
    cp "$f" "$OUTPUTDIR/$o"
    fi
    done

    nautilus "$OUTPUTDIR"&

    It’ll also load the output folder in nautilus after so you can browse
    the flash/videos extracted.

    Code and instructions on my blog:
    http://desdecode.blogspot.com/2011/04/saving-watched-online-videos-linux.html

    I hope somebody else finds it useful
    Reply
    Rafael Soares says:
    April 8, 2011 at 5:56 pm

    There’s a new script for linux to search and watch youtube’s video on
    linux shell, called YouShell.

    http://code.google.com/p/youshell/
    Reply
    superkuh says:
    June 10, 2011 at 1:29 pm

    The easiest way to play a video is something like,
    vlc $(stat -c %N /proc/*/fd/* 2>&1|awk -F[\`\'] ‘/lash/{print$2}’)
    To copy it just change that to,
    cp $(stat -c %N /proc/*/fd/* 2>&1|awk -F[\`\'] ‘/lash/{print$2}’)
    desiredvideofilename.flv
    Reply
    berny says:
    August 2, 2011 at 6:43 pm

    Thanks for this solution! Simple, fast, all we need :)
    Reply
    psylone says:
    September 23, 2011 at 8:34 pm

    Thanks! youtube-dl is better choice for me.
    Reply
    crina says:
    November 7, 2011 at 4:57 pm

    I’ve tried the third online method, also installed the python but it
    keeps telling me that format is not available for video and i can’t tell
    were i was wrong…..
    Reply
    John Miller says:
    December 3, 2011 at 7:19 pm

    Where does the youtube-dl script save the flv file? I did a file search
    that came up empty.
    Reply
    rui says:
    February 7, 2012 at 6:11 pm

    works like a charm(opensuse).thank you..
    Reply
    preetammn says:
    March 5, 2012 at 7:14 pm

    thank you, your post helped a lot.
    Reply
    ikinetica says:
    April 19, 2012 at 4:19 am

    well if you watch entire video and don`t rush for multiple downloads,
    entire video will be stored in .cache, goto your file browser click Ctrl-H
    to show hidden files, goto .cache, then browser cache, i take them that
    way, even nice key frames pics…other way is ls -a to show hidden files
    in console e.g path would be /home/irena/.cache/google-chrome/Default
    Reply
    satish says:
    June 7, 2012 at 1:41 pm

    That was helpful thank you :-)
    Reply
    Fran says:
    July 5, 2012 at 2:41 am

    Just try clive, on command line, you put clive thewebsite.html and you’ll
    end up with a flv file in your home folder
    Reply
    andy says:
    July 11, 2012 at 11:34 am

    ikinetica, when you posted this was still valid (mid-April 2012). HOWEVER,
    YT seem to have changed something again. I’ve spotted a new parameter
    called “range” in the o-o-preferred… URLs which suspiciously looks like
    data chunks (e.g. &range=1787641-4563124), so it appears to me videos can
    no longer be downloaded as a whole file but in chunks which have to be
    pieced together later. I know what I’m writing, since I’ve encountered
    this issue on both Firefox and Chromium. Back in April/May, mplayer
    would still have played the audio, now there is total silence. And it’s
    a pseudo-video, i. e. a mp3 with a static picture, which was uploaded in
    192 kbps and got a duration of 3:30 mins, so the size should be between
    5 MB and 5.5 MB. This totally matches with the last range value in the
    last chunk (…-5431983) so it seems we now have to say goodbye to leeching
    the whole file in one go.
    Reply
    andy says:
    July 11, 2012 at 12:06 pm

    me again…I can confirm that as of July 2012 when I write this Richard’s
    marvelous script “youtube-dl” can still copy with the “hacking-to-bits”
    method that YT currently uses and will DL the whole thing in one go.

    Muchas gracias Ricardo !!

    BUT: the grab-off-cache method seems to have become a thing of the
    past now.
    Reply
    Lisa says:
    October 29, 2012 at 3:10 am

    The script / VLC combination works perfectly for me. Thanks!!
    Reply

    Pingback: Download Video Youtube Menggunakan Terminal Console di Backtrack
    5 r3 | Blogs Share Apa Adanya
    grendel says:
    April 4, 2013 at 6:57 pm

    Theres a very simple application called minitube, installable from
    software center. Nice application which allows you to download any
    video from youtube, thoug it cannot work as a ressource sniffer like
    that firefox plugin mentioned before.
