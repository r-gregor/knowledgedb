filename: user-management-tricks-with-usermod-command-20250916.txt
https://www.howtogeek.com/linux-user-management-tricks-with-the-usermod-command/

8 Linux User Management Tricks With the usermod Command
2025-09-14

   The usermod command is a tool for updating details about an existing user account in your system.
   It's kind of like editing the "profile" of a Linux user. With it, you can adjust anything from the
   username to the login shell, without needing to delete and recreate the account.

8 - Update a User's Information
   If you just want to change general user details like the account description (also called the
   "comment field",) you can use the -c option. This field is often used for things like the user's full
   name, department, or any other short description. Here's an example:
$> sudo usermod -c "HTG Test User" htg

   The -c flag is for the comment field. Whatever you put in quotes will show up in "/etc/passwd". After
   running this, you can check if the update worked by looking into the "/etc/passwd" file:
$> grep htg /etc/passwd

   Updating a user information using the usermod command.

   Notice the "HTG Test User" in the fifth field. That's the description we just added. This field is
   sometimes used by display managers or utilities like finger. It helps in multi-user servers,
   where you may not remember who a particular user is.

7 - Change a User's Name
   Sometimes you need to change a user's login name. Perhaps the username was a temporary one, or maybe
   you simply want to standardize naming conventions. The usermod command makes this possible without
   having to delete and recreate the account. Here's how you'd change the username of our example user
   'htg' to 'howtogeek':
$> sudo usermod -l howtogeek htg

   The -l (lowercase L) flag stands for login name. It tells usermod you want to change the account's
   username. Notice the syntax carefully. You need to provide the new username first, and then the
   current username of the user you want to change the name for.

   After running this, the account now uses 'howtogeek' as the login name. You can verify the change by
   checking the "/etc/passwd" file again:
$> grep howtogeek /etc/passwd

   You should also know that changing the login name does not automatically rename the user's home
   directory. So, in this example, the user would still have "/home/htg" as their home directory unless
   you explicitly change it (covered in a later section.) Before running the command, make sure that the
   user is logged out to avoid errors or unexpected behavior.

6 - Modify User IDs
   Every user on a Linux system isn't just identified by their username. They also have a UID (User ID)
   number. The UID is what the system really cares about when checking file ownership and permissions.
   Normally, you don't need to mess with UIDs, but there are times when you might, such as migrating
   users between systems while keeping file ownership consistent or fixing conflicts when two users
   accidentally have the same UID.

   Here's how you'd change the UID of our example user 'htg' from the current one to 1500:
$> sudo usermod -u 1500 htg

   The -u option sets a new UID for the user. Then we pass the new User ID number to it. Make sure it's
   unique on the system. After changing the UID, confirm it by running:
$> id htg

   You should see the new UID reflected in the output. One good thing is that the files that the user
   owns and are in the user's home directory will automatically have their UID changed to the new one.

   After changing the UID of the user 'htg', the file in his home directory was also updated to the new
   UID.

5 - Set or Reset a User's Password
   Changing a user's password is one of the most common administrative tasks. Normally, you'd use
   the passwd command to do this, but interestingly, usermod can also handle password-related changes.

   Now, there's a catch. The usermod command doesn't encrypt the password for you. That means the
   password will be saved in plain text in the "/etc/shadow" file. Here's the general syntax:
$> sudo usermod -p password htg

   You can have a look at the "/etc/shadow" file to confirm if the password was changed.
$> sudo grep htg /etc/shadow

   As you can see, the password was changed but can be seen as plain text. So, this makes it a bit
   risky. It may come in handy in some niche situations where you're writing a script and may have to
   use predefined passwords. In most other cases, passwd is the better option for changing a user's
   password.

4 - Redefine a User's Home Directory
   By default, when you create a user, they get a home directory under "/home/username." But what if you
   want to move that directory somewhere else, maybe to a different disk? Or maybe you renamed the
   user and want the home directory to match? That's where usermod command's -d option comes in handy.
$> sudo usermod -d /home/howtogeek htg

   The -d option sets a new home directory path for the user. After running this, Linux will recognize
   "/home/howtogeek" as the user's home. But here's the important part. This doesn't move any files. It
   just changes the reference. If "/home/howtogeek" doesn't exist, the user will end up with an empty
   (or even nonexistent) home.

   !!! IMPORTANT !!!
   If you want the files from the old home directory to be moved into the new one, add the -m option:
$> sudo usermod -d /home/howtogeek -m htg

   Now usermod will actually move everything from "/home/htg" to "/home/howtogeek." This is especially
   useful when renaming users, so their home directory matches the new login name. After moving, it's a
   good idea to list the directory and confirm everything came over:
$> ls -la /home/howtogeek

   If you can see the user's files, the operation was successful.

3 - Adjust a User's Groups
   On Linux, groups are how you organize users and control their access to files, directories, and
   services. Every user belongs to at least one primary group, and they can also belong to multiple
   supplementary (or secondary) groups. The usermod command lets you change both primary and secondary
   groups, as well as add or remove users from existing groups.

   The primary group is usually created at the same time as the user account and has the same name as
   the user. You can switch it with the -g option.
$> sudo usermod -g developers htg

   Now, whenever 'htg' creates a file, it'll be owned by the developers group (instead of their old
   primary group.) Most of the time, you'll want to add users to additional groups so they can access
   certain resources (sudo, for example.)
$> sudo usermod -aG sudo htg

   !!! IMPORTANT !!!
   The -a option means append. Without this, you risk replacing existing group memberships. The -G
   option adds the user to the specified group. If you use -G without -a, you're telling Linux to
   replace all supplementary groups with the ones you specify.
$> sudo usermod -G sudo htg

   Now, 'htg' is only in the sudo group (besides their primary group). So, be careful of using it
   because you could accidentally lock someone out of important permissions.

   There's no way to remove a user from a group using usermod. However, you can specify the groups that
   you want the user to be a member of. For example, say 'htg' is a member of the groups employee,
   admin, and IT. You want to remove the user from admin. For that, run:
$> sudo usermod -G employee,IT htg

   Now, 'htg' is out of the admin group but still in employee and IT.

2 - Configure a User's Shell
   Every time a user logs in, Linux starts up a shell, the command-line environment where they interact
   with the system. The default is usually "/bin/bash", but there are plenty of other shells like
   "/bin/zsh", "/bin/sh", or even specialized restricted shells.

   With usermod, you can change which shell launches when the user logs in. Here's an example where we
   change the 'htg' user's shell to Zsh:
$> sudo usermod -s /bin/zsh htg

   The -s option sets the user's login shell. Then we pass the path of the shell we want to set for the
   user. Now, when 'htg' logs in, they'll be greeted by Zsh instead of Bash. If you're not sure about
   the paths available for different shells in your system, try running:
$> cat /etc/shells

   This lists the available shells with their paths. After changing the default shell, you can confirm
   if it was successful by running:
$> getent passwd htg

   As you can see, the default shell for 'htg' was changed to Zsh from Bash. This is useful if you want to
   restrict a user's activity by giving a less powerful shell.

1 - Lock and Unlock User Accounts
   Sometimes you don't want to delete a user, but you do want to prevent them from logging in. Maybe
   they're on leave, maybe they left the company, but you need to keep their files, or maybe you're
   troubleshooting. That's where account locking comes in. With usermod, you can lock or unlock an
   account's password quickly.

   To lock the 'htg' user's account, I'll simply run:
$> sudo usermod -L htg

   The -L option locks the account. It works by prepending an exclamation mark (!) in front of the
   encrypted password inside "/etc/shadow." After this, 'htg' won't be able to log in with their
   password. When you're ready to give access back, just run:
$> sudo usermod -U htg

   The -U option unlocks the account by removing the ! in front of the password hash.
   Locking and unlocking a user's password using usermod.

   Locking only affects password-based login. If the user has SSH keys configured, they could still log
   in with those unless you take extra steps. For temporary suspensions, you can combine usermod with
   account expiry dates. For example:
$> sudo usermod -e 2025-09-30 htg

   After September 30, 2025, the account will be disabled automatically.

   Whether you're a system administrator or just curious about Linux user management, these tricks will come
   in handy. There are many more [https://www.howtogeek.com/linux-terminal-tricks-youre-not-using/]time-saving
   Linux tricks you should learn. You can also explore other commands, such as
   [https://www.howtogeek.com/networking-uses-for-the-linux-nc-command/]the nc command.


---

