filename: vmstat-command_multif_20250227.txt
https://www.redhat.com/en/blog/linux-commands-vmstat

Linux commands: exploring virtual memory with vmstat
June 10, 2020

   There are many commands, tools, and variations of the two for you to put to work when it comes to
   system statistics in Linux. However, if you need the specifics around virtual memory, you want to use
   vmstat.

   What is it?
   Virtual memory statistics reporter, also known as vmstat, is a Linux command-line tool that reports
   various bits of system information. Things like memory, paging, processes, IO, CPU, and disk
   scheduling are all included in the array of information provided.

   When you run vmstat, keep in mind that the first report is an average of the requested information
   since the time of the last reboot. Subsequent reports use measurements of delay and count. I cover
   those specifically during the syntax discussion.

   Command syntax
   The syntax for the vmstat command is rather simple:

$> vmstat [options][delay [count]]
     * Options - these are covered in detail in the following section.
     * Delay - this defines the time interval between updates. If no delay is specified, the report runs
       as an average since the last reboot.
     * Count - this defines the number of updates printed after the given delay interval. If no count is
       set, the default in an infinite number of updates every x seconds (where x = delay).

   Basic output and how to make sense of it
   The most basic form of this command uses no options at all. Here is the standard output and how to
   read it:
[tcarrigan@rhel ~]$> vmstat
procs   -----------memory---------- ---swap-- -----io---- -system--  ------cpu-----
 r  b   swpd    free    buff  cache   si   so    bi    bo   in   cs  us sy id wa st
 1  0      0 6012852   2120  817048    0    0  2805   289  797  657  21  7 71  1  0

   You see information around processes, memory, swap, IO, system, and CPU. The man page for the command
   states the following (man vmstat):
- Procs
     - r: The number of runnable processes (running or waiting for run times)
     - b: The number of processes in uninterruptible sleep.
 - Memory
     - swpd: the amount of virtual memory used.
     - free: the amount of idle memory
     - buff: the amount of memory used as buffers
     - cache: the amount of memory used as cache.
     - inact: the amount of inactive memory. (-a option)
     - active: the amount of active memory. (-a option)
 - Swap
     - si: Amount of memory swapped in from disk (/s).
     - so: Amount of memory swapped to a block device (/s).
 - IO
     - bi: Blocks received from a block device (blocks/s).
     - bo: Blocks sent to a block device (blocks/s).
 - System
     - in: The number of interrupts per second, including the clock.
     - cs: The number of context switcher per second.
 - CPU
     - These are percentages of total CPU time.
     - us: Time spent running non-kernel code. (user time, including nice time)
     - sy: Time spent running kernel code. (system time)
     - id: Time spent idle. Prior to Linux 2.5.41, this includes IO-wait time.
     - wa: Time spent waiting for IO.  Before Linux 2.5.41, included in idle.
     - st: Time stolen from a virtual machine.  Prior to Linux 2.6.11, unknown.

   Among the important information here, you find the amount of free memory on the system, as well as
   the amount of swap activity you are currently experiencing.

   Options to know

   The -a option will give us the active and inactive memory of the system:
[tcarrigan@rhel ~]$> vmstat -a
procs   -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd    free  inact  active   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 6022104 609656 1185980    0    0   180    40   80   79  1  1 98  0  0

   The -f option will give us the number of forks since boot:
[tcarrigan@rhel ~]$> vmstat -f
         2911 forks

   Note that a fork is any process that spawns another processes while remaining active.

   The -s option displays various memory statistics as well as CPU and IO event counters:
[tcarrigan@rhel ~]$> vmstat -s
      8161656 K total memory
      1216012 K used memory
      1186276 K active memory
       609632 K inactive memory
      6021980 K free memory
         2120 K buffer memory
       921544 K swap cache
      3145724 K total swap
            0 K used swap
      3145724 K free swap
         5888 non-nice user cpu ticks
          476 nice user cpu ticks
         1520 system cpu ticks
       529965 idle cpu ticks
          331 IO-wait cpu ticks
          939 IRQ cpu ticks
          103 softirq cpu ticks
            0 stolen cpu ticks
       755494 pages paged in
       167719 pages paged out
            0 pages swapped in
            0 pages swapped out
       365026 interrupts
       374126 CPU context switches
   1590618807 boot time
         2952 forks

   The -d option gives you read/write stats for various disks:
[tcarrigan@rhel ~]$> vmstat -d
disk- ------------reads------------ ------------writes----------- -----IO------
       total merged sectors      ms  total merged sectors      ms    cur    sec
sda    17019     40 1498524   10680   4683   1050  335510    1561      0     10
sdb      105      0    6232      67      0      0       0       0      0      0
sdc      105      0    6232      59      0      0       0       0      0      0
sr0        0      0       0       0      0      0       0       0      0      0
dm-0   16677      0 1469065   12431   5713      0  336816    2485      0     10
dm-1      98      0    4440      39      0      0       0       0      0      0

   The -t option gives us timestamp information with every update, a seen here:
[tcarrigan@rhel ~]$> vmstat -t 5 10
procs   -----------memory---------- ---swap-- -----io---- -system-- ------cpu------ -----timestamp-----
 r  b   swpd    free    buff  cache   si   so    bi    bo   in   cs us sy  id wa st                 EDT
 1  0      0 6021412   2120  921548    0    0   118    26   62   66  1  0  99  0  0 2020-05-27 19:00:11
 0  0      0 6021300   2120  921548    0    0     0     0  349  510  1  0  99  0  0 2020-05-27 19:00:16
 0  0      0 6021272   2120  921548    0    0     0     2  196  294  0  0 100  0  0 2020-05-27 19:00:21
 0  0      0 6021272   2120  921548    0    0     0     0  110  161  0  0 100  0  0 2020-05-27 19:00:26
 0  0      0 6021272   2120  921548    0    0     0     0  112  169  0  0 100  0  0 2020-05-27 19:00:31
 0  0      0 6021272   2120  921548    0    0     0     0  171  267  0  0  99  0  0 2020-05-27 19:00:36
 0  0      0 6021188   2120  921552    0    0     0     0  201  291  0  0  99  0  0 2020-05-27 19:00:41
 0  0      0 6021188   2120  921552    0    0     0     0  152  233  0  0 100  0  0 2020-05-27 19:00:46
 2  0      0 6021188   2120  921552    0    0     0     3  127  165  0  0 100  0  0 2020-05-27 19:00:51
 0  0      0 6021188   2120  921552    0    0     0     0   95  131  0  0 100  0  0 2020-05-27 19:00:56

   You see that there are 10 updates, printed every five seconds, with timestamp information attached.

   Also, please note that all memory stats are displayed in kilobytes by default.

   Summary
   To wrap up, let's look at what we learned. The vmstat command is a powerful system statistics tool
   that can be used with or without options. It prints updates using two main variables (delay and
   count), and we can customize the command and output to suit our needs. I hope that you have enjoyed
   this look at the vmstat command. I will cover ifstat in a forthcoming article, so keep an eye out for
   that!


---
https://www.ibm.com/docs/en/aix/7.2?topic=monitoring-vmstat-command

vmstat command
2025-01-20

The first tool to use is the vmstat command, which quickly provides compact information about various system
resources and their related performance problems.  The vmstat command reports statistics about kernel threads
in the run and wait queue, memory, paging, disks, interrupts, system calls, context switches, and CPU
activity. The reported CPU activity is a percentage breakdown of user mode, system mode, idle time, and waits
for disk I/O.  Note: If the vmstat command is used without any interval, then it generates a single report.
The single report is an average report from when the system was started. You can specify only the Count
parameter with the Interval parameter. If the Interval parameter is specified without the Count parameter,
then the reports are generated continuously.  As a CPU monitor, the vmstat command is superior to the iostat
command in that its one-line-per-report output is easier to scan as it scrolls and there is less overhead
involved if there are many disks attached to the system. The following example can help you identify
situations in which a program has run away or is too CPU-intensive to run in a multiuser environment.

# vmstat 2
kthr     memory             page              faults        cpu
----- ----------- ------------------------ ------------ -----------
 r  b   avm   fre  re  pi  po  fr   sr  cy  in   sy  cs us sy id wa
 1  0 22478  1677   0   0   0   0    0   0 188 1380 157 57 32  0 10
 1  0 22506  1609   0   0   0   0    0   0 214 1476 186 48 37  0 16
 0  0 22498  1582   0   0   0   0    0   0 248 1470 226 55 36  0  9

 2  0 22534  1465   0   0   0   0    0   0 238  903 239 77 23  0  0
 2  0 22534  1445   0   0   0   0    0   0 209 1142 205 72 28  0  0
 2  0 22534  1426   0   0   0   0    0   0 189 1220 212 74 26  0  0
 3  0 22534  1410   0   0   0   0    0   0 255 1704 268 70 30  0  0
 2  1 22557  1365   0   0   0   0    0   0 383  977 216 72 28  0  0

 2  0 22541  1356   0   0   0   0    0   0 237 1418 209 63 33  0  4
 1  0 22524  1350   0   0   0   0    0   0 241 1348 179 52 32  0 16
 1  0 22546  1293   0   0   0   0    0   0 217 1473 180 51 35  0 14

This output shows the effect of introducing a program in a tight loop to a busy multiuser system. The first
three reports (the summary has been removed) show the system balanced at 50-55 percent user, 30-35 percent
system, and 10-15 percent I/O wait. When the looping program begins, all available CPU cycles are consumed.
Because the looping program does no I/O, it can absorb all of the cycles previously unused because of I/O
wait. Worse, it represents a process that is always ready to take over the CPU when a useful process
relinquishes it. Because the looping program has a priority equal to that of all other foreground processes,
it will not necessarily have to give up the CPU when another process becomes dispatchable. The program runs
for about 10 seconds (five reports), and then the activity reported by the vmstat command returns to a more
normal pattern.

Optimum use would have the CPU working 100 percent of the time. This holds true in the case of a single-user
system with no need to share the CPU. Generally, if us + sy time is below 90 percent, a single-user system is
not considered CPU constrained. However, if us + sy time on a multiuser system exceeds 80 percent, the
processes may spend time waiting in the run queue. Response time and throughput might suffer.

To check if the CPU is the bottleneck, consider the four cpu columns and the two kthr (kernel threads) columns
in the vmstat report. It may also be worthwhile looking at the faults column:

- cpu
  Percentage breakdown of CPU time usage during the interval. The cpu columns are as follows:

  * us
    The us column shows the percent of CPU time spent in user mode. A UNIX process can execute in either user
    mode or system (kernel) mode. When in user mode, a process executes within its application code and does
    not require kernel resources to perform computations, manage memory, or set variables.

  * sy
    The sy column details the percentage of time the CPU was executing a process in system mode. This includes
    CPU resource consumed by kernel processes (kprocs) and others that need access to kernel resources. If a
    process needs kernel resources, it must execute a system call and is thereby switched to system mode to
    make that resource available. For example, reading or writing of a file requires kernel resources to open
    the file, seek a specific location, and read or write data, unless memory mapped files are used.

  * id
    The id column shows the percentage of time which the CPU is idle, or waiting, without pending local disk
    I/O.  If there are no threads available for execution (the run queue is empty), the system dispatches a
    thread called wait, which is also known as the idle kproc. On an SMP system, one wait thread per processor
    can be dispatched. The report generated by the ps command (with the -k or -g 0 option) identifies this as
    kproc or wait. If the ps report shows a high aggregate time for this thread, it means there were
    significant periods of time when no other thread was ready to run or waiting to be executed on the CPU.
    The system was therefore mostly idle and waiting for new tasks.

  * wa
    The wa column details the percentage of time the CPU was idle with pending local disk I/O and NFS-mounted
    disks. If there is at least one outstanding I/O to a disk when wait is running, the time is classified as
    waiting for I/O. Unless asynchronous I/O is being used by the process, an I/O request to disk causes the
    calling process to block (or sleep) until the request has been completed. Once an I/O request for a
    process completes, it is placed on the run queue. If the I/Os were completing faster, more CPU time could
    be used.

    A wa value over 25 percent could indicate that the disk subsystem might not be balanced properly, or it
    might be the result of a disk-intensive workload.

    For information on the change made to wa, see
    [https://www.ibm.com/docs/en/ssw_aix_72/performance/wait_io_time_reporting.html]Wait I/O time reporting.

- kthr
    Number of kernel threads in various queues averaged per second over the sampling interval. The kthr columns
    are as follows:

  * r
    Average number of kernel threads that are runnable, which includes threads that are running and threads
    that are waiting for the CPU. If this number is greater than the number of CPUs, there is at least one
    thread waiting for a CPU and the more threads there are waiting for CPUs, the greater the likelihood of a
    performance impact.

  * b
    Average number of kernel threads in the VMM wait queue per second. This includes threads that are waiting
    on filesystem I/O or threads that have been suspended due to memory load control.

    If processes are suspended due to memory load control, the blocked column (b) in the vmstat report
    indicates the increase in the number of threads rather than the run queue.

  * p
    For vmstat -I The number of threads waiting on I/Os to raw devices per second. Threads waiting on I/Os to
    filesystems would not be included here.

- faults
    Information about process control, such as trap and interrupt rate. The faults columns are as follows:

  * in
    Number of device interrupts per second observed in the interval. Additional information can be found in
    [https://www.ibm.com/docs/en/ssw_aix_72/performance/assess_disk_perf_vmstat.html]Assessing disk
    performance with the vmstat command.

  * sy
    The number of system calls per second observed in the interval. Resources are available to user processes
    through well-defined system calls. These calls instruct the kernel to perform operations for the calling
    process and exchange data between the kernel and the process. Because workloads and applications vary
    widely, and different calls perform different functions, it is impossible to define how many system calls
    per-second are too many. But typically, when the sy column raises over 10000 calls per second on a
    uniprocessor, further investigations is called for (on an SMP system the number is 10000 calls per second
    per processor). One reason could be "polling" subroutines like the select() subroutine. For this column,
    it is advisable to have a baseline measurement that gives a count for a normal sy value.

  * cs
    Number of context switches per second observed in the interval. The physical CPU resource is subdivided
    into logical time slices of 10 milliseconds each. Assuming a thread is scheduled for execution, it will
    run until its time slice expires, until it is preempted, or until it voluntarily gives up control of the
    CPU. When another thread is given control of the CPU, the context or working environment of the previous
    thread must be saved and the context of the current thread must be loaded. The operating system has a very
    efficient context switching procedure, so each switch is inexpensive in terms of resources. Any
    significant increase in context switches, such as when cs is a lot higher than the disk I/O and network
    packet rate, should be cause for further investigation.


---
https://www.tecmint.com/linux-performance-monitoring-with-vmstat-and-iostat-commands/

Linux Performance Monitoring with Vmstat and Iostat Commands
July 14, 2023

   This is our ongoing series of Linux Commands and Linux Performance Monitoring, in this
   article, you will learn about Vmstat and Iostat commands, which are available on all major Unix-like
   (Linux/Unix/FreeBSD/Solaris) Operating Systems.

   vmstat command (also known as virtual memory statistic tool) shows information about processes,
   memory, disk, and CPU activity in Linux, whereas the iostat command is used to monitor CPU
   utilization, system input/output statistics for all the disks and partitions.

   If vmstat and iostat commands are not available in your Linux machine, please install the sysstat
   package. The vmstat, sar, and iostat commands are the collection of package included in sysstat
   - the system monitoring tools.

   You may download and install sysstat using the source tarball from link sysstat, but we
   recommend installing through the package manager.

Install Sysstat in Linux

$> sudo apt install sysstat         [On Debian, Ubuntu and Mint]
$> sudo yum install sysstat         [On RHEL/CentOS/Fedora and Rocky Linux/AlmaLinux]
$> sudo emerge -a app-admin/sysstat [On Gentoo Linux]
$> sudo pacman -S sysstat           [On Arch Linux]
$> sudo zypper install sysstat      [On OpenSUSE]

Learn Vmstat Command Examples in Linux
   In this section, you will learn about 6 vmstat command examples and usage with screenshots.

1. List Active and Inactive Memory
   In the below example, there are six columns. The significance of the columns are explained on the man
   page of vmstat in detail. The most important fields are free under memory and si, so under the swap
   column.
[root@tecmint ~]$> vmstat -a

procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 r  b   swpd   free  inact active   si   so    bi    bo    in   cs us sy id wa st
 1  0      0 810420  97380  70628    0    0   115     4    89   79  1  6 90  3  0
     * Free - Amount of free/idle memory spaces.
     * si - Swapped in every second from disk in KiloBytes.
     * so - Swapped out every second to disk in KiloBytes.

   Note: If you run vmstat without parameters it will display a summary report since system boot.

2. Execute vmstat 'X' seconds and ('Number of times)
   With this command, vmstat execute every two seconds and stop automatically after executing six
   intervals.
[root@tecmint ~]$> vmstat 2 6

procs -----------memory---------- ---swap-- -----io---- --system-- ------cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo    in   cs us sy  id wa st
 0  0      0 810420  22064 101368    0    0    56     3    50   57  0  3  95  2  0
 0  0      0 810412  22064 101368    0    0     0     0    16   35  0  0 100  0  0
 0  0      0 810412  22064 101368    0    0     0     0    14   35  0  0 100  0  0
 0  0      0 810412  22064 101368    0    0     0     0    17   38  0  0 100  0  0
 0  0      0 810412  22064 101368    0    0     0     0    17   35  0  0 100  0  0
 0  0      0 810412  22064 101368    0    0     0     0    18   36  0  1 100  0  0

3. Vmstat with Timestamps

   vmstat command with -t parameter shows timestamps with every line printed as shown below.
[tecmint@tecmint ~]$ vmstat -t 1 5

procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------ -------timestamp-------
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs  us sy id wa st
 0  0      0 632028  24992 192244    0    0    70     5   55   78   1  3 95  1  0 2012-09-02 14:57:18 IST
 1  0      0 632028  24992 192244    0    0     0     0  171  514   1  5 94  0  0 2012-09-02 14:57:19 IST
 1  0      0 631904  24992 192244    0    0     0     0  195  600   0  5 95  0  0 2012-09-02 14:57:20 IST
 0  0      0 631780  24992 192244    0    0     0     0  156  524   0  5 95  0  0 2012-09-02 14:57:21 IST
 1  0      0 631656  24992 192244    0    0     0     0  189  592   0  5 95  0  0 2012-09-02 14:57:22 IST

4. Statistics of Various Counter
   vmstat command with -s switch displays summary of various event counters and memory statistics.
[tecmint@tecmint ~]$ vmstat -s

      1030800  total memory
       524656  used memory
       277784  active memory
       185920  inactive memory
       506144  free memory
        26864  buffer memory
       310104  swap cache
      2064376  total swap
            0  used swap
      2064376  free swap
         4539 non-nice user cpu ticks
            0 nice user cpu ticks
        11569 system cpu ticks
       329608 idle cpu ticks
         5012 IO-wait cpu ticks
           79 IRQ cpu ticks
           74 softirq cpu ticks
            0 stolen cpu ticks
       336038 pages paged in
        67945 pages paged out
            0 pages swapped in
            0 pages swapped out
       258526 interrupts
       392439 CPU context switches
   1346574857 boot time
         2309 forks

5. Monitor Linux Disks Statistics
   vmstat with -d option display all disks statistics of Linux.
[tecmint@tecmint ~]$ vmstat -d

disk- ------------reads------------ ------------writes----------- -----IO------
       total merged sectors      ms  total merged sectors      ms    cur    sec
ram0       0      0       0       0      0      0       0       0      0      0
ram1       0      0       0       0      0      0       0       0      0      0
ram2       0      0       0       0      0      0       0       0      0      0
ram3       0      0       0       0      0      0       0       0      0      0
ram4       0      0       0       0      0      0       0       0      0      0
ram5       0      0       0       0      0      0       0       0      0      0
ram6       0      0       0       0      0      0       0       0      0      0
ram7       0      0       0       0      0      0       0       0      0      0
ram8       0      0       0       0      0      0       0       0      0      0
ram9       0      0       0       0      0      0       0       0      0      0
ram10      0      0       0       0      0      0       0       0      0      0
ram11      0      0       0       0      0      0       0       0      0      0
ram12      0      0       0       0      0      0       0       0      0      0
ram13      0      0       0       0      0      0       0       0      0      0
ram14      0      0       0       0      0      0       0       0      0      0
ram15      0      0       0       0      0      0       0       0      0      0
loop0      0      0       0       0      0      0       0       0      0      0
loop1      0      0       0       0      0      0       0       0      0      0
loop2      0      0       0       0      0      0       0       0      0      0
loop3      0      0       0       0      0      0       0       0      0      0
loop4      0      0       0       0      0      0       0       0      0      0
loop5      0      0       0       0      0      0       0       0      0      0
loop6      0      0       0       0      0      0       0       0      0      0
loop7      0      0       0       0      0      0       0       0      0      0
sr0        0      0       0       0      0      0       0       0      0      0
sda     7712   5145  668732  409619   3282  28884  257402  644566      0    126
dm-0   11578      0  659242 1113017  32163      0  257384 8460026      0    126
dm-1     324      0    2592    3845      0      0       0       0      0      2

6. Display Statistics in Megabytes
   The vmstat displays memory statistics in kilobytes by default, but you can also display reports with
   memory sizes in megabytes with the argument -S M. Consider the following example.
[root@tecmint ~]$> vmstat -S M 1 5

procs -----------memory---------- ---swap-- -----io---- --system-- ------cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo    in   cs us sy  id wa st
 0  0      0    346     53    476    0    0    95     8    42   55  0  2  96  2  0
 0  0      0    346     53    476    0    0     0     0    12   15  0  0 100  0  0
 0  0      0    346     53    476    0    0     0     0    32   62  0  0 100  0  0
 0  0      0    346     53    476    0    0     0     0    15   13  0  0 100  0  0
 0  0      0    346     53    476    0    0     0     0    34   61  0  1  99  0  0

Learn Iostat Command Examples in Linux

   In this section, you will learn about 6 iostat command examples and usage with screenshots.

7. Display CPU and I/O Statistics of Disks
   iostat without arguments displays CPU and I/O statistics of all partitions as shown below.
[root@tecmint ~]$> iostat

Linux 2.6.32-279.el6.i686 (tecmint.com)         09/03/2012      _i686_  (1 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.12    0.01    1.54    2.08    0.00   96.24

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               3.59       161.02        13.48    1086002      90882
dm-0              5.76       159.71        13.47    1077154      90864
dm-1              0.05         0.38         0.00       2576          0

8. Shows Linux CPU Statistics
   iostat with -c arguments displays only CPU statistics as shown below.
[root@tecmint ~]$> iostat -c

Linux 2.6.32-279.el6.i686 (tecmint.com)         09/03/2012      _i686_  (1 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.12    0.01    1.47    1.98    0.00   96.42

9. Shows Linux Disks I/O Statistics
   iostat with -d arguments display only disk I/O statistics of all partitions as shown.
[root@tecmint ~]$> iostat -d

Linux 2.6.32-279.el6.i686 (tecmint.com)         09/03/2012      _i686_  (1 CPU)

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               3.35       149.81        12.66    1086002      91746
dm-0              5.37       148.59        12.65    1077154      91728
dm-1              0.04         0.36         0.00       2576          0

10. Shows I/O Statistics of Specific Device
   By default, it displays statistics of all partitions, with -p and device name arguments display only
   disks I/O statistics for specific device only as shown.
[root@tecmint ~]$> iostat -p sda

Linux 2.6.32-279.el6.i686 (tecmint.com)         09/03/2012      _i686_  (1 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.11    0.01    1.44    1.92    0.00   96.52

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               3.32       148.52        12.55    1086002      91770
sda1              0.07         0.56         0.00       4120         18
sda2              3.22       147.79        12.55    1080650      91752

11. Display LVM Statistics
   With -N (Uppercase) parameter displays only LVM statistics as shown.
[root@tecmint ~]$> iostat -N

Linux 2.6.32-279.el6.i686 (tecmint.com)         09/03/2012      _i686_  (1 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.11    0.01    1.39    1.85    0.00   96.64

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               3.20       142.84        12.16    1086002      92466
vg_tecmint-lv_root     5.13       141.68        12.16    1077154      92448
vg_tecmint-lv_swap     0.04         0.34         0.00       2576          0

12. Check Iostat Version
   With -V (Uppercase) parameter display version of iostat as shown.
[root@tecmint ~]$> iostat -V

sysstat version 11.7.3
(C) Sebastien Godard (sysstat  orange.fr)

   The vmstat and iostat contain a number of columns and flags which may not possible to explain in
   detail. If you want to know more about it you may refer man page of vmstat and iostat.
# man vmstat
# man iostat


---

