filename: 5-ways-to-download-files-cli-not-curl-or-wget-20250930.txt
https://www.howtogeek.com/ways-to-download-files-via-the-linux-terminal-that-arent-curl-or-wget/

5 Ways to Download Files via the Linux Terminal (That Aren't curl or wget)
2025-09-27

   Have you ever been stuck in a system with no way to send a simple HTTP request? Perhaps you were
   trying to rescue a system or build a Docker image. Sometimes you need to use the tools at your
   disposal; other times it's just curiosity. I have five ways to connect and download files via HTTP.

First, Understand the Necessary HTTP Header
   To make HTTP connections, you often need to send an HTTP header. You need to manually craft one for
   some of the commands shown below, but it's not complicated.

   An HTTP header is a small block of text that configures an HTTP connection. In most of the examples
   below, the HTTP header will look like the following:

GET / HTTP/1.1\r\n
HOST: example.com\r\n
\r\n

   The first line is called the request line, and it tells the client to fetch something at a given
   path. The path is everything that comes after the .com, .net, etc., in a URL-for example,
   example.com/path/foo.
     * The HOST line states the host name that we connect to.
     * Every line ends with an explicit carriage return (\r) and newline (\n). The entire header
       terminates with an empty line.

   The header shown above fetches the main document at example.com (path "/"). Now that you understand
   the HTTP header, you can use it with some of the following commands.

Telnet, but It Only Works for Plain-Old HTTP Connections
   The following command looks odd, but what's happening is that we're constructing a custom HTTP header
   because Telnet isn't an HTTP client. The brackets represent a subshell, and each command-separated by
   semicolons-gets executed and piped into Telnet one at a time.

$> (echo "GET / HTTP/1.0"; echo "Host: example.com"; echo; sleep 1) | telnet example.com 80

   For example, if you run the following in your terminal, you will see that grep receives each line
   individually:

$> (echo foobar; sleep 1; echo foobaz) | grep foo

   For Telnet, this means it receives each line in the HTTP header individually, as a stream of data.
   The command also sends a blank line (echo) to terminate the connection and then waits for 1 second,
   allowing the server sufficient time to respond. This wait approach is brittle because we're only
   guessing how long the response will take. You may need to adjust that value if the connection closes
   too early.

   Telnet cannot use TLS, and so this will work only for plain HTTP connections.

   HTTP/1.0 automatically closes the connection once the server responds, but HTTP/1.1 does not.
   Therefore, we use HTTP/1.0, because Telnet isn't reliable for downloading large files over HTTP, and
   so we don't need the connection to remain open.

   You can install Telnet on Fedora using the following command:
$> sudo dnf install telnet -y

   For Debian and friends, type the following command:
$> sudo apt install telnet -y

   For Arch users, you're out of luck. Telnet is not available in the official repositories. However,
   PuTTY is, so you can use that instead.
$> sudo pacman -S putty

Netcat Is Slightly Better Than Telnet
   For making HTTP connections, the Netcat command works almost identically to the Telnet command,
   except we feed it the HTTP header as a single block of text. You can see from the examples above and
   below that each line in the HTTP header ends with the "\r\n" control characters-doubled for the last
   line, to signal the end of the header.

   None of the following examples (Netcat or Ncat) are reliable for downloading large files, but they
   will download small files easily.

Plain-Old HTTP
   Netcat does not support TLS (HTTPS), but we can use it to fetch plain old HTTP.
$> printf "GET / HTTP/1.0\r\nHost: example.com\r\n\r\n" | nc example.com 80

   You can install Netcat on Fedora with the following command:
$> sudo dnf install netcat -y

   For Debian and friends, type the following command:
$> sudo apt install netcat-openbsd -y

   For Arch users, Netcat is available in the extra repository:
$> sudo pacman -S openbsd-netcat

With TLS
   If you want to connect over a TLS connection, you will need to use Ncat, an improvement over Netcat,
   which is part of the Nmap project. Ncat can also make plain old HTTP connections, too.
$> printf "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n" | ncat --ssl example.com 443

   You can install Ncat on Fedora using the following command:
$> sudo dnf install nmap-ncat -y

   For Debian and friends, type the following command:
$> sudo apt install ncat -y

   For Arch users, Ncat is part of the Nmap package, and so you should type the following command:
$> sudo pacman -S nmap

When You're Desperate, Use the Requests Library for Python
   The following command works well for plain text or HTML files, but it mishandles binary data (for
   example, images, zips, etc.).
$> python3 -c "import requests; print(requests.get('http://example.com').text)"

   To properly download binary data, like images or zip files, use the following command:
$> python3 -c "import requests; open('output_file.zip','wb').write(requests.get('http://example.com/file.zip').content)"

   Change the "output_file.zip" and the URL.

   While most systems likely have Python 3 (and pip) preinstalled, you'll need to install the requests
   library separately. You can install it either using pip or your distribution's package manager.

   If you don't have administrative privileges, you can install it into the user's home directory using
   pip. Type the following command:
$> pip install --user requests

   You can install requests via Fedora's package manager using the following command:
$> sudo dnf install python3-requests -y

   For Debian and friends, type the following command:
$> sudo apt install python3-requests -y

   For Arch, type the following command:
$> sudo pacman -S python-requests

HTTPie: A Handy Utility
   HTTPie describes itself as a tool for testing REST APIs (services for web pages). The following
   command makes a simple request to get the HTML document found at example.com:
$> http GET example.com

   HTTPie supports several convenient features that make writing URLs a little easier. For example, the
   following command will connect to a server hosted locally on your system on port 3000:
$> http :3000

   Adding parameters to the URL is as simple as using a double equals sign:
$> http httpbin.org/anything foo==bar

   This would craft a URL that looks like http://httpbin.org/anything?foo=bar.

   To make an HTTPS connection, use the following command:
$> https GET example.com

   Although HTTPie primarily aims to help developers, it also works well as a regular HTTP client,
   making it perfect for downloading files.

   You can install HTTPie on Fedora using the following command:
$> sudo dnf install httpie -y

   For Debian and friends, type the following command:
$> sudo apt install httpie -y

   For Arch, type the following command:
$> sudo pacman -S httpie

Aria2: A Swiss Army Knife for the Network
   Aria2 is a powerful file downloader for the terminal. It supports multiple protocols, including HTTP,
   HTTPS, FTP, SFTP, BitTorrent, WebSocket, and more. It also accelerates downloads by making multiple
   parallel connections. To download a file, simply specify the directory with the "-d" flag and the
   output filename with the "-o" flag.
$> aria2c -d /tmp -o test.html http://example.com

   Aria2 works effortlessly for HTTP, HTTPS, downloading HTML documents, and files.

   You can install aria2 on Fedora using the following command:
$> sudo dnf install aria2 -y

   For Debian and friends, type the following command:
$> sudo apt install aria2 -y

   For Arch, type the following command:
$> sudo pacman -S aria2

   Due to improper HTTP handling, the Telnet and Netcat commands work only for files no larger than a
   few kilobytes. To download larger files, you'll need to use a proper HTTP client. The Python, HTTPie,
   and aria2 commands all function as real HTTP clients. To help determine if you're using a real HTTP
   client, ask whether you need to inject HTTP headers manually; if you do, you're probably not using a
   real HTTP client.

   In practice, Telnet and Netcat serve mainly as emergency tools: useful when you need to test a
   connection but have no specialized tools available. At the very least, they provide an interesting
   introduction to the lower levels of an HTTP connection.

   If you want to know more about Telnet, you can read our article on the differences between Telnet
   and SSH. Or, we have another article that details several other use cases for Netcat. Lastly, we
   have [https://www.howtogeek.com/devops/how-to-use-httpie-to-interact-with-apis-from-your-terminal/]a
   detailed guide on how to use HTTPie, which is a very interesting utility.


---

