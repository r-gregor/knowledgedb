filename: howto_update-programs-built-from-source_20241112.txt
https://stackoverflow.com/questions/37895746/how-to-update-programs-built-from-source

How to update programs built from source
Jun 18, 2016

   can you tell me how to update programs installed with "sudo make install". I'm asking if i have to
   uninstall the program and then redo "./autogen.sh" "make" "sudo make install".Someone say that I need
   to remove the program and then build it again after git pull, others say that i can simply reinstall
   it using the updated source.

***
   That depends. If it simply minor update, just go for recompilation and make install.

   If any changes in supplied libs and/or header files were done (e.g. they were renamed), you better
   uninstall software first to get rid of unneeded files on your filesystem.

***
     * You're making it complicated; just make install newer version; if you've got any
       issues, make uninstall and reinstall it.
     * It's because I use a script to update my programs installed with git and I didn't now if include
       simply make install or remove the programs and install them again. From your answer I have
       understood that the second option is better

***
   It's really difficult to uninstall a program that you've installed yourself in a default location. If
   you're very lucky, there will be an uninstall or deinstall target for make, but most of the time
   there isn't. It's probably a matter of manually hunting down the files and removing them, unless you
   reinstall the same version of the code again and somehow keep an eye of where things are actually
   ending up (which would only make the "hunting down" bit marginally easier)

   In the future, you may choose to do things differently: Most source distribution that uses a GNU
   configure script allows you to specify a prefix for the installation using --prefix=path. This allows
   you to make the install in a separate sub-directory, which then would be simple to delete.

   For example, let's say I'm installing a fictional piece of software called ThePackage, version 14.4:
$> ./configure --prefix=/usr/local/stow/thepackage-14.4
$> make && sudo make install

   (I usually use a path under $HOME/local/stow)

   Notice the stow in there? No coincidence that there is a neat utility called precisely this,
   available from the GNU people.

   After having installed the software as above, under .../stow/thepackage-14.4, it's simply a matter of
$> cd /usr/local/stow
$> sudo stow -v thepackage-14.4

   This populates /usr/local with symbolic links so that, for example, any executable in
   /usr/local/stow/thepackage-14.4/bin is available in /usr/local/bin (etc.)

   To uninstall:
$> cd /usr/local/stow
$> sudo stow -D -v thepackage-14.4
$> sudo rm -rf thepackage-14.4

   This even allows you to have several versions of some software installed under /usr/local/stow. To
   "activate" one particular version, just stow -D whatever version you were using and stow the one
   you'd like to test out. If the new version it wasn't performing to your requirements, reverse the
   actions.

   Other build systems can also be made to install under a separate prefix. For example, to make CMake
   install as above, use
$> cmake -DCMAKE_INSTALL_PREFIX=/usr/local/stow/thepackage-14.4
$> make && sudo make install

   You can also use stow with Perl packages, and whatever else installs in a customizable path.

***
   There is (usually) no make uninstall.

   This is why I always install such software into a separate directory, named after the software and
   its version number. For instance, when installing GNU Make 4.1 from source I will install it into a
   directory make-4.1.

   Then I symlink all of the relevant files into a common directory tree that I use in my $PATH,
   $MANPATH, etcetera. I use my own script for doing that, but that is only because I didn't know about
   stow when I wrote it.

   This allows me to install multiple versions side by side and pick the "current" one by removing and
   adding the symlinks in question with my script. I can uninstall software simply by removing its
   directory tree.

   This also works for software with dependencies that also need to be installed in this way. The
   hardest part is in deciding whether to make a dependency version-specific or not.


---

