filename: ssh-config-file_20200512.txt
https://linuxhandbook.com/ssh-config-file/

Use SSH Config File to Manage SSH Connections to Various Remote Servers
May 12, 2020

   If you are even a tad bit familiar with SSH, you know that you can use it to connect to remote
   Linux systems.

   Using SSH to connect to remote system is simple. All you need to do is to use a command like
   this:
ssh user@server_IP

   This connects to the default SSH port 22. You may specify the port as well if you want.

   Now this is all plain and simple if you just have one server. Even if you don't remember the server's
   IP address, you can perform a reverse search to the history using the famous terminal keyboard
   shortcut Ctrl+R and find the SSH command you used in the past.

   But things get complicated when you have several servers to manage. I have around ten servers that I
   connect to from time to time. Some are production servers and some are test servers.

   Now keeping a track of these servers is not easy. Even if I can find the SSH commands from the
   history, it is difficult to guess which IP belongs to which server.

   Of course, I can open my dashboards on Linode, UpCloud, DigitalOcean and Google Cloud to get the IP
   or keep a list on my local system.

   A better and easier way is to use SSH config file.

Using SSH config file for easily connecting to remote servers

   The SSH config file allows you to create different profiles for different host configurations. There
   is no limit to such profiles and you may add as many as possible.

   So, if you connect to multiple remote systems via SSH, creating SSH profiles will be a good move to
   save your time.

   Let me show you how to use it.

Step 1: Create the SSH config file
   When you install SSH, you'll have a ~/.ssh directory created automatically. This direct contains
   your public key, private key a known_hosts file. Your config is also stored here.

   At least on Ubuntu, the SSH config file is not created by default. You can easily create this
   file using the touch command like this:
touch ~/.ssh/config

Step 2: Add an SSH profile in the config file
   Now that you have the SSH config file, you can edit it using Vim or Nano. Let me show you an
   example of the syntax which you should follow.

   Let's say you connect to a server with IP 275.128.172.46. Your username is Alice and the server is
   used for hosting your website. To harden SSH security, you use port 1500 instead of the default SSH
   port 22.

   You can add all this information in the following manner in your ~/.ssh/config file:
Host website
        Hostname 275.128.172.46
        User alice
        Port 1500

   Just save the information in the file. No need to restart any service.

   Now, instead of writing a long command like this:
ssh alice@275.128.172.46 -p 1500

   You can just use this command (tab completion works as well):
ssh website

   When you run the above command, ssh looks for a Host named website in the ~/.ssh/config. If it finds
   a host with that name, it gets all the information related and used it for making an SSH connection.

   You might wonder about a few things, so I'll mention it here:
     * There is no space or tab indention restriction while entering the host information. Space or tab
       indention are used for making the config file easily understandable.
     * The Hostname can be the IP address of the server or a hostname that can be resolved on your
       network.
     * All the parameters like hostname, user and port are optional. However, I personally advise
       keeping at least hostname because that's what you need (and you forget) most of the time.
     * If your SSH config file is wrongly configured, it will result in an error when you try to use it
       for SSH connection.
     * You cannot save passwords in SSH config. I advise adding your public SSH key to the server
       for easy access.

Step 3: Adding multiple profiles in SSH config file
   The previous step gave you an idea about how to add an SSH profile. Let's take it to the next step by
   adding multiple profiles in it.

   Here's what the SSH config file looks like now:
Host website
        Hostname 275.128.172.46
        User alice
        Port 1500
Host forum-server
        Hostname 275.128.172.47
        User alice

Host main-server
        Hostname 275.128.172.49

Host common-test-server
        Hostname test-server

Host *
        User root

   This time, I have added four different SSH profiles in it.

   Did you notice the Host * entry at the end of the file? You can use this entry to for adding a
   parameter common to all profiles if that parameter hasn't been mentioned for the profile explicitly.

   So if I try to use the main-server SSH profile, it will automatically take root user.

   ssh main-server = ssh root@275.128.172.49

Order of the SSH configuration
   The ssh configuration follows the following order:
     * command-line options
     * user's configuration file (~/.ssh/config)
     * system-wide configuration file (/etc/ssh/ssh_config)

   This means that the priority is given to the command you enter and then it looks into ~/.ssh/config
   and then in /etc/ssh/ssh_config.

   So, if you want to override a profile, you can do that using the -o option of the ssh command.

   For example, if I use this command:
ssh -o "User=bob" website

   It will take user bob instead of the user alice as defined in the ~/.ssh/config (in the previous
   step).

There's a lot more to SSH config
   To be honest, there is so much more to SSH config file that cannot be covered in a single article.
   You can use name/IP matching, subnets and what not.

   The scope of this article was to introduce you to SSH config and help you create SSH profiles for
   easily connecting to various remote Linux systems.

   You can always refer to the man page of ssh_config to know more about the parameters you can use
   while creating your SSH config file.

   I hope this SSH tip was helpful to you. If you already use SSH config file and have a some nifty tip
   with you, do share it with the rest of us in the comment section.


---
