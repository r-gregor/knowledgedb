filename: ssh-tunnelling-for-fun-and-profit_multif_20160125.txt
http://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-local-vs-remote/

SSH tunnelling for fun and profit: local vs remote

Local vs Remote SSH port forwarding

   When it comes to the art of SSH tunnelling, there are basically two options where to relay a port to.

   You can relay a port from a remote server to your local machine with ssh -L, hence called local port
   forwarding. A very basic use-case is if your remote server has a MySQL database daemon listening on
   port 3306 and you want to access this daemon from your local computer.

   The second option is to make your local port available on a remote server (ssh -R). Remote port
   forwarding might come in handy if you for example want to make your local web-server available on a
   port of a public server, so that someone can quickly check what your local web-server provides
   without having to deploy it somewhere publicly.

   It should now be pretty easy to remember: Local and remote port forwarding always refers to where to
   relay the port to. The SSH command syntax uses the same easy to remember abbreviations: -L (forward
   to my local machine) and -R (forward to my remote machine).
   Article series
   SSH tunnelling for fun and profit
    1. Local vs Remote
    2. [20]Tunnel options
    3. [21]AutoSSH

   Remote MySQL server (remote port 3306) to local machine on local port 5000:
ssh -L 5000:localhost:3306 cytopia@everythingcli.org

   Local web-server (local port 80) to remote server on remote port 5000:
ssh -R 5000:localhost:80 cytopia@everythingcli.org

Local port forwarding
   (Make a remote port available locally).

   In this example we are going to make a remote MySQL Server (Port 3306) available on our local
   computer on port 5000.

   Let’s start with the general syntax of local port forwarding:
ssh -L <LocalPort>:<RemoteHost>:<RemotePort> sshUser@remoteServer

   Argument Explanation
   LocalPort The port on your local machine where the whole thing should be reachable.
   RemoteHost This specifies on which interface inside the remote server (remoteServer) the daemon is
   listening on. This can be either 127.0.0.1, localhost, a specific IP address or even 0.0.0.0 which
   refers to all interfaces. If you are unsure, simply ssh into the remote machine and check all
   interfaces for port 3306 by issuing:
   netstat -an | grep 3306 | grep LISTEN.
   RemotePort This is the actual port on the remote machine (remoteServer) you want to relay to your
   local machine. In our case (MySQL listens on 3306 by default) it is simply 3306
   sshUser This is the SSH username you have on the remote server
   remoteServer The address (IP or hostname) by which your remote server is reachable via ssh

   Now let’s simply forward our remote MySQL server to our local machine on port 5000.
ssh -L 5000:localhost:3306 cytopia@everythingcli.org

   That’s all the magic! You can now simply reach the remote database from your local machine with mysql
   --host=127.0.0.1 --port=5000 or any other client.

   But wait… which local address does it listen on?

   Yes, you are right! The complete syntax is:
ssh -L [<LocalAddress>]:<LocalPort>:<RemoteHost>:<RemotePort> sshUser@remoteServer

   Argument Explanation
   LocalAddress The local address is an optional parameter. If you do not specify it, the remote port
   will be bound locally to all interfaces (0.0.0.0). So you can also only bind it locally to your
   127.0.0.1 (on your local machine).

   This is the full example:
ssh -L 127.0.0.1:5000:localhost:3306 cytopia@everythingcli.org

Remote port forwarding
   (Make a local port available remotely).

   In this example we are going to make our local web-server (Port 80) available on a remote server on
   Port 5000.

   Let’s start with the general syntax of remote port forwarding:
ssh -R <RemotePort>:<LocalHost>:<LocalPort> sshUser@remoteServer

   Argument Explanation
   RemotePort The port on your remote server (remoteServer) where the whole thing should be reachable.
   LocalHost This specifies on which interface inside your local computer the daemon is listening on.
   This can be either 127.0.0.1, localhost, a specific IP address or even 0.0.0.0 which refers to all
   interfaces. If you are unsure, simply check all interfaces (on your local machine) for port 80 by
   issuing:
   netstat -an | grep 80 | grep LISTEN.
   LocalPort This is the actual port on your local machine you want to relay to the remote server
   (remoteServer). In our case (The web-server listens on 80 by default) it is simply 80
   sshUser This is the SSH username you have on the remote server
   remoteServer The address (IP or hostname) by which your remote server is reachable via ssh

   Now let’s simply forward our local web-server to our remote machine on port 5000.
ssh -R 5000:localhost:80 cytopia@everythingcli.org

   That’s all the magic! You can now simply reach your local webserver via
   [22]http://everythingcli.org:5000.

   But wait… which remote address does it listen on?

   Yes, you are right! The complete syntax is:
ssh -R [<RemoteAddress>]:<RemotePort>:<LocalHost>:<LocalPort> sshUser@remoteServer

   Argument Explanation
   RemoteAddress The remote address is an optional parameter. If you do not specify it, the remote port
   will be bound remotely (on remoteServer) to all interfaces (0.0.0.0). So you can also only bind it
   remotely to a specific interface.

   This is the full example:

   Assuming the IP address of everythingcli.org is 109.239.48.64 and you only want to bind it to this
   IP.
ssh -R 109.239.48.64:5000:localhost:80 cytopia@everythingcli.org

   But wait… it doesn’t work
   By default, the listening socket on the server will be bound to the loopback interface only. This may
   be overridden by specifying RemoteAddress. Specifying a RemoteAddress will only succeed if the
   server’s GatewayPorts option is enabled (on the remote server):
$ vim /etc/ssh/sshd_config
GatewayPorts yes

Some more details

Ports below 1024

   Every system user can allocate ports above and including 1024 (high ports). Ports below that require
   root privileges.
   So If you want to relay any port to a port to for example 10, you must do that like so:

   As you allocate a low port on your local machine, you must either do that as root (locally) or with
   sudo (locally):
sudo ssh -L 10:localhost:3306 cytopia@everythingcli.org

   As you allocate a low port on the remote server, you will need to ssh into the machine as root:
ssh -R 10:localhost:80 root@everythingcli.org

   _
   Summary
   Article Name
   SSH tunnelling for fun and profit: local vs remote port forwarding
   Description
   SSH Tunnel - Local and Remote Port Forwarding Explained.
   Author
   cytopia



---
http://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-tunnel-options/

SSH tunnelling for fun and profit: Tunnel options

   If you have read the previous article of this series, you should be able to create forward and
   reverse tunnels with ease. In addition to the previously shown examples I will address some more
   advanced options for SSH tunnels in general.
   Article series
   SSH tunnelling for fun and profit
    1. [17]Local vs Remote
    2. Tunnel options
    3. [18]AutoSSH

SSH Login shell
   Remember the following example:
ssh -L 5000:localhost:3306 cytopia@everythingcli.org

   Once you have executed the above command, a tunnel is established. However, you will also be logged
   in into the remote server with a SSH session. If you simply want to do some port forwarding you will
   not need or might not even want a remote login session. You can disable it via -N, which is a very
   common option for SSH tunnels:
ssh -N -L 5000:localhost:3306 cytopia@everythingcli.org

   The -N option is also very useful when you want to create SSH tunnels via cron
   Argument Explanation
   -N After you connect just hang there (you won’t get a shell prompt)
   SSH man: Do not execute a remote command.
   Note: Only works with SSHv2

   So if you are not going to execute remote commands and will not need a login shell, you also do not
   need to request a pseudo terminal in the first place.
ssh -T -N -L 5000:localhost:3306 cytopia@everythingcli.org

   Argument Explanation
   -T Disable pseudo-terminal allocation.
   This makes it also safe for binary file transfer which might contain escape characters such as ~C.

SSH tunnel via cron
   Imagine you want to have a SSH tunnel be established (or checked and if it doesn’t run re-opened) via
   cron every hour. For that to work, SSH must go into background. For that we use -f.
ssh -f -L 5000:localhost:3306 cytopia@everythingcli.org

   Argument Explanation
   -f       Requests ssh to go to background just before command execution.

   But hey, if SSH is in the background anyway, we do not need a login shell (-N) and therefore also do
   not need a tty (-T). So the full command ready for cron would be:
ssh -f -T -N -L 5000:localhost:3306 cytopia@everythingcli.org

   Note: Be aware that this example requires private/public key authentication as cron will not be able
   to enter passwords.

SSH tunnel on a non-standard port
   What if the SSH server is listening on a non-standard port (not tcp22). You can always add a port
   option. Let’s imagine SSH itself is listening on port 1022:
ssh -T -N -L 5000:localhost:3306 cytopia@everythingcli.org -p 1022

   Argument Explanation
   -p       Port to connect to on the remote host.

SSH tunnel with a non standard private key
   Let’s assume you have many different private keys for different servers. If not explicitly specified,
   SSH will look for a file called ~/.ssh/id_rsa. In this case however, your file is called
   ~/.ssh/id_rsa-cytopia@everythingcli. So you will also pass this information to the tunnel command.
ssh -T -N -L 5000:localhost:3306 cytopia@everythingcli.org -i ~/.ssh/id_rsa-cytopia@everythingcli

SSH tunnel via SSH config
   The most complex example from this tutorial is:
ssh -f -T -N -L 5000:localhost:3306 cytopia@everythingcli.org -p 1022 -i ~/.ssh/id_rsa-cytopia@everythingcli

   We all are lazy-ass and don’t want to type the whole thing every time we need a quick tunnel. This is
   where ~/.ssh/config comes into play.

Adding user and host
$ vim ~/.ssh/config
 Host cli
    HostName      everythingcli.org
    User          cytopia

   With this, we have created an alias cli for host everythingcli.org with user cytopia. Now our command
   can be written like this:
ssh -f -T -N -L 5000:localhost:3306 cli -p 1022 -i ~/.ssh/id_rsa-cytopia@everythingcli

Adding port and identity file
$ vim ~/.ssh/config
 Host cli
    HostName      everythingcli.org
    User          cytopia
    Port          1022
    IdentityFile  ~/.ssh/id_rsa-cytopia@everythingcli

   Now the ssh command looks like this:
ssh -f -T -N -L 5000:localhost:3306 cli

Adding tunnel config
   In the above example we have a generic configuration for the host everthingcli.org which will work
   for normal ssh connection as well as for establishing a tunnel. Let’s copy all of the above block
   under a new alias cli-mysql-tunnel and add the tunnel specific configuration:
$ vim ~/.ssh/config
 Host cli-mysql-tunnel
    HostName      everythingcli.org
    User          cytopia
    Port          1022
    IdentityFile  ~/.ssh/id_rsa-cytopia@everythingcli
    LocalForward  5000 localhost:3306

   Now we can create the tunnel in a much shorter way:
ssh -f -T -N cli-mysql-tunnel



---
http://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/

SSH tunnelling for fun and profit: Autossh

   Now that you are able to create various forward or reverse SSH tunnels with lots of options and even
   simplify your live with ~/.ssh/config you probably also want to know how make a tunnel persistent. By
   persistent I mean, that it is made sure the tunnel will always run. For example, once your ssh
   connection times out (By server-side timeout), your tunnel should be re-established automatically.

   I know there are plenty of scripts out there which try to do that somehow. Some scripts use a while
   loop, others encourage you to run a remote command (such as tail) to make sure you don’t run into
   timeout and various others. But actually, you don’t want to re-invent the wheel and stick to
   bullet-proof already existing solutions. So the game-changer here is [21]AutoSSH.
   Article series
   SSH tunnelling for fun and profit
    1. [22]Local vs Remote
    2. [23]Tunnel options
    3. AutoSSH

autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" -L 5000:localhost:3306 cytopia@everythingc
li.org

   or fully configured (via ~/.ssh/config) for background usage
autossh -M 0 -f -T -N cli-mysql-tunnel

What is AutoSSH
   [24]http://www.harding.motd.ca/autossh/README

     Autossh is a program to start a copy of ssh and monitor it, restarting it as necessary should it
     die or stop passing traffic.

Install AutoSSH
   How to install AutoSSH on various systems via their package manager.
   OS Install method
   Debian / Ubuntu $ sudo apt-get install autossh
   CentOS / Fedora / RHEL $ sudo yum install autossh
   ArchLinux $ sudo pacman -S autossh
   FreeBSD # pkg install autossh
   or
   # cd /usr/ports/security/autossh/ && make install clean
   OSX $ brew install autossh

   Alternatively you can also compile and install AutoSSH from source:
wget http://www.harding.motd.ca/autossh/autossh-1.4e.tgz
gunzip -c autossh-1.4e.tgz | tar xvf -
cd autossh-1.4e
./configure
make
sudo make install

   Note: Make sure to grab the latest version which can be found here:
   [25]http://www.harding.motd.ca/autossh/.

Basic usage
usage: autossh [-V] [-M monitor_port[:echo_port]] [-f] [SSH_OPTIONS]

   Ignore -M for now. -V simply displays the version and exits. The important part to remember is that
   -f (run in background) is not passed to the ssh command, but handled by autossh itself. Apart from
   that you can then use it just like you would use ssh to create any forward or reverse tunnels.

   Let’s take the basic example from part one of this article series (forwarding a remote MySQL port to
   my local machine on port 5000):
ssh -L 5000:localhost:3306 cytopia@everythingcli.org

   This can simply be turned into an autossh command:
autossh -L 5000:localhost:3306 cytopia@everythingcli.org

   This is basically it. Not much magic here.

   Note 1: Before you use autossh, make sure the connection works as expected by trying it with ssh
   first.

   Note 2: Make sure you use public/private key authentification instead of password-based
   authentification when you use -f. This is required for ssh as well as for autossh, simply because in
   a background run a passphrase cannot be entered interactively.

AutoSSH and -M (monitoring port)
   With -M AutoSSH will continuously send data back and forth through the pair of monitoring ports in
   order to keep track of an established connection. If no data is going through anymore, it will
   restart the connection. The specified monitoring and the port directly above (+1) must be free. The
   first one is used to send data and the one above to receive data on.

   Unfortunately, this is not too handy, as it must be made sure both ports (the specified one and the
   one directly above) a free (not used). So in order to overcome this problem, there is a better
   solution:

   ServerAliveInterval and ServerAliveCountMax – they cause the SSH client to send traffic through the
   encrypted link to the server. This will keep the connection alive when there is no other activity and
   also when it does not receive any alive data, it will tell AutoSSH that the connection is broken and
   AutoSSH will then restart the connection.

   The [26]AutoSSH man page also recommends the second solution:

     -M [:echo_port],
     …
     In many ways this [ServerAliveInterval and ServerAliveCountMax options] may be a better solution
     than the monitoring port.

   You can disable the built-in AutoSSH monitoring port by giving it a value of 0:
autossh -M 0

   Additionally you will also have to specify values for ServerAliveInterval and ServerAliveCountMax
autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3"

   So now the complete tunnel command will look like this:
autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" -L 5000:localhost:3306 cytopia@everythingc
li.org

   Option Description
   ServerAliveInterval ServerAliveInterval: number of seconds that the client will wait before sending a
   null packet to the server (to keep the connection alive).
   Default: 30
   ServerAliveCountMax Sets the number of server alive messages which may be sent without ssh receiving
   any messages back from the server. If this threshold is reached while server alive messages are being
   sent, ssh will disconnect from the server, terminating the session.
   Default: 3

AutoSSH and ~/.ssh/config
   In the previous article we were able to simplify the tunnel command via ~/.ssh/config. Luckily
   autossh is also aware of this file, so we can still keep our configuration there.

   This was our very customized configuration for ssh tunnels which had custom ports and custom rsa
   keys:
$ vim ~/.ssh/config
 Host cli-mysql-tunnel
    HostName      everythingcli.org
    User          cytopia
    Port          1022
    IdentityFile  ~/.ssh/id_rsa-cytopia@everythingcli
    LocalForward  5000 localhost:3306

   We can also add the ServerAliveInterval and ServerAliveCountMax options to that file in order to make
   things even easier.
$ vim ~/.ssh/config
 Host cli-mysql-tunnel
    HostName      everythingcli.org
    User          cytopia
    Port          1022
    IdentityFile  ~/.ssh/id_rsa-cytopia@everythingcli
    LocalForward  5000 localhost:3306
    ServerAliveInterval 30
    ServerAliveCountMax 3

   If you recall all the ssh options we had used already, we can now simply start the autossh tunnel
   like so:
autossh -M 0 -f -T -N cli-mysql-tunnel

AutoSSH environment variables
   AutoSSH can also be controlled via a couple of environmental variables. Those are useful if you want
   to run AutoSSH unattended via cron, using shell scripts or during boot time with the help of systemd
   services. The most used variable is probably AUTOSSH_GATETIME:

     AUTOSSH_GATETIME
     How long ssh must be up before we consider it a successful connection. Default is 30 seconds. If
     set to 0, then this behaviour is disabled, and as well, autossh will retry even on failure of
     first attempt to run ssh.

   Setting AUTOSSH_GATETIME to 0 is most useful when running AutoSSH at boot time.

   All other environmental variables including the once responsible for logging options can be found in
   the [27]AutoSSH Readme.

AutoSSH during boot with systemd
   If you want a permanent SSH tunnel already created during boot time, you will (nowadays) have to
   create a systemd service and enable it. There is however an important thing to note about systemd and
   AutoSSH: -f (background usage) already implies AUTOSSH_GATETIME=0, however -f is not supported by
   systemd.

     [28]http://www.freedesktop.org/software/systemd/man/systemd.service.html
     […] running programs in the background using “&”, and other elements of shell syntax are not
     supported.

   So in the case of systemd we need to make use of AUTOSSH_GATETIME. Let’s look at a very basic
   service:
$ vim /etc/systemd/system/autossh-mysql-tunnel.service
[Unit]
Description=AutoSSH tunnel service everythingcli MySQL on local port 5000
After=network.target

[Service]
Environment="AUTOSSH_GATETIME=0"
ExecStart=/usr/bin/autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" -NL 5000:localhost:3306
 cytopia@everythingcli.org -p 1022

[Install]
WantedBy=multi-user.target

   Tell systemd that we have added some stuff:
systemctl daemon-reload

   Start the service
systemctl start autossh-mysql-tunnel.service

   Enable during boot time
systemctl enable autossh-mysql-tunnel.service

   _
   This is basically all I found useful about AutoSSH. If you thing I have missed some important parts
   or you know any other cool stuff, let me know and I will update this post.
