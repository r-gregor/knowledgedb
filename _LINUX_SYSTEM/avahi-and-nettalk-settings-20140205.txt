filename: avahi-and-nettalk-settings_20140205.txt
https://wiki.archlinux.org/index.php/avahi

Avahi

          "[14]Avahi is a free [15]Zero-configuration networking (zeroconf) implementation,
          including a system for multicast DNS/DNS-SD service discovery. It allows programs to
          publish and discover services and hosts running on a local network with no specific
          configuration. For example you can plug into a network and instantly find printers
          to print to, files to look at and people to talk to. It is licensed under the GNU
          Lesser General Public License (LGPL)."

Installation

   [30]Install [31]avahi and [32]nss-mdns, available in the [33]official repositories.

   You can manage the Avahi daemon with avahi-daemon.service [34]using systemd.

Using Avahi

Obtaining IPv4LL IP address

   By default, if you are getting IP using DHCP, you are using the [35]dhcpcd package. It can
   attempt to obtain an IPv4LL address if it failed to get one via DHCP. By default this
   option is disabled. To enable it, comment noipv4ll string:
/etc/dhcpcd.conf
...
#noipv4ll
...

   Alternatively, run avahi-autoipd:
# avahi-autoipd -D

Hostname resolution

   Avahi also allows you to access computers using their hostnames. Note: you must install
   [36]nss-mdns for this to work, and have avahi-daemon.service enabled and running.

   Suppose you have machines with names maple, fig and oak, all running Avahi. Avahi can be
   set up so that you do not have to manage a /etc/hosts file for each computer. Instead you
   can simply use maple.local to access whatever services maple has. However by default,
   .local querying is disabled in Arch Linux. To enable it edit the file /etc/nsswitch.conf
   and change the line:
hosts: files myhostname dns

   to:
hosts: files myhostname mdns_minimal [NOTFOUND=return] dns

   The mdns_minimal module handles queries for the .local TLD only. In case you have
   configured Avahi to use a different TLD, you'll also need to add the full mdns module at
   the end. There also are IPv4-only and IPv6-only modules mdns[46](_minimal).

   Avahi includes several utilities which help you discover the services running on a network.
   For example, run
avahi-browse -alr

   to discover services in your network.

   The Avahi Zeroconf Browser (avahi-discover) shows the various services on your network. You
   can also browse SSH and VNC Servers using bssh and bvnc respectively.

   There's a good list of software with Avahi support at their website:
   [37]http://avahi.org/wiki/Avah4users
   Note: avahi-discover needs pygtk and python-dbus to be installed.

File sharing

NFS

   If you have an [38]NFS share set up, you can use Avahi to be able to automount them in
   Zeroconf-enabled browsers (such as Konqueror on KDE and Finder on OS X). Create a .service
   file in /etc/avahi/services with the following contents:
/etc/avahi/services/nfs_Zephyrus_Music.service
<?xml version="1.0" standalone='no'?>
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">NFS Music Share on %h</name>
  <service>
    <type>_nfs._tcp</type>
    <port>2049</port>
    <txt-record>path=/data/shared/Music</txt-record>
  </service>
</service-group>

   The port is correct if you have insecure as an option in your /etc/exports; otherwise, it
   needs to be changed (note that insecure is needed for OS X clients). The path is the path
   to your export, or a subdirectory of it. For some reason the automount functionality has
   been removed from Leopard, however [39]a script is available. This was based upon [40]this
   post.

Samba

   Should work out-of-the-box.

GShare

   You can grab [41]gshare from the [42]Arch User Repository and have shared files between the
   LAN, with no configuration, no hours in samba hacking, no nothing - it just works.

Vsftpd

   Sourced from [43]ubuntuforums.org. If you would rather use a regular ftp service, install
   vsftpd and avahi. Change the settings of vsftpd according to what is shown on the
   ubuntuforums page or according to your own personal preferences (See 'man vsftpd.conf).

   Create a ftp.service file in /etc/avahi/services and paste in that file
<?xml version="1.0" standalone='no'?>
   <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
   <service-group>
   <name>FTP file sharing</name>
   <service>
   <type>_ftp._tcp</type>
   <port>21</port>
   </service>
   </service-group>

   When you are done, [44]restart the avahi-daemon.service and vsftpd.service services.

   After that you should be able to browse through the ftp server from another computer in
   your network. The steps shown in this section are created so that the ftp server is
   'advertised' by avahi to the local Zeroconf network.

   Unless you are using GNOME or KDE, you might not be able to log in to the ftp server
   directly through your file manager, and so you will have to use a ftp client pointed to the
   IP address of the server or the hostname of the machine (as shown in [45]this section).

Giver

   [46]Giver is a mono program that allows simple file-sharing between two desktops when both
   are running Giver. All you need to do is click and drag the file to the name or picture of
   the person you wish to send the file to.

   A package is on the [47]giver.

   Note that this depends on gnome-sharp, which has heavy GNOME dependencies.

Link-Local (Bonjour/Zeroconf) chat

   Avahi can be used for bonjour protocol support under linux. Check [48]Wikipedia:Comparison
   of instant messaging clients or [49]List of Applications#Instant messaging for a list of
   clients supporting the bonjour protocol.

Airprint from Mobile Devices

   Avahi along with CUPS also provides the capability to print to just about any printer from
   airprint compatible mobile devices. In order to enable print capability from your device,
   simply create an avahi service file for your printer in /etc/avahi/services and restart
   avahi. An example of a generic services file for an HP-Laserjet printer would be similar to
   the following with the name, rp, ty, adminurl and note fields changed. Save the file as
   /etc/avahi/services/youFileName.service:
 <?xml version="1.0" standalone='no'?>
 <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
 <service-group>
   <name>yourPrnterName</name>
   <service>
     <type>_ipp._tcp</type>
     <subtype>_universal._sub._ipp._tcp</subtype>
     <port>631</port>
     <txt-record>txtver=1</txt-record>
     <txt-record>qtotal=1</txt-record>
     <txt-record>rp=printers/yourPrnterName</txt-record>
     <txt-record>ty=yourPrnterName</txt-record>
     <txt-record>adminurl=[50]http://198.168.7.15:631/printers/yourPrnterName</txt-record>
     <txt-record>note=Office Laserjet 4100n</txt-record>
     <txt-record>priority=0</txt-record>
     <txt-record>product=virtual Printer</txt-record>
     <txt-record>printer-state=3</txt-record>
     <txt-record>printer-type=0x801046</txt-record>
     <txt-record>Transparent=T</txt-record>
     <txt-record>Binary=T</txt-record>
     <txt-record>Fax=F</txt-record>
     <txt-record>Color=T</txt-record>
     <txt-record>Duplex=T</txt-record>
     <txt-record>Staple=F</txt-record>
     <txt-record>Copies=T</txt-record>
     <txt-record>Collate=F</txt-record>
     <txt-record>Punch=F</txt-record>
     <txt-record>Bind=F</txt-record>
     <txt-record>Sort=F</txt-record>
     <txt-record>Scan=F</txt-record>
     <txt-record>pdl=application/octet-stream,application/pdf,application/postscript,image/jpeg,imag
e/png,image/urf</txt-record>
     <txt-record>URF=W8,SRGB24,CP1,RS600</txt-record>
   </service>
 </service-group>

   Alternatively,
   [51]https://raw.github.com/tjfontaine/airprint-generate/master/airprint-generate.py can be
   used to generate Avahi service files. It depends on python2 and pycups. The script can be
   run using:
# python2 airprint-generate.py -d /etc/avahi/services

Firewall

   Be sure to open UDP port 5353 if you're using iptables:
 # iptables -A INPUT -p udp -m udp --dport 5353 -j ACCEPT

   If you're following the more-than-useful [52]Simple Stateful Firewall format for your
   firewall:
 # iptables -A UDP -p udp -m udp --dport 5353 -j ACCEPT



---
http://www.fiz-ix.com/2012/12/using-avahi-in-ubuntu-to-broadcast-services-to-macs-with-bonjour/

[18]Using Avahi in Ubuntu to Broadcast Services to Macs with Bonjour

   Posted December 7th, 2012. Filed under [19]Guides [20]Ubuntu

   If you followed [21]this guide, your Ubuntu machine can now serve files to Macs on your
   local area network (LAN) using AFP. It would be nice if this Ubuntu/Netatalk Apple file
   server was discovered automatically by your Macs. This can be accomplished by installing
   Avahi, an implementation of Zeroconf similar to Apple’s Bonjour that allows services
   running on your Ubuntu machine to be broadcast on the LAN. The following guide will get you
   started with the installation. When you are finished, the Ubuntu/Netatalk Apple file server
   will appear in Finder on your Macs connected to your LAN.

   Install the Avahi daemon using the apt-get package management software included with
   Ubuntu. Open a terminal and type the following command:
sudo apt-get install avahi-daemon

   I’ve noticed that Avahi may already be installed by default if you are using a newer
   version of Ubuntu. The Avahi service should start automatically when your machine boots but
   to make sure type the following command:
sudo update-rc.d avahi-daemon defaults

   Next, create a file that will specify information about the AppleShare file server (i.e.
   Netatalk server) running on your Ubuntu machine.
sudo vim /etc/avahi/services/afpd.service

   Copy and paste the following XML code into this file.
<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
<name replace-wildcards="yes">%h</name>
<service>
<type>_afpovertcp._tcp</type>
<port>548</port>
</service>
</service-group>

   Then, restart Avahi.
sudo /etc/init.d/avahi-daemon restart

   That’s it. After a few minutes your AFP server running on you Ubuntu machine should show up
   in Finder on your Mac.
   If you have enjoyed this entry. Please feel free to bookmark it using your favorite social
   bookmarking site
     * [22]DesignFloat
     * [23]Delicious
     * [24]Digg
     * [25]StumbleUpon
     * [26]Technorati

5 Responses so far

    1. Rommel says:
       [27]May 11, 2013 at 5:04 am
       Thanks for this! Very helpful! The only issue I have is that I can not copy files to
       the share from my MBP to the remote machine. But I can create folders. Any suggestion?
       [28]Reply
    2. Rommel says:
       [29]May 11, 2013 at 5:13 am
       Oh man. My mistake. I can write to the ext4 shared dir but unable to copy files from my
       MBP to an external drive on the remote machine that is shared. I think there is a
       permission issue. The attached shared drive has to be mounted as root. I think there is
       where my problem is. I can connect as root when accessing the afp shares.
       At least I know there wasn’t any issue with your tut.
       Thanks
       [30]Reply
    3. Rommel says:
       [31]May 11, 2013 at 5:15 am
       guhhh… no edit
       I can *NOT* connect as root when accessing the afp shares.
       [32]Reply
    4. GHS says:
       [33]July 22, 2013 at 8:54 pm
       Tried this on a Raspberry Pi running Raspbian, and unfortunately it doesn’t work. The
       daemon is running (saw it listed on reboot) and the service file is in place, but the
       computer’s not visible from a Mac at [name of Pi].local. I even verified the name in
       /etc/hostname.
       Thanks anyway.



---
http://www.clearfoundation.com/docs/man/index.php?s=5&n=avahi-daemon.conf

   avahi-daemon.conf - avahi-daemon configuration file

SYNOPSIS

   /etc/avahi/avahi-daemon.conf

DESCRIPTION

   avahi-daemon.conf is the configuration file for avahi-daemon.

SECTION [SERVER]

   host-name= Set the host name avahi-daemon tries to register on the LAN. If omited defaults
          to the system host name as set with the sethostname() system call.
   domain-name= Set the default domain name avahi-daemon tries to register its host name and
          services on the LAN in. If omitted defaults to ".local".
   browse-domains= Set a comma seperated list of browsing domains (in addition to the default
          one and those announced inside the default browsing domain). Please note that the
          user may specify additional browsing domains on the client side, either by setting
          $AVAHI_BROWSE_DOMAINS to a list of colon seperated domains or by adding them to the
          XDG config file ~/.config/avahi/browse-domains (seperated by newlines).
   use-ipv4= Takes a boolean value ("yes" or "no"). If set to "no" avahi-daemon will not use
          IPv4 sockets. Default is "yes".
   use-ipv6= Takes a boolean value ("yes" or "no"). If set to "no" avahi-daemon will not use
          IPv6 sockets. Default is "yes".
   check-response-ttl= Takes a boolean value ("yes" or "no"). If set to "yes", an additional
          security check is activated: incoming IP packets will be ignored unless the IP TTL
          is 255. Earlier mDNS specifications required this check. Since this feature may be
          incompatible with newer implementations of mDNS it defaults to "no". On the other
          hand it provides extra security.
   use-iff-running= Takes a boolean value ("yes" or "no"). If set to "yes" avahi-daemon
          monitors the IFF_RUNNING flag bit which is used by some (modern) network drivers to
          tell user space if a network cable is plugged in (in case of copper ethernet), or
          the network card is associated with some kind of network (in case of WLAN). If
          IFF_RUNNING is set avahi-daemon will automatically announce its services on that
          network. Unfortunately far too many network drivers do not support this flag or
          support it in a broken way. Therefore this option defaults to "no".
   enable-dbus= Takes either "yes", "no" or "warn". If set to "yes" avahi-daemon connects to
          D-Bus, offering an object oriented client API. It is only available if Avahi has
          been compiled with --enable-dbus in which case it defaults to "yes". "warn" behaves
          like "yes", but the daemon starts up even when it fails to connect to a D-Bus
          daemon. In addition, if the connection to the D-Bus daemon is terminated we try to
          reconnect. (Unless we are in a chroot() environment where this definitely will
          fail.)
   disallow-other-stacks= Takes a boolean value ("yes" or "no"). If set to "yes" no other
          process is allowed to bind to UDP port 5353. This effectively impedes other mDNS
          stacks from running on the host. Use this as a security measure to make sure that
          only Avahi is responsible for mDNS traffic. Please note that we do no recommend
          running multiple mDNS stacks on the same host simultaneously. This hampers
          reliability and is a waste of resources. However, to not annoy people this option
          defaults to "no".
   allow-point-to-point= Takes a boolean value ("yes" or "no"). If set to "yes" avahi-daemon
          will make use of interfaces with the POINTOPOINT flag set. This option defaults to
          "no" as it might make mDNS unreliable due to usually large latencies with such links
          and opens a potential security hole by allowing mDNS access from Internet
          connections. Use with care and YMMV!



SECTION [WIDE-AREA]

   enable-wide-area= Takes a boolean value ("yes" or "no"). Enable wide-area DNS-SD, aka
          DNS-SD over unicast DNS. If this is enabled only domains ending in .local will be
          resolved on mDNS, all other domains are resolved via unicast DNS. If you want to
          maintain multiple different multicast DNS domains even with this option enabled we
          encourage you to use subdomains of .local, such as "kitchen.local". This option
          defaults to "yes".



SECTION [PUBLISH]

   disable-publishing= Takes a boolean value ("yes" or "no"). If set to "yes", no record will
          be published by Avahi, not even address records for the local host. Avahi will be
          started in a querying-only mode. Use this is a security measure. This option
          defaults to "no"
   disable-user-service-publishing= Takes a boolean value ("yes" or "no"). If set to "yes",
          Avahi will still publish address records and suchlike but will not allow user
          applications to publish services. Use this is a security measure. This option
          defaults to "no"
   add-service-cookie= Takes a boolean value ("yes" or "no"). If set to "yes" an implicit TXT
          entry will be added to all locally registered services, containing a cookie value
          which is chosen randomly on daemon startup. This can be used to detect if two
          services on two different interfaces/protocols are actually identical. Defaults to
          "yes".
   publish-addresses= Takes a boolean value ("yes" or "no"). If set to "yes" avahi-daemon will
          register mDNS address records for all local IP addresses. Unless you want to use
          avahi-daemon exclusively for browsing it's recommended to enable this. If you plan
          to register local services you need to enable this option. Defaults to "yes".
   publish-hinfo= Takes a boolean value ("yes" or "no"). If set to "yes" avahi-daemon will
          register an mDNS HINFO record on all interfaces which contains information about the
          local operating system and CPU, which might be useful for administrative purposes.
          This is recommended by the mDNS specification but not required. For the sake of
          privacy you might choose to disable this feature. Defaults to "yes."
   publish-workstation= Takes a boolean value ("yes" or "no"). If set to "yes" avahi-daemon
          will register a service of type "_workstation._tcp" on the local LAN. This might be
          useful for administrative purposes (i.e. browse for all PCs on the LAN), but is not
          required or recommended by any specification. Newer MacOS X releases register a
          service of this type. Defaults to "yes".
   publish-domain= Takes a boolean value ("yes" or "no"). If set to "yes" avahi-daemon will
          announce the locally used domain name (see above) for browsing by other hosts.
          Defaults to "yes".
   publish-dns-servers= Takes a comma seperated list of IP addresses for unicast DNS servers.
          You can use this to announce unicast DNS servers via mDNS. When used in conjunction
          with avahi-dnsconfd on the client side this allows DHCP-like configuration of
          unicast DNS servers.
   publish-resolv-conf-dns-servers= Takes a boolean value ("yes" or "no"). If set to "yes"
          avahi-daemon will publish the unicast DNS servers specified in /etc/resolv.conf in
          addition to those specified with publish-dns-servers. Send avahi-daemon a SIGHUP to
          have it reload this file. Defaults to "no".



SECTION [REFLECTOR]

   enable-reflector= Takes a boolean value ("yes" or "no"). If set to "yes" avahi-daemon will
          reflect incoming mDNS requests to all local network interfaces, effectively allowing
          clients to browse mDNS/DNS-SD services on all networks connected to the gateway. The
          gateway is somewhat intelligent and should work with all kinds of mDNS traffic,
          though some functionality is lost (specifically the unicast reply bit, which is used
          rarely anyway). Make sure to not run multiple reflectors between the same networks,
          this might cause them to play Ping Pong with mDNS packets. Defaults to "no".
   reflect-ipv= Takes a boolean value ("yes" or "no"). If set to "yes" and enable-reflector is
          enabled, avahi-daemon will forward mDNS traffic between IPv4 and IPv6, which is
          usually not recommended. Defaults to "no".



SECTION [RLIMITS]

   This section is used to define system resource limits for the daemon. See [66]setrlimit(2)
   for more information. If any of the options is not specified in the configuration file,
   avahi-daemon does not change it from the system defaults.
   rlimit-as= Value in bytes for RLIMIT_AS (maximum size of the process's virtual memory).
          Sensible values are heavily system dependent.
   rlimit-core= Value in bytes for RLIMIT_CORE (maximum core file size). Unless you want to
          debug avahi-daemon, it is safe to set this to 0.
   rlimit-data= Value in bytes for RLIMIT_DATA (maximum size of the process's data segment).
          Sensible values are heavily system dependent.
   rlimit-fsize= Value for RLIMIT_FSIZE (maximum size of files the process may create). Since
          avahi-daemon shouldn't write any files to disk, it is safe to set this to 0.
   rlimit-nofile= Value for RLIMIT_NOFILE (open file descriptors). avahi-daemon shouldn't need
          more than 15 to 20 open file descriptors concurrently.
   rlimit-stack= Value in bytes for RLIMIT_STACK (maximum size of the process stack). Sensible
          values are heavily system dependent.
   rlimit-nproc= Value for RLIMIT_NPROC (number of process of user). avahi-daemon forks of a
          helper process on systems where [67]chroot(2) is available. Therefore this value
          should not be set below 2.



AUTHORS

   The Avahi Developers <avahi (at) lists (dot) freedesktop (dot) org>; Avahi is available
   from [68]http://avahi.org/

SEE ALSO

   [69]avahi-daemon(8), [70]avahi-dnsconfd(8)


---
http://mybookworld.wikidot.com/netatalk-tutorial

   Netatalk Tutorial

   Ladies and Gentlemen, a tutorial on how to get Netatalk and Avahi running on your MyBook.

   The MyBook unit used for this was a 1TB single disc version.

   None of this would have been possible without Clifford Meece and his efforts in creating
   the Netatalk and Avahi builds (and his scripts).

   Clifford website is cliffordmeece.com

   The Tutorial:

   NOTE: There are now Optware versions of avahi and netatalk available! This means you do not
   have to install libc-dev, however you will still need to create startup scripts.

   Get Clifford's packages: See bottom of this screen under 'files' (you must be logged in to
   see this option).

   Files: avahi, S90optware, netatalk_package.ipk, avahi_package.ipk

   Put them in /shares/internal/Public

   Do the following in your ssh shell.

   ipkg install libc-dev
   ldconfig
   mv /shares/internal/Public/avahi /opt/etc/init.d
   chmod u+x /opt/etc/init.d/avahi
   ln -s /opt/etc/init.d/avahi /opt/etc/init.d/S99avahi
   mv /shares/internal/Public/S90optware /etc/init.d
   chmod u+x /etc/init.d/S90optware

   S90optware is a script that will run on startup (make sure it is executable with chmod
   u+x). It will run from /etc/init.d and go into /opt/etc/init.d and run any startup scripts
   there. It makes optware easier to deal with.

   ipkg install /shares/internal/Public/avahi_package.ipk
   ldconfig
   ipkg install /shares/internal/Public/netatalk_package.ipk
   ldconfig

   Have a look and make sure 'opt/lib' is in /etc/ld.so.conf

   Add user 'avahi' to /etc/password - remember to give a unique user id (mine is 107)
   Add group 'avahi' to /etc/group - copy the format of an existing line

   Setting up netatalk

   cd /opt/etc/netatalk/
   nano netatalk.conf

   Make these changes:-

   # Set which daemons to run (papd is dependent upon atalkd):
   ATALKD_RUN=no
   PAPD_RUN=no
   CNID_METAD_RUN=yes
   AFPD_RUN=yes
   TIMELORD_RUN=no
   A2BOOT_RUN=no

   Save it.

   Optional (The default is to share home directories. I had already created a user and
   password in the WD web interface. I then modified that user's home directory in
   /etc/password. I made /shares/internal the home for my user, so when I 'connect as' from a
   mac, I can log in as my user and it goes straight to /shares/internal).

   nano AppleVolumes.default (here you can specify exact directories and users. I didn't
   bother, but you can find info on google about this). Here is a great tutorial about setting
   up time machine to a remote disc and it covers in detail the options for netatalk shares.

   [80]http://www.kremalicious.com/2008/06/ubuntu-as-mac-file-server-and-time-machine-volume/

   Setting up avahi to broadcast your box

   cd /opt/etc/avahi/services
   nano afpd.service

   paste in this:-
<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
<name replace-wildcards="yes">%h</name>
<service>
<type>_afpovertcp._tcp</type>
<port>548</port>
</service>
<service>
<type>_device-info._tcp</type>
<port>0</port>
<txt-record>model=Xserve</txt-record>
</service>
</service-group>

   Save it.

   This will get avahi to advertise your MyBook like it is an X-serve.

   You'll see it in the Leopard side bar…..

   But not until we quickly create a script in /etc/init.d in order to fire off afpd (the part
   of netatalk we are using) on boot up.

   nano /opt/etc/init.d/S98afpd

   paste in:-
#!/bin/sh
#
# Start afp daemon
#
start() {
        echo "Starting afpd"
        /opt/sbin/afpd -D
}

stop() {
        echo "Stopping afpd"
        #killall afpd > /dev/null 2>&1
        /opt/sbin/afpd -k
}
restart() {
        stop
        start
}

case "$1" in
        start)
                start
                ;;
        stop)
                stop
                ;;
        restart)
                restart
                ;;
        cleanup)
                ;;
        *)
                echo $"Usage: $0 {start|stop|restart}"
                exit 1
esac

exit $?

   Save it.

   Make it executable

   chmod u+x /opt/etc/init.d/S98afpd

   And finally…

   nano /opt/etc/avahi-daemon.conf

   Change the 'host-name' to something other than 'MyBookWorld'. If you don't and you are
   using Samba on your unit, things will get buggered up because the mDNS responder that
   advertises the Samba shares is trying to use 'MyBookWorld.local' by default, and so is
   avahi. Avahi wins and Smaba gets shafted.

   That's it. Reboot and pray.

   Works great here. Thanks again to Clifford.

   Enjoy!



---
https://help.ubuntu.com/community/HowToZeroconf

[16]HowToZeroconf

   [18]Zeroconf is a collection of tools and protocols to allow networks to configure
   themselves. It is called Bonjour (formerly Rendezvous) by Apple, and used extensively on
   Mac OS X.

   Contents
    1. [19]Installation
         1. [20]Ubuntu 9.04 (Jaunty Jackalope)
    2. [21]MDNS
    3. [22]Firewall configuration
    4. [23]Resources

   Zeroconf consists of:
     * Name resolution, MDNS
     * Service Advertising
     * Address allocation

   Traditionally most of its work is done by DHCP and DNS. But the decentralised zeroconf
   method is appropriate is some situations, for example ad-hoc networks. It also requires no
   configuration (apart from the installation).

   It works happily along side traditional tools. For example you may have an IP address
   allocated by DHCP and use DNS to resolve address on the web, but still use the
   hostname.local from MDNS (Multicast DNS) to resolve the addresses of other computers on the
   LAN.

   Note, if you are not doing this on your own network you may want to talk to the Network
   Admin first. Although zeroconf is a fairly efficient protocol the admin may not want the
   extra traffic. Also be aware that it is trivially easy to spoof an mdns .local name.

   It can currently be used for:
     * Sharing music - Rhythmbox, Banshee, iTunes
     * Sharing files - gShare
     * Automatic discovery of VoIP clients in your local network - [24]Ekiga

Installation

Ubuntu 9.04 (Jaunty Jackalope)

   Zeroconf is installed and configured by default in the Desktop version of Ubuntu 9.04. The
   following steps can be used for testing:
    1. Open Terminal and deduce the local host name from the prompt (e.g., myuser@myhost:~$)
    2. Go to System > Preferences > Remote Desktop. Check the first two boxes under Sharing
       and configure the Security settings as desired.
    3. From another computer, launch a VNC client and enter myhost.local as the host name,
       replacing the "myhost" portion with the host name deduced from step 1 above.
    4. Assuming the remote Ubuntu computer responded to the VNC connection request, then
       Zeroconf is properly resolving the local host name.

MDNS

   Now each computer with avahi-daemon (or mdnsresponder) installed will identify itself on
   the network as
hostname.local

   for example, my computer flute, identifies itself as
flute.local

   Now any computer on the network can use hostname.local in place of an ip address. For
   example you can do
ping flute.local

   or
ssh flute.local

Firewall configuration

   If you are running a firewall and you are having problems like
sam@titania:~$ ping flute.local
ping: unknown host flute.local

   then it is possible that your firewall is blocking the zeroconf communication. If you can
   turn your firewall off and this fixes the problem, then it is definitely the firewall.

   If you are using [25]Firestarter all multicast traffic is blocked. This may be configurable
   in the next version. The current work around is to edit /etc/firestarter/user-pre as root.
   You will need to chmod u+w this file to make it writable before editing. For example,

sudo -s
cd /etc/firestarter
chmod +w user-pre
gedit user-pre

   Set the contents of the file to the following
$IPT -A INPUT -p udp --dport 5353 -d 224.0.0.251 -j ACCEPT
$IPT -A OUTPUT -p udp --dport 5353 -d 224.0.0.251 -j ACCEPT

   Then, save the file, make it read-only, and restart firestarter
chmod -w user-pre
/etc/init.d/avahi-daemon restart

   Now you should be able to resolve .local names.

sam@titania:~$ ping flute.local
PING flute.local (192.168.1.101) 56(84) bytes of data.
64 bytes from flute.local (192.168.1.101): icmp_seq=1 ttl=64 time=4.45 ms
64 bytes from flute.local (192.168.1.101): icmp_seq=2 ttl=64 time=4.16 ms

   If you are using [Guarddog] as a firewall, you'll need to create a new zone for multicast
   traffic and add an entry to the networkprotocoldb.xml file.

   Call the new zone "multicast" and set its Zone Addresses to 224.0.0.0/255.0.0.0 Add the XML
   below into /usr/share/apps/guarddog/networkprotocoldb.xml just above where it says
   "<protocol name="domain">". Restart [Guarddog] & then check the boxes to allow mDns traffic
   between your zones.

<protocol name="mDns">
  <!-- Protocol information guessed by Greg N <emailgregn@googlemail.com> -->
  <longname>mDns,Bonjour,Avahi,ZeroConf</longname>
  <longname lang="nl">mDns</longname>
  <longname lang="fr">mDns</longname>
  <longname lang="it">mDns</longname>
  <longname lang="es">mDns</longname>
  <description>Protocols to allow networks to configure themselves. It is called Bonjour (formerly R
endezvous) by Apple, and used extensively on Mac OS X. </description>

  <classification class="net"/>
  <network>
    <udp source="server" dest="client">
      <source><port portnum="nonprivileged"/></source>
      <dest><port portnum="5353"/></dest>
    </udp>
    <udp source="client" dest="server">
      <source><port portnum="5353"/></source>
      <dest><port portnum="nonprivileged"/></dest>
    </udp>
  </network>
  <security threat="medium" falsepos="low"/>
</protocol>

