filename: quora_what-would-a-128-bit-operating-system-be-like_20190227.txt
https://www.quora.com/What-would-a-128-bit-operating-system-be-like-Is-it-even-practical-or-would-it-ever-be-\
necessary-Would-it-run-faster-or-anything-like-that-I-m-not-a-developer-so-please-try-to-speak-in-simple-terms

What would a 128-bit operating system be like? Is it even practical or would it ever be necessary? Would
it run faster or anything like that? I’m not a developer so please try to speak in simple terms.

Viktor T. Toth, Information Technology Professional (1979-present)

Considering that we are still only typically using 46-bit computers…

No, not a typo.

Let me explain what these bits mean. Memory in a computer is accessed using an address. Each address
represents a byte. There is data at byte 0, at byte 1, at byte 2, … etc.

When the computer’s processor requests data from the computer’s operative memory (RAM), it has to
provide an address. A single electrical wire can have two states: off and on. That can correspond to byte
0 and byte 1. Two wires can have four states in total, addressing byte 0 through byte 3 in memory. And so on.

Back in the good ole’ days, computers had 16-bit addresses. That means a total of 65536 memory locations
(64 kilobytes). That was a lot back, say, in 1980, but not today.

So there came 32-bit addresses, and for a while we were doing just fine. In fact, at first, processors
that internally handled 32-bit addresses only had, say, 20 or 24 wires to access physical memory. With 20
wires, a total of 1,048,576 bytes (a megabyte) can be addressed. With 24 wires, it goes up to 16 megabytes.

Now 16 megabytes was a Big Deal in, say, 1988. But soon, we had computers with hundreds of megabytes of
memory, so now processors provided a full set of 32 address wires. This made it possible to access up
to 4,096 megabytes (4 gigabytes) of RAM. That was good for a while… but not today.

So we need more address bits. Going from 32-bit to 64-bit, that is. But do we really need 64-bit
addresses? Not anytime soon. We are not exactly in need of 17,179,869,184 gigabytes of memory. Sure,
the total amount of computer RAM in the world is a lot more than that, but individual computers rarely
have more than a few dozen gigabytes of RAM even today, in 2019.

Processor makers are aware of this, and know that there is no point providing a full set of 64 address wires
in modern processors. That’s why a typical Intel processor “only” has 46 such wires, even though
it internally treats addresses as 64-bit. Even with 46 wires, a processor can address 65,536 gigabytes,
or 64 terabytes of RAM. That is still a lot more than the largest hard disk drive, so we are okay for now.

Will we ever need more than 64 address bits, though? Perhaps. Will computers ever have more than
16,777,216 terabytes (that is, 16 exabytes) of memory? Sounds like an outrageous amount of RAM, but it
wasn’t that long ago that 16 gigabytes sounded outrageous, too. Yet today, there are smartphones with
this much memory. (I am talking about operative memory, not persistent storage.) So yes, I am pretty
sure that in the next few decades, barring world wars, killer asteroids, or bioweapons gone berserk,
we will have processors capable of addressing more than 16 exabytes of RAM.

Will that mean a switch to 128-bit addresses? Now that, I do not know. While bigger addresses offer the
ability to more RAM, they also make programs ever so slightly bigger and ever so slightly slower. And
there are other ways to address additional memory. In any case, even if 128-bit internal address
representations become common, it does not mean that processors will have 128 address wires. After all,
a mere 80 address wires already allow accessing more than a million exabytes (that would be a yottabyte)
of RAM. And for all I know, by the time this happens, we may have a brand new paradigm in computing.

By way of past examples, as recently as 2000 or thereabouts, people were predicting that soon, we’ll
have processors running at clock speeds of several ten gigahertz. That didn’t happen. Such processors
would have been immensely hard to manufacture and would produce copious quantities of waste heat. Instead,
we ended up with processors containing multiple processing cores. Perhaps something similar will happen
with memory: Instead of providing one ginormous contiguous address space, future computers may divide
up physical memory among a large number of processor cores, effectively creating a miniature computer
network on chip. Or maybe instead of having as many addressing wires as there are address bits, address
information would be communicated by other means, much like the switch, not too long ago, from the
“PATA” parallel interface that was used to access hard disk drives to the serial “SATA” interface
employing much fewer wires.

For now though, we’re a long way away from exhausting the capabilities offered by 64 address
bits. Remember: a typical Intel processor is really only a 46-bit processor, as it has only 46 address
wires that can be used to connect the processor to memory.

By the way, a full 128-bit address can access 281,474,976,710,656 yottabytes of memory.


---
