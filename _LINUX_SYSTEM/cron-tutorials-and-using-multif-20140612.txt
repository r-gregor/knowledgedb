filename: cron-tutorials-and-using-multif_20140612.txt
http://www.linuxjournal.com/content/rclocal-cron-style

rc.local, Cron Style

   Mon, 06/09/2014 - 08:00 -- [6]Shawn Powers

   Occasionally as seasoned Linux users, we run across simple things we never knew
   existed--and are amazed. Whether it's tab autocompletion, sudo !! for when you forgot to
   type sudo or even recursive file listing with ls, the smallest tricks can be so incredibly
   useful. Not long ago, I had one of those moments.

   Most people know rc.local is the file where you put commands you want to have start on
   system boot. Sometimes the rc.local script is disabled, however, and it doesn't work. It
   also can be difficult to remember the syntax for starting a particular program as a
   specific user. Plus, having a long list of programs in rc.local can just become ugly.
   Little did I know, cron supports not only periodic execution of commands, but it also can
   start programs when the system starts as well!

   A normal crontab entry looks like this:
* * * * * /usr/bin/command

   That runs the command every minute. There are countless variations to get very specific
   intervals, but until recently, I didn't know there were options to the five fields. The
   following is a crontab entry that runs a command every hour on the hour:
@hourly /usr/bin/command

   And, there are many more: @annually, @monthly, @daily, @midnight and most interesting for
   this article, @reboot. If you have a crontab entry like this:
@reboot /usr/bin/command

   it will execute when the system starts up, with the ownership and permission of the person
   owning the crontab! I researched a lot to make sure it wasn't just on reboot, but also on a
   cold boot--and yes, the @reboot terminology just means it runs once when the system first
   boots. I've been using this as a quick hack to start programs, and it works amazingly well.

   I know 99.9% of you already knew this juicy bit of info, but for that .1% who have been
   living in the dark like me, I present you with a sharp new arrow for your system
   administrator quiver. It's a very simple trick, but all the best ones are!

References

   1. http://m.linuxjournal.com/
   2. http://m.linuxjournal.com/blog
   3. http://m.linuxjournal.com/tag/how-tos
   4. http://m.linuxjournal.com/tag/tech-tips
   5. http://m.linuxjournal.com/
   6. http://m.linuxjournal.com/users/shawn-powers
   7. http://m.youtube.com/linuxjournalonline
   8. http://www.linuxjournal.com/?nomobile=true


---
http://www.unixgeeks.org/security/newbie/unix/cron-1.html

Newbie: Intro to cron
Date: 30-Dec-99
Author: cogNiTioN <[1]cognition@attrition.org>

Cron

This file is an introduction to cron, it covers the basics of what cron does,
and how to use it.

What is cron?

Cron is the name of program that enables unix users to execute commands or
scripts (groups of commands) automatically at a specified time/date. It is
normally used for sys admin commands, like makewhatis, which builds a
search database for the man -k command, or for running a backup script,
but can be used for anything. A common use for it today is connecting to
the internet and downloading your email.

This file will look at Vixie Cron, a version of cron authored by Paul Vixie.

How to start Cron

Cron is a daemon, which means that it only needs to be started once, and will
lay dormant until it is required. A Web server is a daemon, it stays dormant
until it gets asked for a web page. The cron daemon, or crond, stays dormant
until a time specified in one of the config files, or crontabs.

On most Linux distributions crond is automatically installed and entered into
the start up scripts. To find out if it's running do the following:

cog@pingu $ ps aux | grep crond
root       311  0.0  0.7  1284  112 ?        S    Dec24   0:00 crond
cog       8606  4.0  2.6  1148  388 tty2     S    12:47   0:00 grep crond

The top line shows that crond is running, the bottom line is the search
we just run.

If it's not running then either you killed it since the last time you rebooted,
or it wasn't started.

To start it, just add the line crond to one of your start up scripts. The
process automatically goes into the back ground, so you don't have to force
it with &. Cron will be started next time you reboot. To run it without
rebooting, just type crond as root:

root@pingu # crond

With lots of daemons, (e.g. httpd and syslogd) they need to be restarted
after the config files have been changed so that the program has a chance
to reload them. Vixie Cron will automatically reload the files after they
have been edited with the crontab command. Some cron versions reload the
files every minute, and some require restarting, but Vixie Cron just loads
the files if they have changed.

Using cron

There are a few different ways to use cron (surprise, surprise).

In the /etc directory you will probably find some sub directories called
'cron.hourly', 'cron.daily', 'cron.weekly' and 'cron.monthly'. If you place
a script into one of those directories it will be run either hourly, daily,
weekly or monthly, depending on the name of the directory.

If you want more flexibility than this, you can edit a crontab (the name
for cron's config files). The main config file is normally /etc/crontab.
On a default RedHat install, the crontab will look something like this:

root@pingu # cat /etc/crontab
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/

# run-parts
01 * * * * root run-parts /etc/cron.hourly
02 4 * * * root run-parts /etc/cron.daily
22 4 * * 0 root run-parts /etc/cron.weekly
42 4 1 * * root run-parts /etc/cron.monthly

The first part is almost self explanatory; it sets the variables for cron.

SHELL is the 'shell' cron runs under. If unspecified, it will default to
the entry in the /etc/passwd file.

PATH contains the directories which will be in the search path for cron
e.g if you've got a program 'foo' in the directory /usr/cog/bin, it might
be worth adding /usr/cog/bin to the path, as it will stop you having to use
the full path to 'foo' every time you want to call it.

MAILTO is who gets mailed the output of each command. If a command cron is
running has output (e.g. status reports, or errors), cron will email the output
to whoever is specified in this variable. If no one if specified, then the
output will be mailed to the owner of the process that produced the output.

HOME is the home directory that is used for cron. If unspecified, it will
default to the entry in the /etc/passwd file.

Now for the more complicated second part of a crontab file.
An entry in cron is made up of a series of fields, much like the /etc/passwd
file is, but in the crontab they are separated by a space. There are normally
seven fields in one entry. The fields are:

minute hour dom month dow user cmd

minute  This controls what minute of the hour the command will run on,
         and is between '0' and '59'
hour    This controls what hour the command will run on, and is specified in
         the 24 hour clock, values must be between 0 and 23 (0 is midnight)
dom     This is the Day of Month, that you want the command run on, e.g. to
         run a command on the 19th of each month, the dom would be 19.
month   This is the month a specified command will run on, it may be specified
         numerically (0-12), or as the name of the month (e.g. May)
dow     This is the Day of Week that you want a command to be run on, it can
         also be numeric (0-7) or as the name of the day (e.g. sun).
user    This is the user who runs the command.
cmd     This is the command that you want run. This field may contain
         multiple words or spaces.

If you don't wish to specify a value for a field, just place a * in the
field.

e.g.
01 * * * * root echo "This command is run at one min past every hour"
17 8 * * * root echo "This command is run daily at 8:17 am"
17 20 * * * root echo "This command is run daily at 8:17 pm"
00 4 * * 0 root echo "This command is run at 4 am every Sunday"
* 4 * * Sun root echo "So is this"
42 4 1 * * root echo "This command is run 4:42 am every 1st of the month"
01 * 19 07 * root echo "This command is run hourly on the 19th of July"

Notes:

Under dow 0 and 7 are both Sunday.

If both the dom and dow are specified, the command will be executed when
either of the events happen.
e.g.
* 12 16 * Mon root cmd
Will run cmd at midday every Monday and every 16th, and will produce the
same result as both of these entries put together would:
* 12 16 * * root cmd
* 12 * * Mon root cmd

Vixie Cron also accepts lists in the fields. Lists can be in the form, 1,2,3
(meaning 1 and 2 and 3) or 1-3 (also meaning 1 and 2 and 3).
e.g.
59 11 * * 1,2,3,4,5 root backup.sh
Will run backup.sh at 11:59 Monday, Tuesday, Wednesday, Thursday and Friday,
as will:
59 11 * * 1-5 root backup.sh

Cron also supports 'step' values.
A value of */2 in the dom field would mean the command runs every two days
and likewise, */5 in the hours field would mean the command runs every
5 hours.
e.g.
* 12 10-16/2 * * root backup.sh
is the same as:
* 12 10,12,14,16 * * root backup.sh

*/15 9-17 * * * root connection.test
Will run connection.test every 15 mins between the hours or 9am and 5pm

Lists can also be combined with each other, or with steps:
* 12 1-15,17,20-25 * * root cmd
Will run cmd every midday between the 1st and the 15th as well as the 20th
and 25th (inclusive) and also on the 17th of every month.
* 12 10-16/2 * * root backup.sh
is the same as:
* 12 10,12,14,16 * * root backup.sh

When using the names of weekdays or months, it isn't case sensitive, but only
the first three letters should be used, e.g. Mon, sun or Mar, jul.

Comments are allowed in crontabs, but they must be preceded with a '#', and
must be on a line by them self.


Multiuser cron

As Unix is a multiuser OS, some of the apps have to be able to support
multiple users, cron is one of these. Each user can have their own crontab
file, which can be created/edited/removed by the command crontab. This
command creates an individual crontab file and although this is a text file,
as the /etc/crontab is, it shouldn't be edited directly. The crontab file is
often stored in /var/spool/cron/crontabs/<user> (Unix/Slackware/*BSD),
/var/spool/cron/<user> (RedHat) or /var/cron/tabs/<user> (SuSE),
but might be kept elsewhere depending on what Un*x flavor you're running.

To edit (or create) your crontab file, use the command crontab -e, and this
will load up the editor specified in the environment variables EDITOR or
VISUAL, to change the editor invoked on Bourne-compliant shells, try:
cog@pingu $ export EDITOR=vi
On C shells:
cog@pingu $ setenv EDITOR vi
You can of course substitute vi for the text editor of your choice.

Your own personal crontab follows exactly the same format as the main
/etc/crontab file does, except that you need not specify the MAILTO
variable, as this entry defaults to the process owner, so you would be mailed
the output anyway, but if you so wish, this variable can be specified.
You also need not have the user field in the crontab entries. e.g.

min hr dom month dow cmd

Once you have written your crontab file, and exited the editor, then it will
check the syntax of the file, and give you a chance to fix any errors.

If you want to write your crontab without using the crontab command, you can
write it in a normal text file, using your editor of choice, and then use the
crontab command to replace your current crontab with the file you just wrote.
e.g. if you wrote a crontab called cogs.cron.file, you would use the cmd

cog@pingu $ crontab cogs.cron.file

to replace your existing crontab with the one in cogs.cron.file.

You can use

cog@pingu $ crontab -l

to list your current crontab, and

cog@pingu $ crontab -r

will remove (i.e. delete) your current crontab.

Privileged users can also change other user's crontab with:

root@pingu # crontab -u

and then following it with either the name of a file to replace the
existing user's crontab, or one of the -e, -l or -r options.

According to the documentation the crontab command can be confused by the
su command, so if you running a su'ed shell, then it is recommended you
use the -u option anyway.

Controlling Access to cron

Cron has a built in feature of allowing you to specify who may, and who
may not use it. It does this by the use of /etc/cron.allow and /etc/cron.deny
files. These files work the same way as the allow/deny files for other
daemons do. To stop a user using cron, just put their name in cron.deny, to
allow a user put their name in the cron.allow. If you wanted to prevent all
users from using cron, you could add the line ALL to the cron.deny file:

root@pingu # echo ALL >>/etc/cron.deny

If you want user cog to be able to use cron, you would add the line cog
to the cron.allow file:

root@pingu # echo cog >>/etc/cron.allow

If there is neither a cron.allow nor a cron.deny file, then the use of cron
is unrestricted (i.e. every user can use it).  If you were to put the name of
some users into the cron.allow file, without creating a cron.deny file, it
would have the same effect as creating a cron.deny file with ALL in it.
This means that any subsequent users that require cron access should be
put in to the cron.allow file.

Output from cron

As I've said before, the output from cron gets mailed to the owner of the
process, or the person specified in the MAILTO variable, but what if you
don't want that? If you want to mail the output to someone else, you can
just pipe the output to the command mail.
e.g.

cmd | mail -s "Subject of mail" user

If you wish to mail the output to someone not located on the machine, in the
above example, substitute user for the email address of the person who
wishes to receive the output.

If you have a command that is run often, and you don't want to be emailed
the output every time, you can redirect the output to a log file (or
/dev/null, if you really don't want the output).
e,g

cmd >> log.file

Notice we're using two > signs so that the output appends the log file and
doesn't clobber previous output.
The above example only redirects the standard output, not the standard error,
if you want all output stored in the log file, this should do the trick:

cmd >> logfile 2>&1

You can then set up a cron job that mails you the contents of the file at
specified time intervals, using the cmd:

mail -s "logfile for cmd" <log.file

Now you should be able to use cron to automate things a bit more.
A future file going into more detail, explaining the differences between
the various different crons and with more worked examples, is planned.



---
https://help.ubuntu.com/community/CronHowto

CronHowto

   Contents
    1. [17]Introduction
         1. [18]Using Cron
         2. [19]Crontab Sections
         3. [20]Crontab Options
         4. [21]Enable User Level Cron
         5. [22]Further Considerations
         6. [23]Troubleshooting and Common Problems
         7. [24]Advanced Crontab
         8. [25]GUI Applications
    2. [26]Tips
         1. [27]Crontab Example
         2. [28]How Anacron is Arranged
         3. [29]Cron Jobs Alternatives

Introduction

   Cron is a system daemon used to execute desired tasks (in the background) at designated
   times.

   A crontab is a simple text file with a list of commands meant to be run at specified times.
   It is edited with a command-line utility. These commands (and their run times) are then
   controlled by the cron daemon, which executes them in the system background. Each user has
   a crontab file which specifies the actions and times at which they should be executed,
   these jobs will run regardless of whether the user is actually logged into the system.
   There is also a root crontab for tasks requiring administrative privileges. This system
   crontab allows scheduling of systemwide tasks (such as log rotations and system database
   updates).

   More information can be found:
 man crontab

   or from the [30]OpenGroup specifications.

   On Gnome-based Ubuntu systems Gnome Scheduled tasks tool (from the gnome-schedule package)
   in Applications --> System Tools provides a graphical interface with prompting for using
   Cron. The project website is at [31]http://gnome-schedule.sourceforge.net/; the software is
   installable from the Software Center or by typing
sudo apt-get install gnome-schedule

   in a terminal.

Using Cron

   To use cron for tasks meant to run only for your user profile, add entries to your own
   user's crontab file. Start the crontab editor from a terminal window:
crontab -e

   Edit the crontab using the format described in the next sections. Save your changes.
   (Exiting without saving will leave your crontab unchanged.)

   Note that a great source of information about the format can be found at:

man 5 crontab

   Commands that normally run with administrative privileges (i.e. they are generally run
   using sudo) should be added to the root user's crontab (instead of the user's crontab):
 sudo crontab -e

Crontab Sections

   Each of the sections is separated by a space, with the final section having one or more
   spaces in it. No spaces are allowed within Sections 1-5, only between them. Sections 1-5
   are used to indicate when and how often you want the task to be executed. This is how a
   cron job is laid out:

   minute (0-59), hour (0-23, 0 = midnight), day (1-31), month (1-12), weekday (0-6, 0 =
   Sunday), command

01 04 1 1 1 /usr/bin/somedirectory/somecommand

   The above example will run /usr/bin/somedirectory/somecommand at 4:01am on January 1st plus
   every Monday in January. An asterisk (*) can be used so that every instance (every hour,
   every weekday, every month, etc.) of a time period is used. Code:

01 04 * * * /usr/bin/somedirectory/somecommand

   The above example will run /usr/bin/somedirectory/somecommand at 4:01am on every day of
   every month.

   Comma-separated values can be used to run more than one instance of a particular command
   within a time period. Dash-separated values can be used to run a command continuously.
   Code:

01,31 04,05 1-15 1,6 * /usr/bin/somedirectory/somecommand

   The above example will run /usr/bin/somedirectory/somecommand at 01 and 31 past the hours
   of 4:00am and 5:00am on the 1st through the 15th of every January and June.

   The "/usr/bin/somedirectory/somecommand" text in the above examples indicates the task
   which will be run at the specified times. It is recommended that you use the full path to
   the desired commands as shown in the above examples. Enter which somecommand in the
   terminal to find the full path to somecommand. The crontab will begin running as soon as it
   is properly edited and saved.

   You may want to run a script some number of times per time unit. For example if you want to
   run it every 10 minutes use the following crontab entry (runs on minutes divisible by 10:
   0, 10, 20, 30, etc.)

*/10 * * * * /usr/bin/somedirectory/somecommand

   which is also equivalent to the more cumbersome

0,10,20,30,40,50 * * * * /usr/bin/somedirectory/somecommand

Crontab Options

     * The -l option causes the current crontab to be displayed on standard output.
     * The -r option causes the current crontab to be removed.
     * The -e option is used to edit the current crontab using the editor specified by the
       EDITOR environment variable.

   After you exit from the editor, the modified crontab will be checked for accuracy and, if
   there are no errors, installed automatically. The file is stored in
   /var/spool/cron/crontabs but should only be edited via the crontab command.

Enable User Level Cron

   If the /etc/cron.allow file exists, then users must be listed in it in order to be allowed
   to run the crontab command. If the /etc/cron.allow file does not exist but the
   /etc/cron.deny file does, then users must not be listed in the /etc/cron.deny file in order
   to run crontab.

   In the case where neither file exists, the default on current Ubuntu (and Debian, but not
   some other Linux and UNIX systems) is to allow all users to run jobs with crontab.

   No cron.allow or cron.deny files exist in a standard Ubuntu install, so all users should
   have cron available by default, until one of those files is created. If a blank cron.deny
   file has been created, that will change to the standard behavior users of other operating
   systems might expect: cron only available to root or users in cron.allow.

   Note, userids on your system which do not appear in /etc/shadow will NOT have operational
   crontabs, if you desire to enter a user in /etc/passwd, but NOT /etc/shadow that user's
   crontab will never run. Place an entry in /etc/shadow for the user with a * for the
   password crypt,ie:

joeuser:*:15169::::::

Further Considerations

   Crontab commands are generally stored in the crontab file belonging to your user account
   (and executed with your user's level of permissions). If you want to regularly run a
   command requiring administrative permissions, edit the root crontab file:
sudo crontab -e

   Depending on the commands being run, you may need to expand the root users PATH variable by
   putting the following line at the top of their crontab file:
PATH=/usr/sbin:/usr/bin:/sbin:/bin

   It is sensible to test that your cron jobs work as intended. One method for doing this is
   to set up the job to run a couple of minutes in the future and then check the results
   before finalising the timing. You may also find it useful to put the commands into script
   files that log their success or failure, for example:
echo "Nightly Backup Successful: $(date)" >> /tmp/mybackup.log

   For more information, see the man pages for cron and crontab (man is detailed on the
   [32]BasicCommands page). If your machine is regularly switched off, you may also be
   interested in at and anacron, which provide other approaches to scheduled tasks. For
   example, anacron offers simple system-wide directories for running commands hourly, daily,
   weekly, and monthly. Scripts to be executed in said times can be placed in
   /etc/cron.hourly/, /etc/cron.daily/, /etc/cron.weekly/, and /etc/cron.monthly/. All scripts
   in each directory are run as root, and a specific order to running the scripts can be
   specified by prefixing the scripts' filenames with numbers (see the man page for run-parts
   for more details). Although the directories contain periods in their names, run-parts will
   not accept a file name containing a period and will fail silently when encountering them
   ([33]bug #38022). Either rename the file or use a symlink (without a period) to it instead
   (see, for example, [34]python + cron without login? and [35]Problems with Hourly Cron Job).

Troubleshooting and Common Problems

   Edits to a user's crontab and jobs that are run on their behalf are all logged by default
   to /var/log/syslog and that's the first place to check if things are not running as you
   expect.

   When adding a new entry to a blank crontab, forgetting to add a newline at the end is a
   common source for the job not running. If the last line in the crontab does not end with a
   newline, no errors will be reported at edit or runtime, but that line will never run. See
   man crontab for more information. This has already been suggested as [36]a bug.

   If a user was not allowed to execute jobs when their crontab was last edited, just adding
   them to the allow list won't do anything. The user needs to re-edit their crontab after
   being added to cron.allow before their jobs will run.

   When creating a crontab for the root user, the user name must be specified as a parameter
   after the date/time parameters. Accidentally including the user name that way in a
   user-specific crontab will result in trying to run the user's name as a command, rather
   than what was expected.

   Entries in cron may not run with the same environment, in particular the PATH, as you
   expect them to. Try using full paths to files and programs if they're not being located as
   you expect.

   The "%" character is used as newline delimiter in cron commands. If you need to pass that
   character into a script, you need to escape it as "\%".

   If you're having trouble running a GUI application using cron, see the GUI Applications
   section below.

Advanced Crontab

   The Crontabs discussed above are user crontabs. Each of the above crontabs is associated
   with a user, even the system crontab which is associated with the root user. There are two
   other types of crontab.

   Firstly, as mentioned above anacron uses the run-parts command and /etc/cron.hourly,
   /etc/cron.weekly, and /etc/cron.monthly directories. However anacron itself is invoked from
   the /etc/crontab file. This file could be used for other cron commands, but probably
   shouldn't be. Here's an example line from a ficticious /etc/crontab:

00 01 * * * rusty /home/rusty/rusty-list-files.sh

   This would run Rusty's command script as user rusty from his home directory. However, it is
   not usual to add commands to this file. While an experienced user should know about it, it
   is not recommended that you add anything to /etc/crontab. Apart from anything else, this
   could cause problem if the /etc/crontab file is affected by updates! Rusty could lose his
   command.

   The second type of crontab is to be found in /etc/cron.d. Within the directory are small
   named crontabs. The directory is often used by packages, and the small crontabs allows a
   user to be associated with the commands in them.

   Instead of adding a line to /etc/crontab which Rusty knows is not a good idea, Rusty might
   well add a file to /etc/cron.d with the name rusty, containing his cron line above. This
   would not be affected by updates but is a well known location.

   When would you use these alternate crontab locations? Well, on a single user machine or a
   shared machine such as a school or college server, a user crontab would be the way to go.
   But in a large IT department, where several people might look after a server, then
   /etc/cron.d is probably the best place to install crontabs - it's a central point and saves
   searching for them!

   You may not need to look at /etc/crontab or /etc/cron.d, let alone edit them by hand. But
   an experienced user should perhaps know about them and that the packages that he/she
   installs may use these locations for their crontabs.

Special strings

   Cron also offers some special strings:
     *

       string
       meaning
       @reboot
       Run once, at startup.
       @yearly
       Run once a year, "0 0 1 1 *".
       @annually
       (same as @yearly)
       @monthly
       Run once a month, "0 0 1 * *".
       @weekly
       Run once a week, "0 0 * * 0".
       @daily
       Run once a day, "0 0 * * *".
       @midnight
       (same as @daily)
       @hourly
       Run once an hour, "0 * * * *".

   Usage: "@reboot /path/to/execuable1" will execute /path/to/executable1 when the system
   starts. See "man 5 crontab" for more info.

GUI Applications

   It is possible to run gui applications via cronjobs. This can be done by telling cron which
   display to use.
00 06 * * * env DISPLAY=:0 gui_appname

   The env DISPLAY=:0 portion will tell cron to use the current display (desktop) for the
   program "gui_appname".

   And if you have multiple monitors, don't forget to specify on which one the program is to
   be run. For example, to run it on the first screen (default screen) use :
00 06 * * * env DISPLAY=:0.0 gui_appname

   The env DISPLAY=:0.0 portion will tell cron to use the first screen of the current display
   for the program "gui_appname".

   Note: GUI users may prefer to use gnome-schedule (aka "Scheduled tasks") to configure GUI
   cron jobs. In gnome-schedule, when editing a GUI task, you have to select "X application"
   in a dropdown next to the command field.

   Note: In Karmic(9.10), you have to enable X ACL for localhost to connect to for GUI
   applications to work.
 ~$ xhost +local:
non-network local connections being added to access control list
 ~$ xhost
access control enabled, only authorized clients can connect
LOCAL:
...

Tips

   crontab -e uses the EDITOR environment variable. to change the editor to your own choice
   just set that. You may want to set EDITOR in you .bashrc because many commands use this
   variable. Let's set the EDITOR to nano a very easy editor to use:
export EDITOR=nano

   There are also files you can edit for system-wide cron jobs. The most common file is
   located at /etc/crontab, and this file follows a slightly different syntax than a normal
   crontab file. Since it is the base crontab that applies system-wide, you need to specify
   what user to run the job as; thus, the syntax is now:
minute(s) hour(s) day(s)_of_month month(s) day(s)_of_week user command

   It is recommended, however, that you try to avoid using /etc/crontab unless you need the
   flexibility offered by it, or if you'd like to create your own simplified anacron-like
   system using run-parts for example. For all cron jobs that you want to have run under your
   own user account, you should stick with using crontab -e to edit your local cron jobs
   rather than editting the system-wide /etc/crontab.

Crontab Example

   Below is an example of how to setup a crontab to run updatedb, which updates the slocate
   database: Open a term, type "crontab -e" (without the double quotes) and press enter. Type
   the following line, substituting the full path of the application you wish to run for the
   one shown below, into the editor:

45 04 * * * /usr/bin/updatedb

   Save your changes and exit the editor.

   Crontab will let you know if you made any mistakes. The crontab will be installed and begin
   running if there are no errors. That's it. You now have a cronjob setup to run updatedb,
   which updates the slocate database, every morning at 4:45.

   Note: The double-ampersand (&&) can also be used in the "command" section to run multiple
   commands consecutively, but only if the previous command exits successfully. A string of
   commands joined by the double-ampersand will only get to the last command if all the
   previous commands are run successfully. If exit error-checking is not of a concern, string
   commands together, separated with a semi-colon (;)

45 04 * * * /usr/sbin/chkrootkit && /usr/bin/updatedb

   The above example will run chkrootkit followed by updatedb at 4:45am daily - providing you
   have all listed apps installed. If chkrootkit fails, updatedb will NOT be run.

How Anacron is Arranged

   On Ubuntu 9.10 (and presumably, on later versions), anacron seems to be set up as follows:

   There is a Upstart task, located in /etc/init/anacron.conf, which runs all the jobs in
   /etc/anacrontab. It is set to run on startup.

   There is a cron.d file (/etc/cron.d/anacron) which causes the Upstart task to be started
   every day at 7:30 AM.

   There is a file /etc/apm/event.d/anacron, which causes the Upstart task to be started when
   a laptop is plugged in to A/C power, or woken up.

   In the system crontab (/etc/crontab), if anacron is not execuatable, run-parts is used to
   run the files in cron.daily, cron.weekly, and cron.monthly at 6:25 AM, 6:47 AM and 6:52 AM,
   respectively.

   In /etc/anacrontab, run-parts is used to run cron.daily 5 minutes after anacron is started,
   and cron.weekly after 10 minutes (once a week), and cron.monthly after 15 (once a month).

   Within the cron.daily, weekly, and monthly directories ( /etc/cron.daily, etc.) there is a
   0anacron file that sets the timestamps for anacron, so it will know they have been run,
   even if it didn't run them.

   So it appears anacron is run on every startup, wake up, plug-in, and at 7:30 AM every day.
   Looking at the respective Changelogs and package databases, it looks like this setup is
   directly from Debian, and hasn't been changed since at least 2009.

Cron Jobs Alternatives

   Some hosting companies don't allow access to cron, but you can find a lot of cron jobs
   alternatives which are free or paid.

   Here are some services:
     * [37]SetCron
     * [38]SetCronJob
     * [39]OnlineCronJobs
     * [40]EasyCron
     ______________________________________________________________________________________

   CronHowto (last edited 2014-06-04 17:01:57 by [41]d-admin-a)

