filename: RPi_setting_up_a_ram_drive-multif_20191206.txt
https://domoticproject.com/extending-life-raspberry-pi-sd-card/

Extending the life of your Raspberry PI SD Card
8th January 2018

Introduction
   As you already know, the SD card is a key part of the Raspberry Pi. Your Raspberry PI SD Card will
   provide the initial storage for the Operating System and files. Without an operative SD card, your
   Raspberry Pi will not start. As these cards have a limited erase/write cycles, it is very important
   to choose and use them carefully, in order to expand their lifespan. Otherwise, after a reboot you
   can come up with a corrupt SD card unable to boot the system again. In this post we will see some
   methods to increase the lifespan of the SD card by minimizing the number of read/write cycles.

Choosing a good Raspberry PI SD Card
   As it was already stated in [30]this post, the selection of a good SD card is very important. First
   of all you should consider the card class. This parameter determines the sustained write speed for
   the card; a class 4 card will be able to write at 4MB/s, whereas a class 10 should be able to reach
   10 MB/s.

   But apart from the class, the size of your Raspberry Pi SD Card is also an aspect to consider.
   Although it is not included in the SD specification, a good quality SD Card will use [31]wear
   levelling algorithms. These algorithms will minimize the number of times each block is written, by
   arranging data so that erasures and re-writes are distributed evenly across the card. By this way, if
   the SD card is larger than the space needed, the wear can be spread over a much larger area of free
   space.

Analyzing Disk I/O
   It is good practice to move the highly used files, which concentrate the majority of writes and
   deletes, away from your Raspberry Pi SD Card. By doing that, you will avoid using it for repetitive
   operations, which would reduce its operative life. These files can be moved to RAM memory or to an
   external HDD Drive. On the one hand, RAM reads and writes will be faster. For instance Raspberry Pi's
   RAM, LPDDR2, offers in theory a bandwidth of up to 8.5 gigabytes per second. However, as a
   counterpart, the directories mounted in RAM space will not persist after a power interruption. After
   analysing Raspberry's I/O, it is up to you to decide which directories should be moved to RAM space,
   which can be transferred to an external disk and which should be kept in your Raspberry Pi SD Card.

Using iotop and dmesg to find who produces work on disks
   To find out which files are performing more frequently read/writes in disk you can use iotop.
   Probably you will have to install it first:
$> sudo apt-get install iotop

   After that, leave running the command during a while with the options:
     * o to show only the processes that have active disk usage.
     * a in order to see the cumulative bandwidth used and not the immediate consumption.
     * k to receive the results in kilobytes.
$> sudo iotop -aok

   You should analyze your results to find out which programs concentrate the majority of read/writes
   and, when possible, move the files used to RAM space.

   To see where and what are writing these processes do:
$> sudo sysctl vm.block_dump=1

   and run the following command several times to see the message buffer of the kernel.
$> dmesg

   This will show you more information about the processes that are writing blocks. Note that you should
   only focus on your Raspberry Pi SD Card memory, and not on the operations affecting the RAM memory
   (tmpfs). Once finished analysing, remember to deactivate the block dumping by running:
$> sudo sysctl vm.block_dump=0

Results of the analysis
   As an example, those were the directories that concentrated the majority of writes in my Raspberry
   Pi. For each one, I decided to mount them in tmpfs or in an external HD. Note that depending on the
   version of Raspbian installed, some of them are by default mounted on tmpfs. As you will see, tmpfs
   is a common name for a temporary file storage facility on many Unix-like operating systems. It is
   intended to appear as a mounted file system, but stored in volatile memory instead of a persistent
   storage device. Its maximum capacity is, by default, half of the physical RAM memory. If you have not
   configured any video memory your tmpfs size should be 512 MB.

/run and /run/lock
   /run stores volatile runtime data and is always mounted as a tmpfs on systems which support tmpfs, so
   you will not probably need to change anything in your configuration. Note that in modern linux
   distributions /run replaces /var/run because in some cases this directory was not always available at
   early boot. For compatibility reasons, you will find that your Raspberry creates a softlink between
   /var/run and /run.

   /run/lock contains files indicating that a shared device or other system resource is in use. These
   files contain the identity of the process (PID) using it. This allows other processes to properly
   coordinate access to the shared device. As it happens with /run, a /var/run/lock soft linked also
   exists and, by default, it will be mounted on RAM space. This configuration can be changed in file
   /etc/default/tmpfs by setting the RAMLOCK parameter to no.

/dev/shm
   This is a shared memory where some processes create memory portions which can be accessed by third
   processes in an efficient way. As in previous cases, is mounted by default on RAM space and the
   configuration can be changed in /etc/default/tmpfs setting the RAMSHM parameter to no.

/var and /var/tmp
   Those file systems have the same purpose and functionality: storage with a short lifetime. Both can
   be mounted on RAM space, being the first one configured also by parameter RAMTMP in file
   /etc/default/tmpfs.

/var/log
   In this directory the system log are stored. As already stated, placing these files in RAM memory
   will erase them after a reboot. You should do this only in case your system is stable and you do not
   need to recover these files in the future. If you are interested in keeping the logs, you can also
   mount this file system on an external unit, such as an USB Hard Drive. Additionally, there are also
   programs that will make copies to hard drive/SD card only after a certain amount of time, or before
   restarting the system, ensuring that the log is saved safely. To do this, have a look into ram2log.
   However, the easiest way to keep your log files saved is just not placing them in RAM.

/var/www/html
   This file system will store the web page served by apache. As we will see, my domotic web is
   generated dynamically every 5 minutes with the last information served by the home sensors. In my
   case, it is not a problem to lose all the html code every time the Raspberry is restarted. That is
   the reason why I placed this directory in RAM space.

/var/lib/weewx
   The databases of my domotic system are stored under this location, which are updated every 5 minutes.
   The information recorded is mainly related with the weather, heating system and Raspberry Pi
   conditions. Of course, the information recorded on this databases should be permanent and not be lost
   after each restart. For this reason I decided to move the databases from this point to a location in
   a external HDD.

/var/lib/upsd
   I use USPD (Uninterruptible Power Supply Daemon) to shut down in a controlled way my Raspberry Pi in
   case there is a power shortage. To know more about this topic see this [33]post. This daemon will
   update frequently in this location some status information. As there is no need to keep this
   information after a restart I decided to move it to RAM.

Mounting Filesystems in RAM Disk
   In order to mount a filesystem in tmpfs space you should edit /etc/fstab file. The fstab file
   typically lists all available disk partitions and other types of file systems and data sources that
   are not necessarily disk-based, and indicates how they are to be initialized or otherwise integrated
   into the larger file system structure. Each filesystem should be described in a separate line. These
   definitions will be converted dynamically into system mounted units at boot and when the
   configuration of the system manager is reloaded.
   For instance, in order to mount /tmp directory on tmpfs just add to your fstab file the following
   line:
$> vi /etc/fstab
   tmpfs /tmp tmpfs defaults,size=10M 0 0

   The kernel will mount /tmp on RAM, however it will not use any RAM until files are written to /tmp.
   When files are written, the kernel will save them to RAM using, as a maximum, 10 Megabytes. This
   avoids a filesystem from using up all the RAM, which can cause the system to slow down or even crash.
   When files are removed from this location, the associated RAM to store them will be freed up.

Editing fstab file
   There are a few interesting options when configuring filesystems in fstab file in order to reduce the
   writes performed in your Raspberry Pi SD Card:
     * noatime option. Linux records information about the time when files were created and last
       modified as well as when they were last accessed. With the noatime mount option, reading accesses
       to the file system will no longer result in an update to the atime information associated with
       the file. The importance of the noatime setting is, that it eliminates the need of the system to
       make writes to the file system for files which are simply being read. This can result in
       measurable performance gains.
     * commit option. Filesystems with journaling, such as ext4 or ext3, use the commit option as the
       frequency with which the filesystem driver itself forces a full sync of all dirty
       data/journal/metadata to the physical media. Increasing the commit time to 30 minutes, for
       instance, will certainly reduce the number of writes (multiple writes are combined into one
       single larger write, updates to previous writes within the commit time frame are cancelled out),
       increasing on the other hand the risk of losing up to 30 minutes of data upon power failure. As
       [34]commented, I use an Uninterruptible Power Supply (UPS) to avoid power interruptions. In my
       particular case, the benefits of incrementing the commit time are greater than its drawbacks.
     * nosuid, noexec and nodev option. Those are not efficiency options, but security precautions. The
       nodev mount option specifies that the filesystem cannot contain special devices. The noexec
       option avoids the execution of any binaries on the partition. The nosuid mount option specifies
       that the filesystem cannot contain set userid files, eliminating the risk of root escalation.

Mounting Filesystems in External devices
   Another option is to mount certain Filesystems outside the SD Card. In my case, I decided to move the
   weeWX database in an external USB Disk. To automatically mount the unit every time the system is
   restarted, you have just to add a line in the  /etc/fstab file. In order to identify the drive, use
   the UUID or the unit label extracted fromlsblk command instead of the unit name, which can change
   over time. External devices that are to be mounted when present but ignored if absent may require
   the nofail option. It can be combined with the x-systemd.device-timeout option, in seconds. Be aware
   that 0 means infinite timeout.

Example of fstab file

   proc /proc proc defaults 0 0
   PARTUUID=bbf24818-01 /boot vfat defaults,noatime 0 2
   PARTUUID=bbf24818-02 / ext4 defaults,noatime,commit=1800 0 1
   UUID=8EEAC53DEAC521F7 /media/Multimedia ntfs-3g uid=1001,gid=dani,umask=0022 0 0UUID=8EEAC53DEAC521F7
   /media/Multimedia ntfs-3g uid=1001,gid=dani,umask=0022 0
   0UUID=fb6bce81-1cc0-41dc-aec4-1efc89af45af /media/weewxDB ext4
   defaults,nofail,x-systemd.device-timeout=5,noatime 0 0

   #/run, /var/run, /run/lock, /var/run/lock will be automatically created by default - tmpfs
   tmpfs /tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=10M 0 0
   tmpfs /var/tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=1M 0 0
   tmpfs /var/log tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755 0 0
   tmpfs /var/www/html tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=50M 0 0
   tmpfs /var/lib/upsd tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=4K 0 0

Disabling SWAP in your Raspberry Pi
   To increase the quantity of RAM available, Linux system's use swap space. If a system needs more RAM
   resources, it will move inactive pages in memory to the swap space. This can help the limited memory
   of your Raspberry Pi to have more available RAM. However, the swap space will be located in the SD
   card. It will not only offer slower access time, but also increase the number of writes. It will,
   without any doubt, reduce the lifespan of your card.
   To disable swap just run the following command:
$> sudo swapoff --all

   Confirm that no swap exists by checking that the Swap line of the following command is 0:
$> sudo free -h

   If your system uses a swap partition instead of a swap file, remove the corresponding line in
   /etc/fstab file as explained in the previous sections.

Checking the results
   Once you are done editing the fstab file, reboot and check if the system loads correctly. You can
   check the directories that have been mounted in tmps of the mounting by typing:
$> sudo mount -l | grep tmpfs

   To see the free space in RAM, do:
$> sudo free -h

   And finally, to analyse how occupied is each file system mounted, use:
$> sudo df -h

   Remember that, when a file system is mounted in tmps without any size limit, the available space will
   be shared between all of them.


---
https://www.hellojona.com/2017/06/create-a-ram-disk-tmpfs-in-raspberry-pi-3/

Create a RAM Disk (tmpfs) in Raspberry Pi 3
June 25, 2017

   "tmpfs" writes to RAM instead of the SD card on the Raspberry Pi. It is very easy to use, fast, and
   avoid writing too much on the SD card. Excessive writing to the SD card will break it easily. Please
   remember that all data on that RAM Disk will be lost after reboot.

Setup Procedures (Please use root)
   Create the temporary directory for the RAM Disk.
$> mkdir /var/tmp

   Edit the fstab file using your favourite editor (e.g. vi)
$> vi /etc/fstab

   Add the following line to /etc/fstab to create a 400MB RAM Disk
tmpfs /var/tmp tmpfs nodev,nosuid,size=400M 0 0

   Execute the following command to mount the newly created RAM Disk
$> mount -a

   To verify the RAM Disk is created and mounted successfully, execute the following command
$> df -h

   and you should see something like this
Filesystem      Size  Used Avail Use% Mounted on
/dev/root        29G  1.5G   26G   6% /
devtmpfs        458M     0  458M   0% /dev
tmpfs           462M     0  462M   0% /dev/shm
tmpfs           462M  6.2M  456M   2% /run
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           462M     0  462M   0% /sys/fs/cgroup
tmpfs           400M     0  400M   0% /var/tmp
/dev/mmcblk0p1   63M   22M   42M  35% /boot

   Temporary files can now be write to /var/tmp partition. This blog will share more use cases on this
   RAM Disk.


---
https://www.zdnet.com/article/raspberry-pi-extending-the-life-of-the-sd-card/

Raspberry Pi: Extending the life of the SD card

   SD cards are said to have a finite life. If you are planning on running a Raspberry Pi 24x7x365,
   there are some steps that you can take with GNU/Linux to extend the life of the card: here are some
   ideas.

   Recently I posted about how I [64]believe that the Raspberry Pi is the perfect small server .  One
   question came up about the SD storage. SD cards are said to have a finite amount of writes that are
   possible, before they start to fail.

   Is this an issue when using the Pi as a server? It could be, even though posts about SD card failures
   are scattered but not entirely conclusive. I started to look at ways to minimize the number of writes
   to the SD card, which in theory should help extend its life.

    Best Practices for running GNU/Linux on an SD card
    1. Get a larger card. Writes are supposed to be spread out among the card, so the larger the card,
       the less chance of it writing over the same area multiple times. Most GNU/Linux distributions on
       the Pi can fit on a 4GB card, but 8GB and even 16GB cards are becoming more affordable. Just
       going from a 4GB to 8 GB card will cut the number of writes to the same area of the card in half.
    2. Stick with name brands. There are a lot of posts that mention sticking to top brands. I didn't
       compile a list nor do I endorse any specific brands, but fortunately there are enough posts out
       there that show the top brands and their failure rates.
    3. Tweak GNU/Linux to write to RAM instead of the SD card. This uses a feature called "tmpfs", which
       a really cool feature of GNU/Linux. Tmpfs can write to RAM as if it was an ordinary filesystem.
       It's fast, efficient, and easy to use. More details on that below.
    4. Set the SD card to read-only mode. This essentially makes GNU/Linux run in read-only mode,
       similar to how it works booting from a Live CD. This avoids any writing to the SD card and in
       theory can extend its life. There are some drawbacks to this though. First, it takes a bit of
       work to set up, which is out of the scope of this article. Second, changes that are made will be
       lost when the system is rebooted because they are not written to the SD card. To me, running
       GNU/Linux in read-only mode is overkill and I don't recommend going to this extreme.

   Using Tmpfs
   As I mentioned, tmpfs can write to RAM instead of the local disk (in this case, the SD card). Using
   it is simple. All that needs to be done is add an entry to the /etc/fstab file (to mount the folder
   you wish to have written to RAM) and reboot (so that each mount is cleanly mounted before services
   start writing files).

   The kernel will do the rest for you by managing the writes to the RAM on this virtual filesystem. The
   really neat part about this is that the kernel will only use the amount of RAM required for writing
   files, not the entire size of the mount. So, for example, say we add this line to the /etc/fstab
   file:

   tmpfs   /var/log    tmpfs    defaults,noatime,nosuid,mode=0755,size=100m    0 0

   The kernel will mount /var/log to RAM, however it will not use any RAM until files are written to
   /var/log.  When files are written to /var/log, the kernel will save them to RAM and only use space to
   save the files.  When files are removed from /var/log, the associated RAM to store them is freed up.

   This means that it only uses what RAM it needs to in order to store the files, which makes it very
   efficient.

   In /etc/fstab, you can also specify the total size to allocate for each mount. In the example above,
   we set "size=100m" so that /var/log can use up to 100 MB of space and no more. This avoids a
   filesystem from using up all of the RAM which can cause the system to slow down or even crash. By
   running the "mount" command, we can see in the example above that /var/log is mounted as a tmpfs
   volume to RAM, 100 MB in size.

   Filesystem            Size  Used Avail Use% Mounted on
   tmpfs                 100M  596K  100M   1% /var/log

   There are a variety of locations that GNU/Linux likes to make frequent writes. This is a list of
   entries below that I use as a starting point that should fit for most distributions.

   tmpfs    /tmp    tmpfs    defaults,noatime,nosuid,size=100m    0 0
   tmpfs    /var/tmp    tmpfs    defaults,noatime,nosuid,size=30m    0 0
   tmpfs    /var/log    tmpfs    defaults,noatime,nosuid,mode=0755,size=100m    0 0
   tmpfs    /var/run    tmpfs    defaults,noatime,nosuid,mode=0755,size=2m    0 0
   tmpfs    /var/spool/mqueue    tmpfs    defaults,noatime,nosuid,mode=0700,gid=12,size=30m    0 0

   As you can see I make use of the "size=" parameter to avoid using up huge amounts of RAM in case
   something tries to save a huge amount of data. The "noatime" and "nosuid" parameters are also
   recommended for security and performance, and "mode=" along with "gid=" matches the permissions and
   group of the original filesystem to what was located on the SD card originally.

   Yep, tmpfs can also handle permissions. As usual, entries in /etc/fstab mount over the top of what is
   on the SD card, as standard Unix/Linux types do. So if for some reason the mounts fail, writes will
   still work to the SD card.

   One additional point to keep in mind is that anything mounted with tmpfs will be lost on a reboot.
   So, logs in /var/log in the example above will be wiped out if the computer is shut down or rebooted.
   So you will not want to save any files with tmpfs that need to be persistent among reboots.

   I'm actively using these settings and so far having great results. Time will tell how the Pi and/or
   SD card hold up, but there are a lot of posts out there with some great uptimes, as we know GNU/Linux
   itself doesn't need frequent rebooting like other operating systems.  The steps above should
   hopefully hold up, especially if you intend to run the Pi 24x7x365.


---
https://www.domoticz.com/wiki/Setting_up_a_RAM_drive_on_Raspberry_Pi

Setting up a RAM drive on Raspberry Pi

Introduction
   It is strongly believed that excessive writing to the Raspberry Pi's SD card will finally cause it to
   fail. But the only way to exchange data between Lua and shell scripts is through temporarily files.
   To avoid SD card wearing these files could be written to a virtual drive in RAM. This guide shows how
   to set up a 1 MB RAM drive on your Raspberry Pi.

   For more elaborate instructions, see [5]Moving Log and Temporary Files To a RAM Drive

Setup
   Goal is to have a 1MB directory in RAM for temporarily storage.
   First create the tmp dir:
$> sudo mkdir /var/tmp

   then edit the fstab file by
$> sudo nano /etc/fstab

   and add the line
 tmpfs /var/tmp tmpfs nodev,nosuid,size=1M 0 0

   save and close the file. Now issue
$> sudo mount -a

   To check if your operation succeeded issue
$> df

   which should report (among the other disks) a tmpfs with 1024 1K blocks (=1MB) as /var/tmp
$> df
 Filesystem     1K-blocks    Used Available Use% Mounted on
 rootfs           3807952 1814024   1820896  50% /
 /dev/root        3807952 1814024   1820896  50% /
 devtmpfs          183596       0    183596   0% /dev
 tmpfs              38372     268     38104   1% /run
 tmpfs               5120       0      5120   0% /run/lock
 tmpfs              76740       0     76740   0% /run/shm
 /dev/mmcblk0p1     57288   18544     38744  33% /boot
 tmpfs               1024       4      1020   1% /var/tmp

   This should give you a small space for your garbage. Instead of writing your tmp files to /tmp, now
   write them to /var/tmp. And remember that, as is generally the case with RAM drives, data on the
   drive is lost after a reboot.


---
