filename: swapping_two_nums_without_third_quora_20221020.txt
https://www.quora.com/How-can-two-integers-be-swapped-without-using-a-third-variable/answer/Tony-Flury

How can two integers be swapped without using a third variable?

It can be done but mainly it is a 'trick' used by beginners to show that they are 'leet' coders: problem is
it tends to show that they know nothing about modern compilers, code readability, or even that code is read
by other people far more often than it is compiled.

One example is the 'xor' trick:

    a = a^b
    b = a^b
    a = a^b

It works because xor is mutually reversible ie

(a^b)^b == a

but unless you can remember the 'trick' that code takes a few seconds to parse - cognitive load you don't
need when trying to work out or remember what the code does. Also most good compilers will recognise the
trick and optimise it away anyway - using the same machine code as a normal swap.

So the trick hasn't made the code any quicker, hasn't save memory and has just made the code more difficult
to read - not a smart move.

I wish colleges wouldn't teach those tricks - it teaches students that development is about 'leet' tricks 
and it isn't).

The only time you might need to know this is when you are working with a limited memory system, And even th
. A good compiler might well recognise a normal swap and use the xor trick under the hood, so using the xor
trick in your code again achieves nothing except for sowing confusion.


---
Another one:

a = a + b
b = a - b
a = a - b

Even worse than the xor as a swap algorithm given that you might have overflow, but perhaps useful if you're
a linear algebra student trying to simplify some statements about elementary row operations.


---

