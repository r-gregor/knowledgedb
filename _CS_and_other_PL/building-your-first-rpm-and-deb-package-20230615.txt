filename: building-your-first-rpm-and-deb-package_20230615.txt
https://tecadmin.net/building-your-first-rpm-package/

The Beginner's Guide to Building Your First RPM Package
June 14, 2023

   If you're starting your journey in the world of Linux and have chosen the Red Hat ecosystem, one of
   the fundamental skills you'll need to master is the creation of RPM packages. This guide will walk
   you through the process step-by-step, helping you to understand RPM packaging and how you can build
   your own RPM package, even as a beginner.

What is an RPM Package?
   RPM stands for Red Hat Package Manager. It's a powerful system used for managing the installation,
   updating, and removal of software packages in Linux distributions like Fedora, CentOS, and of course,
   Red Hat. RPM is designed to handle everything from binary files, libraries, to configuration files,
   providing a comprehensive way to distribute and manage software.

Step 1: Setting Up Your Environment
   Before you can start building your RPM package, you'll need to set up your development environment.
   For this guide, we'll assume you're using a CentOS system. Install the RPM development tools by
   running:
$> sudo yum install rpmdevtools

   Next, set up your RPM build environment with:
$> rpmdev-setuptree

   This command creates a directory structure in your home directory under ~/rpmbuild. The structure
   includes directories like BUILD, RPMS, SOURCES, SPECS, and SRPMS, each serving a specific purpose in
   the packaging process.

Step 2: Creating the SPEC File
   One of the most crucial parts of the RPM package building process is creating the SPEC file. This
   file provides a description of the package, the process to build it, and the list of files to be
   included. Create your SPEC file in the ~/rpmbuild/SPECS directory:
$> cd ~/rpmbuild/SPECS
$> nano myprogram.spec

   Here's a simple SPEC file for a basic "Hello World" program written in C:

<code>
   Name: hello_world
   Version: 1.0
   Release: 1%{?dist}
   Summary: A simple Hello World program

   License: GPLv3+
   URL: http://example.com
   Source0: %{name}-%{version}.tar.gz

   BuildRequires: gcc

   %description

   A simple Hello World program written in C.

   %prep

   %setup -q


   %build

   gcc -o hello hello.c

   %install

   rm -rf $RPM_BUILD_ROOT
   install -m 0755 hello $RPM_BUILD_ROOT/usr/local/bin/hello

   %clean

   rm -rf $RPM_BUILD_ROOT

   %files

   /usr/local/bin/hello

   %changelog

   * Mon Jun 12 2023 Your Name <your@email.com>
   - First release
</code>

   This SPEC file will build a binary RPM package from a tarball (tar.gz file) named
   "hello_world-1.0.tar.gz" that contains the source code file hello.c.

Step 3: Building the RPM Package
   Once your SPEC file is ready, you can start the RPM package building process. Run:
$> rpmbuild -ba myprogram.spec

   This command will create both binary and source RPMs. The '-ba' option tells rpmbuild to build both
   types of packages.

Step 4: Testing the Package
   Once you've built your package, you'll find the resulting RPM file in the ~/rpmbuild/RPMS directory.
   You can install it with:
$> sudo rpm -ivh ~/rpmbuild/RPMS/x86_64/hello_world-1.0-1.el7.x86_64.rpm

   Congratulations, you have successfully built and installed your first RPM package!

Wrapping Up
   The process of creating an RPM package involves several steps, from setting up your environment and
   creating a SPEC file to actually building and testing the package. While this guide provides a
   beginner-friendly introduction, RPM packaging is a vast topic with many more advanced aspects to
   learn.

   As you continue your journey with RPM, you'll likely encounter complex packages with dependencies,
   scripts, and intricate build procedures. Don't be discouraged - with practice, patience, and a
   continued desire to learn, you'll soon master the art of RPM packaging. Happy building!



---
https://tecadmin.net/building-your-first-debian-package/

The Beginner's Guide to Building Your First Debian Package
June 14, 2023

   Creating a Debian package for distribution can seem like a daunting task for beginners, but once you
   understand the process, it's actually quite manageable. Let's walk you through creating your first
   Debian package.

Step 1: Setting up your Environment
   Before you begin, you need to ensure that you have a Debian-based Linux distribution installed on
   your machine. Ubuntu is a popular option, but other Debian-based distributions such as Mint will also
   work.

   Next, make sure you have the necessary software to build Debian packages. The primary tool we'll be
   using is dpkg-deb, which comes pre-installed on most Debian-based systems. However, you will also
   need a few additional tools that can be installed using apt-get:
$> sudo apt-get install build-essential devscripts debhelper

   These packages include essential compilation tools (like gcc and make), as well as tools specifically
   designed for building Debian packages.

Step 2: Creating the Directories
   Debian packages have a specific directory structure that needs to be followed. To begin with, create
   a directory for your package. The convention is to name the directory as name-version. For example,
   if your package's name is "mypackage" and the version is 1.0, the directory would be mypackage-1.0.

   In the terminal, create the directory with:
$> mkdir mypackage-1.0

   Inside this directory, you'll need to create the following subdirectories:

   DEBIAN: This is where the control files of the package are placed. These files tell dpkg how to
   handle the package.

   usr/bin: This is where the executable files will go.

   To create these directories, use the following commands:
$> mkdir -p mypackage-1.0/DEBIAN
$> mkdir -p mypackage-1.0/usr/bin

Step 3: Creating the Control File
   The control file is a vital component of any Debian package. It provides necessary information about
   the package such as its name, version, architecture, dependencies, etc.

   Use a text editor to create a file named control in the DEBIAN directory with the following contents:

<code>
   Package: mypackage
   Version: 1.0
   Section: base
   Priority: optional
   Architecture: all
   Depends: libc6 (>= 2.7), libncurses5 (>= 5.7)
   Maintainer: Your Name <your.email@example.com>
   Description: My first Debian package
</code>

   Make sure to replace "Your Name" and "your.email@example.com" with your actual name and email address.
   The "Depends" field should list any dependencies that your package has.

Step 4: Adding the Executable Files
   Place the executable files of your program into the usr/bin directory. For example, if you have a
   shell script named myprogram, you would copy it to the usr/bin directory with:
$> cp myprogram mypackage-1.0/usr/bin/

   Remember to make the file executable by using the following command:
$> chmod +x mypackage-1.0/usr/bin/myprogram

Step 5: Building the Debian Package
Now that you have everything in place, it's time to build the Debian package. Navigate to the parent
directory of your package directory and use the dpkg-deb command to build the package:
$> dpkg-deb --build mypackage-1.0

   If everything went smoothly, you should now have a file named mypackage-1.0.deb in the current
   directory. You can install it using the dpkg -i command:
$> sudo dpkg -i mypackage-1.0.deb

   Congratulations, you've just created your first Debian package!

Final Thoughts
   Building Debian packages is an essential skill for software developers working on Debian-based
   systems. It allows you to distribute your software in a standardized format that's easy to install
   and manage.

   While this guide covers the basics, there's a lot more to learn about Debian packaging. More complex
   packages may include pre- and post-install scripts, additional metadata, and more sophisticated
   directory structures. If you're interested in diving deeper into Debian packaging, check out the
   Debian New Maintainers' Guide, which provides a comprehensive overview of the process.


---

