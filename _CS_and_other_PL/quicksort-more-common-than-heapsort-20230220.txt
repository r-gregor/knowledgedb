filename: quicksort-more-common-than-heapsort_20230220.txt
https://www.quora.com/Why-is-quicksort-more-common-than-heapsort-even-though-they-have-equal-time-complexities/answer/Joe-Zbiciak

Why is quicksort more common than heapsort, even though they have equal time complexities?

Benchmark them! I’m serious, benchmark them!

Write yourself up a Heapsort and a Quicksort. Copy the classic versions of each out of your textbook. Then
measure how long each takes to sort a random array of N elements for several values of N. To save time,
double N each time. Be sure to let N get fairly large—say, at least 2^24, or maybe 2^28 if you’re up for it.

And, just to be sure, have each sort several randomized arrays of each size. After all, even with randomized
arrays, you might get a “lucky” input. You’ll find that both grow at O(NlgN). I think you’ll also find that,
pretty consistently, Quicksort is faster.

I did this experiment waaay back in 1994 when I took my data structures and algorithms class, and sure enough,
Quicksort was noticeably faster, even back then, on much simpler hardware. I haven’t run the experiment
recently, but I suspect on modern machines the effect is more pronounced.

The big-Oh time complexity measure isn’t everything! Why is that? The time complexity measure ignores
constant factors. Spend some time meditating on why that might be.

Hint: What’s your data locality look like, and what do your inner and outer loops look like for each?

You’ll also notice that I said “use randomized arrays” with your textbook Quicksort. You might consult your
textbook for why I suggested that.

In practice, the pure, classic Quicksort isn’t all that common either. Usually, they doll it up with various
improvements, such as:
- Randomized pivot selection.
- Select pivot from a median of multiple potential pivots.
- Hybrid sorts that use selection, merge, insertion, or even heap sort once the partition size gets below a
  certain threshold.

That’s if they use a Quicksort variant at all. Timsort is pretty popular these days, I hear. (And, to be fair, 
there’s modified and improved versions of Heapsort as well. Real world modern practical implementations doni't
tend to use the original classic textbook algorithms from the 1950s and 1960s directly. We’ve learned a lot
since then.)


---

