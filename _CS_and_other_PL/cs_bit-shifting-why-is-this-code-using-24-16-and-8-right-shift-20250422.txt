filename: cs_bit-shifting-why-is-this-code-using-24-16-and-8-right-shift-20250422.txt
https://stackoverflow.com/questions/54520664/bit-shifting-why-is-this-code-using-24-16-and-8-right-shift

Bit Shifting - Why is this code using 24, 16, and 8 right shift?

   I am looking at this java code and trying to understand it. I understand everything about it except
   the bit shifting part.

   I know the code below that uses bit shifting is building some values to fill up in the byte[] but I
   dont know why specifically it uses right shift and why for 24, then 16, then 8 bits? Where and why
   are these values picked and not some other values?

private void Send(NetSocket out, int MsgID, byte MsgSeq, char MsgLetter, String data) {
	int msglen = data.length() + 2;
	byte[] msg = new byte[msglen + 8];
	byte[] md = data.getBytes();
	msg[0]    = (byte) (msglen >> 24);
	msg[1]    = (byte) (msglen >> 16);
	msg[2]    = (byte) (msglen >> 8);
	msg[3]    = (byte) (msglen);
	msg[4]    = (byte) (MsgID >> 24);
	msg[5]    = (byte) (MsgID >> 16);
	msg[6]    = (byte) (MsgID >> 8);
	msg[7]    = (byte) (MsgID);
	msg[8]    = (byte) MsgLetter;
	msg[9]    = MsgSeq;
	System.arraycopy(md, 0, msg, 10, msglen - 2);

	// send
}

***
   If you have a 32 bit integer, you can treat it as four 8-bit integers:
31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01
\---------------------/ \---------------------/ \---------------------/ \------------------/
  bits 24-31 (8 bits)     bits 16-23 (8 bits)      bits 8-15 (8 bits)     bits 0-7 (8 bits)

   Big-endian encoding is where you send the most-significant byte first, so you want bits 24-31 in the
   first byte, bits 16-23 in the second byte, and so forth. The standard byte order for network
   communications is big-endian. (Little-endian is the other way around, and is commonly used for
   in-memory storage on x86 and some other platforms.)

   If you cast an integer to a byte, the most significant bits are thrown away.
31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01
\---------------------/ \---------------------/ \---------------------/ \------------------/
  bits 24-31 (8 bits)     bits 16-23 (8 bits)      bits 8-15 (8 bits)     bits 0-7 (8 bits)


             cast to (byte)
                                                                        07 06 05 04 03 02 01
                                                                        \------------------/
                                                                          bits 0-7 (8 bits)


   If you shift right, you move the bits over, so that you can cast to (byte) and successively get the
   other parts of the 32-bit integer:
31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01
\---------------------/ \---------------------/ \---------------------/ \------------------/
  bits 24-31 (8 bits)     bits 16-23 (8 bits)      bits 8-15 (8 bits)     bits 0-7 (8 bits)
          |
          \---------------------------- >> 24 -----------------------------------\
                                                                                 |
                                                                        07 06 05 04 03 02 01
                                                                        \------------------/
                                                                        previously bits 24-31
                                                                        now bits 0-7 (8 bits)


***
   This is simply packing the 4 bytes of a 32-bit integer into 4 successive bytes, taking care to use a
   specific endianness (big-endian in this case). It is simply saying:
// put the "biggest" 8 bits into the first byte,
// by right shifting the value 24 bits
msg[0] = (byte) (msglen >> 24);

   right shifting a 32-bit integer 24 bits means you are left with the 8 most significant bits in the
   least significant 8 places, ready to pack into a byte. The next 3 lines deal with the next 8 bits
   (right-shift 16), then the next (right-shift 8), etc.

   Casting to a byte simply discards everything except the least significant 8 bits, so after each shift
   (or lack of a shift in the final one), we take one quarter of the 32 bits.

   So again: this simply implements a big-endian length prefix of a frame. The receiving code will
   reverse this by left-shifting and or-ing, to rebuild the length from the first 4 bytes.


---

