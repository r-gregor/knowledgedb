filename: jv_creating_softlinks_hardlinks_to_linux_files-multif_20190131.txt
https://www.baeldung.com/java-symlink

Create a Symbolic Link with Java
October 26, 2018

1. Overview
   In this tutorial, we’ll explore different ways of creating a symbolic link in Java using the
   NIO.2 API, and explore the differences between hard and soft file links.

2. Hard vs Soft/Symbolic Links
   First, let’s define what file links are and what is their expected behavior. A file link is a pointer
   that transparently references a file stored in the file system.

   A common misunderstanding is thinking that a file link is a shortcut, so let’s check their behavior:
     * A shortcut is a regular file that references a target file
     * Soft/Symbolic link is a file pointer that behaves as the file that is linking to – if the target
       file gets deleted then the link is unusable
     * A hard link is a file pointer that mirrors the file that it’s linking to, so it’s basically like
       a clone. If the target file gets deleted, the link file is still valid

   Most operating systems (Linux, Windows, Mac) already support soft/hard file links, so it shouldn’t be
   a problem to work over them using the [14]NIO API.

3. Creating Links
   First, we have to create a target file to link to, so let’s sequence some data into a file:
public Path createTextFile() throws IOException {
    byte[] content = IntStream.range(0, 10000)
      .mapToObj(i -> i + System.lineSeparator())
      .reduce("", String::concat)
      .getBytes(StandardCharsets.UTF_8);
    Path filePath = Paths.get("", "target_link.txt");
    Files.write(filePath, content, CREATE, TRUNCATE_EXISTING);
    return filePath;
}

   Let’s create a symbolic link to an existing file, ensuring that the created file is a symbolic link:
public void createSymbolicLink() throws IOException {
    Path target = createTextFile();
    Path link = Paths.get(".","symbolic_link.txt");
    if (Files.exists(link)) {
        Files.delete(link);
    }
    Files.createSymbolicLink(link, target);
}

   Next, let’s take a look at a hard link creation:
public void createHardLink() throws IOException {
    Path target = createTextFile();
    Path link = Paths.get(".", "hard_link.txt");
    if (Files.exists(link)) {
        Files.delete(link);
    }
    Files.createLink(link, target);
}

   By listing the files with their differences, we can see that the soft/symbolic link file size is
   small, while the hard link is using the same space as the linked file:
 48K    target_link.txt
 48K    hard_link.txt
4.0K    symbolic_link.txt

   To clearly understand what are the possible exceptions that can be thrown, let’s see the checked
   exceptions on the operations:
     * UnsupportedOperationException – when the JVM doesn’t support file links in a specific system
     * FileAlreadyExistsException – when the link file already exists, the override is not supported by
       default
     * IOException – when an IO error occurs, e.g. invalid file path
     * SecurityException – when the link file can’t be created or the target file can’t be accessed
       because of limited file permissions

4. Operations with Links
   Now, if we have a given file system with existing file links, it’s possible to identify them and show
   their target files:
public void printLinkFiles(Path path) throws IOException {
    try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {
        for (Path file : stream) {
            if (Files.isDirectory(file)) {
                printLinkFiles(file);
            } else if (Files.isSymbolicLink(file)) {
                System.out.format("File link '%s' with target '%s' %n",
                  file, Files.readSymbolicLink(file));
            }
        }
    }
}

   If we execute it in our current path:
printLinkFiles(Paths.get("."));

   We would get the output:
File link 'symbolic_link.txt' with target 'target_link.txt'

   Note that hard link files aren’t simply identifiable with NIO’s API,  low-level operations are
   required to work over that kind of files.

5. Conclusion
   This article describes the different type of file links, their difference with shortcuts, and how to
   create and operate over them using a pure Java API that works over the mainstream file systems on the
   market.

   The implementation of these examples and code snippets can be found over on GitHub.


---
https://docs.oracle.com/javase/tutorial/essential/io/links.html

   The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't
   take advantage of improvements introduced in later releases.

Links, Symbolic or Otherwise
   As mentioned previously, the java.nio.file package, and the Path class in particular, is "link
   aware." Every Path method either detects what to do when a symbolic link is encountered, or it
   provides an option enabling you to configure the behavior when a symbolic link is encountered.

   The discussion so far has been about [39]symbolic or soft links, but some file systems also support
   hard links. Hard links are more restrictive than symbolic links, as follows:
     * The target of the link must exist.
     * Hard links are generally not allowed on directories.
     * Hard links are not allowed to cross partitions or volumes. Therefore, they cannot exist across
       file systems.
     * A hard link looks, and behaves, like a regular file, so they can be hard to find.
     * A hard link is, for all intents and purposes, the same entity as the original file. They have the
       same file permissions, time stamps, and so on. All attributes are identical.

   Because of these restrictions, hard links are not used as often as symbolic links, but the Path
   methods work seamlessly with hard links.

   Several methods deal specifically with links and are covered in the following sections:
     * Creating a Symbolic Link
     * Creating a Hard Link
     * Detecting a Symbolic Link
     * Finding the Target of a Link

Creating a Symbolic Link
   If your file system supports it, you can create a symbolic link by using the
   createSymbolicLink(Path, Path, FileAttribute<?>) method. The second Path argument represents the
   target file or directory and might or might not exist. The following code snippet creates a symbolic
   link with default permissions:
Path newLink = ...;
Path target = ...;
try {
    Files.createSymbolicLink(newLink, target);
} catch (IOException x) {
    System.err.println(x);
} catch (UnsupportedOperationException x) {
    // Some file systems do not support symbolic links.
    System.err.println(x);
}

   The FileAttributes vararg enables you to specify initial file attributes that are set atomically when
   the link is created. However, this argument is intended for future use and is not currently
   implemented.

Creating a Hard Link
   You can create a hard (or regular) link to an existing file by using the createLink(Path, Path)
   method. The second Path argument locates the existing file, and it must exist or a
   NoSuchFileException is thrown. The following code snippet shows how to create a link:
Path newLink = ...;
Path existingFile = ...;
try {
    Files.createLink(newLink, existingFile);
} catch (IOException x) {
    System.err.println(x);
} catch (UnsupportedOperationException x) {
    // Some file systems do not
    // support adding an existing
    // file to a directory.
    System.err.println(x);
}

Detecting a Symbolic Link
   To determine whether a Path instance is a symbolic link, you can use the isSymbolicLink(Path)
   method. The following code snippet shows how:
Path file = ...;
boolean isSymbolicLink =
    Files.isSymbolicLink(file);

   For more information, see Managing Metadata.

Finding the Target of a Link
   You can obtain the target of a symbolic link by using the readSymbolicLink(Path) method, as
   follows:
Path link = ...;
try {
    System.out.format("Target of link" +
        " '%s' is '%s'%n", link,
        Files.readSymbolicLink(link));
} catch (IOException x) {
    System.err.println(x);
}

   If the Path is not a symbolic link, this method throws a NotLinkException.
   

---
http://www.java2s.com/Tutorials/Java/Java_io/0980__Java_nio_Symbolic_Links.htm

Java IO Tutorial - Java Symbolic Links

   A symbolic link contains a reference to another file or directory.

   The file referenced by a symbolic link is known as the target file for the symbolic link.

   Operations on a symbolic link are transparent to the application. We can work with symbolic links
   using the java.nio.file.Files class.

   isSymbolicLink(Path p) method checks if the file specified by the specified path is a symbolic link.

   createSymbolicLink() method of the Files, which may not be supported on all platforms, creates a
   symbolic link.
   
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
/*  w  w w  . j  av  a  2  s.c  om*/
public class Main {
  public static void main(String[] args) throws Exception {
    Path existingFilePath = Paths.get("C:\\Java_Dev\\test1.txt");
    Path symLinkPath = Paths.get("C:\\test1_link.txt");
    Files.createSymbolicLink(symLinkPath, existingFilePath);
  }
}

   The Java NIO API follows the symbolic link by default. We can specify whether we want to follow a
   symbolic link or not. The option not to follow a symbolic link is indicated by using the enum
   constant LinkOption. NOFOLLOW_LINKS.

   The LinkOption enum is declared in the java.nio.file package. Methods supporting this option let we
   pass an argument of the LinkOption type.

   We can use the createLink(Path newLink, Path existingPath) method of the Files class to create a hard
   link.


---
https://javabeat.net/creating-hard-links-and-soft-links-for-a-file-in-java/

Creating Hard links and Soft links for a file in Java
July 17, 2012

   We have been exploring the NIO enhancements in Java 7 and in this post I will explain about creating
   links- Hard links and Soft links in Java. And this feature is part of Java 7.

     also read:
     * Java 7.0 Tutorials
     * New Features in Java 7.0
     * G1 Garbage Collector in Java 7.0

   A link is kind of substitute name to access a particular file/directory, something like an alias to
   the file/directory. This way it allows us to refer to a file/directory by more than one name. There
   are 2 types of links that can be created:
     * Symbolic Links: These links refer to the file/directory path. And using these links can be used
       to directly operate on the path they refer to. In my daily work I use a lot of symbolic links and
       they are really flexible. In this case if the file to which the link refers to is deleted, the
       link continues to exist but it is not a valid link.
     * Hard Links: These links are more stricter than symbolic links which refer to the physical
       location of the file. If the content of the original file is changed, the link also gets updated
       whereas if the original file is deleted, the link continues to exist and is valid file.

Creating Symbolic Links in Java
   Not all operating systems support creating symbolic links. The program I tried on Windows couldn’t
   create a symbolic link. But for creating symbolic link we make use of the
   Files.createSymbolicLink method which takes the link path as well as the target path, where both
   link and target are instances of type Path.

Creating Hard links in Java
   On Windows I was able to create the Hard links and for this we make use of Files.createLink
   method which takes in link path and the target path.
   Lets look at the example where both soft link and hard links are created:
   Note: I tried this sample on Windows and Linux, but you can get better results in Linux, because I am
   not sure how to list the links in Windows.

public class LinkTest {
  public static void main(String[] args) throws IOException {
    Path file1 = Paths.get("test1");
    System.out.println(file1.toRealPath());
    Path hLink = Paths.get("test1.hLink");
    Path sLink = Paths.get("test1.symLink");

    try{
      Files.createSymbolicLink(sLink, file1);

    }catch(UnsupportedOperationException ex){
      System.out.println("This OS doesn't support creating Sym links");
    }

    try{
      Files.createLink(hLink, file1);
      System.out.println(hLink.toRealPath());
    }catch(UnsupportedOperationException ex){
      System.out.println("This OS doesn't support creating Sym links");
    }

  }
}

   Pro Java 7 NIO.2 addresses the three primary elements that offer new input/output (I/O) APIs in Java
   7, giving you the skills to write robust, scalable Java applications.


---
