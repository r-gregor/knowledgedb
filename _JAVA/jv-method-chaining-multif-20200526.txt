filename: jv_method-chaining-multif_20200526.txt
https://www.geeksforgeeks.org/method-chaining-in-java-with-examples/

Method Chaining In Java with Examples

   Method Chaining is the practice of calling different methods in a single line instead of calling
   different methods with the same object reference separately. Under this procedure, we have to write
   the object reference once and then call the methods by separating them with a (dot.). It must be your
   foremost question, how will it work and how to use it?.

   Let's audit the example first and then it will be much smoother to explain.

   Example 1:

class A {

    private int a;
    private float b;

    A() {
        System.out.println("Calling The Constructor");
    }

    int setint(int a) {
        this.a = a;
        return this.a;
    }

    float setfloat(float b) {
        this.b = b;
        return this.b;
    }

    void display() {
        System.out.println("Display="
                           + a + " " + b);
    }
}

// Driver code
public class Example {
    public static void main(String[] args) {
        // This will return an error as
        // display() method needs an object but
        // setint(10) is returning an int value
        // instead of an object reference
        new A().setint(10).display();
    }
}


Output:
   Compilation Error in java code:-
prog.java:34: error: int cannot be dereferenced
        new A().setint(10).display();
                          ^
1 error

   Let's Figure Out The Above Example:
     * When we are calling the constructor, one should perceive that constructor does not holds any
       return type BUT it returns the current object reference. [**1]Open this for more about
       constructors.
     * As object reference is returned by the constructor, we can use the returned object reference for
       calling another method as well.
     * Thus, by implementing dot(.) operator we can call another method too, named "setint(10)". As of
       now, we are trying to call the display method further, but, it's impossible. Why? check out the
       next point.
     * Now, "setint(10)" method is returning integer value of the variable and in a common way, one can
       easily understand that next method can't be called on the basis of a variable. To solve this,
       "setint(10)" method must return object reference. How it can be done?.

   Example 2:-

class A {

    private int a;
    private float b;

    A() {
        System.out.println("Calling The Constructor");
    }

    public A setint(int a) {
        this.a = a;
        return this;
    }

    public A setfloat(float b) {
        this.b = b;
        return this;
    }

    void display() {
        System.out.println("Display="
                           + a + " " + b);
    }
}

// Driver code
public class Example {
    public static void main(String[] args) {

        // This is the "method chaining".
        new A().setint(10).setfloat(20).display();
    }
}


   Output:
Calling The Constructor
Display=10 20.0

   Output : Calling The Constructor
   Display=10 20.0
     * In the above example, we have derived setint(int a) & setfloat(float b) method as the class type.
     * In this case, while returning we are using "this" and it is returning the current instance
       reference. Check [**2]this for the uses and values of "this" reference variable.
     * When the method chaining is implemented in the main method, "setint(10)" & "setfloat(20)" are
       returning the object's reference which is further used to call "display()" method.


---
[**1]
https://www.geeksforgeeks.org/this-reference-in-java/

'this' reference in Java

   'this' is a reference variable that refers to the current object.
   Following are the ways to use 'this' keyword in java :

   1. Using 'this' keyword to refer current class instance variables

//Java code for using 'this' keyword to
//refer current class instance variables
class Test {
    int a;
    int b;

    // Parameterized constructor
    Test(int a, int b) {
        this.a = a;
        this.b = b;
    }

    void display() {
        //Displaying value of variables a and b
        System.out.println("a = " + a + "  b = " + b);
    }

    public static void main(String[] args) {
        Test object = new Test(10, 20);
        object.display();
    }
}

   Output:
a = 10  b = 20


   2. Using this() to invoke current class constructor

// Java code for using this() to
// invoke current class constructor
class Test {
    int a;
    int b;

    //Default constructor
    Test() {
        this(10, 20);
        System.out.println("Inside  default constructor \n");
    }

    //Parameterized constructor
    Test(int a, int b) {
        this.a = a;
        this.b = b;
        System.out.println("Inside parameterized constructor");
    }

    public static void main(String[] args) {
        Test object = new Test();
    }
}

   Output:
Inside parameterized constructor
Inside  default constructor


   3. Using 'this' keyword to return the current class instance

//Java code for using 'this' keyword
//to return the current class instance
class Test {
    int a;
    int b;

    //Default constructor
    Test() {
        a = 10;
        b = 20;
    }

    //Method that returns current class instance
    Test get() {
        return this;
    }

    //Displaying value of variables a and b
    void display() {
        System.out.println("a = " + a + "  b = " + b);
    }

    public static void main(String[] args) {
        Test object = new Test();
        object.get().display();
    }
}


   Output:
a = 10  b = 20


   4. Using 'this' keyword as method parameter

// Java code for using 'this'
// keyword as method parameter
class Test {
    int a;
    int b;

    // Default constructor
    Test() {
        a = 10;
        b = 20;
    }

    // Method that receives 'this' keyword as parameter
    void display(Test obj) {
        System.out.println("a = " + a + "  b = " + b);
    }

    // Method that returns current class instance
    void get() {
        display(this);
    }

    public static void main(String[] args) {
        Test object = new Test();
        object.get();
    }
}

   Output:
a = 10  b = 20


   5. Using 'this' keyword to invoke current class method

// Java code for using this to invoke current
// class method
class Test {

    void display() {
        // calling function show()
        this.show();

        System.out.println("Inside display function");
    }

    void show() {
        System.out.println("Inside show funcion");
    }


    public static void main(String args[]) {
        Test t1 = new Test();
        t1.display();
    }
}

   Output :
Inside show funcion
Inside display function


   6. Using 'this' keyword as an argument in the constructor call

// Java code for using this as an argument in constructor
// call
// Class with object of Class B as its data member
class A {
    B obj;

    // Parameterized constructor with object of B
    // as a parameter
    A(B obj) {
        this.obj = obj;

     // calling display method of class B
        obj.display();
    }

}

class B {
    int x = 5;

    // Default Contructor that create a object of A
    // with passing this as an argument in the
   // constructor
    B() {
        A obj = new A(this);
    }

    // method to show value of x
    void display() {
        System.out.println("Value of x in Class B : " + x);
    }

    public static void main(String[] args) {
        B obj = new B();
    }
}

   Output :
Value of x in Class B : 5



---
[**2]
https://www.geeksforgeeks.org/constructors-in-java/

Constructors in Java

   Constructors are used to initialize the object's state. Like methods, a constructor also
   contains collection of statements(i.e. instructions) that are executed at time of Object creation.

   Need of Constructor
   Think of a Box. If we talk about a box class then it will have some class variables (say length,
   breadth, and height). But when it comes to creating its object(i.e Box will now exist in computer's
   memory), then can a box be there with no value defined for its dimensions. The answer is no.
   So constructors are used to assign values to the class variables at the time of object creation,
   either explicitly done by the programmer or by Java itself (default constructor).

   When is a Constructor called ?
   Each time an object is created using new() keyword at least one constructor (it could be default
   constructor) is invoked to assign initial values to the data members of the same class.

   A constructor is invoked at the time of object or instance creation. For Example:
class Geek {
  .......

  // A Constructor
  new Geek() {}

  .......
}

// We can create an object of the above class
// using the below statement. This statement
// calls above constructor.
Geek obj = new Geek();

   Rules for writing Constructor:
     * Constructor(s) of a class must has same name as the class name in which it resides.
     * A constructor in Java can not be abstract, final, static and Synchronized.
     * Access modifiers can be used in constructor declaration to control its access i.e which other
       class can call the constructor.

                                           Types of constructor

   There are two type of constructor in Java:
    1. No-argument constructor: A constructor that has no parameter is known as default constructor. If
       we don't define a constructor in a class, then compiler creates default constructor(with no
       arguments) for the class. And if we write a constructor with arguments or no-arguments then the
       compiler does not create a default constructor.
       Default constructor provides the default values to the object like 0, null, etc. depending on the
       type.

// Java Program to illustrate calling a
// no-argument constructor

import java.io.*;

class Geek {

    int num;
    String name;

    // this would be invoked while an object
    // of that class is created.
    Geek() {
        System.out.println("Constructor called");
    }
}


class GFG {

    public static void main (String[] args) {

        // this would invoke default constructor.
        Geek geek1 = new Geek();

        // Default constructor provides the default
        // values to the object like 0, null
        System.out.println(geek1.name);

        System.out.println(geek1.num);
    }
}

       Output :
Constructor called
null
0

    2. Parameterized Constructor: A constructor that has parameters is known as parameterized
       constructor. If we want to initialize fields of the class with your own values, then use a
       parameterized constructor.

// Java Program to illustrate calling of
// parameterized constructor.

import java.io.*;


class Geek {

    // data members of the class.
    String name;
    int id;

    // constructor would initialize data members
    // with the values of passed arguments while
    // object of that class created.
    Geek(String name, int id) {
        this.name = name;
        this.id = id;
    }
}


class GFG {

    public static void main (String[] args) {

        // this would invoke the parameterized constructor.
        Geek geek1 = new Geek("adam", 1);
        System.out.println("GeekName :" + geek1.name +
                           " and GeekId :" + geek1.id);
    }
}

       Output:
GeekName :adam and GeekId :1

                                    Does constructor return any value?

   There are no "return value" statements in constructor, but constructor returns current class
   instance. We can write 'return' inside a constructor.

                                          Constructor Overloading

   Like methods, we can overload constructors for creating objects in different ways. Compiler
   differentiates constructors on the basis of numbers of parameters, types of the parameters and order
   of the parameters.

// Java Program to illustrate constructor overloading
// using same task (addition operation ) for different
// types of arguments.
import java.io.*;

class Geek {
    // constructor with one argument
    Geek(String name) {
        System.out.println("Constructor with one " +
                      "argument - String : " + name);
    }

    // constructor with two arguments
    Geek(String name, int age) {

        System.out.println("Constructor with two arguments : " +
                " String and Integer : " + name + " "+ age);

    }

    // Constructor with one argument but with different
    // type than previous..
    Geek(long id) {
        System.out.println("Constructor with one argument : " +
                                            "Long : " + id);
    }
}

class GFG {
    public static void main(String[] args) {
        // Creating the objects of the class named 'Geek'
        // by passing different arguments

        // Invoke the constructor with one argument of
        // type 'String'.
        Geek geek2 = new Geek("Shikhar");

        // Invoke the constructor with two arguments
        Geek geek3 = new Geek("Dharmesh", 26);

        // Invoke the constructor with one argument of
        // type 'Long'.
        Geek geek4 = new Geek(325614567);
    }
}

   Output:
Constructor with one argument - String : Shikhar
Constructor with two arguments - String and Integer : Dharmesh 26
Constructor with one argument - Long : 325614567

   How constructors are different from methods in Java?
     * Constructor(s) must have the same name as the class within which it defined while it is not
       necessary for the method in java.
     * Constructor(s) do not return any type while method(s) have the return type or void if does not
       return any value.
     * Constructor is called only once at the time of Object creation while method(s) can be called any
       numbers of time.

   Related Articles:
     * [**3]Constructor Chaining


---
[**3]
https://www.geeksforgeeks.org/constructor-chaining-java-examples/

Constructor Chaining In Java with Examples

   Constructor chaining is the process of calling one constructor from another constructor with respect
   to current object.
   Constructor chaining can be done in two ways:
     * Within same class: It can be done using this() keyword for constructors in same class
     * From base class: by using super() keyword to call constructor from the base class.

   Constructor chaining occurs through inheritance. A sub class constructor’s task is to call super
   class’s constructor first. This ensures that creation of sub class’s object starts with the
   initialization of the data members of the super class. There could be any numbers of classes in
   inheritance chain. Every constructor calls up the chain till class at the top is reached.

   Why do we need constructor chaining ?
   This process is used when we want to perform multiple tasks in a single constructor rather than
   creating a code for each task in a single constructor we create a separate constructor for each task
   and make their chain which makes the program more readable.

                       Constructor Chaining within same class using this() keyword :

Constructor Chaining In Java

// Java program to illustrate Constructor Chaining
// within same class Using this() keyword
class Temp {
    // default constructor 1
    // default constructor will call another constructor
    // using this keyword from same class
    Temp() {
        // calls constructor 2
        this(5);
        System.out.println("The Default constructor");
    }

    // parameterized constructor 2
    Temp(int x) {
        // calls constructor 3
        this(5, 15);
        System.out.println(x);
    }

    // parameterized constructor 3
    Temp(int x, int y) {
        System.out.println(x * y);
    }

    public static void main(String args[]) {
        // invokes default constructor first
        new Temp();
    }
}

   Output:
75
5
The Default constructor


   Rules of constructor chaining :
    1. The this() expression should always be the first line of the constructor.
    2. There should be at-least be one constructor without the this() keyword (constructor 3 in above
       example).
    3. Constructor chaining can be achieved in any order.

                           What happens if we change the order of constructors?

   Nothing, Constructor chaining can be achieved in any order

// Java program to illustrate Constructor Chaining
// within same class Using this() keyword
// and changing order of constructors
class Temp {
    // default constructor 1
    Temp() {
        System.out.println("default");
    }

    // parameterized constructor 2
    Temp(int x) {
        // invokes default constructor
        this();
        System.out.println(x);
    }

    // parameterized constructor 3
    Temp(int x, int y) {
        // invokes parameterized constructor 2
        this(5);
        System.out.println(x * y);
    }

    public static void main(String args[]) {
        // invokes parameterized constructor 3
        new Temp(8, 10);
    }
}

   Output:
default
5
80


   NOTE: In example 1, default constructor is invoked at the end, but in example 2 default constructor
   is invoked at first. Hence, order in constructor chaining is not important.

                        Constructor Chaining to other class using super() keyword :

// Java program to illustrate Constructor Chaining to
// other class using super() keyword
class Base {
    String name;

    // constructor 1
    Base() {
        this("");
        System.out.println("No-argument constructor of" +
                                           " base class");
    }

    // constructor 2
    Base(String name) {
        this.name = name;
        System.out.println("Calling parameterized constructor"
                                              + " of base");
    }
}

class Derived extends Base {
    // constructor 3
    Derived() {
        System.out.println("No-argument constructor " +
                           "of derived");
    }

    // parameterized constructor 4
    Derived(String name) {
        // invokes base class constructor 2
        super(name);
        System.out.println("Calling parameterized " +
                           "constructor of derived");
    }

    public static void main(String args[]) {
        // calls parameterized constructor 4
        Derived obj = new Derived("test");

        // Calls No-argument constructor
        // Derived obj = new Derived();
    }
}

   Output:
Calling parameterized constructor of base
Calling parameterized constructor of derived


   Note: Similar to constructor chaining in same class, super() should be the first line of the
   constructor as super class’s constructor are invoked before the sub class’s constructor.

   Alternative method : using Init block :
   When we want certain common resources to be executed with every constructor we can put the code in
   the init block. Init block is always executed before any constructor, whenever a constructor is
   used for creating a new object.

   Example 1:

class Temp {
    // block to be executed before any constructor.
    {
        System.out.println("init block");
    }

    // no-arg constructor
    Temp() {
        System.out.println("default");
    }

    // constructor with one arguemnt.
    Temp(int x) {
        System.out.println(x);
    }

    public static void main(String[] args) {
        // Object creation by calling no-argument
        // constructor.
        new Temp();

        // Object creation by calling parameterized
        // constructor with one parameter.
        new Temp(10);
    }
}

   Output:
init block
default
init block
10

   NOTE: If there are more than one blocks, they are executed in the order in which they are defined
   within the same class. See the ex.
   Example :

class Temp {
    // block to be excuted first
    {
        System.out.println("init");
    }
    
    Temp() {
        System.out.println("default");
    }
    
    Temp(int x) {
        System.out.println(x);
    }

    // block to be executed after the first block
    // which has been defined above.
    {
        System.out.println("second");
    }
    
    public static void main(String args[]) {
        new Temp();
        new Temp(10);
    }
}

   Output :
init
second
default
init
second
10


---
https://www.skptricks.com/2018/08/method-chaining-in-java.html

Method chaining in Java
Monday, August 27, 2018

   The term method chaining refers to both a design and a convention. Each method returns an object,
   allowing the calls to be chained together in a single statement. Chaining is syntactic sugar which
   eliminates the need for intermediate variables. A method chain is also known as a train wreck due to
   the increase in the number of methods that come one after another in the same line that occurs as
   more methods are chained together even though line breaks are often added between methods.

   It applies to classes and methods where:
     * multiple methods are potentially going to be called on the same object;
     * the methods in question need no return value.

   The idea of method chaining is that if the methods need no "useful" return value, then the method can
   return this
   Method Chaining :
class User {

    private String name;
    private int age;

    // In addition to having the side-effect of setting the attributes in question,
    // the setters return "this" (the current Person object) to allow for further chained method calls.

    public User setName(String name) {
        this.name = name;
        return this;
    }

    public User setAge(int age) {
        this.age = age;
        return this;
    }

    public void getUserDetails() {
        System.out.println("User name is " + name + " and " + age + " years old.");
    }

    // Usage:
    public static void main(String[] args) {
        User user= new User();
        user.setName("skptricks").setAge(22).getUserDetails();
    }
}

   Ouput :
   User name is skptricks and 22 years old.
   
   Without Method Chaining :
class User {

    private String name;
    private int age;

    //Per normal Java style, the setters return void.

    public void setName(String name) {
        this.name = name;

    }

    public void setAge(int age) {
        this.age = age;

    }

    public void getUserDetails() {
        System.out.println("User name is " + name + " and " + age + " years old.");
    }

    // Usage:
    public static void main(String[] args) {
        User user = new User();
        user.setName("skptricks");
        user.setAge(22);
        user.getUserDetails();
    }
}

   Ouput :
   User name is skptricks and 22 years old.
   
   Hope you like this simple example for method chaining. Thank you for reading this article, and if you
   have any problem, have a another better useful solution about this article, please write message in
   the comment section.



---
https://stackoverflow.com/questions/21180269/how-to-achieve-method-chaining-in-java

how to achieve method chaining in java?

   I want to achieve method chaining in Java.
   How can I achieve it?
   Also let me know when to use it.
   
public class Dialog {

    public Dialog() {

    }

    public void setTitle(String title) {
        //Logic to set title in dialog
    }

    public void setMessage(String message) {
        //Logic to set message
    }

    public void setPositiveButton() {
        //Logic to send button
    }
}

   I want to create method chaining that I can use as follows:
new Dialog().setTitle("Title1").setMessage("sample message").setPositiveButton();

   or like
new Dialog().setTitle("Title1").setMessage("sample message");

   or like
new Dialog().setTitle("Title1").setPositiveButton();

***
       Like the Builder pattern?

       This is typically called fluency or fluent programming.
       
       You would create a Builder for the Dialog instead of using the setters for a fluent api. If you
       do so many bean like access will no longer work as the frameworks restrict setters to return
       void. Have a look at project lombok if you don't like to write all that boiler plate.

***
   Have your methods return this like:
public Dialog setMessage(String message) {
    //logic to set message
    return this;
}

   This way, after each call to one of the methods, you'll get the same object returned so that you can
   call another method on.

   This technique is useful when you want to call a series of methods on an object: it reduces the
   amount of code required to achieve that and allows you to have a single returned value after the
   chain of methods.

   An example of reducing the amount of code required to show a dialog would be:
// Your Dialog has a method show()
// You could show a dialog like this:
new Dialog().setMessage("some message").setTitle("some title")).show();

   An example of using the single returned value would be:
// In another class, you have a method showDialog(Dialog)
// Thus you can do:
showDialog(new Dialog().setMessage("some message").setTitle("some title"));

   An example of using the Builder pattern that Dennis mentioned in the comment on your question:
new DialogBuilder().setMessage("some message").setTitle("some title").build().show();

   The builder pattern allows you to set all parameters for a new instance of a class before the object
   is being built (consider classes that have final fields or objects for which setting a value after
   it's been built is more costly than setting it when it's constructed).

   In the example above: setMessage(String), setTitle(String) belong to the DialogBuilder class and
   return the same instance of DialogBuilder that they're called upon; the build() method belongs to the
   DialogBuilder class, but returns a Dialog object the show() method belongs to the Dialog class.

   Extra
   This might not be related to your question, but it might help you and others that come across this
   question.

   This works well for most use cases: all use cases that don't involve inheritance and some particular
   cases involving inheritance when the derived class doesn't add new methods that you want to chain
   together and you're not interested in using (without casting) the result of the chain of methods as
   an object of the derived.

     * I've added the example uses last as I missed part of your question. Do note that these are not
       the only uses for method chaining and/or Builder pattern: as with most coding patterns,
       algorithms and techniques, with a bit of creativity a new use for an old pattern (algorithm,
       technique) can be found :)

       It is not good practice to change the settings behavior, because some frameworks are not
       expecting any return from setter method. Like for example, you will get an error with Cassandra
       Java driver if the setters in your model will return some values.

***
   Just add a static builder method, and create another set of the setter methods. For example
class Model {
    private Object FieldA;
    private Object FieldB;
    
    public static Model create() {
        return new Model();
    }
    
    public Model withFieldA(Object value) {
        setFieldA(value);
        return this;
    }
    
    public Model withFieldB(Object value) {
        setFieldB(value);
        return this;
    }
}

   ...

   And use it like
 Model m = Model.create().withFieldA("AAAA").withFieldB(1234);

***
   example of reducing the amount of code required to show a dialog would be:
package com.rsa.arraytesting;

public class ExampleJavaArray {

    String age;
    String name;

    public ExampleJavaArray getAge() {
        this.age = "25";
        return this;
    }

    public ExampleJavaArray setName(String name) {
        this.name = name;
        return this;
    }
    
    public void displayValue() {
        System.out.println("Name:" + name + "\n\n" + "Age:" + age);
    }
}

   another class
package com.rsa.arraytesting;

public class MethodChaining {

    public static void main(String[] args) {
        ExampleJavaArray mExampleJavaArray = new ExampleJavaArray();
        mExampleJavaArray.setName("chandru").getAge().displayValue();
    }
}


---
https://stackoverflow.com/questions/2872222/how-to-do-method-chaining-in-java-o-m1-m2-m3-m4/2872244


How to do method chaining in Java? o.m1().m2().m3().m4()

   I've seen in many Java code notation that after a method we call another, here is an example.
Toast.makeText(text).setGravity(Gravity.TOP, 0, 0).setView(layout).show();

   As you see after calling makeText on the return we call setGravity and so far

   How can I do this with my own classes? Do I have to do anything special?

***
       This is referred to as method chaining and part of a concept called 'fluent interfaces'
       (en.wikipedia.org/wiki/Fluent_interface)

       Excellent read on Effective Java 2nd Edition, Item 2: Consider a builder when faced with many
       constructor parameters.

***
   This pattern is called "Fluent Interfaces" (see Wikipedia)

   Just return this; from the methods instead of returning nothing.

   So for example
public void makeText(String text) {
    this.text = text;
}

   would become
public Toast makeText(String text) {
    this.text = text;
    return this;
}

***
     * How come this doesn't work with the get() method of Hashtable? For example, hash.get("key");
       returns an object that has a method blah() but doing hash.get("key").blah(); does not work. Why?

***
class PersonMethodChaining {
    private String name;
    private int age;

    // In addition to having the side-effect of setting the attributes in question,
    // the setters return "this" (the current Person object) to allow for further chained method calls.

    public PersonMethodChaining setName(String name) {
        this.name = name;
        return this;
    }

    public PersonMethodChaining setAge(int age) {
        this.age = age;
        return this;
    }

    public void introduce() {
        System.out.println("Hello, my name is " + name + " and I am " + age + " years old.");
    }

    // Usage:
    public static void main(String[] args) {
        PersonMethodChaining person = new PersonMethodChaining();
        // Output: Hello, my name is Peter and I am 21 years old.
        person.setName("Peter").setAge(21).introduce();
    }
}

   Without method chaining
class Person {
    private String name;
    private int age;

    // Per normal Java style, the setters return void.

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void introduce() {
        System.out.println("Hello, my name is " + name + " and I am " + age + " years old.");
    }

    // Usage:
    public static void main(String[] args) {
        Person person = new Person();
        // Not using chaining; longer than the chained version above.
        // Output: Hello, my name is Peter and I am 21 years old.
        person.setName("Peter");
        person.setAge(21);
        person.introduce();
    }
}

***
   Method chaining, also known as named parameter idiom, is a common syntax for invoking multiple method
   calls in object-oriented programming languages. Each method returns an object, allowing the calls to
   be chained together in a single statement. Chaining is syntactic sugar which eliminates the need for
   intermediate variables. A method chain is also known as a train wreck due to the increase in the
   number of methods that come one after another in the same line that occurs as more methods are
   chained together even though line breaks are often added between methods.

   A similar syntax is method cascading, where after the method call the expression evaluates to the
   current object, not the return value of the method. Cascading can be implemented using method
   chaining by having the method return the current object itself (this). Cascading is a key technique
   in fluent interfaces, and since chaining is widely implemented in object-oriented languages while
   cascading isn't, this form of "cascading-by-chaining by returning this" is often referred to simply
   as "chaining". Both chaining and cascading come from the Smalltalk language.

***
   From your example:

     Toast.makeText(text).setGravity(Gravity.TOP, 0, 0).setView(layout).show();

   Each method in the chain has to return a class or an interface. The next method in the chain has to
   be a part of the returned class.

   We start with Toast. The method makeText, which is defined as a static method in the class Toast, has
   to return a class or an interface. Here, it returns an instance of the class Gravity.

   The method setGravity, which is defined in the class Gravity, returns an instance of the class View.

   The method setView, which is defined in the class View, returns an instance of the class JPanel.

   This chain could be written out step by step.
Gravity gravity = Toast.makeText(text);
View view       = gravity.setGravity(Gravity.TOP, 0, 0);
JPanel panel    = view.setView(layout);
panel.show();

***
   Search for builder pattern or fluent interface on google to have more details about this.

***
   Return 'this' at the end of your method can do the trick in most cases.

***
   Adding return this; would surely help in chaining for this class but fail for sub-classes.

   If you want to have the chaining behaviour inherited to the sub-classes also then change your class
   signature as below:

   Class SuperClass < SubClass extends SuperClass >{}

   This way all sub-classes will inherit method chaining.

   Example:
public class SuperClass<SubClass extends SuperClass> {

    public SubClass testMethod(){
        return (SubClass)this;
    }

    public static void main(String[] args) {
        SuperClass<SuperClass> superClass = new SuperClass<SuperClass>();
        superClass.testMethod().testMethod().testMethod();
        System.out.println(superClass.toString());
    }

}


---
https://javamex.com/java_language/method_chaining.shtml

Method chaining

   The term method chaining refers to both a design and a convention. It applies to classes and methods
   where:
     * multiple methods are potentially going to be called on the same object;
     * the methods in question need no return value.

   The idea of method chaining is that if the methods need no "useful" return value, then the method can
   return this (i.e. a reference to the same object on which the method is being called). Let's say we
   have a string buffer object with an append() method that logically looks as follows:
public class StringBuffer {
    public void append(String str) {
        // ... useful code ...
    }
}

   The above method has the disadvantage that it is clumsy to append multiple strings to a buffer:
StringBuffer sb = new StringBuffer();
sb.append("Hello ");
sb.append(name);
sb.append("! Welcome!");

   To allow method chaining, we instead declare the method as follows:
public class StringBuffer {
    public StringBuffer append(String str) {
        // ... useful code ...
        return this;
    }
}

   Now, we can "chain" together calls to append() as follows:
StringBuffer sb = new StringBuffer();
sb.append("Hello ").append(name).append("! Welcome!");

   Allowing method chaining is thus a design decision that needs to be made at the time of defining the
   API. Classes and methods that allow method chaining in the JDK include:
     * the append() methods of the actual StringBuffer and StringBuilder classes;
     * the Appendable interface;
     * put() methods on NIO Buffers such as ByteBuffer;


---
https://www.linkedin.com/pulse/method-chaining-java-mehdi-ali-soltani

Method chaining in Java?
December 16, 2016

   Method chaining, also known as named parameter idiom, is a common syntax for invoking multiple method
   calls in object-oriented programming languages. Each method returns an object, allowing the calls to
   be chained together in a single statement. Chaining is syntactic sugar which eliminates the need for
   intermediate variables. A method chain is also known as a train wreck due to the increase in the
   number of methods that come one after another in the same line that occurs as more methods are
   chained together even though line breaks are often added between methods.
class PersonMethodChaining {
    private String name;
    private int age;
    
    // In addition to having the side-effect of setting the attributes in question,
    // the setters return "this" (the current Person object) to allow for further chained method calls.
    
    public PersonMethodChaining setName(String name) {
        this.name = name;
        return this;
    }
    
    public PersonMethodChaining setAge(int age) {
        this.age = age;
        return this;
    }
    
    public void introduce() {
        System.out.println("Hello, my name is " + name + " and I am " + age + " years old.");
    }
    
    // Usage:
    public static void main(String[] args) {
        PersonMethodChaining person = new PersonMethodChaining();
        // Output: Hello, my name is Peter and I am 21 years old.
        person.setName("Peter").setAge(21).introduce();
    }
}

   Without method chaining
class Person {
    private String name;
    private int age;

    // Per normal Java style, the setters return void.

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void introduce() {
        System.out.println("Hello, my name is " + name + " and I am " + age + " years old.");
    }

    // Usage:
    public static void main(String[] args) {
        Person person = new Person();
        // Not using chaining; longer than the chained version above.
        // Output: Hello, my name is Peter and I am 21 years old.
        person.setName("Peter");
        person.setAge(21);
        person.introduce();
    }
}


---
