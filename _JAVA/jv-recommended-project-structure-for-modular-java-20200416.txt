filename: jv_recommended-project-structure-for-modular-java_20200416.tx
from: https://stackoverflow.com/questions/59237083/recommended-project-structure-for-modular-java-with-gradle-junit-and-mockito

Recommended project structure for modular Java with Gradle, JUnit and Mockito

   I'm in the process of trying to migrate a large [36]code base from Java 8 to modular (JPMS) Java 11,
   and I'm encountering significant pain and finding consistent advice on project structure and how to
   use module-info files for actual production projects is hard.

   The project in question follows the conventional gradle structure for source and test files:
src/main/java/org/abc/...
src/test/java/org/abc/...

   I have a module-info.java file in src/main/java/module-info.java, is this the right location? The
   [https://openjdk.java.net/projects/jigsaw/quick-start]quick-start for modular java and
   [https://www.baeldung.com/java-9-modularity]this seems to contradict this;
   however [https://alexkudlick.com/blog/building-modular-java-applications-with-gradle/]other
   [https://sormuras.github.io/blog/2018-09-11-testing-in-the-modular-world.html]resources do it the way I did.

***
   My other answer was a response to your "Could some one please provide an example project with
   conventional source layout using mockito, junit, gradle and modular java (version 9+, preferably
   11)?" request.

   But you probably also want an answer to the question in your title.

   TL;DR: Both of the directory structures you've come across are both equally legal. But for single
   module projects, the conventional src/main/java is all you need.

The long answer
   The less-often-seen src/com.foo.mymodule/io/bar/apackage structure is a way to organize your modules
   nice and neatly in a folder that is the same name as the module. Then the packages of the module go
   within that flat module name directory as usual.

   It is not just a stylistic choice however. There are some practical, technical advantages to
   organizing modules that less-typical way.

   The JPMS --module-source-path command line option makes it possible to compile several different
   modules in one shot. So you could have multiple modules organized like so...
.
.
+-- src/
    +-- com.foo.mymodule/
    |   +-- module-info.java
    |   +-- io/
    |       +-- bar/
    |           +-- apackage/
    |               +-- *.java
    |               +-- ...
    +-- net.other.module/
    |   +-- module-info.java
    |   +-- org/
    |       +-- example/
    |       |   +-- yadda/
    |       |       +-- *.java
    |       |       +-- ...
    |       +-- another/
    |           +-- pkg/
    |               +-- *.java
    |               +-- ...
    +-- mr.jar/
    |   +-- module-info.java
    |   +-- com/
    |       +-- lingocoder/
    |           +-- plugin/
    |               +-- *.java
    |               +-- ...
    +-- and.so.forth
    +-- ...

   Then javac -d mods --module-source-path src ... can compile all of the code of all of the modules
   nested under src.

   It will mirror the directory structures under src while storing the generated class files in the
   destination directory (mods in my example).

   For example, all generated class files for the net.other.module module would be stored in the
   mods/net.other.module directory; with the package hierarchy mirrored under that.

---
