filename: writing-good-method-variable-names_20200109.txt
https://dev.to/rachelsoderberg/writing-good-method-variable-names-47il

Writing Good Method & Variable Names
May 08, 2019

What's In A Name?
   In Object Oriented Programming it's considered to be good practice to write methods that only do one
   major job. One strategy you can use to ensure that your methods follow this practice is to write
   method names that describe what the method does. "Clean Code" by Robert C. Martin shares the
   following old but sound advice: "Functions should do one thing. They should do it well. They should
   do it only."

   Sometimes it can be hard to tell whether the method only does one thing; it's at those times that I
   turn to the name for assistance. Can I write a descriptive name without the use of "and" or "or"? If
   the answer is no, it's possible that the method has multiple things going on, but a yes answer means
   I'm safe (or not being descriptive enough in my naming). It's okay if method names are long - Martin
   states that "A long descriptive name is better than a short enigmatic name." It's also good
   convention to use similar verbage for actions taken or abstract concepts such as get whenever
   retrieving a value, set whenever setting a value, or write whenever writing something to a file.

   A few examples of good descriptive method names:
     * WriteToOrderXmlFile()
     * CreateNewCustomer()
     * CreateDeduplicatedListOfShippingContacts()
     * GetListOfPartProductsNotInSalesforce()
     * CreateNewPartProduct()

   Whatever you do, don't make the mistake of using a method name like DoStuff() to get started, then
   forget to go back and update it! If you can't think of a descriptive name, you just need to do a
   little more conceptualization first.

   Don't be afraid to use multiple words to get your point across because a descriptive name can act as
   a replacement for a long descriptive comment (and won't require extra documentation updates if the
   method changes!) It should be clear to future you and any developers who come after you what each
   method does before they've even inspected it. Once they have gone to the method, it should do
   everything they would have expected from the name.

   Class and variable names won't necessarily be as long, but they are no less important for clarity and
   readability. These names should be nouns such as Customer() or ShippedPartProduct(), and string
   partIdCSV or int customerAge. I usually choose to make List and Array names longer so I can better
   describe whatever set of data it's holding such as partProductsRetrievedFromSalesforce or
   itemIdsFromThisShipment.

   Variable and class names that are unacceptable:
     * int x = 42;
     * bool trueFalse = false;
     * var object = "xyz";
     * HelperClass()
     * myStrings;

Strategies To Help
   I have developed a few strategies that help me with both good naming and ensuring my methods are all
   short and perform only one major function.

   The first strategy seems like a no-brainer, but it took me awhile to actually figure it out:

   Don't break out code into new methods until a full portion of code has you satisfied
   By holding off on breaking out code until you've completed one or several portions, you allow
   yourself to essentially finish your thought process before moving on to the next thing. Much like you
   might refine an article after you've written your first draft, you can get your ideas out there and
   refine them into more suitably-formed sentences and paragraphs (e.g. methods) before releasing it
   into the wild. You also open yourself up to seeing the whole picture which means you have the
   opportunity to see where the most optimal splits can be instead of trying to conceptualize the splits
   as you're working through how to solve the issue.

   Typically I will start with one method and have it named according to what it should do. I'll write
   all of the supporting code within this method, even though it isn't part of its job, and run my tests
   and whatnot. Once I'm satisfied with the results, I will look at each portion of the code I've
   written and break it apart into its bite-sized method portions. These will either be called by the
   method I wrote them in, or I'll move them out to be called from a position before or after the method
   I originally wrote the code in. Then I will run through my tests again, just to make sure the changes
   didn't break anything unexpectedly.

   Consider whether you have multiple similar data sources
   Are you using a database and another source of data such as Salesforce within your application? I
   like to indicate source of data in my variables because it's not uncommon that I'll be using an
   ItemID from our Item table as well as the ItemID from a Salesforce object. These two variables could
   have very different values, so it's important to keep them straight. A great example from my current
   code base would be partProductSerialNumbersFromSalesforce and partProductSerialNumbersFromDB. These
   lists will hold two different sets of potentially the same stored values - I compare them to
   determine whether a specific part in our database already exists in Salesforce to avoid creating
   duplicates.

   I don't know whether this strategy is a best practice, but I will also occasionally include the
   actual table or stored procedure name if I am worried about any ambiguity. An example could be an
   application that updates two similar tables (let's say Shipments and ShipmentLines); these tables
   both have a UserDef field that must be updated and you want to avoid ambiguity in which one is being
   updated when. UpdateShipmentTableUserDef() and UpdateShipmentLinesUserDef() seem like perfectly
   reasonable and clear names for the methods that will update those fields. Obviously this would be
   overly wordy and unnecessary for most database updates, but I feel it certainly helps in the odd case
   like the example.

   Is your method returning something?
   In the case of a method that returns something, I opt toward using names that describe whatever is
   being returned. If I'm returning a comma separated string of item Ids, I may choose a name like
   CommaSeparatedPartProductItemIds(); or GetPartAccountIdFromSalesforce() if I'm running a query that
   returns the id of the Salesforce Account associated with a part. The important part is to indicate to
   the reader what the expected value being returned should be. If they're expecting an itemId and get
   back a customer name, they have a good idea where to start looking for that bug.

Grammar Lesson

   Recently fellow dev.to writer [9]@somedood released an article describing the details of naming
   grammar - essentially when you should be using camelCase, PascalCase, or SCREAMING_CASE. Check it out
   here: [**1]


---
[**1]
https://dev.to/somedood/a-grammar-based-naming-convention-13jf

A Grammar-Based Naming Convention
May 7 '19

Writing Good Method & Variable Names

   I recently read an article from @rachelsoderberg about what it means to write good variable names.
   In her article, she discusses the many strategies and considerations involved in writing descriptive
   variable names.

   It was definitely a great read, but once I had finished, I suddenly realized how truly difficult it
   is to accomplish this seemingly mundane task in programming. As programmers, we frequently struggle
   to name our variables, not because it is inherently difficult per se, but because we have to ensure
   that the names we choose are clear, descriptive, and maintainable enough for the next person reading
   our code (which may or may not be ourselves).

   To save myself some time and effort, I use a simple naming convention for all my projects. Today, I
   wish to share it to the community so that we can all spend less time thinking of variable names.

     NOTE: The code examples I use in the article are written in JavaScript, but they apply to any
     programming language since they're just naming conventions after all.

Basic Rules
   All variables, functions, parameters, and identifiers are written in camelCase [(unless you're a
   Rustacean). Constants are written in SCREAMING_CASE. It is important to make this
   distinction so that we can tell which variables are immutable and read-only by nature and design.

   In programming languages where immutable variables are strongly encouraged (or even enforced), we
   have to make the distinction between immutable variables and true constants.

   Any static value that does not depend on runtime variabilities (such as user input and other dynamic
   values) can be classified as a true constant. For example, the value of [10]PI is considered to be a
   true constant, therefore it has to be written in SCREAMING_CASE. Otherwise, camelCase is used to
   denote mutable and immutable variables that store temporaries, aliases, calculations, and the output
   of a runtime variability.
// Immutable Variables
const userInput = document.getElementsByTagName('input')[0].value;
const hasDevto = /dev\.to/g.test(userInput);

// True Constants
const WEBSITE_NAME = 'dev.to';
const TAU = 2 * Math.PI;

   It should be noted, though, that context matters. The criteria for the distinction between immutable
   variables and true constants can change depending on the situation. For example, one may use
   SCREAMING_CASE for userInput if they were to treat it as a static value throughout the entire program
   (even if it may vary per runtime on different devices). At the end of the day, it is up to us as
   programmers to discern which variables we wish to communicate as immutable variables or true
   constants.

Semantic Data Types
   Data types communicate what methods and operations can be performed on some variable. It is thus in
   our best interest to name our variables with a type system in mind, especially for weakly typed
   languages. Doing so will help us imply what data type a variable may have and its respective methods,
   properties, and operations. In turn, this leads to more readable code.

Numbers, Strings, and Objects
   In most cases, numbers, strings, and individual objects are named with the most appropriate singular
   noun.
const usernameInputField = document.getElementById('username-field');
const username = nameInputField.value;
const hypotenuse = Math.sqrt(a**2 + b**2);
const profileData = {
  name: 'Presto',
  type: 'Dog'
};

Booleans
   The names for booleans are usually in the form of a yes-or-no question, as if we are personally
   asking the boolean variable itself about its state.
// Yes-or-no questions
const isDog = true;
const hasJavaScriptEnabled = false;
const canSupportSafari = false;
const isAdmin = false;
const hasPremium = true;

// Functions or methods that return booleans
// are also named in a similar fashion
function isOdd(num) { return Boolean(num % 2); }

Arrays and Collections
   Arrays and other collection-like data structures (such as [11]Map and [12]Set) are named with the
   most appropriate plural noun in camelCase. If the plural and singular form of the noun seem too
   similar, we can substitute the plural form for an appropriate collective noun. That way, the
   corresponding singular form of these nouns can be used as variable names during iteration.
// We use plural or collective nouns for arrays.
const dogs = [ 'Presto', 'Lucky', 'Sparkles' ];

// We can use the singular form of the
// variable name of the array
// in callback functions.
dogs.forEach(dog => console.log(dog));

// We can also use it in `for...of` loops.
for (const dog of dogs)
  console.log(dog);

// Here, we can use collective nouns
// for better readability.
const herdOfCows = [ 'Bessie', 'Bertha', 'Boris' ];
herdOfCows.forEach(cow => console.log(cow));
for (const cow of herdOfCows)
  console.log(cow);

Functions
   Functions are written with the intent to associate them with actions. This is why they are usually
   named as a combination of two parts: [13]a transitive verb and a direct object. In other words, the
   names for functions are usually in the form of verb + noun. This communicates to us that the name is
   a command, or rather a function, that we can call whenever we want.
function getSum(a, b) { return a + b; }
function findBanana(str) { return str.indexOf('banana'); }
function getAverage(numbers) {
  const total = numbers.reduce((prev, curr) => prev + curr);
  return total / numbers.length;
}

   PowerShell, the Windows-equivalent of [15]Bash in Linux, is a great example of a language that
   enforces this naming convention for functions (or [16]cmdlets as one would call it in the language).

   The script below calculates the total memory allocated for all currently running Chrome processes.
   The syntax is not the friendliest, but PowerShell's enforcement of the verb + noun convention for its
   cmdlets is evident. The example below only makes use of the [17]Get-Process, [18]Where-Object, and
   [19]Measure-Object cmdlets, but rest assured, the naming convention is followed by the other cmdlets
   provided by PowerShell. [20]This site lists them all out for reference.
# Get all processes currently running
$processes = Get-Process;

# Filter to retrive all Chrome processes
$chromeProcesses = $processes | Where-Object { $_.ProcessName -eq 'chrome' }

# Sum up all of the memory collectively
# allocated for the Chrome processes
$memoryUsage = $chromeProcesses | Measure-Object WorkingSet64 -Sum;

# Log the result to the console
"{0:F2} MB used by Chrome processes." -f ($memoryUsage.Sum / 1mb);

Classes
   Classes are named with an appropriate proper noun in PascalCase. This communicates to us that the
   variable is not just like any other variable in our program that follows the camelCase naming
   convention; rather, it is a special variable that stores a user-defined type with special properties
   and methods.
class User { }
class Admin extends User { }
class Moderator extends Admin { }
class Player extends User { }

Class Fields and Methods
   Class fields are named according to the immutability and data type conventions discussed earlier.

   On the other hand, class methods are named in a similar fashion to functions. They still use the verb
   + noun convention, but in some cases, they can get away with omitting the direct object (noun) part
   of its name. The performer of the transitive verb (action) is thus implied to be the object instance
   of the class that owns said object method.
// Class
class Player {
  constructor(name) {
    // String
    this.username = name;

    // Number
    this.level = 100;

    // Boolean
    this.isAdmin = false;

    // Array
    this.weapons = [
      'bow',
      'sword',
      'spear'
    ];
  }

  // Class Method (with noun)
  initiateBattle() { }

  // Class Method (without noun)
  attack() { }
}

To wrap it all up...

const TRUE_CONSTANT = Math.PI;
const stringName = '';
const numberName = 0;
const isBooleanName = true;
const objName = { };
const arrayNames = [ ].map(name => name);
function getFunctionName() { }
class ClassName { }

   The code snippet above succinctly summarizes my entire naming convention. It is quite apparent that
   the grammar rules and semantics of the English language have greatly influenced this convention.
   Embracing and somehow relating them to programming have made the act of naming variables and implying
   their data types more intuitive than ever.

   If we wanted to, we could simply prefix all of our variables with an abbreviation of its data
   type-similar to how one would use an adjective to describe a noun-but in doing so, the variable names
   would become undesirably verbose, as illustrated by the example below. We'd be better off [21]using
   TypeScript for explicit type annotations.
// This is... eww. ?
const NUM_TAU = 2 * Math.PI;
const str_Username = 'Some Dood';
const num_Hypotenuse = Math.sqrt(num_A**2 + num_B**2);
const boo_AdminStatus = false;
const obj_ProfileData = { };
const arr_Articles = [ ];
function fun_GetUser() { }
class Cls_Class { }

   Case in point, naming variables is one of the most frustrating aspects of programming [DEL: next to
   debugging :DEL] . Following a grammar-based naming convention will certainly make it less unpleasant.
   Thanks to the linguistic origins of this naming convention, we will be able to write more intuitive
   and readable code by default, which is always a good thing. Of course, we still have to ensure that
   the design and architecture of our software is not inherently "bad", but at least we can rest assured
   that our code is indeed intuitive and readable for whoever may work on it next.

   A programming language is called a language for a reason...


---

