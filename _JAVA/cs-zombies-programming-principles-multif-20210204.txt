filename: cd_zombies-programming-principles-multif_20210204.txt
https://opensource.com/article/21/2/development-guide

My handy guide to software development and testing
01 Feb 2021 

Programming can feel like a battle against a horde of zombies at times. In this series, learn how to put
this ZOMBIES acronym to work for you.

   A long time ago, when I was but a budding computer programmer, we used to work in large batches. We
   were each assigned a programming task, and then we'd go away and hide in our cubicles and bang on the
   keyboard. I remember my team members spending hours upon hours in isolation, each of us in our own
   cubicle, wrestling with challenges to create defect-free apps. The theory was, the larger the batch,
   the better the evidence that we're awesome problem solvers.

   For me, it was a badge of honor to see how long I could write new code or modify existing code before
   stopping to check to see whether what I did worked. Back then, many of us thought stopping to verify
   that our code worked was a sign of weakness, a sign of a rookie programmer. A "real developer" should
   be able to crank out the entire app without stopping to check anything!

   When I did stop to test my code, however unwillingly, I usually got a reality check. Either my code
   wouldn't compile, or it wouldn't build, or it wouldn't run, or it just wouldn't process the data the
   way I'd intended. Inevitably, I'd scramble in desperation to fix all the pesky problems I'd
   uncovered.

Avoiding the zombie horde
   If the old style of working sounds chaotic, that's because it was. We tackled our tasks all at once,
   hacking and slashing through problems only to be overwhelmed by more. It was like a battle against a
   horde of zombies.

   Today, we've learned to avoid large batches. Hearing some experts extolling the virtues of avoiding
   large batches sounded completely counterintuitive at first, but I've learned a lot from past
   mistakes. Appropriately, I'm using a system James Grenning
   (https://www.agilealliance.org/resources/speakers/james-grenning/) calls ZOMBIES to guide my
   software development efforts.

ZOMBIES to the rescue!
   There's nothing mysterious about ZOMBIES. It's an acronym that stands for:

   Z – Zero
   O – One
   M – Many (or more complex)
   B – Boundary behaviors
   I – Interface definition
   E – Exercise exceptional behavior
   S – Simple scenarios, simple solutions

   I'll break it down for you in this article series.

Zero in action!
   Zero stands for the simplest possible case.

   A solution is simplest because everyone initially prefers to use hard-coded values. By starting a
   coding session with hard-coded values, you quickly create a situation that gives you immediate
   feedback. Without having to wait several minutes or potentially hours, hard-coded values provide
   instant feedback on whether you like interacting with what you're building. If you find out you like
   interacting with it, great! Carry on in that direction. If you discover, for one reason or another,
   that you don't like interacting with it, there's been no big loss. You can easily dismiss it; you
   don't even have any losses to cut.

   As an example, build a simple backend shopping API. This service lets users grab a shopping basket,
   add items to the basket, remove items from the basket, and get the order total from the API.

   Create the necessary infrastructure (segregate the shipping app into an app folder and tests into a
   tests folder). This example uses the open source xUnit testing framework.

   Roll up your sleeves, and see the Zero principle in action!

[Fact]
public void NewlyCreatedBasketHas0Items() {
	var expectedNoOfItems = 0;
	var actualNoOfItems = 1;
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   This test is faking it because it is testing for hard-coded values. When the shopping basket is newly
   created, it contains no items; therefore, the expected number of items in the basket is 0. This
   expectation is put to the test (or asserted) by comparing expected and actual values for equality.

   When the test runs, it produces the following results:

   Starting test execution, please wait...
   A total of 1 test files matched the specified pattern.
   [xUnit.net 00:00:00.57] tests.UnitTest1.NewlyCreatedBasketHas0Items [FAIL]
     X tests.UnitTest1.NewlyCreatedBasketHas0Items [4ms]
     Error Message:
      Assert.Equal() Failure
   Expected: 0
   Actual: 1
   [...]

   The test fails for obvious reasons: you expected the number of items to be 0, but the actual number
   of items was hard-coded as 1.

   Of course, you can quickly remedy that error by modifying the hard-coded value assigned to the actual
   variable from 1 to 0:

[Fact]
public void NewlyCreatedBasketHas0Items() {
	var expectedNoOfItems = 0;
	var actualNoOfItems = 0;
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   As expected, when this test runs, it passes successfully:

   Starting test execution, please wait...
   A total of 1 test files matched the specified pattern.
   Test Run Successful.
   Total tests: 1
        Passed: 1
    Total time: 1.0950 Seconds

   You might not think it's worth testing code you're forcing to fail, but no matter how simple a test
   may be, it is absolutely mandatory to see it fail at least once. That way, you can rest assured that
   the test will alert you later should some inadvertent change corrupt your processing logic.

   Now's the time to stop faking the Zero case and replace that hard-coded value with a value that will
   be provided by the running API. Now that you know you have a reliably failing test that expects an
   empty basket to have 0 items, it's time to write some application code.

   As with any other modeling exercise in software, begin by crafting a simple interface. Create a new
   file in the solution's app folder and name it IShoppingAPI.cs (by convention, preface every interface
   name with an upper-case I). In the interface, declare the method NoOfItems() to return the number of
   items as an int. Here's the listing of the interface:

using System;
namespace app {
	public interface IShoppingAPI {
		int NoOfItems();
	}
}

   Of course, this interface is incapable of doing any work until you implement it. Create another file
   in the app folder and name it ShoppingAPI. Declare ShoppingAPI as a public class that implements
   IShoppingAPI. In the body of the class, define NoOfItems to return the integer 1:

using System;
namespace app {
	public class ShoppingAPI : IShoppingAPI {
		public int NoOfItems() {
			return 1;
		}
	}
}

   You can see in the above that you are faking the processing logic again by hard-coding the return
   value to 1. That's good for now because you want to keep everything super brain-dead simple. Now's
   not the time (not yet, at least) to start mulling over how you're going to implement this shopping
   basket. Leave that for later! For now, you're playing with the Zero case, which means you want to see
   whether you like your current arrangement.

   To ascertain that, replace the hard-coded expected value with the value that will be delivered when
   your shopping API runs and receives the request. You need to let the tests know where the shipping
   code is located by declaring that you are using the app folder.

   Next, you need to instantiate the IShoppingAPI interface:
IShoppingAPI shoppingAPI = new ShoppingAPI();

   This instance is used to send requests and receive actual values after the code runs.

   Now the listing looks like:

using System;
using Xunit;
using app;
namespace tests {
	public class ShoppingAPITests {
		IShoppingAPI shoppingAPI = new ShoppingAPI();

		[Fact]
		public void NewlyCreatedBasketHas0Items() {
			var expectedNoOfItems = 0;
			var actualNoOfItems = shoppingAPI.NoOfItems();
			Assert.Equal(expectedNoOfItems, actualNoOfItems);
		}
	}
}

   Of course, when this test runs, it fails because you hard-coded an incorrect return value (the test
   expects 0, but the app returns 1).

   Again, you can easily make the test pass by modifying the hard-coded value from 1 to 0, but that
   would be a waste of time at this point. Now that you have a proper interface hooked up to your test,
   the onus is on you to write programming logic that results in expected code behavior.

   For the application code, you need to decide which data structure to use to represent the shopping
   cart. To keep things bare-bones, strive to identify the simplest representation of a collection in
   C#. The thing that immediately comes to mind is ArrayList. This collection is perfect for these
   purposes—it can take an indefinite number of items and is easy and simple to traverse.

   In your app code, declare that you're using System.Collections because ArrayList is part of that
   package:
using System.Collections;

   Then declare your basket:
ArrayList basket = new ArrayList();

   Finally, replace the hard-coded value in the NoOfItems() with actual running code:

public int NoOfItems() {
	return basket.Count;
}

   This time, the test passes because your instantiated basket is empty, so basket.Count returns 0
   items.

   Which is exactly what your first Zero test expects.

More examples
   Your homework is to tackle just one zombie for now, and that's the Zeroeth zombie. In the next
   article, I'll take a look at One and Many. Stay strong!


---
https://opensource.com/article/21/2/build-expand-software
How I build and expand application development and testing

Start development simply, by writing and testing your code with One element and then expand it out to Many.
02 Feb 2021 
   
   In my previous article, I explained why tackling coding problems all at once, as if they were
   hordes of zombies, is a mistake. I also explained the first ZOMBIES principle, Zero. In this article,
   I'll demonstrate the next two principles: One and Many.

   ZOMBIES is an acronym that stands for:

   Z - Zero
   O - One
   M - Many (or more complex)
   B - Boundary behaviors
   I - Interface definition
   E - Exercise exceptional behavior
   S - Simple scenarios, simple solutions

   In the previous article, you implemented Zero, which provides the simplest possible path through your
   code. There is absolutely no conditional processing logic anywhere to be found. Now it's time for you
   to move into One.

   Unlike with Zero, which basically means nothing is added, or we have an empty case, nothing to take
   care of, One means we have a single case to take care of. That single case could be one item in the
   collection, or one visitor, or one event that demands special treatment.

   With Many, we are now dealing with potentially more complicated cases. Two or more items in the
   collection, two or more events that demand special treatment, and so on.

One in action

   Build on the code from the previous article by adding something to your virtual shopping basket.
   First, write a fake test:

[Fact]
public void Add1ItemBasketHas1Item() {
	var expectedNoOfItems = 1;
	var actualNoOfItems = 0;
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   As expected, this test fails because you hard-coded an incorrect value:

   Starting test execution, please wait...
   A total of 1 test files matched the specified pattern.
   [xUnit.net 00:00:00.57] tests.UnitTest1.NewlyCreatedBasketHas0Items [FAIL]
     X tests.UnitTest1.NewlyCreatedBasketHas0Items [4ms]
     Error Message:
      Assert.Equal() Failure
   Expected: 0
   Actual: 1
   [...]

   Programming and development
     * Red Hat Developers Blog
     * Programming cheat sheets
     * Try for free: Red Hat Learning Subscription
     * What is an IDE?

   Now is the time to think about how to stop faking it. You already created an implementation of a
   shopping basket (an ArrayList to hold items). But how do you implement an item?

   Simplicity should always be your guiding principle, and not knowing much about the actual item, you
   could fake it a little by implementing it as another collection. What could that collection
   contain? Well, because you're mostly interested in calculating basket totals, the item collection
   should, at minimum, contain a price (in any currency, but for simplicity, use dollars).

   A simple collection can hold an ID on an item (a pointer to the item, which may be kept elsewhere on
   the system) and the associated price of an item.

   A good data structure that can easily capture this is a key/value structure. In C#, the first thing
   that comes to mind is Hashtable.

   In the app code, add a new capability to the IShoppingAPI interface:
int AddItem(Hashtable item);

   This new capability accepts one item (an instance of a Hashtable) and returns the number of items
   found in the shopping basket.

   In your tests, replace the hard-coded value with a call to the interface:

[Fact]
public void Add1ItemBasketHas1Item() {
	var expectedNoOfItems = 1;
	Hashtable item = new Hashtable();
	var actualNoOfItems = shoppingAPI.AddItem(item);
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   This code instantiates Hashtable and names it item, then invokes AddItem(item) on the shopping
   interface, which returns the actual number of items in the basket.

   To implement it, turn to the ShoppingAPI class:

public int AddItem(Hashtable item) {
	return 0;
}

   You are faking it again just to see the results of your tests (which are the first customers of your
   code). Should the test fail (as expected), replace the hard-coded values with actual code:

public int AddItem(Hashtable item) {
	basket.Add(item);
	return basket.Count;
}

   In the working code, add an item to the basket, and then return the count of the items in the basket:

   Test Run Successful.
   Total tests: 2
        Passed: 2
    Total time: 1.0633 Seconds

   So now you have two tests passing and have pretty much covered Z and O, the first two parts of
   ZOMBIES.

A moment of reflection

   If you look back at what you've done so far, you will notice that by focusing your attention on
   dealing with the simplest possible Zero and One scenarios, you have managed to create an interface as
   well as define some processing logic boundaries! Isn't that awesome? You now have the most important
   abstractions partially implemented, and you know how to process cases where nothing is added and when
   one thing is added. And because you are building an e-commerce API, you certainly do not foresee
   placing any other boundaries that would limit your customers when shopping. Your virtual shopping
   basket is, for all intents and purposes, limitless.

   Another important (although not necessarily immediately obvious) aspect of the stepwise refinement
   that ZOMBIES offers is a reluctance to leap head-first into the brambles of implementation. You may
   have noticed how sheepish this is about implementing anything. For starters, it's better to fake the
   implementation by hard-coding the values. Only after you see that the interface interacts with your
   test in a sensible way are you willing to roll up your sleeves and harden the implementation code.

   But even then, you should always prefer simple, straightforward constructs. And strive to avoid
   conditional logic as much as you can.

Many in action
   Expand your application by defining your expectations when a customer adds two items to the basket.
   The first test is a fake. It expects 2, but force it to fail by hard-coding 0 items:

[Fact]
public void Add2ItemsBasketHas2Items() {
	var expectedNoOfItems = 2;
	var actualNoOfItems = 0;
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   When you run the test, two of them pass successfuy (the previous two, the Z and O tests), but as
   expected, the hard-coded test fails:

   A total of 1 test files matched the specified pattern.
   [xUnit.net 00:00:00.57] tests.UnitTest1.Add2ItemsBasketHas2Items [FAIL]
     X tests.UnitTest1.Add2ItemsBasketHas2Items [2ms]
     Error Message:
      Assert.Equal() Failure
   Expected: 2
   Actual: 0
   Test Run Failed.
   Tatal tests: 3
        Passed: 2
        Failed: 1

   Replace the hard-coded values with the call to the app code:

[Fact]
public void Add2ItemsBasketHas2Items() {
	var expectedNoOfItems = 2;
	Hashtable item = new Hashtable();
	shoppingAPI.AddItem(item);
	var actualNoOfItems = shoppingAPI.AddItem(item);
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   In the test, you add two items (actually, you're adding the same item twice) and then compare the
   expected number of items to the number of items from the shoppingAPI instance after adding the item
   the second time.

   All tests now pass!

Stay tuned
   You have now completed the first pass of the ZOM part of the equation. You did a pass on Zero, on
   One, and on Many. In the next article, I'll take a look at B and I. Stay vigilant!


---
https://opensource.com/article/21/2/boundaries-interfaces
Defining boundaries and interfaces in software development

Zombies are bad at understanding boundaries, so set limits and expectations for what your app can do.
03 Feb 2021

   Zombies are bad at understanding boundaries. They trample over fences, tear down walls, and generally
   get into places they don't belong. In the previous articles in this series, I explained why tackling
   coding problems all at once, as if they were hordes of zombies, is a mistake.

   ZOMBIES is an acronym that stands for:

   Z - Zero
   O - One
   M - Many (or more complex)
   B - Boundary behaviors
   I - Interface definition
   E - Exercise exceptional behavior
   S - Simple scenarios, simple solutions

   In the first two articles in this series, I demonstrated the first three ZOMBIES principles of Zero,
   One, and Many. The first article implemented Zero, which provides the simplest possible path
   through your code. The second article performed tests with One and Many samples. In this third
   article, I'll take a look at Boundaries and Interfaces.

Back to One
   Before you can tackle Boundaries, you need to circle back (iterate).

   Begin by asking yourself: What are the boundaries in e-commerce? Do I need or want to limit the size
   of a shopping basket? (I don't think that would make any sense, actually).

   The only reasonable boundary at this point would be to make sure the shopping basket never contains a
   negative number of items. Write an executable expectation that expresses this limitation:

[Fact]
public void Add1ItemRemoveItemRemoveAgainHas0Items() {
	var expectedNoOfItems = 0;
	var actualNoOfItems = -1;
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   This says that if you add one item to the basket, remove that item, and remove it again, the
   shoppingAPI instance should say that you have zero items in the basket.

   Of course, this executable expectation (microtest) fails, as expected. What is the bare minimum
   modification you need to make to get this microtest to pass?

[Fact]
public void Add1ItemRemoveItemRemoveAgainHas0Items() {
	var expectedNoOfItems = 0;
	Hashtable item = new Hashtable();
	shoppingAPI.AddItem(item);
	shoppingAPI.RemoveItem(item);
	var actualNoOfItems = shoppingAPI.RemoveItem(item);
	Assert.Equal(expectedNoOfItems, actualNoOfItems);
}

   This encodes an expectation that depends on the RemoveItem(item) capability. And because that
   capability is not in your shippingAPI, you need to add it.

   Flip over to the app folder, open IShippingAPI.cs and add the new declaration:
int RemoveItem(Hashtable item);

   Go to the implementation class (ShippingAPI.cs), and implement the declared capability:

public int RemoveItem(Hashtable item) {
	basket.RemoveAt(basket.IndexOf(item));
	return basket.Count;
}

   Run the system, and you get an error:

   Error

   The system is trying to remove an item that does not exist in the basket, and it crashes. Add a
   little bit of defensive programming:

public int RemoveItem(Hashtable item) {
	if(basket.IndexOf(item) >= 0) {
		basket.RemoveAt(basket.IndexOf(item));
	}
	return basket.Count;
}

   Before you try to remove the item from the basket, check if it is in the basket. (You could've tried
   by catching the exception, but I feel the above logic is easier to read and follow.)

More specific expectations
   Before we move to more specific expectations, let's pause for a second and examine what is meant by
   interfaces. In software engineering, an interface denotes a specification, or a description of some
   capability. In a way, interface in software is similar to a recipe in cooking. It lists the
   ingredients that make the cake but it is not actually edible. We follow the specified description in
   the recipe in order to bake the cake.

   Similarly here, we define our service by first specifying what is this service capable of. That
   specification is what we call interface. But interface itself cannot provide any services to us. It
   is a mere blueprint which we then use and follow in order to implement specified capabilities.

   So far, you have implemented the interface (partially; more capabilities will be added later) and the
   processing boundaries (you cannot have a negative number of items in the shopping basket). You
   instructed the shoppingAPI how to add items to the shopping basket and confirmed that the addition
   works by running the Add2ItemsBasketHas2Items test.

   However, just adding items to the basket does not an e-commerce app make. You need to be able to
   calculate the total of the items added to the basket-time to add another expectation.

   As is the norm by now (hopefully), start with the most straightforward expectation. When you add
   one item to the basket and the item price is $10, you expect the shopping API to correctly calculate
   the total as $10.

   Your fifth test (the fake version):

[Fact]
public void Add1ItemPrice10GrandTotal10() {
	var expectedTotal = 10.00;
	var actualTotal = 0.00;
	Assert.Equal(expectedTotal, actualTotal);
}

   Make the Add1ItemPrice10GrandTotal10 test fail by using the good old trick: hard-coding an incorrect
   actual value. Of course, your previous three tests succeed, but the new fourth test fails:

   A total of 1 test files matched the specified pattern.
   [xUnit.net 00:00:00.57] tests.UnitTest1.Add1ItemPrice10GrandTotal10 [FAIL]
     X tests.UnitTest1.Add1ItemPrice10GrandTotal10 [4ms]
     Error Message:
      Assert.Equal() Failure
   Expected: 10
   Actual: 0
   Test Run Failed.
   Total tests: 4
        Passed: 3
            Failed: 1
    Total time: 1.0320 Seconds

   Replace the hard-coded value with real processing. First, see if you have any such capability in your
   interface that would enable it to calculate order totals. Nope, no such thing. So far, you have
   declared only three capabilities in your interface:
    1. int NoOfItems();
    2. int AddItem(Hashtable item);
    3. int RemoveItem(Hashtable item);

   None of those indicates any ability to calculate totals. You need to declare a new capability:
double CalculateGrandTotal();

   This new capability should enable your shoppingAPI to calculate the total amount by traversing the
   collection of items it finds in the shopping basket and adding up the item prices.

   Flip over to your tests and change the fifth test:

[Fact]
public void Add1ItemPrice10GrandTotal10() {
	var expectedGrandTotal = 10.00;
	Hashtable item = new Hashtable();
	item.Add("00000001", 10.00);
	shoppingAPI.AddItem(item);
	var actualGrandTotal = shoppingAPI.CalculateGrandTotal();
	Assert.Equal(expectedGrandTotal, actualGrandTotal);
}

   This test declares your expectation that if you add an item priced at $10 and then call the
   CalculateGrandTotal() method on the shopping API, it will return a grand total of $10. Which is a
   perfectly reasonable expectation since that's how the API should calculate.

   How do you implement this capability? As always, fake it first. Flip over to the ShippingAPI class
   and implement the CalculateGrandTotal() method, as declared in the interface:

public double CalculateGrandTotal() {
	return 0.00;
}

   You're hard-coding the return value as 0.00, just to see if the test (your first customer) will be
   able to run it and whether it will fail. Indeed, it does run fine and fails, so now you must
   implement processing logic to calculate the grand total of the items in the shopping basket properly:

public double CalculateGrandTotal() {
	double grandTotal = 0.00;
	foreach(var product in basket) {
		Hashtable item = product as Hashtable;
		foreach(var value in item.Values) {
			grandTotal += Double.Parse(value.ToString());
		}
	}
	return grandTotal;
}

   Run the system. All five tests succeed!

From One to Many
   Time for another iteration. Now that you have built the system by iterating to handle the Zero, One
   (both very simple and a bit more elaborate scenarios), and Boundary scenarios (no negative number of
   items in the basket), you must handle a bit more elaborate scenario for Many.

   A quick note: as we keep iterating and returning back to the concerns related to One, Many, and
   Boundaries (we are refining our implementation), some readers may expect that we should also rework
   the Interface. As we will see later on, our interface is already fully fleshed out, and we see no
   need to add more capabilities at this point. Keep in mind that interfaces should be kept lean and
   simple; there is not much advantage in proliferating interfaces, as that only adds more noise to the
   signal. Here, we are following the principle of Occam's Razor, which states that entities should not
   multiply without a very good reason. For now, we are pretty much done with describing the expected
   capabilities of our API. We're now rolling up our sleeves and refining the implementation.

   The previous iteration enabled the system to handle more than one item placed in the basket. Now,
   enable the system to calculate the grand total for more than one item in the basket. First things
   first; write the executable expectation:

[Fact]
public void Add2ItemsGrandTotal30() {
	var expectedGrandTotal = 30.00;
	var actualGrandTotal = 0.00;
	Assert.Equal(expectedGrandTotal, actualGrandTotal);
}

   You "cheat" by hard-coding all values first and then do your best to make sure the expectation fails.

   And it does, so now is the time to make it pass. Modify your expectation by adding two items to the
   basket and then running the CalculateGrandTotal() method:

[Fact]
public void Add2ItemsGrandTotal30() {
	var expectedGrandTotal = 30.00;
	Hashtable item = new Hashtable();
	item.Add("00000001", 10.00);
	shoppingAPI.AddItem(item);
	Hashtable item2 = new Hashtable();
	item2.Add("00000002", 20.00);
	shoppingAPI.AddItem(item2);
	var actualGrandTotal = shoppingAPI.CalculateGrandTotal();
	Assert.Equal(expectedGrandTotal, actualGrandTotal);
}

   And it passes. You now have six microtests pass successfuly; the system is back to steady-state!

Setting expectations
   As a conscientious engineer, you want to make sure that the expected acrobatics when users add items
   to the basket and then remove some items from the basket always calculate the correct grand total.
   Here comes the new expectation:

[Fact]
public void Add2ItemsRemoveFirstItemGrandTotal200() {
	var expectedGrandTotal = 200.00;
	var actualGrandTotal = 0.00;
	Assert.Equal(expectedGrandTotal, actualGrandTotal);
}

   This says that when someone adds two items to the basket and then removes the first item, the
   expected grand total is $200.00. The hard-coded behavior fails, and now you can elaborate with more
   specific confirmation examples and running the code:

[Fact]
public void Add2ItemsRemoveFirstItemGrandTotal200() {
	var expectedGrandTotal = 200.00;
	Hashtable item = new Hashtable();
	item.Add("00000001", 100.00);
	shoppingAPI.AddItem(item);
	Hashtable item2 = new Hashtable();
	item2.Add("00000002", 200.00);
	shoppingAPI.AddItem(item2);
	shoppingAPI.RemoveItem(item);
	var actualGrandTotal = shoppingAPI.CalculateGrandTotal();
	Assert.Equal(expectedGrandTotal, actualGrandTotal);
}

   Your confirmation example, coded as the expectation, adds the first item (ID "00000001" with item
   price $100.00) and then adds the second item (ID "00000002" with item price $200.00). You then remove
   the first item from the basket, calculate the grand total, and assert if it is equal to the expected
   value.

   When this executable expectation runs, the system meets the expectation by correctly calculating the
   grand total. You now have seven tests passing! The system is working; nothing is broken!

   Test Run Successful.
   Total tests: 7
        Passed: 7
    Total time: 0.9544 Seconds

More to come
   You're up to ZOMBI now, so in the next article, I'll cover E. Until then, try your hand at some tests
   of your own!


---
#####################################

