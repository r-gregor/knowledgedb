filename: jv_running-jar-file-from-cli_20180828.txt
https://www.programmergate.com/run-jar-file-command-line/

How to run a jar file from command line
July 25, 2017

   So you got an executable jar and you are wondering how to run it! . In this tutorial we define the
   different ways to run an executable jar through the windows command line. In case you don't know
   what's an executable jar, refer to our previous tutorial about [24]creating executable jars in java.

   Throughout this tutorial, we consider that you've already installed java on your machine, and you set
   up properly the java environment variables.

1. Jars with predefined main class
   Every executable jar should hold a MANIFEST.MF file which holds important information about the jar
   itself, if you're lucky enough you get a jar with a predefined main class in MANIFEST.MF

   In order to check if the main class is already defined:

   extract your jar using any archive tool e.g. winrar, 7-zip => open MANIFEST.MF file under META-INF =>
   then check whether there exists an attribute called Main-Class and is set properly.

   In order to run the jar, just type the following command in the windows console:
   java -jar <name-of-jar-with-extension>

   e.g.
   java -jar executable.jar

2. Jars without predefined main class

   Some developers forget to define the main class inside the manifest file while creating the
   executable jar, when you get this kind of jar and try to run the above command, you get an error
   message like : 'no main manifest attrbute'.

   In order to run this kind of jar, you must know the full path of the main class and use the following
   command:
   java -cp <jar-file-name-with-extension> <full-path-of-main-class>

   e.g.
   java -cp executable.jar com.programmer.gate.HelloWorld

   If you don't want to write the path of the main class each time you run the jar, you can update the
   manifest file of the jar and add your main class there. Refer to this [25]article on how to make an
   existing jar file executable.

3. Dependable jars
   A jar is dependable if it can't run independently without the existence of other jars, in order to
   run this kind of jar you must explicitly specify its classpath either through command line or via
   manifest file.

   Suppose that you have a folder named lib which exists inside the project beside META-INF and holds
   third-party libraries used by your application, your jar wouldn't work without including these
   dependencies.

   Option 1: Specify the dependencies while running the jar in the command line:
   java -cp <name-of-jar-with-extension>;<path-of-dependency-folder>/*;. <path-of-main-class>

   e.g.
   java -cp executable.jar;lib/*;. com.programmer.gate.HelloWorld

   Option 2: Specify the classpath of the jar in the manifest file:

   Normally the developers who create the jar should specify its dependencies inside the manifest, but
   in case they forgot and you don't have other way to run the jar, just add the following attribute
   just before the main class attribute in MANIFEST.MF:
   Class-Path: . lib/*

   then use the typical command:
   java -jar executable.jar

4. Unsupported major.minor error
   In some cases, you got 'Unsupported major.minor version' error when running an executable jar. This
   error means that the version of the JDK used for developing the jar is greater than the JRE version
   currently used to run it. Beware that java is backward compatible, so always make sure that the JRE
   version of running environment is greater than or equal to the JDK version used for development.

---
https://www.programmergate.com/create-executable-jar-java/

How to create an executable jar in java
July 24, 2017

   A jar file is executable if it contains at least one entry point class with a main method. In this
   tutorial, we define the different ways to create an executable jar.

1. Eclipse export tool
    ...
    

2. Command line
   In this section, we consider that you have already installed java on your machine, and you already
   added the java path to your PATH environment variable.

   2.1 Using manifest file
   Another way to create an executable jar is through using the 'jar' command in the command line. The
   command accepts as input the manifest file as well as the list of compiled classes to be packaged in
   the jar.

   Going back to our example, we move to the bin directory of our project and create a file called
   manifest.txt as the following:
   Main-Class: com.programmer.gate.HelloWorld

   P.S: it's necessary to insert a new line at the end of the manifest file in order to successfully
   generate the jar file, otherwise 'no main manifest attribute' error is thrown.

   Here, we set the path of the entry point class of the application
   to com.programmer.gate.HelloWorld, note that it's recommended to create the manifest file inside
   bin directory so that java can find your main class while execution without the need to explicitly
   set the classpath.

   After creating the manifest file, open cmd as administrator and run the following command:
   jar cfm executable.jar manifest.txt com/programmer/gate/*.class

   2.2 Explicitly setting the main class
   You can still generate an executable jar without creating a manifest file, you just set the main
   class of your application and the jar tool automatically creates the manifest file, the following
   command does the job:
   jar cfe executable.jar com.programmer.gate.HelloWorld com/programmer/gate/*.class

   where com.programmer.gate.HelloWorld is the main class to be added in the generated MANIFEST.MF

3. Make an existing jar file executable
   Normally if you try to execute a non-executable jar file, you get 'Failed to load Main-Class' error.
   This message means that your manifest file doesn't explicitly set the path of the application's entry
   point. So in order to make your file executable, you can directly update the manifest file of the jar
   through the following steps:
     * change the extension of your JAR file to ZIP, e.g. just rename non-executable.jar to
       non-executable.zip.
     * unzip your file.
     * edit your manifest file MANIFEST.MF using a text editor, e.g. notepad++ and set your main class
       as per section 2.1
     * zip the contents of the unzipped folder.
     * rename the zipped file to executable.jar

   Here we go, you get an executable jar !!
