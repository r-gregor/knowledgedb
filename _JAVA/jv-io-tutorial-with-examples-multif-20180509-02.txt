filename: java-io-tutorial-with-examples-multif_20180509.txt
https://beginnersbook.com/java-io-tutorial-with-examples/

Java I/O tutorial with examples

---
https://beginnersbook.com/2014/01/how-to-create-a-file-in-java/

How to create a File in Java

   In this tutorial we will see how to create a file in Java using createNewFile() method. This method
   creates an empty file, if the file doesn't exist at the specified location and returns true. If the
   file is already present then this method returns false. It throws:

   ]SecurityException - If a security manager exists and
   its SecurityManager.checkWrite(java.lang.String) method denies write access to the file.

   Complete code:
   The below code would create a txt file named "newfile.txt" in C drive. You can change the path in the
   below code in order to create the file in different directory or in different drive.
package beginnersbook.com;
import java.io.File;
import java.io.IOException;

public class CreateFileDemo
{
   public static void main( String[] args )
   {
      try {
             File file = new File("C:\\newfile.txt");
             /*If file gets created then the createNewFile()
              * method would return true or if the file is
              * already present it would return false
              */
             boolean fvar = file.createNewFile();
             if (fvar){
                  System.out.println("File has been created successfully");
             }
             else{
                  System.out.println("File already present at the specified location");
             }
        } catch (IOException e) {
                System.out.println("Exception Occurred:");
                e.printStackTrace();
          }
   }
}


---
https://beginnersbook.com/2014/01/how-to-read-file-in-java-bufferedinputstream/

How to read file in Java - BufferedInputStream

   In this example we will see how to read a file in Java using FileInputStream and BufferedInputStream.
   Here are the detailed steps that we have taken in the below code:
   1) Created a File instance by providing the full path of the file(which we will read) during File
   Object creation.
   2) Passed the file instance to the FileInputStream which opens a connection to the actual file,
   the file named by the File object file in the file system.
   3) Passed the FileInputStream instance to BufferedInputStream which creates a BufferedInputStream
   and saves its argument, the input stream in, for later use. An internal buffer array is created and
   stored in buf using which the read operation gives good performance as the content is readily
   available in the buffer.
   4) Used while loop to read the file. Method available() is used for checking the end of the file
   as it returns 0 when the pointer reaches to the end of the file. Read the file content using
   read() method of FileInputStream.
package beginnersbook.com;
import java.io.*;
public class ReadFileDemo {
   public static void main(String[] args) {
      //Specify the path of the file here
      File file = new File("C://myfile.txt");
      BufferedInputStream bis = null;
      FileInputStream  fis= null;

      try
      {
          //FileInputStream to read the file
          fis = new FileInputStream(file);

          /*Passed the FileInputStream to BufferedInputStream
           *For Fast read using the buffer array.*/
          bis = new BufferedInputStream(fis);

          /*available() method of BufferedInputStream
           * returns 0 when there are no more bytes
           * present in the file to be read*/
          while( bis.available() > 0 ){
              System.out.print((char)bis.read());
          }

       }catch(FileNotFoundException fnfe)
        {
            System.out.println("The specified file not found" + fnfe);
        }
        catch(IOException ioe)
        {
            System.out.println("I/O Exception: " + ioe);
        }
        finally
        {
            try{
               if(bis != null && fis!=null)
               {
                  fis.close();
                  bis.close();
               }
             }catch(IOException ioe)
              {
                  System.out.println("Error in InputStream close(): " + ioe);
              }
        }
   }
}


---
https://beginnersbook.com/2014/01/how-to-read-file-in-java-using-bufferedreader/

How to read file in Java using BufferedReader

   In this tutorial we will see two ways to read a file using BufferedReader.

   Method 1: Using readLine() method of BufferedReader class.
public String readLine() throws IOException

   It reads a line of text.

   Method 2: Using read() method

public int read() throws IOException

   It reads a character of text. Since it returns an integer value, it needs to be explicitly cast as
   char for reading the content of file.

   Complete example

   Here I have two txt files myfile.txt and myfile2.txt. In order to demonstrate both the ways to read
   file. I'm reading first file using readLine() method while the second file is being read using read()
   method.
package beginnersbook.com;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class ReadFileDemo {
   public static void main(String[] args) {

       BufferedReader br = null;
       BufferedReader br2 = null;
       try{
           br = new BufferedReader(new FileReader("B:\\myfile.txt"));

           //One way of reading the file
           System.out.println("Reading the file using readLine() method:");
           String contentLine = br.readLine();
           while (contentLine != null) {
              System.out.println(contentLine);
              contentLine = br.readLine();
           }

           br2 = new BufferedReader(new FileReader("B:\\myfile2.txt"));

           //Second way of reading the file
           System.out.println("Reading the file using read() method:");
           int num=0;
           char ch;
           while((num=br2.read()) != -1)
           {
               ch=(char)num;
               System.out.print(ch);
           }

       }
       catch (IOException ioe)
       {
           ioe.printStackTrace();
       }
       finally
       {
           try {
              if (br != null)
                 br.close();
              if (br2 != null)
                 br2.close();
           }
           catch (IOException ioe)
           {
                System.out.println("Error in closing the BufferedReader");
           }
        }
   }
}


---
https://beginnersbook.com/2014/01/how-to-write-to-a-file-in-java-using-fileoutputstream/

How to write to a file in java using FileOutputStream

   Earlier we saw how to create a file in Java. In this tutorial we will see how to write to a file
   in java using FileOutputStream. We would be using write() method of FileOutputStream to write the
   content to the specified file. Here is the signature of write() method.
public void write(byte[] b) throws IOException

   It writes b.length bytes from the specified byte array to this file output stream. As you can see
   this method needs array of bytes in order to write them into a file. Hence we would need to convert
   our content into array of bytes before writing it into the file.

Complete Code: Writing to a File
   In the below example we are writing a String to a file. To convert the String into an array of bytes,
   we are using getBytes() method of String class.
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class WriteFileDemo {
   public static void main(String[] args) {
      FileOutputStream fos = null;
      File file;
      String mycontent = "This is my Data which needs" +
             " to be written into the file";
      try {
          //Specify the file path here
          file = new File("C:/myfile.txt");
          fos = new FileOutputStream(file);

          /* This logic will check whether the file
           * exists or not. If the file is not found
           * at the specified location it would create
           * a new file*/
          if (!file.exists()) {
             file.createNewFile();
          }

          /*String content cannot be directly written into
           * a file. It needs to be converted into bytes
           */
          byte[] bytesArray = mycontent.getBytes();

          fos.write(bytesArray);
          fos.flush();
          System.out.println("File Written Successfully");
       }
       catch (IOException ioe) {
          ioe.printStackTrace();
       }
       finally {
          try {
             if (fos != null)
             {
                 fos.close();
             }
          }
          catch (IOException ioe) {
             System.out.println("Error in closing the Stream");
          }
       }
   }
}

   Output:

File Written Successfully


---
https://beginnersbook.com/2014/01/how-to-write-to-file-in-java-using-bufferedwriter/

How to write to file in Java using BufferedWriter

   Earlier we discussed how to write to a file using FileOutputStream. In this tutorial we will see
   how to write to a file using BufferedWriter. We will be using write() method of BufferedWriter to
   write the text into a file. The advantage of using BufferedWriter is that it writes text to a
   character-output stream, buffering characters so as to provide for the efficient writing (better
   performance) of single characters, arrays, and strings.

Complete example: Write to file using BufferedWriter
   In this example we have a String mycontent and a file myfile.txt in C drive. We are writing the
   String to the File with the help of FileWriter and BufferedWriter.
package beginnersbook.com;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class WriteFileDemo {
   public static void main(String[] args) {
      BufferedWriter bw = null;
      try {
         String mycontent = "This String would be written" +
            " to the specified File";
         //Specify the file name and path here
         File file = new File("C:/myfile.txt");

         /* This logic will make sure that the file
          * gets created if it is not present at the
          * specified location*/
          if (!file.exists()) {
             file.createNewFile();
          }

          FileWriter fw = new FileWriter(file);
          bw = new BufferedWriter(fw);
          bw.write(mycontent);
          System.out.println("File written Successfully");

      } catch (IOException ioe) {
           ioe.printStackTrace();
        }
        finally
        {
           try{
              if(bw!=null)
                 bw.close();
           }catch(Exception ex){
               System.out.println("Error in closing the BufferedWriter"+ex);
            }
        }
   }
}

   Output:
File written Successfully


---
https://beginnersbook.com/2014/01/how-to-append-to-a-file-in-java/

Append to a file in java using BufferedWriter, PrintWriter, FileWriter

   In this tutorial we will learn how to append content to a file in Java. There are two ways to append:

   1) Using FileWriter and BufferedWriter: In this approach we will be having the content in one of more
   Strings and we will be appending those Strings to the file. The file can be appended using FileWriter
   alone however using BufferedWriter improves the performance as it maintains a buffer.
   2) Using PrintWriter: This is one of best way to append content to a file. Whatever you write using
   PrintWriter object would be appended to the File.

1) Append content to File using FileWriter and BufferedWriter

import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

class AppendFileDemo
{
   public static void main( String[] args )
   {
      try{
        String content = "This is my content which would be appended " +
                "at the end of the specified file";
        //Specify the file name and path here
        File file =new File("C://myfile.txt");

        /* This logic is to create the file if the
         * file is not already present
         */
        if(!file.exists()){
           file.createNewFile();
        }

        //Here true is to append the content to file
        FileWriter fw = new FileWriter(file,true);
        //BufferedWriter writer give better performance
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(content);
        //Closing BufferedWriter Stream
        bw.close();

        System.out.println("Data successfully appended at the end of file");

      }catch(IOException ioe){
         System.out.println("Exception occurred:");
         ioe.printStackTrace();
       }
   }
}

   Output:
Data successfully appended at the end of file

   Lets say myfile.txt content was:

This is the already present content of my file

   After running the above program the content would be:
This is the already present content of my fileThis is my content which
would be appended at the end of the specified file

2) Append content to File using PrintWriter

   PrintWriter gives you more flexibility. Using this you can easily format the content which is to be
   appended to the File.
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.IOException;

class AppendFileDemo2
{
   public static void main( String[] args )
   {
      try{
          File file =new File("C://myfile.txt");
          if(!file.exists()){
                file.createNewFile();
          }
          FileWriter fw = new FileWriter(file,true);
          BufferedWriter bw = new BufferedWriter(fw);
          PrintWriter pw = new PrintWriter(bw);
          //This will add a new line to the file content
          pw.println("");
          /* Below three statements would add three
           * mentioned Strings to the file in new lines.
           */
          pw.println("This is first line");
          pw.println("This is the second line");
          pw.println("This is third line");
          pw.close();

          System.out.println("Data successfully appended at the end of file");

       }catch(IOException ioe){
           System.out.println("Exception occurred:");
           ioe.printStackTrace();
      }
   }
}

   Output:
Data successfully appended at the end of file

   Lets say myfile.txt content was:
This is the already present content of my file

   After running the above program the content would be:
This is the already present content of my file
This is first line
This is the second line
This is third line


---
https://beginnersbook.com/2014/01/how-to-delete-file-in-java-delete-method/

How to delete file in Java - delete() Method

   In this tutorial we will see how to delete a File in java. We will be using the delete() method for
   file deletion.
public boolean delete()

   This method returns true if the specified File deleted successfully otherwise it returns false.

   Here is the complete code:
import java.io.File;
public class DeleteFileJavaDemo
{
   public static void main(String[] args)
   {
      try{
         //Specify the file name and path
         File file = new File("C:\\myfile.txt");
         /*the delete() method returns true if the file is
          * deleted successfully else it returns false
          */
         if(file.delete()){
            System.out.println(file.getName() + " is deleted!");
         }else{
            System.out.println("Delete failed: File didn't delete");
          }
       }catch(Exception e){
           System.out.println("Exception occurred");
           e.printStackTrace();
        }
    }
}

   Output:

myfile.txt is deleted!


---
https://beginnersbook.com/2014/01/how-to-rename-file-in-java-renameto-method/

How to rename file in Java - renameTo() method

   Earlier we saw how to create, read, write, append to a file in java. In this tutorial
   we will see how to rename a file in java using renameTo() method.

   public boolean renameTo(File dest)

   It returns true if the file is renamed successfully else it returns false. It throws
   NullPointerException - If parameter dest is null.

   Complete Example:

import java.io.File;
public class RenameFileJavaDemo
{
    public static void main(String[] args)
    {
        //Old File
        File oldfile =new File("C:\\myfile.txt");
        //New File
        File newfile =new File("C:\\mynewfile.txt");
        /*renameTo() return boolean value
         * It return true if rename operation is
         * successful
         */
        boolean flag = oldfile.renameTo(newfile);
        if(flag){
           System.out.println("File renamed successfully");
        }else{
           System.out.println("Rename operation failed");
         }
    }
}

   Output:
File renamed successfully


---
https://beginnersbook.com/2014/07/how-to-compress-a-file-in-gzip-format/

How to Compress a File in GZIP Format

   The below code would compress a specified file to GZip format. In the below example we have a text
   file in B drive under "Java" Folder and we are compressing and generating the GZip file in the same
   folder.
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.GZIPOutputStream;

public class GZipExample
{
  public static void main( String[] args )
  {
    GZipExample zipObj = new GZipExample();
    zipObj.gzipMyFile();
  }

  public void gzipMyFile(){
    byte[] buffer = new byte;
    try{
      //Specify Name and Path of Output GZip file here
      GZIPOutputStream gos =
       new GZIPOutputStream(new FileOutputStream("B://Java/Myfile.gz"));

      //Specify location of Input file here
      FileInputStream fis =
       new FileInputStream("B://Java/Myfile.txt");

      //Reading from input file and writing to output GZip file
      int length;
      while ((length = fis.read(buffer)) > 0) {

        /* public void write(byte[] buf, int off, int len):
         * Writes array of bytes to the compressed output stream.
         * This method will block until all the bytes are written.
         * Parameters:
         * buf - the data to be written
         * off - the start offset of the data
         * len - the length of the data
         */
        gos.write(buffer, 0, length);
      }

      fis.close();

      /* public void finish(): Finishes writing compressed
       * data to the output stream without closing the
       * underlying stream.
       */
      gos.finish();
      gos.close();

      System.out.println("File Compressed!!");

    }catch(IOException ioe){
        ioe.printStackTrace();
     }
  }
}

   Output:
File Compressed!!


---
https://beginnersbook.com/2014/05/how-to-copy-a-file-to-another-file-in-java/

How to Copy a File to another File in Java

   In this tutorial we will see how to copy the content of one file to another file in java. In order to
   copy the file, first we can read the file using FileInputStream and then we can write the
   read content to the output file using FileOutputStream.

Example

   The below code would copy the content of "MyInputFile.txt" to the "MyOutputFile.txt" file. If
   "MyOutputFile.txt" doesn't exist then the program would create the file first and then it would copy
   the content.
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class CopyExample
{
    public static void main(String[] args)
    {
        FileInputStream instream = null;
        FileOutputStream outstream = null;

        try{
            File infile =new File("C:\\MyInputFile.txt");
            File outfile =new File("C:\\MyOutputFile.txt");

            instream = new FileInputStream(infile);
            outstream = new FileOutputStream(outfile);

            byte[] buffer = new byte;

            int length;
            /*copying the contents from input stream to
             * output stream using read and write methods
             */
            while ((length = instream.read(buffer)) > 0){
                outstream.write(buffer, 0, length);
            }

            //Closing the input/output file streams
            instream.close();
            outstream.close();

            System.out.println("File copied successfully!!");

        }catch(IOException ioe){
                ioe.printStackTrace();
         }
    }
}

   Output:
File copied successfully!!

   The methods used in the above program are:

read() method

public int read(byte[] b) throws IOException

   Reads up to b.length bytes of data from this input stream into an array of bytes. This method blocks
   until some input is available. It returns total number of bytes read into the buffer, or -1 if there
   is no more data because the end of the file has been reached. In order to make this method work in
   our program, we have created a byte array "buffer" and reading the content of input file to the same.
   Since this method throws IOException, we have put the "read file" code inside try-catch block in
   order to handle the exception.

write() method

public void write(byte[] b,
                  int off,
                  int length)
           throws IOException

   Writes length bytes from the specified byte array starting at offset off to this file output stream.

   Tweaks:
   If your input and outfile files are not in the same drive then you can specify the drive while
   creating the file object. For example if your input file is in C drive and output file is in D drive
   then you can create the file object like this:
File infile =new File("C:\\MyInputFile.txt");
File outfile =new File("D:\\MyOutputFile.txt");


---
https://beginnersbook.com/2014/05/how-to-get-the-last-modified-date-of-a-file-in-java/

How to get the last modified date of a file in java

   Here we will learn how to get the last modified date of a file in java. In order to do this we can
   use the lastModified() method of File class. Following is the signature of this method.
public long lastModified()

   It returns the time that the file denoted by this abstract pathname was last modified. The value
   returned by this method is in milliseconds so in order to make it readable, we can format the output
   using SimpleDateFormat.

Complete code:

   Here we are fetching the last modified date of file "Myfile.txt" which is present in drive "C". Since
   the value returned by method is not readable, we are using format() method of SimpleDateFormat class
   to format it.
import java.io.File;
import java.text.SimpleDateFormat;
public class LastModifiedDateExample
{
    public static void main(String[] args)
    {
        //Specify the file path and name
        File file = new File("C:\\Myfile.txt");
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        System.out.println("Last Modified Date: " + sdf.format(file.lastModified()));
    }
}

   Output:

Last Modified Date: 01/03/2014 22:41:49

   We can format and display the output in any desired format. For example if we use the following
   pattern:
SimpleDateFormat sdf2 = new SimpleDateFormat("MM-dd-yy HH:mm a");
System.out.println("Last Modified Date: " + sdf2.format(file.lastModified()));

   We will get the below output for above pattern:
Last Modified Date: 01-03-14 22:41 PM

   There are several other patterns which you can use to get the output in desired form. To read more
   about date formatting refer SimpleDateFormat javadoc.


---
https://beginnersbook.com/2014/05/how-to-make-a-file-read-only-in-java/

How to make a File Read Only in Java

   Making a file read only is very easy in java. In this tutorial, we will learn following three things.
   1) How to make a file read only
   2) How to check whether the existing file is in read only mode or not
   3) How to make a read only file writable in java.

1) Changing file attributes to read only
   To make a file read only, we can use setReadOnly() method of File class. It returns a boolean value
   which we can further use to verify whether the operation got successful or not, same way as I did in
   the below program. As you can see that in the below program, I am changing the file attributes to
   read only of file "Myfile.txt" which is present in "C drive" of my computer.
import java.io.File;
import java.io.IOException;

public class ReadOnlyChangeExample
{

    public static void main(String[] args) throws IOException
    {
        File myfile = new File("C://Myfile.txt");
        //making the file read only
        boolean flag = myfile.setReadOnly();
        if (flag==true)
        {
           System.out.println("File successfully converted to Read only mode!!");
        }
        else
        {
           System.out.println("Unsuccessful Operation!!");
        }
    }
}

   Output:
File successfully converted to Read only mode!!

2) Check whether the file is writable or read only
   In order to check the file attributes, we can use canWrite() method of file class. This methods
   returns true if the file is writable else it returns false. As I am performing the operation on the
   file "Myfile.txt" which I already set to read only in the previous program, I am getting output as
   "File is read only".

import java.io.File;
import java.io.IOException;

public class CheckAttributes
{
    public static void main(String[] args) throws IOException
    {
        File myfile = new File("C://Myfile.txt");
        if (myfile.canWrite())
        {
           System.out.println("File is writable.");
        }
        else
        {
           System.out.println("File is read only.");
        }
    }
}

   Output:
File is read only.

3) How to make a read only file writable in java
   To make a read only file to writable file, we can use setWritable() method. This method can also be
   used to make a file read only.
   file.setWritable(true): To make file writable.
   file.setWritable(false): To make file read only.
import java.io.File;
import java.io.IOException;

public class MakeWritable
{

    public static void main(String[] args) throws IOException
    {
        File myfile = new File("C://Myfile.txt");
        //changing the file mode to writable
        myfile.setWritable(true);
        if (myfile.canWrite())
        {
           System.out.println("File is writable.");
        }
        else
        {
           System.out.println("File is read only.");
        }
    }
}

   Output:
File is writable.


---
https://beginnersbook.com/2015/01/how-to-check-if-a-file-is-hidden-in-java/

How to check if a File is hidden in Java

   In this tutorial we would learn how to write a program to check whether a particular file is hidden
   or not. We would be using isHidden() method of File class to perform this check. This method returns
   a boolean value (true or false), if file is hidden then this method returns true otherwise it returns
   a false value.

Here is the complete code:

import java.io.File;
import java.io.IOException;

public class HiddenPropertyCheck
{

    public static void main(String[] args) throws IOException, SecurityException
    {
        // Provide the complete file path here
        File file = new File("c:/myfile.txt");

        if(file.isHidden()){
                System.out.println("The specified file is hidden");
        }else{
                System.out.println("The specified file is not hidden");
        }
    }
}


More details about isHidden() method from javadoc:
   public static boolean isHidden(Path path) throws IOException
   Tells whether or not a file is considered hidden. The exact definition of hidden is platform or
   provider dependent. On UNIX for example a file is considered to be hidden if its name begins with a
   period character ('.'). On Windows a file is considered hidden if it isn't a directory and the DOS
   hidden attribute is set.
   Depending on the implementation this method may require to access the file system to determine if the
   file is considered hidden.

   Parameters:
   path - the path to the file to test

   Returns:
   true if the file is considered hidden


   Throws:
   IOException - if an I/O error occurs
   SecurityException - In the case of the default provider, and a security manager is installed, the
   checkRead method is invoked to check read access to the file.
