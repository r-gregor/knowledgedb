filename: jv_send-email-with-attachements-via-gmail-multif_20180412.txt
http://www.mkyong.com/spring/spring-sending-e-mail-with-attachment/

Spring – Sending e-mail with attachment
June 23, 2011

   Here’s an example to use Spring to send e-mail that has attachments via Gmail SMTP server. In order
   to contains the attachment in your e-mail, you have to use Spring’s JavaMailSender & MimeMessage ,
   instead of MailSender & SimpleMailMessage.

1. Project dependency
   Add the JavaMail and Spring’s dependency.

   File : pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
  http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mkyong.common</groupId>
  <artifactId>SpringExample</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>SpringExample</name>
  <url>http://maven.apache.org</url>

  <repositories>
        <repository>
                <id>Java.Net</id>
                <url>http://download.java.net/maven/2/</url>
        </repository>
  </repositories>

  <dependencies>

    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>3.8.1</version>
        <scope>test</scope>
    </dependency>

    <!-- Java Mail API -->
    <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <version>1.4.3</version>
    </dependency>

    <!-- Spring framework -->
    <dependency>
        <groupId>org.springframework</groupId>
            <artifactId>spring</artifactId>
            <version>2.5.6</version>
    </dependency>

  </dependencies>
</project>

2. Spring’s Mail Sender
   You have to use JavaMailSender instead of MailSender to send attachments, and attach the resources
   with MimeMessageHelper. In this example, it will get the “c:\\log.txt” text file from your file
   system (FileSystemResource) as an e-mail attachment.

   Beside file system, you can also get any resources from URL path(UrlResource), Classpath
   (ClassPathResource), InputStream (InputStreamResource)… please refer to Spring’s AbstractResource
   implemented classes.

   File : MailMail.java
package com.mkyong.common;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.MailParseException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;

public class MailMail
{
        private JavaMailSender mailSender;
        private SimpleMailMessage simpleMailMessage;

        public void setSimpleMailMessage(SimpleMailMessage simpleMailMessage) {
                this.simpleMailMessage = simpleMailMessage;
        }

        public void setMailSender(JavaMailSender mailSender) {
                this.mailSender = mailSender;
        }

        public void sendMail(String dear, String content) {

           MimeMessage message = mailSender.createMimeMessage();

           try{
                MimeMessageHelper helper = new MimeMessageHelper(message, true);

                helper.setFrom(simpleMailMessage.getFrom());
                helper.setTo(simpleMailMessage.getTo());
                helper.setSubject(simpleMailMessage.getSubject());
                helper.setText(String.format(
                        simpleMailMessage.getText(), dear, content));

                FileSystemResource file = new FileSystemResource("C:\\log.txt");
                helper.addAttachment(file.getFilename(), file);

             }catch (MessagingException e) {
                throw new MailParseException(e);
             }
             mailSender.send(message);
         }
}

3. Bean configuration file
   Configure the mailSender bean, email template and specify the email details for the Gmail SMTP
   server.

   File : Spring-Mail.xml
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="587" />
        <property name="username" value="username" />
        <property name="password" value="password" />

        <property name="javaMailProperties">
                <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
        </props>
        </property>
</bean>

<bean id="mailMail" class="com.mkyong.common.MailMail">
        <property name="mailSender" ref="mailSender" />
        <property name="simpleMailMessage" ref="customeMailMessage" />
</bean>

<bean id="customeMailMessage"
        class="org.springframework.mail.SimpleMailMessage">

        <property name="from" value="from@no-spam.com" />
        <property name="to" value="to@no-spam.com" />
        <property name="subject" value="Testing Subject" />
        <property name="text">
        <value>
                <![CDATA[
                        Dear %s,
                        Mail Content : %s
                ]]>
        </value>
    </property>
</bean>

</beans>

4. Run it
package com.mkyong.common;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App
{
    public static void main( String[] args )
    {
        ApplicationContext context =
            new ClassPathXmlApplicationContext("Spring-Mail.xml");

        MailMail mm = (MailMail) context.getBean("mailMail");
        mm.sendMail("Yong Mook Kim", "This is text content");

    }
}

   output
 Dear Yong Mook Kim,
 Mail Content : This is text content

 Attachment : log.txt


---
http://www.codejava.net/java-ee/javamail/send-e-mail-with-attachment-in-java

Send e-mail with attachment in Java
15 October 2017

   Java Spring Framework Masterclass: Beginner to Professional
   This article provides a step-by-step guide on how to add attachments to an e-mail message to be sent
   via a SMTP server, using the [51]JavaMail API. To understand how attachments are stored inside an
   e-mail message, let’s take a look at the following picture: e-mail message structure As we can see, a
   message comprises of a header and a body. The body must be of type Multipart for containing
   attachments. The Multipart object holds multiple parts in which each part is represented as a type of
   BodyPart whose subclass, MimeBodyPart – can take a file as its content. The steps to create a
   multipart message with multiple parts are as follows:
Message message = new MimeMessage(session);
Multipart multipart = new MimeMultipart();

// creates body part for the message
MimeBodyPart messageBodyPart = new MimeBodyPart();
messageBodyPart.setContent(message, "text/html");

// creates body part for the attachment
MimeBodyPart attachPart = new MimeBodyPart();

// code to add attachment...will be revealed later

// adds parts to the multipart
multipart.addBodyPart(messageBodyPart);
multipart.addBodyPart(attachPart);

// sets the multipart as message's content
message.setContent(multipart);

     The MimeBodyPart class provides some convenient methods for attaching a file, but the way is
   different between JavaMail 1.3 and JavaMail 1.4. With JavaMail 1.3, it requires writing the following
   code to add an attachment:
// JavaMail 1.3
MimeBodyPart attachPart = new MimeBodyPart();
String attachFile = "D:/Documents/MyFile.mp4";

DataSource source = new FileDataSource(attachFile);
attachPart.setDataHandler(new DataHandler(source));
attachPart.setFileName(new File(attachFile).getName());

multipart.addBodyPart(attachPart);

     With JavaMail 1.4, adding an attachment is much simpler with the following new methods introduced
   in the MimeBodyPart class:
     *            void attachFile(File file)
     *            void attachFile(String filePath)

   So the code with JavaMail 1.4 would look like this:
// JavaMail 1.4
MimeBodyPart attachPart = new MimeBodyPart();
String attachFile = "D:/Documents/MyFile.mp4";
attachPart.attachFile(attachFile);
multipart.addBodyPart(attachPart);

   The code for JavaMail 1.3 still works in 1.4. Now for a sample program, the following class,
   EmailAttachmentSender – implements a static method, sendEmailWithAttachments() – which can be used
   for sending an e-mail message with some attachments. This method requires the following parameters:
     *            For SMTP server information: host, port number, user name (e-mail address), and
       password.
     *            For e-mail message: recipient e-mail address, subject, and message.
     *            For attached files: an array of String for file paths.

   Here is the code of the class EmailAttachmentSender:
package net.codejava.mail;

import java.io.IOException;
import java.util.Date;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class EmailAttachmentSender {

        public static void sendEmailWithAttachments(String host, String port,
                        final String userName, final String password, String toAddress,
                        String subject, String message, String[] attachFiles)
                        throws AddressException, MessagingException {
                // sets SMTP server properties
                Properties properties = new Properties();
                properties.put("mail.smtp.host", host);
                properties.put("mail.smtp.port", port);
                properties.put("mail.smtp.auth", "true");
                properties.put("mail.smtp.starttls.enable", "true");
                properties.put("mail.user", userName);
                properties.put("mail.password", password);

                // creates a new session with an authenticator
                Authenticator auth = new Authenticator() {
                        public PasswordAuthentication getPasswordAuthentication() {
                                return new PasswordAuthentication(userName, password);
                        }
                };
                Session session = Session.getInstance(properties, auth);

                // creates a new e-mail message
                Message msg = new MimeMessage(session);

                msg.setFrom(new InternetAddress(userName));
                InternetAddress[] toAddresses = { new InternetAddress(toAddress) };
                msg.setRecipients(Message.RecipientType.TO, toAddresses);
                msg.setSubject(subject);
                msg.setSentDate(new Date());

                // creates message part
                MimeBodyPart messageBodyPart = new MimeBodyPart();
                messageBodyPart.setContent(message, "text/html");

                // creates multi-part
                Multipart multipart = new MimeMultipart();
                multipart.addBodyPart(messageBodyPart);

                // adds attachments
                if (attachFiles != null && attachFiles.length > 0) {
                        for (String filePath : attachFiles) {
                                MimeBodyPart attachPart = new MimeBodyPart();

                                try {
                                        attachPart.attachFile(filePath);
                                } catch (IOException ex) {
                                        ex.printStackTrace();
                                }

                                multipart.addBodyPart(attachPart);
                        }
                }

                // sets the multi-part as e-mail's content
                msg.setContent(multipart);

                // sends the e-mail
                Transport.send(msg);

        }

        /**
         * Test sending e-mail with attachments
         */
        public static void main(String[] args) {
                // SMTP info
                String host = "smtp.gmail.com";
                String port = "587";
                String mailFrom = "your-email-address";
                String password = "your-email-password";

                // message info
                String mailTo = "your-friend-email";
                String subject = "New email with attachments";
                String message = "I have some attachments for you.";

                // attachments
                String[] attachFiles = new String[3];
                attachFiles[0] = "e:/Test/Picture.png";
                attachFiles[1] = "e:/Test/Music.mp3";
                attachFiles[2] = "e:/Test/Video.mp4";

                try {
                        sendEmailWithAttachments(host, port, mailFrom, password, mailTo,
                                subject, message, attachFiles);
                        System.out.println("Email sent.");
                } catch (Exception ex) {
                        System.out.println("Could not send email.");
                        ex.printStackTrace();
                }
        }
}

   NOTE: The JavaMail API requires [52]JavaBeans Activation Framework (JAF) which is included in the JDK
   6 and JDK 7. So if you are using JDK 5 or earlier version, you must download the JAF and add the
   activation.jar file to your classpath. For Swing-based version of the sample program, see this
   tutorial: [53]Swing application for sending e-mail (with attachments).   Recommended Book:
   [54]JavaMail API   You may be also interested in:
     * [55]How to start e-mail programming in Java
     * [56]Send e-mail in plain text using JavaMail
     * [57]Send e-mail in HTML format using JavaMail API
     * [58]Download attachments in e-mail messages using JavaMail


---
http://www.websparrow.org/java/send-email-with-attachment-in-java-using-gmail

Send email with attachment in Java using Gmail
May 28, 2017

   In this example we are going to send an email with attachment in Java program via Gmail server.
   JavaMail API provides the classes like…

   Multipart - Multipart is a container that holds multiple body parts. Multipart provides methods to
   retrieve and set its subparts. Multipart also acts as the base class for the content object returned
   by most Multipart DataContentHandlers.

   BodyPart - BodyPart implements the Part interface. Thus, it contains a set of attributes and a
   content.

   MimeBodyPart - This class represents a MIME body part. It implements the BodyPart abstract class and
   the MimePart interface. MimeBodyParts are contained in MimeMultipart objects.

Steps for Code
    1. Get the Session.
    2. Create MimeMessage object and set From, To, Subject in the message.
    3. Create a MimeMultipart object.
Multipart multipart = new MimeMultipart();
    4. Add message in email as follows.
BodyPart bodyPart = new MimeBodyPart();
bodyPart.setText("This email has an attachement. Please find the attach file. Thank You :)");
multipart.addBodyPart(bodyPart);
    5. Add the attachment as follows.
MimeBodyPart mimeBodyPart = new MimeBodyPart();
mimeBodyPart.attachFile(new File("F:/WebSparrow/logo/ws.jpg"));
multipart.addBodyPart(mimeBodyPart);
    6. Set the multipart in the message as follow.
message.setContent(multipart);
    7. Send the message using the Transport object.
Transport.send(message);

Check the full example:

   SendEmailWithAttachment.java
<code>   
package org.websparrow;

import java.io.File;
import java.io.IOException;
import java.util.Properties;

import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class SendEmailWithAttachment {
        public static void main(String[] args) throws IOException {

                final String username = "from@gmail.com";
                final String password = "xxxxxxx";

                // setting gmail smtp properties
                Properties props = new Properties();
                props.put("mail.smtp.auth", "true");
                props.put("mail.smtp.starttls.enable", "true");
                props.put("mail.smtp.host", "smtp.gmail.com");
                props.put("mail.smtp.port", "587");

                // check the authentication
                Session session = Session.getInstance(props, new javax.mail.Authenticator() {
                        protected PasswordAuthentication getPasswordAuthentication() {
                                return new PasswordAuthentication(username, password);
                        }
                });

                try {

                        Message message = new MimeMessage(session);
                        message.setFrom(new InternetAddress("from@gmail.com"));

                        // recipients email address
                        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse("to@gmail.com"))
;

                        // add the Subject of email
                        message.setSubject("JavaMail API Test");

                        Multipart multipart = new MimeMultipart();

                        // add the body message
                        BodyPart bodyPart = new MimeBodyPart();
                        bodyPart.setText("This email has an attachement. Please find the attach file. Thank Yo
u");
                        multipart.addBodyPart(bodyPart);

                        // attach the file
                        MimeBodyPart mimeBodyPart = new MimeBodyPart();
                        mimeBodyPart.attachFile(new File("F:/WebSparrow/logo/ws.jpg"));
                        multipart.addBodyPart(mimeBodyPart);

                        message.setContent(multipart);

                        Transport.send(message);

                        System.out.println("Email Sent Successfully");

                } catch (MessagingException e) {
                        e.printStackTrace();

                }
        }
}
</code>

   Output:

   Email Sent Successfully.

     Note: You may face the javax.mail.AuthenticationFailedException exception. To resolve this check
     this tutorial [13]javax.mail.AuthenticationFailedException


---
https://www.concretepage.com/java/java-gmail-smtp-send-email-text-html-and-attachment-example

Java + Gmail SMTP: Send Email Text, HTML and Attachment Example
February 26, 2015

   This page will provide complete tutorial to send email using java and Gmail SMTP. In our example, we
   will send text, html and attachment in email for the demo. Java provides JavaMail API which uses mail
   and activation jar. To send email a session is created. Using this session instance we create
   MimeMessage and finally using Transport.send() method, we send email. To send html content and
   attachment , JavaMail APi provides MimeMultipart and MimeBodyPart classes. In this tutorial we will
   learn to send email with
   1. Simple text
   2. Text and attachment
   3. Html content and attachment
   To run the program in local machine, we need to make our Gmail account less secure using below steps.
   1. Login to Gmail.
   2. Access the URL as https://www.google.com/settings/security/lesssecureapps
   3. Select "Turn on"

Session and Authenticator
   javax.mail.Session is a mail session. Session can be shared and unshared. Default session can be
   shared by multiple desktop applications. It keeps default values for the mail property. The default
   properties of session can be overridden as
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.port", "587");

   Session can be created by passing properties instance and javax.mail.Authenticator. Find the code
   snippet.
Session session = Session.getInstance(props,
                  new Authenticator() {
                        protected PasswordAuthentication getPasswordAuthentication() {
                                return new PasswordAuthentication("arvindraivns06@gmail.com", "password");
                        }
                  });

   Authenticator class defines a method to return PasswordAuthentication which accepts mail id and
   password. If we are using Gmail SMTP, we need to pass Gmail id and our Gmail password.

MimeMessage and Transport.send()
   javax.mail.internet.MimeMessage represents MIME style email message. MimeMessage implements Message
   abstract class and MimePart interface. Using MimeMessage class, we set TO, FROM, SUBJECT etc to send
   mail as below.
MimeMessage msg = new MimeMessage(session);
msg.setFrom(new InternetAddress("arvindraivns06@gmail.com"));
msg.setRecipients(Message.RecipientType.TO, "arvindraivns02@gmail.com");

   javax.mail.Transport.send() method finally send the email to all recipients. Transport is an abstract
   class used to transport message.
Transport.send(msg);

MimeMultipart and MimeBodyPart
   In the case, if we are intended to send HTML content and attachment or both, we need to use
   javax.mail.internet.MimeMultipart and javax.mail.internet.MimeBodyPart classes. We create an empty
   MimeMultipart object which has content type as "multipart/mixed". MimeBodyPart represents MIME body
   part. It implements BodyPart abstract class and MimePart interface. We use these classes as
Multipart multipart = new MimeMultipart();
MimeBodyPart attachementPart = new MimeBodyPart();
attachementPart.attachFile(new File("D:/cp/pic.jpg"));
multipart.addBodyPart(attachementPart);

   And finally Multipart instance is set to MimeMessage as
MimeMessage.setContent(multipart);

Gradle File for Mail and Activation JAR
   Find the Gradle file to resolve the mail and activation jar.
   build.gradle
apply plugin: 'java'
apply plugin: 'eclipse'
archivesBaseName = 'Concretepage'
version = '1.0-SNAPSHOT'
repositories {
    maven { url "https://repo.spring.io/libs-release" }
    mavenLocal()
    mavenCentral()
}
dependencies {
    compile 'javax.mail:mail:1.4.7'
    compile 'jaf:activation:1.0.2'
}

Send Email with Simple Text

   In this example we send a simple text to recipient using Gmail SMTP.
   SendSimpleMail.java
package com.concretepage;
import java.util.Date;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
public class SendSimpleMail {
        public static void main(String[] args) {
              Properties props = new Properties();
              props.put("mail.smtp.auth", "true");
              props.put("mail.smtp.starttls.enable", "true");
              props.put("mail.smtp.host", "smtp.gmail.com");
              props.put("mail.smtp.port", "587");
              props.put("mail.debug", "true");
              Session session = Session.getInstance(props,
                          new Authenticator() {
                                protected PasswordAuthentication getPasswordAuthentication() {
                                        return new PasswordAuthentication("arvindraivns06@gmail.com", "password");
                                }
                          });
              try {
                MimeMessage msg = new MimeMessage(session);
                msg.setFrom(new InternetAddress("arvindraivns06@gmail.com"));
                msg.setRecipients(Message.RecipientType.TO, "arvindraivns02@gmail.com");
                msg.setSubject("Simple Test Mail");
                msg.setSentDate(new Date());
                msg.setText("Hello World!");
                Transport.send(msg);
                System.out.println("---Done---");
              } catch (MessagingException mex) {
                mex.printStackTrace();
              }
        }
}

   Find the output and check the email.
Subject: Simple Test Mail
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Hello World!
.
250 2.0.0 OK 1424959435 c17sm1093738pdl.79 - gsmtp
QUIT
221 2.0.0 closing connection c17sm1093738pdl.79 - gsmtp
---Done---

Send Email with Text and Attachment
   Here we will use Multipart and create two MimeBodyPart , one for text and second for attachment.
   AttachmentWithText.java
package com.concretepage;
import java.io.File;
import java.util.Date;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
public class AttachmentWithText {
        public static void main(String[] args) {
                  Properties props = new Properties();
              props.put("mail.smtp.auth", "true");
              props.put("mail.smtp.starttls.enable", "true");
              props.put("mail.smtp.host", "smtp.gmail.com");
              props.put("mail.smtp.port", "587");
              props.put("mail.debug", "true");
              Session session = Session.getInstance(props,
                          new Authenticator() {
                                protected PasswordAuthentication getPasswordAuthentication() {
                                        return new PasswordAuthentication("arvindraivns06@gmail.com", "password");
                                }
                          });

               try {
                        MimeMessage msg = new MimeMessage(session);
                        msg.setFrom(new InternetAddress("arvindraivns06@gmail.com"));
                        msg.setRecipients(Message.RecipientType.TO, "arvindraivns02@gmail.com");
                        msg.setSubject("Text Mail with Attachment.");
                        msg.setSentDate(new Date());

                        Multipart multipart = new MimeMultipart();

                        MimeBodyPart textPart = new MimeBodyPart();
                        String textContent = "Please find the Attachment.";
                        textPart.setText(textContent);
                        multipart.addBodyPart(textPart);

                        MimeBodyPart attachementPart = new MimeBodyPart();
                        attachementPart.attachFile(new File("D:/cp/pic.jpg"));
                        multipart.addBodyPart(attachementPart);

                        msg.setContent(multipart);
                        Transport.send(msg);
                        System.out.println("---Done---");
               } catch (Exception ex) {
                    ex.printStackTrace();
               }
        }
}

   Find the output and check the email.
------=_Part_0_1361188139.1424959525240--
.
250 2.0.0 OK 1424959535 mi9sm1225699pab.3 - gsmtp
QUIT
221 2.0.0 closing connection mi9sm1225699pab.3 - gsmtp
---Done---

Send Email with Html Content and Attachment
   This example is almost same as above. Here we have tried to show how to use HTML content and
   attachment. Create Multipart and create two MimeBodyPart , one for html content and second for
   attachment.
   AttachementWithHtmlContent.java
package com.concretepage;
import java.io.File;
import java.util.Date;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
public class AttachementWithHtmlContent {
        public static void main(String[] args) {
                  Properties props = new Properties();
              props.put("mail.smtp.auth", "true");
              props.put("mail.smtp.starttls.enable", "true");
              props.put("mail.smtp.host", "smtp.gmail.com");
              props.put("mail.smtp.port", "587");
              props.put("mail.debug", "true");
              Session session = Session.getInstance(props,
                          new Authenticator() {
                                protected PasswordAuthentication getPasswordAuthentication() {
                                        return new PasswordAuthentication("arvindraivns06@gmail.com", "password");
                                }
                          });

               try {
                        MimeMessage msg = new MimeMessage(session);
                        msg.setFrom(new InternetAddress("arvindraivns06@gmail.com"));
                        msg.setRecipients(Message.RecipientType.TO, "arvindraivns02@gmail.com");
                        msg.setSubject("Html Test Mail with Attachement");
                        msg.setSentDate(new Date());

                        Multipart multipart = new MimeMultipart();

                        MimeBodyPart htmlPart = new MimeBodyPart();
                        String htmlContent = "&lthtml>&ltbody>&lth1&gtHtml Content</h1></body></html>";
                        htmlPart.setContent(htmlContent, "text/html");
                        multipart.addBodyPart(htmlPart);

                        MimeBodyPart attachementPart = new MimeBodyPart();
                        attachementPart.attachFile(new File("D:/cp/pic.jpg"));
                        multipart.addBodyPart(attachementPart);

                        msg.setContent(multipart);
                        Transport.send(msg);
                        System.out.println("---Done---");
               } catch (Exception ex) {
                    ex.printStackTrace();
               }
        }
}

   Find the output and check the email.
------=_Part_0_1361188139.1424959832984--
.
250 2.0.0 OK 1424959843 kg2sm1118833pbc.72 - gsmtp
QUIT
221 2.0.0 closing connection kg2sm1118833pbc.72 - gsmtp
---Done---


---
https://www.javatpoint.com/example-of-sending-attachment-with-email-using-java-mail-api

Sending email with attachment in Java

   For sending email with attachment, JavaMail API provides some useful classes like BodyPart,
   MimeBodyPart etc.
   For better understanding of this example, learn the steps of sending email using JavaMail API first.
   For sending the email using JavaMail API, you need to load the two jar files:
     * mail.jar
     * activation.jar

   [29]download these jar files (or) go to the Oracle site to download the latest version.

Sending email with attachment using JavaMail API

   There are total 7 steps for sending attachment with email. They are:
    1. Get the session object
    2. compose message
    3. create MimeBodyPart object and set your message text
    4. create new MimeBodyPart object and set DataHandler object to this object
    5. create Multipart object and add MimeBodyPart objects to this object
    6. set the multiplart object to the message object
    7. send message

Example of sending email with attachment in Java:

<code>
import java.util.*;  
import javax.mail.*;  
import javax.mail.internet.*;  
import javax.activation.*;  
  
class SendAttachment{  
 public static void main(String [] args){  
  
  String to="sonoojaiswal1987@gmail.com";//change accordingly  
  final String user="sonoojaiswal@javatpoint.com";//change accordingly  
  final String password="xxxxx";//change accordingly  
   
  //1) get the session object     
  Properties properties = System.getProperties();  
  properties.setProperty("mail.smtp.host", "mail.javatpoint.com");  
  properties.put("mail.smtp.auth", "true");  
  
  Session session = Session.getDefaultInstance(properties,  
   new javax.mail.Authenticator() {  
   protected PasswordAuthentication getPasswordAuthentication() {  
   return new PasswordAuthentication(user,password);  
   }  
  });  
     
  //2) compose message     
  try{  
    MimeMessage message = new MimeMessage(session);  
    message.setFrom(new InternetAddress(user));  
    message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));  
    message.setSubject("Message Aleart");  
      
    //3) create MimeBodyPart object and set your message text     
    BodyPart messageBodyPart1 = new MimeBodyPart();  
    messageBodyPart1.setText("This is message body");  
      
    //4) create new MimeBodyPart object and set DataHandler object to this object      
    MimeBodyPart messageBodyPart2 = new MimeBodyPart();  
  
    String filename = "SendAttachment.java";//change accordingly  
    DataSource source = new FileDataSource(filename);  
    messageBodyPart2.setDataHandler(new DataHandler(source));  
    messageBodyPart2.setFileName(filename);  
     
     
    //5) create Multipart object and add MimeBodyPart objects to this object      
    Multipart multipart = new MimeMultipart();  
    multipart.addBodyPart(messageBodyPart1);  
    multipart.addBodyPart(messageBodyPart2);  
  
    //6) set the multiplart object to the message object  
    message.setContent(multipart );  
     
    //7) send message  
    Transport.send(message);  
   
   System.out.println("message sent....");  
   }catch (MessagingException ex) {ex.printStackTrace();}  
 }  
}  
</code>

   As you can see in the above example, total 7 steps are followed to send email with attachment. Now
   run this program by :
   Load the jar file       c:\> set classpath=mail.jar;activation.jar;.;
   compile the source file c:\> javac SendAttachment.java
   run by                  c:\> java SendAttachment
 

---
http://www.splessons.com/lesson/javamail-send-attachment/

JavaMail Send Attachment

shape Introduction
   JavaMail Send Attachment, The JavaMail API is the concept related to email through the JavaMail.
   There are so many ways to send an email using JavaMail, but here by using SMTP server should send the
   emails.JavaMail API also provides core classes for to define objects and used that objects to
   maintain a mail system. By making use of MineBodyPart, BodyPart classes from JavaMail API
   sending electronic mail with attachment is possible. The sending email with attachment is similar to
   sending email but here the additional functionality is with message sending a file or document by
   making use of MineBodyPart, BodyPart classes.


   Steps to send email with attachments:
   JavaMail Send Attachment, The process for sending mail with attachment involves session object,
   MineBody, MultiPart objects. Here the MineBody is used to set the text message and it is carried by
   MultiPart object. Because of MultiPart object here sending attachment.

shape Examples

   Let us see the example how to send email with attachments.
<code>   
 package firstmail;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
public class sendingattachments {
   public static void main(String[] args) {
      // Recipient's email ID needs to be mentioned.
      String to = "9saireddy@gmail.com";
      // Sender's email ID needs to be mentioned
      String from = "9saireddy@gmail.com";
      final String username = "9saireddy@gmail.com";//change accordingly
      final String password = "splessons";//change accordingly
      // Assuming you are sending email through relay.jangosmtp.net
      Properties props = new Properties();
      props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.socketFactory.port", "465");
    props.put("mail.smtp.socketFactory.class",
      "javax.net.ssl.SSLSocketFactory");
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.port", "465");
      // Get the Session object.
      Session session = Session.getInstance(props,
         new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
               return new PasswordAuthentication(username, password);
            }
         });
      try {
         // Create a default MimeMessage object.
         Message message = new MimeMessage(session);
         // Set From: header field of the header.
         message.setFrom(new InternetAddress(from));
         // Set To: header field of the header.
         message.setRecipients(Message.RecipientType.TO,
            InternetAddress.parse(to));
         // Set Subject: header field
         message.setSubject("sendinngattachments.java");
         // Create the message part
         BodyPart messageBodyPart = new MimeBodyPart();
         // Now set the actual message
         messageBodyPart.setText("hey u, follwong is the message find it.");
         // Create a multipar message
         Multipart multipart = new MimeMultipart();
         // Set text message part
         multipart.addBodyPart(messageBodyPart);
         // Part two is attachment
         messageBodyPart = new MimeBodyPart();
         String filename = "E:/SaiReddy-CV.PDF";
         DataSource source = new FileDataSource(filename);
         messageBodyPart.setDataHandler(new DataHandler(source));
         messageBodyPart.setFileName(filename);
         multipart.addBodyPart(messageBodyPart);
         // Send the complete message parts
         message.setContent(multipart);
         // Send message
         Transport.send(message);
         System.out.println("Sent message successfully....");
      } catch (MessagingException e) {
         throw new RuntimeException(e);
      }
   }
}
</code>

   Output
   When compile the program following is the output will be displayed in the console.
Sent message successfully....

   Now check the mail.



---
https://developers.google.com/gmail/api/guides/sending

Sending Email

   There are two ways to send email using the Gmail API:
     * You can send it directly using the [90]messages.send method.
     * You can send it from a draft, using the [91]drafts.send method.

   Emails are sent as base64url encoded strings within the raw property of a [92]message resource. The
   high-level workflow to send an email is to:
    1. Create the email content in some convenient way and encode it as a base64url string.
    2. Create a new message resource and set its raw property to the base64url string you just created.
    3. Call messages.send, or, if sending a draft, drafts.send to send the message.

   The details of this workflow can vary depending on your choice of client library and programming
   language.

Creating messages
   The Gmail API requires MIME email messages compliant with [93]RFC 2822 and encoded as base64url
   strings. Many programming languages have libraries or utilities that simplify the process of creating
   and encoding MIME messages. The following code examples demonstrate how to create a MIME message
   using the Google APIs client libraries for various langauges.

Java
   Creating an email message can be greatly simplified with the MimeMessage class in the
   javax.mail.internet package. The following example shows how to create the email message, including
   the headers:
<code>   
    /**
     * Create a MimeMessage using the parameters provided.
     *
     * @param to email address of the receiver
     * @param from email address of the sender, the mailbox account
     * @param subject subject of the email
     * @param bodyText body text of the email
     * @return the MimeMessage to be used to send email
     * @throws MessagingException
     */
    public static MimeMessage createEmail(String to,
                                          String from,
                                          String subject,
                                          String bodyText)
            throws MessagingException {
        Properties props = new Properties();
        Session session = Session.getDefaultInstance(props, null);

        MimeMessage email = new MimeMessage(session);

        email.setFrom(new InternetAddress(from));
        email.addRecipient(javax.mail.Message.RecipientType.TO,
                new InternetAddress(to));
        email.setSubject(subject);
        email.setText(bodyText);
        return email;
    }
</code>

   The next step is to encode the MimeMessage, instantiate a Message object, and set the base64url
   encoded message string as the value of the raw property.
<code>   
    /**
     * Create a message from an email.
     *
     * @param emailContent Email to be set to raw of message
     * @return a message containing a base64url encoded email
     * @throws IOException
     * @throws MessagingException
     */
    public static Message createMessageWithEmail(MimeMessage emailContent)
            throws MessagingException, IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        emailContent.writeTo(buffer);
        byte[] bytes = buffer.toByteArray();
        String encodedEmail = Base64.encodeBase64URLSafeString(bytes);
        Message message = new Message();
        message.setRaw(encodedEmail);
        return message;
    }
</code>

Python
   The following code sample demonstrates creating a MIME message, encoding to a base64url string, and
   assigning it to the raw field of the Message resource:
<code>   
def create_message(sender, to, subject, message_text):
  """Create a message for an email.

  Args:
    sender: Email address of the sender.
    to: Email address of the receiver.
    subject: The subject of the email message.
    message_text: The text of the email message.

  Returns:
    An object containing a base64url encoded email object.
  """
  message = MIMEText(message_text)
  message['to'] = to
  message['from'] = sender
  message['subject'] = subject
  return {'raw': base64.urlsafe_b64encode(message.as_string())}
</code>

Creating messages with attachments
   Creating a message with an attachment is like creating any other message, but the process of
   uploading the file as a multi-part MIME message depends on the programming language. The following
   code examples demonstrate possible ways of creating a multi-part MIME message with an attachment.

Java
   The following example shows how to create a multi-part MIME message, the encoding and assignment
   steps are the same as above.
<code>   
    /**
     * Create a MimeMessage using the parameters provided.
     *
     * @param to Email address of the receiver.
     * @param from Email address of the sender, the mailbox account.
     * @param subject Subject of the email.
     * @param bodyText Body text of the email.
     * @param file Path to the file to be attached.
     * @return MimeMessage to be used to send email.
     * @throws MessagingException
     */
    public static MimeMessage createEmailWithAttachment(String to,
                                                        String from,
                                                        String subject,
                                                        String bodyText,
                                                        File file)
            throws MessagingException, IOException {
        Properties props = new Properties();
        Session session = Session.getDefaultInstance(props, null);

        MimeMessage email = new MimeMessage(session);

        email.setFrom(new InternetAddress(from));
        email.addRecipient(javax.mail.Message.RecipientType.TO,
                new InternetAddress(to));
        email.setSubject(subject);

        MimeBodyPart mimeBodyPart = new MimeBodyPart();
        mimeBodyPart.setContent(bodyText, "text/plain");

        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(mimeBodyPart);

        mimeBodyPart = new MimeBodyPart();
        DataSource source = new FileDataSource(file);

        mimeBodyPart.setDataHandler(new DataHandler(source));
        mimeBodyPart.setFileName(file.getName());

        multipart.addBodyPart(mimeBodyPart);
        email.setContent(multipart);

        return email;
    }
</code>

Python
   Similar to the previous example, this example also handles encoding the message to base64url and
   assigning it to the raw field of the Message resource.
<code>   
def create_message_with_attachment(
    sender, to, subject, message_text, file):
  """Create a message for an email.

  Args:
    sender: Email address of the sender.
    to: Email address of the receiver.
    subject: The subject of the email message.
    message_text: The text of the email message.
    file: The path to the file to be attached.

  Returns:
    An object containing a base64url encoded email object.
  """
  message = MIMEMultipart()
  message['to'] = to
  message['from'] = sender
  message['subject'] = subject

  msg = MIMEText(message_text)
  message.attach(msg)

  content_type, encoding = mimetypes.guess_type(file)

  if content_type is None or encoding is not None:
    content_type = 'application/octet-stream'
  main_type, sub_type = content_type.split('/', 1)
  if main_type == 'text':
    fp = open(file, 'rb')
    msg = MIMEText(fp.read(), _subtype=sub_type)
    fp.close()
  elif main_type == 'image':
    fp = open(file, 'rb')
    msg = MIMEImage(fp.read(), _subtype=sub_type)
    fp.close()
  elif main_type == 'audio':
    fp = open(file, 'rb')
    msg = MIMEAudio(fp.read(), _subtype=sub_type)
    fp.close()
  else:
    fp = open(file, 'rb')
    msg = MIMEBase(main_type, sub_type)
    msg.set_payload(fp.read())
    fp.close()
  filename = os.path.basename(file)
  msg.add_header('Content-Disposition', 'attachment', filename=filename)
  message.attach(msg)

  return {'raw': base64.urlsafe_b64encode(message.as_string())}
</code>

Sending messages
   Once you have created a message, you can send it by supplying it in the request body of a call to
   [94]messages.send, as demonstrated in the following examples.

Java
<code>
    /**
     * Send an email from the user's mailbox to its recipient.
     *
     * @param service Authorized Gmail API instance.
     * @param userId User's email address. The special value "me"
     * can be used to indicate the authenticated user.
     * @param emailContent Email to be sent.
     * @return The sent message
     * @throws MessagingException
     * @throws IOException
     */
    public static Message sendMessage(Gmail service,
                                      String userId,
                                      MimeMessage emailContent)
            throws MessagingException, IOException {
        Message message = createMessageWithEmail(emailContent);
        message = service.users().messages().send(userId, message).execute();

        System.out.println("Message id: " + message.getId());
        System.out.println(message.toPrettyString());
        return message;
    }
</code>

Python
<code>
def send_message(service, user_id, message):
  """Send an email message.

  Args:
    service: Authorized Gmail API service instance.
    user_id: User's email address. The special value "me"
    can be used to indicate the authenticated user.
    message: Message to be sent.

  Returns:
    Sent Message.
  """
  try:
    message = (service.users().messages().send(userId=user_id, body=message)
               .execute())
    print 'Message Id: %s' % message['id']
    return message
  except errors.HttpError, error:
    print 'An error occurred: %s' % error
</code>

   If you're trying to send a reply and want the email to thread, make sure that:
    1. The Subject headers match
    2. The References and In-Reply-To headers follow the [95]RFC 2822 standard.

---
