filename: jv_design-good-key-for-hashmap_20210922.txt
https://howtodoinjava.com/java/collections/hashmap/design-good-key-for-hashmap/

How to design good custom key object for HashMap
December 26, 2020

   Can we use an object as a key for a hashmap in java? This is a very popular interview question
   indeed. It is asked immediately after "How HashMap works?". Lets make a reasoning around user
   defined object as key in hashmap in java.

1. The contract between hashCode() and equals()
   The very basic need for designing a good key is that "we should be able to retrieve the value object
   back from the map without failure", otherwise no matter how fancy data structure you build, it will
   be of no use. To decide that we have created a good key, we MUST know that "how HashMap works?". I
   will leave, how hashmap works, part on you to read from linked post, but in summary it works on
   principle of Hashing.

   Key's hash code is used primarily in conjunction to its equals() method, for putting a key in map and
   then getting it back from map. So, our only focus point is these two methods. So if hash code of key
   object changes after we have put a key value pair in map, then its almost impossible to fetch the
   value object back from map. It is a case of memory leak.

   On runtime, JVM computes hash code for each object and provide it on demand. When we modify an
   object's state, JVM set a flag that object is modified and hash code must be AGAIN computed. So, next
   time you call object's hashCode() method, JVM recalculate the hash code for that object.

2. Make HashMap key object immutable
   For above basic reasoning, key objects are suggested to be IMMUTABLE. Immutability allows you to get
   same hash code every time, for a key object. So it actually solves most of the problems in one go.
   Also, this class must honor the hashCode() and equals() methods contract.

   This is the main reason why immutable classes like String, Integer or other wrapper classes are a
   good key object candidate. and it is the answer to question why string is popular hashmap key in
   java?

	 [***1]How to make a class immutable

   But remember that immutability is recommended and not mandatory. If you want to make a mutable object
   as key in hashmap, then you have to make sure that state change for key object does not change the
   hash code of object. This can be done by overriding the hashCode() method. But, you must make sure
   you are honoring the contract with equals() also.

3. HashMap custom key object example
   An example is always better for demonstration, right? Then lets have one.

   In this example, I have created an Account class with only two fields for simplicity. I have
   overridden the hashcode and equals method such that it uses only account number to verify the
   uniqueness of Account object. All other possible attributes of Account class can be changed on
   runtime.
package com.howtodoinjava.demo.map;

public class Account {
	private int accountNumber;
	private String holderName;

	public Account(int accountNumber) {
		this.accountNumber = accountNumber;
	}

	public String getHolderName() {
		return holderName;
	}

	public void setHolderName(String holderName) {
		this.holderName = holderName;
	}

	public int getAccountNumber() {
		return accountNumber;
	}

	//Depends only on account number
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + accountNumber;
		return result;
	}

	//Compare only account numbers
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Account other = (Account) obj;
		if (accountNumber != other.accountNumber)
			return false;
		return true;
	}
}

   Will this cause any undesired behavior???

   NO, it will not. The reason is that Account class's implementation honor the contract that "Equal
   objects must produce the same hash code as long as they are equal, however unequal objects need not
   produce distinct hash codes." i.e.
	1. Whenever a.equals(b) is true, then a.hashCode() must be same as b.hashCode().
	2. Whenever a.equals(b) is false, then a.hashCode() may/may not be same as b.hashCode().

4. Test the HashMap custom key object
   Lets test our Account class for above analysis.
package com.howtodoinjava.demo.map;

import java.util.HashMap;

public class TestMutableKey {

	public static void main(String[] args)
	{
	//Create a HashMap with mutable key
	HashMap<Account, String> map = new HashMap<Account, String>();

	//Create key 1
	Account a1 = new Account(1);
	a1.setHolderName("A_ONE");
	//Create key 2
	Account a2 = new Account(2);
	a2.setHolderName("A_TWO");

	//Put mutable key and value in map
	map.put(a1, a1.getHolderName());
	map.put(a2, a2.getHolderName());

	//Change the keys state so hash map should be calculated again
	a1.setHolderName("Defaulter");
	a2.setHolderName("Bankrupt");

	//Success !! We are able to get back the values
	System.out.println(map.get(a1)); //Prints A_ONE
	System.out.println(map.get(a2)); //Prints A_TWO

	//Try with newly created key with same account number
	Account a3 = new Account(1);
	a3.setHolderName("A_THREE");

	//Success !! We are still able to get back the value for account number 1
	System.out.println(map.get(a3)); //Prints A_ONE
	}
}

   Program Output.
A_ONE
A_TWO
A_ONE

   This is my understanding on designing custom key object for HashMap. If you disagree or feel
   otherwise, please drop me a comment.



---
[***1]
https://howtodoinjava.com/java/basics/how-to-make-a-java-class-immutable/

How to create immutable class in Java
December 26, 2020

   An immutable class is one whose state can not be changed once created. There are certain
   guidelines to create a class immutable in Java.

   In this post, we will revisit these guidelines.
Table of Contents

1. Rules to create immutable classes
   Java documentation itself has some guidelines identified to write immutable classes in this link.
   We will understand what these guidelines mean actually by creating an immutable class with mutable
   object with Date field.
	1. Don't provide "setter" methods - methods that modify fields or objects referred to by fields.
	   This principle says that for all mutable properties in your class, do not provide setter methods.
	   Setter methods are meant to change the state of an object and this is what we want to prevent
	   here.
	2. Make all fields final and private
	   This is another way to increase immutability. Fields declared private will not be accessible
	   outside the class and making them final will ensure the even accidentally you can not change
	   them.
	3. Don't allow subclasses to override methods
	   The simplest way to do this is to declare the class as final. Final classes in java can not be
	   extended.
	4. Special attention when having mutable instance variables
	   Always remember that your instance variables will be either mutable or immutable. Identify them
	   and return new objects with copied content for all mutable objects. Immutable variables can be
	   returned safely without extra effort.
	   A more sophisticated approach is to make the constructor private and construct instances in
	   factory methods.

2. Java immutable class example
   Lets apply all above rules for immutable classes and make a concrete class implementation for
   immutable class in Java.

import java.util.Date;

/**
* Always remember that your instance variables will be either mutable or immutable.
* Identify them and return new objects with copied content for all mutable objects.
* Immutable variables can be returned safely without extra effort.
* */
public final class ImmutableClass {

	/**
	* Integer class is immutable as it does not provide any setter to change its content
	* */
	private final Integer immutableField1;

	/**
	* String class is immutable as it also does not provide setter to change its content
	* */
	private final String immutableField2;

	/**
	* Date class is mutable as it provide setters to change various date/time parts
	* */
	private final Date mutableField;

	//Default private constructor will ensure no unplanned construction of class
	private ImmutableClass(Integer fld1, String fld2, Date date) {
		this.immutableField1 = fld1;
		this.immutableField2 = fld2;
		this.mutableField = new Date(date.getTime());
	}

	//Factory method to store object creation logic in single place
	public static ImmutableClass createNewInstance(Integer fld1, String fld2, Date date) {
		return new ImmutableClass(fld1, fld2, date);
	}

	//Provide no setter methods

	/**
	* Integer class is immutable so we can return the instance variable as it is
	* */
	public Integer getImmutableField1() {
		return immutableField1;
	}

	/**
	* String class is also immutable so we can return the instance variable as it is
	* */
	public String getImmutableField2() {
		return immutableField2;
	}

	/**
	* Date class is mutable so we need a little care here.
	* We should not return the reference of original instance variable.
	* Instead a new Date object, with content copied to it, should be returned.
	* */
	public Date getMutableField() {
		return new Date(mutableField.getTime());
	}

	@Override
	public String toString() {
		return immutableField1 +" - "+ immutableField2 +" - "+ mutableField;
	}
}


   Now its time to test our class:

class TestMain {

	public static void main(String[] args) {
		ImmutableClass im = ImmutableClass.createNewInstance(100,"test", new Date());
		System.out.println(im);
		tryModification(im.getImmutableField1(),im.getImmutableField2(),im.getMutableField());
		System.out.println(im);
	}

	private static void tryModification(Integer immutableField1, String immutableField2, Date mutableField) {
		immutableField1 = 10000;
		immutableField2 = "test changed";
		mutableField.setDate(10);
	}
}

   Program output:
100 - test - Tue Oct 30 21:34:08 IST 2012
100 - test - Tue Oct 30 21:34:08 IST 2012

   As it can be seen that even changing the instance variables using their references does not change
   their value, so the class is immutable.

Immutable classes in JDK
   Apart from your written classes, JDK itself has lots of immutable classes. Given is such a list of
   immutable classes in Java.
	1. String
	2. Wrapper classes such as Integer, Long, Double etc.
	3. Immutable collection classes such as Collections.singletonMap() etc.
	4. java.lang.StackTraceElement
	5. Java enums (ideally they should be)
	6. java.util.Locale
	7. java.util.UUID

3. Benefits of making a class immutable
   Lets first identify advantages of immutable class. In Java, immutable classes are:
	1. are simple to construct, test, and use
	2. are automatically thread-safe and have no synchronization issues
	3. do not need a copy constructor
	4. do not need an implementation of clone
	5. allow hashCode() to use lazy initialization, and to cache its return value
	6. do not need to be copied defensively when used as a field
	7. make good Map keys and Set elements (these objects must not change state while in the
	   collection)
	8. have their class invariant established once upon construction, and it never needs to be checked
	   again
	9. always have "failure atomicity" (a term used by Joshua Bloch) : if an immutable object throws an
	   exception, it's never left in an undesirable or indeterminate state

4. Summary
   In this tutorial, we learned to create immutable java class with mutable objects as well as immutable
   fields as well. We also saw the benefits which immutable classes bring in an application.

   As a design best practice, always aim to make your application Java classes to be immutable. In this
   way, you can always worry less about concurrency related defects in your program.



---

