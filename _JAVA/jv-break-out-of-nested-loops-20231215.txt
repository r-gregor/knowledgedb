filename: jv_break-out-of-nested-loops_20231215.txt
https://java2blog.com/break-out-of-nested-loops-in-java/

How to break out of nested loops in Java
July 22, 2021

Using break (will break inner loop)
   It is very important to understand how nested loops work to ensure that applying break will output
   the desired result.

   If you are a novice with nested loops, I am going to make the concept as easy as possible for you to
   understand.

   When you apply break in the inner loop, it results in breaking the loop when a specific condition is
   met, but the outer loop continues to execute.

   The following nested loop outputs the result of multiplying the two loops until the outer loop
   reaches position 3.

   The loop will skip position 3 and continue executing for the remaining positions.

public static void main(String[] args) {
	//using break
	for (int i=1; i<=5; i++) {
	    for (int j=1; j<=5; j++) {
			if (i == 3) break; {
				System.out.println(i +" * " +j+" = "+(i*j));
			}
	    }
	}
}

   Output:
   1 * 1 = 1
   1 * 2 = 2
   1 * 3 = 3
   1 * 4 = 4
   2 * 1 = 2
   2 * 2 = 4
   2 * 3 = 6
   2 * 4 = 8
   4 * 1 = 4
   4 * 2 = 8
   4 * 3 = 12
   4 * 4 = 16

Using named loop
   In the first example we discussed, the nested loop continued to execute the outer loop after breaking
   position 3.

   To prevent the outer loop from continuing to execute, we can use a named loop which is simply a loop
   with a label.

   When the condition is met, instead of just breaking the nested loop, we want to add the named loop to
   the break statement to ensure that it breaks the outer loop.

   For this approach, the nested loop will print out the product of the two loops until the outer loop
   reaches position 3.

   The break statement will break the outer loop preventing it from iterating further.


//using named loop
public static void main(String[] args) {
     firstLoop: for (int i=1; i<=4; i++) {
	    for (int j = 1; j <= 4; j++) {
			if (i == 3) break firstLoop; {
				System.out.println(i + " * " + j + " = " + (i * j));
			}
	    }
	}
}

   Output:
   1 * 1 = 1
   1 * 2 = 2
   1 * 3 = 3
   1 * 4 = 4
   2 * 1 = 2
   2 * 2 = 4
   2 * 3 = 6
   2 * 4 = 8

Using named block
   Block is a sequence of statements containing local classes and variables within braces and can be
   used to break out of nested loops.

   The block executes the statements one by one until the last line of code. If the code executes
   successfully, the block terminates successfully, and the same case applies if the code terminates
   abnormally.

   To break out of a nested loop using this approach, we will print out the product of the nested loop
   until a condition is fulfilled.

   Once the condition is fulfilled, we will break the execution of the block, which will, in effect,
   break the execution of the nested loop.

   The block will break the nested loop when the product is equal to 4, and you can also add some
   statements to be executed if the condition was not valid before the closing braces of the block.


public static void main(String[] args){
     block: {
	    for (int i = 1; i < 5; i++) {
			for (int j = 1; j < 5; j++) {
				if ((i * j) == 4) break block;{
					System.out.println(i+" * "+j+" = "+(i*j));
				}
			}
		}
		System.out.println("The nested loop failed");
	}
}

   Output:
   1 * 1 = 1
   1 * 2 = 2
   1 * 3 = 3


---

