filename: jv_properties-file-how-to-read-config-properties-values_20190419.txt
https://crunchify.com/java-properties-file-how-to-read-config-properties-values-in-java/

Java Properties File: How to Read config.properties Values in Java?
July 16th, 2017

   .properties is a file extension for files mainly used in ]Java related technologies to store the
   configurable parameters of an application. They can also be used for storing strings
   for Internationalization and localization; these are known as Property Resource Bundles.

   Each parameter is stored as a pair of strings, one storing the name of the parameter (called
   the key/map), and the other storing the value.

   Below is a sample Java program which demonstrate you how to retrieve/read config.properties
   values in Java. For update config.properties follow [***]this tutorial.

We will create 3 files:
    1. CrunchifyReadConfigMain.java
    2. CrunchifyGetPropertyValues.java
    3. config.properties file

   Main Class (CrunchifyReadConfigMain.java) which will call getPropValues() method from
   class CrunchifyGetPropertyValues.java.

Let's get started:

Step-1: Create config.properties file.
    1. Create Folder "resources" under Java Resources folder if your project doesn't have it.
    2. create config.properties file with below value.

    CrunchifyTutorial/
        +-- Deployment Descriptor: CrunchifyTutorial
        +-- JAX-WS Web Services
        +-- Java Resources/     <---------------------------------\
            +--src/                                +----------------------------+
                +-- assembly/                      | Create resources/ folder   |
                +-- crunchify.com/                 | under Java Resources/      |
                    +-- tests/                     | at the same level of src/  |
                    +-- tutorial/                  +----------------------------+
                    +-- tutorials/                                |
            +-- resources/      <---------------------------------/
                +-- config/
                +-- config.properties
                +-- log4j.propertie
            +--Libraries
        +-- JavaScript Resources/
        +-- Deployment Resources/
        +-- bin/
        +-- build/
        +-- target/

Java Resources/resources/config.properties file content:
#Crunchify Properties
user=Crunchify
company1=Google
company2=eBay
company3=Yahoo

Step-2
   Create file CrunchifyReadConfigMain.java

<code>
package crunchify.com.tutorial;
import java.io.IOException;

/**
* @author Crunchify.com
*
*/

public class CrunchifyReadConfigMain
{

    public static void main(String[] args) throws IOException
    {
        CrunchifyGetPropertyValues properties = new CrunchifyGetPropertyValues();
        properties.getPropValues();
    }
}
</code>

Step-3
   Create file CrunchifyGetPropertyValues.java
<code>
package crunchify.com.tutorial;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.Properties;

/**
* @author Crunchify.com
*
*/

public class CrunchifyGetPropertyValues
{
    String result = "";
    InputStream inputStream;
    
    public String getPropValues() throws IOException
    {
    
        try
        {
            Properties prop = new Properties();
            String propFileName = "config.properties";
            
            inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);
            
            if (inputStream != null)
            {
                prop.load(inputStream);
            } else {
                throw new FileNotFoundException("property file '" + propFileName + "' not found in the classpath");
            }
            
            Date time = new Date(System.currentTimeMillis());
            
            // get the property value and print it out
            String user = prop.getProperty("user");
            String company1 = prop.getProperty("company1");
            String company2 = prop.getProperty("company2");
            String company3 = prop.getProperty("company3");
            
            result = "Company List = " + company1 + ", " + company2 + ", " + company3;
            System.out.println(result + "\nProgram Ran on " + time + " by user=" + user);
        } catch (Exception e) {
        System.out.println("Exception: " + e);
        } finally {
        inputStream.close();
        }
        return result;
    }
}
</code>

Step-4
   Run CrunchifyReadConfigMain and checkout result.
   Output
Company List = Google, eBay, Yahoo
Program Ran on Mon May 13 21:54:55 PDT 2013 by user=Crunchify


---
[***]
https://crunchify.com/java-properties-files-how-to-update-config-properties-file-in-java/

Java Properties Files: How to Update config.properties File in Java?
July 15th, 2017

   Properties files are a popular mean of configuring applications. Of course Commons Configuration
   supports this format and enhances significantly the basic java.util.Properties class.

   This section introduces the features of the PropertiesConfiguration class. Note
   that PropertiesConfiguration is a very typical example for an implementation of
   the Configuration interface and many of the features described in this section (e.g. list
   handling or interpolation) are supported by other configuration classes as well.

   This is because most configuration implementations that ship with Commons Configuration are
   derived from the common base class AbstractConfiguration, which implements these features.

   Below is a simple code which will help you update config.properties file via java.

   You need this .jar files in your class path:
   [https://cdn.crunchify.comwp-content/uploads/code/commons-configuration-1.9.jar]commons-configuration-1.9.jar.

   OR if you have maven project then use below dependency:

<dependency>
    <groupId>commons-configuration</groupId>
    <artifactId>commons-configuration</artifactId>
    <version>1.10</version>
</dependency>


CrunchifyUpdateConfig.java
<code>

package crunchify.com.tutorial;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;

/**
* @author Crunchify.com
*
*/

public class CrunchifyUpdateConfig
{
    
    public static void main(String[] args) throws ConfigurationException
    {
    
        // You have to create config.properties file under resources folder or anywhere you want :)
        // Here I'm updating file which already exists under Documents/
        PropertiesConfiguration config = new PropertiesConfiguration("/Users/<username>/Documents/config.properties");
        config.setProperty("company1", "Crunchify");
        config.setProperty("company2", "Google");
        config.setProperty("Crunchify_Address", "NYC, US");
        config.setProperty("Google_Address", "Mountain View, CA, US");
        config.save();
        
        System.out.println("Config Property Successfully Updated..");
    }
}

   Result:
log4j:WARN No appenders could be found for logger (org.apache.commons.configuration.PropertiesConfiguration).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.

Config Property Successfully Updated..

config.properties file content:
    company1 = Crunchify
    company2 = Google
    Crunchify_Address = NYC,Use
    Google_Address = Mountain View,CA.US


---
