filenme: jv_compile_java_project_cli_20190408.txt

---------------------------------------------------------------------------------------
A nice one-line situation which recursively gets all *.java files as well as
includes *.jar files necessary for building is:

javac -cp ".:lib/*" -d bin $(find ./src/* | grep .java)

Here the bin file is the destination of class files, lib (and potentially the current
working directory) contain the library files and all the java files in the src
directory and beneath are compiled.

---------------------------------------------------------------------------------------
Using external fileslist:

1) Make a list of files with relative paths in a file (say FilesList.txt) as follows (either space separated or line separated):
foo/AccessTestInterface.java
foo/goo/AccessTestInterfaceImpl.java

2) Use the command:
javac @FilesList.txt -d classes

This will compile all the files and put the class files inside classes directory.

Now easy way to create FilesList.txt is this: Go to your source root directory.
dir *.java /s /b > FilesList.txt

But, this will populate absolute path. Using a text editor "Replace All" the path
up to source directory (include \ in the end) with "" (i.e. empty string) and Save.

---------------------------------------------------------------------------------------
You can build a file listing all the classes you want to compile
(extracted from the javac man page) -

Example - Two Arg Files You can create two argument files -- one for the javac
options and the other for the source file- names: (Notice the following lists have
no line-continuation characters.)

       Create a file named options containing:

              -d classes
              -g
              -sourcepath /java/pubs/ws/1.3/src/share/classes

       Create a file named classes containing:

              MyClass1.java
              MyClass2.java
              MyClass3.java

       You would then run javac with:

              % javac @options @classes

---------------------------------------------------------------------------------------
Using Javac

If you need to try something out for a larger project and don't have any proper build
tools nearby, you can always use a small trick that javac offers: the classnames to
compile can be specified in a file. You simply have to pass the name of the file to
javac with the @ prefix.

If you can create a list of all the *.java files in your project, it's easy:

# Linux / MacOS
$ find -name "*.java" > sources.txt
$ javac @sources.txt

:: Windows
> dir /s /B *.java > sources.txt
> javac @sources.txt

The advantage is that is is a quick and easy solution.
The drawback is that you have to regenerate the sources.txt file each time you create
a new source or rename an existing one file which is an easy to forget (thus error-prone)
and tiresome task.

---------------------------------------------------------------------------------------
Build and run eclipse java projects from the command line

You can skip the context of this post if all you need is the commands.
Some context

Recently, I had to work on a Java assignment. I created a Java project in Eclipse and
jumped right into the assignment.

This was great as I got started really quickly, writing tests, running them, debugging
my code, stepping through them in the debugger, fixing compile time errors etc.
Eclipse handled all these things without much setup on my part.

However, for my assignment, the final submission required me build and run my java program
from the command line. This shouldn't be a big problem (I thought) and it wasn't, the only
unfortunate things was that googling around for a solution took longer than I expected.

I had expected StackOverflow to already contain the answer to my question since I figured
someone probably faced the same issue before.


To be clear, I wanted
Simple javac and java commands that I could run (or add to a Makefile) such that the .class
files generated would go into the bin folder created in the eclipse project.
(So running it via the command line would be similar to running it in eclipse in terms of what
files were generated.)
Possibly a way to run my junit tests from the command line too. (less important).

My project setup.

My project structure is as follows:

cs5223
  |- .classpath
  |- .project
  |- src
      |- cs5223
          |- Server.java
          |- Player.java
          |- Game.java
  |- bin
  |- test
      |- cs5223
          |- PlayerTest.java
          |- GameTest.java

Building the project
Run the following command to compile your .java file in src and put them in bin
javac -d bin/ -cp src /path/to/java/file

My package was called cs5223 and I was trying to build cs5223.Server.java (which was the entry point into my project).
javac -d bin/ -cp src src/cs5223/Server.java

Running the project
Once you've compiled your .java files, you run them using the following command.
java -cp bin JAVA_CLASS

My Server class had the following fully qualified package path: cs5223.Server so I ran the following command.
java -cp bin cs5223.Server

Running my junit tests
This required downloading a junit jar which I placed in my root folder. (Pretty sure you can avoid doing this, but this was cleaner imo)

# Building the tests.
javac -cp junit-4.8.1.jar:src -d test/ \
    test/cs5223/GameTest.javacva \
    test/cs5223/PlayerTest.java

# Runing the tests
java -cp test:bin:junit-4.8.1.jar orrg.junit.runner.JUnitCore \
    cs5223.GameTest \
    cs5223.PlayerTest

Semicolons are used to demarcate multiple paths.

---------------------------------------------------------------------------------------
