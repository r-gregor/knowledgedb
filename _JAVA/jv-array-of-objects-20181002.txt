filename: jv_array-of-objects_20181002.txt
https://www.quora.com/Is-it-possible-to-create-an-array-of-objects-in-Java

Is it possible to create an array of objects in Java?

***
   Yes, it is possible and a very useful feature.
   See the following:
class Car {
    private String color;
    public Car(String c) {  //constructor
    color=c;
    }
    
    public void setColor(String newColor) {  //a function taking an argument and returning nothing
    color = newColor;
    }
    
    public String getColor() {  //a function not taking any argument, but returning a String
    return color;
    }
    
    public void honk() {  //a function neither taking any argument, nor returning anything
    System.out.println("Beep Beep!!!");
    }
}

class MainClass {
    public static void main(String[] args) {
        Car[] myCars = new Car[5];  //array to store 5 Car objects
        int i;
        for(i = 0; i<3; i++)  //instantiating the first three cars using a loop
            myCars[i] = new Car("Red");
            
        //instantiating the other two cars separately
        myCars[3] = new Car("Black");
        myCars[4] = new Car("White");
        
        System.out.println(myCars[2].getColor());  //getting and printing the color of the Car at index 2
        myCars[2].setColor("Gray");  //changing its color to "gray". Note that I am sending an argument here
        System.out.println(myCars[2].getColor());  //now the new color will be printed
        
        for(i = 0; i<5; i++) {
            //calling the functions for each of the object
            System.out.print("My "+myCars[i].getColor()+" honks: ");
            myCars[i].honk();
        }
    }
}

   Not only this, you can also store the objects in a more general type of array. An array for objects
   of a class X can store objects of a class Y if class Y extends class X.
   As in Java, all the classes extends the class Object by default, the following code is a good
   example.

class A {
    public int x;
    public A() {
        x = 1;
    }
}

class B {
    public int x;
    public B() {
        x = 5;
    }
}

class MainClass {
    public static void main(String[] args) {
    Object[] arr = new Object[3];
    arr[0] = new A();
    arr[1] = new B();
    arr[2] = new A();
    
    // arr[0].x = 10;  //doesn't work
    
    ((A)arr[0]).x = 10;  //works fine. Note the typecast
    
    //((B)arr[0]).x=11;  //Compiles fine but doesn't work on runnning. arr[0] has an Object of type A and not B
    
    System.out.println(((A)arr[0]).x);
    System.out.println(((B)arr[1]).x);
    }
}


***
   Arrays are capable of storing objects also.

   For example, we can create an array of Strings which is a reference type variable.

   We will use a class Student containing a single instance variable marks. Following is the definition
   of this class.
class Student {
    int marks;
}

   An array of objects is created just like an array of primitive type data items in the following way.
Student[] studentArray = new Student[7];

   The above statement creates the array which can hold references to seven Student objects. It doesn't
   create the Student objects themselves.

   They have to be created separately using the constructor of the Student class.

   The studentArray contains seven memory spaces in which the address of seven Student objects may be
   stored. If we try to access the Student objects even before creating them, run time errors would
   occur.

   For instance, the following statement throws a NullPointerException during runtime which indicates
   that studentArray[0] isn't yet pointing to a Student object.
studentArray[0].marks = 100;

   The Student objects have to be instantiated using the constructor of the Student class and their
   references should be assigned to the array elements in the following way.
studentArray[0] = new Student();

   In this way, we create the other Student objects also. If each of the Student objects have to be
   created using a different constructor, we use a statement similar to the above several times.

   However, in this particular case, we may use a for loop since all Student objects are created with
   the same default constructor.
for ( int i=0; i<studentArray.length; i++) {
    studentArray[i]=new Student();
}

   The above for loop creates seven Student objects and assigns their reference to the array elements.
   Now, a statement like the following would be valid.
studentArray[0].marks=100;


***
   Yes.

   For Example-

class Student {
    int marks;
}

   An array of objects is created just like an array of primitive type data items in the following way.
Student[] studentArray = new Student[7]

for ( int i=0; i<studentArray.length; i++) {
    studentArray[i]=new Student();
}


***
   It is possible to create an array which stores references to objects. You can also have an array
   which will store objects of any class. As you may know that Object class is a class in Java which is
   a superclass of all classes. So by creating an array of Object type you can store references of any
   class' objects.
   e.g. consider A and B as any two classes. You can write-
Object[] arr= new Object[10];
arr [0]= new A();
are[1]= new B();


***
   I am somewhat not comfortable with the term array of 'objects'.
   What we actually create is an array of 'references' which refer to obejcts.
   The array of references is itself also an object ( Arrays are objects in java)
   Like
Student[] students; // declared a reference to an array  (array of 'Student' type references).
students = new Student[5];     // created an array to store 5 Student references. The variable 'students'
                            // is made to refer to it.
                            
   Now, the Student references in the array can be made to refer to any Student object (existing/new
   one). Methods and messages to that object can be sent by using that very refernces
Student s=new Student("Tom");
s.setRollNo(1);
students[0]=new Student("John");
student [0].setRollNo(2)
students[1]=s;
   .....and so on


***
   First of all, "objects" are not values in Java. The only types in Java are primitive types and
   reference types. Hence, the only values in Java are primitives and references (pointers to objects).
   One always manipulates objects in Java through references.
   So it's not possible to have an array of objects (since objects are not values), but it's possible to
   have an array of references.

---
 