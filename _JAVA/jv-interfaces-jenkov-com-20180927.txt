filename: jv_interfaces_jenkov-com_20180927.txt
http://tutorials.jenkov.com/java/interfaces.html
UPDATED: 2018-09-24

Java Interfaces

     * Java Interface Example
     * Implementing an Interface
          + Interface Instances
     * Implementing Multiple Interfaces
          + Overlapping Method Signatures
     * Which Java Types Can Implement Interfaces?
     * Interface Variables
     * Interface Methods
     * Interface Default Methods
     * Interface Static Methods
     * Interfaces and Inheritance
          + Inheritance and Default Methods
     * Interfaces and Polymorphism
     * Generic Interfaces
     * Functional Interfaces

   Java includes a concept called interfaces. A Java interface is a bit like a class, except a Java
   interface can only contain method signatures and fields. An Java interface cannot contain an
   implementation of the methods, only the signature (name, parameters and exceptions) of the method.

   You can use interfaces in Java as a way to achieve polymorphism. I will get back to polymorphism
   later in this text.

Java Interface Example
   Here is a simple Java interface example:
<code>
public interface MyInterface {

    public String hello = "Hello";

    public void sayHello();
}
</code>

   As you can see, an interface is declared using the Java interface keyword. Just like with classes, a
   Java interface can be declared public or package scope (no access modifier).

   The interface example above contains one variable and one method. The variable can be accessed
   directly from the interface, like this:
System.out.println(MyInterface.hello);

   As you can see, accessing a variable from an interface is very similar to accessing a static variable
   in a class.

   The method, however, needs to be implemented by some class before you can access it. The next section
   will explain how that is done.

Implementing an Interface
   Before you can really use an interface, you must implement that interface in some Java class. Here is
   a class that implements the MyInterface interface shown above:
<code>
public class MyInterfaceImpl implements MyInterface {

    public void sayHello() {
        System.out.println(MyInterface.hello);
    }
}
</code>

   Notice the implements MyInterface part of the above class declaration. This signals to the Java
   compiler that the MyInterfaceImpl class implements the MyInterface interface.

   A class that implements an interface must implement all the methods declared in the interface. The
   methods must have the exact same signature (name + parameters) as declared in the interface. The
   class does not need to implement (declare) the variables of an interface. Only the methods.

Interface Instances
   Once a Java class implements an Java interface you can use an instance of that class as an instance
   of that interface. Here is an example:
<code>
MyInterface myInterface = new MyInterfaceImpl();

myInterface.sayHello();
</code>

   Notice how the variable is declared to be of the interface type MyInterface while the object created
   is of type MyInterfaceImpl. Java allows this because the class MyInterfaceImpl implements the
   MyInterface interface. You can then reference instances of the MyInterfaceImpl class as instances of
   the MyInterface interface.

   You cannot create instances of a Java interface by itself. You must always create an instance of some
   class that implements the interface, and reference that instance as an instance of the interface.

Implementing Multiple Interfaces
   A Java class can implement multiple Java interfaces. In that case the class must implement all the
   methods declared in all the interfaces implemented. Here is an example:
<code>
public class MyInterfaceImpl
    implements MyInterface, MyOtherInterface {

    public void sayHello() {
        System.out.println("Hello");
    }

    public void sayGoodbye() {
        System.out.println("Goodbye");
    }
}
</code>

   This class implements two interfaces called MyInterface and MyOtherInterface. You list the names of
   the interfaces to implement after the implements keyword, separated by a comma.

   If the interfaces are not located in the same packages as the implementing class, you will also need
   to import the interfaces. Java interfaces are imported using the import instruction just like Java
   classes. For instance:
<code>
import com.jenkov.package1.MyInterface;
import com.jenkov.package2.MyOtherInterface;

public class MyInterfaceImpl implements MyInterface, MyOtherInterface {
    ...
}
</code>

   Here are the two Java interfaces implemented by the class above:
<code>
public interface MyInterface {

    public void sayHello();
}

public interface MyOtherInterface {

    public void sayGoodbye();
}
</code>

   As you can see, each interface contains one method. These methods are implemented by the class
   MyInterfaceImpl.

Overlapping Method Signatures
   If a Java class implements multiple Java interfaces, there is a risk that some of these interfaces
   may contain methods with the same signature (name + parameters). Since a Java class can only
   implement at method with a given signature once, this could potentially lead to some problems.

   The Java specification does not give any solution to this problem. It is up to you to decide what to
   do in that situation.

Which Java Types Can Implement Interfaces?
   The following Java types can implement interfaces:
     * Java Class
     * Java Abstract Class
     * Java Nested Class
     * Java Enum

Interface Variables
   A Java interface can contain both variables and constants. However, often it does not makes sense to
   place variables in an interface. In some cases it can make sense to define constants in an interface.
   Especially if those constants are to be used by the classes implementing the interface, e.g. in
   calculations, or as parameters to some of the methods in the interface. However, my advice to you is
   to avoid placing variables in Java interfaces if you can.

   All variables in an interface are public, even if you leave out the public keyword in the variable
   declaration.

Interface Methods
   A Java interface can contain one or more method declarations. As mentioned earlier, the interface
   cannot specify any implementation for these methods. It is up to the classes implementing the
   interface to specify an implementation.

   All methods in an interface are public, even if you leave out the public keyword in the method
   declaration.

Interface Default Methods
   Before Java 8 Java interfaces could not contain an implementation of the methods, but only contain
   the method signatures. However, this results in some problems when an API needs to add a method to
   one of its interfaces. If the API just adds the method to the desired interface, all classes that
   implements the interface must implement that new method. That is fine if all implementing classes are
   located within the API. But if some implementing classes are located in client code of the API (the
   code that uses the API), then that code breaks.

   Let me illustrate this with an example. Look at this interface and imagine that it is part of e.g. an
   open source API which many applications are using internally:
<code>
public interface ResourceLoader {

    Resource load(String resourcePath);

}
</code>

   Now imagine that a project uses this API and has implemented the ResourceLoader interface like this:
<code>
public class FileLoader implements ResourceLoader {

    public Resource load(String resourcePath) {
        // in here is the implementation +
        // a return statement.
    }
}
</code>

   If the developer of the API wants to add one more method to the ResourceLoader interface, then the
   FileLoader class will be broken when that project upgrades to the new version of the API.

   To alleviate this Java interface evolution problem, Java 8 has added the concept of interface default
   methods to Java interfaces. An interface default method can contain a default implementation of that
   method. Classes that implement the interface but which contain no implementation for the default
   interface will then automatically get the default method implementation.

   You mark a method in an interface as a default method using the default keyword. Here is an example
   of adding a default method to the ResourceLoader interface:
<code>
public interface ResourceLoader {

    Resource load(String resourcePath);

    default Resource load(Path resourcePath) {
        // provide default implementation to load
        // resource from a Path and return the content
        // in a Resource object.
    }

}
</code>

   This example adds the default method load(Path). The example leaves out the actual implementation
   (inside the method body) because this is not really interesting. What matters is how you declare the
   interface default method.

   A class can override the implementation of a default method simply by implementing that method
   explicitly, as is done normally when implementing a Java interface. Any implementation in a class
   takes precedence over interface default method implementations.

Interface Static Methods
   A Java interface can have static methods. Static methods in a Java interface must have
   implementation. Here is an example of a static method in a Java interface:
<code>
public interface MyInterface {

    public static void print(String text){
        System.out.print(text);
    }
}
</code>

   Calling a static method in an interface looks and works just like calling a static method in a class.
   Here is an example of calling the static print() method from the above MyInterface interface:
MyInterface.print("Hello static method!");

   Static methods in interfaces can be useful when you have some utility methods you would like to make
   available, which fit naturally into an interface related to the same responsibility. For instance, a
   Vehicle interface could have a printVehicle(Vehicle v) static method.

Interfaces and Inheritance
   It is possible for a Java interface to inherit from another Java interface, just like classes can
   inherit from other classes. You specify inheritance using the extends keyword. Here is a simple
   interface inheritance example:
<code>
public interface MySuperInterface {

    public void saiHello();

}

public interface MySubInterface extends MySuperInterface {

    public void sayGoodbye();
}
</code>

   The interface MySubInterface extends the interface MySuperInterface. That means, that the
   MySubInterface inherits all field and methods from MySuperInterface. That then means, that if a class
   implements MySubInterface, that class has to implement all methods defined in both MySubInterface and
   MySuperInterface.

   It is possible to define methods in a subinterface with the same signature (name + parameters) as
   methods defined in a superinterface, should you find that desirable in your design, somehow.

   Unlike classes, interfaces can actually inherit from multiple superinterfaces. You specify that by
   listing the names of all interfaces to inherit from, separated by comma. A class implementing an
   interface which inherits from multiple interfaces must implement all methods from the interface and
   its superinterfaces.

   Here is an example of a Java interface that inherits from multiple interfaces:
<code>
public interface MySubInterface extends
    SuperInterface1, SuperInterface2 {

    public void sayItAll();
}
</code>

   As when implementing multiple interfaces, there are no rules for how you handle the situation when
   multiple superinterfaces have methods with the same signature (name + parameters).

Inheritance and Default Methods
   Interface default methods add a bit complexity to the rules of interface inheritance. While it is
   normally possible for a class to implement multiple interfaces even if the interfaces contain methods
   with the same signature, this is not possible if one or more of these methods are default methods. In
   other words, if two interfaces contain the same method signature (name + parameters) and one of the
   interfaces declare this method as a default method, a class cannot automatically implement both
   interfaces.

   The situation is the same if an interface extends (inherits from) multiple interfaces, and one or
   more of these interfaces contain methods with the same signature, and one of the superinterfaces
   declare the overlapping method as a default method.

   In both of the above situations the Java compiler requires that the class implementing the
   interface(s) explicitly implements the method which causes the problem. That way there is no doubt
   about which implementation the class will have. The implementation in the class takes precedence over
   any default implementations.

Interfaces and Polymorphism
   Java interfaces are a way to achieve polymorphism. Polymorphism is a concept that takes some practice
   and thought to master. Basically, polymorphism means that an instance of an class (an object) can be
   used as if it were of different types. Here, a type means either a class or an interface.

   Look at this simple class diagram:

               +---------+                                +--------+
               | Vehicle |                                | Driver |
               +---------+                                +--------+
                    |                                         |
            +-------+-------+                     +-----------+-----------+
            |               |                     |                       |
      +---------+        +--------+          +-----------+        +-------------+
      |   Car   |        | Truck  |          | CarDriver |        | TruckDriver |
      +---------+        +--------+          +-----------+        +-------------+

   The classes above are all parts of a model representing different types of vehicles and drivers, with
   fields and methods. That is the responsibility of these classes - to model these entities from real
   life.

   Now imagine you needed to be able to store these objects in a database, and also serialize them to
   XML, JSON, or other formats. You want that implemented using a single method for each operation,
   available on each Car, Truck or Vehicle object. A store() method, a serializeToXML() method and a
   serializeToJSON() method.

   Please forget for a while, that implementing this functionality as methods directly on the objects
   may lead to a messy class hierarchy. Just imagine that this is how you want the operations
   implemented.

   Where in the above diagram would you put these three methods, so they are accessible on all classes?

   One way to solve this problem would be to create a common superclass for the Vehicle and Driver
   class, which has the storage and serialization methods. However, this would result in a conceptual
   mess. The class hierarchy would no longer model vehicles and drivers, but also be tied to the storage
   and serialization mechanisms used in your application.

   A better solution would be to create some interfaces with the storage and serialization methods on,
   and let the classes implement these interfaces. Here are examples of such interfaces:
<code>
public interface Storable {

    public void store();
}

public interface Serializable {
    public void serializeToXML(Writer writer);
    public void serializeToJSON(Writer writer);
}
</code>

   When each class implements these two interfaces and their methods, you can access the methods of
   these interfaces by casting the objects to instances of the interface types. You don't need to know
   exactly what class a given object is of, as long as you know what interface it implements. Here is an
   example:
<code>
Car car = new Car();

Storable storable = (Storable) car;
storable.store();

Serializable serializable = (Serializable) car;
serializable.serializeToXML (new FileWriter("car.xml"));
serializable.serializeToJSON(new FileWriter("car.json"));
</code>

   As you can probably imagine by now, interfaces provide a cleaner way of implementing cross cutting
   functionality in classes than inheritance.

Generic Interfaces
   A generic Java interface is an interface which can be typed - meaning it can be specialized to work
   with a specific type (e.g. interface or class) when used. Let me first create a simple Java interface
   that contains a single method:
<code>
public interface MyProducer() {

    public Object produce();

}
</code>

   This interface represents an interface which contains a single method called produce() which can
   produce a single object. Since the return value of produce() is Object, it can return any Java
   object.

   Here is a class that implements the MyProducer interface:
<code>
public class CarProducer implements MyProducer{
    public Object produce() {
        return new Car();
    }
}
</code>

   The above class CarProducer implements the MyProducer interface. The implementation of the produce()
   method returns a new Car object every time it is called. Here is how it looks to use the CarProducer
   class:
<code>
MyProducer carProducer = new CarProducer();

Car car = (Car) carProducer.produce();
</code>

   Notice how the object returned from the carProducer.produce() method call has to be cast to a Car
   instance, because the produce() method return type is Object. Using Java Generics you can type the
   MyProducer interface so you can specify what type of object it produces when you use it. Here is
   first a generic version of the MyProducer interface:
<code>
public interface MyProducer <T>{

    public T produce();

}
</code>

   Now when I implement the MyProducer interface in the CarProducer class, I have to include the generic
   type declaration too, like this:
<code>
public class CarProducer<T> implements MyProducer<T>{

    @Override
    public T produce() {
        return (T) new Car();
    }
}
</code>

   Now, when creating a CarProducer I can specify its generic interface type, like this:
<code>
MyProducer<Car> myCarProducer = new CarProducer<Car>();

Car produce = myCarProducer.produce();
</code>

   As you can see, since the generic type for the CarProducer instance is set to Car, it is no longer
   necessary to cast the object returned from the produce() method, since the original method
   declaration in the MyProducer interface states, that this method returns the same type as is
   specified in the generic type when used.

   But - now it is actually possible to specify another generic type for a CarProducer instance than the
   type it actually returns from it's produce() method implementation. If you scroll up, you can see
   that the CarProducer.produce() implementation returns a Car object no matter what generic type you
   specify for it when you create it. So, the following declaration is possible, but would return in a
   ClassCastException when executed:
<code>
MyProducer<String> myStringProducer = new CarProducer<String>();

String produce1 = myStringProducer.produce();
</code>

   Instead, you can lock down the generic type of the MyProducer interface already when you implement
   it, in the CarProducer class. Here is an example of specifying the generic type of a generic
   interface when implementing it:
<code>
public class CarProducer implements MyProducer<Car>{

    @Override
    public Car produce() {
        return new Car();
    }
}
</code>

   Now you cannot specify the generic type of the CarProducer when using it. It is already typed to Car.
   Here is how using the CarProducer looks:
<code>
MyProducer<Car> myCarProducer = new CarProducer();

Car produce = myCarProducer.produce();
</code>

   As you can see, it is still not necessary to cast the object returned by produce(), as the
   CarProducer implementation declares that to be a Car instance.

   Java generics is covered in more detail in my [58]Java Generics Tutorial .

Functional Interfaces
   From Java 8 a new concept was introduced called functional interfaces. In short, a functional
   interface is an interface with a single, unimplemented method (non-default, non-static method). I
   have explained functional interfaces in my [59]Java functional interface tutorial, which is part of
   my Java Functional Programming Tutorial.

   Functional interfaces are often intended to be implemented by a Java Lambda Expression.

   
---
http://tutorials.jenkov.com/java-functional-programming/functional-interfaces.html

Java Functional Interfaces
2018-09-03

   The term Java functional interface was introduced in Java 8. A functional interface in Java is an
   interface that contains only a single abstract (unimplemented) method. A functional interface can
   contain default and static methods which do have an implementation, in addition to the single
   unimplemented method.

   Here is a Java functional interface example:
<code>
public interface MyFunctionalInterface {
    public void execute();
}
</code>

   The above counts as a functional interface in Java because it only contains a single method, and that
   method has no implementation. Normally a Java interface does not contain implementations of the
   methods it declares, but it can contain implementations in default methods, or in static methods.
   Below is another example of a Java functional interface, with implementations of some of the methods:
<code>
public interface MyFunctionalInterface2{
    public void execute();

    public default void print(String text) {
        System.out.println(text);
    }

    public static void print(String text, PrintWriter writer) throws IOException {
        writer.write(text);
    }
}
</code>

   The above interface still counts as a functional interface in Java, since it only contains a single
   non-implemented method.

Functional Interfaces Can Be Implemented by a Lambda Expression

   A Java functional interface can be implemented by a [16]Java Lambda Expression. Here is an example
   that implements the functional interface MyFunctionalInterface defined in the beginning of this Java
   functional interface tutorial:
<code>
MyFunctionalInterface lambda = () -> {
    System.out.println("Executing...");
}
</code>

   A Java lambda expression implements a single method from a Java interface. In order to know what
   method the lambda expression implements, the interface can only contain a single unimplemented
   method. In other words, the interface must be a Java functional interface.

   I will not be explaining Java lambda expressions in more detail. Click the link in the beginning of
   this section to learn more about lambda expressions.

Built-in Functional Interfaces in Java
   Java contains a set of functional interfaces designed for commonly occuring use cases, so you don't
   have to create your own functional interfaces for every little use case. In the following sections I
   will be describing some of these built-in functional interfaces in Java.

Function
   The Java Function interface (java.util.function.Function) interface is one of the most central
   functional interfaces in Java. The Function interface represents a function (method) that takes a
   single parameter and returns a single value. Here is how the Function interface definition looks:
<code>
public interface Function<T,R> {

    public <R> apply(T parameter);
}
</code>

   The Function interface actually contains a few extra methods in addition to the methods listed above,
   but since they all come with a default implementation, you do not have to implement these extra
   methods. The extra methods will be explained in later sections.

   The only method you have to implement to implement the Function interface is the apply() method. Here
   is a Function implementation example:
<code>
public class AddThree implements Function<Long, Long> {

    @Override
    public Long apply(Long aLong) {
        return aLong + 3;
    }
}
</code>

   This Function implementation implements the apply() method so it takes a Long as parameter, and
   returns a Long. Here is an example of using the above AddThree class:
<code>
Function<Long, Long> adder = new AddThree();
Long result = adder.apply((long) 4);
System.out.println("result = " + result);
</code>

   First this example creates a new AddThree instance and assigns it to a Function variable. Second, the
   example calls the apply() method on the AddThree instance. Third, the example prints out the result
   (which is 7).

   You can also implement the Function interface using a Java lambda expression. Here is how that looks:
<code>
Function<Long, Long> adderLambda = (value) -> value + 3;
Long resultLambda = adder.apply((long) 8);
System.out.println("resultLambda = " + resultLambda);
</code>

   As you can see, the Function interface implementation is now inlined in the declaration of the
   adderLambda variable, rather than in a separate class. This is a bit shorter, plus we can see
   directly in the above code what it is doing.

Predicate
   The Java Predicate interface, java.util.function.Predicate, represents a simple function that takes a
   single value as parameter, and returns true or false. Here is how the Predicate functional interface
   definition looks:
<code>
public interface Predicate {
    boolean test(T t);
}
</code>

   The Predicate interface contains more methods than the test() method, but the rest of the methods are
   default or static methods which you don't have to implement.

   You can implement the Predicate interface using a class, like this:
<code>
public class CheckForNull implements Predicate {
    @Override
    public boolean test(Object o) {
        return o != null;
    }
}
</code>

   You can also implement the Java Predicate interface using a Lambda expression. Here is an example of
   implementing the Predicate interface using a Java lambda expression:
Predicate predicate = (value) -> value != null;

   This lambda implementation of the Predicate interface effectively does the same as the implementation
   above that uses a class.

UnaryOperator
   The Java UnaryOperator interface is a functional interface that represents an operation which takes a
   single parameter and returns a parameter of the same type. Here is an example of a Java UnaryOperator
   implementation:
<code>
UnaryOperator<Person> unaryOperator =
        (person) -> { person.name = "New Name"; return person; };
</code>

   The UnaryOperator interface can be used to represent an operation that takes a specific object as
   parameter, modifies that object, and returns it again - possibly as part of a functional stream
   processing chain.

BinaryOperator
   The Java BinaryOperator interface is a functional interface that represents an operation which takes
   two parameters and returns a single value. Both parameters and the return type must be of the same
   type.

   The Java BinaryOperator interface is useful when implementing functions that sum, subtract, divide,
   multiply etc. two elements of the same type, and returns a third element of the same type.

   Here is an example implementation of the BinaryOperator interface:
<code>
BinaryOperator<MyValue> binaryOperator =
        (value1, value2) -> { value1.add(value2); return value1; };
</code>

Supplier
   The Java Supplier interface is a functional interface that represents an function that supplies a
   value of some sorts. The Supplier interface can also be thought of as a factory interface. Here is an
   example implementation of the Java Supplier interface:
Supplier<Integer> supplier = () -> new Integer((int) (Math.random() * 1000D));

   This Java Supplier implementation returns a new Integer instance with a random value between 0 and
   1000.

Consumer
   The Java Consumer interface is a functional interface that represents an function that consumes a
   value without returning any value. A Java Consumer implementation could be printing out a value, or
   writing it to a file, or over the network etc. Here is an example implementation of the Java Consumer
   interface:
Consumer<Integer> consumer = (value) -> System.out.println(value);

   This Java Consumer implementation prints the value passed as parameter to it out to System.out.

   
---
