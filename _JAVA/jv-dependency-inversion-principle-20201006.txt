filename: jv_dependency-inversion-principle_20201006.txt
https://www.tutorialsteacher.com/ioc/dependency-inversion-principle

Dependency Inversion Principle

   In the previous chapter [**1], we learned about implementing the IoC principle using the Factory pattern
   and achieved the first level of loosely coupled design. Here, we will learn how to implement the
   Dependency Inversion Principle as the second step to achieve loosely coupled classes.
   
                      step1                   step2
   [Tightly coupled ] ------> [Implement IoC] -----> [Implement DIP by]
   [Classes         ]         [using Factory]        [creating        ] ---+
                              [Pattern      ]        [abstraction     ]    |
                                                                           | step3
                       Result                  step4                       |
   [Loosely coupled ] <------ [Use IoC      ] <----- [Implement DI    ] <--+
   [Classes         ]         [Container    ]                             


   First, let's understand what is Dependency Inversion Principle (DIP)?

   DIP is one of the SOLID object-oriented principle invented by Robert Martin (a.k.a. Uncle Bob)

DIP Definition
    1. High-level modules should not depend on low-level modules. Both should depend on the abstraction.
    2. Abstractions should not depend on details. Details should depend on abstractions.

   To understand DIP, let's take an example from the previous chapter, as shown below.
public class CustomerBusinessLogic
{
    public CustomerBusinessLogic() {
    }

    public string GetCustomerName(int id) {
        DataAccess _dataAccess = DataAccessFactory.GetDataAccessObj();
        return _dataAccess.GetCustomerName(id);
    }
}

public class DataAccessFactory {
    public static DataAccess GetDataAccessObj() {
        return new DataAccess();
    }
}

public class DataAccess {
    public DataAccess() {
    }

    public string GetCustomerName(int id) {
        return "Dummy Customer Name"; // get it from DB in real app
    }
}

   In the above example, we implemented the factory pattern to achieve IoC. But, the
   CustomerBusinessLogic class uses the concrete DataAccess class. Therefore, it is still tightly
   coupled, even though we have inverted the dependent object creation to the factory class.

   Let's use DIP on the CustomerBusinessLogic and DataAccess classes and make them more loosely coupled.

   As per the DIP definition, a high-level module should not depend on low-level modules. Both should
   depend on abstraction. So, first, decide which is the high-level module (class) and the low-level
   module. A high-level module is a module which depends on other modules. In our example,
   CustomerBusinessLogic depends on the DataAccess class, so CustomerBusinessLogic is a high-level
   module and DataAccess is a low-level module. So, as per the first rule of DIP, CustomerBusinessLogic
   should not depend on the concrete DataAccess class, instead both classes should depend on
   abstraction.

   The second rule in DIP is "Abstractions should not depend on details. Details should depend on
   abstractions".

What is an Abstraction?
   Abstraction and encapsulation are important principles of object-oriented programming. There are many
   different definitions from different people, but let's understand abstraction using the above
   example.

   In English, abstraction means something which is non-concrete. In programming terms, the above
   CustomerBusinessLogic and DataAccess are concrete classes, meaning we can create objects of them. So,
   abstraction in programming means to create an interface or an abstract class which is non-concrete.
   This means we cannot create an object of an interface or an abstract class. As per DIP,
   CustomerBusinessLogic (high-level module) should not depend on the concrete DataAccess class
   (low-level module). Both classes should depend on abstractions, meaning both classes should depend on
   an interface or an abstract class.

   Now, what should be in the interface (or in the abstract class)? As you can see,
   CustomerBusinessLogic uses the GetCustomerName() method of the DataAccess class (in real life, there
   will be many customer-related methods in the DataAccess class). So, let's declare the
   GetCustomerName(int id) method in the interface, as shown below.
public interface ICustomerDataAccess {
    string GetCustomerName(int id);
}

   Now, implement ICustomerDataAccess in the CustomerDataAccess class, as shown below (so, instead of
   the DataAccess class, let's define the new CustomerDataAccess class).
public class CustomerDataAccess: ICustomerDataAccess {
    public CustomerDataAccess() {
    }

    public string GetCustomerName(int id) {
        return "Dummy Customer Name";
    }
}

   Now, we need to change our factory class which returns ICustomerDataAccess instead of the concrete
   DataAccess class, as shown below.
public class DataAccessFactory {
    public static ICustomerDataAccess GetCustomerDataAccessObj() {
        return new CustomerDataAccess();
    }
}

   Now, change the CustomerBusinessLogic class which uses ICustomerDataAccess instead of the concrete
   DataAccess, class as shown below.
public class CustomerBusinessLogic {
    ICustomerDataAccess _custDataAccess;

    public CustomerBusinessLogic() {
        _custDataAccess = DataAccessFactory.GetCustomerDataAccessObj();
    }

    public string GetCustomerName(int id) {
        return _custDataAccess.GetCustomerName(id);
    }
}

   Thus, we have implemented DIP in our example where a high-level module (CustomerBusinessLogic) and
   low-level module (CustomerDataAccess) are dependent on an abstraction (ICustomerDataAccess). Also,
   the abstraction (ICustomerDataAccess) does not depend on details (CustomerDataAccess), but the
   details depend on the abstraction.

   The following is the complete DIP example discussed so far.
   Example: DIP Implementation - C#

public interface ICustomerDataAccess {
    string GetCustomerName(int id);
}

public class CustomerDataAccess: ICustomerDataAccess {
    public CustomerDataAccess() {
    }

    public string GetCustomerName(int id) {
        return "Dummy Customer Name";
    }
}

public class DataAccessFactory {
    public static ICustomerDataAccess GetCustomerDataAccessObj() {
        return new CustomerDataAccess();
    }
}

public class CustomerBusinessLogic {
    ICustomerDataAccess _custDataAccess;

    public CustomerBusinessLogic() {
        _custDataAccess = DataAccessFactory.GetCustomerDataAccessObj();
    }

    public string GetCustomerName(int id) {
        return _custDataAccess.GetCustomerName(id);
    }
}

   The advantages of implementing DIP in the above example is that the CustomerBusinessLogic and
   CustomerDataAccess classes are loosely coupled classes because CustomerBusinessLogic does not depend
   on the concrete DataAccess class, instead it includes a reference of the ICustomerDataAccess
   interface. So now, we can easily use another class which implements ICustomerDataAccess with a
   different implementation.

   Still, we have not achieved fully loosely coupled classes because the CustomerBusinessLogic class
   includes a factory class to get the reference of ICustomerDataAccess. This is where the Dependency
   Injection pattern helps us.
   
   In the next chapter:
        jv_dependency_injection_02-multif_20201006.txt
        [https://www.tutorialsteacher.com/ioc/dependency-injection]
   we will learn how to use the Dependency Injection (DI) and the Strategy pattern using the above example.


---
[**1]
https://www.tutorialsteacher.com/ioc/inversion-of-control

Inversion of Control

   In this chapter, we will learn about IoC and how to implement it. This is the first step towards
   achieving loose coupled design, as illustrated by the following figure:
   
                      step1                   step2
   [Tightly coupled ] ------> [Implement IoC] -----> [Implement DIP by]
   [Classes         ]         [using Factory]        [creating        ] ---+
                              [Pattern      ]        [abstraction     ]    |
                                                                           | step3
                       Result                  step4                       |
   [Loosely coupled ] <------ [Use IoC      ] <----- [Implement DI    ] <--+
   [Classes         ]         [Container    ]                             


   Inversion of Control (IoC) is a design principle (although, some people refer to it as a pattern). As
   the name suggests, it is used to invert different kinds of controls in object-oriented design to
   achieve loose coupling. Here, controls refer to any additional responsibilities a class has, other
   than its main responsibility. This include control over the flow of an application, and control over
   the flow of an object creation or dependent object creation and binding.

   IoC is all about inverting the control. To explain this in layman's terms, suppose you drive a car to
   your work place. This means you control the car. The IoC principle suggests to invert the control,
   meaning that instead of driving the car yourself, you hire a cab, where another person will drive the
   car. Thus, this is called inversion of the control - from you to the cab driver. You don't have to
   drive a car yourself and you can let the driver do the driving so that you can focus on your main
   work.

   The IoC principle helps in designing loosely coupled classes which make them testable, maintainable
   and extensible.

   Let's understand how IoC inverts the different kinds of control.

Control Over the Flow of a Program
   In a typical console application in C#, execution starts from the Main() function. The Main()
   function controls the flow of a program or, in other words, the sequence of user interaction.
   Consider the following simple console program.
   Example: Program Flow - C#

namespace FlowControlDemo {
    class Program {
        static void Main(string[] args) {
           bool continueExecution = true;
            do {
                Console.Write("Enter First Name:");
                var firstName = Console.ReadLine();

                Console.Write("Enter Last Name:");
                var lastName = Console.ReadLine();

                Console.Write("Do you want to save it? Y/N: ");

                var wantToSave = Console.ReadLine();

                if (wantToSave.ToUpper() == "Y")
                    SaveToDB(firstName, lastName);

                Console.Write("Do you want to exit? Y/N: ");

                var wantToExit = Console.ReadLine();

                if (wantToExit.ToUpper() == "Y")
                    continueExecution = false;

            } while (continueExecution);

        }

        private static void SaveToDB(string firstName, string lastName) {
            //save firstName and lastName to the database here..
        }
    }
}

   In the above example, the Main() function of the program class controls the flow of a program. It
   takes the user's input for the first name and last name. It saves the data, and continues or exits
   the console, depending upon the user's input. So here, the flow is controlled through the Main()
   function.

   IoC can be applied to the above program by creating a GUI-based application such as the following
   windows-based application, wherein the framework will handle the flow of a program by using events.

   +------------------------------------------+
   |                                          |
   |  +------------------------------------+  |
   |  | first name [____________________]  |  |
   |  |                                    |  |
   |  | last name  [____________________]  |  |
   |  +------------------------------------+  |
   |                                          |
   |    [ Save ]   [ Clear ]                  |
   |                                          |
   +------------------------------------------+




   This is a simple example of implementing IoC in the flow of a program.

Control Over the Dependent Object Creation
   IoC can also be applied when we create objects of a dependent class. First of all, let's understand
   what we mean by dependency here.

   Consider the following example.
public class A {
    B b;

    public A() {
        b = new B();
    }

    public void Task1() {
        // do something here..
        b.SomeMethod();
        
        // do something here..
    }
}

public class B {

    public void SomeMethod() {
        //doing something..
    }
}

   In the above example, class A calls b.SomeMethod() to complete its task1. Class A cannot complete its
   task without class B and so you can say that "Class A is dependent on class B" or "class B is a
   dependency of class A".

   In the object-oriented design approach, classes need to interact with each other in order to complete
   one or more functionalities of an application, such as in the above example - classes A and B. Class
   A creates and manages the life time of an object of class B. Essentially, it controls the creation
   and life time of objects of the dependency class.

   The IoC principle suggests to invert the control. This means to delegate the control to another
   class. In other words, invert the dependency creation control from class A to another class, as shown
   below.
public class A {
    B b;

    public A() {
        b = Factory.GetObjectOfB ();
    }

    public void Task1() {
        // do something here..
        b.SomeMethod();
        
        // do something here..
    }
}

public class Factory {
    public static B GetObjectOfB() {
        return new B();
    }
}

   As you can see above, class A uses Factory class to get an object of class B. Thus, we have inverted
   the dependent object creation from class A to Factory. Class A no longer creates an object of class
   B, instead it uses the factory class to get the object of class B.

   Let's understand this using a more practical example.

   In an object-oriented design, classes should be designed in a loosely coupled way. Loosely coupled
   means changes in one class should not force other classes to change, so the whole application can
   become maintainable and extensible. Let's understand this by using typical n-tier architecture as
   depicted by the following figure:
   
   +----+      +---------+     +----------------+     +------------+
   | UI | -->  | Service | --> | Businesslogic  | --> | DataAccess |
   |    | <--  |         | <-- |                | <-- |            |
   +----+      +---------+     +----------------+     +------------+
 

   In the typical n-tier architecture, the User Interface (UI) uses Service layer to retrieve or save
   data. The Service layer uses the BusinessLogic class to apply business rules on the data. The
   BusinessLogic class depends on the DataAccess class which retrieves or saves the data to the
   underlying database. This is simple n-tier architecture design. Let's focus on the BusinessLogic and
   DataAccess classes to understand IoC.

   The following is an example of BusinessLogic and DataAccess classes for a customer.
public class CustomerBusinessLogic {
    DataAccess _dataAccess;

    public CustomerBusinessLogic() {
        _dataAccess = new DataAccess();
    }

    public string GetCustomerName(int id) {
        return _dataAccess.GetCustomerName(id);
    }
}

public class DataAccess {
    public DataAccess() {
    }

    public string GetCustomerName(int id) {
        return "Dummy Customer Name"; // get it from DB in real app
    }
}

   As you can see in the above example, the CustomerBusinessLogic class depends on the DataAccess class.
   It creates an object of the DataAccess class to get the customer data.

   Now, let's understand what's wrong with the above classes.

   In the above example, CustomerBusinessLogic and DataAccess are tightly coupled classes because the
   CustomerBusinessLogic class includes the reference of the concrete DataAccess class. It also creates
   an object of DataAccess class and manages the lifetime of the object.

   Problems in the above example classes:
    1. CustomerBusinessLogic and DataAccess classes are tightly coupled classes. So, changes in the
       DataAccess class will lead to changes in the CustomerBusinessLogic class. For example, if we add,
       remove or rename any method in the DataAccess class then we need to change the
       CustomerBusinessLogic class accordingly.
    2. Suppose the customer data comes from different databases or web services and, in the future, we
       may need to create different classes, so this will lead to changes in the CustomerBusinessLogic
       class.
    3. The CustomerBusinessLogic class creates an object of the DataAccess class using the new keyword.
       There may be multiple classes which use the DataAccess class and create its objects. So, if you
       change the name of the class, then you need to find all the places in your source code where you
       created objects of DataAccess and make the changes throughout the code. This is repetitive code
       for creating objects of the same class and maintaining their dependencies.
    4. Because the CustomerBusinessLogic class creates an object of the concrete DataAccess class, it
       cannot be tested independently (TDD). The DataAccess class cannot be replaced with a mock class.

   To solve all of the above problems and get a loosely coupled design, we can use the IoC and DIP
   principles together. Remember, IoC is a principle, not a pattern. It just gives high-level design
   guidelines but does not give implementation details. You are free to implement the IoC principle the
   way you want.

   The following pattern (but not limited) implements the IoC principle.

  --------------------------------------------------------------
    [ Inversion of Control ]                    Principle       
  --------------------------------------------------------------
        | | | | | |                                                 
        | | | | | +-- [Service Locator]                             
        | | | | +---- [Factory]                                     
        | | | +------ [Abstract Factory]                            
        | | +-------- [Template Method]                             
        | +---------- [Strategy]                                    
        +------------ [Dependency Injection]    Patterns        
  --------------------------------------------------------------

  
   Let's use the Factory pattern to implement IoC in the above example, as the first step towards
   attaining loosely coupled classes.

   First, create a simple Factory class which returns an object of the DataAccess class as shown below.
   Example: DataAccess Factory - C#

public class DataAccessFactory {
    public static DataAccess GetDataAccessObj() {
        return new DataAccess();
    }
}

   Now, use this DataAccessFactory class in the CustomerBusinessLogic class to get an object of
   DataAccess class.
   Example: Use Factory Class to Retrieve Object - C#

public class CustomerBusinessLogic {

    public CustomerBusinessLogic() {
    }

    public string GetCustomerName(int id) {
        DataAccess _dataAccess =  DataAccessFactory.GetDataAccessObj();
        return _dataAccess.GetCustomerName(id);
    }
}

   As you can see, the CustomerBusinessLogic class uses the DataAccessFactory.GetCustomerDataAccessObj()
   method to get an object of the DataAccess class instead of creating it using the new keyword. Thus,
   we have inverted the control of creating an object of a dependent class from the
   CustomerBusinessLogic class to the DataAccessFactory class.

   This is a simple implementation of IoC and the first step towards achieving fully loose coupled
   design. As mentioned in the previous chapter, we will not achieve complete loosely coupled classes by
   only using IoC. Along with IoC, we also need to use DIP, Strategy pattern, and DI (Dependency
   Injection).

   Let's move to the second step to understand DIP and how it helps in achieving loose coupled design in
   the next chapter [top].

   
---
