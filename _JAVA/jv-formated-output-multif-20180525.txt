filename: jv_formated_output_multif_20180525.txt
https://docs.oracle.com/javase/tutorial/java/data/numberformat.html

The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take
advantage of improvements introduced in later releases.

Formatting Numeric Print Output
Earlier you saw the use of the print and println methods for printing strings to standard output
(System.out). Since all numbers can be converted to strings (as you will see later in this lesson), you can
use these methods to print out an arbitrary mixture of strings and numbers. The Java programming language has
other methods, however, that allow you to exercise much more control over your print output when numbers are
included.

The printf and format Methods
The java.io package includes a PrintStream class that has two formatting methods that you can use to replace
print and println. These methods, format and printf, are equivalent to one another. The familiar System.out
that you have been using happens to be a PrintStream object, so you can invoke PrintStream methods on
System.out. Thus, you can use format or printf anywhere in your code where you have previously been using
print or println. For example,

System.out.format(.....);

The syntax for these two java.io.PrintStream methods is the same:
public PrintStream format(String format, Object... args)

where format is a string that specifies the formatting to be used and args is a list of the variables to be
printed using that formatting. A simple example would be

System.out.format("The value of " + "the float variable is " +
     "%f, while the value of the " + "integer variable is %d, " +
     "and the string is %s", floatVar, intVar, stringVar);

The first parameter, format, is a format string specifying how the objects in the second parameter, args, are
to be formatted. The format string contains plain text as well as format specifiers, which are special
characters that format the arguments of Object... args. (The notation Object... args is called varargs, which
means that the number of arguments may vary.)

Format specifiers begin with a percent sign (%) and end with a converter. The converter is a character
indicating the type of argument to be formatted. In between the percent sign (%) and the converter you can
have optional flags and specifiers. There are many converters, flags, and specifiers, which are documented in
java.util.Formatter

Here is a basic example:
int i = 461012;
System.out.format("The value of i is: %d%n", i);

The %d specifies that the single variable is a decimal integer. The %n is a platform-independent newline
character. The output is:
The value of i is: 461012

The printf and format methods are overloaded. Each has a version with the following syntax:
public PrintStream format(Locale l, String format, Object... args)

To print numbers in the French system (where a comma is used in place of the decimal place in the English
representation of floating point numbers), for example, you would use:
System.out.format(Locale.FRANCE,
    "The value of the float " + "variable is %f, while the " +
    "value of the integer variable " + "is %d, and the string is %s%n",
    floatVar, intVar, stringVar);

An Example
The following table lists some of the converters and flags that are used in the sample program,
TestFormat.java, that follows the table.

                Converters and Flags Used in TestFormat.java
+-----------+----------+------------------------------------------------+
|Converter  |  Flag    |                  Explanation                   |
+-----------+----------+------------------------------------------------+
|d          |          |A decimal integer.                              |
+-----------+----------+------------------------------------------------+
|f          |          |A float.                                        |
+-----------+----------+------------------------------------------------+
|           |          |A new line character appropriate to the         |
|n          |          |platform running the application. You should    |
|           |          |always use %n, rather than \n.                  |
+-----------+----------+------------------------------------------------+
|tB         |          |A date & time conversion locale-specific full   |
|           |          |name of month.                                  |
+-----------+----------+------------------------------------------------+
|td, te     |          |A date & time conversion 2-digit day of month.  |
|           |          |td has leading zeroes as needed, te does not.   |
+-----------+----------+------------------------------------------------+
|ty, tY     |          |A date & time conversion ty = 2-digit year, tY  |
|           |          |= 4-digit year.                                 |
+-----------+----------+------------------------------------------------+
|tl         |          |A date & time conversion hour in 12-hour clock. |
+-----------+----------+------------------------------------------------+
|tM         |          |A date & time conversion minutes in 2 digits,   |
|           |          |with leading zeroes as necessary.               |
+-----------+----------+------------------------------------------------+
|tp         |          |A date & time conversion locale-specific am/pm  |
|           |          |(lower case).                                   |
+-----------+----------+------------------------------------------------+
|tm         |          |A date & time conversion months in 2 digits,    |
|           |          |with leading zeroes as necessary.               |
+-----------+----------+------------------------------------------------+
|tD         |          |A date & time conversion date as %tm%td%ty      |
+-----------+----------+------------------------------------------------+
|           |08        |Eight characters in width, with leading zeroes  |
|           |          |as necessary.                                   |
+-----------+----------+------------------------------------------------+
|           |+         |Includes sign, whether positive or negative.    |
|           |,         |Includes locale-specific grouping characters.   |
+-----------+----------+------------------------------------------------+
|           |-         |Left-justified..                                |
+-----------+----------+------------------------------------------------+
|           |.3        |Three places after decimal point.               |
+-----------+----------+------------------------------------------------+
|           |10.3      |Ten characters in width, right justified, with  |
|           |          |three places after decimal point.               |
+-----------+----------+------------------------------------------------+

The following program shows some of the formatting that you can do with format. The output is shown within
double quotes in the embedded comment:
import java.util.Calendar;
import java.util.Locale;

public class TestFormat {

    public static void main(String[] args) {
      long n = 461012;
      System.out.format("%d%n", n);      //  -->  "461012"
      System.out.format("%08d%n", n);    //  -->  "00461012"
      System.out.format("%+8d%n", n);    //  -->  " +461012"
      System.out.format("%,8d%n", n);    // -->  " 461,012"
      System.out.format("%+,8d%n%n", n); //  -->  "+461,012"

      double pi = Math.PI;

      System.out.format("%f%n", pi);       // -->  "3.141593"
      System.out.format("%.3f%n", pi);     // -->  "3.142"
      System.out.format("%10.3f%n", pi);   // -->  "     3.142"
      System.out.format("%-10.3f%n", pi);  // -->  "3.142"
      System.out.format(Locale.FRANCE,
                        "%-10.4f%n%n", pi); // -->  "3,1416"

      Calendar c = Calendar.getInstance();
      System.out.format("%tB %te, %tY%n", c, c, c); // -->  "May 29, 2006"

      System.out.format("%tl:%tM %tp%n", c, c, c);  // -->  "2:34 am"

      System.out.format("%tD%n", c);    // -->  "05/29/06"
    }
}

Note:  The discussion in this section covers just the basics of the format and printf methods. Further detail
can be found in the Basic I/O section of the Essential trail, in the "Formatting" page.
Using String.format to create strings is covered in Strings.

The DecimalFormat Class
You can use the java.text.DecimalFormat class to control the display of leading and trailing zeros, prefixes
and suffixes, grouping (thousands) separators, and the decimal separator. DecimalFormat offers a great deal
of flexibility in the formatting of numbers, but it can make your code more complex.

The example that follows creates a DecimalFormat object, myFormatter, by passing a pattern string to the
DecimalFormat constructor. The format() method, which DecimalFormat inherits from NumberFormat, is then
invoked by myFormatter it accepts a double value as an argument and returns the formatted number in a string:

Here is a sample program that illustrates the use of DecimalFormat:


import java.text.*;

public class DecimalFormatDemo {

   static public void customFormat(String pattern, double value ) {
      DecimalFormat myFormatter = new DecimalFormat(pattern);
      String output = myFormatter.format(value);
      System.out.println(value + "  " + pattern + "  " + output);
   }

   static public void main(String[] args) {

      customFormat("###,###.###", 123456.789);
      customFormat("###.##", 123456.789);
      customFormat("000000.000", 123.78);
      customFormat("$###,###.###", 12345.67);
   }
}


The output is:

123456.789  ###,###.###  123,456.789
123456.789  ###.##  123456.79
123.78  000000.000  000123.780
12345.67  $###,###.###  $12,345.67

The following table explains each line of output.

                                          DecimalFormat.java Output
+-----------+-----------+------------+------------------------------------------------------------------+
|  Value    | Pattern   |  Output    |                           Explanation                            |
+-----------+-----------+------------+------------------------------------------------------------------+
|           |###,###.## |            |The pound sign (#) denotes a digit, the comma is a placeholder    |
|123456.789 |#          |123,456.789 |for the grouping separator, and the period is a placeholder for   |
|           |           |            |the decimal separator.                                            |
+-----------+-----------+------------+------------------------------------------------------------------+
|           |           |            |The value has three digits to the right of the decimal point, but |
|123456.789 |###.##     |123456.79   |the pattern has only two. The format method handles this by       |
|           |           |            |rounding up.                                                      |
+-----------+-----------+------------+------------------------------------------------------------------+
|123.78     |000000.000 |000123.780  |The pattern specifies leading and trailing zeros, because the 0   |
|           |           |            |character is used instead of the pound sign (#).                  |
+-----------+-----------+------------+------------------------------------------------------------------+
|           |$###,###.# |            |The first character in the pattern is the dollar sign ($). Note   |
|12345.67   |##         |$12,345.67  |that it immediately precedes the leftmost digit in the formatted  |
|           |           |            |output.                                                           |
+-----------+-----------+------------+------------------------------------------------------------------+


---
https://dzone.com/articles/java-string-format-examples

Java String Format Examples

Always forgetting the Java String formatting specifiers? Or maybe you never took the time to learn. Here's a
reference for you of the various flags you can use.

Have you tried to read and understand Java's String format documentation? I have and found it hard to
understand. While it does include all the information, the organization leaves something to be desired.

This guide is an attempt to bring some clarity and ease the usage of string formatting in java.

String Formatting
Most common way of formatting a string in java is using String.format(). If there were a "java sprintf" then
this would be it.
String output = String.format("%s = %d", "joe", 35);

For formatted console output, you can use printf() or the format() method of System.out and System.err
PrintStreams.
System.out.printf("My name is: %s%n", "joe");

Create a Formatter and link it to a StringBuilder. Output formatted using the format() method will be
appended to the StringBuilder.

StringBuilder sbuf = new StringBuilder();
Formatter fmt = new Formatter(sbuf);
fmt.format("PI = %f%n", Math.PI);
System.out.print(sbuf.toString());
// you can continue to append data to sbuf here.

Format Specifiers

Here is a quick reference to all the conversion specifiers supported.

Specifier Applies to                        Output
%a        floating point (except BigDecimal Hex output of floating point number)
%b        Any type                          "true" if non-null, "false" if null
%c        character                         Unicode character
%d        integer (incl. byte, short, int,  Decimal Integer
          long, bigint)
%e        floating point                    decimal number in scientific notation
%f        floating point                    decimal number
%g        floating point                    decimal number, possibly in scientific notation depending on the
                                            precision and value.
%h        any type                          Hex String of value from hashCode() method.
 %n       none                              Platform-specific line separator.
%o        integer (incl. byte, short, int,  Octal number
          long, bigint)
%s        any type                          String value
%t        Date/Time (incl. long, Calendar,  %t is the prefix for Date/Time conversions. More formatting flags
          Date and TemporalAccessor)        are needed after this. See Date/Time conversion below.
%x        integer (incl. byte, short, int,  Hex string.
          long, bigint)

Date and Time Formatting
Note: Using the formatting characters with "%T" instead of "%t" in the table below makes the output
uppercase.

 Flag            Notes
 %tA             Full name of the day of the week, e.g. "Sunday", "Monday"
 %ta             Abbreviated name of the week day e.g. "Sun", "Mon", etc.
 %tB             Full name of the month e.g. "January", "February", etc.
 %tb             Abbreviated month name e.g. "Jan", "Feb", etc.
 %tC             Century part of year formatted with two digits e.g. "00" through "99".
 %tc             Date and time formatted with "%ta %tb %td %tT %tZ %tY" e.g. "Fri Feb 17 07:45:42 PST 2017"
 %tD             Date formatted as "%tm/%td/%ty"
 %td             Day of the month formatted with two digits. e.g. "01" to "31".
 %te             Day of the month formatted without a leading 0 e.g. "1" to "31".
 %tF             ISO 8601 formatted date with "%tY-%tm-%td".
 %tH             Hour of the day for the 24-hour clock e.g. "00" to "23".
 %th             Same as %tb.
 %tI             Hour of the day for the 12-hour clock e.g. "01" - "12".
 %tj             Day of the year formatted with leading 0s e.g. "001" to "366".
 %tk             Hour of the day for the 24 hour clock without a leading 0 e.g. "0" to "23".
 %tl             Hour of the day for the 12-hour click without a leading 0 e.g. "1" to "12".
 %tM             Minute within the hour formatted a leading 0 e.g. "00" to "59".
 %tm             Month formatted with a leading 0 e.g. "01" to "12".
 %tN             Nanosecond formatted with 9 digits and leading 0s e.g. "000000000" to "999999999".
 %tp             Locale specific "am" or "pm" marker.
 %tQ             Milliseconds since epoch Jan 1 , 1970 00:00:00 UTC.
 %tR             Time formatted as 24-hours e.g. "%tH:%tM".
 %tr             Time formatted as 12-hours e.g. "%tI:%tM:%tS %Tp".
 %tS             Seconds within the minute formatted with 2 digits e.g. "00" to "60". "60" is required to \
                 support leap seconds.
 %ts             Seconds since the epoch Jan 1, 1970 00:00:00 UTC.
 %tT             Time formatted as 24-hours e.g. "%tH:%tM:%tS".
 %tY             Year formatted with 4 digits e.g. "0000" to "9999".
 %ty             Year formatted with 2 digits e.g. "00" to "99".
 %tZ             Time zone abbreviation. e.g. "UTC", "PST", etc.
 %tz             Time Zone Offset from GMT e.g. " -0800 ".

Argument Index
An argument index is specified as a number ending with a "$" after the "%" and selects the specified argument
in the argument list.
String.format("%2$s", 32, "Hello"); // prints: "Hello"

Formatting an Integer
With the %d format specifier, you can use an argument of all integral types including byte, short, int, long
and BigInteger.

Default formatting:
String.format("%d", 93); // prints 93

Specifying a width:
String.format("|%20d|", 93); // prints: |                  93|

Left-justifying within the specified width:
String.format("|%-20d|", 93); // prints: |93                  |

Pad with zeros:
String.format("|%020d|", 93); // prints: |00000000000000000093|

Print positive numbers with a "+":
(Negative numbers always have the "-" included):
String.format("|%+20d|', 93); // prints: |                 +93|

A space before positive numbers.
A "-" is included for negative numbers as per normal.
String.format("|% d|", 93); // prints: | 93|
String.format("|% d|", -36); // prints: |-36|

Use locale-specific thousands separator:
For the US locale, it is ",":
String.format("|%,d|", 10000000); // prints: |10,000,000|

Enclose negative numbers within parentheses ("()") and skip the "-":
String.format("|%(d|", -36); // prints: |(36)|

Octal output:
String.format("|%o|"), 93); // prints: 135

Hex output:
String.format("|%x|", 93); // prints: 5d

Alternate representation for octal and hex output:
Prints octal numbers with a leading "0" and hex numbers with leading "0x".

String.format("|%#o|", 93); // prints: 0135

String.format("|%#x|", 93); // prints: 0x5d

String.format("|%#X|", 93); // prints: 0X5D

String and Character Conversion
Default formatting:
Prints the whole string.
String.format("|%s|", "Hello World"); // prints: "Hello World"

Specify Field Length
String.format("|%30s|", "Hello World"); // prints: | Hello World|

Left Justify Text
String.format("|%-30s|", "Hello World"); // prints: |Hello World |

Specify Maximum Number of Characters
String.format("|%.5s|", "Hello World"); // prints: |Hello|

Field Width and Maximum Number of Characters
String.format("|%30.5s|", "Hello World"); | Hello|

Summary
This guide explained String formatting in Java. We covered the supported format specifiers. Both numeric and
string formatting support a variety of flags for alternative formats.

---
https://www.geeksforgeeks.org/formatted-output-in-java/

Formatted output in Java

   Sometimes in Competitive programming, it is essential to print the output in a given specified
   format. Most users are familiar with printf function in C. Let us see discuss how we can format the
   output in Java:

                                Formatting output using System.out.printf()

   This is the easiest of all methods as this is similar to printf in C. Note that System.out.print()
   and System.out.println() take a single argument, but printf() may take multiple arguments.
// A Java program to demonstrate working of printf() in Java
class JavaFormatter1
{
  public static void main(String args[])
  {
    int x = 100;
    System.out.printf("Printing simple integer: x = %d\n", x);

    // this will print it upto 2 decimal places
    System.out.printf("Formatted with precison: PI = %.2f\n", Math.PI);

    float n = 5.2f;

    // automatically appends zero to the rightmost part of decimal
    System.out.printf("Formatted to specific width: n = %.4f\n", n);

    n = 2324435.3f;

    // here number is formatted from right margin and occupies a
    // width of 20 characters
    System.out.printf("Formatted to right margin: n = %20.4f\n", n);
  }
}

   Output:
Without formattiing: PI = 3.141592653589793
Formatted to Give precison: PI = 3.14
Formatted to specific width: n = 5.2000
Formatted to right margin: n =         2324435.2500

   System.out.format() is equivalent to printf() and can also be used.


                                   Formatting using DecimalFormat class:

   DecimalFormat is used to format decimal numbers.

// Java program to demonstrate working of DecimalFormat
import java.text.DecimalFormat;

class JavaFormatter2
{
  public static void main(String args[])
  {
    double num = 123.4567;

    // prints only numeric part of a floating number
    DecimalFormat ft = new DecimalFormat("####");
    System.out.println("Without fraction part: num = " + ft.format(num));

    // this will print it upto 2 decimal places
    ft = new DecimalFormat("#.##");
    System.out.println("Formatted to Give precison: num = " + ft.format(num));

    // automatically appends zero to the rightmost part of decimal
    // instead of #,we use digit 0
    ft = new DecimalFormat("#.000000");
    System.out.println("appended zeroes to right: num = " + ft.format(num));

    // automatically appends zero to the leftmost of decimal number
    // instead of #,we use digit 0
    ft = new DecimalFormat("00000.00");
    System.out.println("formatting Numeric part : num = "+ft.format(num));

    // formatting money in dollars
    double income = 23456.789;
    ft = new DecimalFormat("$###,###.##");
    System.out.println("your Formatted Dream Income : " + ft.format(income));
  }
}

   Output:
Without fraction part: num = 123
Formatted to Give precison: num = 123.46
appended zeroes to right: num = 123.456700
formatting Numeric part : num = 00123.46
your Formatted Dream Income : $23,456.79


                        Formatting dates and parsing using SimpleDateFormat class:

   This class is present in java.text package.
// Java program to demonstrate working of SimpleDateFormat
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

class Formatter3
{
  public static void main(String args[]) throws ParseException
  {
    // Formatting as per given pattern in the argument
    SimpleDateFormat ft = new SimpleDateFormat("dd-MM-yyyy");
    String str = ft.format(new Date());
    System.out.println("Formatted Date : " + str);

    // parsing a given String
    str = "02/18/1995";
    ft = new SimpleDateFormat("MM/dd/yyyy");
    Date date = ft.parse(str);

    // this will print the date as per parsed string
    System.out.println("Parsed Date : " + date);
  }
}

   Output:
Formatted Date : 16-10-2016
Parsed Date : Sat Feb 18 00:00:00 UTC 1995

---
https://docs.oracle.com/javase/tutorial/essential/io/formatting.html

   The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't
   take advantage of improvements introduced in later releases.

Formatting

   Stream objects that implement formatting are instances of either [39]PrintWriter, a character stream
   class, or PrintStream, a byte stream class.
     ________________________________________________________________________________________________

   Note: The only PrintStream objects you are likely to need are System.out and System.err. (See
   I/O from the Command Line for more on these objects.) When you need to create a formatted output
   stream, instantiate PrintWriter, not PrintStream.
     ________________________________________________________________________________________________

   Like all byte and character stream objects, instances of PrintStream and PrintWriter implement a
   standard set of write methods for simple byte and character output. In addition, both PrintStream and
   PrintWriter implement the same set of methods for converting internal data into formatted output. Two
   levels of formatting are provided:
     * print and println format individual values in a standard way.
     * format formats almost any number of values based on a format string, with many options for
       precise formatting.

The print and println Methods
   Invoking print or println outputs a single value after converting the value using the appropriate
   toString method. We can see this in the [44]Root example:
public class Root {
    public static void main(String[] args) {
        int i = 2;
        double r = Math.sqrt(i);

        System.out.print("The square root of ");
        System.out.print(i);
        System.out.print(" is ");
        System.out.print(r);
        System.out.println(".");

        i = 5;
        r = Math.sqrt(i);
        System.out.println("The square root of " + i + " is " + r + ".");
    }
}

   Here is the output of Root:
The square root of 2 is 1.4142135623730951.
The square root of 5 is 2.23606797749979.

   The i and r variables are formatted twice: the first time using code in an overload of print, the
   second time by conversion code automatically generated by the Java compiler, which also utilizes
   toString. You can format any value this way, but you don't have much control over the results.

The format Method
   The format method formats multiple arguments based on a format string. The format string consists of
   static text embedded with format specifiers; except for the format specifiers, the format string is
   output unchanged.

   Format strings support many features. In this tutorial, we'll just cover some basics. For a complete
   description, see format string syntax in the API specification.

   The Root2 example formats two values with a single format invocation:
public class Root2 {
    public static void main(String[] args) {
        int i = 2;
        double r = Math.sqrt(i);

        System.out.format("The square root of %d is %f.%n", i, r);
    }
}

   Here is the output:
The square root of 2 is 1.414214.

   Like the three used in this example, all format specifiers begin with a % and end with a 1- or
   2-character conversion that specifies the kind of formatted output being generated. The three
   conversions used here are:
     * d formats an integer value as a decimal value.
     * f formats a floating point value as a decimal value.
     * n outputs a platform-specific line terminator.

   Here are some other conversions:
     * x formats an integer as a hexadecimal value.
     * s formats any value as a string.
     * tB formats an integer as a locale-specific month name.

   There are many other conversions.
     ________________________________________________________________________________________________

   Note:
   Except for %% and %n, all format specifiers must match an argument. If they don't, an exception is
   thrown.

   In the Java programming language, the \n escape always generates the linefeed character (\u000A).
   Don't use \n unless you specifically want a linefeed character. To get the correct line separator for
   the local platform, use %n.
     ________________________________________________________________________________________________

   In addition to the conversion, a format specifier can contain several additional elements that
   further customize the formatted output. Here's an example, [47]Format, that uses every possible kind
   of element.
public class Format {
    public static void main(String[] args) {
        System.out.format("%f, %1$+020.10f %n", Math.PI);
    }
}

   Here's the output:
3.141593, +00000003.1415926536

   The additional elements are all optional. The following figure shows how the longer specifier breaks
   down into elements.

                                    | % | 1$ | +0 | 20 | .01 | f |
                                      |   |     |    |    |    |
   Begin Format Specifier ------------+   |     |    |    |    |
   Argument Index ------------------------+     |    |    |    |
   Flags ---------------------------------------+    |    |    |
   Width --------------------------------------------+    |    |
   Precision ---------------------------------------------+    |
   Conversion -------------------------------------------------+

   
   The elements must appear in the order shown. Working from the right, the optional elements are:
     * Precision. For floating point values, this is the mathematical precision of the formatted value.
       For s and other general conversions, this is the maximum width of the formatted value; the value
       is right-truncated if necessary.
     * Width. The minimum width of the formatted value; the value is padded if necessary. By default the
       value is left-padded with blanks.
     * Flags specify additional formatting options. In the Format example, the + flag specifies that the
       number should always be formatted with a sign, and the 0 flag specifies that 0 is the padding
       character. Other flags include - (pad on the right) and , (format number with locale-specific
       thousands separators). Note that some flags cannot be used with certain other flags or with
       certain conversions.
     * The Argument Index allows you to explicitly match a designated argument. You can also specify <
       to match the same argument as the previous specifier. Thus the example could have said:
       System.out.format("%f, %<+020.10f %n", Math.PI);

---
       
