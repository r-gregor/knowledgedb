filename: jv_static-factory-methods-vs-traditional-constructors-multif_20200525.txt
https://www.javacodegeeks.com/2013/01/static-factory-methods-vs-traditional-constructors.html

Static factory methods vs traditional constructors
January 31st, 2013

   I've previously talked a little bit about the [**1]Builder Pattern, a useful pattern to instantiate
   classes with several (possibly optional) attributes that results in easier to read, write and
   maintain client code, among other benefits. Today, I'm going to continue exploring object creation
   techniques but this time for a more general case.

   Take the following example, which is by no means a useful class other than to make my point. We have
   a RandomIntGenerator class that, as the name suggests, generates random int numbers. Something like:

public class RandomIntGenerator {
    private final int min;
    private final int max;

    public int next() {...}
}

   Our generator takes a minimum and maximum and then generates random numbers between those 2 values.
   Notice that the two attributes are declared final so we have to initialize them either on their
   declaration or in the class constructor. Let's go with the constructor:
    public RandomIntGenerator(int min, int max) {
        this.min = min;
        this.max = max;
    }

   Now, we also want to give our clients the possibility to specify just a minimum value and then
   generate random values between that minimum and the max possible value for ints. So we add a second
   constructor:
    public RandomIntGenerator(int min) {
        this.min = min;
        this.max = Integer.MAX_VALUE;
    }

   So far so good, right? But in the same way that we provided a constructor to just specify the minimum
   value, we want to do the same for just the maximum. We'll just add a third constructor like:
    public RandomIntGenerator(int max) {
        this.min = Integer.MIN_VALUE;
        this.max = max;
    }

   If you try that, you'll get a compilation error that goes: Duplicate method RandomIntGenerator(int)
   in type RandomIntGenerator. What's wrong? The problem is that constructors, by definition, have no
   names. As such, a class can only have one constructor with a given signature in the same way that you
   can't have two methods with the same signature (same return type, name and parameters type). That is
   why when we tried to add the RandomIntGenerator(int max) constructor we got that compilation error,
   because we already had the RandomIntGenerator(int min) one.

   Is there something we can do in cases like this one? Not with constructors but fortunately there's
   something else we can use: static factory methods, which are simply public static methods that return
   an instance of the class. You've probably used this technique without even realizing it. Have you
   ever used Boolean.valueOf? It looks something like:
    public static Boolean valueOf(boolean b) {
        return (b ? TRUE : FALSE);
    }

   Applying static factories to our RandomIntGenerator example, we could get:
public class RandomIntGenerator {
    private final int min;
    private final int max;

    private RandomIntGenerator(int min, int max) {
        this.min = min;
        this.max = max;
    }

    public static RandomIntGenerator between(int max, int min) {
        return new RandomIntGenerator(min, max);
    }

    public static RandomIntGenerator biggerThan(int min) {
        return new RandomIntGenerator(min, Integer.MAX_VALUE);
    }

    public static RandomIntGenerator smallerThan(int max) {
        return new RandomIntGenerator(Integer.MIN_VALUE, max);
    }

    public int next() {...}
}

   Note how the constructor was made private to ensure that the class is only instantiated through its
   public static factory methods. Also note how your intent is clearly expressed when you have a client
   with RandomIntGenerator.between(10,20) instead of new RandomIntGenerator(10,20). It's worth
   mentioning that this technique is not the same as the Factory method Design Pattern from the
   Gang of Four. Any class can provide static factory methods instead of, or in addition to,
   constructors. So what are the advantages and disadvantages of this technique? We already mentioned
   the first advantage of static factory methods: unlike constructors they have names. This has two
   direct consequences,
    1. We can provide a meaningful name for our constructors.
    2. We can provide several constructors with the same number and type of parameters, something that
       as we saw earlier we can't do with class constructors.

   Another advantage of static factories is that, unlike constructors, they are not required to return a
   new object every time they are invoked. This is extremely useful when working with immutable
   classes to provide constant objects for common used values and avoid creating unnecessary duplicate
   objects. The Boolean.valueOf code that I showed previously illustrates this point perfectly. Notice
   that this static method returns either TRUE or FALSE, both immutable Boolean objects.

   A third advantage of static factory methods is that they can return an object of any subtype of their
   return type. This gives you the possibility to change the return type freely without affecting
   clients. Moreover, you can hide implementation classes and have an interface-based API, which is
   usually a really good idea. But I think this can be better seen by an example.

   Remember the RandomIntGenerator at the beginning of this post? Let's make that a little bit more
   complicated. Imagine that we now want to provide random generators not just for integers but for
   other data-types like String, Double or Long. They are all going to have a next() method that returns
   a random object of a particular type, so we could start with an interface like:
public interface RandomGenerator<T> {
    T next();
}

   Our first implementation of the RandomIntGenerator now becomes:
class RandomIntGenerator implements RandomGenerator<Integer> {
    private final int min;
    private final int max;

    RandomIntGenerator(int min, int max) {
        this.min = min;
        this.max = max;
    }

    public Integer next() {...}
}

   We could also have a String generator:
class RandomStringGenerator implements RandomGenerator<String> {
    private final String prefix;

    RandomStringGenerator(String prefix) {
        this.prefix = prefix;
    }

    public String next() {...}
}

   Notice how all the classes are declared package-private (default scope) and so are their
   constructors. This means that no client outside of their package can create instances of these
   generators. So what do we do? Tip: It starts with "static" and ends with "methods".
   Consider the following class:
public final class RandomGenerators {
    // Suppresses default constructor, ensuring non-instantiability.
    private RandomGenerators() {}

    public static final RandomGenerator<Integer> getIntGenerator() {
        return new RandomIntGenerator(Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    public static final RandomGenerator<String> getStringGenerator() {
        return new RandomStringGenerator('');
    }
}

   RandomGenerators is just a noninstantiable utility class with nothing else than static factory
   methods. Being on the same package as the different generators this class can effectively access and
   instantiate those classes. But here comes the interesting part. Note that the methods only return the
   RandomGenerator interface, and that's all the clients need really. If they get a
   RandomGenerator<Integer> they know that they can call next() and get a random integer.
   Imagine that next month we code a super efficient new integer generator. Provided that this new class
   implements RandomGenerator<Integer> we can change the return type of the static factory method and
   all clients are now magically using the new implementation without them even noticing the change.

   Classes like RandomGenerators are quite common both on the JDK and on third party libraries. You can
   see examples in Collections (in java.util), Lists, Sets or Maps in Guava. The naming convention
   is usually the same: if you have an interface named Type you put your static factory methods in a
   noninstantiable class named Types.

   A final advantage of static factories is that they make instantiating parameterized classes a lot
   less verbose. Have you ever had to write code like this?
Map<String, List<String>> map = new HashMap<String, List<String>>();

   You are repeating the same parameters twice on the same line of code. Wouldn't it be nice if the
   right side of the assign could be inferred from the left side? Well, with static factories it can.
   The following code is taken from Guava's Maps class:
  public static <K, V> HashMap<K, V> newHashMap() {
    return new HashMap<K, V>();
  }

   So now our client code becomes:
Map<String, List<String>> map = Maps.newHashMap();

   Pretty nice, isn't it? This capability is known as Type inference. It's worth mentioning that
   Java 7 introduced type inference through the use of the diamond operator. So if you're using
   Java 7 you can write the previous example as:
Map<String, List<String>> map = new HashMap<>();

   The main disadvantage of static factories is that classes without public or protected constructors
   cannot be extended. But this might be actually a good thing in some cases because it encourages
   developers to favor composition over inheritance.

   To summarize, static factory methods provide a lot of benefits and just one drawback that might
   actually not be a problem when you think about it. Therefore, resist the urge to automatically
   provide public constructors and evaluate if static factories are a better fit for your class.



---
[**1]
https://jlordiales.wordpress.com/2012/12/13/the-builder-pattern-in-practice/

The builder pattern in practice
December 13, 2012

   So, this is my first post (and my first blog for that matter). I can't remember exactly where I read
   this (although I'm almost sure it was on Practices of an Agile Developer), but writing in a blog
   is supposed to help you get your thoughts together. Concretely, by taking the time to explain what
   you know, you get a better understanding of it yourself.

   And that's exactly what I'm going to try to do here, explain things to get a better understanding of
   them. And, as a bonus, it will also serve me as centralized place to go to when I want to revisit
   something I've done in the past. Hopefully, this will help some of you in the process.

   With the introduction out of the way, lets jump straight into this first post which, as the title so
   eloquently says :), is about the builder pattern. I'm not going to dive into much details about
   the pattern because there's already tons of posts and books that explain it in fine detail. Instead,
   I'm going to tell you why and when you should consider using it. However, it is worth mentioning that
   this pattern is a bit different to the one presented in the Gang of Four book. While the original
   pattern focuses on abstracting the steps of construction so that by varying the builder
   implementation used we can get a different result, the pattern explained in this post deals with
   removing the unnecessary complexity that stems from multiple constructors, multiple optional
   parameters and overuse of setters.

   Imagine you have a class with a substantial amount of attributes like the User class below. Let's
   assume that you want to make the class immutable (which, by the way, unless there's a really good
   reason not to you should always strive to do. But we'll get to that in a different post).

public class User {
    private final String firstName;    //required
    private final String lastName;    //required
    private final int age;    //optional
    private final String phone;    //optional
    private final String address;    //optional
...
}

   Now, imagine that some of the attributes in your class are required while others are optional. How
   would you go about building an object of this class? All attributes are declared final so you have to
   set them all in the constructor, but you also want to give the clients of this class the chance of
   ignoring the optional attributes.

   A first and valid option would be to have a constructor that only takes the required attributes as
   parameters, one that takes all the required attributes plus the first optional one, another one that
   takes two optional attributes and so on. What does that look like? Something like this:
    public User(String firstName, String lastName) {
        this(firstName, lastName, 0);
    }

    public User(String firstName, String lastName, int age) {
        this(firstName, lastName, age, "");
    }

    public User(String firstName, String lastName, int age, String phone) {
        this(firstName, lastName, age, phone, "");
    }

    public User(String firstName, String lastName, int age, String phone, String address) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.phone = phone;
        this.address = address;
    }

   The good thing about this way of building objects of the class is that it works. However, the problem
   with this approach should be pretty obvious. When you only have a couple of attributes is not such a
   big deal, but as that number increases the code becomes harder to read and maintain. More
   importantly, the code becomes increasingly harder for clients. Which constructor should I invoke as a
   client? The one with 2 parameters? The one with 3? What is the default value for those parameters
   where I don't pass an explicit value? What if I want to set a value for address but not for age and
   phone? In that case I would have to call the constructor that takes all the parameters and pass
   default values for those that I don't care about. Additionally, several parameters with the same type
   can be confusing. Was the first String the phone number or the address?

   So what other choice do we have for these cases? We can always follow the JavaBeans convention, where
   we have a default no-arg constructor and have setters and getters for every attribute. Something
   like:
public class User {
    private String firstName; // required
    private String lastName; // required
    private int age; // optional
    private String phone; // optional
    private String address;  //optional

    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public String getPhone() {
        return phone;
    }
    public void setPhone(String phone) {
        this.phone = phone;
    }
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
}

   This approach seems easier to read and maintain. As a client I can just create an empty object and
   then set only the attributes that I'm interested in. So what's wrong with it? There are two main
   problems with this solution. The first issue has to do with having an instance of this class in an
   inconsistent state. If you want to create an User object with values for all its 5 attributes then
   the object will not have a complete state until all the setX methods have been invoked. This means
   that some part of the client application might see this object and assume that is already constructed
   while that's actually not the case.
   The second disadvantage of this approach is that now the User class is mutable. You're loosing all
   the benefits of immutable objects.

   Fortunately there is a third choice for these cases, the builder pattern. The solution will look
   something like the following.
public class User {
    private final String firstName; // required
    private final String lastName; // required
    private final int age; // optional
    private final String phone; // optional
    private final String address; // optional

    private User(UserBuilder builder) {
        this.firstName = builder.firstName;
        this.lastName = builder.lastName;
        this.age = builder.age;
        this.phone = builder.phone;
        this.address = builder.address;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public int getAge() {
        return age;
    }

    public String getPhone() {
        return phone;
    }

    public String getAddress() {
        return address;
    }

    public static class UserBuilder {
        private final String firstName;
        private final String lastName;
        private int age;
        private String phone;
        private String address;

        public UserBuilder(String firstName, String lastName) {
            this.firstName = firstName;
            this.lastName = lastName;
        }

        public UserBuilder age(int age) {
            this.age = age;
            return this;
        }

        public UserBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }

        public UserBuilder address(String address) {
            this.address = address;
            return this;
        }

        public User build() {
            return new User(this);
        }

    }
}

   A couple of important points worth noting:
     * The User constructor is private, which means that this class can not be directly instantiated
       from the client code.
     * The class is once again immutable. All attributes are final and they're set on the constructor.
       Additionally, we only provide getters for them.
     * The builder uses the Fluent Interface idiom to make the client code more readable (we'll see
       an example of this in a moment).
     * The builder constructor only receives the required attributes and this attributes are the only
       ones that are defined "final" on the builder to ensure that their values are set on the
       constructor.

   The use of the builder pattern has all the advantages of the first two approaches I mentioned at the
   beginning and none of their shortcomings. The client code is easier to write and, more importantly,
   to read. The only critique that I've heard about the pattern is the fact that you have to duplicate
   the class' attributes on the builder. However, given the fact that the builder class is usually a
   static member class of the class it builds, they can evolve together fairly easy.

   Now, how does the client code trying to create a new User object looks like? Let's see:
    public User getUser() {
        return new
                User.UserBuilder("Jhon", "Doe")
                .age(30)
                .phone("1234567")
                .address("Fake address 1234")
                .build();
    }

   Pretty neat, isn't it? You can build a User object in 1 line of code and, most importantly, is very
   easy to read. Moreover, you're making sure that whenever you get an object of this class is not going
   to be on an incomplete state.

   This pattern is really flexible. A single builder can be used to create multiple objects by varying
   the builder attributes between calls to the "build" method. The builder could even auto-complete some
   generated field between each invocation, such as an id or serial number.

   An important point is that, like a constructor, a builder can impose invariants on its parameters.
   The build method can check these invariants and throw an IllegalStateException if they are not valid.
   It is critical that they be checked after copying the parameters from the builder to the object, and
   that they be checked on the object fields rather than the builder fields. The reason for this is
   that, since the builder is not thread-safe, if we check the parameters before actually creating the
   object their values can be changed by another thread between the time the parameters are checked and
   the time they are copied. This period of time is known as the "window of vulnerability". In our User
   example this could look like the following:
public User build() {
    User user = new user(this);
    if (user.getAge() 120) {
    throw new IllegalStateException("Age out of range"); // thread-safe
    }
    return user;
}

   The previous version is thread-safe because we first create the user and then we check the invariants
   on the immutable object. The following code looks functionally identical but it's not thread-safe and
   you should avoid doing things like this:
public User build() {
    if (age 120) {
        throw new IllegalStateException("Age out of range"); // bad, not thread-safe
    }
    // This is the window of opportunity for a second thread to modify the value of age
    return new User(this);
}

   A final advantage of this pattern is that a builder could be passed to a method to enable this method
   to create one or more objects for the client, without the method needing to know any kind of details
   about how the objects are created. In order to do this you would usually have a simple interface
   like:
public interface Builder {
    T build();
}

   In the previous User example, the UserBuilder class could implement Builder<User>. Then, we could
   have something like:
UserCollection buildUserCollection(Builder<? extends User> userBuilder){...}

   Well, that was a pretty long first post. To sum it up, the Builder pattern is an excellent choice for
   classes with more than a few parameters (is not an exact science but I usually take 4 attributes to
   be a good indicator for using the pattern), especially if most of those parameters are optional. You
   get client code that is easier to read, write and maintain. Additionally, your classes can remain
   immutable which makes your code safer.

   UPDATE: if you use Eclipse as your IDE, it turns out that you have quite a few plugins to avoid most
   of the boiler plate code that comes with the pattern. The three I've seen are:


---
