filename: jv_sort-map-by-value_20180703.txt
https://www.programcreek.com/2013/03/java-sort-map-by-value/

Java – Sort Map By Value

   In Java, we can use the TreeMap class to sort a map by its keys. This class is very handy to use.
   However, sometimes we need to sort a map by its values. How to sort a map by its values is a most
   frequently asked question by Java programmers. In this post, I will develop the best way to write
   such a method.

   1. Naive Method

   The following is a solution to sort a map of <String, Integer> pairs. This is often used in counting
   frequency of words.
   
<code>   
import java.util.Comparator;
import java.util.HashMap;
import java.util.TreeMap;

public class SortMapByValue {

        public static void main(String[] args) {
                HashMap<String, Integer> map = new HashMap<String, Integer>();
                map.put("a", 10);
                map.put("b", 30);
                map.put("c", 50);
                map.put("d", 40);
                map.put("e", 20);
                System.out.println(map);

                TreeMap<String, Integer> sortedMap = sortMapByValue(map);
                System.out.println(sortedMap);
        }

        public static TreeMap<String, Integer> sortMapByValue(HashMap<String, Integer> map){
                Comparator<String> comparator = new ValueComparator(map);
                //TreeMap is a map sorted by its keys.
                //The comparator is used to sort the TreeMap by keys.
                TreeMap<String, Integer> result = new TreeMap<String, Integer>(comparator);
                result.putAll(map);
                return result;
        }
}
</code>


   Here is the comparator class implementation.
<code>   
// a comparator that compares Strings
class ValueComparator implements Comparator<String>{

        HashMap<String, Integer> map = new HashMap<String, Integer>();

        public ValueComparator(HashMap<String, Integer> map){
                this.map.putAll(map);
        }

        @Override
        public int compare(String s1, String s2) {
                if(map.get(s1) >= map.get(s2)){
                        return -1;
                }else{
                        return 1;
                }
        }
}
</code>

   In this solution, we use a TreeMap to sort the map. When creating the TreeMap, we give it a
   comparator. The comparator accepts strings and compare the assocated values of the given string key
   in the map.

   The method works well, but it only works for sorting String and Integer pairs. If we want to sort a
   map with other types of keys and values, it needs to be rewritten. Therefore, a more general solution
   is preferred.

   2. More General Solution

   We can ignore the generic type and make the methods work for any types like the following.
<code>   
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

public class Solution {
        public static void main(String[] args) {
                HashMap<String, Integer> map = new HashMap<String, Integer>();
                map.put("a", 10);
                map.put("b", 30);
                map.put("c", 50);
                map.put("d", 40);
                map.put("e", 20);
                System.out.println(map);

                Map sortedMap = sortByValue(map);
                System.out.println(sortedMap);
        }

        public static Map sortByValue(Map unsortedMap) {
                Map sortedMap = new TreeMap(new ValueComparator(unsortedMap));
                sortedMap.putAll(unsortedMap);
                return sortedMap;
        }

}

class ValueComparator implements Comparator {
        Map map;

        public ValueComparator(Map map) {
                this.map = map;
        }

        public int compare(Object keyA, Object keyB) {
                Comparable valueA = (Comparable) map.get(keyA);
                Comparable valueB = (Comparable) map.get(keyB);
                return valueB.compareTo(valueA);
        }
}
</code>

   The solution is not type-safe, we need a type-safe and general solution.

   3. Using Generic Types
<code>   
public class SortMapByValue {

        public static void main(String[] args) {
                // <String, Integer> Map
                HashMap<String, Integer> map = new HashMap<String, Integer>();
                map.put("a", 10);
                map.put("b", 30);
                map.put("c", 50);
                map.put("d", 40);
                map.put("e", 20);
                System.out.println(map);


                Comparator<String> comparator = new ValueComparator<String, Integer>(map);
                TreeMap<String, Integer> result = new TreeMap<String, Integer>(comparator);
                result.putAll(map);

                System.out.println(result);

                // <Integer, Integer> Map

                HashMap<Integer, Integer> map2 = new HashMap<Integer, Integer>();
                map2.put(1, 10);
                map2.put(2, 30);
                map2.put(3, 50);
                map2.put(4, 40);
                map2.put(5, 20);
                System.out.println(map2);

                Comparator<Integer> comparator2 = new ValueComparator<Integer, Integer>(map2);
                TreeMap<Integer, Integer> result2 = new TreeMap<Integer, Integer>(comparator2);
                result2.putAll(map2);

                System.out.println(result2);

        }

}
</code>

<code>
// a comparator using generic type
class ValueComparator<K, V extends Comparable<V>> implements Comparator<K>{

        HashMap<K, V> map = new HashMap<K, V>();

        public ValueComparator(HashMap<K, V> map){
                this.map.putAll(map);
        }

        @Override
        public int compare(K s1, K s2) {
                return -map.get(s1).compareTo(map.get(s2));//descending order
        }
}
</code>

   4. Another Way of Using Generic Types
<code>
public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
        List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
                @Override
                public int compare(Map.Entry<K, V> e1, Map.Entry<K, V> e2) {
                        return (e1.getValue()).compareTo(e2.getValue());
                }
        });

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list) {
                result.put(entry.getKey(), entry.getValue());
        }

        return result;
}
</code>

---
https://www.leveluplunch.com/java/examples/sort-order-map-by-values/

Sort map by value

   This example will demonstrate how to sort a map based on values. In the set up, we will create a map
   of candy bars keyed by calories and value of the name of the candy bar. Then each snippet will show
   how to order the hashmap by value. In a comparable example we demonstrate [10]how to sort a
   dictionary or hashmap by value in groovy.

<code>   
Map<Integer, String> CANDY_BARS;

@Before
public void setUp () {

    CANDY_BARS = new HashMap<Integer, String>();
    CANDY_BARS.put(233, "REESE'S P-BUTTER CUPS");
    CANDY_BARS.put(222, "REESE'S P-BUTTER CUPS");
    CANDY_BARS.put(284, "TWIX, CARAMEL");
    CANDY_BARS.put(232, "ALMOND JOY");
    CANDY_BARS.put(149, "YORK PEPPERMINT PATTIE");
}

Straight up Java
   First creating a java Comparator, this snippet will sort map values in ascending order by passing the
   comparator to Collections.sort.
<code>   
@Test
public void sort_map_by_values_java () {

    Comparator<Map.Entry<Integer, String>> byMapValues = new Comparator<Map.Entry<Integer, String>>() {
        @Override
        public int compare(Map.Entry<Integer, String> left, Map.Entry<Integer, String> right) {
            return left.getValue().compareTo(right.getValue());
        }
    };

    // create a list of map entries
    List<Map.Entry<Integer, String>> candyBars = new ArrayList<Map.Entry<Integer, String>>();

    // add all candy bars
    candyBars.addAll(CANDY_BARS.entrySet());

    // sort the collection
    Collections.sort(candyBars, byMapValues);

    logger.info(candyBars);

    assertEquals("ALMOND JOY", candyBars.get(0).getValue());
}
</code>

   Output
[
    232=ALMOND JOY,
    222=REESE'S P-BUTTER CUPS,
    233=REESE'S P-BUTTER CUPS,
    284=TWIX, CARAMEL,
    149=YORK PEPPERMINT PATTIE
]

Java 8
   This snippet will sort hashmap by value in descending order using java 8. Using a lambda expression
   we will create a comparator that will compare each entry value. Next calling calling the Stream.sort
   we will pass the comparator then calling Comparator.reverse.

<code>   
@Test
public void sort_map_by_values_java8() {

    Comparator<Entry<Integer, String>> byValue = (entry1, entry2) -> entry1.getValue().compareTo(
            entry2.getValue());

    Optional<Entry<Integer, String>> val = CANDY_BARS
            .entrySet()
            .stream()
            .sorted(byValue.reversed())
            .findFirst();

    logger.info(val);

    assertEquals("YORK PEPPERMINT PATTIE", val.get().getValue());
}
</code>

Google Guava
   First lets define comparator using [11]guava's fluent Ordering utility that will be used in the
   snippets below.

<code>
Ordering<Map.Entry<Integer, String>> byMapValues = new Ordering<Map.Entry<Integer, String>>() {
   @Override
   public int compare(Map.Entry<Integer, String> left, Map.Entry<Integer, String> right) {
        return left.getValue().compareTo(right.getValue());
   }
};
</code>

Natural order
   This snippet will show how to sort a hashmap based on values using guava ordering comparator class.
   
<code>   
@Test
public void sort_map_by_values_guava () {

    // create a list of map entries
    List<Map.Entry<Integer, String>> candyBars = Lists.newArrayList(CANDY_BARS.entrySet());

    Collections.sort(candyBars, byMapValues);

    logger.info(candyBars);

    assertEquals("ALMOND JOY", candyBars.get(0).getValue());
}
</code>

   Output
[
    232=ALMOND JOY,
    222=REESE'S P-BUTTER CUPS,
    233=REESE'S P-BUTTER CUPS,
    284=TWIX, CARAMEL,
    149=YORK PEPPERMINT PATTIE
]

Reverse order
   Using the Ordering object created above, we will call the Ordering.reverse which will sort the map in
   descending order.
   
<code>   
@Test
public void sort_map_by_values_guava_reverse () {

    // create a list of map entries
    List<Map.Entry<Integer, String>> candyBars = Lists.newArrayList(CANDY_BARS.entrySet());

    Collections.sort(candyBars, byMapValues.reverse());

    logger.info(candyBars);

    assertEquals("YORK PEPPERMINT PATTIE", candyBars.get(0).getValue());
}
</code>

   Output
[
    149=YORK PEPPERMINT PATTIE,
    284=TWIX, CARAMEL,
    222=REESE'S P-BUTTER CUPS,
    233=REESE'S P-BUTTER CUPS,
    232=ALMOND JOY
]


---
http://pragmaticnotes.com/2017/08/10/benchmarking-approaches-to-sort-java-map-by-value/

Benchmarking Approaches to Sort Java Map by Value

   As the name suggests, this blog tries to explore a few ways one could use to sort a Java [16]Map by
   values it contains and present a quick comparison of these approaches.

   Alright, first things first, sorting a Map by Value is not supported directly through a JDK API,
   at least until Java 8, so one needs to write some code to do that. Java 8 has a somewhat direct API
   and we will explore that too as one of the approaches.

   So, without wasting any time, let us directly dive into the approaches.

Using TreeMap
   When one thinks of Java Maps and sorting, the first abstraction that comes to mind is [18]TreeMap, an
   implementation of the [19]SortedMap interface, provided within the JDK itself. It stores pairs,
   maintained in a sorted order. So one idea could be to create a [20]TreeMap from the Map you want to
   sort and you are done!!

   Well, that is easier said that done, because by default, the ordering in a [21]TreeMap is a function
   of the natural sorting order of the Key, assuming that the Key implements Comparable interface.
   Alternately, sorting can also be governed by providing an implementation of [22]Comparator interface
   during creation of the Map.  However, even with a custom [23]Comparator, the sort order is defined by
   the Keys.

   Essentially in terms of code, the [24]Comparator instance you provide to a [25]TreeMap would receive
   the two keys to compare as inputs to the compare method.

   Considering that our key for the Map is Employee class and value is an Integer, our [26]TreeMap
   definition to have the TreeMap sorted by employee name would look something like
   
Map<Employee, Integer> sortedMap = new TreeMap<>(new Comparator<Employee>() {
    @Override
    public int compare(Employee o1, Employee o2) {
        return o1.getName().compareTo(o2.getName());
    }
});

   As you can observe, since there is no reference to the values in the [28]Comparator code, the order
   will be driven by the Keys. But we are looking at sorting by values.

   Alright, let me break the suspense!!!

   The solution is simple enough – we have the Employee objects (which are Keys in the original Map as
   well), and we have the original Map that we want to sort. Why not look up the Values associated with
   the Keys in the Comparator code and then use the values to drive the compareTo. Here is a sample
   code snippet.
   
//Map<Employee, Integer> map ... original Map that needs to be sorted
Map<Employee, Integer> sorted = new TreeMap<>(new Comparator<Employee>() {
    @Override
    public int compare(Employee o1, Employee o2) {
       Integer o1Value = map.get(o1);
       Integer o2Value = map.get(o2);
       return o1Value.compareTo(o2Value);
    }
});
sorted.putAll(map);

   Alright, so we have learnt one smart way to use a TreeMap and sort a Map by values!!!

   Let us look at another way.

Using Map.Entry collection
   Any Java Map can return a Collection of Map.Entry objects. And we know how easy it is to sort a
   collection in Java. So, we can grab the collection of Map.Entry objects, turn it into a List,
   sort the list by the Value object within Map.Entry objects, and then create a new
   LinkedHashMap and insert all the Map.Entry objects from the sorted list. I realise it sounds a
   bit complex, but a look at code would make it much more easier. So, here we go ...

List<Entry<Employee, Integer>> list = new LinkedList<>(map.entrySet());
Collections.sort(list, new Comparator<Map.Entry<Employee, Integer>>() {
    @Override
    public int compare(Entry<Employee, Integer> o1, Entry<Employee, Integer> o2) {
        return o1.getValue().compareTo(o2.getValue());
    }
});

Map<Employee, Integer> sorted = new LinkedHashMap<>(list.size());
    for (Entry<Employee, Integer> entry : list) {
    sorted.put(entry.getKey(), entry.getValue());
}

   Alright, all of the above certainly makes sense, however there is some work to do – one has to come
   up with an approach, and implement it in code, unit test it and so on. What if there is something
   ready to use ... .after all, we are in the age of read to eat meals.

   Here comes Java 8 to the rescue!!!

Using Java 8
Map<Employee, Integer> java8Approach =
map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(
Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

   As you may observe, Java 8 certainly does that in style!!! Well, if you are familiar with Java 8,
   then you can easily skim through what is being done. For those who are not, this is nothing but
   our Map.Entry collection approach, at least logically, with use of some Java 8 specific features like
   streams, mappers and collectors.

   Here is a quick way to understand it –
     * Think of stream() as a way to iterate over a view of the entryset
     * sorted(Map.Entry.comparingByValue) is like running a Comparator with value used for
       comparison, just that this is provided out of the box by Java 8
     * The call to collect() is to accumulate the results of the above two operations into a new
       LinkedHashMap

Comparison of Approaches
   So, all in all, we have looked at three approaches of achieving the same (well it is not exactly
   same, because the TreeMap implementation lets us have a running sorted Map that maintains the
   sorted order all along its life, while the other two approaches give us a static sorted Map when
   asked for).  So that is one big difference.

   Let us now compare these on another aspect, that is how do they perform on timing.

   To start with, one may think that the TreeMap approach may probably be better since it is based
   on the binary tree idea, and if you think alike, a big surprise awaits you.

   The average time taken for sorting a Map containing close to 2 million entries using each of the
   above described approaches is as follows:

   TreeMap approach: ~15000 milliseconds

   Map.Entry Collection approach: ~6010 milliseconds

   Java 8 approach: ~5500 milliseconds

   As you may observe, the TreeMap approach is in fact the costliest of all!! Why so?

   On the first look, the not-so-obvious reason appears to lie hidden in the code we wrote up in our
   Comparator we passed to the TreeMap. A careful look at the code would make one realise that
   there are two additional Map lookup operations (get calls to the original Map) involved for every
   comparison call. Obviously, these would consume some additional time. So, I tried segregating the
   lookup time from the overall time, post which, one would expect to see comparable performance.
   However, that was not case. It appears so that the lookup time is just half of the overall time,
   which means the other half is spent populating the TreeMap and it is still way higher than the
   other two approaches in our example above. WHY? The reason is again because of a “kind of lookup”.
   The TreeMap would perform a typical binary tree element addition operation to find the right
   place for the new element, and this would be done for every new element.

   So, the learning here is very simple. Its not only important to choose the right algorithm, its
   equally important to choose the right data structures to perform the task at hand. TreeMap is
   useful in cases where the elements in the Map continually need to be maintained in sorted order.
   However there is a cost involved for maintaining that order on an ongoing basis. So, in cases where
   getting the elements in a sorted fashion is a one time need, the other techniques outlined would
   payoff well.

   Happy coding!! Happy Exploring!!
