filename: jv_linked-list-tutorials-multif_20190517.txt
https://crunchify.com/how-to-implement-a-linkedlist-class-from-scratch-in-java/

How To Implement a LinkedList Class From Scratch In Java
July 16th, 2017

Crunchify Java LinkedList Implementation Tutorial
   If you're actually building a real production system, then yes, you'd typically just use the stuff in
   the standard library if what you need is available there. That said, don't think of this as a
   pointless exercise. It's good to understand how things work, and understanding linked lists is an
   important step towards understanding more complex data structures, many of which don't exist in the
   standard libraries.

   There are some differences between the way you're creating a linked list and the way the Java
   collections API does it. The Collections API is trying to adhere to a more complicated
   interface. Your LinkedList will always have at least one element. With this kind of setup you'd use
   null for when you need an empty list. Think of "next" as being "the rest of the list". In fact many
   people would call it "tail" instead of "next".

   Here's a diagram of a singly LinkedList:

  HEAD 
   |   +--+--+   +--+--+   +--+--+   +--+--+
   +-->|01|  --->|02|  --->|03|  --->|04|  --->NULL
       +--+--+   +--+--+   +--+--+   +--+--+

   Another must read:
     ***1 How to Iterate through LinkedList Instance in Java?
     ***2 Java: How to Find Middle Element of LinkedList?

What's the best way to make a linkedlist in Java from scratch?

   Well, here is a simplest implementation of LinkedList Class in Java.

LinkedListTest.java

<code>
package crunchify.com.tutorial;

/**
* @author Crunchify.com
* version: 1.2
* last updated: 11/10/2015
*/

public class LinkedListTest {
    public static LinkedList c_List;

    public static void main(String[] args) {

        // Default constructor - let's put "0" into head element.
        c_List = new LinkedList();
        
        // add more elements to LinkedList
        c_List.add("1");
        c_List.add("2");
        c_List.add("3");
        c_List.add("4");
        c_List.add("5");
        
        /*
        * Please note that primitive values can not be added into LinkedList directly. They must be converted
        * to their corresponding wrapper class.
        */
        
        System.out.println("Print: c_List: \t\t" + c_List);
        System.out.println(".size(): \t\t\t\t" + c_List.size());
        System.out.println(".get(3): \t\t\t\t" + c_List.get(3) + " (get element at index:3 - list starts from 0)");
        System.out.println(".remove(2): \t\t\t\t" + c_List.remove(2) + " (element removed)");
        System.out.println(".get(3): \t\t\t\t" + c_List.get(3) + " (get element at index:3 - list starts from 0)");
        System.out.println(".size(): \t\t\t\t" + c_List.size());
        System.out.println("Print again: c_List: \t" + c_List);
    }
}

class LinkedList {

    private static int counter;
    private Node head;
    
    // Default constructor
    public LinkedList() {
    
    }
    
    // appends the specified element to the end of this list.
    public void add(Object data) {
    
        // Initialize Node only in case of 1st element
        if (head == null) {
            head = new Node(data);
        }
    
        Node c_Temp = new Node(data);
        Node c_Current = head;
        
        // Let's check for NPE before iterate over c_Current
        if (c_Current != null) {
        
            // starting at the head node, crawl to the end of the list and then add element after last node
            while (c_Current.getNext() != null) {
                c_Current = c_Current.getNext();
            }
            
            // the last node's "next" reference set to our new node
            c_Current.setNext(c_Temp);
        }
        
        // increment the number of elements variable
        incrementCounter();
    }
    
    private static int getCounter() {
        return counter;
    }
    
    private static void incrementCounter() {
        counter++;
    }
    
    private void decrementCounter() {
        counter--;
    }
    
    // inserts the specified element at the specified position in this list
    public void add(Object data, int index) {
        Node c_Temp = new Node(data);
        Node c_Current = head;
        
        // Let's check for NPE before iterate over c_Current
        if (c_Current != null) {
            // crawl to the requested index or the last element in the list, whichever comes first
            for (int i = 0; i < index && c_Current.getNext() != null; i++) {
                c_Current = c_Current.getNext();
            }
        }
        
        // set the new node's next-node reference to this node's next-node reference
        c_Temp.setNext(c_Current.getNext());
        
        // now set this node's next-node reference to the new node
        c_Current.setNext(c_Temp);
        
        // increment the number of elements variable
        incrementCounter();
    }
    
    /** returns the element at the specified position in this list  */
    public Object get(int index) {
        // index must be 1 or higher
        if (index < 0)
            return null;
        Node c_Current = null;
        if (head != null) {
            c_Current = head.getNext();
            for (int i = 0; i < index; i++) {
                if (c_Current.getNext() == null)
                return null;
            
                c_Current = c_Current.getNext();
            }
            
            return c_Current.getData();
        }
        return c_Current;
    
    }
    
    // removes the element at the specified position in this list.
    public boolean remove(int index) {
        
        // if the index is out of range, exit
        if (index < 1 || index > size())
        return false;
        
        Node c_Current = head;
        if (head != null) {
            for (int i = 0; i < index; i++) {
                if (c_Current.getNext() == null)
                return false;
            
                c_Current = c_Current.getNext();
            }
            
            c_Current.setNext(c_Current.getNext().getNext());
            
            // decrement the number of elements variable
            decrementCounter();
            return true;
            
        }
        return false;
    }
    
    // returns the number of elements in this list.
    public int size() {
        return getCounter();
    }
    
    public String toString() {
        String output = "";
        
        if (head != null) {
            Node c_Current = head.getNext();
            while (c_Current != null) {
                output += "[" + c_Current.getData().toString() + "]";
                c_Current = c_Current.getNext();
            }
            
        }
        return output;
    }
    
    private class Node {
        // reference to the next node in the chain, or null if there isn't one.
        Node next;
        
        // data carried by this node. could be of any type you need.
        Object data;
        
        // Node constructor
        public Node(Object dataValue) {
            next = null;
            data = dataValue;
        }
        
        // another Node constructor if we want to specify the node to point to.
        @SuppressWarnings("unused")
        public Node(Object dataValue, Node nextValue) {
            next = nextValue;
            data = dataValue;
        }
        
        // these methods should be self-explanatory
        public Object getData() {
            return data;
        }
        
        @SuppressWarnings("unused")
        public void setData(Object dataValue) {
            data = dataValue;
        }
        
        public Node getNext() {
            return next;
        }
        
        public void setNext(Node nextValue) {
            next = nextValue;
        }

    }
}
</code>

Few things:
   Here we are initialize Node only while adding 1st element.

// Initialize Node only incase of 1st element
if (head == null) {
    head = new Node(data);
}

Result:
   Print: c_List: [1][2][3][4][5]
   .size(): 5
   .get(3): 4 (get element at index:3 - list starts from 0)
   .remove(2): true (element removed)
   .get(3): 5 (get element at index:3 - list starts from 0)
   .size(): 4
   Print again: c_List: [1][2][4][5]

   Enhancements to this implementation include making it a double-linked list, adding methods
   to insert and delete from the middle or end, and by adding get and sort methods as well.


---
[***1] https://crunchify.com/how-to-iterate-through-linkedlist-instance-in-java/

How to Iterate through LinkedList Instance in Java?
July 17th, 2017

3 Ways to Iterate through LinkedList - Crunchify

   LinkedList implementation of the List interface. Implements all optional list operations, and
   permits all elements (including null). In addition to implementing the List interface,
   the LinkedList class provides uniformly named methods to get, remove and insert an element at the
   beginning and end of the list. These operations allow linked lists to be used as a stack, queue,
   or double-ended queue. linked-list

   The class implements the Deque interface, providing first-in-first-out queue operations
   for add, poll, along with other stack and deque operations.

   All of the operations perform as could be expected for a doubly-linked list. Operations that index
   into the list will traverse the list from the beginning or the end, whichever is closer to the
   specified index.

   Note that this implementation is not synchronized. If multiple threads access a linked list
   concurrently, and at least one of the threads modifies the list structurally, it must be synchronized
   externally.

   Lets first instantiate and populate a LinkedList implementation which contains the names of top Bay
   Area's Companies. Java Code:
   
LinkedListIterator.java

<code>
package crunchify.com.tutorials;

import java.util.LinkedList;
import java.util.ListIterator;

/**
* @author Crunchify.com
* How to iterate through LinkedList in Java?
*/

public class LinkedListIterator {

    public static void main(String[] args) {
        LinkedList<String> linkedList = new LinkedList<String>();
        linkedList.add("Paypal");
        linkedList.add("Google");
        linkedList.add("Yahoo");
        linkedList.add("IBM");
        linkedList.add("Facebook");
        
        // ListIterator approach
        System.out.println("ListIterator Approach: ==========");
        ListIterator<String> listIterator = linkedList.listIterator();
        while (listIterator.hasNext()) {
            System.out.println(listIterator.next());
        }
        
        System.out.println("\nLoop Approach: ==========");
        // Traditional for loop approach
        for (int i = 0; i < linkedList.size(); i++) {
            System.out.println(linkedList.get(i));
        }
        
        // Java8 Loop
        System.out.println("\nJava8 Approach: ==========");
        
        // forEach Performs the given action for each element of the Iterable until all elements have been processed or
        // the action throws an exception.
        linkedList.forEach(System.out::println);
    }
    
}
</code>

Output:
   ListIterator Approach:
   Paypal
   Google
   Yahoo
   IBM
   Facebook

   Loop Approach:
   Paypal
   Google
   Yahoo
   IBM
   Facebook

   Java8 Approach:
   Paypal
   Google
   Yahoo
   IBM
   Facebook


---
[***2] https://crunchify.com/java-how-to-find-middle-element-of-linkedlist/

In Java How to Find Middle Element of LinkedList?
October 5th, 2016

   Below is the simplest way to find Middle Element of LinkedList:
FindMiddleInLinkedList.java

<code>
package com.crunchify.tutorials;

import java.util.LinkedList;
import java.util.List;

public class FindMiddleInLinkedList {
    /**
    * @author Crunchify.com
    */
    public static void main(String[] args) {
        List<String> list = new LinkedList<String>();
        for (int i = 0; i < 100; i++) {
            list.add(String.valueOf(i));
        }
        
        System.out.println("Middle Element of Linked List is: " + FindMiddle1(list));
    }
    
    private static String FindMiddle1(List<String> list) {
        int size = list.size();
        int middle = (size / 2);
        return list.get(middle).toString();
    }
}
</code>

   Output:
   Middle Element of Linked List is: 50


---
https://www.callicoder.com/java-linkedlist/

Java LinkedList Tutorial with Examples
Apr 25, 2018

   Java LinkedList is a doubly linked list implementation of Java's List and Deque interfaces. It is
   part of Java's collections framework. Here is the class hierarchy of LinkedList -
   Java LinkedList in Collection Hierarchy

   Following are some key points to note about LinkedList in Java -
     * Java LinkedList maintains the insertion order of the elements.
     * LinkedList can have duplicate and null values.
     * The LinkedList class implements Queue and Deque interfaces. Therefore, It can also be
       used as a Queue, Deque or Stack.
     * Java LinkedList is not thread-safe. You must explicitly synchronize concurrent modifications to
       the LinkedList in a multi-threaded environment.

Java ArrayList vs LinkedList
   Both ArrayList and LinkedList implement the List interface. However, they differ completely in the
   way they store and link to the elements.

   An ArrayList stores the elements sequentially based on their index. However, a LinkedList uses a
   doubly-linked list to store its elements.

   A doubly-linked list consists of a collection of nodes, where each node contains three fields -
     * The data at that node.
     * A pointer/reference to the next node in the list.
     * A pointer/reference to the previous node in the list.

   Following is a visual of ArrayList and LinkedList data structures:
   
   Java ArrayList representation
   +----+----+----+----+
   | 30 | 17 | 42 | 28 |
   +----+----+----+----+
   
   Java LinkedList representation
   +------+    +-+----+-+    +-+----+-+    +-+----+-+    +-+----+-+    +------+
   | HEAD |<---| | 30 | |<---| | 17 | |<---| | 42 | |<---| | 28 | |--->| TAIL |
   |      |    | |    | |--->| |    | |--->| |    | |--->| |    | |    |      |
   +------+    +-+----+-+    +-+----+-+    +-+----+-+    +-+----+-+    +------+

   
   Following are some key differences between LinkedList and ArrayList:
     * A LinkedList consumes more memory than an ArrayList because it also stores the next and previous
       references along with the data.
     * You can access an element in an ArrayList in O(1) time. But it takes O(n) time to access an
       element in a LinkedList because it needs to traverse to the desired element by following the
       next/prev references.
     * Adding or removing elements are usually slower in an ArrayList compared to LinkedList. This is
       because the elements in the ArrayList needs to be shifted if a new element is added in the middle
       of the ArrayList. The ArrayList might also need to be resized to accommodate the new element.
       Similarly, in case of removal, the elements in the ArrayList needs to be shifted to the new
       positions.

Creating a LinkedList and adding new elements to it

   The following example shows how to create a LinkedList and add new elements to it. Notice the uses of
   addFirst() and addLast() methods in the example. These methods come from the Deque interface.

<code>
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class CreateLinkedListExample {
    public static void main(String[] args) {
        // Creating a LinkedList
        LinkedList<String> friends = new LinkedList<>();

        // Adding new elements to the end of the LinkedList using add() method.
        friends.add("Rajeev");
        friends.add("John");
        friends.add("David");
        friends.add("Chris");

        System.out.println("Initial LinkedList : " + friends);

        // Adding an element at the specified position in the LinkedList
        friends.add(3, "Lisa");
        System.out.println("After add(3, \"Lisa\") : " + friends);

        // Adding an element at the beginning of the LinkedList
        friends.addFirst("Steve");
        System.out.println("After addFirst(\"Steve\") : " + friends);

        // Adding an element at the end of the LinkedList (This method is equivalent to the add() method)
        friends.addLast("Jennifer");
        System.out.println("After addLast(\"Jennifer\") : " + friends);

        // Adding all the elements from an existing collection to the end of the LinkedList
        List<String> familyFriends = new ArrayList<>();
        familyFriends.add("Jesse");
        familyFriends.add("Walt");

        friends.addAll(familyFriends);
        System.out.println("After addAll(familyFriends) : " + friends);
    }
}
</code>

# Output
Initial LinkedList : [Rajeev, John, David, Chris]
After add(3, "Lisa") : [Rajeev, John, David, Lisa, Chris]
After addFirst("Steve") : [Steve, Rajeev, John, David, Lisa, Chris]
After addLast("Jennifer") : [Steve, Rajeev, John, David, Lisa, Chris, Jennifer]
After addAll(familyFriends) : [Steve, Rajeev, John, David, Lisa, Chris, Jennifer, Jesse, Walt]


Retrieving elements from a LinkedList
   The following example shows:
     * How to get the first element in the LinkedList.
     * How to get the last element in the LinkedList.
     * How to get the element at a given index in the LinkedList.

<code>
import java.util.LinkedList;

public class RetrieveLinkedListElementsExample {
    public static void main(String[] args) {
        // A LinkedList containing Stock Prices of a company for the last 6 days
        LinkedList<Double> stockPrices = new LinkedList<>();

        stockPrices.add(45.00);
        stockPrices.add(51.00);
        stockPrices.add(62.50);
        stockPrices.add(42.75);
        stockPrices.add(36.80);
        stockPrices.add(68.40);

        // Getting the first element in the LinkedList using getFirst()
        // The getFirst() method throws NoSuchElementException if the LinkedList is empty
        Double firstElement = stockPrices.getFirst();
        System.out.println("Initial Stock Price : " + firstElement);

        // Getting the last element in the LinkedList using getLast()
        // The getLast() method throws NoSuchElementException if the LinkedList is empty
        Double lastElement = stockPrices.getLast();
        System.out.println("Current Stock Price : " + lastElement);

        // Getting the element at a given position in the LinkedList
        Double stockPriceOn3rdDay = stockPrices.get(2);
        System.out.println("Stock Price on 3rd Day : " + stockPriceOn3rdDay);
    }
}
</code>

# Output
Initial Stock Price : 45.0
Current Stock Price : 68.4
Stock Price on 3rd Day : 62.5


Removing elements from a LinkedList
   The example below shows:
     * How to remove the first element in the LinkedList.
     * How to remove the last element in the LinkedList.
     * How to remove the first occurrence of a given element in the LinkedList.
     * How to remove all the elements that satisfy a given predicate from the LinkedList.
     * How to clear the LinkedList completely.

<code>
import java.util.LinkedList;

public class RemoveElementsFromLinkedListExample {
    public static void main(String[] args) {
        LinkedList<String> programmingLanguages = new LinkedList<>();

        programmingLanguages.add("Assembly");
        programmingLanguages.add("Fortran");
        programmingLanguages.add("Pascal");
        programmingLanguages.add("C");
        programmingLanguages.add("C++");
        programmingLanguages.add("Java");
        programmingLanguages.add("C#");
        programmingLanguages.add("Kotlin");

        System.out.println("Initial LinkedList = " + programmingLanguages);

        // Remove the first element in the LinkedList
        String element = programmingLanguages.removeFirst();  // Throws NoSuchElementException if the LinkedLi
st is empty
        System.out.println("Removed the first element " + element + " => " + programmingLanguages);

        // Remove the last element in the LinkedList
        element = programmingLanguages.removeLast();   // Throws NoSuchElementException if the LinkedList is e
mpty
        System.out.println("Removed the last element " + element + " => " + programmingLanguages);

        // Remove the first occurrence of the specified element from the LinkedList
        boolean isRemoved = programmingLanguages.remove("C#");
        if(isRemoved) {
            System.out.println("Removed C# => " + programmingLanguages);
        }

        // Remove all the elements that satisfy the given predicate
        programmingLanguages.removeIf(programmingLanguage -> programmingLanguage.startsWith("C"));
        System.out.println("Removed elements starting with C => " + programmingLanguages);

        // Clear the LinkedList by removing all elements
        programmingLanguages.clear();
        System.out.println("Cleared the LinkedList => " + programmingLanguages);
    }
}
</code>

# Output
Initial LinkedList = [Assembly, Fortran, Pascal, C, C++, Java, C#, Kotlin]
Removed the first element Assembly => [Fortran, Pascal, C, C++, Java, C#, Kotlin]
Removed the last element Kotlin => [Fortran, Pascal, C, C++, Java, C#]
Removed C# => [Fortran, Pascal, C, C++, Java]
Removed elements starting with C => [Fortran, Pascal, Java]
Cleared the LinkedList => []


Searching for elements in a LinkedList
The example below shows:
     * How to check if an element exists in a LinkedList.
     * How to find the index of the first occurrence of an element in the LinkedList.
     * How to find the index of the last occurrence of an element in the LinkedList.


<code>
import java.util.LinkedList;

public class SearchLinkedListExample {
    public static void main(String[] args) {
        LinkedList<String> employees = new LinkedList<>();

        employees.add("John");
        employees.add("David");
        employees.add("Lara");
        employees.add("Chris");
        employees.add("Steve");
        employees.add("David");

        // Check if the LinkedList contains an element
        System.out.println("Does Employees LinkedList contain \"Lara\"? : " + employees.contains("Lara"));

        // Find the index of the first occurrence of an element in the LinkedList
        System.out.println("indexOf \"Steve\" : " + employees.indexOf("Steve"));
        System.out.println("indexOf \"Mark\" : " + employees.indexOf("Mark"));

        // Find the index of the last occurrence of an element in the LinkedList
        System.out.println("lastIndexOf \"David\" : " + employees.lastIndexOf("David"));
        System.out.println("lastIndexOf \"Bob\" : " + employees.lastIndexOf("Bob"));
    }
}
</code>

# Output
Does Employees LinkedList contain "Lara"? : true
indexOf "Steve" : 4
indexOf "Mark" : -1
lastIndexOf "David" : 5
lastIndexOf "Bob" : -1

Iterating over a LinkedList
   The following example shows how to iterate over a LinkedList using
     * Java 8 forEach() and lambda expression.
     * iterator()
     * iterator() and Java 8 forEachRemaining() method
     * descendingIterator()
     * listIterator()
     * simple for-each loop.

<code>
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;

public class IterateOverLinkedListExample {
    public static void main(String[] args) {
        LinkedList<String> humanSpecies = new LinkedList<>();

        humanSpecies.add("Homo Sapiens");
        humanSpecies.add("Homo Neanderthalensis");
        humanSpecies.add("Homo Erectus");
        humanSpecies.add("Home Habilis");

        System.out.println("=== Iterate over a LinkedList using Java 8 forEach and lambda ===");
        humanSpecies.forEach(name -> {
            System.out.println(name);
        });


        System.out.println("\n=== Iterate over a LinkedList using iterator() ===");
        Iterator<String> humanSpeciesIterator = humanSpecies.iterator();
        while (humanSpeciesIterator.hasNext()) {
            String speciesName = humanSpeciesIterator.next();
            System.out.println(speciesName);
        }

        System.out.println("\n=== Iterate over a LinkedList using iterator() and Java 8 forEachRemaining() method ===");
        humanSpeciesIterator = humanSpecies.iterator();
        humanSpeciesIterator.forEachRemaining(speciesName -> {
            System.out.println(speciesName);
        });

        System.out.println("\n=== Iterate over a LinkedList using descendingIterator() ===");
        Iterator<String> descendingHumanSpeciesIterator = humanSpecies.descendingIterator();
        while (descendingHumanSpeciesIterator.hasNext()) {
            String speciesName = descendingHumanSpeciesIterator.next();
            System.out.println(speciesName);
        }


        System.out.println("\n=== Iterate over a LinkedList using listIterator() ===");
        // ListIterator can be used to iterate over the LinkedList in both forward and backward directions
        // In this example, we start from the end of the list and traverse backwards
        ListIterator<String> humanSpeciesListIterator = humanSpecies.listIterator(humanSpecies.size());
        while (humanSpeciesListIterator.hasPrevious()) {
            String speciesName = humanSpeciesListIterator.previous();
            System.out.println(speciesName);
        }

        System.out.println("\n=== Iterate over a LinkedList using simple for-each loop ===");
        for(String speciesName: humanSpecies) {
            System.out.println(speciesName);
        }
    }
}
</code>

# Output
=== Iterate over a LinkedList using Java 8 forEach and lambda ===
Homo Sapiens
Homo Neanderthalensis
Homo Erectus
Home Habilis

=== Iterate over a LinkedList using iterator() ===
Homo Sapiens
Homo Neanderthalensis
Homo Erectus
Home Habilis

=== Iterate over a LinkedList using iterator() and Java 8 forEachRemaining() method ===
Homo Sapiens
Homo Neanderthalensis
Homo Erectus
Home Habilis

=== Iterate over a LinkedList using descendingIterator() ===
Home Habilis
Homo Erectus
Homo Neanderthalensis
Homo Sapiens

=== Iterate over a LinkedList using listIterator() ===
Home Habilis
Homo Erectus
Homo Neanderthalensis
Homo Sapiens

=== Iterate over a LinkedList using simple for-each loop ===
Homo Sapiens
Homo Neanderthalensis
Homo Erectus
Home Habilis

Conclusion
   That's all folks! In this article, you learned what is a LinkedList, what are the differences between
   a LinkedList and an ArrayList, how to create a LinkedList, how to add, remove and search for elements
   in a LinkedList, and how to iterate over a LinkedList.


---
https://www.geeksforgeeks.org/linked-list-set-1-introduction/

Linked List | Set 1 (Introduction)

   Like arrays, Linked List is a linear data structure. Unlike arrays, linked list elements are not
   stored at contiguous location; the elements are linked using pointers.

  HEAD 
   |   +--+--+   +--+--+   +--+--+   +--+--+
   +-->|A |  |-->|B |  |-->|C |  |-->|D |  |-->NULL
       +--+--+   +--+--+   +--+--+   +--+--+
        |  |
        |  +-- NEXT
        +----- DATA
   
   
Why Linked List?
   Arrays can be used to store linear data of similar types, but arrays have following limitations.
   1) The size of the arrays is fixed: So we must know the upper limit on the number of elements in
   advance. Also, generally, the allocated memory is equal to the upper limit irrespective of the usage.
   2) Inserting a new element in an array of elements is expensive, because room has to be created for
   the new elements and to create room existing elements have to shifted.

   For example, in a system if we maintain a sorted list of IDs in an array id[].

   id[] = [1000, 1010, 1050, 2000, 2040].

   And if we want to insert a new ID 1005, then to maintain the sorted order, we have to move all the
   elements after 1000 (excluding 1000).
   Deletion is also expensive with arrays until unless some special techniques are used. For example, to
   delete 1010 in id[], everything after 1010 has to be moved.

   Advantages over arrays
   1) Dynamic size
   2) Ease of insertion/deletion

   Drawbacks:
   1) Random access is not allowed. We have to access elements sequentially starting from the first
   node. So we cannot do binary search with linked lists efficiently with its default implementation.
   Read about it here.
   2) Extra memory space for a pointer is required with each element of the list.
   3) Not cache friendly. Since array elements are contiguous locations, there is locality of reference
   which is not there in case of linked lists.

   Representation:
   A linked list is represented by a pointer to the first node of the linked list. The first node is
   called head. If the linked list is empty, then value of head is NULL.
   Each node in a list consists of at least two parts:
   1) data
   2) Pointer (Or Reference) to the next node
   In C, we can represent a node using structures. Below is an example of a linked list node with an
   integer data.
   In Java or C#, LinkedList can be represented as a class and a Node as a separate class. The
   LinkedList class contains a reference of Node class type.

<code>
class LinkedList {
    Node head;  // head of list

    /* Linked list Node*/
    class Node {
        int data;
        Node next;

        // Constructor to create a new node
        // Next is by default initialized
        // as null
        Node(int d) {data = d;}
    }
}
</code>

First Simple Linked List: Let us create a simple linked list with 3 nodes.

<code>
// A simple Java program to introduce a linked list
class LinkedList {
    Node head;  // head of list

    /* Linked list Node. This inner class is made static so that main() can access it */
    static class Node {
        int data;
        Node next;
        Node(int d)  { data = d;  next=null; } // Constructor
    }

    /* method to create a simple linked list with 3 nodes*/
    public static void main(String[] args) {
        /* Start with the empty list. */
        LinkedList llist = new LinkedList();

        llist.head  = new Node(1);
        Node second = new Node(2);
        Node third  = new Node(3);

        /* Three nodes have been allocated  dynamically.
          We have refernces to these three blocks as first,
          second and third

          llist.head        second              third
             |                |                  |
             |                |                  |
         +----+------+     +----+------+     +----+------+
         | 1  | null |     | 2  | null |     |  3 | null |
         +----+------+     +----+------+     +----+------+
         
        */

        llist.head.next = second; // Link first node with the second node

        /*  Now next of first Node refers to second.  So they
            both are linked.

         llist.head        second              third
            |                |                  |
            |                |                  |
        +----+------+     +----+------+     +----+------+
        | 1  |  o-------->| 2  | null |     |  3 | null |
        +----+------+     +----+------+     +----+------+ */

        second.next = third; // Link second node with the third node

        /*  Now next of second Node refers to third.  So all three
            nodes are linked.

         llist.head        second              third
            |                |                  |
            |                |                  |
        +----+------+     +----+------+     +----+------+
        | 1  |  o-------->| 2  |  o-------->|  3 | null |
        +----+------+     +----+------+     +----+------+
        
        */
    }
}
</code>

Linked List Traversal
   In the previous program, we have created a simple linked list with three nodes. Let us traverse the
   created list and print the data of each node. For traversal, let us write a general purpose function
   printList() that prints any given list.


<code>
// A simple Java program for traversal of a linked list
class LinkedList {
    Node head;  // head of list

    /* Linked list Node.  This inner class is made static so that main() can access it */
    static class Node {
        int data;
        Node next;
        Node(int d)  { data = d;  next=null; } // Constructor
    }

    /* This function prints contents of linked list starting from head */
    public void printList() {
        Node n = head;
        while (n != null) {
            System.out.print(n.data+" ");
            n = n.next;
        }
    }

    /* method to create a simple linked list with 3 nodes*/
    public static void main(String[] args) {
        /* Start with the empty list. */
        LinkedList llist = new LinkedList();

        llist.head       = new Node(1);
        Node second      = new Node(2);
        Node third       = new Node(3);

        llist.head.next = second; // Link first node with the second node
        second.next = third; // Link first node with the second node

        llist.printList();
    }
}
</code>

   Output:
 1  2  3


---
