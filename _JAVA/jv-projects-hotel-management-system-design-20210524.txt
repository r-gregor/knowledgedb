filename: jv_projects_hotel-management-system-design_20210524.txt
https://stackoverflow.com/questions/57722275/hotel-management-system-design-in-java

hotel management system design in java

   I am designing a simple hotel management system in Java but I am stuck in my design.

   In my main function, I create 2 Rooms and one guest. I want the guest class to be able to bookRoom
   and for a Room to check if it isAvailable.

   Since I am not using any databases, I am storing my rooms in a HashMap where the key is the Room and
   the value is a Boolean indicating whether it's booked or not.

   How would my room class get access to that hashmap? or is that a bad way of designing/thinking about
   the problem?

   similarly, how would my guest class have access to bookRoom which should called isAvailable which is
   a Room method.

   any suggestions would be greately appreciated!

   Guest
<code>
public class Guest {

	String name;
	boolean checkedIn;

	public Guest(String name) {
		this.name = name;
	}

	public void checkIn() {
		setCheckedIn(true);
	}

	public void checkOut() {
		setCheckedIn(false);
	}

	public boolean getStatus() {
		return checkedIn;
	}

	public void setCheckedIn(boolean checkedIn) {
		this.checkedIn = checkedIn;
	}

	public void bookRoom(String type) {
		// check if room of type x is available

		// if yes, create a guest booking

		// if no, return
	}
}
</code>


   Room
<code>
public class Room {

	public enum roomType {
		ONE_BEDRM, TWO_BEDRM, THREE_BEDRM, PENTHOUSE
	}

	public int roomNum;
	public double price;
	public roomType type;

	public Room(int roomNum, double price, roomType type) {
		this.roomNum = roomNum;
		this.price = price;
		this.type = type;
	}

	public boolean isAvailable(Room room) {
		boolean available = availability.get(room); // problem here obviously cause hashmap is defined in main
		if (available) {
			return true;
		}
	return false;
	}

	public int getRoomNumber() {
		return roomNum;
	}
}
</code>


   main
<code>
	public static void main(String[] args) throws Exception {

		Guest mike = new Guest("mike");
		mike.checkIn();
		mike.getStatus();

		HashMap<Room, Boolean> availability = new HashMap<>();

		Room one_bedroom1 = new Room(1001, 100.00, Room.roomType.ONE_BEDRM);
		Room two_bedroom1 = new Room(2001, 200.00, Room.roomType.TWO_BEDRM);

		availability.put(one_bedroom1, true);
		availability.put(two_bedroom1, true);

	}
</code>


   =========================SOLUTION=========================

   Thanks to everyone who helped in the comments! Here are my edits that now work as expected:

   Room
<code>
public class Room {

	public enum roomType {
		ONE_BEDRM, TWO_BEDRM, THREE_BEDRM, PENTHOUSE
	}

	private boolean available;
	private Guest occupant;
	private int roomNum;
	private double price;
	private roomType type;

	public Room(int roomNum, double price, roomType type) {
		this.roomNum = roomNum;
		this.price = price;
		this.type = type;
	}

	public boolean isAvailable() {
		return this.available;
	}

	public boolean getAvailable() {
		return available;
	}

	public void setAvailable(boolean available) {
		this.available = available;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public roomType getRoomType() {
		return type;
	}

	public void setRoomType(roomType type) {
		this.type = type;
	}

	public int getRoomNumber() {
		return roomNum;
	}

	public void setRoomNumber(int roomNum) {
		this.roomNum = roomNum;
	}

	public Guest getGuest() {
		return occupant;
	}

	public void setGuest(Guest occupant) {
		this.occupant = occupant;
	}
}

</code>

   Guest
<code>
public class Guest {

	private String name;
	private boolean checkedIn;
	private Room room;

	public Guest(String name) {
		this.name = name;
	}

	public void checkIn(Room room) {
		if (this.getStatus() == false) {
			this.setCheckedIn(true);
			this.setRoom(room);
		}
	}

	public void checkOut() {
		if (this.getStatus() == true) {
			this.setCheckedIn(false);
			this.setRoom(null);
		}
	}

	public boolean getStatus() {
		return checkedIn;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Room getRoom() {
		return room;
	}

	public void setRoom(Room room) {
		this.room = room;
	}

	public void setCheckedIn(boolean checkedIn) {
		this.checkedIn = checkedIn;
	}

	public void getRoomInfo(Room room) {
		System.out.println("Room # : " + room.getRoomNumber());
		System.out.println("Room price : " + room.getPrice());
		System.out.println("Room type : " + room.getRoomType());
		System.out.println("Room occupant : " + room.getGuest().getName());
	}
}
</code>

   Main
<code>
	public static void main(String[] args) throws Exception {

		Guest mike = new Guest("mike");

		Room one_bedroom1 = new Room(1001, 100.00, Room.roomType.ONE_BEDRM);
		Room two_bedroom1 = new Room(2001, 200.00, Room.roomType.TWO_BEDRM);

		one_bedroom1.setAvailable(true);
		two_bedroom1.setAvailable(true);

		System.out.println(one_bedroom1.isAvailable());

		mike.checkIn(one_bedroom1);
		one_bedroom1.setGuest(mike);
		mike.getRoomInfo(one_bedroom1);
	}
</code>

***
	 * why would your room need access?
	 * 2
	   I would store Rooms in the HashMap with the key being the room number, and the value being the
	   Room object, and I would design the Room obj like following : class Room { private boolean
	   isAvailable; private Guest occupant; private double dailyPrice; private RoomType roomType; /**
	   all getters and setters */ } And Java best practice also state to create classes with the
	   CamelCase format. (Upper letter for each first letter's words) Your access to the HashMap from
	   Room class is not necessary then, if you store the availability in the object itself.
	 * Sounds like Homework ;) I think the availability belongs to the Room class itself. If the purpose
	   of the hashmap is to simulate a database, then create a dedicated class "MockRoomDatabase" or
	   something like that, where you have a unique key (better use a counter since room numbers might
	   change in a real world) and for the values you have the whole Room object. You will also want to
	   provide the same methods for access as in a real database (eg putOne readOne, putMany, readMany,
	   ...)
	 * 2
	   One more advice: generate the Room object with a Builder:
	   en.wikipedia.org/wiki/Builder_pattern#Java You should not have more than 2 args in a
	   constructor and it is likely a real booking application will have much more parameters for a
	   room. This will make testing much easier later!
	 * 1
	   @asus Don't forget to make your attributes private by default. In the POO, it's a very important
	   concept, and you will see that protecting his attributes from being modified directly from
	   another part of the code is later very useful :)

2 Answers:

***
   Why not make availability a member of Room?
<code>
private boolean available;

public void setAvailable(boolean available) {
	this.available = available;
}

public boolean isAvailable() {
	return this.available;
}
</code>

   In main:
one_bedroom1.setAvailable(false);

***
	 * 1
	   Might as well use Project Lombok to generate setters/getters by annotation
	 * 1
	   @Phil yes but when learning Java, I think it's pretty useful to learn with basics, to fully
	   understand how accessibility and encapsulation works. I was happy as a young developer to create
	   my own toString or equals methods for my exercises (and of course to generate my getters and
	   setters with the super IDE feature )
	 * @Phil I am waiting for JEP 359 to be implemented. This will make "solutions" like Project
	   Lombok superfluous.

***
   You can have Guest reference a Room instead of or in addition to a boolean for checkedIn. Then you
   can do mike.chekcIn(one_bedroom1).

   And you can have the Room reference a Guest as well, for example, property occupant

   So when you check-in your guest you set the room property in the Guest and the occupant property in
   the Room.

   With that, it is very easy to know if your room is available or if your guest is checked in.


---

