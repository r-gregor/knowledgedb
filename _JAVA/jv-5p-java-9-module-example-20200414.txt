filename: jv_5p_java-9-module-example_20200414.txt
https://www.concretepage.com/java/java-9/java-module

Java 9 Module Example

   By Arvind Rai, December 15, 2018
   This page will walk through Java 9 Module Example. A Module is a set of packages designed for reuse.
   In Java 9, Java programs are Modules. Java Module is the main feature introduced in Java 9 release.
   In Java we have classes, packages and now modules, too. Before Java 9 module, Java programs are
   packages.
   
   As we know that in Java, a package can access only public methods of another packages. In a large
   code base, where there is large number of packages, any package can access public method of any
   package which was not a better accessibility control. Now using Module, we can control the
   accessibility between packages for public methods of the classes.
   
   A Package is the set of classes and a Module is the set of packages. Public methods of packages are
   only available for packages within the module. We can export the packages from its module to make it
   available to packages of other modules. So only exported packages from a module will be available to
   packages of other modules. We can also export packages to only friend modules and not for all.
   A module is created with module-info.java file name and module keyword is used to specify module
   name. Base module is java.base which is automatically resolved by all modules. java.base module
   contains the packages such as java.lang, java.io, java.net, java.util etc. All the packages exported
   by java.base module are automatically available to all the modules.
   Find the diagram that shows relation between module, packages and classes.
   
                                    [ Module 1 ]
                                         |
                                         V
                    +-----------------------------------------+         
                    |                                         |         
                    V                                         V         
              [ Package 1 ]                             [ Package 2 ]   
                    |                                         |         
                    V                                         V         
          +-------------------+                          [ Class 1 ]    
          |                   |                                         
          V                   V                                         
     [ Class 1 ]         [ Class 2 ]                                    


   Java 9 Platform Module System (JPMS) is a very important software engineering technology. Java 9
   modularity is the result of Project Jigsaw and this will help developers to build and maintain large
   system in simpler way.
   Here we will discuss how to create, compile and run modules in our Java project.

How to Create a Module
   A module is created using module in module-info.java file. module gives a name to module. Other
   keywords that are used for module definition are requires, exports, uses, opens, provides.
   Now we will create a module named as com.address that has com.add package. Find the module definition
   code.
   com.address/module-info.java
module com.address {
    exports com.add;
    requires java.base;
}

   exports exports a package and requires specify a module name required by this module. Here we have
   exported com.add package to make it available to other modules.
   java.base is the base module which is required by all and it is automatically resolved by all
   modules. So we need not to write it in our code. We can write above code as following, too.
   com.address/module-info.java
module com.address {
  exports com.add;
}

   Now suppose we have one more module named as com.employee that requires com.address module. Find the
   code for com.employee module.
   com.employee/module-info.java
module com.employee {
  requires com.address;
}

Example 1: Simple Module
   Here we will create a module with some packages and compile it and run it using command prompt. In
   our example, we will create a module named as com.cp and two packages with some classes. By
   convention we need to keep the source code for the module in the directory that is the name of the
   module. Find the project structure of our demo project.
java-9-demo/
|
|--src/
|   |
|   |--com.cp/
|   |    |
|   |    |--module-info.java
|   |    |
|   |    |--com/
|   |    |   |
|   |    |   |--cp1/
|   |    |   |   |
|   |    |   |   |--Main.java
|   |    |   |
|   |    |   |--cp2/
|   |    |   |   |
|   |    |   |   |--MsgUtil.java
|   |    |   |

   Find the code.
   module-info.java
module com.cp {
}

   In module-info.java, we need not to use requires for java.base module. It will be resolved
   automatically.
   Now find other Java files.
   MsgUtil.java
package com.cp2;
public class MsgUtil {
    public String getMsg() {
        return "Hello World!";
    }
}

   Main.java
package com.cp1;
import com.cp2.MsgUtil;
public class Main {
    public static void main(String[] args) {
        MsgUtil ob = new MsgUtil();
        System.out.println(ob.getMsg());
    }
}

   We will compile the code using command prompt. Go to the java-9-demo directory using command prompt
   and run following command.
javac -d mods/com.cp src/com.cp/module-info.java src/com.cp/com/cp2/MsgUtil.java src/com.cp/com/cp1/Main.java

   1. mods/com.cp is the location to keep compiled Java files. com.cp is the module name. By convention
   we keep source files inside src directory and compiled modules inside mods directory.
   2. Then we specify files to be compiled in the command arguments.
   After compilation we have following project structure with .java and .class files.
java-9-demo/
|
|--src/
|   |
|   |--com.cp/
|   |    |
|   |    |--module-info.java
|   |    |
|   |    |--com/
|   |    |   |
|   |    |   |--cp1/
|   |    |   |   |
|   |    |   |   |--Main.java
|   |    |   |
|   |    |   |--cp2/
|   |    |   |   |
|   |    |   |   |--MsgUtil.java
|   |    |   |
|   |    |   |
|--mods/
|   |
|   |--com.cp/
|   |    |
|   |    |--module-info.class
|   |    |
|   |    |--com/
|   |    |   |
|   |    |   |--cp1/
|   |    |   |   |
|   |    |   |   |--Main.class
|   |    |   |
|   |    |   |--cp2/
|   |    |   |   |
|   |    |   |   |--MsgUtil.class
|   |    |   |

   src is the root directory for source files and mods is the root directory for compiled files.
   Now run the code using command prompt.
java --module-path mods -m com.cp/com.cp1.Main

   Output
Hello World!

   In the above Java command
   1. The option --module-path specifies module path. Its value can be one or more directories that
   contain modules.
   
   2. The -m option specifies the main module and the value after slash is the class name of the main
   class in the module.
   
   Find the print screen of the output using command prompt:
+----------------------------------------------------------------------------------------------------------+
| F:\project\java-9-demo>javac -d mods/com.cp src/com.cp/modle-info.java src/com.cp/com/cp2/MsgUtil.java \ |
| src/com.cp/com/cp1/Main.java                                                                             |
|                                                                                                          |
| F:\project\java-9-demo>java --module-path mods -m com.cp/com.cp1.Main                                    |
| Hello World!                                                                                             |
+----------------------------------------------------------------------------------------------------------+

Example 2: Module Dependency
   Here we will create two modules, one module will be dependent on another module. We are creating
   modules com.address and com.employee in our example. Find the project structure.
java-9-demo/
|
|--src/
|   |
|   |--com.address/
|   |    |
|   |    |--module-info.java
|   |    |
|   |    |--com/
|   |    |   |
|   |    |   |--add/
|   |    |   |   |
|   |    |   |   |--AddressUtil.java
|   |
|   |--com.employee/
|   |    |
|   |    |--module-info.java
|   |    |
|   |    |--com/
|   |    |   |
|   |    |   |--emp/
|   |    |   |   |
|   |    |   |   |--EmpMain.java
|   |    |   |

   Find the com.address module code. In com.address we are exporting com.add package. So all the public
   methods of the classes of this package will be accessible to other modules which requires com.address
   module.
   com.address/module-info.java
module com.address {
    exports com.add;
}

   AddressUtil.java
package com.add;
public class AddressUtil {
    public String getCity(int id) {
        return id + "- Noida";
    }
}

   Now find the code for com.employee module. This module requires com.address module. Hence all the
   public methods of the classes of exported packages in com.address module will be available to
   com.employee module.
   com.employee/module-info.java
module com.employee {
    requires com.address;
}

   EmpMain.java
package com.emp;
import com.add.AddressUtil;
public class EmpMain {
    public static void main(String[] args) {
        AddressUtil ob = new AddressUtil();
        System.out.println(ob.getCity(100));
    }
}

   The EmpMain class is using AddressUtil public method. It became possible because the module
   com.address has exported com.add package and com.employee module has used requires for com.address
   module.
   Now we will compile the code. Go to the java-9-demo directory using command prompt and run following
   command. Here we will compile modules separately.
   
   1. Compile the module com.address
$> javac -d mods/com.address src/com.address/module-info.java src/com.address/com/add/AddressUtil.java

   2. To compile com.employee module, we also need to provide module path for module location to resolve
   dependent module. Find the command to compile com.employee module.
$> javac --module-path mods -d mods/com.employee src/com.employee/module-info.java src/com.employee/com/emp/EmpMain.java

   3. After compilation, class files will be stored in mods directory. Find the project structure for
   src and mods directories after compilation.
java-9-demo
|
|--src
|   |
|   |--com.address
|   |    |
|   |    |--module-info.java
|   |    |
|   |    |--com
|   |    |   |
|   |    |   |--add
|   |    |   |   |
|   |    |   |   |--AddressUtil.java
|   |
|   |--com.employee
|   |    |
|   |    |--module-info.java
|   |    |
|   |    |--com
|   |    |   |
|   |    |   |--emp
|   |    |   |   |
|   |    |   |   |--EmpMain.java
|   |    |   |
|   |
|--mods
|   |
|   |--com.address
|   |    |
|   |    |--module-info.class
|   |    |
|   |    |--com
|   |    |   |
|   |    |   |--add
|   |    |   |   |
|   |    |   |   |--AddressUtil.class
|   |
|   |--com.employee
|   |    |
|   |    |--module-info.class
|   |    |
|   |    |--com
|   |    |   |
|   |    |   |--emp
|   |    |   |   |
|   |    |   |   |--EmpMain.class
|   |    |   |

   Now run the program using following command.
$> java --module-path mods -m com.employee/com.emp.EmpMain

   Output
100- Noida

   Compile multi-modules using one command
   We can compile our all modules in one go using following linux command.
$> javac -d mods --module-source-path src $(find src -name "*.java")

   module-source-path specifies the Java file source root directory.

Create JAR
   Here we will discuss how to create a JAR with module. In the above example we have two modules
   com.address and com.employee within mods directory. We will create a JAR com.address.jar for
   com.address module and JAR com.employee.jar for com.employee module. Go to the java-9-demo directory
   using command prompt. Find the Java command to create JAR for com.address module.
$> jar --create --file=com.address.jar --module-version=1.0 -C mods/com.address .

   Suppose we want to create our JARs within a directory such as mlib directory. Then first create mlib
   directory parallel to src directory and then run the following command.
$> jar --create --file=mlib/com.address.jar --module-version=1.0 -C mods/com.address .

   Now create JAR for com.employee specifying main class.
$> jar --create --file=mlib/com.employee.jar --main-class=com.emp.EmpMain --module-version=1.0 \
-C mods/com.employee .

   In this way we have two JARs within mlib directory i.e. com.address.jar and com.employee.jar.
   As we have specified main class in the com.employee.jar, so to execute the module, we need not to
   specify main class.
$> java --module-path mlib -m com.employee

   We can use -p option in place of --module-path as following.
$> java -p mlib -m com.employee

   Output
100- Noida

jlink
   jlink is the linker tool that links a set of modules with their transitive dependencies. jlink is
   used to create a custom modular run-time image (JEP 220). We can restructure the JDK and JRE run-time
   images to accommodate our modules and to improve performance, security and maintainability. jlink
   works for the modules packaged in JAR or JMOD format.
   We will use jlink with our previous example. In our demo within java-9-demo directory, we have mlib
   directory containing com.address.jar and com.employee.jar files. Go to the java-9-demo directory
   using command prompt and run the jlink command as following.
$> jlink --module-path $JAVA_HOME/jmods;mlib --add-modules com.employee --output employeeapp

   For linux, we need to replace ';' with ':' in command line.
   $JAVA_HOME/jmods contains java.base.jmod and the other standard and JDK modules.
   Now look into the employeeapp directory, the jlink command has populated a custom modular run-time
   image.

Java Command Line Options for Modules
   Here we will provide some Java command line options for modules.
   1.
   --module-path
   Specifies the module path. We need to provide one or more directories that will contain modules.
$> java --module-path mods -m com.cp/com.cp1.Main

   2.
   --module-source-path
   Specifies the module source path.
$> javac -d mods --module-source-path src $(find src -name "*.java")

   3.
   --describe-module
   Describe the module.
$> java --describe-module java.base

   Describe module contained in JAR.
$> jar --describe-module --file=mlib/com.employee.jar

   4.
   --add-modules
   Adds the specified modules to the default set of modules.
$> jlink --module-path $JAVA_HOME/jmods;mlib --add-modules com.employee --output employeeapp

   5.
   --list-modules
   List down all modules in Java
$> java --list-modules

   6.
   --patch-module
   Adds or overrides classes in a module. It is used in place of -Xbootclasspath/p .

Accessibility
   In JDK 9 we have following accessibility.
   1. public to everyone.
   2. public but only to friend modules.
   3. public only within a module.
   4. protected
   5. package
   6. private
   Here we will discuss public to everyone scope. Suppose we have a module com.cp1 with package
   com.cp.entity and one more module com.cp2.
   Case-1: com.cp2 module requires com.cp1 module but com.cp1 module does not export com.cp.entity
   package.
   com.cp1/module-info.java
module com.cp1 {
}

   com.cp2/module-info.java
module com.cp2 {
    requires com.cp1;
}

   In this case the classes of packages of the com.cp2 module will not be able to access any public
   method of classes of com.cp.entity package of com.cp1 module because the module com.cp1 has not
   exported com.cp.entity package.
   Case-2: com.cp2 module has not used requires for com.cp1.
   com.cp1/module-info.java
module com.cp1 {
    exports com.cp.util;
}

   com.cp2/module-info.java
module com.cp2 {
}

   In this case, again the classes of packages of the com.cp2 module will not be able to access any
   public method of classes of com.cp.entity package of com.cp1 module because com.cp2 module has not
   used requires for com.cp1.
   Case-3: Now find the following case.
   com.cp1/module-info.java
module com.cp1 {
    exports com.cp.util;
}

   com.cp2/module-info.java
module com.cp2 {
    requires com.cp1;
}

   In this case the classes of packages of the com.cp2 module will be able to access any public method
   of classes of com.cp.entity package of com.cp1 module.

References
   [**1]
   [https://openjdk.java.net/projects/jigsaw/quick-start]Project Jigsaw: Module System Quick-Start Guide
   
   [https://blogs.oracle.com/java/modular-development]Modular Development with JDK 9
  
Download Source Code
   [https://www.concretepage.com/java/java-9/download/java-module.zip]java-module.zip


---
[**1]
https://openjdk.java.net/projects/jigsaw/quick-start

Project Jigsaw: Module System Quick-Start Guide
   This document provides a few simple examples to get developers started with modules.

   The file paths in the examples use forward slashes, and the path separators are colons. Developers on
   Microsoft Windows should use file paths with back slashes and a semi-colon as the path separator.
     * Greetings
     * Greetings world
     * Multi-module compilation
     * Packaging
     * Missing requires or missing exports
     * Services
     * The linker
     * --patch-module

Greetings
   This first example is a module named com.greetings that simply prints "Greetings!". The module
   consists of two source files: the module declaration (module-info.java) and the main class.

   By convention, the source code for the module is in a directory that is the name of the module.
    src/com.greetings/com/greetings/Main.java
    src/com.greetings/module-info.java

    $> cat src/com.greetings/module-info.java
    module com.greetings { }

    $> cat src/com.greetings/com/greetings/Main.java
    package com.greetings;
    public class Main {
        public static void main(String[] args) {
            System.out.println("Greetings!");
        }
    }

   The source code is compiled to the directory mods/com.greetings with the following commands:
    $> mkdir -p mods/com.greetings

    $> javac -d mods/com.greetings \
        src/com.greetings/module-info.java \
        src/com.greetings/com/greetings/Main.java

   Now we run the example with the following command:
    $> java --module-path mods -m com.greetings/com.greetings.Main

   --module-path is the module path, its value is one or more directories that contain modules. The -m
   option specifies the main module, the value after the slash is the class name of the main class in
   the module.

Greetings world
   This second example updates the module declaration to declare a dependency on module org.astro.
   Module org.astro exports the API package org.astro.
    src/org.astro/module-info.java
    src/org.astro/org/astro/World.java
    src/com.greetings/com/greetings/Main.java
    src/com.greetings/module-info.java

    $> cat src/org.astro/module-info.java
    module org.astro {
        exports org.astro;
    }

    $> cat src/org.astro/org/astro/World.java
    package org.astro;
    public class World {
        public static String name() {
            return "world";
        }
    }

    $> cat src/com.greetings/module-info.java
    module com.greetings {
        requires org.astro;
    }

    $> cat src/com.greetings/com/greetings/Main.java
    package com.greetings;
    import org.astro.World;
    public class Main {
        public static void main(String[] args) {
            System.out.format("Greetings %s!%n", World.name());
        }
    }

   The modules are compiled, one at a time. The javac command to compile module com.greetings specifies
   a module path so that the reference to module org.astro and the types in its exported packages can be
   resolved.
    $> mkdir -p mods/org.astro mods/com.greetings

    $> javac -d mods/org.astro \
        src/org.astro/module-info.java src/org.astro/org/astro/World.java

    $> javac --module-path mods -d mods/com.greetings \
        src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java

   The example is run in exactly the same way as the first example:
    $> java --module-path mods -m com.greetings/com.greetings.Main
    Greetings world!

Multi-module compilation
   In the previous example then module com.greetings and module org.astro were compiled separately. It
   is also possible to compile multiple modules with one javac command:
    $> mkdir mods
    $> javac -d mods --module-source-path src $(find src -name "*.java")
    $> find mods -type f
    mods/com.greetings/com/greetings/Main.class
    mods/com.greetings/module-info.class
    mods/org.astro/module-info.class
    mods/org.astro/org/astro/World.class

Packaging
   In the examples so far then the contents of the compiled modules are exploded on the file system. For
   transportation and deployment purposes then it is usually more convenient to package a module as a
   modular JAR. A modular JAR is a regular JAR file that has a module-info.class in its top-level
   directory. The following example creates org.astro@1.0.jar and com.greetings.jar in directory mlib.
    $> mkdir mlib

    $> jar --create --file=mlib/org.astro@1.0.jar \
        --module-version=1.0 -C mods/org.astro .

    $> jar --create --file=mlib/com.greetings.jar \
        --main-class=com.greetings.Main -C mods/com.greetings .

    $> ls mlib
    com.greetings.jar   org.astro@1.0.jar

   In this example, then module org.astro is packaged to indicate that its version is 1.0. Module
   com.greetings has been packaged to indicate that its main class is com.greetings.Main. We can now
   execute module com.greetings without needing to specify its main class:
    $> java -p mlib -m com.greetings
    Greetings world!

   The command line is also shortened by using -p as an alternative to --module-path.

   The jar tool has many new options (see jar -help), one of which is to print the module declaration
   for a module packaged as a modular JAR.
    $> jar --describe-module --file=mlib/org.astro@1.0.jar
    org.astro@1.0 jar:file:///d/mlib/org.astro@1.0.jar/!module-info.class
    exports org.astro
    requires java.base mandated

Missing requires or missing exports
   Now let's see what happens with the previous example when we mistakenly omit the requires from the
   com.greetings module declaration:
    $> cat src/com.greetings/module-info.java
    module com.greetings {
        // requires org.astro;
    }

    $> javac --module-path mods -d mods/com.greetings \
        src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java
    src/com.greetings/com/greetings/Main.java:2: error: package org.astro is not visible
        import org.astro.World;
                  ^
      (package org.astro is declared in module org.astro, but module com.greetings does not read it)
    1 error

   We now fix this module declaration but introduce a different mistake, this time we omit the exports
   from the org.astro module declaration:
    $> cat src/com.greetings/module-info.java
    module com.greetings {
        requires org.astro;
    }
    
    $> cat src/org.astro/module-info.java
    module org.astro {
        // exports org.astro;
    }

    $> javac --module-path mods -d mods/com.greetings \
        src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java
        
    $> javac --module-path mods -d mods/com.greetings \
       src/com.greetings/module-info.java src/com.greetings/com/greetings/Main.java
    src/com.greetings/com/greetings/Main.java:2: error: package org.astro is not visible
        import org.astro.World;
                  ^
      (package org.astro is declared in module org.astro, which does not export it)
    1 error

Services
   Services allow for loose coupling between service consumers modules and service providers modules.

   This example has a service consumer module and a service provider module:
     * module com.socket exports an API for network sockets. The API is in package com.socket so this
       package is exported. The API is pluggable to allow for alternative implementations. The service
       type is class com.socket.spi.NetworkSocketProvider in the same module and thus package
       com.socket.spi is also exported.
     * module org.fastsocket is a service provider module. It provides an implementation of
       com.socket.spi.NetworkSocketProvider. It does not export any packages.

   The following is the source code for module com.socket .
    $> cat src/com.socket/module-info.java
    module com.socket {
        exports com.socket;
        exports com.socket.spi;
        uses com.socket.spi.NetworkSocketProvider;
    }

    $> cat src/com.socket/com/socket/NetworkSocket.java
    package com.socket;

    import java.io.Closeable;
    import java.util.Iterator;
    import java.util.ServiceLoader;

    import com.socket.spi.NetworkSocketProvider;

    public abstract class NetworkSocket implements Closeable {
        protected NetworkSocket() { }

        public static NetworkSocket open() {
            ServiceLoader<NetworkSocketProvider> sl
                = ServiceLoader.load(NetworkSocketProvider.class);
            Iterator<NetworkSocketProvider> iter = sl.iterator();
            if (!iter.hasNext())
                throw new RuntimeException("No service providers found!");
            NetworkSocketProvider provider = iter.next();
            return provider.openNetworkSocket();
        }
    }


    $> cat src/com.socket/com/socket/spi/NetworkSocketProvider.java
    package com.socket.spi;

    import com.socket.NetworkSocket;

    public abstract class NetworkSocketProvider {
        protected NetworkSocketProvider() { }

        public abstract NetworkSocket openNetworkSocket();
    }

   The following is the source code for module org.fastsocket .
    $> cat src/org.fastsocket/module-info.java
    module org.fastsocket {
        requires com.socket;
        provides com.socket.spi.NetworkSocketProvider
            with org.fastsocket.FastNetworkSocketProvider;
    }

    $> cat src/org.fastsocket/org/fastsocket/FastNetworkSocketProvider.java
    package org.fastsocket;

    import com.socket.NetworkSocket;
    import com.socket.spi.NetworkSocketProvider;

    public class FastNetworkSocketProvider extends NetworkSocketProvider {
        public FastNetworkSocketProvider() { }

        @Override
        public NetworkSocket openNetworkSocket() {
            return new FastNetworkSocket();
        }
    }

    $> cat src/org.fastsocket/org/fastsocket/FastNetworkSocket.java
    package org.fastsocket;

    import com.socket.NetworkSocket;

    class FastNetworkSocket extends NetworkSocket {
        FastNetworkSocket() { }
        public void close() { }
    }

   For simplicity, we compile both modules together. In practice then the service consumer module and
   service provider modules will nearly always be compiled separately.
    $> mkdir mods
    $> javac -d mods --module-source-path src $(find src -name "*.java")

   Finally we modify our module com.greetings to use the API.
    $> cat src/com.greetings/module-info.java
    module com.greetings {
        requires com.socket;
    }

    $> cat src/com.greetings/com/greetings/Main.java
    package com.greetings;

    import com.socket.NetworkSocket;

    public class Main {
        public static void main(String[] args) {
            NetworkSocket s = NetworkSocket.open();
            System.out.println(s.getClass());
        }
    }

    $> javac -d mods/com.greetings/ -p mods $(find src/com.greetings/ -name "*.java")

   Finally we run it:
    $> java -p mods -m com.greetings/com.greetings.Main
    class org.fastsocket.FastNetworkSocket

   The output confirms that the service provider has been located and that it was used as the factory
   for the NetworkSocket.

The linker
   jlink is the linker tool and can be used to link a set of modules, along with their transitive
   dependences, to create a custom modular run-time image (see JEP 220).

   The tool currently requires that modules on the module path be packaged in modular JAR or JMOD
   format. The JDK build packages the standard and JDK-specific modules in JMOD format.

   The following example creates a run-time image that contains the module com.greetings and its
   transitive dependences:
    jlink --module-path $JAVA_HOME/jmods:mlib --add-modules com.greetings --output greetingsapp

   The value to --module-path is a PATH of directories containing the packaged modules. Replace the path
   separator ':' with ';' on Microsoft Windows.

   $JAVA_HOME/jmods is the directory containing java.base.jmod and the other standard and JDK modules.

   The directory mlib on the module path contains the artifact for module com.greetings.

   The jlink tool supports many advanced options to customize the generated image, see jlink --help for
   more options.

--patch-module
   Developers that checkout java.util.concurrent classes from Doug Lea's CVS will be used to compiling
   the source files and deploying those classes with -Xbootclasspath/p.

   -Xbootclasspath/p has been removed, its module replacement is the option --patch-module to override
   classes in a module. It can also be used to augment the contents of module. The --patch-module option
   is also supported by javac to compile code "as if" part of the module.

   Here's an example that compiles a new version of java.util.concurrent.ConcurrentHashMap and uses it
   at run-time:
   $> javac --patch-module java.base=src -d mypatches/java.base \
        src/java.base/java/util/concurrent/ConcurrentHashMap.java

    java --patch-module java.base=mypatches/java.base ...


---
