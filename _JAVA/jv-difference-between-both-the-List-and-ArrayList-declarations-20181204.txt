filename: jv_difference-between-both-the-List-and-ArrayList-declarations_20181204.txt
https://www.quora.com/Difference-between-both-the-List-and-ArrayList-declarations

Difference between both the List and ArrayList declarations?

***
   List is an interface, ArrayList is a class that implements List, among several other
   interfaces(ArrayList class also implements Serializable,
   Cloneable,Iterable<E>,Collection<E>,RandomAccess interfaces).
   In Java, a class can implement multiple interfaces.
   In the code,
   List<Integer> list = new ArrayList<Integer>();
   list object can access only that section of the ArrayList class that contains implementation of List
   interface. Therefore, if list object attempts a method from Serializable interface, which is also
   implemented by ArrayList class, then Java compiler will not recognize that and hence, the code will
   not compile.

   On the other hand,
   ArrayList<Integer> aList = new ArrayList<Integer>();
   aList, an instance of ArrayList class, will inherit all the members that ArrayList offers.

***
   List is an interface or Blueprint for implementors like ArrayList or LinkedList. This essentially
   translates to the fact that List is more general whereas ArrayList and LinkedList are more specific (
   or sophisticated )
   if you say
   List<Integer> list = new ArrayList<Integer>();
   you cannot invoke a method ensureCapacity on list because this is an additional functionality
   supported only by ArrayList.
   
   Interfaces are used so that there is minimal code change in case the implementation changes in
   future. Tomorrow if you realize that it is more important for your application to allocate memory
   dynamically rather than having indexed access to your collection, you can just go ahead and change
   ArrayList to LinkedList. You need not worry about making any change to all the lines where list
   variable has been used.
   
   Consider a hypothetical case where we allow assignment of base class to derived class in the
   following hierarchy.
         Vehicle
              |
           /     \
      Aeroplane   Car
      
   Aeroplane aeroplane = new Vehicle();
   Car car = new Vehicle();
   
   Now clearly aeroplane is an aerial vehicle and car is a land vehicle hence they cannot be the same
   therefore this assignment outright feels illogical. Even if the compiler allowed it, at runtime if
   someone executed aeroplane.fly() there will be no pointer in the virtual table pointing to the actual
   implementation of fly() because every vehicle dosen't fly and hence Vehicle did not have a fly method
   at all.

***
   well this is a good question,

   for me,i see that the List declaration is better than ArrayList,why?

   Because sometimes you will need to make changes in your code like switching your array to a
   LinkedList or whatever,if you are using List in your declaration,then there is no problem,but if you
   are using arraylist you need to change it to LinkedList in the whole code.

   That’s why using List is better because “List” Interface extends directly collection and when using
   methods like Collections.singletonList(); you won’t find a problem because they return a list so it’s
   a question of data structuring and what is your aim from the first time when you start coding if you
   started with ArrayList then you wanted to change to LinkedList there is some work to do,without
   mentioning if u you were using ArrayList methods,that’s why modelling in the first beginning is good
   :D



---
