filename: jv-quora-what-is-an-interface-20190416.txt
https://www.quora.com/What-is-an-interface-in-Java-1

What is an interface in Java?
May 8, 2018

Changing peoples' habits is sometimes harder than moving a mountain. The media industry realized this pretty
early, as their survival was at stake. Picture this:
- At one time, audio cassettes were the only way to play media in our homes.
- Slowly, video cassettes caught up, and now you could see what you heard.
- Digital disruption introduced audio CDs and a little later, video CDs and DVDs.
- After that, MP3 and MP4 formats, coupled with the internet and cloud computing, have almost put these
  industries out of business.

What's common to all these events? Companies taking advantage of peoples' habits, I would say! Anyone ranging
from your grandparents to young kids in your neighborhood, would agree on how to use a media player.
It's simple, and has a few basic controls:
1.Play
2.Pause
3.Stop
4.Seek-Forward
5.Seek-Back

Now, don't you find these controls on every Cassette Player (audio/video), CD Player (audio/video/DVD),
and MP3/MP4 Player? Heck, even YouTube videos would have all these, in some form. In every wave, the players
realized that to break-out, they needed to bring-in consumers faster. The user-interface of media players
barely changed, because changing user habits takes time. This is an example of the underlying principle of
reuse.

Reuse is encouraged in software development for similar reasons, including:
- Minimizing repeated effort
- Reducing code bloat
- Consistency of usage

The abstraction mechanisms of an OOP language like Java, allow us to form a mental image of a media player,
and translate it to a concept in code. A media player is a device that lets you enjoy media, and gives you 5
operations to do it. A Java concept of a media player (maybe a software simulation of one) can be defined
using an interface:

public interface MediaPlayer {
    public void play();
    public void pause();
    public void stop();
    public void seekForward();
    public void seekBack();
}


An interface is much like a class, except:
- It has no member variable definitions
- It only has method declarations, no definitions
- It cannot be instantiated, only implemented

A MediaPlayer is just a concept; it naturally cannot stream a movie from a DVD, or music in an MP3 file.
We need implementation classes for that:

public class DVDPlayer implements MediaPlayer {
    public void play() { //... }
    public void pause() { //... }
    public void stop() { //... }
    public void seekForward() { //... }
    public void seekBack() { //... }
}


And also like this:
public class MP3Player implements MediaPlayer {
    public void play() { //... }
    public void pause() { //... }
    public void stop() { //... }
    public void seekForward() { //... }
    public void seekBack() { //... }
}


Every implementation class needs to redefine the methods declared in the interface. Want to use these classes
to create a media kiosk? Sure, be my guest! Polymorphism helps us switch seamlessly between audio and video,
across formats.

public class MediaRunner {

    public static void main(String[] args) {
        List<MediaPlayer> mediaPlayers = List.of(new DVDPlayer(), new MP3Player());
        
        for(MediaPlayer player: mediaPlayers) {
            player.play();
            player.seekBack();
            player,play();
            player.pause();
            player.seekForward();
            player.play();
            player.stop();
        }
    }
}

We hardly broke a sweat here! The key points to note are:
- Thanks to Java's penchant for polymorphism, a List treats all MediaPlayer devices the same way
- To appeal to old-timers, if we added a new AudioCassettePlayer() to mediaPlayers, the code for media
experience wouldn't change!

Do you now see the power of cooperation? An interface proposes a contract, for implementing classes to follow.
This ensures the 3 benefits of code reuse that we listed, reaches teams that collaborate to develop software.
And there's no need to change the coding habits of the consumer, MediaRunner!
