filename: jv_sort-map-by-value_II_20180704.txt
http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html

How to Sort HashMap Based On Values in Java?
June 28, 2015

        HashMap is a data structure used to store "Key" and "Value" pairs. Unlike, Arrays, ArrayLists,
   and LinkedLists, It doesn't preserve order of elements in which they have inserted.
   So, sorting HashMap based on keys, or values is a tough interview question, if you don't know how to
   solve. Let's see how to solve the problem.
   
   1. HashMap stores each key and value pair as an Entry<K,V> object. for example, given a hashmap,
 Map<String,Integer> aMap = new HashMap<String,Integer>();

   for every insertion of key, value pair into the hash map, there exists one Entry<K,V> object. By
   making use of this Entry<K,V> object, we can sort the hashmap based on values.
   
   2. Create a simple HashMap and insert some key and values.
Map<String,Integer> aMap = new HashMap<String,Integer>();

        // adding keys and values
        aMap.put("Five", 5);
        aMap.put("Seven", 7);
        aMap.put("Eight", 8);
        aMap.put("One",1);
        aMap.put("Two",2);
        aMap.put("Three", 3);

   3. Retrieve the entry set from HashMap like below.
Set<Entry<String,Integer>> mapEntries = aMap.entrySet();

   4. Create a LinkedList from the above mapEntries. We are going to sort this linked list, to solve our
   problem. We are using linked list for this purpose, because insertion of elements in linked list is
   faster than an array list.
 List<Entry<String,Integer>> aList = new LinkedList<Entry<String,Integer>>(mapEntries);

   5. Sort the linked list using Collections.sort() method, by passing linkedlist and a custom
   comparator.
Collections.sort(aList, new Comparator<Entry<String,Integer>>() {

            @Override
            public int compare(Entry<String, Integer> ele1,
                    Entry<String, Integer> ele2) {

                return ele1.getValue().compareTo(ele2.getValue());
            }
        });

   6. Using the custom comparator, we are sorting the linked list, based on the values(Entry.getValue())
   of entries.
   
   7. ele1.getValue().compareTo(ele2.getValue()) - compares the two values and returns 0 - if the two
   values are exactly same, 1 - if the 1st value is greater than 2nd value and -1 - if the 1st value is
   less than the 2nd value.
   
   8. Collections.sort() is a built in method, which sorts the List of values only. It is overloaded in
   Collections class. The two methods are
public static <T extends Comparable<? super T>> void sort(List<T> list)
public static <T> void sort(List<T> list, Comparator<? super T> c)

   9. Now you have sorted the linked list, and we need to store the key, value pairs into the new Map. As
   HashMap doesn't preserve the order, so use LinkedHashMap for this purpose.
    // Storing the list into Linked HashMap to preserve the order of insertion.
        Map<String,Integer> aMap2 = new LinkedHashMap<String, Integer>();
        for(Entry<String,Integer> entry: aList) {
            aMap2.put(entry.getKey(), entry.getValue());
        }

   10.The Complete Code is below.
package com.speakingcs.maps;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class SortMapByValues {


    public static void main(String[] args) {

        Map<String,Integer> aMap = new HashMap<String,Integer>();

        // adding keys and values
        aMap.put("Five", 5);
        aMap.put("Seven", 7);
        aMap.put("Eight", 8);
        aMap.put("One",1);
        aMap.put("Two",2);
        aMap.put("Three", 3);

        sortMapByValues(aMap);

    }

    private static void sortMapByValues(Map<String, Integer> aMap) {

        Set<Entry<String,Integer>> mapEntries = aMap.entrySet();

        System.out.println("Values and Keys before sorting ");
        for(Entry<String,Integer> entry : mapEntries) {
            System.out.println(entry.getValue() + " - "+ entry.getKey());
        }

        // used linked list to sort, because insertion of elements in linked list is faster than an array list
.
        List<Entry<String,Integer>> aList = new LinkedList<Entry<String,Integer>>(mapEntries);

        // sorting the List
        Collections.sort(aList, new Comparator<Entry<String,Integer>>() {

            @Override
            public int compare(Entry<String, Integer> ele1,
                    Entry<String, Integer> ele2) {

                return ele1.getValue().compareTo(ele2.getValue());
            }
        });

        // Storing the list into Linked HashMap to preserve the order of insertion.
        Map<String,Integer> aMap2 = new LinkedHashMap<String, Integer>();
        for(Entry<String,Integer> entry: aList) {
            aMap2.put(entry.getKey(), entry.getValue());
        }

        // printing values after soring of map
        System.out.println("Value " + " - " + "Key");
        for(Entry<String,Integer> entry : aMap2.entrySet()) {
            System.out.println(entry.getValue() + " - " + entry.getKey());
        }

    }
}


   [27]Email This[28]BlogThis![29]Share to Twitter[30]Share to Facebook
   [31]Newer Post [32]Older Post [33]Home

0 comments:

Post a Comment

   Note: only a member of this blog may post a comment.

   Subscribe to: [34]Post Comments (Atom)

   ____________________ Submit

     * [35]Popular Posts
     * [36]Categories

Udemy

   [37]Udemy.com Home page 125x125
     * [38]How to create, modify and save Excel spread sheets in Java using Apach POI
           Java doesn't have built in support for accessing excel files. Various libraries are avialable
       in java for this purpose. In this tu...
     * [39]Constructor References In Java 8
       Constructor References :     Simillar to Method References, you can create references to the
       constructors. The only difference is in Cons...
     * [40]How to Sort HashMap Based On Values in Java?
            HashMap is a data structure used to store "Key" and "Value" pairs. Unlike, Arrays,
       ArrayLists, and LinkedLists, It...
     * [41]Method References In JAVA 8
       Method References :     Method reference is an important feature related to lambda expressions.
       It provides a way to a method without exe...
     * [42]The 8 Alternative Languages For The JVM
           The Java Virtual Machine (JVM) isn't just for java anymore. Several hundred JVM programming
       languages are available for your proje...

Followers

Like Me

   IFRAME:
   [43]//www.facebook.com/plugins/likebox.php?href=https%3A%2F%2Fwww.facebook.com%2Fpages%2FSpeakingcs%2
   F274390492751954%3Fsk%3Dmanager&width&height=290&colorscheme=light&show_faces=true&header=true&stream
   =false&show_border=true&appId=173094999459370

   Powered by [44]Blogger.

Google+ Badge

   ____________________ Subscribe

Google+ Followers

Blog Archive

   [Blog Archive.]

   Copyright Â© [45]Code In Action | Powered by [46]Blogger

References

   Visible links
   1. http://www.speakingcs.com/feeds/posts/default
   2. http://www.speakingcs.com/feeds/posts/default?alt=rss
   3. http://www.speakingcs.com/feeds/2267327439110911684/comments/default
   4. https://plus.google.com/108603738524102295518
   5. http://www.speakingcs.com/
   6. http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html
   7. http://www.speakingcs.com/search/label/Java
   8. http://www.speakingcs.com/search/label/Java%208
   9. http://www.speakingcs.com/search/label/scala
  10. http://www.speakingcs.com/search/label/open%20source
  11. http://www.speakingcs.com/search/label/Algorithms
  12. http://www.speakingcs.com/search/label/Sortings
  13. http://www.speakingcs.com/search/label/Q%26A
  14. http://www.speakingcs.com/search/label/Java%20Q%26A
  15. http://www.speakingcs.com/search/label/CS%20Fundamentals
  16. http://www.speakingcs.com/p/blog-page_4.html
  17. http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html
  18. http://www.speakingcs.com/
  19. http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html
  20. https://plus.google.com/108603738524102295518
  21. http://www.speakingcs.com/search/label/Java
  22. http://www.speakingcs.com/search/label/Java%20Q%26A
  23. http://www.facebook.com/share.php?v=4&src=bm&u=http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html&t=How%20to%20Sort%20HashMap%20Based%20On%20Values%20in%20Java?
  24. http://twitter.com/home?status=How%20to%20Sort%20HashMap%20Based%20On%20Values%20in%20Java?%20--%20http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html
  25. https://plus.google.com/share?url=http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html
  26. http://digg.com/submit?phase=2&url=http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html&title=How%20to%20Sort%20HashMap%20Based%20On%20Values%20in%20Java?
  27. https://www.blogger.com/share-post.g?blogID=6104264871079320056&postID=2267327439110911684&target=email
  28. https://www.blogger.com/share-post.g?blogID=6104264871079320056&postID=2267327439110911684&target=blog
  29. https://www.blogger.com/share-post.g?blogID=6104264871079320056&postID=2267327439110911684&target=twitter
  30. https://www.blogger.com/share-post.g?blogID=6104264871079320056&postID=2267327439110911684&target=facebook
  31. http://www.speakingcs.com/2015/06/how-to-convert-array-to-arraylist-in.html
  32. http://www.speakingcs.com/2015/06/how-to-get-substring-of-given-string-in.html
  33. http://www.speakingcs.com/
  34. http://www.speakingcs.com/feeds/2267327439110911684/comments/default
  35. http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html#popular-postsnbt
  36. http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html#recent-postsnbt
  37. https://click.linksynergy.com/fs-bin/click?id=k7mDQ/gWT4Y&offerid=323058.292&subid=0&type=4
  38. http://www.speakingcs.com/2014/07/how-to-create-modify-and-save-excel.html
  39. http://www.speakingcs.com/2014/08/constructor-references-in-java-8.html
  40. http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html
  41. http://www.speakingcs.com/2014/08/method-references-in-java-8.html
  42. http://www.speakingcs.com/2014/07/the-8-alternative-languages-for-jvm.html
  43. http://www.facebook.com/plugins/likebox.php?href=https%3A%2F%2Fwww.facebook.com%2Fpages%2FSpeakingcs%2F274390492751954%3Fsk%3Dmanager&width&height=290&colorscheme=light&show_faces=true&header=true&stream=false&show_border=true&appId=173094999459370
  44. https://www.blogger.com/
  45. http://www.speakingcs.com/
  46. http://www.blogger.com/

   Hidden links:
  47. https://www.blogger.com/comment-iframe.g?blogID=6104264871079320056&postID=2267327439110911684
  48. http://www.blogger.com/rearrange?blogID=6104264871079320056&widgetType=HTML&widgetId=HTML2&action=editWidget&sectionId=sidebartab1
  49. http://www.blogger.com/rearrange?blogID=6104264871079320056&widgetType=AdSense&widgetId=AdSense1&action=editWidget&sectionId=sidebartab1
  50. http://www.speakingcs.com/2014/07/how-to-create-modify-and-save-excel.html
  51. http://www.blogger.com/rearrange?blogID=6104264871079320056&widgetType=PopularPosts&widgetId=PopularPosts1&action=editWidget&sectionId=sidebartab1
  52. http://www.blogger.com/rearrange?blogID=6104264871079320056&widgetType=Followers&widgetId=Followers1&action=editWidget&sectionId=sidebartab1
  53. http://www.blogger.com/rearrange?blogID=6104264871079320056&widgetType=HTML&widgetId=HTML1&action=editWidget&sectionId=sidebartab1
  54. http://www.blogger.com/rearrange?blogID=6104264871079320056&widgetType=Attribution&widgetId=Attribution1&action=editWidget&sectionId=sidebartab1
  55. http://www.blogger.com/rearrange?blogID=6104264871079320056&widgetType=BlogArchive&widgetId=BlogArchive1&action=editWidget&sectionId=sidebarrtopsec
  56. http://www.speakingcs.com/2015/06/how-to-sort-hashmap-based-on-values-in.html#topnbt


---

