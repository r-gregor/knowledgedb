filename: jv_print-all-permutations-of-a-given-string_20200618.txt
https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/

Write a program to print all permutations of a given string

   A permutation, also called an "arrangement number" or "order," is a rearrangement of the elements of
   an ordered list S into a one-to-one correspondence with S itself. A string of length n has n!
   permutation.
   Source: Mathword(http://mathworld.wolfram.com/Permutation.html)

   Below are the permutations of string ABC.
   ABC ACB BAC BCA CBA CAB

   Here is a solution that is used as a basis in backtracking.

// Java program to print all permutations of a
// given string.
public class Permutation
{
    public static void main(String[] args)
    {
        String str = "ABC";
        int n = str.length();
        Permutation permutation = new Permutation();
        permutation.permute(str, 0, n-1);
    }

    /**
     * permutation function
     * @param str string to calculate permutation for
     * @param l starting index
     * @param r end index
     */
    private void permute(String str, int l, int r)
    {
        if (l == r)
            System.out.println(str);
        else
        {
            for (int i = l; i <= r; i++)
            {
                str = swap(str,l,i);
                permute(str, l+1, r);
                str = swap(str,l,i);
            }
        }
    }

    /**
     * Swap Characters at position
     * @param a string value
     * @param i position 1
     * @param j position 2
     * @return swapped string
     */
    public String swap(String a, int i, int j)
    {
        char temp;
        char[] charArray = a.toCharArray();
        temp = charArray[i] ;
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }

}

// This code is contributed by Mihir Joshi


   Output:
ABC
ACB
BAC
BCA
CBA
CAB

   Algorithm Paradigm: Backtracking
   Time Complexity: O(n*n!) Note that there are n! permutations and it requires O(n) time to print a a
   permutation.

   Note : The above solution prints duplicate permutations if there are repeating characters in input
   string. Please see below link for a solution that prints only distinct permutations even if there are
   duplicates in input.

   [**1]Print all distinct permutations of a given string with duplicates.

 

---
[**1]
https://www.geeksforgeeks.org/print-all-permutations-of-a-string-with-duplicates-allowed-in-input-string/

Print all distinct permutations of a given string with duplicates

   Given a string that may contain duplicates, write a function to print all permutations of given
   string such that no permutation is repeated in output.

   Examples:
Input:  str[] = "AB"
Output: AB BA

Input:  str[] = "AA"
Output: AA

Input:  str[] = "ABC"
Output: ABC ACB BAC BCA CBA CAB

Input:  str[] = "ABA"
Output: ABA AAB BAA

Input:  str[] = "ABCA"
Output: AABC AACB ABAC ABCA ACBA ACAB BAAC BACA
        BCAA CABA CAAB CBAA

   We have discussed an algorithm to print all permutations in above post.

   The algorithm discussed on above post doesn't handle duplicates.

   // Program to print all permutations of a
   // string in sorted order.
   #include <stdio.h>
   #include <stdlib.h>
   #include <string.h>

   /* Following function is needed for library
     function qsort(). */
   int compare(const void* a, const void* b) {
       return (*(char*)a - *(char*)b);
   }

   // A utility function two swap two characters
   // a and b
   void swap(char* a, char* b) {
       char t = *a;
       *a = *b;
       *b = t;
   }

   // This function finds the index of the
   // smallest character which is greater
   // than 'first' and is present in str[l..h]
   int findCeil(char str[], char first, int l, int h) {
       // initialize index of ceiling element
       int ceilIndex = l;

       // Now iterate through rest of the
       // elements and find the smallest
       // character greater than 'first'
       for (int i = l + 1; i <= h; i++)
           if (str[i] > first && str[i] < str[ceilIndex])
               ceilIndex = i;

       return ceilIndex;
   }

   // Print all permutations of str in sorted order
   void sortedPermutations(char str[]) {
       // Get size of string
       int size = strlen(str);

       // Sort the string in increasing order
       qsort(str, size, sizeof(str[0]), compare);

       // Print permutations one by one
       bool isFinished = false;
       while (!isFinished) {

           // print this permutation
           static int x = 1;
           printf("%d  %s \n", x++, str);

           // Find the rightmost character
           // which is smaller than its next
           // character. Let us call it 'first
           // char'
           int i;
           for (i = size - 2; i >= 0; --i)
               if (str[i] < str[i + 1])
                   break;

           // If there is no such character, all
           // are sorted in decreasing order,
           // means we just printed the last
           // permutation and we are done.
           if (i == -1)
               isFinished = true;
           else {

               // Find the ceil of 'first char'
               // in right of first character.
               // Ceil of a character is the
               // smallest character greater
               // than it
               int ceilIndex = findCeil(str,
                        str[i], i + 1, size - 1);

               // Swap first and second characters
               swap(&str[i], &str[ceilIndex]);

               // Sort the string on right of 'first char'
               qsort(str + i + 1, size - i - 1,
                     sizeof(str[0]), compare);
           }
       }
   }

   // Driver program to test above function
   int main() {
       char str[] = "ACBC";
       sortedPermutations(str);
       return 0;
   }

   Output:
1  ABCC
2  ACBC
3  ACCB
4  BACC
5  BCAC
6  BCCA
7  CABC
8  CACB
9  CBAC
10  CBCA
11  CCAB
12  CCBA

   Time Complexity: O(n^2 * n!)
   Auxiliary Space: O(1)

   
---
