filename: jv_constructors-vc-static-factory-methods-multif_20200522.txt
https://www.baeldung.com/java-constructors-vs-static-factory-methods

Java Constructors vs Static Factory Methods
March 18, 2020

1. Overview
   Java constructors are the default mechanism for getting fully-initialized class instances. After all,
   they provide all the infrastructure required for injecting dependencies, either manually or
   automatically.

   Even so, in a few specific use cases, it's preferable to resort to static factory methods for
   achieving the same result.

   In this tutorial, we'll be highlighting the pros and cons of using static factory methods vs plain
   old Java constructors.

2. Advantages of Static Factory Methods Over Constructors
   In an object-oriented language like Java, what could be wrong with constructors? Overall, nothing.
   Even so, the famous Joshua Block's Effective Java Item 1 clearly states:

     "Consider static factory methods instead of constructors"

   While this isn't a silver bullet, here are the most compelling reasons that sustain this approach:
    1. Constructors don't have meaningful names, so they are always restricted to the standard naming
       convention imposed by the language. Static factory methods can have meaningful names, hence
       explicitly conveying what they do
    2. Static factory methods can return the same type that implements the method(s), a subtype, and
       also primitives, so they offer a more flexible range of returning types
    3. Static factory methods can encapsulate all the logic required for pre-constructing fully
       initialized instances, so they can be used for moving this additional logic out of constructors.
       This prevents constructors from performing further tasks, others than just initializing
       fields
    4. Static factory methods can be controlled-instanced methods, with the Singleton pattern being
       the most glaring example of this feature

3. Static Factory Methods in the JDK
   There are plenty of examples of static factory methods in the JDK that showcase many of the
   advantages outlined above. Let's explore some of them.

  3.1. The String Class
   Because of the well-known String interning, it's very unlikely we'll use the String class
   constructor to create a new String object. Even so, this is perfectly legal:
String value = new String("Baeldung");

   In this case, the constructor will create a new String object, which is the expected behavior.

   Alternatively, if we want to create a new String object using a static factory method, we can use
   some of the following implementations of the valueOf() method:
String value1 = String.valueOf(1);
String value2 = String.valueOf(1.0L);
String value3 = String.valueOf(true);
String value4 = String.valueOf('a');

   There are several overloaded implementations of valueOf(). Each one will return a new String object,
   depending on the type of the argument passed to the method (e.g. int, long, boolean, char, and so
   forth).

   The name expresses pretty clearly what the method does. It also sticks to a well-established standard
   in the Java ecosystem for naming static factory methods.

  3.2. The Optional Class
   Another neat example of static factory methods in the JDK is the Optional class. This
   class implements a few factory methods with pretty meaningful names, including empty(), of(),
   and ofNullable():

Optional<String> value1 = Optional.empty();
Optional<String> value2 = Optional.of("Baeldung");
Optional<String> value3 = Optional.ofNullable(null);

  3.3. The Collections Class
   Quite possibly the most representative example of static factory methods in the JDK is the
   Collections class. This is a non-instantiable class that implements only static methods.

   Many of these are factory methods that also return collections, after applying to the supplied
   collection some type of algorithm.

   Here are some typical examples of the class' factory methods:
Collection syncedCollection = Collections.synchronizedCollection(originalCollection);
Set syncedSet = Collections.synchronizedSet(new HashSet());
List<Integer> unmodifiableList = Collections.unmodifiableList(originalList);
Map<String, Integer> unmodifiableMap = Collections.unmodifiableMap(originalMap);

   The number of static factory methods in the JDK is really extensive, so we'll keep the list of
   examples short for brevity's sake.

   Nevertheless, the above examples should give us a clear idea of how ubiquitous static factory methods
   are in Java.

4. Custom Static Factory Methods
   Of course, we can implement our own static factory methods. But when is it really worth doing so,
   instead of creating class instances via plain constructors?

   Let's see a simple example.

   Let's consider this naive User class:
public class User {

    private final String name;
    private final String email;
    private final String country;

    public User(String name, String email, String country) {
        this.name = name;
        this.email = email;
        this.country = country;
    }

    // standard getters / toString
}

   In this case, there're no visible warnings to indicate that a static factory method could be better
   than the standard constructor.

   What if we want that all the User instances get a default value for the country field?

   If we initialize the field with a default value, we'd have to refactor the constructor too, hence
   making the design more rigid.

   We can use a static factory method instead:
public static User createWithDefaultCountry(String name, String email) {
    return new User(name, email, "Argentina");
}

   Here's how we'd get a User instance with a default value assigned to the country field:
User user = User.createWithDefaultCountry("John", "john@domain.com");

5. Moving Logic out of Constructors
   Our User class could quickly rot into a flawed design if we decide to implement features that would
   require adding further logic to the constructor (alarm bells should be sounding off by this time).

   Let's suppose that we want to provide the class with the ability for logging the time at which every
   User object is created.

   If we just put this logic into the constructor, we'd be breaking the Single Responsibility
   Principle. We would end up with a monolithic constructor that does a lot more than initialize fields.

   We can keep our design clean with a static factory method:
public class User {

    private static final Logger LOGGER = Logger.getLogger(User.class.getName());
    private final String name;
    private final String email;
    private final String country;

    // standard constructors / getters

    public static User createWithLoggedInstantiationTime(
      String name, String email, String country) {
        LOGGER.log(Level.INFO, "Creating User instance at : {0}", LocalTime.now());
        return new User(name, email, country);
    }
}

   Here's how we'd create our improved User instance:
User user
  = User.createWithLoggedInstantiationTime("John", "john@domain.com", "Argentina");

6. Instance-Controlled Instantiation
   As shown above, we can encapsulate chunks of logic into static factory methods before returning
   fully-initialized User objects. And we can do this without polluting the constructor with the
   responsibility of performing multiple, unrelated tasks.

   For instance, suppose we want to make our User class a Singleton. We can achieve this by implementing
   an instance-controlled static factory method:
public class User {

    private static volatile User instance = null;

    // other fields / standard constructors / getters

    public static User getSingletonInstance(String name, String email, String country) {
        if (instance == null) {
            synchronized (User.class) {
                if (instance == null) {
                    instance = new User(name, email, country);
                }
            }
        }
        return instance;
    }
}

   The implementation of the getSingletonInstance() method is thread-safe, with a small performance
   penalty, due to the synchronized block.

   In this case, we used lazy initialization to demonstrate the implementation of an instance-controlled
   static factory method.

   It's worth mentioning, however, that the best way to implement a Singleton is with a Java enum type,
   as it's both serialization-safe and thread-safe.

   As expected, getting a User object with this method looks very similar to the previous examples:
User user = User.getSingletonInstance("John", "john@domain.com", "Argentina");

7. Conclusion
   In this article, we explored a few use cases where static factory methods can be a better alternative
   to using plain Java constructors.

   Moreover, this refactoring pattern is so tightly rooted to a typical workflow that most IDEs will do
   it for us.

   Of course, Apache NetBeans, IntelliJ IDEA, and Eclipse will perform the refactoring in
   slightly different ways, so please make sure first to check your IDE documentation.

   As with many other refactoring patterns, we should use static factory methods with due caution, and
   only when it's worth the trade-off between producing more flexible and clean designs and the cost of
   having to implement additional methods.



---
https://dzone.com/articles/constructors-or-static-factory-methods

Constructors or Static Factory Methods?

When it comes to instantiating objects, which is better: Constructors or static factory methods? We take a
look at one opinion.

   I believe Joshua Bloch said it first in his very good book "Effective Java": static factory
   methods are the preferred way to instantiate objects compared with constructors. I disagree. Not only
   because I believe that static methods are pure evil, but mostly because in this particular case they
   pretend to be good and make us think that we have to love them.

   Let's analyze the reasoning and see why it's wrong, from an object-oriented point of view.

   This is a class with one primary and two secondary constructors:
class Color {
    private final int hex;
    Color(String rgb) {
        this(Integer.parseInt(rgb, 16));
    }
    Color(int red, int green, int blue) {
        this(red << 16 + green << 8 + blue);
    }
    Color(int h) {
        this.hex = h;
    }
}

   This is a similar class with three static factory methods:
class Color {
    private final int hex;
    static Color makeFromRGB(String rgb) {
        return new Color(Integer.parseInt(rgb, 16));
    }
    static Color makeFromPalette(int red, int green, int blue) {
        return new Color(red << 16 + green << 8 + blue);
    }
    static Color makeFromHex(int h) {
        return new Color(h);
    }
    private Color(int h) {
        return new Color(h);
    }
}

   Which one do you like better?

   According to Joshua Bloch, there are three basic advantages to using static factory methods instead
   of constructors (there are actually four, but the fourth one is not applicable to Java anymore):
     * They have names.
     * They can cache.
     * They can subtype.

   I believe that all three make perfect sense ... if the design is wrong. They are good excuses for
   workarounds. Let's take them one by one.

They Have Names
   This is how you make a red tomato color object with a constructor:
Color tomato = new Color(255, 99, 71);

   This is how you do it with a static factory method:
Color tomato = Color.makeFromPalette(255, 99, 71);

   It seems that makeFromPalette() is semantically richer than just new Color(), right? Well, yes. Who
   knows what those three numbers mean if we just pass them to the constructor. But the word "palette"
   helps us figure everything out immediately.

   True.

   However, the right solution would be to use polymorphism and encapsulation, to decompose the problem
   into a few semantically rich classes:
interface Color {}
class HexColor implements Color {
    private final int hex;
    HexColor(int h) {
        this.hex = h;
    }
}
class RGBColor implements Color {
    private final Color origin;
    RGBColor(int red, int green, int blue) {
        this.origin = new HexColor(
            red << 16 + green << 8 + blue
        );
    }
}

   Now, we use the right constructor of the right class:
Color tomato = new RGBColor(255, 99, 71);

   See, Joshua?

They Can Cache
   Let's say I need a red tomato color in multiple places in the application:
Color tomato = new Color(255, 99, 71);
// ... sometime later
Color red = new Color(255, 99, 71);

   Two objects will be created, which is obviously inefficient, since they are identical. It would be
   better to keep the first instance somewhere in memory and return it when the second call arrives.
   Static factory methods make it possible to solve this very problem:
Color tomato = Color.makeFromPalette(255, 99, 71);
// ... sometime later
Color red = Color.makeFromPalette(255, 99, 71);

   Then somewhere inside the Color we keep a private static Map with all the objects already
   instantiated:
class Color {
    private static final Map < Integer, Color > CACHE =
        new HashMap < > ();
    private final int hex;
    static Color makeFromPalette(int red, int green, int blue) {
        final int hex = red << 16 + green << 8 + blue;
        return Color.CACHE.computeIfAbsent(
            hex, h - > new Color(h)
        );
    }
    private Color(int h) {
        return new Color(h);
    }
}

   It is very effective performance-wise. With a small object like our Color the problem may not be so
   obvious, but when objects are bigger, their instantiation and garbage collection may waste a lot of
   time.

   True.

   However, there is an object-oriented way to solve this problem. We just introduce a new class
   Palette, which becomes a store of colors:
class Palette {
    private final Map < Integer, Color > colors =
        new HashMap < > ();
    Color take(int red, int green, int blue) {
        final int hex = red << 16 + green << 8 + blue;
        return this.computerIfAbsent(
            hex, h - > new Color(h)
        );
    }
}

   Now, we make an instance of Palette once and ask it to return a color to us every time we need it:
Color tomato = palette.take(255, 99, 71);
// Later we will get the same instance:
Color red = palette.take(255, 99, 71);

   See, Joshua, no static methods, no static attributes.

They Can Subtype

   Let's say our class Color has a method lighter(), which is supposed to shift the color to the next
   available lighter one:
class Color {
    protected final int hex;
    Color(int h) {
        this.hex = h;
    }
    public Color lighter() {
        return new Color(hex + 0x111);
    }
}

   However, sometimes it's more desirable to pick the next lighter color through a set of available
   Pantone colors:
class PantoneColor extends Color {
    private final PantoneName pantone;
    PantoneColor(String name) {
        this(new PantoneName(name));
    }
    PantoneColor(PantoneName name) {
        this.pantone = name;
    }
    @Override
    public Color lighter() {
        return new PantoneColor(this.pantone.up());
    }
}

   Then, we create a static factory method, which will decide which Color implementation is the most
   suitable for us:
class Color {
    private final String code;
    static Color make(int h) {
        if (h == 0xBF1932) {
            return new PantoneColor("19-1664 TPX");
        }
        return new RGBColor(h);
    }
}

   If the true red color is requested, we return an instance of PantoneColor. In all other cases
   it's just a standard RGBColor. The decision is made by the static factory method. This is how we will
   call it:
Color color = Color.make(0xBF1932);

   It would not be possible to do the same "forking" with a constructor, since it can only return the
   class it is declared in. A static method has all the necessary freedom to return any subtype of
   Color.

   True.

   However, in an object-oriented world we can and must do it all differently. First, we would make
   Color an interface:
interface Color {
    Color lighter();
}

   Next, we would move this decision making process to its own class Colors, just like we did in the
   previous example:
class Colors {
    Color make(int h) {
        if (h == 0xBF1932) {
            return new PantoneColor("19-1664-TPX");
        }
        return new RGBColor(h);
    }
}

   And we would use an instance of class Colors instead of a static faсtory method inside Color:
colors.make(0xBF1932);

   However, this is still not really an object-oriented way of thinking, because we're taking the
   decision-making away from the object it belongs to. Either through a static factory method make() or
   a new class Colors-it doesn't really matter how-we tear our objects into two pieces. The first piece
   is the object itself and the second one is the decision making algorithm that stays somewhere else.

   A much more object-oriented design would be to put the logic into an object of class PantoneColor
   which would decorate the original RGBColor:
class PantoneColor {
    private final Color origin;
    PantoneColor(Color color) {
        this.origin = color;
    }
    @Override
    public Color lighter() {
        final Color next;
        if (this.origin.hex() == 0xBF1932) {
            next = new RGBColor(0xD12631);
        } else {
            next = this.origin.lighter();
        }
        return new PantoneColor(next);
    }
)

   Then, we make an instance of RGBColor and decorate it with PantoneColor:
Color red = new PantoneColor(
    new RGBColor(0xBF1932)
);

   We ask red to return a lighter color and it returns the one from the Pantone palette, not the one
   that is merely lighter in RGB coordinates:
Color lighter = red.lighter(); // 0xD12631

   Of course, this example is rather primitive and needs further improvement if we really want it to
   be applicable to all Pantone colors, but I hope you get the idea. The logic must stay inside the
   class, not somewhere outside, not in static factory methods or even in some other supplementary
   class. I'm talking about the logic that belongs to this particular class, of course. If it's
   something related to the management of class instances, then there can be containers and stores, just
   like in the previous example above.

   To summarize, I would strongly recommend you never use static methods, especially when they are going
   to replace object constructors. Giving birth to an object through its constructor is the most
   "sacred" moment in any object-oriented software, don't miss the beauty of it.



---
http://www.javapractices.com/topic/TopicAction.do?Id=21

   Factory methods

   Factory methods are static methods that return an instance of the native class. Examples in the JDK:
     * LogManager.getLogManager
     * Pattern.compile
     * Collections.unmodifiableCollection, Collections.synchronizeCollection , and so on
     * LocalDateTime.now

   Factory methods:
     * have names, unlike constructors, which can clarify code.
     * do not need to create a new object upon each invocation - objects can be cached and reused, if
       necessary.
     * can return a subtype of their return type - in particular, can return an object whose
       implementation class is unknown to the caller. This is a very valuable and widely used feature in
       many frameworks which use interfaces as the return type of static factory methods.

   Common names for factory methods include getInstance and valueOf. These names are not mandatory -
   choose whatever makes sense for each case.

   Example
public final class ComplexNumber {

    /**
    * Static factory method returns an object of this class.
    */
    public static ComplexNumber valueOf(float real, float imaginary) {
        return new ComplexNumber(real, imaginary);
    }
    
    /**
    * Caller cannot see this private constructor.
    *
    * The only way to build a ComplexNumber is by calling the static
    * factory method.
    */
    private ComplexNumber(float real, float imaginary) {
        this.real = real;
        this.imaginary = imaginary;
    }
    
    private float real;
    private float imaginary;
    
    //..elided
}


---

