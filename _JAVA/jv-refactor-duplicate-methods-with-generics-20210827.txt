filename: jv_refactor-duplicate-methods-with-generics_20210827.txt
https://stackoverflow.com/questions/31569446/refactor-duplicate-methods-with-generics

Refactor duplicate methods with generics

   I have some methods. How I can refactor this code to have generic method?

   First method:
	void ChangeProjectName(DataModel dataModel) {
		foreach (Project project in dataModel.Projects) {
			string projectName = project.Name;
			projectName = ChangeName(projectName);

			project.Name = projectName;
		}

		dataModel.SubmitChanges();
	}

   Second method:
	void ChangeEmployeeName(DataModel dataModel) {
		foreach (Employee employee in dataModel.Employees) {
			string employeeName = employee.Name;
			employeeName = ChangeName(employeeName);

			employee.Name = employeeName;
		}

		dataModel.SubmitChanges();
	}

***
   We must be able to get the T type collection from the appropriate property in the model, so we must
   pass a selection strategy for it:
void ChangeName<T>(DataModel dataModel,
				   Func<DataModel, IEnumerable<T>> selector)
	where T : IHaveName
{
	foreach (T x in selector(dataModel)) {
		x.Name = ChangeName(x.Name);
	}

	dataModel.SubmitChanges();
}

   and usage:
ChangeName(model, x => x.Projects);

   You can add an Action<T> parameter and pass it x => x.Name = ChangeName(x.Name) if you want to avoid
   having the IHaveName interface (or base class, etc).

***
   I think it's better if seperate changing name from submitting data.
void ChangeName<T>(IEnumerable<T> list) where T : IHaveName {
	foreach (T item in list) {
		item.Name = ChangeName(project.Name);
	}
}

void ChangeNamesAndSubmitChanges(dataModel dataModel) {
	ChangeName(dataModel.Projects);
	ChangeName(dataModel.Employees);
	dataModel.SubmitChanges();
}

   or create ChangeNamesAndSubmitChanges with delegate as proposed by Yorye Nathan.

***
	 * I agree. I would prefer to have the ChangeMethod only change the name, and call SubmitChanges in
	   the appropriate places higher on the stack.
	 * Your foreach loop should be using T as the type instead of Project.


---

