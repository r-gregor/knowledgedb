filename: jv_running-system-commands_20190204.txt
https://alvinalexander.com/java/edu/pj/pj010016

Running system commands in Java applications
June 3 2016

     UPDATE: This article has been replaced by my newer "[###]Java exec with ProcessBuilder and Process"
     article. While the Java code shown in this tutorial works on simple "Java exec" cases, the new
     article shows how to properly read the output streams from your system command in Java threads,
     and also how to write to your command's standard input, if necessary.

     Feel free to read this article for background/legacy information, but I strongly recommend that
     you use the source code I'm sharing in my newer "Java exec" article, because it resolves the
     standard input, output, and error problems that I didn't handle properly in the code below.

Introduction
   I've read a lot about Java but one of the things I rarely see discussed is how you should go
   about running external system commands. Of course, you probably don't read much about this because it
   takes away from the portability of Java applications. For instance, if you write a Java application
   on a Unix system, you might be interested in running the "ps -ef" command, and reading the output of
   the command. For Unix systems this is great, but unfortunately, this same program won't work on a
   Windows system because the ps command isn't available on Windows.

   Well, we're going to forget about portability for this article, and demonstrate a method that can be
   used to run system commands. We've received a lot of requests about this topic, so here goes.

Discussion (Runtime exec and Process)
   Executing a system command is relatively simple - once you've seen it done the first time. It
   involves the use of two Java classes, the Runtime class and the Process class. Basically, you use the
   exec method of the Runtime class to run the command as a separate process. Invoking the exec method
   returns a Process object for managing the subprocess. Then you use the getInputStream() and
   getErrorStream() methods of the Process object to read the normal output of the command, and the
   error output of the command. What you do with the output of the command executed is entirely up to
   you and the application you're creating.

   (Note: There is also a getOutputStream() method that you can use to write to the process, but we
   won't cover that method in this article. We'll cover that and a few other advanced features in a
   future article.)

A Java exec example
   The code shown in Listing 1 provides a working example of our "Java exec" technique in a file
   named JavaRunCommand.java.

<code>
import java.io.*;

public class JavaRunCommand {

    public static void main(String args[]) {

        String s = null;

        try {

            // run the Unix "ps -ef" command
            // using the Runtime exec method:
            Process p = Runtime.getRuntime().exec("ps -ef");

            BufferedReader stdInput = new BufferedReader(new
                 InputStreamReader(p.getInputStream()));

            BufferedReader stdError = new BufferedReader(new
                 InputStreamReader(p.getErrorStream()));

            // read the output from the command
            System.out.println("Here is the standard output of the command:\n");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }

            // read any errors from the attempted command
            System.out.println("Here is the standard error of the command (if any):\n");
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
            }

            System.exit(0);
        }
        catch (IOException e) {
            System.out.println("exception happened - here's what I know: ");
            e.printStackTrace();
            System.exit(-1);
        }
    }
}
</code>

   Listing 1 (above): The file JavaRunCommand.java shows how you can run an external system command from
   within a Java program.

How our Java exec code works
   The first thing you do is specify the command you want to run by supplying this command to the
   Runtime class. Because you can't create your own instance of the Runtime class, you first use the
   getRuntime method to access the current runtime environment and then invoke the Runtime exec method.
   This returns a Process object.

   Everything else you do involves methods of the Process object. In this case, because we're running
   the "ps -ef" command on a Unix system, we just need to read the output of the command. Reading the
   standard error probably isn't required in this case, but I thought at the very least it was at least
   worth showing, if not good programming practice.

   I convert the input streams with the     InputStreamReader and     BufferedReader so I can use the
   readLine() method of the BufferedReader class. Because I use these classes, this application will not
   compile properly with an older JDK 1.0.x compiler (these classes weren't available in 1.0.x).


Download the "Java exec" example source code
   I could go on at length about this topic, but the best thing I can recommend is that you download the
   source code and work with it for a while. Try running different commands to see if you can get them
   to work properly, and try to run a command that requires input (this will be a bit more complicated).

   To download the JavaRunCommand.java source code shown in Listing 1, [***]click here. Once the file is
   displayed in your browser you can select the File | Save As ... option of your browser to save the
   code to your local filesystem.

[***]

<code>
// Created by DevDaily.com

import java.io.*;

public class RunCommand {

    public static void main(String args[]) {

        String s = null;

        try {

        // run the Unix "ps -ef" command

            Process p = Runtime.getRuntime().exec("ps -ef");

            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

            BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

            // read the output from the command

            System.out.println("Here is the standard output of the command:\n");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }

            // read any errors from the attempted command

            System.out.println("Here is the standard error of the command (if any):\n");
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
            }

            System.exit(0);
        }
        catch (IOException e) {
            System.out.println("exception happened - here's what I know: ");
            e.printStackTrace();
            System.exit(-1);
        }
    }
}
</code>


---
[###]
https://alvinalexander.com/java/java-exec-processbuilder-process-1
Java exec - execute system processes with Java ProcessBuilder and Process (part 1)
June 3 2016

I've been thinking about rewriting my old tutorial on how to execute system processes from a Java
application for a while now (How to run system commands from Java applications), but it's a topic that
quickly becomes complicated if you want to do it right, so I kept postponing it until I could give it
some quality time in a real-world project.

I've finally had an opportunity to test this in a real-world Java application on a current project,
so while I'm still not finished with this, I thought I'd share what I've learned so far.
The Apache Java exec project

Before continuing to read this article, if you don't care how things work, and you just want to execute a
system command from a Java application, you may just want to take a look at the Apache exec project. While
some of that code may be dated (it is JDK 1.3 compatible), it is the same code that is used by the Apache
Ant project, and is not a "work in progress", as the code shown below admittedly is. (I will probably
have a few releases of this in the coming weeks.)

However, if you'd like to be able to execute system commands with just a few additional classes, and
you get a detailed explanation of how the classes work, I welcome you to keep reading ...
Basic Java exec with the ProcessBuilder and Process classes

When you first look at using the Java ProcessBuilder and Process to run (exec) system commands, it looks
very easy. Just construct a ProcessBuilder object, tell it to start, and assign the results to a Process
object, and you're done.

Unfortunately what appears to be very simple -- and what works in the simplest case -- is not something
you want to do if your job depends on the results.

For instance, in their ProcessBuilder javadoc, Sun shows an example like this:

// Sun's ProcessBuilder and Process example
ProcessBuilder pb = new ProcessBuilder("myCommand", "myArg1", "myArg2");
Map<String, String> env = pb.environment();
env.put("VAR1", "myValue");
env.remove("OTHERVAR");
env.put("VAR2", env.get("VAR1") + "suffix");
pb.directory("myDir");
Process p = pb.start();

That's a nice, simple example, and it may indeed let you execute a system command, but if you want to
read the standard output and standard error from your command, or supply standard input to your command,
you need a much more robust solution.
A more-complete Java ProcessBuilder and Process approach

I'm not going to discuss all the possible pitfalls that you can run into when executing a system command
from a Java application. That topic was already covered nicely about 10 years ago in a JavaWorld article,
and to say the least, the ProcessBuilder example shown above won't work in many cases.

Instead of rehashing all those pitfalls again, what I'm going to do is share some code that I'm currently
developing for a project where I execute system commands like ping, netstat, and lsof, and then read
the output of those commands once they've finished executing.

Beginning with the end in mind, let's assume that we want to run the following Unix/Linux command from
within a Java application:

ls -l /var/tmp

To run that command from a Java application using my new code, we'd first build and then exec the command
like this:

// build my command as a list of strings
List<String> command = new ArrayList<String>();
command.add("ls");
command.add("-l");
command.add("/var/tmp");

// execute my command
SystemCommandExecutor commandExecutor = new SystemCommandExecutor(command);
int result = commandExecutor.executeCommand();

// get the output from the command
StringBuilder stdout = commandExecutor.getStandardOutputFromCommand();
StringBuilder stderr = commandExecutor.getStandardErrorFromCommand();

// print the output from the command
System.out.println("STDOUT");
System.out.println(stdout);
System.out.println("STDERR");
System.out.println(stderr);

As you can see, as a consumer of a class named SystemCommandExecutor (which I will share with you
shortly), I think this is pretty simple, and also lets you get the standard output and standard error
from the command you just executed. Using this class you can even execute command pipelines from Java
(such as "ps aux | wc -l"), as well as sudo commands. But, first things first ...

Next: Java exec with ProcessBuilder, part 2 >>

---
https://alvinalexander.com/java/java-exec-processbuilder-process-2
Java exec - execute system processes with Java ProcessBuilder and Process (part 2)
June 3 2016

<< Back to "Java exec with ProcessBuilder and Process, part 1"
A complete Java class that executes a system command

Now that you've seen that snippet of code, here's a complete Java class named ProcessBuilderExample that
can execute a Unix/Linux system command:

package com.devdaily.system;

import java.io.IOException;
import java.util.*;

public class ProcessBuilderExample
{

  public static void main(String[] args) throws Exception
  {
    new ProcessBuilderExample();
  }

  // can run basic ls or ps commands
  // can run command pipelines
  // can run sudo command if you know the password is correct
  public ProcessBuilderExample()
  throws IOException, InterruptedException
  {
    // determine the number of processes running on the current
    // linux, unix, or mac os x system.
    List<String> commands = new ArrayList<String>();
    commands.add("/bin/sh");
    commands.add("-c");
    commands.add("ps aux | wc -l");

    SystemCommandExecutor commandExecutor = new SystemCommandExecutor(commands);
    int result = commandExecutor.executeCommand();

    // stdout and stderr of the command are returned as StringBuilder objects
    StringBuilder stdout = commandExecutor.getStandardOutputFromCommand();
    StringBuilder stderr = commandExecutor.getStandardErrorFromCommand();
    System.out.println("The numeric result of the command was: " + result);
    System.out.println("\nSTDOUT:");
    System.out.println(stdout);
    System.out.println("\nSTDERR:");
    System.out.println(stderr);
  }
}

As you can see from that code, the SystemCommandExecutor can throw two types of exceptions, and in your
programs you should catch those exceptions and deal with them properly. (You'll see the potential causes
of those exceptions shortly.)

Now that you've seen a couple of examples of how to write code to use the SystemCommandExecutor class,
we can look at the source code for that class to see how it works behind the scenes.
Behind the 'java exec' curtain: ProcessBuilder, Process, and Thread

The SystemCommandExecutor constructor doesn't do anything exciting, so I'm skipping that for now. You
can see it if you download the class (linked to at the end of this article).

As you've seen, this class has a method named executeCommand, and as of January 20, 2010, the executeCommand
method looks like this:

public int executeCommand()
throws IOException, InterruptedException
{
  int exitValue = -99;

  try
  {
    // create the ProcessBuilder and Process
    ProcessBuilder pb = new ProcessBuilder(commandInformation);
    Process process = pb.start();

    // you need this if you're going to write something to the command's input stream
    // (such as when invoking the 'sudo' command, and it prompts you for a password).
    OutputStream stdOutput = process.getOutputStream();

    // i'm currently doing these on a separate line here in case i need to set them to null
    // to get the threads to stop.
    // see http://java.sun.com/j2se/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html
    InputStream inputStream = process.getInputStream();
    InputStream errorStream = process.getErrorStream();

    // these need to run as java threads to get the standard output and error from the command.
    // the inputstream handler gets a reference to our stdOutput in case we need to write
    // something to it, such as with the sudo command
    inputStreamHandler = new ThreadedStreamHandler(inputStream, stdOutput, adminPassword);
    errorStreamHandler = new ThreadedStreamHandler(errorStream);

    // TODO the inputStreamHandler has a nasty side-effect of hanging if the password is wrong; fix it
    inputStreamHandler.start();
    errorStreamHandler.start();

    // TODO a better way to do this?
    exitValue = process.waitFor();

    // TODO a better way to do this?
    inputStreamHandler.interrupt();
    errorStreamHandler.interrupt();
    inputStreamHandler.join();
    errorStreamHandler.join();
  }
  catch (IOException e)
  {
    // TODO deal with this here, or just throw it?
    throw e;
  }
  catch (InterruptedException e)
  {
    // generated by process.waitFor() call
    // TODO deal with this here, or just throw it?
    throw e;
  }
  finally
  {
    return exitValue;
  }
}

This code is still a bit sloppy, but I think there are enough comments in there to help you get an idea
of what I'm doing in this method. In short, this class does the following:

    Creates a ProcessBuilder from the List of Strings you supplied.
    Creates a Process object from that ProcessBuilder.
    Does some work to handle the stdin, stdout, and stderr of the command you are executing. Those
    streams are handled in special ThreadedStreamHandler threads.
    Waits for the process to finish.

There is probably much more to say about this class -- besides the part where there are several TODO items
-- but I'll leave it at that until anyone has any questions. Most importantly, as long as you don't need
to run a sudo command, this class appears to work fine today, executing simple system commands like ls
/tmp, as well as more complicated pipeline commands, like the ps command shown earlier.

Actually, there is one more thing to say. This class also has two convenience methods that you access
the output from the system command you exec'd:

/**
 * Get the standard output (stdout) from the command you just exec'd.
 */
public StringBuilder getStandardOutputFromCommand()
{
  return inputStreamHandler.getOutputBuffer();
}

/**
 * Get the standard error (stderr) from the command you just exec'd.
 */
public StringBuilder getStandardErrorFromCommand()
{
  return errorStreamHandler.getOutputBuffer();
}

The way this class works, it buffers all the output (stdout and stderr) from the system command you execute,
and then lets you retrieve the output when the command is finished running. It accomplishes this by reading
the stdout and stderr streams in two separate threads that are instances of my ThreadedStreamHandler
class. Let's take a look at that class -- and then you'll be ready to use this code in your own projects.



<< Back to "Java exec with ProcessBuilder and Process, part 1"

Next: Java exec with ProcessBuilder and Process, part 3 >>


---
https://alvinalexander.com/java/java-exec-processbuilder-process-3
Java exec - execute system processes with Java ProcessBuilder and Process (part 3)
August 3 2017

<< Back to "Java exec with ProcessBuilder and Process, part 2"
Our ThreadedStreamHandler class

Based on an old-but-good article at JavaWorld, I'm developing the following Java ThreadedStreamHandler
class. (It's still a work-in-progress, but as mentioned, commands that don't have to be run using sudo
seem to work just fine right now.)

As you have seen from the way this code is used, this class is used to read the system command's standard
error (stderr) and standard output (stdout) streams in standard Java Thread objects. Let me share the
code here, and then I'll discuss how it works.

<code>
package com.devdaily.system;
import java.io.*;

/**
 * ThreadedStreamHandler.java
 * @version 0.1
 *
 * This class is intended to be used with the SystemCommandExecutor
 * class to let users execute system commands from Java applications.
 *
 * This class is based on work that was shared in a JavaWorld article
 * named "When System.exec() won't". That article is available at this
 * url:
 *
 * http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html
 *
 * Copyright 2010 alvin j. alexander, devdaily.com.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.

 * You should have received a copy of the GNU Lesser Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Please ee the following page for the LGPL license:
 * http://www.gnu.org/licenses/lgpl.txt
 *
 */
class ThreadedStreamHandler extends Thread {
    InputStream inputStream;
    String adminPassword;
    OutputStream outputStream;
    PrintWriter printWriter;
    StringBuilder outputBuffer = new StringBuilder();
    private boolean sudoIsRequested = false;

    /**
     * A simple constructor for when the sudo command is not necessary.
     * This constructor will just run the command you provide, without
     * running sudo before the command, and without expecting a password.
     *
     * @param inputStream
     * @param streamType
     */
    ThreadedStreamHandler(InputStream inputStream) {
        this.inputStream = inputStream;
    }

    /**
     * Use this constructor when you want to invoke the 'sudo' command.
     * The outputStream must not be null. If it is, you'll regret it. :)
     *
     * TODO this currently hangs if the admin password given for the sudo command is wrong.
     *
     * @param inputStream
     * @param streamType
     * @param outputStream
     * @param adminPassword
     */
    ThreadedStreamHandler(InputStream inputStream, OutputStream outputStream, String adminPassword) {
        this.inputStream = inputStream;
        this.outputStream = outputStream;
        this.printWriter = new PrintWriter(outputStream);
        this.adminPassword = adminPassword;
        this.sudoIsRequested = true;
    }

    public void run() {
        // on mac os x 10.5.x, when i run a 'sudo' command, i need to write
        // the admin password out immediately; that's why this code is
        // here.
        if (sudoIsRequested) {
            //doSleep(500);
            printWriter.println(adminPassword);
            printWriter.flush();
        }

        BufferedReader bufferedReader = null;
        try {
            bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line = null;
            while ((line = bufferedReader.readLine()) != null) {
                outputBuffer.append(line + "\n");
            }
        }
        catch (IOException ioe) {
            // TODO handle this better; users won't want the code doing this
            ioe.printStackTrace();
        }
        catch (Throwable t) {
            // TODO handle this better; users won't want the code doing this
            t.printStackTrace();
        }
        finally {
            try {
                bufferedReader.close();
            }
            catch (IOException e) {
                // ignore this one
            }
        }
    }

    private void doSleep(long millis) {
        try {
            Thread.sleep(millis);
        }
        catch (InterruptedException e) {
            // ignore
        }
    }

    public StringBuilder getOutputBuffer() {
        return outputBuffer;
    }
}
</code>

As you can see, that's a lot of wrapper and error-handling code wrapped around some more basic code that
looks like this:

<code>
BufferedReader bufferedReader = null;
bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
String line = null;
while ((line = bufferedReader.readLine()) != null) {
    outputBuffer.append(line + "\n");
}
</code>

Putting everything together, this code, running in a Java thread, lets your program read the stdout and
stderr streams from the command you're running. As mentioned in that JavaWorld program, this is very
important, because if you don't read these streams in Java Threads, your system call may block. This is
eloquently stated in the Process class Javadoc this way:

    Because some native platforms only provide limited buffer size for standard input and output streams,
    failure to promptly write the input stream or read the output stream of the subprocess may cause
    the subprocess to block, and even deadlock.

I've found this to be especially true when running a sudo command with this code on Mac OS X; if I don't
immediately write my admin password to the process, the code will hang.
This "java exec" article and class updates

As I mentioned above, this code is a work in progress, and the API will continue to change for the
foreseeable future. If you just want to run a simple Unix ls or ps command, or even a command pipeline,
this code seems to work fine on my Mac OS X 10.5 systems.

But if you want to run something like a sudo command, I still need to fix a few problems, and to that
end, I've even removed a special constructor from the SystemCommandExecutor class that should be used
when you want to run a sudo command.

I hope to resolve the sudo "wrong password" problem shortly, but other than that, I'm not aware of any
other bugs (just the TODO items shown).

If you have any comments, opinions, or suggestions on how this API should evolve, feel free to make a
comment below, or send me an email using our contact form.
Download our Java exec classes

You are welcome to download these classes and use them in your own programs. Here are direct links to
the three classes discussed above:

    ProcessBuilderExample - this is the "driver" class used to demonstrate the other classes
    SystemCommandExecutor
    ThreadedStreamHandler

I hope this article and source code help you understand the process of executing system commands from
a Java application.

<< Back to "Java exec with ProcessBuilder and Process, part 2"


---
// filename: ProcessBuilderExample.java

package com.devdaily.system;
import java.io.IOException;
import java.util.*;

public class ProcessBuilderExample {
    
    public static void main(String[] args) throws Exception {
        new ProcessBuilderExample();
    }

    // can run basic ls or ps commands
    // can run command pipelines
    // can run sudo command if you know the password is correct
    public ProcessBuilderExample() throws IOException, InterruptedException {
        // build the system command we want to run
        List<String> commands = new ArrayList<String>();
        commands.add("/bin/sh");
        commands.add("-c");
        commands.add("ls -l /var/tmp | grep tmp");

        // execute the command
        SystemCommandExecutor commandExecutor = new SystemCommandExecutor(commands);
        int result = commandExecutor.executeCommand();

        // get the stdout and stderr from the command that was run
        StringBuilder stdout = commandExecutor.getStandardOutputFromCommand();
        StringBuilder stderr = commandExecutor.getStandardErrorFromCommand();
        
        // print the stdout and stderr
        System.out.println("The numeric result of the command was: " + result);
        System.out.println("STDOUT:");
        System.out.println(stdout);
        System.out.println("STDERR:");
        System.out.println(stderr);
    }
}

---
// filename: SystemCommandExecutor.java

package com.devdaily.system;
import java.io.*;
import java.util.List;

/**
 * This class can be used to execute a system command from a Java application.
 * See the documentation for the public methods of this class for more
 * information.
 * 
 * Documentation for this class is available at this URL:
 * 
 * http://devdaily.com/java/java-processbuilder-process-system-exec
 *
 * 
 * Copyright 2010 alvin j. alexander, devdaily.com.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.

 * You should have received a copy of the GNU Lesser Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Please ee the following page for the LGPL license:
 * http://www.gnu.org/licenses/lgpl.txt
 * 
 */
 
public class SystemCommandExecutor {
    private List<String> commandInformation;
    private String adminPassword;
    private ThreadedStreamHandler inputStreamHandler;
    private ThreadedStreamHandler errorStreamHandler;
    
    /**
     * Pass in the system command you want to run as a List of Strings, as shown here:
     * 
     * List<String> commands = new ArrayList<String>();
     * commands.add("/sbin/ping");
     * commands.add("-c");
     * commands.add("5");
     * commands.add("www.google.com");
     * SystemCommandExecutor commandExecutor = new SystemCommandExecutor(commands);
     * commandExecutor.executeCommand();
     * 
     * Note: I've removed the other constructor that was here to support executing
     *             the sudo command. I'll add that back in when I get the sudo command
     *             working to the point where it won't hang when the given password is
     *             wrong.
     *
     * @param commandInformation The command you want to run.
     */
    public SystemCommandExecutor(final List<String> commandInformation) {
        if (commandInformation==null) throw new NullPointerException("The commandInformation is required.");
        this.commandInformation = commandInformation;
        this.adminPassword = null;
    }

    public int executeCommand() throws IOException, InterruptedException {
        int exitValue = -99;

        try {
            ProcessBuilder pb = new ProcessBuilder(commandInformation);
            Process process = pb.start();

            // you need this if you're going to write something to the command's input stream
            // (such as when invoking the 'sudo' command, and it prompts you for a password).
            OutputStream stdOutput = process.getOutputStream();
            
            // i'm currently doing these on a separate line here in case i need to set them to null
            // to get the threads to stop.
            // see http://java.sun.com/j2se/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();

            // these need to run as java threads to get the standard output and error from the command.
            // the inputstream handler gets a reference to our stdOutput in case we need to write
            // something to it, such as with the sudo command
            inputStreamHandler = new ThreadedStreamHandler(inputStream, stdOutput, adminPassword);
            errorStreamHandler = new ThreadedStreamHandler(errorStream);

            // TODO the inputStreamHandler has a nasty side-effect of hanging if the given password is wrong; fix it
            inputStreamHandler.start();
            errorStreamHandler.start();

            // TODO a better way to do this?
            exitValue = process.waitFor();
 
            // TODO a better way to do this?
            inputStreamHandler.interrupt();
            errorStreamHandler.interrupt();
            inputStreamHandler.join();
            errorStreamHandler.join();
        }
        catch (IOException e) {
            // TODO deal with this here, or just throw it?
            throw e;
        }
        catch (InterruptedException e) {
            // generated by process.waitFor() call
            // TODO deal with this here, or just throw it?
            throw e;
        }
        finally {
            return exitValue;
        }
    }

    /**
     * Get the standard output (stdout) from the command you just exec'd.
     */
    public StringBuilder getStandardOutputFromCommand() {
        return inputStreamHandler.getOutputBuffer();
    }

    /**
     * Get the standard error (stderr) from the command you just exec'd.
     */
    public StringBuilder getStandardErrorFromCommand() {
        return errorStreamHandler.getOutputBuffer();
    }

}


---
// filename: ThreadedStreamHandler.java

package com.devdaily.system;
import java.io.*;

/**
 * This class is intended to be used with the SystemCommandExecutor
 * class to let users execute system commands from Java applications.
 * 
 * This class is based on work that was shared in a JavaWorld article
 * named "When System.exec() won't". That article is available at this
 * url:
 * 
 * http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html
 * 
 * Documentation for this class is available at this URL:
 * 
 * http://devdaily.com/java/java-processbuilder-process-system-exec
 * 
 * 
 * Copyright 2010 alvin j. alexander, devdaily.com.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
 * GNU Lesser Public License for more details.

 * You should have received a copy of the GNU Lesser Public License
 * along with this program.    If not, see <http://www.gnu.org/licenses/>.
 * 
 * Please ee the following page for the LGPL license:
 * http://www.gnu.org/licenses/lgpl.txt
 * 
 */
class ThreadedStreamHandler extends Thread {
    InputStream inputStream;
    String adminPassword;
    OutputStream outputStream;
    PrintWriter printWriter;
    StringBuilder outputBuffer = new StringBuilder();
    private boolean sudoIsRequested = false;
    
    /**
     * A simple constructor for when the sudo command is not necessary.
     * This constructor will just run the command you provide, without
     * running sudo before the command, and without expecting a password.
     * 
     * @param inputStream
     * @param streamType
     */
    ThreadedStreamHandler(InputStream inputStream) {
        this.inputStream = inputStream;
    }

    /**
     * Use this constructor when you want to invoke the 'sudo' command.
     * The outputStream must not be null. If it is, you'll regret it. :)
     * 
     * TODO this currently hangs if the admin password given for the sudo command is wrong.
     * 
     * @param inputStream
     * @param streamType
     * @param outputStream
     * @param adminPassword
     */
     
    ThreadedStreamHandler(InputStream inputStream, OutputStream outputStream, String adminPassword) {
        this.inputStream = inputStream;
        this.outputStream = outputStream;
        this.printWriter = new PrintWriter(outputStream);
        this.adminPassword = adminPassword;
        this.sudoIsRequested = true;
    }
    
    public void run() {
        // on mac os x 10.5.x, when i run a 'sudo' command, i need to write
        // the admin password out immediately; that's why this code is
        // here.
        if (sudoIsRequested) {
            //doSleep(500);
            printWriter.println(adminPassword);
            printWriter.flush();
        }

        BufferedReader bufferedReader = null;
        try {
            bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line = null;
            while ((line = bufferedReader.readLine()) != null) {
                outputBuffer.append(line + "\n");
            }
        }
        catch (IOException ioe) {
            // TODO handle this better
            ioe.printStackTrace();
        }
        catch (Throwable t) {
            // TODO handle this better
            t.printStackTrace();
        }
        finally {
            try {
                bufferedReader.close();
            }
            catch (IOException e) {
                // ignore this one
            }
        }
    }
    
    private void doSleep(long millis) {
        try {
            Thread.sleep(millis);
        }
        catch (InterruptedException e) {
        // ignore
        }
    }
    
    public StringBuilder getOutputBuffer() {
    return outputBuffer;
    }
}

---

