filename: jv_permutations-1-multif_20200617.txt
https://www.baeldung.com/java-array-permutations

Permutations of an Array in Java
September 16, 2019

1. Introduction
   In this article, we'll look at how to create permutations of an array.

   First, we'll define what a permutation is. Second, we'll look at some constraints. And third, we'll
   look at three ways to calculate them: recursively, iteratively, and randomly.

   We'll focus on the implementation in Java and therefore won't go into a lot of mathematical detail.

2. What is a Permutation?
   A permutation of a set is a rearrangement of its elements. A set which consists of n elements has
   n! permutations. Here n! is the factorial, which is the product of all positive integers smaller or
   equal to n.

  2.1. Example

   The array of integers [3,4,7] has three elements and six permutations:

   n! = 3! = 1 x 2 x 3 = 6

   Permutations: [3,4,7]; [3,7,4]; [4,7,3]; [4,3,7]; [7,3,4]; [7,4,3]

  2.2. Constraints

   The number of permutation increases fast with n. While it takes only a few seconds to generate all
   permutations of ten elements, it will take two weeks to generate all permutations of 15 elements:

3. Algorithms
  3.1. Recursive Algorithm
   The first algorithm we look at is Heap's algorithm. It's a recursive algorithm which produces all
   permutations by swapping one element per iteration.

   The input array will be modified. If we don't want that, we need to create a copy of the array before
   calling the method:
public static <T> void printAllRecursive(
  int n, T[] elements, char delimiter) {

    if(n == 1) {
        printArray(elements, delimiter);
    } else {
        for(int i = 0; i < n-1; i++) {
            printAllRecursive(n - 1, elements, delimiter);
            if(n % 2 == 0) {
                swap(elements, i, n-1);
            } else {
                swap(elements, 0, n-1);
            }
        }
        printAllRecursive(n - 1, elements, delimiter);
    }
}

   The method uses two helper methods:
private void swap(T[] input, int a, int b) {
    T tmp = input[a];
    input[a] = input[b];
    input[b] = tmp;
}
private void printArray(T[] input) {
    System.out.print('\n');
    for(int i = 0; i < input.length; i++) {
        System.out.print(input[i]);
    }
}

   Here, we write the result to System.out, however, we can easily store the result in an array or in a
   list instead.

  3.2. Iterative Algorithm
   Heap's algorithm can also be implemented using iterations:
int[] indexes = new int[n];
int[] indexes = new int[n];
for (int i = 0; i < n; i++) {
    indexes[i] = 0;
}

printArray(elements, delimiter);

int i = 0;
while (i < n) {
    if (indexes[i] < i) {
        swap(elements, i % 2 == 0 ?  0: indexes[i], i);
        printArray(elements, delimiter);
        indexes[i]++;
        i = 0;
    }
    else {
        indexes[i] = 0;
        i++;
    }
}

  3.3. Permutations in Lexicographical Order
   If the elements are comparable, we can generate permutations sorted by the natural order of the
   elements:
public static <T extends Comparable<T>> void printAllOrdered(
  T[] elements, char delimiter) {

    Arrays.sort(elements);
    boolean hasNext = true;

    while(hasNext) {
        printArray(elements, delimiter);
        int k = 0, l = 0;
        hasNext = false;
        for (int i = elements.length - 1; i > 0; i--) {
            if (elements[i].compareTo(elements[i - 1]) > 0) {
                k = i - 1;
                hasNext = true;
                break;
            }
        }

        for (int i = elements.length - 1; i > k; i--) {
            if (elements[i].compareTo(elements[k]) > 0) {
                l = i;
                break;
            }
        }

        swap(elements, k, l);
        Collections.reverse(Arrays.asList(elements).subList(k + 1, elements.length));
    }
}

   This algorithm has a reverse operation in every iteration and therefore it is less efficient on
   arrays than Heap's algorithm.

  3.4. Randomized Algorithm
   If n is big, we can generate a random permutation by shuffling the array:
Collections.shuffle(Arrays.asList(elements));

   We can do this several times to generate a sample of permutations.

   We might create the same permutations more than once, however, for big values of n, the chances to
   generate the same permutation twice are low.

4. Conclusion
   There are many ways to generate all permutations of an array. In this article, we saw the recursive
   and iterative Heap's algorithm and how to generate a sorted list of permutations.

   It's not feasible to generate all permutations for large arrays, therefore, we can generate random
   permutations instead.

   The implementation of all code snippets in this article can be found in our Github repository.



---
https://dzone.com/articles/java-8-master-permutations

Java 8: Master Permutations
Jul. 07, 15

Using Permutations, you can try all combinations of an input set.

Every morning when you wake up, and you need to perform a set of tasks before you go to work or do something
else you'd like. Have you ever thought of each and every possible order of tasks you can start your day with?

Using Permutations, you can try all combinations of an input set. As you will learn in this post, there is an
astonishing number of combinations even for a small numbered set. For example, if you have just ten items, you
can combine them in over three million ways!

In this post, we will build a small Java 8 support class named Permutations that can be used in unit testing,
game strategy evaluation, problem solving, and in many other powerful applications.
The Mathematics

You do not have to read this chapter in order to understand this post. However, it helps. So, try to stay on
as long as you can before skipping to the next chapter.

The term permutation relates to the process of arranging all the members of a set in an order or, if the set
is already ordered, rearranging (or mathematically speaking permutating) the order of the set. For example,
if we have a set {1, 2, 3} we can arrange that set in six different ways; {1, 2, 3}, {1, 3, 2}, {2, 1, 3},
{2, 3, 1}, {3, 1, 2}, {3, 2, 1}.

The number of permutations for n distinct objects in a set is said to be n-factorial, mathematically written
as n!. The value of n! can be calculated as the factor of one multiplied by all positive integers less than or
equal to n. So, if we take our previous set {1, 2, 3}, we will see that it has three distinct members. Thus,
there will be 3! = 1*1*2*3 = 6 unique combinations. Encouragingly enough, this is consistent with the example
above, where we listed all the six combinations. The observant reader now concludes that one may ignore the
serial factor of one since one is the multiplicative identity number, i.e. for any number a,
it is true that 1*a = a. In pure English, this means that you can skip multiplying with 1 since you will get
back the same result anyhow. So, n! is really 1 multiplied with 2*3*....*n.

Now, if we produce a list of the number of distinct members in a set and calculate the corresponding
n-factorial, we will arrive at the following table:

0!  1 (by definition, 1 without multiplying with anything)
1!  1 (obviously you can only arrange a single item in one way)
2!  2
3!  6 (as in the example above)
4!  24
5!  120 (the largest n-factorial value that can fit in a byte (max 2^7 = 127))
6!  720
7!  5040 (the largest n-factorial value that can fit in a short (max 2^15 = 32768))
8!  40320 
9!  362880
10! 3628800
11! 39916800
12! 479001600 (the largest n-factorial value that can fit in an int (max 2^31  = 2147483647))
13! 6227020800
14! 87178291200
15! 1307674368000
16! 20922789888000
17! 355687428096000
18! 6402373705728000
19! 121645100408832000
20! 2432902008176640000 (the largest n-factorial value that can fit in a long (max 2^63))
21! 51090942171709440000
...
42! 1405006117752879898543142606244511569936384000000000 (~the number of atoms on Earth)

As you can see, you have to take care when applying permutations in your code, because you might experience
extremely long execution times even for a small number of items. If you, for example, can evaluate any given
combination in 1 ms and you have 16 items, the wall clock time for a single thread
will be 16!/1000 s > 600 years!

The Permutations class
There are many ways to implement a permutator in a programming language. In this post, my objective was to
present the shortest possible code for a permutator in Java 8, so if you can come up with a shorter one,
please leave a comment below. Thus, I have opted for simplicity rather than performance.

Secondly, I wanted to work with Java 8 Streams, allowing integration with the powerful Stream functions that
are available.

Implementation
The first method we need is the n-factorial function that calculates the number of unique combination of a
distinct set. I have written a post on this before and you can read the details here[**1].
This is how it looks like:

public long factorial(int n) {
    if (n > 20 || n < 0) throw new IllegalArgumentException(n + " is out of range");
    return LongStream.rangeClosed(2, n).reduce(1, (a, b) -> a * b);
}

Note that the function will only handle an input range of  0  <= n <= 20 because 0 is the lowest defined input
value for n-factorial and 20 corresponds to the maximum return value a long can hold.

Next thing we need is a method that returns a numbered permutation of any given input List. So if we, for
example, have a List with two items "A" and "B", the first permutation (0) is {A, B} and
the second permutation (1) is {B, A}. If we have a List with tree items {A, B, C}, then we have the following
permutations:

no.     Permutation
--      ---------------
0       {A, B, C}
1       {A, C, B}
2       {B, A, C}
3       {B, C, A}
4       {C, A, B}
5       {C, B, A}

We need to make yet another table of a List before the pattern that I am going to exploit becomes obvious.
The complete permutations for the List {A, B, C, D} looks like this:

no.     Permutation
--      ---------------
0       {A, B, C, D}
1       {A, B, D, C}
2       {A, C, B, D}
3       {A, C, D, B}
4       {A, D, B, C}
5       {A, D, C, B}
6       {B, A, C, D}
7       {B, A, D, C}
8       {B, C, A, D}
9       {B, C, D, A}
10      {B, D, A, C}
11      {B, D, C, A}
12      {C, A, B, D}
13      {C, A, D, B}
14      {C, B, A, D}
15      {C, B, D, A} (Used in an example below)
16      {C, D, A, B}
17      {C, D, B, A}
18      {D, A, B, C}
19      {D, A, C, B}
20      {D, B, A, C}
21      {D, B, C, A}
22      {D, C, A, B}
23      {D, C, B, A}

Take a look at the first item in each row and you will see that it is changing in sequence of the input list.
Let n be the number of items in the input List (n = 4) and subFactorial be (n-1)! (subFactorial = (4-1)! = 3! 
= 6) then the first item in the list for permutation no is at index no/subFactorial. In the example above, the
first item for permutation 15 is at index no/subFactorial = 15/6 = 2,
which corresponds to "C" (remember that "A" is at index 0, "B" is at index 1 and so forth).

This means that we, for any input List, can reduce the problem by picking the first item according to the
algorithm above and then recursively invoke the same method again, but now with a reduced number of items in
the input list. A classical divide-and-conquer approach. This is how it looks like:

private static <T> List<T> permutationHelper(long no, LinkedList<T> in, List<T> out) {
    if (in.isEmpty()) return out;
    long subFactorial = factorial(in.size() - 1);
    out.add(in.remove((int) (no / subFactorial)));
    return permutationHelper(no % subFactorial, in, out);
}

This helper method takes the permutation number no, an input List in with the initial ordered items and then
an out List used to build up the result as the recursion progresses.

As common recursion practice dictates, we start with the base case where we handle the trivial case where
recursion shall stop. If the in List is empty, then we are ready and just return the now completed out list.

If the in List was not empty, then we first calculate the previously mentioned subFactorial
which is (in.size()-1)! as explained above. This value is then used later on in the method.

The next line is really all logic in the method. We first calculate the index of the item we want to put first
in the out List. The index of the item is (int)(no/subFactorial) and we remove this from the in List. As the
remove method conveniently returns the item we just removed, we can use remove's return value directly and just
add it to the end of the out List in one step.

Now that we have reduced the problem from n to n-1 we need to recurse in a proper way.
We call our permutationHelper() method with the same in and out lists we got as input parameters but the
permutaion number no is now the remainder of the previous division. This is logical because we handled only
the corresponding whole part of the division before. So, we invoke with no%subFactorial which is the remainder
that remains to handle.

This is really all there is to do. Those five innocent lines can execute in under 1 ms or perhaps in over 2000
years depending on your input.

The helper method is just there to help us write the real permutator that we are exposing in the class. Here
is the exposed wrapper:

public static <T> List<T> permutation(long no, List<T> items) {
    return permutationHelper(
        no,
        new LinkedList<>(Objects.requireNonNull(items)),
        new ArrayList<>()
    );
}

We provide the permutation number no and the List we want to use as input for our method and we just create the
in and out List and call the helper method. Simple.

So now we can compute any permutation of a given List. But the Stream support remains, the one  that can give
us streams of permutated lists. Providing such a method is really trivial now that we got our permutation()
method. This is how it can be done:

public static <T> Stream<Stream<T>> of(T... items) {
    List<T> itemList = Arrays.asList(items);
    return LongStream.range(0, factorial(items.length))
            .mapToObj(no -> permutation(no, itemList).stream());
}

All the hard work is done by the LongStream which supports laziness, parallelism, etc for free and we only map
the long Stream to what we would like to have.
The long stream provides the input longs 0, 1, 2, ..., (items.lenght)! and then we map those longs to the
corresponding permutation. It is really simple.

Note that I have opted to return a Stream of Stream rather than a Stream of List or something similar.
If you want a Stream of List, you just change the return type and the mapping.

Now that we have completed everything we need, I will provide the entire Permutations class before we start
putting it to use with some examples:

public class Permutations {

    private Permutations() {
    }
 
    public static long factorial(int n) {
        if (n > 20 || n < 0) throw new IllegalArgumentException(n + " is out of range");
        return LongStream.rangeClosed(2, n).reduce(1, (a, b) -> a * b);
    }

    public static <T> List<T> permutation(long no, List<T> items) {
        return permutationHelper(no,
              new LinkedList<>(Objects.requireNonNull(items)),
              new ArrayList<>());
    }

    private static <T> List<T> permutationHelper(long no, LinkedList<T> in, List<T> out) {
        if (in.isEmpty()) return out;
        long subFactorial = factorial(in.size() - 1);
        out.add(in.remove((int) (no / subFactorial)));
        return permutationHelper((int) (no % subFactorial), in, out);
    }

    @SafeVarargs
    @SuppressWarnings("varargs") // Creating a List from an array is safe
    public static <T> Stream<Stream<T>> of(T... items) {
        List<T> itemList = Arrays.asList(items);
        return LongStream.range(0, factorial(items.length))
                .mapToObj(no -> permutation(no, itemList).stream());
    }
}

Examples
We start with testing our factorial() method a bit with the following code snippet:

List<String> items = Arrays.asList("A", "B", "C");

long permutations = Permutations.factorial(items.size());

System.out.println(items + " can be combined in " + permutations + " different ways:");

which will print out:
[A, B, C] can be combined in 6 different ways:

This looks encouraging. We know from the previous chapter that one can combine three distinct objects in six
ways. So now we want to see facts on the table: What are those combinations? One way of seeing them all is to
use our permutation() method. If we add the following code to our existing snippet:

LongStream.range(0, permutations).forEachOrdered(i -> {
        System.out.println(i + ": " + Permutations.permutation(i, items));
    });

We will get the following output:

[A, B, C] can be combined in 6 different ways:
0: [A, B, C]
1: [A, C, B]
2: [B, A, C]
3: [B, C, A]
4: [C, A, B]
5: [C, B, A]

Wow! It works. It looks exactly the same as in the table in the previous chapter. Now let's take the
Permutaions.of() method for a spin like this:

Permutations.of("A", "B", "C")
        .map(s -> s.collect(toList()))
        .forEachOrdered(System.out::println);

The Permutations.of() method will provide all permutations of {A, B, C} and then we will collect those
permutations into lists and subsequently print the lists like this:

[A, B, C]
[A, C, B]
[B, A, C]
[B, C, A]
[C, A, B]
[C, B, A]

Sometimes we are interested in just generating a single sequence in all possible orders and this can also be
done easily in a similar way like this:

Permutations.of("A", "B", "C")
        .flatMap(Function.identity())
        .forEachOrdered(System.out::print);

Which will produce:
ABCACBBACBCACABCBA

Parallelism
As I mentioned, the Stream we get from Permutations.of() supports parallelism which is nice if you have a
large number of permutaions and you want to put all your CPU:s to use. To be able to examine which threads are
executing what, we will use a small support method:

private static <T> void printThreadInfo(Stream<T> s) {
    System.out.println(Thread.currentThread().getName() + " handles " + s.collect(toList()));
}

Now, let us examine which threads are being used by running the following line:

Permutations.of("A", "B", "C").forEach(Main::printThreadInfo);

We will see something like this:
main handles [A, B, C]
main handles [A, C, B]
main handles [B, A, C]
main handles [B, C, A]
main handles [C, A, B]
main handles [C, B, A]

This is logical. All our permutations are handled by the same thread (because we did not ask for a parallel
stream). Now, let's modify the test line so it looks like this:
Permutations.of("A", "B", "C").parallel().forEach(Main::printThreadInfo);

This will produce something similar to this;
main handles [B, C, A]
main handles [C, B, A]
ForkJoinPool.commonPool-worker-2 handles [C, A, B]
ForkJoinPool.commonPool-worker-2 handles [A, B, C]
ForkJoinPool.commonPool-worker-2 handles [B, A, C]
ForkJoinPool.commonPool-worker-1 handles [A, C, B]

Apparently, on my computer, two combinations continued to execute on the main thread where as there were two
other threads that (unevenly) shared the rest of the work.

Laziness
It should be noted that the Stream in Permutations.of() produces the sequence of combinations lazily (or using
other words, as they are needed). So, if we set up an enormous amount of combinations, but only need one, the
stream will only produce that one and only combination. Let's take an example with 16 input items which
corresponds to an extremely large number of permutations, something comparable with the national dept:

System.out.println(
        Permutations.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
        .findFirst()
        .get()
        .collect(toList())
);

This line will complete instantly and will return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] which,
unsurprisingly, is the first combination.

Testing
Permutations are great for testing! How many times have you asked yourself: "Have I tried all the possible
combinations". Using Permutations,  you can now be sure that you have tested every input combinations like in
this simple outline (obviously, you need to replace System.out.println with something more useful):

Runnable setup = () -> System.out.println("setup connection");

Runnable send = () -> System.out.println("send data");

Runnable close = () -> System.out.println("close connection");

Permutations.of(setup, send, close)
    .flatMap(Function.identity())
    .forEachOrdered(Runnable::run);

The Morning
So, how does the optimal morning look like? Well, if you are alone at home, your day might start in many
different ways, perhaps like this:

Permutations.of(
        "Get up",
        "Brush teeths",
        "Eat breakfast",
        "Get dressed",
        "Find wallet",
        "Find computer"
)
        .map(s -> s.collect(toList()))
        .forEach(System.out::println);

So now you can pick your favorite from:
[Get up, Brush teeths, Eat breakfast, Get dressed, Find wallet, Find computer]
[Get up, Brush teeths, Eat breakfast, Get dressed, Find computer, Find wallet]
[Get up, Brush teeths, Eat breakfast, Find wallet, Get dressed, Find computer]
[Get up, Brush teeths, Eat breakfast, Find wallet, Find computer, Get dressed]
[Get up, Brush teeths, Eat breakfast, Find computer, Get dressed, Find wallet]
[Get up, Brush teeths, Eat breakfast, Find computer, Find wallet, Get dressed]
... (713 other combinations) ...
[Find computer, Find wallet, Get dressed, Eat breakfast, Brush teeths, Get up]

With some preparation, even the last combination is really doable...

Conclusions
Permutation is a powerful tool that is worth mastering.

In this post, I have devised a very short and simple, yet reasonably efficient, implementation of a permutation
support class for Java 8.

If you are writing unit tests, you should definitely know how to use permutations.

Take care, not to hit the "asymptotic wall" and limit the number of items that you work with when you are
generating permutations.

Life is about picking the right choices, is it not?


---
[**1]
http://minborgsjavapot.blogspot.com/2014/11/compute-factorials-using-java-8-streams.html

Compute factorials using Java 8 streams
Wednesday, November 5, 2014

Background
   N factorial (also denoted N!) means computing 1*2*3*...*N and is a classical problem used in computer
   science to illustrate different programming patterns. In this post I will show how one can use Java
   8's Streams to calculate factorials. But first, I will show two other ways that were previously used
   before Java 8 appeared.

Recursion
   From our computer science classes, we all remember the classical way of computing factorial(). The
   following method illustrates the concept:
    public long factorial(int n) {
        if (n > 20) throw new IllegalArgumentException(n + " is out of range");
        return (1 > n) ? 1 : n * factorial(n - 1);
    }

   Because long overflows for n > 20, we need to throw an exception to avoid faulty return values. If we
   are within the valid input range, we check for the basic case where n is 1 or less for which
   factorial is 1, otherwise we recurse by returning n multiplied with factorial(n-1). Eventually, we
   will reach factorial(1) and the recursion stops.

Imperative
   You can also use the standard imperative way of doing it using an intermediate value that is used in
   a loop, like this:
    public long factorial(int n) {
        if (n > 20) throw new IllegalArgumentException(n + " is out of range");
        long product = 1;
        for (int i = 2; i < n; i++) {
            product *= i;
        }
        return product;
    }


   Look at the loop and you might be surprised to see that we start from 2. We could as well have
   started from 1, but then again, multiplying with 1 always gives back the same result, doesn't it? So
   we optimize away that case.

Streams
   Using Java 8's stream methods we can implement factorial() in another way as depicted here:
    public long factorial(int n) {
        if (n > 20) throw new IllegalArgumentException(n + " is out of range");
        return LongStream.rangeClosed(2, n).reduce(1, (a, b) -> a * b);
    }

   Using the LongStream.rangeClosed(2, n) method we create a Stream of longs with the content 2, 3, ...
   , n. Then we take this Stream and successively applies the reduction (a, b) -> a * b meaning that for
   each pair a and b we multiply them and return the result. The result then carries over to a for the
   next round. The value "1" used in the reduced method is the identity value, i.e. the value that is
   used as a starting value for a for the first iteration.
   This way, we abstract away the implementation and instead focus on what to do. For example, the
   Stream could be made parallel and that way we could calculate the value using several threads.
   Perhaps not so useful in this particular example where n < 20, but certainly for other applications
   with longer iteration chains.
   
   Consider using Streams when iterating over values!


---
https://www.journaldev.com/526/java-program-to-find-all-permutations-of-a-string

Java Program to find all Permutations of a String

   Finding all permutations of a String in a Java Program is a tricky question and asked many times in
   interviews.

Permutation of String in Java Algorithm
   To get all the permutations, we will first take out the first char from String and permute the
   remaining chars.

   If String = "ABC"

   First char = A and remaining chars permutations are BC and CB.

   Now we can insert first char in the available positions in the permutations.

   BC -> ABC, BAC, BCA

   CB -> ACB, CAB, CBA

   So we can write a recursive function call to return the permutations and then another function call
   to insert the first characters to get the complete list of permutations.
package com.journaldev.java.string;

import java.util.HashSet;
import java.util.Set;

/**
 * Java Program to find all permutations of a String
 * @author pankaj
 *
 */
public class StringFindAllPermutations {
    public static Set<String> permutationFinder(String str) {
        Set<String> perm = new HashSet<String>();
        //Handling error scenarios
        if (str == null) {
            return null;
        } else if (str.length() == 0) {
            perm.add("");
            return perm;
        }
        char initial = str.charAt(0); // first character
        String rem = str.substring(1); // Full string without first character
        Set<String> words = permutationFinder(rem);
        for (String strNew : words) {
            for (int i = 0;i<=strNew.length();i++){
                perm.add(charInsert(strNew, initial, i));
            }
        }
        return perm;
    }

    public static String charInsert(String str, char c, int j) {
        String begin = str.substring(0, j);
        String end = str.substring(j);
        return begin + c + end;
    }

    public static void main(String[] args) {
        String s = "AAC";
        String s1 = "ABC";
        String s2 = "ABCD";
        System.out.println("\nPermutations for " + s + " are: \n" + permutationFinder(s));
        System.out.println("\nPermutations for " + s1 + " are: \n" + permutationFinder(s1));
        System.out.println("\nPermutations for " + s2 + " are: \n" + permutationFinder(s2));
    }
}

   Note that I have used SET to remove duplicates so that it works for those strings also having
   same chars.

   Here is the output of the above program:
Permutations for AAC are:
[AAC, ACA, CAA]

Permutations for ABC are:
[ACB, ABC, BCA, CBA, CAB, BAC]

Permutations for ABCD are:
[DABC, CADB, BCAD, DBAC, BACD, ABCD, ABDC, DCBA, ADBC, ADCB, CBDA, CBAD, DACB, ACBD, CDBA, CDAB, DCAB, ACDB, \
DBCA, BDAC, CABD, BADC, BCDA, BDCA]

   That's all for finding all permutations of a String in Java.
 

---
https://crunchify.com/how-to-find-all-permutations-of-a-string-in-java-example/

How to Find All Permutations of a String in Java - Example
July 16th, 2017

   In mathematics, the notion of permutation is used with several slightly different meanings, all
   related to the act of permuting (rearranging) objects or values. Informally, a permutation of a set
   of objects is an arrangement of those objects into a particular [29]order. For example, there are six
   permutations of the set {1,2,3}, namely (1,2,3), (1,3,2), (2,1,3), (2,3,1), (3,1,2), and (3,2,1).

   Here is a quick simple Algorithm which computes all Permutations of a String Object in Java.
     * First take out the first char from String and permute the remaining chars
     * If String = "123"
     * First char = 1 and remaining chars permutations are 23 and 32.
     * Now we can insert first char in the available positions in the permutations.
     * 23 -> 123, 213, 231
     * 22 -> 132, 312, 321

   CrunchifyMarmutationExample.java

package com.crunchify.tutorials;

import java.util.HashSet;
import java.util.Set;

/**
* @author Crunchify.com
*
*/

public class CrunchifyMarmutationExample {

    public static void main(String[] args) {
        String s = "ABC";
        String s1 = "EBAY";
        String s2 = "Yahoo";
        System.out.println("\nString " + s + ":\nPermutations: " + crunchifyPermutation(s));
        System.out.println("\nString " + s1 + ":\nPermutations: " + crunchifyPermutation(s1));
        System.out.println("\nString " + s2 + ":\nPermutations: " + crunchifyPermutation(s2));
    }

    public static Set<String> crunchifyPermutation(String str) {
        Set<String> crunchifyResult = new HashSet<String>();
        if (str == null) {
            return null;
        } else if (str.length() == 0) {
            crunchifyResult.add("");
            return crunchifyResult;
        }

        char firstChar = str.charAt(0);
        String rem = str.substring(1);
        Set<String> words = crunchifyPermutation(rem);
        for (String newString : words) {
            for (int i = 0; i <= newString.length(); i++) {
                crunchifyResult.add(crunchifyCharAdd(newString, firstChar, i));
            }
        }
        return crunchifyResult;
    }

    public static String crunchifyCharAdd(String str, char c, int j) {
        String first = str.substring(0, j);
        String last = str.substring(j);
        return first + c + last;
    }

}

   Output
   1
   2
   3
   4
   5
   6
   7
   8
   String ABC:
   Permutations: [ACB, ABC, BCA, CBA, CAB, BAC]

   String EBAY:
   Permutations: [YBEA, EYAB, EBYA, YABE, YAEB, BYEA, EYBA, BAEY, AYBE, ABYE, AEYB, AYEB, ABEY, BEYA,
   YBAE, EBAY, EAYB, BYAE, AEBY, YEAB, YEBA, BEAY, EABY, BAYE]

   String Yahoo:
   Permutations: [hYaoo, ooahY, oYoha, hooaY, aoYho, Yooha, ahooY, oaoYh, Yhoao, haYoo, hoaoY, ohoYa,
   haoYo, haooY, oaYoh, ooYah, oohaY, aYhoo, aoYoh, hooYa, aYooh, Yaoho, ohaoY, Yhooa, Yohao, Yohoa,
   hoYao, oahoY, aooYh, hoYoa, oYaoh, ohaYo, ohYoa, hYoao, Yahoo, oYoah, Yoaoh, aohYo, hoaYo, ahYoo,
   ahoYo, ooYha, ohYao, aoohY, oYaho, oohYa, aYoho, Yhaoo, ooaYh, oYhoa, Yoaho, Yooah, oahYo, hYooa,
   oaohY, ohoaY, Yaooh, oYhao, aohoY, oaYho]


---
https://introcs.cs.princeton.edu/java/23recursion/Permutations.java.html

Permutations.java
Below is the syntax highlighted version of Permutations.java from §2.3 Recursion.

/******************************************************************************
 *  Compilation:  javac Permutations.java
 *  Execution:    java Permutations n
 *
 *  Enumerates all permutations on n elements.
 *  Two different approaches are included.
 *
 *  % java Permutations 3
 *  abc
 *  acb
 *  bac
 *  bca
 *  cab
 *  cba
 *
 ******************************************************************************/

public class Permutations {

    // print n! permutation of the characters of the string s (in order)
    public  static void perm1(String s) { perm1("", s); }
    private static void perm1(String prefix, String s) {
        int n = s.length();
        if (n == 0) StdOut.println(prefix);
        else {
            for (int i = 0; i < n; i++)
               perm1(prefix + s.charAt(i), s.substring(0, i) + s.substring(i+1, n));
        }

    }

    // print n! permutation of the elements of array a (not in order)
    public static void perm2(String s) {
        int n = s.length();
        char[] a = new char[n];
        for (int i = 0; i < n; i++)
            a[i] = s.charAt(i);
        perm2(a, n);
    }

    private static void perm2(char[] a, int n) {
        if (n == 1) {
            StdOut.println(new String(a));
            return;
        }
        for (int i = 0; i < n; i++) {
            swap(a, i, n-1);
            perm2(a, n-1);
            swap(a, i, n-1);
        }
    }

    // swap the characters at indices i and j
    private static void swap(char[] a, int i, int j) {
        char c = a[i];
        a[i] = a[j];
        a[j] = c;
    }



    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        String alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String elements = alphabet.substring(0, n);
        perm1(elements);
        StdOut.println();
        perm2(elements);
    }
}


    Copyright © 2000-2017, Robert Sedgewick and Kevin Wayne.
    Last updated: Fri Oct 20 14:12:12 EDT 2017.

    
---
