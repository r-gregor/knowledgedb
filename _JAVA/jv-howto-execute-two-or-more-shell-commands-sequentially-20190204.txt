filename: jv_howto_execute-two-or-more-shell-commands-sequentially_20190204.txt
https://stackoverflow.com/questions/49731613/execute-two-or-more-shell-commands-sequentially-using-java

Execute two or more shell commands sequentially using Java

   I want to execute telnet and msh in a shell on Linux one after another sequentially. I am able to
   execute telnet command, but not msh command using the below code in Java:
<code>   
List<String> commands = new ArrayList<String>();
commands.add("/bin/bash");
commands.add("-c");
commands.add("telnet 10.x.x.x 1234");
commands.add("msh");
ProcessBuilder pb = new ProcessBuilder(commands);
pb.directory(new File("/home/user"));
pb.redirectErrorStream(true);
Process process = pb.start();

// Read output
StringBuilder out = new StringBuilder();
BufferedReader br = new BufferedReader(new InputStreamReader(
    process.getInputStream()));
String line = null, previous = null;
while ((line = br.readLine()) != null) {
    if (!line.equals(previous)) {
        previous = line;
        out.append(line).append('\n');
        System.out.println(line);
    }
}

// Check result
if (process.waitFor() == 0) {
    System.out.println("Success executing telnet command!");
    System.exit(0);
}

System.err.println(commands);
System.err.println(out.toString());
System.exit(1);
</code>

   Any help on this is highly appreciated.

***
   You should have two different commands to execute both in sequence like below:-
 String[] command_telnet ={"\path\to\telnet", "10.x.x.x 1234"};
 String[] command_msh ={"\path\to\msh", "parameter"};

 ProcessBuilder pb_telnet = new ProcessBuilder(commands);
 pb_telnet.directory(new File("/home/user/telnet_output.txt"));
 pb_telnet.redirectErrorStream(true);
 Process process_tel = pb_telnet.start();

   Do the same for command_msh. This approach will be easy for you to debug as you will get the command
   output in /home/user/msh_output.txt

***
     * Command are related to one another, i.e, it has to execute one after another After telnet is
       executed msh has to execute in the same prompt.
     * It will work like that only. And for that if (process_tel.waitFor() == 0 &&
       process_msh.waitFor() == 0 ) you have to change your if condition. Just try with my approach and
       let me know whether working or not.

***
   What you are currently having Java execute is the following (more or less; the following can be
   executed in a Shell, Java directly invokes a process):
/bin/bash -c 'telnet 10.x.x.x 1234' 'msh'

   This leads to Bash executing telnet, because that is the argument to the -c flag, and the msh
   argument will be ignored: Bash doesn't know what to do with it.

   There are two possible solutions.

   Solution 1: let Bash execute the two commands sequentially.
   For this to work, you want to execute something along the following lines
/bin/bash -c 'telnet 10.x.x.x 1234; msh'

   which translates to you having to merge the last two strings in your commands list. For example,
commands.add("telnet 10.x.x.x 1234; msh");

   Instead of using ; you can also use &&.

   Disadvantage: Bash will let you know the exit code of the last process only. In the case of using &&,
   having the first command fail will not even execute the second one.

   Solution 2: create a separate process in Java for each.
   For this solution, you'll essentially have to repeat all your code for the invocation of msh. I'd
   recommend wrapping it in a function if you go this route. Simply use {"/bin/bash", "-c", "telnet
   10.x.x.x 1234"} as the list of commands for one invocation, and {"/bin/bash", "-c", "msh"} for the
   other invocation.

   Advantage is that you have more control in your Java program, instead of having Bash handle things.
   Disadvantage is you starting two separate processes, but Bash might do that under the hood anyway.


---
