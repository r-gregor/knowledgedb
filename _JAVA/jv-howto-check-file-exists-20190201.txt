filename: jv_howto_check-file-exists_20190201.txt
https://stackoverflow.com/questions/1816673/how-do-i-check-if-a-file-exists-in-java

How to check if a file exists in Java?

***
   Using java.io.File:
File f = new File(filePathString);
if(f.exists() && !f.isDirectory()) {
    // do something
}

***
       There are some cases where exists() will return an incorrect result. For example, when using an
       NFS file system there is an issue with stale file handles. It's kind of obscure, but has been the
       cause of some frustrating bugs in production code before.

       Use if(f.isFile()) instead.

***
   I would recommend using isFile() instead of exists(). Most of the time you are looking to check if
   the path points to a file not only that it exists. Remember that exists() will return true if your
   path points to a directory.
new File("path/to/file.txt").isFile();

   new File("C:/").exists() will return true but will not allow you to open and read from it as a file.

     * Will this work if the file is in a subdirectory?

       The example includes subdirectories? If you mean to ask whether, given a current
       directory of /path, new File("file.txt").exists() will return true if the correct full path is
       /path/to/file.txt, the answer is a big no (unless another file /path/file.txt exists).

***
   By using nio in Java SE 7,
import java.nio.file.*;

Path path = Paths.get(filePathString);

if (Files.exists(path)) {
  // file exist
}

if (Files.notExists(path)) {
  // file is not exist
}

   If both exists and notExists return false, the existence of the file cannot be verified. (maybe no
   access right to this path)

   You can check if path is directory or regular file.
if (Files.isDirectory(path)) {
  // path is directory
}

if (Files.isRegularFile(path)) {
  // path is regular file
}

***
       What is the advatages compared to new File(path).exists() ? For a palin exists check
       
       java.nio.file.Files.exists() is a lot faster than java.io.File.exists() (from my
       small benchmark on the only computer I tested: Windows Server 2012 running Java 1.7.0_45 x64).

     * I just tried it myself and java.nio.file.Files.exists() was 5 times SLOWER than
       java.io.File.exists. (Win7 Java 1.7.0_79 - x86)
     * This also has the disadvantage that Paths.get throws an exception if the string isn't valid

***
   Using Java 8:
if(Files.exists(Paths.get(filePathString))) {
    // do something
}

     * Files.exists() takes two arguments. Typically, you'll want something like Files.exists(path,
       LinkOption.NOFOLLOW_LINKS ).

     * MikeC I wonder which method gets called without the second argument. The Docu doesn't even show
       any information about that.
       
     * There is only one Files.exists() method. Without passing the second argument, it
       still calls the same method. The second argument is varargs variable and can pass 0 or more
       LinkOptions.

***
File f = new File(filePathString);

   This will not create a physical file. Will just create an object of the class File. To physically
   create a file you have to explicitly create it:
f.createNewFile();

   So f.exists() can be used to check whether such a file exists or not.

f.isFile() && f.canRead()

***
   first hit for "java file exists" on google:
import java.io.*;

public class FileTest {
    public static void main(String args[]) {
        File f = new File(args[0]);
        System.out.println(f + (f.exists()? " is found " : " is missing "));
    }
}

***
   There are multiple ways to achieve this.
    1. In case of just for existence. It could be file or a directory.
new File("/path/to/file").exists();

    2. Check for file
File f = new File("/path/to/file");
  if(f.exists() && f.isFile()) {}

    3. Check for Directory.
File f = new File("/path/to/file");
  if(f.exists() && f.isDirectory()) {}

    4. Java 7 way.
Path path = Paths.get("/path/to/file");
Files.exists(path)  // Existence
Files.isDirectory(path)  // is Directory
Files.isRegularFile(path)  // Regular file
Files.isSymbolicLink(path)  // Symbolic Link

***
   Don't. Just catch the FileNotFoundException. The file system has to test whether the file exists
   anyway. There is no point in doing all that twice, and several reasons not to, such as:
     * double the code
     * the timing window problem whereby the file might exist when you test but not when you open, or
       vice versa, and
     * the fact that, as the existence of this question shows, you might make the wrong test and get the
       wrong answer.

   Don't try to second-guess the system. It knows. And don't try to predict the future. In general the
   best way to test whether any resource is available is just to try to use it.

***
     * What if I want to check every hour to see if a file has been deposited on a directly location. I
       have a webMethods project that has to check to see if a specific file has been uploaded to a
       specific drive. How would this be done. Let's say that I want to check every hour to see if the
       file is there. I can use Java to write a class that does this probably with a timer of some sort.

     * Catching an exception is way more expensive. In my test, checking new File().exists() was more
       than 10 times faster than catching FileNotFoundException. So, if you have a scenario where files
       normally expected to be missing (such as disk cache), exception is wrong. Also, second-guessing
       the system is cool.
       
     * You haven't addressed any of the issues I raised; the exception is only thrown when the
       file can't be opened; and operations that occur once an hour don't require micro-optimization.
       Your final sentence is nonsense.
       
     * In your case there's no issue since you don't attempt to do anything after you check
       existence. But the OP asked specifically to check before opening. In this case it's better to
       just try/catch the file open.

***
   Used the following snippet:
File f = new File(filePathString);
if(f.exists() && f.isFile()) {
    //do something ...
}


***
   Valid since Java 7 and up:

   The following snippet
if(Files.isRegularFile(Paths.get(pathToFile))) {
    // do something
}

   is perfectly satifactory, because method isRegularFile returns false if file does not exist.
   Therefore, no need to check if Files.exists(...).

   Note that other parameters are options indicating how links should be handled. By default, symbolic
   links are followed.

***
     * From sonar docs: The Files.exists method has noticeably poor performance in JDK 8, and can slow
       an application significantly when used to check files that don't actually exist. The same goes
       for Files.notExists, Files.isDirectory and Files.isRegularFile. The best alternative to this is:
        
        path.toFile().exists()


***
If you want to check for a File in a directory dir

String directoryPath = dir.getAbsolutePath()
boolean check = new File(new File(directoryPath), aFile.getName()).exists();

***
new File("/path/to/file").exists();

***
   File.exists() to check if a file exists, it will return a boolean value to indicate the check
   operation status; true if the file is existed; false if not exist.
File f = new File("c:\\test.txt");

if(f.exists()){
    System.out.println("File existed");
}else{
    System.out.println("File not found!");
}

***
   You can use the following code to check:
import java.io.File;
class Test{
    public static void main(String[] args){
        File f = new File(args[0]);         // file name will be entered by user at runtime
        System.out.println(f.exists());     // will print "true" if the file name given by user exists,
                                            // false otherwise

        if(f.exists())
        {
             //executable code;
        }
    }
}

***
   You can make it this way
import java.nio.file.Paths;

String file = "myfile.sss";
if(Paths.get(file).toFile().isFile()){
    //...do somethinh
}

***
   To check if a file exists, just import the java.io.* library
File f = new File(“C:\\File Path”);

if(f.exists()){
        System.out.println(“Exists”);           //if file exists
}else{
        System.out.println(“Doesn't exist”);    //if file doesn't exist
}


---
