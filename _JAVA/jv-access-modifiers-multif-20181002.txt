filename: jv_access_modifiers-multif_20181002.txt
https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html

Controlling Access to Members of a Class
   Access level modifiers determine whether other classes can use a particular field or invoke a
   particular method. There are two levels of access control:
     * At the top level—public, or package-private (no explicit modifier).
     * At the member level—public, private, protected, or package-private (no explicit modifier).

   A class may be declared with the modifier public, in which case that class is visible to all classes
   everywhere. If a class has no modifier (the default, also known as package-private), it is visible
   only within its own package (packages are named groups of related classes — you will learn about them
   in a later lesson.)

   At the member level, you can also use the public modifier or no modifier (package-private) just as
   with top-level classes, and with the same meaning. For members, there are two additional access
   modifiers: private and protected. The private modifier specifies that the member can only be accessed
   in its own class. The protected modifier specifies that the member can only be accessed within its
   own package (as with package-private) and, in addition, by a subclass of its class in another
   package.

   The following table shows the access to members permitted by each modifier.

   CAPTION: Access Levels
   --------------------------------------------------
   Modifier     Class   Package Subclass    World
   --------------------------------------------------
   public       Y       Y       Y           Y
   protected    Y       Y       Y           N
   no modifier  Y       Y       N           N
   private      Y       N       N           N
   --------------------------------------------------

   The first data column indicates whether the class itself has access to the member defined by the
   access level. As you can see, a class always has access to its own members. The second column
   indicates whether classes in the same package as the class (regardless of their parentage) have
   access to the member. The third column indicates whether subclasses of the class declared outside
   this package have access to the member. The fourth column indicates whether all classes have access
   to the member.

   Access levels affect you in two ways. First, when you use classes that come from another source, such
   as the classes in the Java platform, access levels determine which members of those classes your own
   classes can use. Second, when you write a class, you need to decide what access level every member
   variable and every method in your class should have.

   Let's look at a collection of classes and see how access levels affect visibility. The following
   figure shows the four classes in this example and how they are related.

            +---------------+            +-------------------+
            |    Package    |            |    Package        |
            |    One        |            |    Two            |
            |    +-------+  | Subclass   |    +-----------+  |
            |    | Alpha |<-------------------| AlphaSub  |  |
            |    +-------+  |            |    +-----------+  |
            |    +-------+  |            |    +-----------+  |
            |    | Beta  |  |            |    | Gamma     |  |
            |    +-------+  |            |    +-----------+  |
            +---------------+            +-------------------+
            Classes and Packages of the Example Used to Illustrate Access Levels            
                
   The following table shows where the members of the Alpha class are visible for each of the access
   modifiers that can be applied to them.

   CAPTION: Visibility
   -------------------------------------------------
   Modifier       Alpha    Beta    Alphasub    Gamma
   -------------------------------------------------
   public         Y        Y       Y           Y
   protected      Y        Y       Y           N
   no modifier    Y        Y       N           N
   private        Y        N       N           N
   -------------------------------------------------

   Tips on Choosing an Access Level:
   If other programmers use your class, you want to ensure that errors from misuse cannot happen. Access
   levels can help you do this.
     * Use the most restrictive access level that makes sense for a particular member. Use private
       unless you have a good reason not to.
     * Avoid public fields except for constants. (Many of the examples in the tutorial use public
       fields. This may help to illustrate some points concisely, but is not recommended for production
       code.) Public fields tend to link you to a particular implementation and limit your flexibility
       in changing your code.

---
https://www.geeksforgeeks.org/access-modifiers-java/

Access Modifiers in Java

   As the name suggests access modifiers in Java helps to restrict the scope of a class, constructor ,
   variable , method or data member. There are four types of access modifiers available in java:
    1. Default – No keyword required
    2. Private
    3. Protected
    4. Public

    ---------------------------------------------------------------
                        default      private    protected    public
    ---------------------------------------------------------------
    Same Class          YES          YES        YES          YES
    ---------------------------------------------------------------
    Same package        YES          NO         YES          YES
    subclass                         
    ---------------------------------------------------------------
    Same package        YES          NO         YES          YES
    non-subclass                     
    ---------------------------------------------------------------
    Different package    NO          NO         YES          YES
    subclass                         
    ---------------------------------------------------------------
    Different package    NO          NO         NO           YES
    non-subclass
    ---------------------------------------------------------------
    
    1. Default: When no access modifier is specified for a class , method or data member – It is said to
       be having the default access modifier by default.
          + The data members, class or methods which are not declared using any access modifiers i.e.
            having default access modifier are accessible only within the same package.
       In this example, we will create two packages and the classes in the packages will be having the
       default access modifiers and we will try to access a class from one package from a class of
       second package.

<code>       
    //Java program to illustrate default modifier

    package p1;
   
    //Class Geeks is having Default access modifier
    class Geek {
        void display() {
            System.out.println("Hello World!");
        }

    }
</code>

<code>
    //Java program to illustrate error while
    //using class from different package with
    //default modifier
    
    package p2;
    import p1.*;
    
    //This class is having default access modifier
    class GeekNew {
        public static void main(String args[]) {
            //accessing class Geek from package p1
            Geeks obj = new Geek();
            obj.display();
        }
    }
</code>
        
        Output:
Compile time error

     Private: The private access modifier is specified using the keyword private.
     * The methods or data members declared as private are accessible only within the class in which
       they are declared.
     * Any other class of same package will not be able to access these members.
     * Top level Classes or interface can not be declared as private because
         1. private means “only visible within the enclosing class”.
         2. protected means “only visible within the enclosing class and any subclasses”
            Hence these modifiers in terms of application to classes, they apply only to nested classes
            and not on top level classes

   In this example, we will create two classes A and B within same package p1. We will declare a method
   in class A as private and try to access this method from class B and see the result.
<code>   
    //Java program to illustrate error while
    //using class from different package with
    //private modifier
    package p1;

    class A {
        private void display()
        {
            System.out.println("GeeksforGeeks");
        }
    }
    
    class B {
        public static void main(String args[]) {
            A obj = new A();
            
            //trying to access private method of another class
            obj.display();
        }
    }
</code>

   Output:
error: display() has private access in A
                obj.display();

     protected: The protected access modifier is specified using the keyword protected.
     * The methods or data members declared as protected are accessible within same package or sub
       classes in different package.

   In this example, we will create two packages p1 and p2. Class A in p1 is made public, to access it in
   p2. The method display in class A is protected and class B is inherited from class A and this
   protected method is then accessed by creating an object of class B.
<code>
    //Java program to illustrate
    //protected modifier
    package p1;
    
    //Class A
    public class A {
        protected void display() {
            System.out.println("GeeksforGeeks");
        }
    }
</code>

<code>
    //Java program to illustrate
    //protected modifier
    package p2;
    import p1.*; //importing all classes in package p1
    
    //Class B is subclass of A
    class B extends A {
        public static void main(String args[]) {
            B obj = new B();
            obj.display();
        }
    
    }
</code>

   Output:
GeeksforGeeks

     public: The public access modifier is specified using the keyword public.
     * The public access modifier has the widest scope among all other access modifiers.
     * Classes, methods or data members which are declared as public are accessible from every where in
       the program. There is no restriction on the scope of a public data members.
<code>
    //Java program to illustrate
    //public modifier
    package p1;
    public class A {
        public void display() {
            System.out.println("GeeksforGeeks");
        }
    }
    package p2;
    import p1.*;
    class B {
        public static void main(String args[]) {
            A obj = new A;
            obj.display();
        }
    }
</code>

   Output:
GeeksforGeeks

   Important Points:
     * If other programmers use your class, try to use the most restrictive access level that makes
       sense for a particular member. Use private unless you have a good reason not to.
     * Avoid public fields except for constants.


---
https://www.javatpoint.com/access-modifiers

Access Modifiers in java
    1. private access modifier
    2. Role of private constructor
    3. default access modifier
    4. protected access modifier
    5. public access modifier
    6. Applying access modifier with method overriding

   There are two types of modifiers in java: access modifiers and non-access modifiers.

   The access modifiers in java specifies accessibility (scope) of a data member, method, constructor or
   class.

   There are 4 types of java access modifiers:
    1. private
    2. default
    3. protected
    4. public

   There are many non-access modifiers such as static, abstract, synchronized, native, volatile,

1) private access modifier
   The private access modifier is accessible only within class.

Simple example of private access modifier
   In this example, we have created two classes A and Simple. A class contains private data member and
   private method. We are accessing these private members from outside the class, so there is compile
   time error.
<code>
class A {  
    private int data=40;  
    private void msg(){System.out.println("Hello java");}  
}  
  
public class Simple{  
    public static void main(String[] args) {  
        A obj=new A();  
        System.out.println(obj.data);//Compile Time Error  
        obj.msg(); //Compile Time Error  
    }  
}  
</code>

Role of Private Constructor
   If you make any class constructor private, you cannot create the instance of that class from outside
   the class. For example:
<code>
class A {  
    private A() {} //private constructor  
    void msg() {System.out.println("Hello java");}  
}

public class Simple{  
    public static void main(String[] args) {  
        A obj=new A(); //Compile Time Error  
    }  
} 
</code>

Note: A class cannot be private or protected except nested class.

2) default access modifier
   If you don't use any modifier, it is treated as default bydefault. The default modifier is accessible
   only within package.

Example of default access modifier
   In this example, we have created two packages pack and mypack. We are accessing the A class from
   outside its package, since A class is not public, so it cannot be accessed from outside the package.

<code>
//save by A.java  
package pack;  
class A {  
    void msg() {System.out.println("Hello");}  
}  

//save by B.java  
package mypack;  
import pack.*;  
class B{  
    public static void main(String[] args) {  
        A obj = new A(); //Compile Time Error  
        obj.msg(); //Compile Time Error  
    }
}
</code>

   In the above example, the scope of class A and its method msg() is default so it cannot be accessed
   from outside the package.

3) protected access modifier
   The protected access modifier is accessible within package and outside the package but through
   inheritance only.

   The protected access modifier can be applied on the data member, method and constructor. It can't be
   applied on the class.

Example of protected access modifier

   In this example, we have created the two packages pack and mypack. The A class of pack package is
   public, so can be accessed from outside the package. But msg method of this package is declared as
   protected, so it can be accessed from outside the class only through inheritance.
<code>
//save by A.java  
package pack;  
public class A {  
    protected void msg() {System.out.println("Hello");}  
}  

//save by B.java  
package mypack;  
import pack.*;  
  
class B extends A {  
    public static void main(String[] args) {  
        B obj = new B();  
        obj.msg();  
    }  
}
</code>

Output:Hello

4) public access modifier
   The public access modifier is accessible everywhere. It has the widest scope among all other
   modifiers.

Example of public access modifier
<code>
//save by A.java  
  
package pack;  
public class A {  
    public void msg() {System.out.println("Hello");}  
}

//save by B.java  
package mypack;  
import pack.*;  
  
class B {  
    public static void main(String[] args) {  
        A obj = new A();  
        obj.msg();  
    }  
}
</code>

Output:Hello

Understanding all java access modifiers
   Let's understand the access modifiers by a simple table.
   Access Modifier within class within package outside package by subclass only outside package
   Private         Y            N              N                                N
   Default         Y            Y              N                                N
   Protected       Y            Y              Y                                N
   Public          Y            Y              Y                                Y
 
Java access modifiers with method overriding
   If you are overriding any method, overridden method (i.e. declared in subclass) must not be more
   restrictive.

<code>
class A {  
    protected void msg() {System.out.println("Hello java");}  
}  
  
public class Simple extends A {  
    void msg() {System.out.println("Hello java");} //C.T.Error  
    public static void main(String[] args) {  
        Simple obj=new Simple();  
        obj.msg();  
    }  
}  
</code>

   The default modifier is more restrictive than protected. That is why there is compile time error.


---
https://www.tutorialspoint.com/java/java_access_modifiers.htm

Java - Access Modifiers

   Java provides a number of access modifiers to set access levels for classes, variables, methods, and
   constructors. The four access levels are −
     * Visible to the package, the default. No modifiers are needed.
     * Visible to the class only (private).
     * Visible to the world (public).
     * Visible to the package and all subclasses (protected).

Default Access Modifier - No Keyword
   Default access modifier means we do not explicitly declare an access modifier for a class, field,
   method, etc.

   A variable or method declared without any access control modifier is available to any other class in
   the same package. The fields in an interface are implicitly public static final and the methods in an
   interface are by default public.

Example
   Variables and methods can be declared without any modifiers, as in the following examples −
<code>
String version = "1.5.1";

boolean processOrder() {
   return true;
}
</code>

Private Access Modifier - Private
   Methods, variables, and constructors that are declared private can only be accessed within the
   declared class itself.

   Private access modifier is the most restrictive access level. Class and interfaces cannot be private.

   Variables that are declared private can be accessed outside the class, if public getter methods are
   present in the class.

   Using the private modifier is the main way that an object encapsulates itself and hides data from the
   outside world.

Example
   The following class uses private access control −
<code>   
public class Logger {
    private String format;

    public String getFormat() {
        return this.format;
    }

    public void setFormat(String format) {
        this.format = format;
    }
}
</code>

   Here, the format variable of the Logger class is private, so there's no way for other classes to
   retrieve or set its value directly.

   So, to make this variable available to the outside world, we defined two public methods: getFormat(),
   which returns the value of format, and setFormat(String), which sets its value.

Public Access Modifier - Public
   A class, method, constructor, interface, etc. declared public can be accessed from any other class.
   Therefore, fields, methods, blocks declared inside a public class can be accessed from any class
   belonging to the Java Universe.

   However, if the public class we are trying to access is in a different package, then the public class
   still needs to be imported. Because of class inheritance, all public methods and variables of a class
   are inherited by its subclasses.

Example

   The following function uses public access control −
<code>   
public static void main(String[] arguments) {
    // ...
}
</code>

   The main() method of an application has to be public. Otherwise, it could not be called by a Java
   interpreter (such as java) to run the class.

Protected Access Modifier - Protected
   Variables, methods, and constructors, which are declared protected in a superclass can be accessed
   only by the subclasses in other package or any class within the package of the protected members'
   class.

   The protected access modifier cannot be applied to class and interfaces. Methods, fields can be
   declared protected, however methods and fields in a interface cannot be declared protected.

   Protected access gives the subclass a chance to use the helper method or variable, while preventing a
   nonrelated class from trying to use it.

Example
   The following parent class uses protected access control, to allow its child class override
   openSpeaker() method −
<code>   
class AudioPlayer {
    protected boolean openSpeaker(Speaker sp) {
        // implementation details
    }
}

class StreamingAudioPlayer {
    boolean openSpeaker(Speaker sp) {
        // implementation details
    }
}
</code>

   Here, if we define openSpeaker() method as private, then it would not be accessible from any other
   class other than AudioPlayer. If we define it as public, then it would become accessible to all the
   outside world. But our intention is to expose this method to its subclass only, that’s why we have
   used protected modifier.

Access Control and Inheritance
   The following rules for inherited methods are enforced −
     * Methods declared public in a superclass also must be public in all subclasses.
     * Methods declared protected in a superclass must either be protected or public in subclasses; they
       cannot be private.
     * Methods declared private are not inherited at all, so there is no rule for them.

---
