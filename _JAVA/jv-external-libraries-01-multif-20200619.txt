filename: jv_external_libraries_01-multif_20200619.txt
https://stackoverflow.com/questions/5864214/installing-an-external-java-package

Installing an external java package

   I am new to java, and I am trying to build a project that has an external dependency. When I try to
   build it
[javac] Compiling 814 source files to ~/Desktop/Dev/bitcoinj/out
[javac] ~/Desktop/Dev/bitcoinj/src/com/google/bitcoin/core/Block.java:25: package org.slf4j does not exist
[javac] import org.slf4j.Logger;
[javac] ...

   How can install the missing external package? Is there a java package manager similar to the python
   pip?

***
   You could use maven which would do the dependency handling and building for you.

     Dependency management is a core feature of Maven. Managing dependencies for a single project is
     easy. Managing dependencies for multi-module projects and applications that consist of hundreds of
     modules is possible. Maven helps a great deal in defining, creating, and maintaining reproducible
     builds with well-defined classpaths and library versions.

***
   There's not a package manager that I know of. You're going to have to manually download the jar file
   -- in this case, its from http://www.slf4j.org/ . After that, you can either do as Dennis says,
   or add the jar file explicitly to your classpath.

***
   To import a package: -> Download the required jar files (One of the sources for jar files
   is: https://jar-download.com/) -> Paste the file @ C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext


---
https://askubuntu.com/questions/372762/how-to-install-a-jar-file

How to install a .jar file

   I would like to know how to install java and minecraft (Download Linux Version Here)

***
   You can't really 'install' a tgz or jar file. A tgz is just an archive, as well as a jar. You
   could manually install it, but not with the default Debian/Ubuntu package manager. You will need
   to install Java from the software center. For minecraft, download the file, and extract it if
   needed. Then just read the instructions or find the file you need to use to install or launch the
   program. Perhaps you would benefit from reading the Ubuntu manual: ubuntu-manual.org

***
   You must have installed java on your system to install(run) .jar files. Syntax to install(run) .jar files is
java -jar packagename.jar

   In this case, you have Minecraft.jar file, so type the below command in terminal
java -jar Minecraft.jar

***
   Install .tgz file
    1. first you need to extract the archive. Command is:
       sudo tar xzvf Example.tgz
       or you can right click the file and give "Extract Here" option in Menu.
    2. Then read and follow the README or INSTALL text file inside the extracted archive to install.
       Most of the time, the steps to install are 1. ./configure 2. make 3. make install
       (You need to run them inside the folder directory of the extracted archive.)

   Or you can open the file via Synaptic Package Manager and install through it.

   Install .jar file
   .jar files actually not needed to install. Just need open with java to run.

   Right click the file and select "Open with java(-6/7/8)-openjdk" in menu. Or you need to select
   "Properties" and select to open with java.

   If in command line, can open with xdg-open Example.jar or java -jar Example.jar

***
   A .jar file is a Java Programming Language file. You can do this, since it's Minecraft:
    1. Create a new folder in your user folder. (It can also be recognized as a "~".)
    2. Move Minecraft and an icon (call it "Minecraft" and make sure it's a .png, and if not, convert it
       using an online tool.) to a folder you will keep it in. Use ~/.apps/Minecraft, for the sake of
       usage.
    3. Make a file, on your desktop. Create a new file, name it "Minecraft.desktop".
       Copy-and-paste this after you open it with a text editor:
[Desktop Entry]
Name=Minecraft
Exec=java -jar ~/.apps/Minecraft/Minecraft.jar
Icon=~/.apps/Minecraft/Minecraft.png
Type=Application
Categories=Game;

    4. Do this in terminal:
sudo apt-get install default-jre
chmod +x ~/.apps/Minecraft/Minecraft.jar
chmod +x ~/Desktop/Minecraft.desktop

    5. Now, double-click and play!


---
https://www.spigotmc.org/wiki/creating-external-libraries/

Creating external Libraries
Nov 1, 2019

   Creating external Libraries
     * Creating external Libraries
       Creating an external library as java plugin

Contents
          + [93]What is an external library
          + [94]How can i get started
          + [95]How to use it in your plugins
          + [96]Maven
          + [97]Without Maven

What is an external library
       It's a local library, that only exists in your computer and can only be used by you.
       It will save you a lot of time, instead of repeating code million times, you only type it once
       with external libraries!

How can i get started
       You start by making a project, like you do for any normal plugin.
       Then, You add Spigot dependency to your project.
       So it's very similar to creating a normal plugin!
       Then we create a new class in the library, that doesn't extend anything.
       this class will be the main class for our library, that our plugin will only set and get value
       with it.
       
       For example JavaPlugin, When you are dealing with things like scheduler you need a JavaPlugin to
       run a task.
       so our class will be like this:
       Code (Java):
       
import org.bukkit.plugin.java.JavaPlugin;
public class MyLibrary {
    private static JavaPlugin plugin;
    
    // For other classes in our library
    public static JavaPlugin getPlugin() {
        return plugin;
    }
    
    // This method must not be used any where in the library!
    public static void setPlugin(JavaPlugin plugin) {
        this.plugin = plugin;
    }
}

       Now, after we made Setters and Getter for every data we want,
       Let's create our actual library!
       You can put what ever you want in this library, it's better to use several classes. not only one
       class.
       In this example i will make a Utils class that has 2 methods, all of them interact with players:
       Code (Java):
       
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
public class Utils {
    public static void tell(CommandSender sender, [100]String message) {
        sender.sendMessage(colorize(message));
    }
    
    public static void log(final [101]String message) {
        tell(Bukkit.getConsoleSender(), "[" + MyLibrary.getPlugin().getName() + "] " + message);
    }
    
    public static [102]String colorize(final [103]String message) {
        return ChatColor.translateAlternateColorCodes('&', message);
    }
}

       Note: all methods in the library must be public static or you can't use them.
       Now that we finished making the library:

How to use it in your plugins
       you need to add it your classpath first, How?
       Like how you add Spigot to your dependency!

Maven
       In your pom.xml, add repository:
       Code (XML):
       <dependency>
         <groupId>[Your Library groupId]</groupId>
         <artifactId>[Your Library artifactId]</artifactId>
         <version>1.0.0</version>
         <scope>compile</scope>
       </dependency>

Without Maven
       Build your library to a jar file, then add it just like you add Spigot.
       Now after we can access the library from our plugin's project, let's set the library plugin:
       Code (Java):
       
@Override
public void onEnable() {
    MyLibrary.setPlugin(this);
}
       
       Now you are good to go!
       You can use every static methods from the library!
       Thanks for reading this thread!


---
https://towardsdatascience.com/introducing-google-guava-f295d22319f7

Introducing Google Guava
Mar 22, 2019

Guava is an open-source "Collection Library" library for Java, developed by Google.

   It provides utilities for working with Java collections. As you dive deep into Guava you'll notice
   how it reduces coding errors, facilitates standard coding practices and boost productivity by making
   code concise and easy to read.

   I've decided to break down the Guava tutorial in a series of posts. We'll cover a lot of Guava
   concepts - Guava utility classes, functional programming, working with collections, and Event bus.

   In this post, you'll learn about:
   1. Adding Guava to your Java project.
   2. Basic utilities in Guava - Splitter, MapSplitter, Joiner, MapJoiner, and Precondition class

1. Adding Guava to your project
   Guava comes in two flavors
    1. One for use on a Java 8+ JavaRuntimeEnvironment.
    2. Another for use on a Java 7 or Android Platform.

   If you're using Maven, add the following snippet to <dependencies>...</dependencies> section
<dependency>
    <groupId>com.google.guava</groupId>
    <artifactId>guava</artifactId>
    <version>version</version>
</dependency>

   If you're using Gradle, add mavenCentral() to repositories
repositories {
    mavenCentral()
}

   And then add the following snippet to dependencies section of build.gradle file.
dependencies {
    compile group:'com.google.guava', name:'guava', version:version
}

*************************************************************************************
*  For people who are not using any project management tool like Maven or Gradle -  *
*   1. Download JAR of Google Guava from here:                                      *
*       https://mvnrepository.com/artifact/com.google.guava/guava                   *
*   2. If you're using IDE, add JAR file as an external library.                    *
*   3. If you're using text editor, add JAR file to your class-path.                *
*************************************************************************************

2. Basic Guava Utilities

   2.1 Joiner Class
   It takes arbitrary strings and concatenate them together with some delimiter token. The result is
   built by calling Object.toString() for each element.

   Typically you'd do something like
public String concatenateStringsWithDelimiter(List<String> strList, String delimiter) {
    StringBuilder builder = new StringBuilder();
    for (String str: strList)
        if (str != null)
            builder.append(str).append(delimiter);
    
    // To remove the delimiter from the end
    builder.setLength(builder.length() - delimiter.length());
    return builder.toString();
}

   But with the help of Joiner Class, code equivalent to above can be written as
Joiner.on(delimiter).skipNulls().join(strList);

   So as you can see, the code becomes concise and maintainable. Also finding bugs is relatively easy
   with Guava.
   Now what if you want to add a replacement for null strings? Well, Joiner class takes care of this
   situation too.
Joiner.on(delimiter).useForNull(replacement).join(strList);

   You might be thinking that maybe Joiner class is limited to working with Strings only but this is not
   the case. Since it is implemented as Generic class, you could pass an array, iterable or varargs of
   any object too.
   Joiner class is immutable once it is created. So, it is thread-safe and can be used as static final
   variable.
public static final Joiner jnr = Joiner.on(delimiter).skipNulls();
String result = jnr.append(strList);

   2.2 Joiner.MapJoiner Class
   It works same as the Joiner Class with the only difference that it joins the given string as
   key-value pair with specified key-value separator.
public void DemoMapJoiner() {
    // Initialising Guava LinkedHashMap Collection
    Map<String, String> myMap = Maps.newLinkedHashMap();
    myMap.put("India", "Hockey");
    myMap.put("England", "Cricket");
    String delimiter = "#";
    String separator = "=";
    String result = Joiner.on(delimiter).withKeyValueSeperator(separator).join(myMap);
    String expected = "India=Hocket#England=Cricket";
    assertThat(result, expected);
}

   2.3 Splitter Class
   Splitter class does opposite of what Joiner class does. It takes a string with some delimiter (a
   character, a string or even a regex pattern) and split that string on delimiter and obtain an array
   of the parts.

   Typically you'd do something like
String test = "alpha,beta,gamma,,delta,,";
String[] parts = test.split(",");
// parts = {"alpha", "beta", "gamma", "", "delta", ""};

   Can you notice the issue? You don't want empty strings to be part of my result. So, split() method is
   leaving something to be desired.

   But with the help of Splitter Class, code equivalent to above can be written as
Splitter splitter = Splitter.on(",");
String[] parts = splitter.split(test);

   split() method returns an iterable object containing individual string parts from test string.
   trimResults() method can be used to remove leading and trailing whitespaces from results.

   Just like Joiner class, Splitter class also is immutable once it is created. So, it is thread-safe
   and can be used as static final variable.

   2.4 MapSplitter Class
   Splitter class is accompanied by MapSplitter. It takes in a string in which key-value pairs are
   delimited by some delimiter (a character, a string or even a regex pattern) and returns Map instance
   with key-value pair in same order as in original string.
public void DemoMapSplitter() {
    String test = "India=Hocket#England=Cricket";
    // Initialising Guava LinkedHashMap Collection
    Map<String, String> myTestMap = Maps.newLinkedHashMap();
    myMap.put("India", "Hockey");
    myMap.put("England", "Cricket");
    String delimiter = "#";
    String seperator = "=";
    Splitter.MapSplitter mapSplitter = Splitter.on(delimiter).withKeyValueSeperator(seperator);
    Map<String, String> myExpectedMap = mapSplitter.split(test);
    assertThat(myTestMap, myExpectedMap);
}

   2.5 Precondition Class
   Precondition class provides collection of static methods to check the state of our code.
   Preconditions are important because they guarantee out expectations for successful code are met.

   For example:
   1. Checking for null conditions. You can always write
if (testObj == null)
        throw new IllegalArgumentException("testObj is null");

   Using Precondition class makes it more concise and easy-to-use
checkNotNull(testObj, "testObj is null");

   2. Checking for valid arguments.
public void demoPrecondition {
    private int age;
    public demoPrecondition(int age) {
    checkArgument(age > 0, "Invalid Age");
        this.age = age;
    }
}

   checkArgument(exp, msg) evaluates state of variable passed as parameter to a method. It evaluates a
   boolean expression exp and throws IllegalArgumentException if expression evaluates to false.

   3. Checking state of an object
public void demoPrecondition {
        private String name;
        public demoPrecondition(String name) {
            this.name = checkNotNull(name, "Anonamous");
        }
        public void Capitalize() {
            checkState(validate(), "Empty Name");
        }

        private bool validate() { this.name.length() > 0; }
    }

   checkState(exp, msg) evaluates state of object not argument passed to a method. It evaluates a
   boolean expression exp and throws IllegalArgumentException if expression evaluates to false.

   4. Checking valid element index
public void demoPrecondition {
        int size;
        private int [] price;

        public demoPrecondition(int size) {
            this.size = checkArgument(size > 0, "size must be greater than 0");
           this.price = new int[this.size];
        }
        public void updateItem(int index, int value) {
            int indexToBeUpdated = checkElementIndex(index, this.size, "Illegal Index Access");
        }
    }

   Thanks for the read.


---
