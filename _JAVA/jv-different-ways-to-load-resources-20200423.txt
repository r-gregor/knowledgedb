filename: jv_different-ways-to-load-resources_20200423.txt
https://www.logicbig.com/how-to/java/different-ways-to-load-resources.html

Different ways to load classpath resources in Java
Nov 4, 2018

A comparison of different ways of resources loading in Java

   Followings are the preferred ways to load resources in classpath.
     * this.getClass().getResource(resourceName): It tries to find the resource in the same package as
       'this' class unless we use absolute path starting with '/'
     * Thread.currentThread().getContextClassLoader().getResource(resourceName):
       A ClassLoader can be passed (shared) when creating a new thread using
       Thread.setContextClassLoader, so that different thread contexts can load each other
       classes/resources. If not set, the default is the ClassLoader context of the parent Thread. This
       method is not appropriate if we want to load resources inside the packages unless we use complete
       paths starting from root.
     * ClassLoader.getSystemClassLoader().getResource(resourceName) : ClassLoader.getSystemClassLoader()
       gives the class loader used to start the application. we have to use complete path for the
       resources starting from root.

   If we don't create any threads in the entire application, the main thread will end up with the system
   class loader as their context class loader.
.
 |-- load-resource/
     \-- src/
         |-- com/
         |   \-- logicbig/
         |       \-- example/
         |           |-- ClassA.java .. [**]
         |           \-- test-pkg-resource.txt .. ["test file, local to package"]
         |       
         \-- root-resource.txt.. ["root test file"]


<code> [**]
package com.logicbig.example;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;

public class ClassA {

    private static final String line = "-----------------------------------------";

    private void loadResource (String resource) throws IOException {
        URL u = this.getClass().getResource(resource);
        loadResourceByUrl(u, resource);
    }

    private void loadResourceWithContextLoader (String resource) throws IOException {
        URL u = Thread.currentThread().getContextClassLoader().getResource(resource);
        loadResourceByUrl(u, resource);
    }

    private void loadResourceWithSystemClassLoader (String resource) throws IOException {
        URL u = ClassLoader.getSystemClassLoader().getResource(resource);
        loadResourceByUrl(u, resource);
    }

    private void loadResourceByUrl (URL u, String resource) throws IOException {
        System.out.println("-> attempting input resource: "+resource);
        if (u != null) {
            String path = u.getPath();
            path = path.replaceFirst("^/(.:/)", "$1");
            System.out.println("    absolute resource path found :\n    " + path);
            String s = new String(Files.readAllBytes(Paths.get(path)));
            System.out.println("    file content: "+s);
        } else {
            System.out.println("    no resource found: " + resource);
        }
    }

    public static void main (String[] args) throws IOException {
        ClassA a = new ClassA();
        System.out.println(line+"\nusing this.getClass().getResource\n"+line);
        a.loadResource("test-pkg-resource.txt");
        a.loadResource("/test-pkg-resource.txt");
        a.loadResource("root-resource.txt");
        a.loadResource("/root-resource.txt");

        System.out.println(line+"\n using current thread context loader\n"+line);
        a.loadResourceWithContextLoader("test-pkg-resource.txt");
        a.loadResourceWithContextLoader("/test-pkg-resource.txt");
        a.loadResourceWithContextLoader("root-resource.txt");
        a.loadResourceWithContextLoader("/root-resource.txt");


        System.out.println(line+"\n using ClassLoader.getSystemClassLoader()\n"+line);
        a.loadResourceWithSystemClassLoader("test-pkg-resource.txt");
        a.loadResourceWithSystemClassLoader("/test-pkg-resource.txt");
        a.loadResourceWithSystemClassLoader("root-resource.txt");
        a.loadResourceWithSystemClassLoader("/root-resource.txt");

    }
}

</code>

   In above example, we created a simple project using IntelliJ IDE 15.0.2 and JDK 1.8. Notice how
   resources are copied in output folder. Resources are loaded from output folder during runtime.
   
   .
   |--out/
   |  \-- production/
   |      \-- load-resource/
   |          |-- com/
   |          |   \-- logicbig/
   |          |       \-- example/
   |          |           |-- ClassA.class
   |          |           \-- test-pkg-resource.txt
   |          |
   |          |-- load-resource.iml
   |          \-- root-resource.txt
   |          
   \--src/
      |-- com.logicbig.example/
      |   |-- ClassA.java
      |   \-- test-pkg-resource.txt
      |
      |-- load-resource.iml
      \-- root-resource.txt

      
   Output:
-----------------------------------------
using this.getClass().getResource
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/com/logicbig/example/test-pkg-resource.txt
    file content: test file, local to package
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    no resource found: root-resource.txt
-> attempting input resource: /root-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/root-resource.txt
    file content: root test file
-----------------------------------------
 using current thread context loader
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    no resource found: test-pkg-resource.txt
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/root-resource.txt
    file content: root test file
-> attempting input resource: /root-resource.txt
    no resource found: /root-resource.txt
-----------------------------------------
 using ClassLoader.getSystemClassLoader()
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    no resource found: test-pkg-resource.txt
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/root-resource.txt
    file content: root test file
-> attempting input resource: /root-resource.txt
    no resource found: /root-resource.txt

Compiling with javac
   By default javac compiles the java source files in the same directory. In above example if we run
   this command in Windows O.S:
C:\load-resource>javac com/logicbig/example/ClassA.java

   The compilation will end up like this:

C:\load-resource>tree /A /F             [before compilation]

C:.
|   root-resource.txt
|
\---com
    \---logicbig
        \---example
                ClassA.java
                test-pkg-resource.txt

C:\load-resource> javac com/logicbig/example/ClassA.java    [<-- compiling]

C:\load-resource>tree /A /F             [After compilation]

C:.
|   root-resource.txt
|
\---com
    \---logicbig
        \---example
                ClassA.class       
                ClassA.java
                test-pkg-resource.txt
                
   Now run 'java' from command line:
   
C:\load-resource> java com.logicbig.example.ClassA
-----------------------------------------
using this.getClass().getResource
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/com/logicbig/example/test-pkg-resource.txt
    file content: test file, local to package
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    no resource found: root-resource.txt
-> attempting input resource: /root-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/root-resource.txt
    file content: root test file
-----------------------------------------
 using current thread context loader
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    no resource found: test-pkg-resource.txt
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/root-resource.txt
    file content: root test file
-> attempting input resource: /root-resource.txt
    no resource found: /root-resource.txt
-----------------------------------------
 using ClassLoader.getSystemClassLoader()
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    no resource found: test-pkg-resource.txt
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    absolute resource path found :
    C:/load-resource/out/production/load-resource/root-resource.txt
    file content: root test file
-> attempting input resource: /root-resource.txt
    no resource found: /root-resource.txt

C:\load-resource>_ 

   The output is same as we saw with IntelliJ project above because relative locations of the resource
   files are still same from .class file.

Compiling with javac using the output folder option

C:\load-resource> del /S *.class       [<-- delete previous compiled class]
C:\load-resource> md output            [<-- make new dir 'output']
C:\load-resource> javac -d output com/logicbig/example/ClassA.java    [<-- compiling]

C:\load-resource>tree /A /F             [After compilation]

C:.
|   root-resource.txt
|
|---com
|   \---logicbig
|       \---example
|               ClassA.java
|               test-pkg-resource.txt
\---output
    \---com
        \---logicbig
            \---example
                    ClassA.class

C:\load-resource>_ 

   The resources in this case are not copied at all. We have to copy them manually or better use some
   IDE or build tool like maven.

Resource loading in a Maven project
   Maven by default has a standard directory structure. During build it only copies resources to
   '/target/classes' folder which were originally placed under src/main/resources directory. If
   resources are somewhere else they are ignored (this is default behavior which can be customized, we
   will explore that later).

   Let's delete the previously created output folder and convert our above example to the maven project.
   We just need to add a pom and put all java sources under src/main/java (see quick [20]tutorials on
   maven here):

C:\load-resource> tree /A /F             [before compilation]

C:.
|   pom.xml                             [<-- pom.xml created]
|   root-resource.txt
|
\---src
    \---main
        \---java
            \---com
                \---logicbig
                    \---example
                            ClassA.java
                            test-pkg-resource.txt
   
C:\load-resource> mvn compile

C:\load-resource> tree /A /F             [After compilation]

C:.
|   pom.xml                             [<-- pom.xml created]
|   root-resource.txt
|
|---src
|   \---main
|       \---java
|           \---com
|               \---logicbig
|                   \---example
|                           ClassA.java
|                           test-pkg-resource.txt
|
\---target                              [<-- target folder created by maven]
    |---classes
    |   \---com
    |       \---logicbig
    |           \---example
    |                   ClassA.class
    |
    |---generated-sources
    |   \---anotations
    |
    \---maven-status
        \---maven-compiler-plugin
            \---compile           
                \---default-compile
                        createdFiles.lst
                        inputFiles.lst

C:\load-resource>_ 

   We can see there are no resources copied because we have to place all our txt files in the
   'resources' folder.

   Here's the complete maven project with all txt files in the 'resources' folder:

   Dependencies and Technologies Used:
     * JDK 1.8
     * Maven 3.0.4
.
`-- load-resource/
    |-- src/
    |   `-- main/
    |       |-- java/
    |       |   `-- com/
    |       |       `-- logicbig
    |       |           `-- example
    |       |               `-- ClassA.java
    |       `-- resources/
    |           |-- root-resource.txt
    |           `-- test-pkg-resource.txt
    |
    `--pom.xml

    
<code>
package com.logicbig.example;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
public class ClassA {

    private static final String line = "-----------------------------------------";

    private void loadResource (String resource) throws IOException {
        URL u = this.getClass().getResource(resource);
        loadResourceByUrl(u, resource);
    }

    private void loadResourceWithContextLoader (String resource) throws IOException {
        URL u = Thread.currentThread().getContextClassLoader().getResource(resource);
        loadResourceByUrl(u, resource);
    }

    private void loadResourceWithSystemClassLoader (String resource) throws IOException {
        URL u = ClassLoader.getSystemClassLoader().getResource(resource);
        loadResourceByUrl(u, resource);
    }

    private void loadResourceByUrl (URL u, String resource) throws IOException {
        System.out.println("-> attempting input resource: "+resource);
        if (u != null) {
            String path = u.getPath();
            path = path.replaceFirst("^/(.:/)", "$1");
            System.out.println("    absolute resource path found :\n    " + path);
            String s = new String(Files.readAllBytes(Paths.get(path)));
            System.out.println("    file content: "+s);
        } else {
            System.out.println("    no resource found: " + resource);
        }
    }

    public static void main (String[] args) throws IOException {
        ClassA a = new ClassA();
        System.out.println(line+"\nusing this.getClass().getResource\n"+line);
        a.loadResource("test-pkg-resource.txt");
        a.loadResource("/test-pkg-resource.txt");
        a.loadResource("root-resource.txt");
        a.loadResource("/root-resource.txt");

        System.out.println(line+"\n using current thread context loader\n"+line);
        a.loadResourceWithContextLoader("test-pkg-resource.txt");
        a.loadResourceWithContextLoader("/test-pkg-resource.txt");
        a.loadResourceWithContextLoader("root-resource.txt");
        a.loadResourceWithContextLoader("/root-resource.txt");


        System.out.println(line+"\n using ClassLoader.getSystemClassLoader()\n"+line);
        a.loadResourceWithSystemClassLoader("test-pkg-resource.txt");
        a.loadResourceWithSystemClassLoader("/test-pkg-resource.txt");
        a.loadResourceWithSystemClassLoader("root-resource.txt");
        a.loadResourceWithSystemClassLoader("/root-resource.txt");

    }
}
</code>


Maven Output:

C:\load-resource>mvn exec:java -Dexec.mainClass="com.logicbig.example.ClassA"
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building load-resource 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- exec-maven-plugin:1.4.0:java (default-cli) @ load-resource ---
-----------------------------------------
using this.getClass().getResource
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    no resource found: test-pkg-resource.txt
-> attempting input resource: /test-pkg-resource.txt
    absolute resource path found :
    C:/load-resource/target/classes/test-pkg-resource.txt
    file content: test file, local to package
-> attempting input resource: root-resource.txt
    no resource found: root-resource.txt
-> attempting input resource: /root-resource.txt
    absolute resource path found :
    C:/load-resource/target/classes/root-resource.txt
    file content: root test file
-----------------------------------------
 using current thread context loader
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    absolute resource path found :
    C:/load-resource/target/classes/test-pkg-resource.txt
    file content: test file, local to package
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    absolute resource path found :
    C:/load-resource/target/classes/root-resource.txt
    file content: root test file
-> attempting input resource: /root-resource.txt
    no resource found: /root-resource.txt
-----------------------------------------
 using ClassLoader.getSystemClassLoader()
-----------------------------------------
-> attempting input resource: test-pkg-resource.txt
    absolute resource path found :
    C:/load-resource/target/classes/test-pkg-resource.txt
    file content: test file, local to package
-> attempting input resource: /test-pkg-resource.txt
    no resource found: /test-pkg-resource.txt
-> attempting input resource: root-resource.txt
    absolute resource path found :
    C:/load-resource/target/classes/root-resource.txt
    file content: root test file
-> attempting input resource: /root-resource.txt
    no resource found: /root-resource.txt

Where are target resources after maven build?

C:\load-resource> tree /A /F             [After compilation]

C:.
|   load-resource.iml
|   pom.xml
|
|---src
|   \---main
|       |---java
|       |   \---com
|       |       \---logicbig
|       |           \---example
|       |                   ClassA.java
|       |
|       \---resources
|               root-resource.txt
|               test-pkg-resource.txt
|
|
\---target
    |---classes
    |   |   root-resource.txt
    |   |   test-pkg-resource.txt       [<-- resources copied here]
    |   |
    |   \---com
    |       \---logicbig
    |           \---example
    |                   ClassA.class
    |
    \---generated-sources
        \---anotations

C:\load-resource>_ 

   Here we learn followings about resource loading in maven
     * this.getClass().getResource: This works if we use path from root, /root-resource.txt. That makes
       sense because our resources are just under 'classes' in the target folder.
     * Thread.currentThread().getContextClassLoader().getResource(resourceName): This works without a
       leading slash '/'
     * ClassLoader.getSystemClassLoader().getResource(resourceName): Same as context class loader, it
       only works without a leading slash '/'.

How to change maven default 'resources' directory?

   We can use <resources> in pom.xml to override default resource location. In the followings, we are
   specifying 'java' and 'resources' directories as resources.
<build>
    .....
    <resources>
      <resource>
        <directory>src/main/java</directory>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
    .....
    </build>

Conclusion:
   The java runtime behavior is consistent in all above cases. Although output is different because of
   the different locations of resource files relative to .class files. It all depends where our build
   process places the resources files in output/target directory.


---
