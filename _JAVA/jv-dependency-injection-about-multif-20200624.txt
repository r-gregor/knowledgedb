filename: jv_dependency-injection-about-multif_20200624.txt
https://dzone.com/articles/about-dependency-injection

About Dependency Injection
Dec. 29, 17

When I first heard about Dependency Injection at my first workplace, it sounded very fancy to me, and, somehow,
a bit scary. And, in combination with Spring, it looked like black magic. But after reading a bit about it,
I think this expression "dependency injection is a 25-dollar term for a 5-cent concept" describes it perfectly.
I don't want to say that it is a cheap pattern: It is not! It is extremely helpful and a must-have in software
development. But it is simple, and its simplicity makes this pattern simply brilliant.
So What Is It?

Let's see a simple example to understand better what this means. Let's build a simple payment service for an
online shop. We have a cart with a list of products, and we create a method that iterates all the products and
uses a cash payment service to pay for them.

public class CashPaymentService {

    public void pay(Product product) {
        System.out.println("Payed with cash");
    }
}

public class Cart {

    private List < Product > productList = new ArrayList < > ();
    private CashPaymentService paymentService = new CashPaymentService();

    public addProductToCart(Product product) {
        productList.add(product);
    }

    public void buy() {
        productList.stream().forEach(paymentService::pay);
    }
}


This works.

But why should the Cart be responsible for creating the CashPaymentService? The Cart is tightly coupled to the
CashPaymentService object, and there are several problems with this. What if we want to use another payment
service? Maybe we want to add a service for paying with a credit card. Then, in this case, we would have to
change the implementation of the Cart object to use another payment service - and this is not Cart's
responsibility. Or maybe we want to have a mock payment service for testing the Cart object. Then we should
change the Cart object again to use a mocked payment service in a test environment.

The problem here is the combination of concerns in the Cart object. The Cart should do just what it is meant to
do. It holds a list of products and offers a method for buying them. The payment service is an external
dependency here. This service is used by the Cart, but it is not Cart's responsibility to create it. The Cart
should just receive this dependency. There are multiple ways to do this, and the next code snippet shows the
simplest method. We send the dependency through a constructor. This is Dependency Injection in its simplest
form.

public class Cart {

    private List < Product > productList = new ArrayList < > ();
    private CashPaymentService paymentService;

    public Cart(CashPaymentService paymentService) {
        this.paymentService = paymentService;
    }
    
    public addProductToCart(Product product) {
        productList.add(product);
    }

    public void buy() {
        productList.stream().forEach(paymentService::pay);
    }
}


The Cart object needs a payment service. It is not responsible to create it. It is just an external dependency
that it must receive, so it receives it when the object is instantiated through its constructor. You also can
use setter methods - doesn't matter. The point of Dependency Injection is just to inject the dependency and
not to make a class responsible for creating or looking up to its dependencies. This way, with the DI pattern,
we achieve separation of concerns.

Improvements
This does not resolve the problem that the Cart object is tightly coupled to the CashPaymentService. Even if
the CashPaymentService is injected, the Cart is strongly tied to the CashPaymentService implementation.
The solution here is simple, and we know it from the strategy pattern. The key of the strategy pattern that
we'll use here is to program to an interface, not an implementation. So we need to create a PaymentService
interface that has only one method: pay(). This is the only thing that the Cart must know about the
PaymentService.

public interface PaymentService {
    void pay(Product product);
}

public class Cart {

    private List < Product > productList = new ArrayList < > ();
    private PaymentService paymentService;

    public Cart(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    public addProductToCart(Product product) {
        productList.add(product);
    }

    public void buy() {
        productList.stream().forEach(paymentService::pay);
    }
}


Now the Cart is not tied to the CashPaymentService implementation, so we are free to inject whatever
PaymentService implementation we need.

public class CashPaymentService implements PaymentService {

    @Override
    public void pay(Product product) {
        System.out.println("Payed with cash");
    }
}

public class CardPaymentService implements PaymentService {

    @Override
    public void pay(Product product) {
        System.out.println("Payed with credit card");
    }
}

public class TestPaymentService implements PaymentService {

    @Override
    public void pay(Product product) {
        System.out.println("Test payment");
    }
}


We have multiple ways of injecting the desired dependency when we instantiate the Cart object. Let's see an
example using the Factory Pattern.

public class PaymentServiceFactory {

    public PaymentService getPaymentService(String paymentType) {

        if (paymentType == null) {
            return null;
        }

        if (paymentType.equalsIgnoreCase("CASH") {
            return new CashPaymnetService();
        }

        if (paymentType.equalsIgnoreCase("CARD") {
            return new CardPaymnetService();
        }

        if (paymentType.equalsIgnoreCase("TEST") {
            return new TestPaymnetService();
        }
        return null;
    }
}


Now, we can use this factory class to build whatever payment service we want.

public class Demo {

    public static void main(String[] args) {
        PaymentService paymentService = new PaymentService("CARD");
        Cart cart = new Cart(paymentService);
    }
}


What did we accomplish here? Using Dependency Injection, the Cart object receives its dependencies. Using the
strategy pattern, we decouple the Cart from a specific payment service, and we can use whatever payment service
we desire. Using the factory pattern, we can specify, with a string parameter, which payment service we want,
and the factory class is responsible for creating it. The code now is loosely coupled and clearly looks better
than before.

So Why All the Frameworks?
Using the factory pattern, the dependencies are hidden in the code. If you want to add a new implementation,
you have to modify the factory class. Moreover, using the factory pattern, we have to call the "new" keyword.
It's our responsibility to instantiate the objects. For now, that does not sound so bad, but what if we have a
large project with hundreds of classes, and all of them have all kinds of dependencies to each other? Well,
then our factory class will evolve into a monstrosity where we will have to manage a very big and ugly
dependency tree.

Dependency Injection frameworks, like Spring or Guice, are here to do this for us, and they do it well. Using
frameworks like these, you don't have to manage the dependency tree. They encourage you to program by interface
and not by implementation, and it is their responsibility to create the necessary objects and to inject them
where you need while maintaining the application's dependency tree. Let's see how the payment service looks
using the Guice framework.

Like I said before, these frameworks encourage you to program by interface and not by implementation, just
like the strategy pattern. So let's start with our PaymentService interface and then build the
CashPaymentService implementation.

interface PaymentService {
    public void pay(Product product);
}

public class CashPaymentService implements PaymentService {

    @Override
    public void pay(Product product) {
        System.out.println("Payed with cash");
    }
}


The Cart object is the same, except is just using the @Inject annotation before the constructor.
The annotation is used by Guice to know where to inject the dependencies.

public class Cart {

    private List < Product > productList = new ArrayList < > ();
    private PaymentService paymentService;

    @Inject
    public Cart(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    public addProductToCart(Product product) {
        productList.add(product);
    }

    public void buy() {
        productList.stream().forEach(paymentService::pay);
    }
}


We now have the interface and the implementation, so let's see how we could bind them together. Guice requires
a module for configuring the bindings. A module is just a class that extends the AbstractModule class. This
class is the central point of the Guice framework. Here we keep all the dependency configurations, all the
bindings, and their scopes. We are not forbidden from using a single module class - we can as how many of them
as we want for different purposes. But let's start with a single one and see what it does for us.

public class PaymentModule extends AbstractModule {

    @Override
    protected void configure configure() {
        bind(PaymentService.class).to(CashPaymentService.class);
        bind(Cart.class);
    }
}


In this module, we specify that the PaymentService interface is bound to the CashPaymentService implementation.
What this means is that when Guice sees a class that has a dependency to the PaymentService class, it will
inject an instance of the CashPaymentService implementation. Let's see how we can use it.

public class Demo {

    public static void main(String[] args) {

        Injector injector = Guice.createInjector(new PaymentModule());

        // Now, whenever we want an instance we tell the injector to create it for us.
        Cart cart = injector.getInstance(Cart.class);
    }
}


The injector will now create a Cart object, and it will inject the necessary dependencies - in this case, a
new CashPaymentService.

The module classes in Guice are very powerful. With them, we can manage all the instances in a big application.
We can create binding annotations and use different scopes, like @Singleton, @SessionScoped, or @RequestScoped.
Here is some great documentation for Guice, where you can see all the things that Guice can do for us.

Summary
Using Dependency Injection, your classes are not tightly coupled to their dependencies. You specify what
dependencies you need in your class and are concerned just for the class's own business logic. Asking for
interfaces (and not just for concrete classes) gives you the liberty to choose between multiple implementations.

In a very large application, it could become impossible to manage all the dependencies, so why not let someone
trustworthy to do this? I showed, after a little introduction, what Guice can do, and Guice is not the only one.
You can also use Spring or Play. They look different, but all accomplish the same thing. They manage your
dependencies and inject them.


---
https://github.com/google/guice/wiki/Motivation

Motivation
Jan 18, 2020

   Wiring everything together is a tedious part of application development. There are several approaches
   to connect data, service, and presentation classes to one another. To contrast these approaches,
   we'll write the billing code for a pizza ordering website:
   
public interface BillingService {

    /**
    * Attempts to charge the order to the credit card. Both successful and
    * failed transactions will be recorded.
    *
    * @return a receipt of the transaction. If the charge was successful, the
    *      receipt will be successful. Otherwise, the receipt will contain a
    *      decline note describing why the charge failed.
    */
    Receipt chargeOrder(PizzaOrder order, CreditCard creditCard);
}

   Along with the implementation, we'll write unit tests for our code. In the tests we need a
   FakeCreditCardProcessor to avoid charging a real credit card!

Direct constructor calls
   Here's what the code looks like when we just new up the credit card processor and transaction logger:
   
public class RealBillingService implements BillingService {
    public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
        CreditCardProcessor processor = new PaypalCreditCardProcessor();
        TransactionLog transactionLog = new DatabaseTransactionLog();
    
        try {
            ChargeResult result = processor.charge(creditCard, order.getAmount());
            transactionLog.logChargeResult(result);
        
            return result.wasSuccessful()
                ? Receipt.forSuccessfulCharge(order.getAmount())
                : Receipt.forDeclinedCharge(result.getDeclineMessage());
        } catch (UnreachableException e) {
            transactionLog.logConnectException(e);
            return Receipt.forSystemFailure(e.getMessage());
        }
    }
}

   This code poses problems for modularity and testability. The direct, compile-time dependency on the
   real credit card processor means that testing the code will charge a credit card! It's also awkward
   to test what happens when the charge is declined or when the service is unavailable.

Factories
   A factory class decouples the client and implementing class. A simple factory uses static methods to
   get and set mock implementations for interfaces. A factory is implemented with some boilerplate code:
   
public class CreditCardProcessorFactory {

    private static CreditCardProcessor instance;
    
    public static void setInstance(CreditCardProcessor processor) {
        instance = processor;
    }
    
    public static CreditCardProcessor getInstance() {
        if (instance == null) {
            return new SquareCreditCardProcessor();
        }
        return instance;
    }
}

   In our client code, we just replace the new calls with factory lookups:
   
public class RealBillingService implements BillingService {
    public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
        CreditCardProcessor processor = CreditCardProcessorFactory.getInstance();
        TransactionLog transactionLog = TransactionLogFactory.getInstance();
    
        try {
            ChargeResult result = processor.charge(creditCard, order.getAmount());
            transactionLog.logChargeResult(result);
    
            return result.wasSuccessful()
                ? Receipt.forSuccessfulCharge(order.getAmount())
                : Receipt.forDeclinedCharge(result.getDeclineMessage());
        } catch (UnreachableException e) {
            transactionLog.logConnectException(e);
            return Receipt.forSystemFailure(e.getMessage());
        }
    }
}

   The factory makes it possible to write a proper unit test:
   
public class RealBillingServiceTest extends TestCase {

    private final PizzaOrder order = new PizzaOrder(100);
    private final CreditCard creditCard = new CreditCard("1234", 11, 2010);
    
    private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();
    private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();
    
    @Override public void setUp() {
        TransactionLogFactory.setInstance(transactionLog);
        CreditCardProcessorFactory.setInstance(processor);
    }
    
    @Override public void tearDown() {
        TransactionLogFactory.setInstance(null);
        CreditCardProcessorFactory.setInstance(null);
    }
    
    public void testSuccessfulCharge() {
        RealBillingService billingService = new RealBillingService();
        Receipt receipt = billingService.chargeOrder(order, creditCard);
    
        assertTrue(receipt.hasSuccessfulCharge());
        assertEquals(100, receipt.getAmountOfCharge());
        assertEquals(creditCard, processor.getCardOfOnlyCharge());
        assertEquals(100, processor.getAmountOfOnlyCharge());
        assertTrue(transactionLog.wasSuccessLogged());
    }
}

   This code is clumsy. A global variable holds the mock implementation, so we need to be careful about
   setting it up and tearing it down. Should the tearDown fail, the global variable continues to point
   at our test instance. This could cause problems for other tests. It also prevents us from running
   multiple tests in parallel.

   But the biggest problem is that the dependencies are hidden in the code. If we add a dependency on a
   CreditCardFraudTracker, we have to re-run the tests to find out which ones will break. Should we
   forget to initialize a factory for a production service, we don't find out until a charge is
   attempted. As the application grows, babysitting factories becomes a growing drain on productivity.

   Quality problems will be caught by QA or acceptance tests. That may be sufficient, but we can
   certainly do better.

Dependency Injection
   Like the factory, dependency injection is just a design pattern. The core principle is to separate
   behaviour from dependency resolution. In our example, the RealBillingService is not responsible for
   looking up the TransactionLog and CreditCardProcessor. Instead, they're passed in as constructor
   parameters:

public class RealBillingService implements BillingService {
    private final CreditCardProcessor processor;
    private final TransactionLog transactionLog;
    
    public RealBillingService(CreditCardProcessor processor,
        TransactionLog transactionLog) {
            this.processor = processor;
            this.transactionLog = transactionLog;
    }
    
    public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
        try {
            ChargeResult result = processor.charge(creditCard, order.getAmount());
            transactionLog.logChargeResult(result);
        
            return result.wasSuccessful()
                ? Receipt.forSuccessfulCharge(order.getAmount())
                : Receipt.forDeclinedCharge(result.getDeclineMessage());
        } catch (UnreachableException e) {
        transactionLog.logConnectException(e);
        return Receipt.forSystemFailure(e.getMessage());
        }
    }
}

   We don't need any factories, and we can simplify the testcase by removing the setUp and tearDown
   boilerplate:
   
public class RealBillingServiceTest extends TestCase {

    private final PizzaOrder order = new PizzaOrder(100);
    private final CreditCard creditCard = new CreditCard("1234", 11, 2010);
    
    private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();
    private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();
    
    public void testSuccessfulCharge() {
        RealBillingService billingService
            = new RealBillingService(processor, transactionLog);
        Receipt receipt = billingService.chargeOrder(order, creditCard);
    
        assertTrue(receipt.hasSuccessfulCharge());
        assertEquals(100, receipt.getAmountOfCharge());
        assertEquals(creditCard, processor.getCardOfOnlyCharge());
        assertEquals(100, processor.getAmountOfOnlyCharge());
        assertTrue(transactionLog.wasSuccessLogged());
    }
}

   Now, whenever we add or remove dependencies, the compiler will remind us what tests need to be fixed.
   The dependency is exposed in the API signature.

   Unfortunately, now the clients of BillingService need to lookup its dependencies. We can fix some of
   these by applying the pattern again! Classes that depend on it can accept a BillingService in their
   constructor. For top-level classes, it's useful to have a framework. Otherwise you'll need to
   construct dependencies recursively when you need to use a service:
   
    public static void main(String[] args) {
        CreditCardProcessor processor = new PaypalCreditCardProcessor();
        TransactionLog transactionLog = new DatabaseTransactionLog();
        BillingService billingService
            = new RealBillingService(processor, transactionLog);
        ...
    }

Dependency Injection with Guice
   The dependency injection pattern leads to code that's modular and testable, and Guice makes it easy
   to write. To use Guice in our billing example, we first need to tell it how to map our interfaces to
   their implementations. This configuration is done in a Guice module, which is any Java class that
   implements the Module interface:
   
public class BillingModule extends AbstractModule {
    @Override
    protected void configure() {
        bind(TransactionLog.class).to(DatabaseTransactionLog.class);
        bind(CreditCardProcessor.class).to(PaypalCreditCardProcessor.class);
        bind(BillingService.class).to(RealBillingService.class);
    }
}

   We add @Inject to RealBillingService's constructor, which directs Guice to use it. Guice will inspect
   the annotated constructor, and lookup values for each parameter.
   
public class RealBillingService implements BillingService {
    private final CreditCardProcessor processor;
    private final TransactionLog transactionLog;
    
    @Inject
    public RealBillingService(CreditCardProcessor processor,
        TransactionLog transactionLog) {
        this.processor = processor;
        this.transactionLog = transactionLog;
    }

    public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
        try {
            ChargeResult result = processor.charge(creditCard, order.getAmount());
            transactionLog.logChargeResult(result);
        
            return result.wasSuccessful()
                ? Receipt.forSuccessfulCharge(order.getAmount())
                : Receipt.forDeclinedCharge(result.getDeclineMessage());
        } catch (UnreachableException e) {
            transactionLog.logConnectException(e);
            return Receipt.forSystemFailure(e.getMessage());
        }
    }
}

   Finally, we can put it all together. The Injector can be used to get an instance of any of the bound
   classes.
   
  public static void main(String[] args) {
        Injector injector = Guice.createInjector(new BillingModule());
        BillingService billingService = injector.getInstance(BillingService.class);
        ...
  }


---
https://github.com/google/guice/wiki/GettingStarted

GettingStarted
May 18, 2020

   Guice is a framework that makes it easier for your application to use the dependency injection (DI)
   pattern. This getting started guide will walk you through a simple example of how you can use Guice
   to incorporate dependency injection into your application.

What is dependency injection?
   Dependency injection is a design pattern wherein classes declare their dependencies as arguments
   instead of creating those dependencies directly. For example, a client that wishes to call a service
   should not have to know how to construct the service, rather, some external code is responsible for
   providing the service to the client.

   Here's a simple example of code that does not use dependency injection:
   
class Foo {
    private Database database;  // We need a Database to do some work
    
    Foo() {
        // Ugh. How could I test this? What if I ever want to use a different
        // database in another application?
        this.database = new Database("/path/to/my/data");
    }
}

   The Foo class above creates a fixed Database object directly. This prevents this class from being
   used with other Database objects and does not allow the real database to be swapped out for a testing
   database in tests. Instead of writing untestable or inflexible code, you can use dependency injection
   pattern to address all these issues.

   Here's the same example, this time using dependency injection:
   
class Foo {
    private Database database;  // We need a Database to do some work
    
    // The database comes from somewhere else. Where? That's not my job, that's
    // the job of whoever constructs me: they can choose which database to use.
    Foo(Database database) {
        this.database = database;
    }
}

   The Foo class above can be used with any Database objects since Foo has no knowledge of how the
   Database is created. For example, you can create a test version of Database implementation that uses
   an in-memory database in tests to make the test hermetic and fast.

   The Motivation page explains why applications should use the dependency injection pattern in more
   detail.

Core Guice concepts

@Inject constructor
   Java class constructors that are annotated with @Inject can be called by Guice through a process
   called [63]constructor injection, during which the constructors' arguments will be created and
   provided by Guice.

   Here is an example of a class that uses constructor injection:
class Greeter {
    private final String message;
    private final int count;
    
    // Greeter declares that it needs a string message and an integer
    // representing the number of time the message to be printed.
    // The @Inject annotation marks this constructor as eligible to be used by
    // Guice.
    @Inject
    Greeter(@Message String message, @Count int count) {
        this.message = message;
        this.count = count;
    }
    
    void sayHello() {
        for (int i=0; i < count; i++) {
            System.out.println(message);
        }
    }
}

   In the example above, the Greeter class has a constructor that is called when application asks Guice
   to create an instance of Greeter. Guice will create the two arguments required, then invoke the
   constructor. The Greeter class's constructor arguments are its dependencies and applications use
   Module to tell Guice how to satisfy those dependencies.

Guice modules
   Applications contain objects that declare dependencies on other objects, and those dependencies form
   graphs. For example, the above Greeter class has two dependencies (declared in its constructor):
     * A String object for the message to be printed
     * An Integer object for the number of times to print the message

   Guice modules allow applications to specify how to satisfy those dependencies. For example, the
   following DemoModule configures all the necessary dependencies for Greeter class:
   
/**
 * Guice module that provides bindings for message and count used in
 * {@link Greeter}.
 */
import com.google.inject.Provides;

class DemoModule extends AbstractModule {
    @Provides
    @Count
    static Integer provideCount() {
        return 3;
    }
    
    @Provides
    @Message
    static String provideMessage() {
        return "hello world";
    }
}

   DemoModule uses two of the supported methods in Guice:
     * @Provides methods
     * Guice's Domain Specific Language (DSL) using the various [65]bind methods exposed by
       AbstractModule

   In a real application, the dependency graph for objects will be much more complicated and Guice makes
   creating complex object easy by creating all the transitive dependencies automatically.

Guice injectors
   To bootstrap your application, you'll need to create a Guice [66]Injector with one or more modules in
   it. For example, a web server application might have a main method that looks like this:
public final class MyWebServer {
    public void start() {
        ...
    }
    
    public static void main(String[] args) {
        // Creates an injector that has all the necessary dependencies needed to
        // build a functional server.
        Injector injector = Guice.createInjector(
            new RequestLoggingModule(),
            new RequestHandlerModule(),
            new AuthenticationModule(),
            new DatabaseModule(),
            ...);
        // Bootstrap the application by creating an instance of the server then
        // start the server to handle incoming requests.
        injector.getInstance(MyWebServer.class)
            .start();
    }
}

   The injector internally holds the dependency graphs described in your application. When you request
   an instance of a given type, the injector figures out what objects to construct, resolves their
   dependencies, and wires everything together. To specify how dependencies are resolved, configure your
   injector with [67]bindings.

A simple Guice application
   The following is a simple Guice application with all the necessary pieces put together:
   
package guicedemo;

import static java.lang.annotation.RetentionPolicy.RUNTIME;

import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Key;
import com.google.inject.Provides;
import java.lang.annotation.Retention;
import javax.inject.Inject;
import javax.inject.Qualifier;

public class GuiceDemo {
    @Qualifier
    @Retention(RUNTIME)
    @interface Message {}
    
    @Qualifier
    @Retention(RUNTIME)
    @interface Count {}
    
    /**
    * Guice module that provides bindings for message and count used in
    * {@link Greeter}.
    */
    static class DemoModule extends AbstractModule {
        @Provides
        @Count
        static Integer provideCount() {
            return 3;
        }
    
        @Provides
        @Message
        static String provideMessage() {
            return "hello world";
        }
    }

    static class Greeter {
        private final String message;
        private final int count;
    
        // Greeter declares that it needs a string message and an integer
        // representing the number of time the message to be printed.
        // The @Inject annotation marks this constructor as eligible to be used by
        // Guice.
        @Inject
        Greeter(@Message String message, @Count int count) {
            this.message = message;
            this.count = count;
        }
    
        void sayHello() {
            for (int i=0; i < count; i++) {
                System.out.println(message);
            }
        }
    }

    public static void main(String[] args) {
        /*
        * Guice.createInjector() takes one or more modules, and returns a new Injector
        * instance. Most applications will call this method exactly once, in their
        * main() method.
        */
        Injector injector = Guice.createInjector(new DemoModule());
    
        /*
        * Now that we've got the injector, we can build objects.
        */
        Greeter greeter = injector.getInstance(Greeter.class);
    
        // Prints "hello world" 3 times to the console.
        greeter.sayHello();
    }
}

   The GuiceDemo application constructed a small dependency graph using Guice that is capable of
   building instances of Greeter class. Large applications usually have many Modules that can build
   complex objects.


---
