filename: jv_method-reference-tutorial-multif_20210920.txt
https://javarevisited.blogspot.com/2017/08/how-to-convert-lambda-expression-to-method-reference-in-java8-example.html#axzz5gKl3DykI

How to Convert a Lambda Expression to Method Reference in Java 8?

   If you have been coding in Java 8 then you may know that using method reference in place of
   lambda expression makes your code more readable, hence it is advised to replace lambda expression
   with method reference wherever possible. But, the big question is, how do you find whether you can
   replace a lambda with method reference? Yes, it's not that easy, especially if you have been using
   Java 8 only for a couple of months and struggling to get the functional programming concepts and
   idioms sorted in your head. Sometimes, IDEs like IntelliJ IDEA and Eclipse does offer some hints to
   convert lambda expression to method reference but it does make sense to learn the logic behind it,
   otherwise, it won't make sense.
   The simple rule to replace lambda expression with method reference is built on common sense, which
   you will learn in this article.
   If you look closely, lambda is nothing but a code block which you pass to a function to execute. If
   you already have that code in form of a method then instead of passing the new code as lambda you
   can pass the name of the method and that's known as method reference.
   That's it, but I know, it's easier said than done, hence I have provided a couple of examples
   to explain method reference concept in Java 8.
   Btw, if you are just starting with lambda expression and Java 8 in general, I suggest you to first go
   through a comprehensive course like The Complete Java MasterClass, which covers the topic in much
   more detail. It's also one of the best course to learn Java in general and also recently updated to
   cover the Java 11 features.

How to replace lambda expression with method reference in Java 8
   If you are using a lambda expression as an anonymous function but not doing anything with the
   argument passed, you can replace lambda expression with method reference.
   Below code is a good example to replace lambdas with method reference
listOfNumbers.stream().sorted().forEach(number -> {
	System.out.println(number);
	}
);

   Since we are not modifying the number argument here, we can replace the lambda expression:
number -> {
	System.out.println(number);
}

   with method reference as shown below:
listOfNumbers.stream().sorted.forEach(System.out::println);

   but, if you modify the argument before passing it to another method then you cannot replace lambdas
   with method reference e.g. in the following case we cannot do that:
listOfNumbers.stream().sorted().forEach(number -> {
	System.out.println(String.valueOf(number));
	}
);

   The double colon (::) operator is used for method reference and there are actually three main cases
   to use it:
object::instanceMethod
Class::staticMethod
Class:instanceMethod

   In the first two cases, the method reference is equivalent to lambda expression that supplies the
   parameters of the method e.g. System.out::println is equivalent to x -> System.out.println(x) and
   Math::pow is equivalent to (x, y) -> Math.pow(x, y).
   In this case, the first parameter becomes the target of the method.
   For example, String::compareToIgnoreCase is the same as
(x, y) -> x.compareToIgnoreCase(y)

   or
   this::equals is the same as
(x -> this.equals(x))

   You can read more about converting this type of lambda expression into method reference in What's
   New in Java 8, it has got a little bit more explanation and examples on this topic.
   How to convert a lambda expression to method reference in Java 8?
   Btw, you would need a Pluralsight membership to access this course, which costs around $29 monthly or
   $299 annually (14% saving). I have one and I also suggest all developers have that plan because
   Pluralsight is like NetFlix for Software developers.
   It has more than 5000+ good quality courses on all latest topics. Since we programmers have to learn
   new things every day, an investment of $299 USD is not bad.
   Btw, it also offers a 10-day free trial without any obligation which allows you to watch 200 hours of
   content. You can watch this course for free by signing for that 10-day free trial.
   Anyway,	another good example of replacing lambda expression with method reference is the following
   code of sorting a map by values in Java 8:
Map sortByValue = map.entrySet()
	.stream()
	.sorted(Map.Entry.<String, Integer>comparingByValue())
	.collect(Collectors.toMap(e -> e.getKey(),e -> e.getValue()));

   can be rewritten as following using method reference :
Map sortByValue = map.entrySet()
	.stream()
	.sorted(Map.Entry.<String, Integer>comparingByValue())
	.collect(toMap(Map.Entry::getKey,
			   Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

   if you look closely, we have replaced e -> e.getKey() with Map.Entry::getKey and e -> g.getValue() to
   Map.Entry::getValue because we already have code what those lambda expressions were doing in form of
   getKey() and getValue() method.
   That's all about when and how to replace lambda expression with method reference in Java 8. You can
   replace only if you are not doing any modification, otherwise, you cannot replace. Why you want to do
   that? Well, because method reference is more succinct and readable than lambda expression.


---
https://javarevisited.blogspot.com/2017/03/what-is-method-references-in-java-8-example.html

What is Method Reference in Java 8 Functional Programming? Example

   Lambda expression allows you to reduce code compared to an anonymous class to pass behaviors to
   methods, method reference goes one step further. It reduces code written in a lambda expression to
   make it even more readable and concise. You use lambda expressions to create anonymous methods.
   Sometimes, however, a lambda expression does nothing but call an existing method. In those cases,
   it's often clearer to refer to the existing method by name. Method references enable you to do this;
   they are compact, easy-to-read lambda expressions for methods that already have a name.
   One of the most popular examples of method reference is List.forEach(System.out::println), which
   prints each element into the console. If you analyze this statement from the very beginning, you will
   understand how lambda expression and further method reference have reduced the number of lines of
   code.
   Before Java 8, to display all elements from List
List listOfOrders = getOrderBook();
for(Order order : listOfOrders){
	System.out.println(order);
}

   In Java 8, after using a lambda expression
listOfOrders.forEach((Order o) -> System.out.println(o));

   Further reduction in code by let compiler infer types
listOfOrders.forEach(System.out.println(o));

   and Now, since this lambda expression is not doing anything and just calling a method, it can be
   replaced by method reference, as shown below:
orderBook.forEach(System.out::println);

   This is the most concise way of printing all elements of a list.  Since println() is a
   non-static instance method, this is known as instance method reference in Java8.
   The equivalent lambda expression for the method reference String::compareToIgnoreCase would have the
   formal parameter list (String a, String b), where a and b are arbitrary names used to better describe
   this example. The method reference would invoke the method a.compareToIgnoreCase(b).
   You can see also see these Java 8 Stream and Lambdas online courses to learn more about method
   reference and how to effectively use it to further shorten your Java code.

How to use Method reference in Java 8? Example
   Here is a complete Java program that will teach you how to use method reference in your Java 8 code
   to further shorten your Java program:
<code>
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Test {

	public static void main(String args[]) {

		// initialize order book with few orders
		List<Order> orderBook = new ArrayList<>();
		orderBook.add(new Order(1000, "GOOG.NS", 1220.17, Order.Side.BUY));
		orderBook.add(new Order(4000, "MSFT.NS", 37.47, Order.Side.SELL));

		// Sort all orders on price, using lambda expression
		System.out.println("Before sorting : " + orderBook);
		Collections.sort(orderBook, (a, b) -> a.getQuantity()
										- b.getQuantity());

		// replacing lambda expression to method reference
		// Above code can also be written like this, where
		// we are just calling a method of Order class from
		// lambda expression, this can be replaced by Method
		// reference.
		Collections.sort(orderBook, (a, b) -> Order.compareByQuantity(a, b));
		Collections.sort(orderBook, Order::compareByQuantity);
		System.out.println("After sorting by order quantity : " + orderBook);

		// Did you notice, two things while using method reference
		// first, we use :: double colon to invoke method,
		// similar to scope resolution operator of C++.
		// second, you don't need to provide parenthesis
		// for method parameter, it's just a name
		// Similarly you can call other static method
		// using method reference.
		// Another key thing is syntax of method must
		// match with syntax of functional
		// interface, for example compareByQuantity() syntax
		// is same as compare() method of
		// Comparator interface, which is a functional
		// interface and Collections.sort() accept
		// Comparator. Let's sort this List by trade value
		Collections.sort(orderBook, Order::compareByValue);
		System.out.println("After sorting by trade value : " + orderBook);

		// Java supports four types of method reference,
		// let's see example of each of them
		// Our previous example, in which we are
		// referring to static method was an
		// example of static method reference,
		// while below is an example of instance method
		// reference, where we are invoking and instance
		// method from Order class.
		// You can reference a constructor in the same way
		// as a static method by using the name new

		Order order = orderBook.get(0); // you need a reference of object
		Collections.sort(orderBook, order::compareByPrice);
		System.out.println("Order book after sorting by price : " + orderBook);

		// method reference example of
		// an Arbitrary Object of a Particular Type
		// equivalent lambda expression for following would be
		// (String a, String b)-> a.compareToIgnoreCase(b)
		String[] symbols = { "GOOG.NS", "APPL.NS", "MSFT.NS", "AMZN.NS"};
		Arrays.sort(symbols, String::compareToIgnoreCase);

	}
}


class Order {
	public enum Side{
		BUY, SELL
	};

	private final int quantity;
	private final String symbol;
	private final double price;
	private final Side side;

	public Order(int quantity, String symbol, double price, Side side) {
		this.quantity = quantity;
		this.symbol = symbol;
		this.side = side;
		this.price = price;
	}

	public int getQuantity() { return quantity; }
	public String getSymbol() { return symbol; }
	public double getPrice() { return price; }
	public Side getSide() { return side; }

	@Override
	public String toString() {
		return String.format("%s %d %s at price %.02f",
						   side, quantity, symbol, price);
	}

	public static int compareByQuantity(Order a, Order b){
		return a.quantity - b.quantity;
	}

	public int compareByPrice(Order a, Order b){
		return Double.valueOf(a.getPrice())
					  .compareTo(Double.valueOf(b.getPrice()));
	}

	public static int compareByValue(Order a, Order b){
		Double tradeValueOfA = a.getPrice() * a.getQuantity();
		Double tradeValueOfB = b.getPrice() * b.getQuantity();
		return tradeValueOfA.compareTo(tradeValueOfB);
	}

}
</code>

Output:
Before sorting : [BUY 1000 GOOG.NS at price
 1220.17, SELL 4000 MSFT.NS at price 37.47]
After sorting by order quantity : [BUY 1000 GOOG.NS
at price 1220.17, SELL 4000 MSFT.NS at price 37.47]
After sorting by trade value : [SELL 4000 MSFT.NS
at price 37.47, BUY 1000 GOOG.NS at price 1220.17]
Order book after sorting by price : [SELL 4000 MSFT.NS
at price 37.47, BUY 1000 GOOG.NS at price 1220.17]

Points to remember about Method Reference in Java 8
   1) There are four types of a method reference in Java 8, namely reference to static method, reference
   to an instance method of a particular object, reference to a constructor, and reference to an
   instance method of an arbitrary object of a particular type. In our example, the method reference
   Order::compareByQuantity is a reference to a static method.
   2) The double-colon operator (::) is used for the method or constructor reference in Java. This same
   symbol is used scope resolution operator in C++ but that has nothing to do with method reference.
   That's all about what is method reference is in Java 8 and how you can use it to write clean code in
   Java 8. The biggest benefit of the method reference or constructor reference is that they make the
   code even shorter by eliminating lambda expression, which makes the code more readable.


---

