filename: jv_qr-code_generate-read-use-multif_20190912.txt
https://www.callicoder.com/generate-qr-code-in-java-using-zxing/

Generate QR Code in java using zxing
Jun 19, 2017

   Booked a movie ticket recently and got the ticket in the form of a QR Code?

   Sent money to your friend's mobile wallet using his QR Code?

   Well, If you're not living in Antarctica or Mount Everest, then chances are that you might have heard
   about or used QR Codes in your life.

   If you wanted to know how QR Codes work and how to generate one for your next exciting project, then
   this blog post is for you.

What are QR Codes?
   QR Code or Quick Response Code is a two dimensional barcode that can be read by modern smartphones
   and special QR Code scanner devices.

   A QR code consists of black squares arranged in a square grid on a white background. There are
   several variants of QR codes depending on their symbol size, layout, encoding and structure.

   QR Codes can be used to encode various types of data like - simple text, urls, phone numbers, sms,
   geolocation, email address etc.

   In the next section, we'll learn how to encode such data and generate the QR Code in Java.

How to generate QR Code in Java?
   We'll use Google's Zxing library to generate QR codes for our application.

   Zxing, pronounced as Zebra Crossing, is an open source, multi-format 1D/2D barcode image
   processing library implemented in java.

1. Add Zxing dependencies
   If you use maven, then add the following dependencies in your pom.xml file to include zxing in your
   project -
<dependencies>
    <dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>core</artifactId>
        <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>javase</artifactId>
        <version>3.3.0</version>
    </dependency>
</dependencies>

   Android users, or other gradle users can add the following to their build.gradle file -
compile "com.google.zxing:core:3.3.0"
compile 'com.google.zxing:javase:3.3.0'

   If you are not using any build system then just download the following zxing jars hosted on Maven
   release repository and add them in the classpath -
     * zxing core-3.3.0.jar
     * zxing javase-3.3.0.jar

2. Program to generate QR Code
   In the following program, I've written a method called generateQRCodeImage which takes the text to be
   encoded, the width and height of the QR Code, and the file system's path where QR Code will be saved.

   The function generates and saves the QR Code in the specified path.
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

public class QRCodeGenerator {
    private static final String QR_CODE_IMAGE_PATH = "./MyQRCode.png";

    private static void generateQRCodeImage(String text, int width, int height, String filePath)
            throws WriterException, IOException {
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height);

        Path path = FileSystems.getDefault().getPath(filePath);
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", path);
    }

    public static void main(String[] args) {
        try {
            generateQRCodeImage("This is my first QR Code", 350, 350, QR_CODE_IMAGE_PATH);
        } catch (WriterException e) {
            System.out.println("Could not generate QR Code, WriterException :: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("Could not generate QR Code, IOException :: " + e.getMessage());
        }
    }
}

   The above program will generate a QR Code with text - "This is my first QR Code" and save it in the
   specified location.

   The above generateQRCode method writes the QRCode image into the specified location. If you don't
   want to save the QRCode and want to return it from the function as a byte array, then you can use
   MatrixToImageWriter.writeToStream() method provided by zxing library -
/*
This method takes the text to be encoded, the width and height of the QR Code,
and returns the QR Code in the form of a byte array.
*/
private byte[] getQRCodeImage(String text, int width, int height) throws WriterException, IOException {
    QRCodeWriter qrCodeWriter = new QRCodeWriter();
    BitMatrix bitMatrix = qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height);

    ByteArrayOutputStream pngOutputStream = new ByteArrayOutputStream();
    MatrixToImageWriter.writeToStream(bitMatrix, "PNG", pngOutputStream);
    byte[] pngData = pngOutputStream.toByteArray();
    return pngData;
}

   The above method is very useful -
     * If you're developing a web application and want to return the QR Code image as a response to an
       http request. You can return the byte array in the body of your http response.
     * If you're developing an android application and want to display the QR Code on your activity
       screen. You can convert the byte array into a BitMap and display the image in an ImageView.

Securing your QR Codes
   The text that is encoded using QR Code can be read and interpreted by any smart phone and qr code
   scanner devices. But, What if you don't want everyone to read what is encoded in the QR Code?

   Well, QR Code itself does not provide any security. Here is what you can do instead -
     * Before generating QR code with any text, encrypt the text using any cryptographic algorithm with
       a secret that only your application has access to.
     * Generate QR Code with the encrypted text.

   Now, even if someone scans your QR Code, they will get the encrypted text which they can't decrypt
   unless they know the secret which was used to encrypt it.

   But when you scan the QR Code in your application, you can decrypt the text using the secret and get
   the actual data stored in the QR Code.

Conclusion
   In this post, we learned how to generate QR codes in java using google's zxing library. In the
   next post, we'll learn how to read QR code images in Java.


---
https://www.callicoder.com/qr-code-reader-scanner-in-java-using-zxing/

Write a QR Code Reader in Java using Zxing
Jun 20, 2017 

   In the previous post, we learned how to generate QR Codes in java using google's Zxing library.
   If you have not read my previous tutorial, I encourage you to have a look at that first before
   reading this one.

   In this post we'll learn how to read QR code images and extract the data encoded inside the QR Code.

   Scan the above QR code using your smartphone. You'll get my site's url - http://callicoder.com.
   We'll write a similar scanner in Java where you can pass a QR code image, and the program will return
   the data encoded in the QR code.

Reading QR Code image in Java
   We'll use Google's zxing library to read QR code images.

   Please make sure that following zxing dependencies are added in your pom.xml file -
<!-- For Maven Users -->
<dependencies>
    <dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>core</artifactId>
        <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>javase</artifactId>
        <version>3.3.0</version>
    </dependency>
</dependencies>

   If you're using gradle then add the following dependencies -
# For Gradle users
compile "com.google.zxing:core:3.3.0"
compile 'com.google.zxing:javase:3.3.0'

   If you're not using any build system, then you can add the following zxing jars directly in the
   classpath -
    1. zxing core-3.3.0.jar
    2. zxing javase-3.3.0.jar

Program to Read QR Code image

<code>
import com.google.zxing.*;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class QRCodeReader {

    private static String decodeQRCode(File qrCodeimage) throws IOException {
        BufferedImage bufferedImage = ImageIO.read(qrCodeimage);
        LuminanceSource source = new BufferedImageLuminanceSource(bufferedImage);
        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

        try {
            Result result = new MultiFormatReader().decode(bitmap);
            return result.getText();
        } catch (NotFoundException e) {
            System.out.println("There is no QR code in the image");
            return null;
        }
    }

    public static void main(String[] args) {
        try {
            File file = new File("MyQRCode.png");
            String decodedText = decodeQRCode(file);
            if(decodedText == null) {
                System.out.println("No QR Code found in the image");
            } else {
                System.out.println("Decoded text = " + decodedText);
            }
        } catch (IOException e) {
            System.out.println("Could not decode QR Code, IOException :: " + e.getMessage());
        }
    }
}
</code>

   In the above program, the decodeQRCode() function takes an image file and tries to read any QR code
   in the image. If a QR code is found, it returns the text otherwise it returns null.

Conclusion
   In this blog post, We learned how to read QR codes in Java using Zxing library.

   Zxing library has several other useful features that you can use. For example, reading multiple QR
   codes from the image using MultipleBarcodeReader.


---
https://medium.com/@govinda_raj/qr-code-using-zxing-package-from-google-in-java-2fb3c0f3f95f

QR Code using 'zxing' package from Google in Java
Mar 16, 2018

   These-days, QR-code has become a tech fashion. There is a reason behind that, It's very easy to
   create and use it. So now let's see how we can make our own QR-code and encrypt the real message
   behind the image. Before diving in programming, let's know what's a QR-code?
   QR-code

   QR Code or Quick Response Code is a two dimensional barcode that can be read by modern smartphones
   and special QR Code scanner devices. QR-code is nothing but image which contains some encrypted data,
   but how can a image contain some data????

   Fair-enough, if you dig into a image creation, like how a image is created, what it is made of then
   you will know that a image can contain a data. So basically a digital image is made of pixel, so
   pixel is nothing but some co-ordinates which contains some colour value(RGB, etc). So just think that
   You can customise the values in RGB, also you can extract those values. So, I hope it's clear that we
   can keep some data in an image and also there can be some other way by which we can store data in an
   image.

   Now, we know what's a QR-code! So, all good. Next question is why 'zxing' package?

   So, According to StackOverflow , We have got two libraries- 'zxing' and 'QRGen' . QRGen:
   a simple QRCode generation api for java built on top zxing only. For now, we will go for zxing
   because it provides more facilities than QRGen, and zxing is also an open source project & some
   community still working to make it better.
   img[Zxing Supported format]

   zxing provides us a way to create different-different type of encrypted formats. So we will explore
   'QR Code' for now. Dependency can be used.

   We will write a method in java to just create QR-code in specified file.

<code>
public void createQRImage(File imageFile, String dataToBeEncrypted, int sizeOfImage, String typeOfImage)
    throws WriterException, IOException {

    // Create the ByteMatrix for the QR-Code that encodes the given String
    Map encodeHintType = new Hashtable();
    QRCodeWriter qrCodeWriter = new QRCodeWriter();

    //Putting possible errors
    encodeHintType.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);

    //Encoding the Text("dataToBeEncrypted")
    //(String contents, BarcodeFormat format, int width, int height, Map<EncodeHintType, ?> hints)
    BitMatrix byteMatrix = qrCodeWriter.encode(dataToBeEncrypted, BarcodeFormat.QR_CODE, sizeOfImage, sizeOfImage, encodeHintType);

    // Make the BufferedImage that are to hold the QRCode
    Integer matrixWidth = byteMatrix.getWidth();
    BufferedImage image = new BufferedImage(matrixWidth, matrixWidth, BufferedImage.TYPE_INT_RGB);
    image.createGraphics();

    Graphics2D graphics = (Graphics2D) image.getGraphics();
    graphics.setColor(Color.WHITE);
    graphics.fillRect(0, 0, matrixWidth, matrixWidth);

    // Paint and save the image using the ByteMatrix
    graphics.setColor(Color.BLACK);

    for (int i = 0; i < matrixWidth; i++) {
        for (int j = 0; j < matrixWidth; j++) {
            if (byteMatrix.get(i, j)) {
                graphics.fillRect(i, j, 1, 1);
            }
        }
    }
    ImageIO.write(image, typeOfImage, imageFile);
}
</code>

   A QR code consists of black squares arranged in a square grid on a white background. There are
   several variants of QR codes depending on their symbol size, layout, encoding and structure. So,
   All-good. But got one doubt, what about security of my data? How can I secure my data?

   Well, Fair-enough. QR Code itself does not provide any security. Here is what we can do instead -
    1. Before generating QR code with any text, encrypt the text using any cryptographic algorithm with
       a secret that only your application has access to.
    2. Generate QR Code with the encrypted text.

   Now, even if someone scans your QR Code, they will get the encrypted text which they can't decrypt
   unless they know the secret which was used to encrypt it. So, now all good.


---
https://javapapers.com/core-java/java-qr-code/

Java QR Code
October 11th, 2014

   Quick Response Code (QR Code) is a two-dimensional matrix like barcode, designed by a subsidiary of
   Toyota to mark their vehicles for tracking in their manufacturing facilities. This is nothing but a
   type of barcode.

   The four standard modes of data for creating QR code is numeric, alphanumeric, byte / binary and
   Kanji. There are extensions to these standard types available, using which custom data also can be
   coded.

   So why is it popular? QR code can store more volume of data in small area compared to the standard
   barcode formats. Any place where the barcodes are being used can be replace by QR codes.

   This became easily popular because of the advent of mobile apps that can be used as a QR code scanner
   to read the information in QR codes. You can see advertisements in newspapers having QR codes. It may
   contain product information, price detail, web url, etc. If you have a smartphone with iOS or Android
   then you can install a QR Code app easily in a minute and scan all those codes to read the
   information.

   Some general uses of QR codes are,
     * contact information
     * calendar event
     * URL
     * GEO location
     * website authentication
     * credit card information

Java API for QR Code
   ZXing ("Zebra Crossing") is the popular API for QR code processing in Java. Its library has
   multiple components and we will be using the 'core' for QR code creation in our Java example.
   Following code is example to create a QR code image and read information from a QR code image.

QR Code Write and Read Program in Java

<code>
package com.javapapers.java;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

public class QRCode {

    public static void main(String[] args) throws WriterException, IOException, NotFoundException {
        String qrCodeData = "Hello World!";
        String filePath = "QRCode.png";
        String charset = "UTF-8"; // or "ISO-8859-1"
        Map hintMap = new HashMap();
        hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);

        createQRCode(qrCodeData, filePath, charset, hintMap, 200, 200);
        System.out.println("QR Code image created successfully!");

        System.out.println("Data read from QR Code: "
            + readQRCode(filePath, charset, hintMap));

    }

    public static void createQRCode(String qrCodeData, String filePath,
            String charset, Map hintMap, int qrCodeheight, int qrCodewidth)
            throws WriterException, IOException {
        BitMatrix matrix = new MultiFormatWriter().encode(
            new String(qrCodeData.getBytes(charset), charset),
            BarcodeFormat.QR_CODE, qrCodewidth, qrCodeheight, hintMap);
        MatrixToImageWriter.writeToFile(matrix, filePath.substring(filePath
            .lastIndexOf('.') + 1), new File(filePath));
    }

    public static String readQRCode(String filePath, String charset, Map hintMap)
            throws FileNotFoundException, IOException, NotFoundException {
        BinaryBitmap binaryBitmap = new BinaryBitmap(
                                        new HybridBinarizer(
                                            new BufferedImageLuminanceSource(
                                                ImageIO.read(new FileInputStream(filePath))
                                            )
                                        )
        );
        
        Result qrCodeResult = new MultiFormatReader().decode(binaryBitmap, hintMap);
        return qrCodeResult.getText();
    }
}
</code>


Maven dependency for the ZXing QR Code library:
<dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>core</artifactId>
        <version>2.2</version>
</dependency>

<dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>javase</artifactId>
        <version>2.2</version>
</dependency>


---
https://memorynotfound.com/simple-java-qr-code-generator-example/

Simple Java QR Code Generator Example

Quick Response Codes (QR Codes) are becoming one of the most popular barcode systems in the world,
thanks to smartphones. Their usage is really versatile, from automotive, product packaging to online
ticket services. Business started using QR Codes on their documents, business cards and advertisement
to quickly reach them. In this tutorial we show you how to generate QR Codes. First, we create a simple
QR Code for a website URL address. In the second example, we use a VCard to generate a QR Code. A vCard
is a file format standard for electronic business cards.

A barcode is a machine-readable optical label that contains information about the item to which it is
attached. A QR Code (abbreviated from Quick Response Code) is the trademark for a type of matrix barcode
(or two-dimensional barcode) first designed for the automotive industry in Japan. More recently, the
system has become popular outside of the industry due to its fast readability and comparatively large
storage capacity. A QR code uses black modules arranged in a square pattern on a white background. The
information can be made up of four standardised encoding modes (numeric, alphanumeric, byte/binary,
and kanji) to efficiently store data.
Maven Dependencies

We use Apache Maven to manage our project dependencies. Include the following dependency in the projects
pom.xml file.

<dependency>
    <groupId>net.glxn.qrgen</groupId>
    <artifactId>javase</artifactId>
    <version>2.0</version>
</dependency>

QRGen uses Zebra Crossing (ZXing) under the hood. ZXing is a liberal open source library, which can
generate/parse almost all barcodes, including QR Codes. The downside is that you must write bloated code
in order to generate a simple QR Code. QRGen wrote a layer on top of ZXing, exposing the power of the
framework with a simple to use – builder pattern inspired – API programming model.
Create QR Code

Using QRGen you can easily create a QR code. It uses a builder pattern inspired API programming model. Which
means you can simple chain every method an thus reducing the boiler plate code, you otherwise have to
write. We start with the QRCode.from() static method where we pass in the URL of our website. Next,
we configure the necessary configurations like: width, image type, etc. Then, we call the stream()
method. This returns a ByteArrayOutputStream with the corresponding generated QR Code. Finally, we write
the output stream to disk.

<code>
package com.memorynotfound.qrcode;

import net.glxn.qrgen.core.image.ImageType;
import net.glxn.qrgen.javase.QRCode;
import java.io.*;

public class CreateQrCode {

    public static void main(String... args){
        ByteArrayOutputStream bout =
                QRCode.from("https://memorynotfound.com")
                        .withSize(250, 250)
                        .to(ImageType.PNG)
                        .stream();

        try {
            OutputStream out = new FileOutputStream("/tmp/qr-code.png");
            bout.writeTo(out);
            out.flush();
            out.close();

        } catch (FileNotFoundException e){
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code>


Create QR Code with VCard
This example uses the same programming model as before. Instead of writing a URL, we include a VCard. A
vCard is a file format standard for electronic business cards, which contains meta-data like: name,
address, company, etc. First, we create an instance of the VCard. Next, we use the QRCode.from() static
method where we pass in the VCard instance. Next, we configure the necessary configurations like:
width, image type, etc. Then, we call the stream() method. This returns a ByteArrayOutputStream with
the corresponding generated QR Code. Finally, we write the output stream to disk.

<code>
package com.memorynotfound.qrcode;

import net.glxn.qrgen.core.image.ImageType;
import net.glxn.qrgen.core.vcard.VCard;
import net.glxn.qrgen.javase.QRCode;
import java.io.*;

public class CreateQrCodeVCard {

    public static void main(String... args){
        VCard vCard = new VCard();
        vCard.setName("memorynotfound.com");
        vCard.setAddress("street 1, xxxx address");
        vCard.setCompany("company Inc.");
        vCard.setPhoneNumber("+xx/xx.xx.xx");
        vCard.setTitle("title");
        vCard.setEmail("info@memorynotfound.com");
        vCard.setWebsite("https://memorynotfound.com");


        ByteArrayOutputStream bout =
                QRCode.from(vCard)
                        .withSize(250, 250)
                        .to(ImageType.PNG)
                        .stream();

        try {
            OutputStream out = new FileOutputStream("/tmp/qr-code-vcard.png");
            bout.writeTo(out);
            out.flush();
            out.close();

        } catch (FileNotFoundException e){
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code>


QRGen QR Code Generator Usages
Here is a usage overview of the QRGen programming API model. When using special characters don’t forget
to supply the correct encoding.

// get QR file from text using defaults
File file = QRCode.from("Hello World").file();

// get QR stream from text using defaults
ByteArrayOutputStream stream = QRCode.from("Hello World").stream();

// override the image type to be JPG
QRCode.from("Hello World").to(ImageType.JPG).file();
QRCode.from("Hello World").to(ImageType.JPG).stream();

// override image size to be 250x250
QRCode.from("Hello World").withSize(250, 250).file();
QRCode.from("Hello World").withSize(250, 250).stream();

// override size and image type
QRCode.from("Hello World").to(ImageType.GIF).withSize(250, 250).file();
QRCode.from("Hello World").to(ImageType.GIF).withSize(250, 250).stream();

// supply own outputstream
QRCode.from("Hello World").to(ImageType.PNG).writeTo(outputStream);

// supply own file name
QRCode.from("Hello World").file("QRCode");

// supply charset hint to ZXING
QRCode.from("Hello World").withCharset("UTF-8");

// supply error correction level hint to ZXING
QRCode.from("Hello World").withErrorCorrection(ErrorCorrectionLevel.L);

// supply any hint to ZXING
QRCode.from("Hello World").withHint(EncodeHintType.CHARACTER_SET, "UTF-8");

// encode contact data as vcard using defaults
VCard johnDoe = new VCard("John Doe")
                    .setEmail("john.doe@example.org")
                    .setAddress("John Doe Street 1, 5678 Doestown")
                    .setTitle("Mister")
                    .setCompany("John Doe Inc.")
                    .setPhoneNumber("1234")
                    .setWebsite("www.example.org");
QRCode.from(johnDoe).file();

// if using special characters don't forget to supply the encoding
VCard johnSpecial = new VCard("Jöhn Dɵe")
                        .setAddress("ëåäöƞ Sträät 1, 1234 Döestüwn");
QRCode.from(johnSpecial).withCharset("UTF-8").file();



---
https://aboullaite.me/generate-qrcode-with-logo-image-using-zxing/

Generate custom QRCode with logo image using zxing
24 Aug 2017

   Recently I was working on a project and we needed a service that create QrCodes with user profile
   image on top of it, something like the twitter QRCode. We had 2 option: Using a paid existing web
   service, or make our own.I went with the second option.

   After a quick google search, I found zxing. At heart is it a pure Java library for decoding
   barcodes (the core/ and javase/ modules). It also contains several applications for Android, Google
   Glass, a JavaEE web application, and a GWT-based encoder application.

   After 2 days playing with it, I was able to create a small Rest service, using Spring boot, that
   generate QrCodes for our user! Crazy.

   Below a small java class that generate the same thing. It generate a QRCode 300x300 png image, that
   contains some content, and overly an image on top of it. The class also contains an Enumeration of
   6 colors to play with Qrcode foreground and background colors (I use orange and white on this
   example). The class contains also a method to generate random title for generated QrCodes images.
   
<code>
public class QrCode {

    private final String DIR = "/directory/to/save/images";
    private final String ext = ".png";
    private final String LOGO = "logo_url";
    private final String CONTENT = "some content here";
    private final int WIDTH = 300;
    private final int HEIGHT = 300;

    public void generate() {
        // Create new configuration that specifies the error correction
        Map<EncodeHintType, ErrorCorrectionLevel> hints = new HashMap<>();
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);

        QRCodeWriter writer = new QRCodeWriter();
        BitMatrix bitMatrix = null;
        ByteArrayOutputStream os = new ByteArrayOutputStream();

        try {
            // init directory
            cleanDirectory(DIR);
            initDirectory(DIR);
            // Create a qr code with the url as content and a size of WxH px
            bitMatrix = writer.encode(CONTENT, BarcodeFormat.QR_CODE, WIDTH, HEIGHT, hints);

            // Load QR image
            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix, getMatrixConfig());

            // Load logo image
            BufferedImage overly = getOverly(LOGO);

            // Calculate the delta height and width between QR code and logo
            int deltaHeight = qrImage.getHeight() - overly.getHeight();
            int deltaWidth = qrImage.getWidth() - overly.getWidth();

            // Initialize combined image
          BufferedImage combined = new BufferedImage(qrImage.getHeight(), qrImage.getWidth(), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = (Graphics2D) combined.getGraphics();

            // Write QR code to new image at position 0/0
            g.drawImage(qrImage, 0, 0, null);
            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));

            // Write logo into combine image at position (deltaWidth / 2) and
            // (deltaHeight / 2). Background: Left/Right and Top/Bottom must be
            // the same space for the logo to be centered
            g.drawImage(overly, (int) Math.round(deltaWidth / 2), (int) Math.round(deltaHeight / 2), null);

            // Write combined image as PNG to OutputStream
            ImageIO.write(combined, "png", os);
            // Store Image
            Files.copy( new ByteArrayInputStream(os.toByteArray()), Paths.get(DIR + generateRandoTitle(new Random(), 9) +ext), StandardCopyOption.REPLACE_EXISTING);

        } catch (WriterException e) {
            e.printStackTrace();
            //LOG.error("WriterException occured", e);
        } catch (IOException e) {
            e.printStackTrace();
            //LOG.error("IOException occured", e);
        }
    }

    private BufferedImage getOverly(String LOGO) throws IOException {
        URL url = new URL(LOGO);
        return ImageIO.read(url);
    }

    private void initDirectory(String DIR) throws IOException {
        Files.createDirectories(Paths.get(DIR));
    }

    private void cleanDirectory(String DIR) {
        try {
            Files.walk(Paths.get(DIR), FileVisitOption.FOLLOW_LINKS)
                    .sorted(Comparator.reverseOrder())
                    .map(Path::toFile)
                    .forEach(File::delete);
        } catch (IOException e) {
            // Directory does not exist, Do nothing
        }
    }

    private MatrixToImageConfig getMatrixConfig() {
        // ARGB Colors
        // Check Colors ENUM
        return new MatrixToImageConfig(QrCode.Colors.WHITE.getArgb(), QrCode.Colors.ORANGE.getArgb());
    }

    private String generateRandoTitle(Random random, int length) {
        return random.ints(48, 122)
                .filter(i -> (i < 57 || i > 65) && (i < 90 || i > 97))
                .mapToObj(i -> (char) i)
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
                .toString();
    }

    public enum Colors {

        BLUE(0xFF40BAD0),
        RED(0xFFE91C43),
        PURPLE(0xFF8A4F9E),
        ORANGE(0xFFF4B13D),
        WHITE(0xFFFFFFFF),
        BLACK(0xFF000000);

        private final int argb;

        Colors(final int argb){
            this.argb = argb;
        }

        public int getArgb(){
            return argb;
        }
    }
}
</code>

   If you execute this script, you'll get something like:
        img[Yellow QRcode with blue twitter bird image in the center]


---
http://www.keepdynamic.com/java-barcode/barcode/qr-code.shtml

   Java Barcode QR Code Generator
   
   Java QR Code Barcode Generator offers the most affordable Java barcode generator for barcode Java
   professionals. It can generate & print QR Code in Java Class, Jasper Reports, iReport, BIRT.
   
   Java QR-Code Encoder Introduction
   QR-Code is also known as Denso Barcode, QRCode, Quick Response Code, JIS X 0510, ISO/IEC18004.
   QR Code is a kind of 2-D (two-dimensional) symbology developed by Denso Wave (a division of Denso
   Corporation at the time) and released in 1994 with the primary aim of being a symbol that is easily
   interpreted by scanner equipment. QR Code is capable of handling all types of data, such as numeric
   and alphabetic characters, Kanji, Kana, Hiragana, symbols, binary, and control codes.
   
   The symbol versions of QR Code range from Version 1 to Version 40. Each version has a different
   module configuration or number of modules (the module refers to the black and white dots that make up
   QR Code). "Module configuration" refers to the number of modules contained in a symbol, commencing
   with Version 1 (21 x 21 modules) up to Version 40 (177 x 177 modules). Each higher version number
   comprises 4 additional modules per side. Each QR Code symbol version has the maximum data capacity
   according to the amount of data, character type and error correction level. In other words, as the
   amount of data increases, more modules are required to comprise QR Code, resulting in larger QR Code
   symbols.
   
   QR Code has error correction capability to restore data if the code is dirty or damaged. Four error
   correction levels are available for users to choose according to the operating environment.Raising
   this level improves error correction capability but also increases the amount of data QR Code size.
   To select error correction level, various factors such as the operating environment and QR Code size
   need to be considered. Level Q or H may be selected for factory environment where QR Code gets dirty,
   whereas Level L may be selected for clean environment with the large amount of data. Typically, Level
   M (15%) is most frequently selected. The QR Code error correction feature is implemented by adding a
   Reed-Solomon Code to the original data.
   
   Java Barcode QR Code Generator - How to generate Barcode QR-Code in Java Class?
   The following Java code illustrates how to generate a barcode in Java class:

<code>
QRCode barcode = new QRCode();
// set barcode properties
barcode.setCodeText("QRCode");

// draw and generate barcode to buffered image object
BufferedImage qrcodeImage = barcode.drawBarCode2Image();
</code>

   Java Barcode QR Code Generator - How to Generate QR-Code Barcodes to Java Servlet Applicatons?
   The following Java code illustrates how to generate a barcode in Java Servlet class:

<code>
public class BarcodeServlet extends HttpServlet {
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException
    {
        try {
            QRCode barcode = new QRCode();
            // set barcode properties
            barcode.setCodeText("QRCode");

            // draw and generate barcode to response's ServletOutputStream
            ServletOutputStream servletoutputstream = response.getOutputStream();

            barcode.drawBarCode2Stream(servletoutputstream);
        } catch (Exception e) {
            throw new ServletException(e);
        }
    }
}
</code>

   Java Barcode QR Code Generator - How to Create QR-Code Barcodes through HTTP Request?
    1. Install Java Barcode Generator Servlet application to Tomcat or JBoss, developers need copy the
       barcode folder to your Tomcat application folder, and restart the Tomcat.
    2. After Tomcat restarted, open your browser and navigate to:
       http://your_tomcat_url:port/barcode/qrcode?code-text=QRCODE
    3. You can also insert barcodes in HTML or JSP pages.
       <img src="http://your_tomcat_url:port/barcode/qrcode?code-text=QRCODE">

   Java Barcode QR Code Generator - How to Draw & Print Barcode QR-Code to java.awt.Image Object?
   The following Java source code shows how to generate a barcode in a java.awt.Image object:
public class BarcodeServlet extends HttpServlet {
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException
    {
        try {
            QRCode barcode = new QRCode();
            // set barcode properties
            barcode.setCodeText("QRCode");

            // draw and generate barcode to response's ServletOutputStream
            ServletOutputStream servletoutputstream = response.getOutputStream();

            barcode.drawBarCode2Stream(servletoutputstream);
        } catch (Exception e) {
            throw new ServletException(e);
        }
    }

   Java QR-Code Properties
+--------------------+-----------------+---------------+------------------------------------------------------+
|  Class Properties  | HTTP Parameters |    Default    |                       Comments                       |
+--------------------+-----------------+---------------+------------------------------------------------------+
|data                |data             |""             |Barcode value to encode                               |
+--------------------+-----------------+---------------+------------------------------------------------------+
|uom                 |uom              |PIXEL          |Unit of meature for all size related settings. 0:     |
|                    |                 |               |pixel; 1: cm; 2: inch. Default is pixel               |
+--------------------+-----------------+---------------+------------------------------------------------------+
|moduleSize          |module-size      |1              |Width of barcode module (narrow bar), default is 1    |
|                    |                 |               |pixel                                                 |
+--------------------+-----------------+---------------+------------------------------------------------------+
|leftMargin          |left-margin      |0              |Barcode image left margin                             |
+--------------------+-----------------+---------------+------------------------------------------------------+
|rightMargin         |right-margin     |0              |Barcode image right margin                            |
+--------------------+-----------------+---------------+------------------------------------------------------+
|topMargin           |top-margin       |0              |Barcode image top margin                              |
+--------------------+-----------------+---------------+------------------------------------------------------+
|bottomMargin        |bottom-margin    |0              |Barcode image bottom margin                           |
+--------------------+-----------------+---------------+------------------------------------------------------+
|resolution          |resolution       |72             |Barcode image resolution in dpi                       |
+--------------------+-----------------+---------------+------------------------------------------------------+
|rotate              |rotate           |0              |Barcode rotate angle, valid values: 0, 90, 180, 270   |
+--------------------+-----------------+---------------+------------------------------------------------------+
|                    |                 |               |Set the processTilde property to true, if you want use|
|                    |                 |               |the tilde character "~" to specify special characters |
|processTilde        |process-tilde    |false          |in the input data. Default is false.                  |
|                    |                 |               |~NNN: is used to represent the ASCII character with   |
|                    |                 |               |the value of NNN. NNN is from 000 - 255.              |
+--------------------+-----------------+---------------+------------------------------------------------------+
|                    |                 |               |  • QRCode.MODE_AUTO: It allows encoding all 256      |
|                    |                 |               |    possible 8-bit byte values. This includes all     |
|                    |                 |               |    ASCII characters value from 0 to 127 inclusive and|
|                    |                 |               |    provides for international character set support  |
|                    |                 |               |  • QRCode.MODE_ALPHANUMERIC: It allows encoding      |
|                    |                 |               |    alphanumeric data (digits 0 - 9; upper case       |
|dataMode            |data-mode        |0 (MODE_AUTO)  |    letters A -Z; nine other characters: space, $ % * |
|                    |                 |               |    + - . / : ).                                      |
|                    |                 |               |  • QRCode.MODE_BYTE: It allows encoding byte data    |
|                    |                 |               |    (default: ISO/IEC 8859-1).                        |
|                    |                 |               |  • QRCode.MODE_NUMERIC: It allows encoding numeric   |
|                    |                 |               |    data (digits 0 - 9).                              |
|                    |                 |               |  • QRCode.MODE_KANJI: It allows encoding Kanji       |
|                    |                 |               |    characters.                                       |
+--------------------+-----------------+---------------+------------------------------------------------------+
|                    |                 |               |QR-Code Error Correction Level. Values: QRCode.ECL_L  |
|ecl                 |ecl              |0 (ECL_L)      |(0), QRCode.ECL_M (1), QRCode.ECL_Q (2), QRCode.ECL_H |
|                    |                 |               |(3)                                                   |
+--------------------+-----------------+---------------+------------------------------------------------------+
|eci                 |eci              |3              |                                                      |
+--------------------+-----------------+---------------+------------------------------------------------------+
|fnc1Mode            |fnc1-mode        |0 (none)       |                                                      |
+--------------------+-----------------+---------------+------------------------------------------------------+
|applicationIndicator|ai               |0              |                                                      |
+--------------------+-----------------+---------------+------------------------------------------------------+
|isStructuredAppend  |structured-append|false          |If true, then Structured Append is enabled.           |
+--------------------+-----------------+---------------+------------------------------------------------------+
|symbolCount         |symbol-count     |1              |Set the number of total symbols which make the        |
|                    |                 |               |sequence.                                             |
+--------------------+-----------------+---------------+------------------------------------------------------+
|symbolIndex         |symbol-index     |1              |Set the position of current symbol in the secuence    |
|                    |                 |               |(Start with 0).                                       |
+--------------------+-----------------+---------------+------------------------------------------------------+
|parity              |parity           |0              |                                                      |
+--------------------+-----------------+---------------+------------------------------------------------------+
|version             |version          |1              |Set the position of current symbol in the secuence    |
|                    |                 |               |(Start with 0).                                       |
+--------------------+-----------------+---------------+------------------------------------------------------+

   Other Supported Barcode Types
   Java Barcode Generator supports most common linear (1d) and matrix (2d) bar code standards,
   including:
     * 2D Barcodes: Data Matrix, PDF-417 and QR-Code.
     * Alphanumeric Barcodes: Code-39, Code-93, Code-128 and GS1-128/UCC/EAN-128.
     * UPC / EAN Barcodes: EAN-8, EAN-13, ISBN, ISSN, UPC-A and UPC-E.
     * Numeric Barcodes: Codabar, Code-11 and MSI Plessey.
     * Code 2 of 5 based Barcodes: Code 2 of 5, Interleaved 2 of 5 and ITF-14.
     * Postal Barcodes: Identcode, Leitcode, POSTNET, PLANET, USPS Intelligent Mail
       Barcode (OneCode) and RM4SCC.


---
