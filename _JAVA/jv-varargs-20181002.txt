filename: jv_varargs_20181002.txt
https://docs.oracle.com/javase/1.5.0/docs/guide/language/varargs.html

Varargs

   In past releases, a method that took an arbitrary number of values required you to create an array
   and put the values into the array prior to invoking the method. For example, here is how one used the
   [sub2] MessageFormat class to format a message:

Object[] arguments = {
    new Integer(7),
    new Date(),
    "a disturbance in the Force"
};

String result = MessageFormat.format(
    "At {1,time} on {1,date}, there was {2} on planet "
     + "{0,number,integer}.", arguments);

   It is still true that multiple arguments must be passed in an array, but the varargs feature
   automates and hides the process. Furthermore, it is upward compatible with preexisting APIs. So, for
   example, the MessageFormat.format method now has this declaration:
public static String format(String pattern,
                            Object... arguments);

   The three periods after the final parameter's type indicate that the final argument may be passed as
   an array or as a sequence of arguments. Varargs can be used only in the final argument position.
   Given the new varargs declaration for MessageFormat.format, the above invocation may be replaced by
   the following shorter and sweeter invocation:

String result = MessageFormat.format(
    "At {1,time} on {1,date}, there was {2} on planet "
    + "{0,number,integer}.",
    7, new Date(), "a disturbance in the Force");

   There is a strong synergy between [sub1] autoboxing and varargs, which is illustrated in the following
   program using reflection:

// Simple test framework
public class Test {
    public static void main(String[] args) {
        int passed = 0;
        int failed = 0;
        for (String className : args) {
            try {
                Class c = Class.forName(className);
                c.getMethod("test").invoke(c.newInstance());
                passed++;
            } catch (Exception ex) {
                System.out.printf("%s failed: %s%n", className, ex);
                failed++;
            }
        }
        System.out.printf("passed=%d; failed=%d%n", passed, failed);
    }
}

   This little program is a complete, if minimal, test framework. It takes a list of class names on the
   command line. For each class name, it instantiates the class using its parameterless constructor and
   invokes a parameterless method called test. If the instantiation or invocation throws an exception,
   the test is deemed to have failed. The program prints each failure, followed by a summary of the test
   results. The reflective instantiation and invocation no longer require explicit array creation,
   because the getMethod and invoke methods accept a variable argument list. The program also uses the
   new printf facility, which relies on varargs. The program reads much more naturally than it would
   without varargs.

   So when should you use varargs? As a client, you should take advantage of them whenever the API
   offers them. Important uses in core APIs include reflection, message formatting, and the new printf
   facility. As an API designer, you should use them sparingly, only when the benefit is truly
   compelling. Generally speaking, you should not overload a varargs method, or it will be difficult for
   programmers to figure out which overloading gets called.

   
---
[sub1]
https://docs.oracle.com/javase/1.5.0/docs/guide/language/autoboxing.html

Autoboxing

   As any Java programmer knows, you can't put an int (or other primitive value) into a collection.
   Collections can only hold object references, so you have to box primitive values into the appropriate
   wrapper class (which is Integer in the case of int). When you take the object out of the
   collection, you get the Integer that you put in; if you need an int, you must unbox the Integer using
   the intValue method. All of this boxing and unboxing is a pain, and clutters up your code. The
   autoboxing and unboxing feature automates the process, eliminating the pain and the clutter.

   The following example illustrates autoboxing and unboxing, along with generics and the for-each
   loop. In a mere ten lines of code, it computes and prints an alphabetized frequency table of the
   words appearing on the command line.

import java.util.*;

// Prints a frequency table of the words on the command line
public class Frequency {
   public static void main(String[] args) {
      Map<String, Integer> m = new TreeMap<String, Integer>();
      for (String word : args) {
          Integer freq = m.get(word);
          m.put(word, (freq == null ? 1 : freq + 1));
      }
      System.out.println(m);
   }
}

java Frequency if it is to be it is up to me to do the watusi
{be=1, do=1, if=1, is=2, it=2, me=1, the=1, to=3, up=1, watusi=1}

   The program first declares a map from String to Integer, associating the number of times a word
   occurs on the command line with the word. Then it iterates over each word on the command line. For
   each word, it looks up the word in the map. Then it puts a revised entry for the word into the map.
   The line that does this (highlighted in green) contains both autoboxing and unboxing. To compute the
   new value to associate with the word, first it looks at the current value (freq). If it is null, this
   is the first occurrence of the word, so it puts 1 into the map. Otherwise, it adds 1 to the number of
   prior occurrences and puts that value into the map. But of course you cannot put an int into a map,
   nor can you add one to an Integer. What is really happening is this: In order to add 1 to freq, it is
   automatically unboxed, resulting in an expression of type int. Since both of the alternative
   expressions in the conditional expression are of type int, so too is the conditional expression
   itself. In order to put this int value into the map, it is automatically boxed into an Integer.

   The result of all this magic is that you can largely ignore the distinction between int and Integer,
   with a few caveats. An Integer expression can have a null value. If your program tries to autounbox
   null, it will throw a NullPointerException. The == operator performs reference identity comparisons
   on Integer expressions and value equality comparisons on int expressions. Finally, there are
   performance costs associated with boxing and unboxing, even if it is done automatically.

   Here is another sample program featuring autoboxing and unboxing. It is a static factory that takes
   an int array and returns a [5]List of Integer backed by the array. In a mere ten lines of code this
   method provides the full richness of the List interface atop an int array. All changes to the list
   write through to the array and vice-versa. The lines that use autoboxing or unboxing are highlighted
   in green:

// List adapter for primitive int array
public static List<Integer> asList(final int[] a) {
    return new AbstractList<Integer>() {
        public Integer get(int i) { return a[i]; }
        // Throws NullPointerException if val == null
        public Integer set(int i, Integer val) {
            Integer oldVal = a[i];
            a[i] = val;
            return oldVal;
        }
        public int size() { return a.length; }
    };
}

   The performance of the resulting list is likely to be poor, as it boxes or unboxes on every get or
   set operation. It is plenty fast enough for occasional use, but it would be folly to use it in a
   performance critical inner loop.

   So when should you use autoboxing and unboxing? Use them only when there is an "impedance mismatch"
   between reference types and primitives, for example, when you have to put numerical values into a
   collection. It is not appropriate to use autoboxing and unboxing for scientific computing, or other
   performance-sensitive numerical code. An Integer is not a substitute for an int; autoboxing and
   unboxing blur the distinction between primitive types and reference types, but they do not eliminate
   it.


---
[sub2]
https://docs.oracle.com/javase/1.5.0/docs/api/java/text/MessageFormat.html

Class MessageFormat

java.lang.Object
   extended by java.text.Format
       extended by java.text.MessageFormat

   All Implemented Interfaces:
          Serializable, Cloneable
     
public class MessageFormat
   extends Format

   MessageFormat provides a means to produce concatenated messages in language-neutral way. Use this to
   construct messages displayed for end users.

   MessageFormat takes a set of objects, formats them, then inserts the formatted strings into the
   pattern at the appropriate places.

   Note: MessageFormat differs from the other Format classes in that you create a MessageFormat object
   with one of its constructors (not with a getInstance style factory method). The factory methods
   aren't necessary because MessageFormat itself doesn't implement locale specific behavior. Any locale
   specific behavior is defined by the pattern that you provide as well as the subformats used for
   inserted arguments.

    Patterns and Their Interpretation

   MessageFormat uses patterns of the following form:

 MessageFormatPattern:
         String
         MessageFormatPattern FormatElement String

 FormatElement:
         { ArgumentIndex }
         { ArgumentIndex , FormatType }
         { ArgumentIndex , FormatType , FormatStyle }

 FormatType: one of
         number date time choice

 FormatStyle:
         short
         medium
         long
         full
         integer
         currency
         percent
         SubformatPattern

 String:
         StringPart[opt]
         String StringPart

 StringPart:
         ''
         ' QuotedString '
         UnquotedString

 SubformatPattern:
         SubformatPatternPart[opt]
         SubformatPattern SubformatPatternPart

 SubFormatPatternPart:
         ' QuotedPattern '
         UnquotedPattern

   Within a String, "''" represents a single quote. A QuotedString can contain arbitrary characters
   except single quotes; the surrounding single quotes are removed. An UnquotedString can contain
   arbitrary characters except single quotes and left curly brackets. Thus, a string that should result
   in the formatted message "'{0}'" can be written as "'''{'0}''" or "'''{0}'''".

   Within a SubformatPattern, different rules apply. A QuotedPattern can contain arbitrary characters
   except single quotes; but the surrounding single quotes are not removed, so they may be interpreted
   by the subformat. For example, "{1,number,$'#',##}" will produce a number format with the pound-sign
   quoted, with a result such as: "$#31,45". An UnquotedPattern can contain arbitrary characters except
   single quotes, but curly braces within it must be balanced. For example, "ab {0} de" and "ab '}' de"
   are valid subformat patterns, but "ab {0'}' de" and "ab } de" are not.

   Warning:
          The rules for using quotes within message format patterns unfortunately have shown to be
          somewhat confusing. In particular, it isn't always obvious to localizers whether single quotes
          need to be doubled or not. Make sure to inform localizers about the rules, and tell them (for
          example, by using comments in resource bundle source files) which strings will be processed by
          MessageFormat. Note that localizers may need to use single quotes in translated strings where
          the original version doesn't have them.

   The ArgumentIndex value is a non-negative integer written using the digits '0' through '9', and
   represents an index into the arguments array passed to the format methods or the result array
   returned by the parse methods.

   The FormatType and FormatStyle values are used to create a Format instance for the format element.
   The following table shows how the values map to Format instances. Combinations not shown in the table
   are illegal. A SubformatPattern must be a valid pattern string for the Format subclass used.

   Format Type   Format Style                               Subformat Created
   (none)      (none)           null
   number      (none)           NumberFormat.getInstance(getLocale())
               integer          NumberFormat.getIntegerInstance(getLocale())
               currency         NumberFormat.getCurrencyInstance(getLocale())
               percent          NumberFormat.getPercentInstance(getLocale())
               SubformatPattern new DecimalFormat(subformatPattern, new DecimalFormatSymbols(getLocale()))
   date        (none)           DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())
               short            DateFormat.getDateInstance(DateFormat.SHORT, getLocale())
               medium           DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())
               long             DateFormat.getDateInstance(DateFormat.LONG, getLocale())
               full             DateFormat.getDateInstance(DateFormat.FULL, getLocale())
               SubformatPattern new SimpleDateFormat(subformatPattern, getLocale())
   time        (none)           DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())
               short            DateFormat.getTimeInstance(DateFormat.SHORT, getLocale())
               medium           DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())
               long             DateFormat.getTimeInstance(DateFormat.LONG, getLocale())
               full             DateFormat.getTimeInstance(DateFormat.FULL, getLocale())
               SubformatPattern new SimpleDateFormat(subformatPattern, getLocale())
   choice      SubformatPattern new ChoiceFormat(subformatPattern)

Usage Information
   Here are some examples of usage. In real internationalized programs, the message format pattern and
   other static strings will, of course, be obtained from resource bundles. Other parameters will be
   dynamically determined at runtime.

   The first example uses the static method MessageFormat.format, which internally creates a
   MessageFormat for one-time use:

 int planet = 7;
 String event = "a disturbance in the Force";

 String result = MessageFormat.format(
     "At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.",
     planet, new Date(), event);

   The output is:

 At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.

   The following example creates a MessageFormat instance that can be used repeatedly:

 int fileCount = 1273;
 String diskName = "MyDisk";
 Object[] testArgs = {new Long(fileCount), diskName};

 MessageFormat form = new MessageFormat(
     "The disk \"{1}\" contains {0} file(s).");

 System.out.println(form.format(testArgs));

   The output with different values for fileCount:

 The disk "MyDisk" contains 0 file(s).
 The disk "MyDisk" contains 1 file(s).
 The disk "MyDisk" contains 1,273 file(s).

   For more sophisticated patterns, you can use a ChoiceFormat to produce correct forms for singular and
   plural:

 MessageFormat form = new MessageFormat("The disk \"{1}\" contains {0}.");
 double[] filelimits = {0,1,2};
 String[] filepart = {"no files","one file","{0,number} files"};
 ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
 form.setFormatByArgumentIndex(0, fileform);

 int fileCount = 1273;
 String diskName = "MyDisk";
 Object[] testArgs = {new Long(fileCount), diskName};

 System.out.println(form.format(testArgs));

   The output with different values for fileCount:

 The disk "MyDisk" contains no files.
 The disk "MyDisk" contains one file.
 The disk "MyDisk" contains 1,273 files.

   You can create the ChoiceFormat programmatically, as in the above example, or by using a pattern. See
   [23]ChoiceFormat for more information.

 form.applyPattern(
    "There {0,choice,0#are no files|1#is one file|1<are {0,number,integer} files}.");

   Note: As we see above, the string produced by a ChoiceFormat in MessageFormat is treated specially;
   occurences of '{' are used to indicated subformats, and cause recursion. If you create both a
   MessageFormat and ChoiceFormat programmatically (instead of using the string patterns), then be
   careful not to produce a format that recurses on itself, which will cause an infinite loop.

   When a single argument is parsed more than once in the string, the last match will be the final
   result of the parsing. For example,

 MessageFormat mf = new MessageFormat("{0,number,#.##}, {0,number,#.#}");
 Object[] objs = {new Double(3.1415)};
 String result = mf.format( objs );
 // result now equals "3.14, 3.1"
 objs = null;
 objs = mf.parse(result, new ParsePosition(0));
 // objs now equals {new Double(3.1)}

   Likewise, parsing with a MessageFormat object using patterns containing multiple occurences of the
   same argument would return the last match. For example,

 MessageFormat mf = new MessageFormat("{0}, {0}, {0}");
 String forParsing = "x, y, z";
 Object[] objs = mf.parse(forParsing, new ParsePosition(0));
 // result now equals {new String("z")}

Synchronization
   Message formats are not synchronized. It is recommended to create separate format instances for each
   thread. If multiple threads access a format concurrently, it must be synchronized externally.

---
[sub1]
https://docs.oracle.com/javase/1.5.0/docs/guide/language/autoboxing.html

Autoboxing

   As any Java programmer knows, you can't put an int (or other primitive value) into a collection.
   Collections can only hold object references, so you have to box primitive values into the appropriate
   wrapper class (which is Integer in the case of int). When you take the object out of the
   collection, you get the Integer that you put in; if you need an int, you must unbox the Integer using
   the intValue method. All of this boxing and unboxing is a pain, and clutters up your code. The
   autoboxing and unboxing feature automates the process, eliminating the pain and the clutter.

   The following example illustrates autoboxing and unboxing, along with generics and the for-each
   loop. In a mere ten lines of code, it computes and prints an alphabetized frequency table of the
   words appearing on the command line.

import java.util.*;

// Prints a frequency table of the words on the command line
public class Frequency {
   public static void main(String[] args) {
      Map<String, Integer> m = new TreeMap<String, Integer>();
      for (String word : args) {
          Integer freq = m.get(word);
          m.put(word, (freq == null ? 1 : freq + 1));
      }
      System.out.println(m);
   }
}

java Frequency if it is to be it is up to me to do the watusi
{be=1, do=1, if=1, is=2, it=2, me=1, the=1, to=3, up=1, watusi=1}

   The program first declares a map from String to Integer, associating the number of times a word
   occurs on the command line with the word. Then it iterates over each word on the command line. For
   each word, it looks up the word in the map. Then it puts a revised entry for the word into the map.
   The line that does this (highlighted in green) contains both autoboxing and unboxing. To compute the
   new value to associate with the word, first it looks at the current value (freq). If it is null, this
   is the first occurrence of the word, so it puts 1 into the map. Otherwise, it adds 1 to the number of
   prior occurrences and puts that value into the map. But of course you cannot put an int into a map,
   nor can you add one to an Integer. What is really happening is this: In order to add 1 to freq, it is
   automatically unboxed, resulting in an expression of type int. Since both of the alternative
   expressions in the conditional expression are of type int, so too is the conditional expression
   itself. In order to put this int value into the map, it is automatically boxed into an Integer.

   The result of all this magic is that you can largely ignore the distinction between int and Integer,
   with a few caveats. An Integer expression can have a null value. If your program tries to autounbox
   null, it will throw a NullPointerException. The == operator performs reference identity comparisons
   on Integer expressions and value equality comparisons on int expressions. Finally, there are
   performance costs associated with boxing and unboxing, even if it is done automatically.

   Here is another sample program featuring autoboxing and unboxing. It is a static factory that takes
   an int array and returns a [5]List of Integer backed by the array. In a mere ten lines of code this
   method provides the full richness of the List interface atop an int array. All changes to the list
   write through to the array and vice-versa. The lines that use autoboxing or unboxing are highlighted
   in green:

// List adapter for primitive int array
public static List<Integer> asList(final int[] a) {
    return new AbstractList<Integer>() {
        public Integer get(int i) { return a[i]; }
        // Throws NullPointerException if val == null
        public Integer set(int i, Integer val) {
            Integer oldVal = a[i];
            a[i] = val;
            return oldVal;
        }
        public int size() { return a.length; }
    };
}

   The performance of the resulting list is likely to be poor, as it boxes or unboxes on every get or
   set operation. It is plenty fast enough for occasional use, but it would be folly to use it in a
   performance critical inner loop.

   So when should you use autoboxing and unboxing? Use them only when there is an "impedance mismatch"
   between reference types and primitives, for example, when you have to put numerical values into a
   collection. It is not appropriate to use autoboxing and unboxing for scientific computing, or other
   performance-sensitive numerical code. An Integer is not a substitute for an int; autoboxing and
   unboxing blur the distinction between primitive types and reference types, but they do not eliminate
   it.

---
