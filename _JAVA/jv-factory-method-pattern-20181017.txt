filename: jv_factory-method-pattern_20181017.txt
https://sanaulla.info/2013/05/27/factory-method-pattern-in-java/

Factory Method pattern in Java
May 27, 2013

   In my previous post about the [**1]Template Method pattern, I showed how one can leverage lambda
   expression and default methods. In this post I will explore about factory method pattern and see
   how one can leverage method references, another feature added in Java 8 alongside lambda
   expressions.

	 Lets consider a Vehicle interface and 2 of its implementations namely Car and Bus.
interface Vehicle{
	public void drive();
	public void clean();
}

class Car implements Vehicle{
	@Override
	public void drive(){
		System.out.println("Driving a car...");
	}

	@Override
	public void clean(){
		System.out.println("Cleaning a car...");
	}
}

class Bus implements Vehicle{
	@Override
	public void drive(){
		System.out.println("Driving a Bus...");
	}

	@Override
	public void clean(){
		System.out.println("Cleaning a Bus...");
	}
}

   And to drive() and clean() the Vehicle we would use a VehicleDriver.

Implementation in Java 7 and before

   Lets consider the implementation and of VehicleDriver from a Pre Java 8 point of view i.e Java 7 and
   before.
abstract class VehicleDriver{
	public abstract Vehicle getVehicle();
	public void driveVehicle(){
		getVehicle().drive();
	}

	public void cleanVehicle(){
		getVehicle().clean();
	}
}

class CarDriver extends VehicleDriver{
	@Override
	public Vehicle getVehicle(){
		return new Car();
	}
}

class BusDriver extends VehicleDriver{
	@Override
	public Vehicle getVehicle(){
		return new Bus();
	}
}

   In the above VehicleDriver implementation the getVehicle() method is the factory method which is
   overridden by the CarDriver and Busdriver to return Car and Bus instances respectively. In this way
   the programmer would be more concerned about using the VehicleDriver abstraction and need not be
   concerned about its different implementations. There's another related pattern: Factory Pattern which
   is slightly different from this pattern and readers should not confuse this with that pattern. Ok,
   lets quickly look at how this can be used before proceeding to its Java 8 variant:
public class FactoryMethodPattern {
	public static void main(String[] args) {

		handleVehicle(new CarDriver());
		handleVehicle(new BusDriver());
	}
  
	static void handleVehicle(VehicleDriver vDriver) {
		System.out.println("Handling a new vehicle. Pre lambda way");
		vDriver.driveVehicle();
		vDriver.cleanVehicle();
	}
}

   The output would be:
Handling a new vehicle. Pre lambda way
Driving a car...
Cleaning a car...
Handling a new vehicle. Pre lambda way
Driving a Bus...
Cleaning a Bus...

Leveraging Java 8
   Firstly we dont need an abstract VehicleDriver and its 2 different implementation. Instead we make
   use of Interfaces with Default methods to create the VehicleDriver abstraction as shown below:
interface VehicleDriver{
	public Vehicle getVehicle();
	public default void driveVehicle(){
		getVehicle().drive();
	}

	public default void cleanVehicle(){
		getVehicle().clean();
	}
}

   Now lets come to the interesting part- Using Method references instead of creating different
   implementation of the VehicleDriver. These method references provide a way for the code to get the
   required instance of Car or Bus class without going into the hassles of overriding the getVehicle()
   method. Confused? Curious? Lets look at how we can achieve that:
public class FactoryMethodPatternLambda {
  public static void main(String[] args) {

	handleVehicle(Car::new);
	handleVehicle(Bus::new);
	}

	static void handleVehicle(VehicleDriver vDriver) {
		System.out.println("Handling a new vehicle...");
		vDriver.driveVehicle();
		vDriver.cleanVehicle();
	}
}

   And the output for this would be:
Handling a new vehicle...
Driving a car...
Cleaning a car...
Handling a new vehicle...
Driving a Bus...
Cleaning a Bus...

   We just provided the handleVehicle method a Vehicle to handle and didn't worry about how its being
   handled or who's handling it. But in the Java 7 and before implementation we had to be aware that
   there is some VehicleDriver abstract class and then we had to override its some method and then
   create instance of that extended class. My main intention by showing this example is that one can
   leverage Java 8 features to create cleaner and easy to use APIs. But with all new features comes the
   learning curve.

   Note: In both the above implementations the common part is the Vehicle, Car, Bus classes which are
   used by both Java 7 and Java 8 implementations.


---
[**1]
https://sanaulla.info/2013/04/24/template-method-pattern-using-lambda-expressions-default-me

Template Method Pattern- Using Lambda Expressions, Default Methods
April 24, 2013

   Template Method pattern is one of the 23 design patterns explained in the famous Design
   Patterns book by Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides. The intent of this
   pattern is stated as:

	 Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.
	 TemplateMethod lets subclasses redefine certain steps of an algorithm without changing the
	 algorithm's structure.

   To explain in simple terms, consider the following scenario: Assume there is a workflow system in
   which 4 tasks have to be performed in the given order so as to successfully complete the workflow.
   Some of the tasks out of the 4 tasks can be customised by different workflow system implementation.

   Template Method pattern can be applied to above scenario by encapsulating the workflow system into an
   abstract class with few of the tasks out of the 4 tasks implemented. And leave the implementation of
   remaining tasks to the subclasses of the abstract class.

   So the above when implemented:
/**
 * Abstract Workflow system
 */
abstract class WorkflowManager2 {
	public void doTask1() {
		System.out.println("Doing Task1...");
	}

	public abstract void doTask2();
	
	public abstract void doTask3();
	
	public void doTask4() {
		System.out.println("Doing Task4...");
	}
}

/**
 * One of the extensions of the abstract workflow system
 */
class WorkflowManager2Impl1 extends WorkflowManager2 {
	@Override
	public void doTask2() {
		System.out.println("Doing Task2.1...");
	}
	
	@Override
	public void doTask3() {
		System.out.println("Doing Task3.1...");
	}
}

/**
 * Other extension of the abstract workflow system
 */
class WorkflowManager2Impl2 extends WorkflowManager2{
	@Override
	public void doTask2() {
		System.out.println("Doing Task2.2...");
	}
	
	@Override
	public void doTask3() {
		System.out.println("Doing Task3.2...");
	}
}

   Let me just go ahead and show how these workflow implementations are used:
public class TemplateMethodPattern {
	public static void main(String[] args) {
		initiateWorkFlow(new WorkflowManager2Impl1());
		initiateWorkFlow(new WorkflowManager2Impl2());
	}

	static void initiateWorkFlow(WorkflowManager2 workflowMgr) {
	System.out.println("Starting the workflow ... the old way");
		workflowMgr.doTask1();
		workflowMgr.doTask2();
		workflowMgr.doTask3();
		workflowMgr.doTask4();
	}
}

   and the output would be..
Starting the workflow ... the old way
Doing Task1...
Doing Task2.1...
Doing Task3.1...
Doing Task4...
Starting the workflow ... the old way
Doing Task1...
Doing Task2.2...
Doing Task3.2...
Doing Task4...

   So far so good. But the main intent of this post is not to create yet another blog post on Template
   Method pattern, but to see how we can leverage Java 8 Lambda Expression and Default Methods.
   I have already written before, that only interfaces which have Single Abstract Methods can be written
   as lambda expressions. What this translates to in this example is that, the WorkflowManager2 can only
   have one abstract/customizable task out of the 4 tasks.

   So restricting to one abstract method is a major restriction and may not be applicable in many
   realtime scenarios. I dont wish to reiterate the same old Template Method pattern examples, instead
   my main intention of writing this is to show how lambda expressions and default methods can
   be leveraged in scenarios where you are dealing with abstract classes with single abstract methods.

   If you are left wondering what these lambda expressions in java mean and also these default methods
   in java, then please spend some time to read about lambda expressions and default methods
   before proceeding further.

   Instead of an abstract class we would use an interface with default methods, so our workflow system
   would look like:
interface WorkflowManager{
	public default void doTask1() {
		System.out.println("Doing Task1...");
	}
	
	public void doTask2();
	
	public default void doTask3() {
		System.out.println("Doing Task3...");
	}
	
	public default void doTask4() {
		System.out.println("Doing Task4...");
	}
}

   Now that we have the workflow system with customisable Task2, we will go ahead and initiate some
   customised workflows using Lambda expressions...
public class TemplateMethodPatternLambda {
	public static void main(String[] args) {
		/**
		* Using lambda expression to create different
		* implementation of the abstract workflow
		*/
		initiateWorkFlow(()->System.out.println("Doing Task2.1..."));
		initiateWorkFlow(()->System.out.println("Doing Task2.2..."));
		initiateWorkFlow(()->System.out.println("Doing Task2.3..."));
	}

	static void initiateWorkFlow(WorkflowManager workflowMgr) {
		System.out.println("Starting the workflow ...");
		workflowMgr.doTask1();
		workflowMgr.doTask2();
		workflowMgr.doTask3();
		workflowMgr.doTask4();
	}
}

   This is in a small way lambda expressions can be leveraged in the Template Method Pattern


---
