filename: jv_creating-utility-class-multyf_20190412.txt
https://bukkit.org/threads/tutorial-creating-a-utility-class.299472/

Creating a Utility class
Aug 4, 2014.

     A utility class is an efficient way of allowing you to create methods that you often
     re-use in your code. If you find yourself using the same code over and over, and it
     doesn't depend on an instance variable, you can put that code in a method within a
     Utility class and call the method from there.
     A basic example of a Utility class:

 1. import java.util.Arrays;
 2.
 3. import org.bukkit.Location;
 4.
 5. public final class Utils {
 6.     public final static String MC_VERSION = \
        Bukkit.getServer().getClass().getPackage().getName().replace(".", ",").split(",")[3];
 7.
 8.     private Utils() { } //Prevent the class from being constructed
 9.
10.     /**
11.       * Remove the first element from an array
12.       * @param args The array
13.       * @return The trimmed array, without it's original first element
14.       */
15.     public static <T> T[] trim(T[] args) {
16.         return Arrays.copyOfRange(args, 1, args.length);
17.     }
18.
19.     /**
20.       * Retrieve a location as a custom String
21.       * @param location The location
22.       * @return The custom String representing the location
23.       */
24.     public static String getLocationationAsString(Location location) {
25.         return "world: " + location.getWorld().getName() + ", x: " + location.getBlockX() + \
            ", y: "+location.getBlockY()+", z: " + location.getBlockZ();
26.     }
27. }

       Some things to note about Utility classes:
          + A Utility class should be final, indicating that it cannot be extended.
          + A Utility class should contain a private constructor, indicating that it cannot be
            constructed.
          + A Utility class should only contain final static fields. These fields are
            effectively constants.
          + A Utility class should only contain static methods. Why? Other than obvious
            reasons such as not being required to create an instance of the Utility class, a
            static method causes less overhead because of the fact that it is executed at
            compile-time.
       "Why should it only contain static fields? I've heard using statics is bad!"
       Public static fields represent a global state. This means that anything can modify them
       due to them having a global scope. Consider this example:
       Code:java

         1. public class PlayerInfo {
         2.     public static Player somePlayer;
         3.     public static String someData;
         4.
         5.     public PlayerInfo(Player player, String data) {
         6.         somePlayer = player;
         7.         someData = data;
         8.     }
         9. }

       Since somePlayer and someData are both static, they belong to the class and not any one
       instance of the class. Every time you instantiate a new PlayerInfo object, you're
       overriding the data stored in somePlayer and someData, because they're static. It's
       considered bad practice.
       This is different for Utility classes however; we've already established that a Utility
       class cannot be instantiated. Because it's final, it cannot be extended, and all fields
       inside it are static and final, AKA constant, and cannot be changed elsewhere.

***
     A Utility class should only contain static variables. With the class being final, these
     variables are effectively constants.

***
     How does that work? Are you implying that static fields of final class can't be changed?

***
     Whoops, I knew I missed something. Fixing :D

***
     Hi, I just saw this tutoriel and it was exactly what i was looking for but a still got a
     question: How can we access to a Util method from our main class?
     If i got in my Util.class:

         1. public final class Util {
         2.     private Util() { } //Prevent the class from being constructed
         3.
         4.     public static boolean TrackError(int i) {
         5.         boolean bol=(i==0) ? true:false;
         6.         return bol;
         7.     }
         8. }

       How can i access it in my code? I tried to import it but it doesn't seems to work if i
       don't call it like

         1. if(Util.TrackError(x)){
         2.     //Do something interessant
         3. }
       But it just mean nothing, i could do a simple class if i wanted that... i want to call
       it without object, like
       Code:java

         1. if(TrackError(x)){
         2.     //Do something interessant
         3. }
       I know it's a basic question but i'm a beginner :/
       Thank you for this tutoriel


---
https://stackoverflow.com/questions/25223553/how-can-i-create-an-utility-class

How can I create an utility class? [duplicate]

   I want to create a class with utility methods, for example:

public class Util {

   public static void f (int i) {...}
   public static int g (int i, int j) {...}

}

   Which is the best method to create an utility class?
   Should I use a private constructor?
   Should I make the utility class for abstract class?

***
   This question has been asked before and already has an answer. If those answers do not
   fully address your question, please ask a new question.
       when programming there is generally no best way of doing anything

     * The cleanest way to create a Utility class
       projectlombok.org/features/experimental/UtilityClass â€“ [***1]

***
   For a completely stateless utility class in Java, I suggest the class be declared public
   and final, and have a private constructor to prevent instantiation. The final keyword
   prevents sub-classing and can improve efficiency at runtime.

   The class should contain all static methods and should not be declared abstract (as that
   would imply the class is not concrete and has to be implemented in some way).

   The class should be given a name that corresponds to its set of provided utilities (or
   "Util" if the class is to provide a wide range of uncategorized utilities).

   The class should not contain a nested class unless the nested class is to be a utility
   class as well (though this practice is potentially complex and hurts readability).

   Methods in the class should have appropriate names.

   Methods only used by the class itself should be private.

   The class should not have any non-final/non-static class fields.

   The class can also be statically imported by other classes to improve code readability
   (this depends on the complexity of the project however).

   Example:
public final class ExampleUtilities {
    // Example Utility method
    public static int foo(int i, int j) {
        int val;
        //Do stuff
        return val;
    }

    // Example Utility method overloaded
    public static float foo(float i, float j) {
        float val;
        //Do stuff
        return val;
    }

    // Example Utility method calling private method
    public static long bar(int p) {
        return hid(p) * hid(p);
    }

    // Example private method
    private static long hid(int i) {
        return i * 2 + 1;
    }
}

   Perhaps most importantly of all, the documentation for each method should be precise and
   descriptive. Chances are methods from this class will be used very often and its good to
   have high quality documentation to complement the code.

       I would stress that quality documentation means complete JavaDoc comments, not code
       comments.

   According to Joshua Bloch (Effective Java), you should use private constructor which always
   throws exception. That will finally discourage user to create instance of util class.

   Marking class abstract is not recommended because is abstract suggests reader that class is
   designed for inheritance.

***
   I would make the class final and every method would be static.

   So the class cannot be extended and the methods can be called by Classname.methodName. If
   you add members, be sure that they work thread safe ;)

***
   Making a class abstract sends a message to the readers of your code that you want users of
   your abstract class to subclass it. However, this is not what you want then to do: a
   utility class should not be subclassed.

   Therefore, adding a private constructor is a better choice here. You should also make the
   class final to disallow subclassing of your utility class.


---
