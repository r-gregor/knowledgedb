filename: jv_user-inputs-in-Java-seem-unnecessarily-hard_20180822.txt
https://www.quora.com/Why-do-user-inputs-in-Java-seem-unnecessarily-hard

Why do user inputs in Java seem unnecessarily hard?

***
   Because you have not wrapped them up into your own specific UserInput class:
UserInput userInput = new UserInput();

display( "What is your name?" );
String name = userInput.get();

display ("Pleased to meet you, " + name );

   Not too bad, is it?

   Ninety percent of the “Java Is Verbose” claims are down to a coding style which just writes a line of
   code, then the next line, then the next line. Code is organised by ‘what happens next in time order’
   rather than any of the better approaches available - like organising into objects.

   To avoid spaghetti verbose code, separate responsibilities into their own units. You typically use
   interface and class to split out a unit.

   Here’s how I approached the example above. I had a think about ‘What does the calling code need for a
   simple app that asks the user for their name?’ Notice: I started with the calling code needs - and
   not whatever spaghetti Java libraries throw at me.

   I decided it needed a way to return the latest String typed by the user on a keyboard. A good name
   for that method would be ‘get’. It needs to return a String.

   Nothing else is needed. So nothing else appears on the public interface of the UserInput class.

   Internally, you would have the regular Java Scanner code. But as it appears here with nothing else,
   it is much more obvious what it does.

   Significantly, it does not pollute the rest of the code.

   This is an example of encapsulation and your question is why encapsulation is important. Divide and
   conquer. Hide unimportant - yet essential - details. Layer up an application building on bigger and
   bigger pieces.

   What’s even better is you can do this in any language. It’s not a Java specific trick. It is a
   software design technique.

   For a further bonus, you can easily arrange for our UserInput object to be swapped out for a
   different input source, without changing the main program. This is hugely important for automated
   testing, where you simply cannot have a user typing.

   For more on that, I wrote about it here:
 
   Creating Clean Code with Hexagonal Architecture | View from the Code Face
   https://www.viewfromthecodeface.com/portfolio/clean-code-hexagonal-architecture/

****
   You mean something like this:

   How can I get the user input in Java?
Scanner reader = new Scanner(System.in);  // Reading from System.in
System.out.println("Enter a number: ");
int n = reader.nextInt(); // Scans the next token of the input as an int.
//once finished
reader.close();

   It’s not so bad really, maybe a bit wordy, but a lot of that is due to Java’s liking of abstractions.

   For example, you don’t read directly from input, you wrap it up in a Scanner first, that seems
   unnecessarily convoluted, but really it’s because Java wants you to see things in an abstracted way.

   Java doesn’t want you to think about reading from user input, Java wants you to think about reading
   from anything.

   The idea is that later on you can decide not to read from user input at all, but to read from a
   network service, and you can set up a Scanner to do that too.

   When you’re first getting started, it seems like a lot of work for not a lot of point, but later on,
   it makes sense to consider the idea of reading from input, and what you do with that data to be quite
   separate things.

***   
   Outside of the academic world of Java programming, I haven’t had a need to read input from a user in
   a Java Enterprise Application since I have been programming professionally, which is now quite some
   time.

   In a real world environment, your Java application is going to read input from a properties file,
   configuration file, or from environmental variables that are set in a shell script.

   While I somewhat agree the workings of the Scanner class to capture user input may be a bit clunky,
   but honestly it’s not used much in real world programming.

****   
   Because fetching user input on the command line isn’t what professional Java programmers worry about.

   You do that for your first 5 or 10 programs, and then you forget about it.

   Sorry, that isn’t helpful but simply how things are.
