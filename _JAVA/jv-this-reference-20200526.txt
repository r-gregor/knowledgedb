filename: jv_this-reference_20200526.txt
https://www.geeksforgeeks.org/this-reference-in-java/

'this' reference in Java

   'this' is a reference variable that refers to the current object.
   Following are the ways to use 'this' keyword in java :

   1. Using 'this' keyword to refer current class instance variables

//Java code for using 'this' keyword to
//refer current class instance variables
class Test
{
    int a;
    int b;

    // Parameterized constructor
    Test(int a, int b) {
        this.a = a;
        this.b = b;
    }

    void display() {
        //Displaying value of variables a and b
        System.out.println("a = " + a + "  b = " + b);
    }

    public static void main(String[] args) {
        Test object = new Test(10, 20);
        object.display();
    }
}

   Output:
a = 10  b = 20


   2. Using this() to invoke current class constructor

// Java code for using this() to
// invoke current class constructor
class Test
{
    int a;
    int b;

    //Default constructor
    Test() {
        this(10, 20);
        System.out.println("Inside  default constructor \n");
    }

    //Parameterized constructor
    Test(int a, int b) {
        this.a = a;
        this.b = b;
        System.out.println("Inside parameterized constructor");
    }

    public static void main(String[] args) {
        Test object = new Test();
    }
}

   Output:
Inside parameterized constructor
Inside  default constructor


   3. Using 'this' keyword to return the current class instance

//Java code for using 'this' keyword
//to return the current class instance
class Test
{
    int a;
    int b;

    //Default constructor
    Test() {
        a = 10;
        b = 20;
    }

    //Method that returns current class instance
    Test get() {
        return this;
    }

    //Displaying value of variables a and b
    void display() {
        System.out.println("a = " + a + "  b = " + b);
    }

    public static void main(String[] args) {
        Test object = new Test();
        object.get().display();
    }
}


   Output:
a = 10  b = 20


   4. Using 'this' keyword as method parameter

// Java code for using 'this'
// keyword as method parameter
class Test
{
    int a;
    int b;

    // Default constructor
    Test() {
        a = 10;
        b = 20;
    }

    // Method that receives 'this' keyword as parameter
    void display(Test obj) {
        System.out.println("a = " + a + "  b = " + b);
    }

    // Method that returns current class instance
    void get() {
        display(this);
    }

    public static void main(String[] args) {
        Test object = new Test();
        object.get();
    }
}

   Output:
a = 10  b = 20


   5. Using 'this' keyword to invoke current class method

// Java code for using this to invoke current
// class method
class Test {

    void display() {
        // calling function show()
        this.show();

        System.out.println("Inside display function");
    }

    void show() {
        System.out.println("Inside show funcion");
    }


    public static void main(String args[]) {
        Test t1 = new Test();
        t1.display();
    }
}

   Output :
Inside show funcion
Inside display function


   6. Using 'this' keyword as an argument in the constructor call

// Java code for using this as an argument in constructor
// call
// Class with object of Class B as its data member
class A
{
    B obj;

    // Parameterized constructor with object of B
    // as a parameter
    A(B obj) {
        this.obj = obj;

     // calling display method of class B
        obj.display();
    }

}

class B
{
    int x = 5;

    // Default Contructor that create a object of A
    // with passing this as an argument in the
   // constructor
    B() {
        A obj = new A(this);
    }

    // method to show value of x
    void display() {
        System.out.println("Value of x in Class B : " + x);
    }

    public static void main(String[] args) {
        B obj = new B();
    }
}

   Output :
Value of x in Class B : 5



---
[**2]
https://www.geeksforgeeks.org/constructors-in-java/

Constructors in Java

   Constructors are used to initialize the object's state. Like methods, a constructor also
   contains collection of statements(i.e. instructions) that are executed at time of Object creation.

   Need of Constructor
   Think of a Box. If we talk about a box class then it will have some class variables (say length,
   breadth, and height). But when it comes to creating its object(i.e Box will now exist in computer's
   memory), then can a box be there with no value defined for its dimensions. The answer is no.
   So constructors are used to assign values to the class variables at the time of object creation,
   either explicitly done by the programmer or by Java itself (default constructor).

   When is a Constructor called ?
   Each time an object is created using new() keyword at least one constructor (it could be default
   constructor) is invoked to assign initial values to the data members of the same class.

   A constructor is invoked at the time of object or instance creation. For Example:
class Geek {
  .......

  // A Constructor
  new Geek() {}

  .......
}

// We can create an object of the above class
// using the below statement. This statement
// calls above constructor.
Geek obj = new Geek();

   Rules for writing Constructor:
     * Constructor(s) of a class must has same name as the class name in which it resides.
     * A constructor in Java can not be abstract, final, static and Synchronized.
     * Access modifiers can be used in constructor declaration to control its access i.e which other
       class can call the constructor.

                                           Types of constructor

   There are two type of constructor in Java:
    1. No-argument constructor: A constructor that has no parameter is known as default constructor. If
       we don't define a constructor in a class, then compiler creates default constructor(with no
       arguments) for the class. And if we write a constructor with arguments or no-arguments then the
       compiler does not create a default constructor.
       Default constructor provides the default values to the object like 0, null, etc. depending on the
       type.

// Java Program to illustrate calling a
// no-argument constructor

import java.io.*;

class Geek {

    int num;
    String name;

    // this would be invoked while an object
    // of that class is created.
    Geek() {
        System.out.println("Constructor called");
    }
}


class GFG {

    public static void main (String[] args) {

        // this would invoke default constructor.
        Geek geek1 = new Geek();

        // Default constructor provides the default
        // values to the object like 0, null
        System.out.println(geek1.name);

        System.out.println(geek1.num);
    }
}

       Output :
Constructor called
null
0

    2. Parameterized Constructor: A constructor that has parameters is known as parameterized
       constructor. If we want to initialize fields of the class with your own values, then use a
       parameterized constructor.

// Java Program to illustrate calling of
// parameterized constructor.

import java.io.*;


class Geek {

    // data members of the class.
    String name;
    int id;

    // constructor would initialize data members
    // with the values of passed arguments while
    // object of that class created.
    Geek(String name, int id) {
        this.name = name;
        this.id = id;
    }
}


class GFG {

    public static void main (String[] args) {

        // this would invoke the parameterized constructor.
        Geek geek1 = new Geek("adam", 1);
        System.out.println("GeekName :" + geek1.name +
                           " and GeekId :" + geek1.id);
    }
}

       Output:
GeekName :adam and GeekId :1

                                    Does constructor return any value?

   There are no "return value" statements in constructor, but constructor returns current class
   instance. We can write 'return' inside a constructor.

                                          Constructor Overloading

   Like methods, we can overload constructors for creating objects in different ways. Compiler
   differentiates constructors on the basis of numbers of parameters, types of the parameters and order
   of the parameters.

// Java Program to illustrate constructor overloading
// using same task (addition operation ) for different
// types of arguments.
import java.io.*;

class Geek {
    // constructor with one argument
    Geek(String name) {
        System.out.println("Constructor with one " +
                      "argument - String : " + name);
    }

    // constructor with two arguments
    Geek(String name, int age) {

        System.out.println("Constructor with two arguments : " +
                " String and Integer : " + name + " "+ age);

    }

    // Constructor with one argument but with different
    // type than previous..
    Geek(long id) {
        System.out.println("Constructor with one argument : " +
                                            "Long : " + id);
    }
}

class GFG {
    public static void main(String[] args) {
        // Creating the objects of the class named 'Geek'
        // by passing different arguments

        // Invoke the constructor with one argument of
        // type 'String'.
        Geek geek2 = new Geek("Shikhar");

        // Invoke the constructor with two arguments
        Geek geek3 = new Geek("Dharmesh", 26);

        // Invoke the constructor with one argument of
        // type 'Long'.
        Geek geek4 = new Geek(325614567);
    }
}

   Output:
Constructor with one argument - String : Shikhar
Constructor with two arguments - String and Integer : Dharmesh 26
Constructor with one argument - Long : 325614567

   How constructors are different from methods in Java?
     * Constructor(s) must have the same name as the class within which it defined while it is not
       necessary for the method in java.
     * Constructor(s) do not return any type while method(s) have the return type or void if does not
       return any value.
     * Constructor is called only once at the time of Object creation while method(s) can be called any
       numbers of time.

   Related Articles:
     * [**3]Constructor Chaining


---
[**3]
https://www.geeksforgeeks.org/constructor-chaining-java-examples/

Constructor Chaining In Java with Examples

   Constructor chaining is the process of calling one constructor from another constructor with respect
   to current object.
   Constructor chaining can be done in two ways:
     * Within same class: It can be done using this() keyword for constructors in same class
     * From base class: by using super() keyword to call constructor from the base class.

   Constructor chaining occurs through inheritance. A sub class constructor’s task is to call super
   class’s constructor first. This ensures that creation of sub class’s object starts with the
   initialization of the data members of the super class. There could be any numbers of classes in
   inheritance chain. Every constructor calls up the chain till class at the top is reached.

   Why do we need constructor chaining ?
   This process is used when we want to perform multiple tasks in a single constructor rather than
   creating a code for each task in a single constructor we create a separate constructor for each task
   and make their chain which makes the program more readable.

                       Constructor Chaining within same class using this() keyword :

Constructor Chaining In Java

// Java program to illustrate Constructor Chaining
// within same class Using this() keyword
class Temp {
    // default constructor 1
    // default constructor will call another constructor
    // using this keyword from same class
    Temp() {
        // calls constructor 2
        this(5);
        System.out.println("The Default constructor");
    }

    // parameterized constructor 2
    Temp(int x) {
        // calls constructor 3
        this(5, 15);
        System.out.println(x);
    }

    // parameterized constructor 3
    Temp(int x, int y) {
        System.out.println(x * y);
    }

    public static void main(String args[]) {
        // invokes default constructor first
        new Temp();
    }
}

   Output:
75
5
The Default constructor


   Rules of constructor chaining :
    1. The this() expression should always be the first line of the constructor.
    2. There should be at-least be one constructor without the this() keyword (constructor 3 in above
       example).
    3. Constructor chaining can be achieved in any order.

                           What happens if we change the order of constructors?

   Nothing, Constructor chaining can be achieved in any order

// Java program to illustrate Constructor Chaining
// within same class Using this() keyword
// and changing order of constructors
class Temp {
    // default constructor 1
    Temp() {
        System.out.println("default");
    }

    // parameterized constructor 2
    Temp(int x) {
        // invokes default constructor
        this();
        System.out.println(x);
    }

    // parameterized constructor 3
    Temp(int x, int y) {
        // invokes parameterized constructor 2
        this(5);
        System.out.println(x * y);
    }

    public static void main(String args[]) {
        // invokes parameterized constructor 3
        new Temp(8, 10);
    }
}

   Output:
default
5
80


   NOTE: In example 1, default constructor is invoked at the end, but in example 2 default constructor
   is invoked at first. Hence, order in constructor chaining is not important.

                        Constructor Chaining to other class using super() keyword :

// Java program to illustrate Constructor Chaining to
// other class using super() keyword
class Base {
    String name;

    // constructor 1
    Base() {
        this("");
        System.out.println("No-argument constructor of" +
                                           " base class");
    }

    // constructor 2
    Base(String name) {
        this.name = name;
        System.out.println("Calling parameterized constructor"
                                              + " of base");
    }
}

class Derived extends Base {
    // constructor 3
    Derived() {
        System.out.println("No-argument constructor " +
                           "of derived");
    }

    // parameterized constructor 4
    Derived(String name) {
        // invokes base class constructor 2
        super(name);
        System.out.println("Calling parameterized " +
                           "constructor of derived");
    }

    public static void main(String args[]) {
        // calls parameterized constructor 4
        Derived obj = new Derived("test");

        // Calls No-argument constructor
        // Derived obj = new Derived();
    }
}

   Output:
Calling parameterized constructor of base
Calling parameterized constructor of derived


   Note: Similar to constructor chaining in same class, super() should be the first line of the
   constructor as super class’s constructor are invoked before the sub class’s constructor.

   Alternative method : using Init block :
   When we want certain common resources to be executed with every constructor we can put the code in
   the init block. Init block is always executed before any constructor, whenever a constructor is
   used for creating a new object.

   Example 1:

class Temp {
    // block to be executed before any constructor.
    {
        System.out.println("init block");
    }

    // no-arg constructor
    Temp() {
        System.out.println("default");
    }

    // constructor with one arguemnt.
    Temp(int x) {
        System.out.println(x);
    }

    public static void main(String[] args) {
        // Object creation by calling no-argument
        // constructor.
        new Temp();

        // Object creation by calling parameterized
        // constructor with one parameter.
        new Temp(10);
    }
}

   Output:
init block
default
init block
10

   NOTE: If there are more than one blocks, they are executed in the order in which they are defined
   within the same class. See the ex.
   Example :

class Temp {
    // block to be excuted first
    {
        System.out.println("init");
    }
    
    Temp() {
        System.out.println("default");
    }
    
    Temp(int x) {
        System.out.println(x);
    }

    // block to be executed after the first block
    // which has been defined above.
    {
        System.out.println("second");
    }
    
    public static void main(String args[]) {
        new Temp();
        new Temp(10);
    }
}

   Output :
init
second
default
init
second
10


---
