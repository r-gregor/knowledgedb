filename: jv_implementing-factory-design-pattern_20220515.txt
https://howtodoinjava.com/design-patterns/creational/implementing-factory-design-pattern-in-java/

Java Factory Pattern Explained
January 25, 2022

   What is the most usual method of creating an instance of a class in java? Most people will answer
   this question: "using new keyword". Well, it is considered old-fashioned now. Let's see how??

   If object creation code is spread in the whole application, and if you need to change the process of
   object creation then you need to go in each and every place to make necessary changes. After
   finishing this article, while writing your application, consider using the Java factory pattern.

   In my previous post, "Singleton design pattern in java", we discussed various ways to create an
   instance of a class such that there can not exist another instance of same class in same JVM.

   In this post, I will demonstrate another creational pattern, i.e. Factory pattern, for creating
   instances for your classes. Factory, as the name suggests, is a place to create some different
   products which are somehow similar in features yet divided into categories.

   In Java, factory pattern is used to create instances of different classes of the same type.
Table of Contents

1. When to implement factory pattern?
2. Factory Pattern Implementation
3. Advantages of factory pattern
4. Final notes

1. When to use factory pattern?
   Factory pattern introduces loose coupling between classes which is the most important principle one
   should consider and apply while designing the application architecture. Loose coupling can be
   introduced in application architecture by programming against abstract entities rather than concrete
   implementations. This not only makes our architecture more flexible but also less fragile.

   A picture is worth a thousand words. Let's see how a factory implementation will look like.

   Above class-diagram depicts a common scenario using an example of a car factory which is able to
   build 3 types of cars i.e. small, sedan and luxury. Building a car requires many steps from
   allocating accessories to final makeup. These steps can be written in programming as methods and
   should be called while creating an instance of a specific car type.

   If we are unfortunate then we will create instances of car types (e.g. SmallCar) in our application
   classes and thus we will expose the car building logic to the outside world and this is certainly not
   good. It also prevents us in making changes to car making process because the code is not
   centralized, and making changes in all composing classes seems not feasible.

2. Java Factory Pattern Example
   So far we have design the classes need to be designed for making a CarFactory. Let's create them now.

2.1. Object types
   CarType will hold the types of car and will provide car types to all other classes.
package designPatterns.creational.factory;

public enum CarType {
	SMALL, SEDAN, LUXURY
}

2.2. Object implementations
   Car is parent class of all car instances and it will also contain the common logic applicable in car
   making of all types.

package designPatterns.creational.factory;

public abstract class Car {

	public Car(CarType model) {
		this.model = model;
		arrangeParts();
	}

	private void arrangeParts() {
		// Do one time processing here
	}

	// Do subclass level processing in this method
	protected abstract void construct();

	private CarType model = null;

	public CarType getModel() {
		return model;
	}

	public void setModel(CarType model) {
		this.model = model;
	}
}

   LuxuryCar is concrete implementation of car type LUXURY.
package designPatterns.creational.factory;

public class LuxuryCar extends Car {

	LuxuryCar() {
		super(CarType.LUXURY);
		construct();
	}

	@Override
	protected void construct() {
		System.out.println(&quot;Building luxury car&quot;);
		// add accessories
	}
}

   SmallCar is concrete implementation of car type SMALL.
package designPatterns.creational.factory;

public class SmallCar extends Car {

	SmallCar() {
		super(CarType.SMALL);
		construct();
	}

	@Override
	protected void construct() {
		System.out.println(&quot;Building small car&quot;);
		// add accessories
	}
}

   SedanCar is concrete implementation of car type SEDAN.
package designPatterns.creational.factory;

public class SedanCar extends Car {

	SedanCar() {
		super(CarType.SEDAN);
		construct();
	}

	@Override
	protected void construct() {
		System.out.println(&quot;Building sedan car&quot;);
		// add accessories
	}
}

2.3. Factory to create objects
   CarFactory.java is our main class implemented using factory pattern. It instantiates a car instance
   only after determining its type.
package designPatterns.creational.factory;

public class CarFactory {
	public static Car buildCar(CarType model) {
		Car car = null;
		switch (model) {
		case SMALL:
			car = new SmallCar();
			break;

		case SEDAN:
			car = new SedanCar();
			break;

		case LUXURY:
			car = new LuxuryCar();
			break;

		default:
			// throw some exception
			break;
		}
		return car;
	}
}

2.4. Test factory pattern
   In TestFactoryPattern, we will test our factory code. Lets run this class.
package designPatterns.creational.factory;

public class TestFactoryPattern {
	public static void main(String[] args) {
		System.out.println(CarFactory.buildCar(CarType.SMALL));
		System.out.println(CarFactory.buildCar(CarType.SEDAN));
		System.out.println(CarFactory.buildCar(CarType.LUXURY));
	}
}

   Program Output.
Building small car
designPatterns.creational.factory.SmallCar@7c230be4
Building sedan car
designPatterns.creational.factory.SedanCar@60e1e567
Building luxury car
designPatterns.creational.factory.LuxuryCar@e9bfee2

   As you can see, the factory is able to return any type of car instance it is requested for. It will
   help us in making any kind of changes in car making process without even touching the composing
   classes i.e. classes using CarFactory.

3. Benefits of factory pattern
   By now, you should be able to count the main advantages of using the factory pattern. Let's note
   down:
	1. The creation of an object precludes its reuse without significant duplication of code.
	2. The creation of an object requires access to information or resources that should not be
	   contained within the composing class.
	3. The lifetime management of the generated objects must be centralized to ensure a consistent
	   behavior within the application.

4. Final notes
   Factory pattern is most suitable where there is some complex object creation steps are involved. To
   ensure that these steps are centralized and not exposed to composing classes, factory pattern should
   be used. We can see many realtime examples of factory pattern in JDK itself e.g.
	 * java.sql.DriverManager#getConnection()
	 * java.net.URL#openConnection()
	 * java.lang.Class#newInstance()
	 * java.lang.Class#forName()


---

