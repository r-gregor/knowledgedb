filename: jv_run-external-program-multif_20190826.txt
https://www.rgagnon.com/javadetails/java-0014.html

Execute an external programTag(s)

Using Runtime.exec()
   This example will capture the output (from stdio) of an external program.
package com.rgagnon.howto;

import java.io.*;

public class Exec {
  public static void main(String args[]) {
    try {
      String line;
      Process p = Runtime.getRuntime().exec("cmd /c dir");
      BufferedReader bri = new BufferedReader
        (new InputStreamReader(p.getInputStream()));
      BufferedReader bre = new BufferedReader
        (new InputStreamReader(p.getErrorStream()));
      while ((line = bri.readLine()) != null) {
        System.out.println(line);
      }
      bri.close();
      while ((line = bre.readLine()) != null) {
        System.out.println(line);
      }
      bre.close();
      p.waitFor();
      System.out.println("Done.");
    }
    catch (Exception err) {
      err.printStackTrace();
    }
  }
}

   The next example, launch CMD.EXE, grab stdin/stdout and push to stdin command to be interpreted by
   the shell.
    String line;
    OutputStream stdin = null;
    InputStream stderr = null;
    InputStream stdout = null;

      // launch EXE and grab stdin/stdout and stderr
      Process process = Runtime.getRuntime ().exec ("/folder/exec.exe");
      stdin = process.getOutputStream ();
      stderr = process.getErrorStream ();
      stdout = process.getInputStream ();

      // "write" the parms into stdin
      line = "param1" + "\n";
      stdin.write(line.getBytes() );
      stdin.flush();

      line = "param2" + "\n";
      stdin.write(line.getBytes() );
      stdin.flush();

      line = "param3" + "\n";
      stdin.write(line.getBytes() );
      stdin.flush();

      stdin.close();

      // clean up if any output in stdout
      BufferedReader brCleanUp =
        new BufferedReader (new InputStreamReader (stdout));
      while ((line = brCleanUp.readLine ()) != null) {
        //System.out.println ("[Stdout] " + line);
      }
      brCleanUp.close();

      // clean up if any output in stderr
      brCleanUp =
        new BufferedReader (new InputStreamReader (stderr));
      while ((line = brCleanUp.readLine ()) != null) {
        //System.out.println ("[Stderr] " + line);
      }
      brCleanUp.close();

Launch a Windows CMD (or BAT) file and retrieve the errorlevel or exitcode

// win xp
import java.io.*;
public class CmdExec {
  public static void main(String argv[]) {
    try {
      String line;
      Process p = Runtime.getRuntime().exec("test.cmd");
      p.waitFor();
      System.out.println(p.exitValue());
    }
    catch (Exception err) {
      err.printStackTrace();
    }
  }
}

   test.cmd (set the errorlevel manually)
@echo hello world
@exit 42

   test.cmd (set the errorlevel 1 (problem detected)
@java -garbage

   test.cmd (set the errorlevel 0 (execution Ok)
@java -version

Launch a Unix script

String[] cmd = {"/bin/sh", "-c", "ls > hello"};
Runtime.getRuntime().exec(cmd);

Using the ProcessBuilder
   Since 1.5, the ProcessBuilder class provides more controls overs the process to be started. It's
   possible to set a starting directory.
import java.io.*;
import java.util.*;

public class CmdProcessBuilder {
  public static void main(String args[])
     throws InterruptedException,IOException
  {
    List<String> command = new ArrayList<String>();
    command.add(System.getenv("windir") +"\\system32\\"+"tree.com");
    command.add("/A");

    ProcessBuilder builder = new ProcessBuilder(command);
    Map<String, String> environ = builder.environment();
    builder.directory(new File(System.getenv("temp")));

    System.out.println("Directory : " + System.getenv("temp") );
    final Process process = builder.start();
    InputStream is = process.getInputStream();
    InputStreamReader isr = new InputStreamReader(is);
    BufferedReader br = new BufferedReader(isr);
    String line;
    while ((line = br.readLine()) != null) {
      System.out.println(line);
    }
    System.out.println("Program terminated!");
  }
}

Windows rundll32 utility
   Windows File association
   Any program using the Windows file association mechanism can be started with the rundll32 utility.
// "file" is the filename of the data file
//  ex. myresume.doc
//  to start Word if the doc extension is associated with it.
Runtime.getRuntime().exec
  ("rundll32 SHELL32.DLL,ShellExec_RunDLL " + file.getAbsolutePath());

   See also this [https://www.rgagnon.com/javadetails/java-0579.html] HowTo about the new Desktop API, the
   recommended solution (but you need JDK1.6).
   
   See also this [https://www.rgagnon.com/javadetails/java-0071.html] one to open the default browser.

   The following example start a Dial-up connection on the Win plateform :
[Dialup.java]
public class Dialup {
  public static void main(String[] args) throws Exception {
    Process p = Runtime.getRuntime()
      .exec("rundll32.exe rnaui.dll,RnaDial MyConnection");
    p.waitFor();
    System.out.println("Done.");
  }
}

   The "MyConnection" is the DUN and it's case sensitive.

   You still need to press ENTER to CONNECT, there is an option in the Connection properties to connect
   automatically.

   On NT and W2K, rnaui.dll is not available. Use rasdial.exe instead.
rasdial "connection name"
rasdial "connection name" /d to drop
rasdial /? for more options

PDF (Windows only)
public class ShowPDF {
  public static void main(String[] args) throws Exception {
    Process p =
      Runtime.getRuntime()
        .exec("rundll32 url.dll,FileProtocolHandler c:/pdf/mypdf.pdf");
    p.waitFor();
    System.out.println("Done.");
  }
}

PDF (Mac only)

public class ShowPDF {
  public static void main (String[] args) throws Exception{
    Process p = Runtime.getRuntime().exec("open /Documents/mypdf.pdf");
  }
}

==============================================================================================================
   More runddl32 examples:
   
RunDll32 executable can be used to start various Windows utilities like the Control Panel. Note that they are
not guaranteed to work across all Windows versions.

Here a list of what is available

rundll32 shell32,Control_RunDLL                     Run The Control Panel
rundll32 shell32,Control_RunDLL X                   Start applet X of Control Panel
                                                    ("X" = any CPL filename)
rundll32.exe shell32.dll,Control_RunDLL intl.cpl,,4 Regional setting, Date tab

rundll32 shell32,OpenAs_RunDLL \dir\filename.txt    Open The 'Open With...' Window
rundll32 shell32,ShellAboutA Info-Box               Open 'About Window Window'
rundll32 shell32,Control_RunDLL desk.cpl            Open Display Properties
rundll32 user,cascadechildwindows                   Cascade All Windows
rundll32 user,tilechildwindows                      Minimize All Child-Windows
rundll32 user,repaintscreen                         Refresh Desktop
rundll32 keyboard,disable                           Lock The Keyboard
rundll32 mouse,disable                              Disable Mouse
rundll32 user,swapmousebutton                       Swap Mouse Buttons
rundll32 user,setcursorpos                          Set Cursor Position To (0,0)
rundll32 user,wnetconnectdialog                     Show 'Map Network Drive' Window
rundll32 user,wnetdisconnectdialog                  Show 'Disconnect Network Disk' Window
rundll32 user,disableoemlayer                       Display The BSOD (blue screen of death)Window
rundll32 diskcopy,DiskCopyRunDll                    Show Copy Disk Window
rundll32 rnaui.dll,RnaWizard                        Run 'Internet Connection Wizard'
rundll32 shell32,SHFormatDrive                      Run 'Format Disk (A)' Window
rundll32 shell32,SHExitWindowsEx -1                 Cold Restart Of Windows Explorer
rundll32 shell32,SHExitWindowsEx 1                  Shut Down Computer
rundll32 shell32,SHExitWindowsEx 0                  Logoff Current User
rundll32 shell32,SHExitWindowsEx 2                  Windows9x Quick Reboot
rundll32 krnl386.exe,exitkernel                     Force Windows 9x To Exit (no confirmation)
rundll32 rnaui.dll,RnaDial "MyConnect"              Run 'Net Connection' Dialog
rundll32 msprint2.dll,RUNDLL_PrintTestPage          Choose & Print Test Page Of Current Printer
rundll32 user,setcaretblinktime                     Set New Cursor Rate Speed
rundll32 user, setdoubleclicktime                   Set New DblClick Speed (Rate)
rundll32 sysdm.cpl,InstallDevice_Rundll             Hardware installation wizard
rundll32 user,MessageBeep                           Default beep sound
rundll32 user32.dll,MessageBeep                     Default beep sound (XP)
rundll32 shell32.dll,Control_RunDLL appwiz.cpl      Add/remove programs
rundll32 shell32.dll,Control_RunDLL timedate.cpl,,0 Date/time settings
rundll32 shell32.dll,Control_RunDLL odbccp32.cpl    ODBC settings

rundll32.exe url.dll,FileProtocolHandler http:\\www.rgagnon.com
rundll32.exe url.dll,FileProtocolHandler c:\mypdf.pdf
                                                    Open the associated application
rundll32 amovie.ocx,RunDll /play /close c:\mymovie.mpg                                    
                                                    Play multimedia (movie or sound)

Rundll32.exe powrprof.dll,SetSuspendState Sleep     Put the computer in Sleep mode 

Privacy (IE)  
rundll32.exe InetCpl.cpl,ClearMyTracksByProcess 8   Internet temporary files
rundll32.exe InetCpl.cpl,ClearMyTracksByProcess 2   Cookies 
rundll32.exe InetCpl.cpl,ClearMyTracksByProcess 1   History
rundll32.exe InetCpl.cpl,ClearMyTracksByProcess 16  Forms Data
rundll32.exe InetCpl.cpl,ClearMyTracksByProcess 32  Passwords
rundll32.exe InetCpl.cpl,ClearMyTracksByProcess 255 Delete everything 

The Windows Fax viewer is used to view a variety of graphic format like .bmp, .dib, .emf, .gif, .jpeg, .png,
.tif or .wmf extensions

rundll32.exe shimgvw.dll,ImageView_Fullscreen 
  "C:\Documents and Settings\username\My Documents\logo.bmp"
==============================================================================================================   

Path to executable with spaces in them
   You can include a path for the program to be executed. On the Win plateform, you need to put the path
   in quotes if the path contains spaces.
public class Test {
  public static void main(String[] args) throws Exception {
    Process p = Runtime.getRuntime().exec(
       "\"c:/program files/windows/notepad.exe\"");
    p.waitFor();
  }
}

   If you need to pass arguments, it's safer to a String array especially if they contain spaces.
String[] cmd = { "myProgram.exe", "-o=This is an option" };
Runtime.getRuntime().exec(cmd);

   If using the start command and the path of the file to be started contains a space then you must
   specified a title to the start command.
String fileName = "c:\\Applications\\My Documents\\test.doc";
String[] commands = {"cmd", "/c", "start", "\"DummyTitle\"",fileName};
Runtime.getRuntime().exec(commands);

VBSCRIPT

// Win9x
Runtime.getRuntime().exec("start myscript.vbs");

// WinNT
Runtime.getRuntime().exec("cmd /c start myscript.vbs");

or

// with a visible console
Runtime.getRuntime().exec("cscript myscript.vbs");

// with no visible console
Runtime.getRuntime().exec("wscript myscript.vbs");

HTML Help (Windows only)

Runtime.getRuntime().exec("hh.exe myhelpfile.chm");

Start Excel

import java.io.IOException;

class StartExcel {
    public static void main(String args[])
        throws IOException
    {
        Runtime.getRuntime().exec("cmd /c start excel.exe");
    }
}

   To load a worksheet
import java.io.IOException;

class StartExcel {
    public static void main(String args[])
        throws IOException
    {
        String fileName = "c:\\temp\\xls\\test2.xls";
        String[] commands = {"cmd", "/c", "start", "\"DummyTitle\"",fileName};
        Runtime.getRuntime().exec(commands);
    }
}

   It's important to pass a dummy title to the Windows start command where there is a possibility that
   the filename contains a space. It's a feature.

Start a Windows application under another account
   You use the RUNAS command from the command line to start an application under another account (not
   available with XP Home edition). There are many switches that can enhance the behaviour of RUNAS.
   Typing "runas /?" from the command prompt gets you all the options.
  String  commands [] = new String [] {
    "CMD.EXE",
    "/C",
    "RUNAS /profile  /savecred /user:"
    + "administrator"
    + " " + "regedit.exe"
  };

  Runtime.getRuntime().exec(commands);

   /SaveCred option allows you to save a password for that account and then reuse it later. For example,
   The command runas /savecred /user:administrator regedit.exe prompts for the password, and then
   Regedit runs. Next time you use the same command, there is no password prompt.

   One potential problem is that when /SaveCred saves the credentials it saves it for whenever RUNAS
   invokes that user account. This can be a huge security risk so be careful using it!

   RUNAS capability can be disabled by editing the Registry or by disabling the RUNAS or Secondary Logon
   Services. The appropriate registry key is
   HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\Explorer, create a new DWORD value named
   HideRunAsVerb and assign it a value of 1 to disable Run as.

   RUNAS doesn't work when used from a Windows service.

Windows : execute something in Program Files
   We want to execute the textpad editor located in C:\Program Files\TextPad 4 but without hard coding
   the path since it can be different for a localized version of Windows.

   We simply extract to environnment variable called %programfiles% and build the complete path from
   there.

   [JDK1.5]
public class Exec {
    static String WIN_PROGRAMFILES = System.getenv("programfiles");
    static String FILE_SEPARATOR   = System.getProperty("file.separator");

    public static void main(String[] args) throws Exception {
     String[] commands =
       {"cmd.exe",
        "/c",
        WIN_PROGRAMFILES
        + FILE_SEPARATOR
        + "textpad 4"
        + FILE_SEPARATOR + "textpad.exe"};
     Runtime.getRuntime().exec(commands);
    }
}

   NOTE : Prior Vista, System folders were localized on disk like C:\Program Files -> C:\Archivos de
   programa on the Windows with the Spanish localization. Since Vista, System Folders always exists with
   the english name BUT when viewed through Explorer, the localized name is shown. See
   http://msmvps.com/blogs/carlosq/archive/2007/02/12/windows-vista-junctions-points-mui-and-locali
   zed-folder-names.aspx


---
https://www.quickprogrammingtips.com/java/how-to-run-external-program-in-java.html

How to Run External Program in Java

   From your Java program, it is possible to run other applications in your operating system. This
   enables you to make use of system programs and command line utilities from your Java program. Here
   are some typical uses of this feature when running your Java program in Windows,
     * You want to invoke a Windows program such as Notepad
     * You want to invoke a command line utility such as Check disk (chkdsk) or IP information
       (ipconfig)
     * You want to  access the Windows command interpreter and access some of its features such as "dir"
       command or "find" command. In this case, please note that the program you want to access is
       cmd.exe and commands like "dir" and "find" are arguments to cmd.exe. Also when directly invoked,
       cmd.exe doesn't terminate. If you want cmd.exe to terminate immediately, you should pass the /C
       argument.

   We have provided sample programs for each of the use cases above. The overall approach here is same
   (we will use Runtime.exec method), but there are some subtle differences you need to be aware of.

   The following program demonstrates how you can execute a Windows program such as Notepad from your
   Java program,
/**
 * Runs external application from this Java program
 */
public class RunProgram {

    public static void main(String[] args) {
        RunProgram rp = new RunProgram();
        rp.openNotePad();
    }

    /**
     * Runs Notepad program in the Windows system. Please note that this assumes
     * you are running this program on Windows.
     */
    private void openNotePad() {
        Runtime rt = Runtime.getRuntime();
        try {
            Process p = rt.exec("notepad");
        }catch(Exception ex) {
            ex.printStackTrace();
        }
    }
}

   This following example demonstrates how you can execute a command line program in Windows from your
   Java program. This program will also print the results of the command. Note that in this case we are
   using another version of the Runtime.exec method. This program runs "ipconfig" command with /all
   command line argument. This would print the complete IP address configuration of the system.
import java.io.BufferedReader;
import java.io.InputStreamReader;

/**
 * Runs another application from a Java program
 */
public class RunProgram2 {

    public static void main(String[] args) {
        RunProgram2 rp = new RunProgram2();
        rp.printIPInfo();
    }

    /**
     * Print complete IP address info using the command ipconfig /all
     */
    private void printIPInfo() {
        Runtime rt = Runtime.getRuntime();
        String[] commandAndArguments = {"ipconfig","/all"};
        try {
            Process p = rt.exec(commandAndArguments);
            String response = readProcessOutput(p);
            System.out.println(response);
        }catch(Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Reads the response from the command. Please note that this works only
     * if the process returns immediately.
     * @param p
     * @return
     * @throws Exception
     */
    private String readProcessOutput(Process p) throws Exception{
        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String response = "";
        String line;
        while ((line = reader.readLine()) != null) {
            response += line+"\r\n";
        }
        reader.close();
        return response;
    }
}


   In the final example, we invoke the command line program (cmd.exe) of the Windows system and then
   execute commands supported by it. By default cmd.exe is blocking and to terminate it immediately you
   need to pass the command line option /C. The following program prints the directory listing of C
   drive (C:\) using the "dir" command of "cmd.exe".
import java.io.BufferedReader;
import java.io.InputStreamReader;


public class RunProgram3 {

    public static void main(String[] args) {
        RunProgram3 rp = new RunProgram3();
        rp.getDirectoryListing();
    }

    /**
     * Runs cmd.exe from Java program and then invokes dir command to list C:\ drive.
     * The /C option is necessary for the program
     */
    private void getDirectoryListing() {
        Runtime rt = Runtime.getRuntime();
        String[] commandAndArguments = {"cmd","/C","dir","c:\\"};
        try {
            Process p = rt.exec(commandAndArguments);
            String listing = readProcessOutput(p);
            System.out.println(listing);
            //p.waitFor();
        }catch(Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Reads the response from the command. Please note that this works only
     * if the process returns immediately.
     * @param p
     * @return
     * @throws Exception
     */
    private String readProcessOutput(Process p) throws Exception{
        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String response = "";
        String line;
        while ((line = reader.readLine()) != null) {
            response += line+"\r\n";
        }
        reader.close();
        return response;
    }
}


   If you are not reading the response from the external program and if you want to wait for the
   external program to finish before you continue processing, you can use the Process.waitFor() method.
   This will block your program till the external program completes execution.


---
https://www.baeldung.com/run-shell-command-in-java

How to Run a Shell Command in Java
May 7, 2019

1. Overview
   With this tutorial we'll illustrate the two ways of executing a shell command from within Java code.
   The first is to use the Runtime class and call its exec method.
   The second and more customizable way, will be to create and use a ProcessBuilder instance.

2. Operating System Dependency
   Before we're going to create a new Process executing our shell command, we need to first determine
   the operating system on which our JVM is running.

   That's because, on Windows, we need to run our command as argument to the cmd.exe shell and on all
   other operating systems we can issue a standard shell, called sh:
boolean isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");

3. Input and Output
   Furthermore we need a way to hook into the input and output streams of our process.

   At least the output must be consumed - otherwise our process doesn't return successfully, instead it
   will hang.

   Let's implement a commonly used class called StreamGobbler which consumes an InputStream:
private static class StreamGobbler implements Runnable {
    private InputStream inputStream;
    private Consumer<String> consumer;

    public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {
        this.inputStream = inputStream;
        this.consumer = consumer;
    }

    @Override
    public void run() {
        new BufferedReader(new InputStreamReader(inputStream)).lines()
          .forEach(consumer);
    }
}

   NOTE: This class is implementing the Runnable interface, which means that it could be executed by any
   Executor.

4. Runtime.exec()
   A method-call to Runtime.exec() is a simple, not yet customizable, way to spawn a new sub-process.

   In the following example we will request a directory-listing of a users home-directory and printing
   it to the console:

String homeDirectory = System.getProperty("user.home");
Process process;
if (isWindows) {
    process = Runtime.getRuntime()
      .exec(String.format("cmd.exe /c dir %s", homeDirectory));
} else {
    process = Runtime.getRuntime()
      .exec(String.format("sh -c ls %s", homeDirectory));
}
StreamGobbler streamGobbler =
  new StreamGobbler(process.getInputStream(), System.out::println);
Executors.newSingleThreadExecutor().submit(streamGobbler);
int exitCode = process.waitFor();
assert exitCode == 0;

5. ProcessBuilder
   For the second implementation of our computing problem, we'll be using a ProcessBuilder. This is
   preferred over the Runtime approach because we're able to customize some details.

   For example we're able to:
     * change the working directory our shell command is running in using builder.directory()
     * set-up a custom key-value map as environment using builder.environment()
     * redirect input and output streams to custom replacements
     * inherit both of them to the streams of the current JVM process using builder.inheritIO()

ProcessBuilder builder = new ProcessBuilder();
if (isWindows) {
    builder.command("cmd.exe", "/c", "dir");
} else {
    builder.command("sh", "-c", "ls");
}
builder.directory(new File(System.getProperty("user.home")));
Process process = builder.start();
StreamGobbler streamGobbler =
  new StreamGobbler(process.getInputStream(), System.out::println);
Executors.newSingleThreadExecutor().submit(streamGobbler);
int exitCode = process.waitFor();
assert exitCode == 0;

6. Conclusion
   As we've seen in this quick tutorial, we can execute a shell command in Java in two distinct ways.

   Generally, if you're planning to customize the execution of the spawned process, for example to
   change its working directory, you should consider using a ProcessBuilder.

   As always, you'll find the sources on GitHub.


---
https://stackoverflow.com/questions/2110415/how-to-bind-a-windows-console-application-with-java-application

how to bind a windows console application with java application?

   i have an executable program (.exe) writen in c++ and run on windows console and i have a java swing
   applecation , so i want my java application to interact with the console app (send input and get
   output) . but how to do that ?

***
   You can do it this way
// Create the proccess in JAVA
Process proc = Runtime.getRuntime().exec("Name of application");

// Receive outputs from another program inside Java by a stream
InputStream ips = proc.getInputStream();

// Using the stream to get the messages from another program
String output = "";
int c = 0;
while ((c = ips.read()) != -1){
    output+= (char)c;
}

//Inputs messages into another program
OutputStream ops = proc.getOutputStream();
ops.write("an byte array");

***
   You can launch the C++ program from within the Java program which allows you to write to its standard


---
