filename: jv_interface-vs-abstract-class_20220607.txt
https://www.quora.com/What-is-interface-vs-abstract-class-general-OO/answer/Alan-Mellor

What is interface vs abstract class (general OO)?

Alan Mellor, Author: Java OOP Done Right
Updated Sep 6, 2021

An interface is a pure contract of what a piece of code needs to do. It is totally free of any implementation.

An interface has one job. It will tell the reader (and compiler) that 'I need to be able to call these
methods. I don;t care how you implement them at all, just make sure they are all there'

An abstract class usually has some code implemented in some methods. But other methods are marked as if they
were an interface: "I need some kind of subclass to implement these methods. But I have already implemented
some methods myself".

As a result, an ABC is a little more tied to the working of the code than a pure interface is.

Personally, I prefer the interface as a signal to the human reader that I am using an abstraction. An ABC
sometimes pushes other developers down a certain implementation path, and that's generally not what I am
trying to say when I use an interface. I'm saying you can do whatever you want, however you want.

As an example of why I think this matters, consider a pure interface to load a User Profile, given a user
id

interface UserStore {
	UserProfile load( UserId id );
}

That is a pure abstraction. It says nothing at all about where those profiles need storing, or how.

But I could make an Abstract Base Class that is similar, but pushes you down a 'must use a SQL database'
approach:

abstract class UserStore {
	abstract UserProfile load( UserId id );
	
	protected Connection connectToDatabase() {
		// code to create a database connection
		return connection;
	}
}

Now, superficially, those two are the same thing. But the abstract class has a helper method that returns a
connection to a database. So it is pushing you down the thinking that this is what I want you to do.

There is nothing to stop you ignoring that helper and leaving it as dead code, then going off and using some
non-database store. But that's misleading and ugly.

As a result, I would probably use both: interface UserStore, then abstract DatabaseUserStore implements
UserStore for the ABC with final concrete implementation of MySqlUserStore extends DatabaseUserStore,
PostgresUserStore extends DatabaseUserStore

By splitting it out that way, you optimise for clarity of what you are doing - your application code cares
not at all about store technology, yet you've given a mini-framework to those implementing SQL database
stores. You've minimised code duplication. And you have used inheritance in a way that does not violate the
Liskov Substitution Principle, which is the most important rule for deciding about interfaces and inheritance.



---

