filename: jv_maven-directory-structure_20180926.txt
https://www.baeldung.com/maven-directory-structure

Apache Maven Standard Directory Layout
November 17, 2017


1. Introduction
   Apache Maven is one of the most popular build tools for Java projects. Apart from just decentralizing
   dependencies and repositories, promoting a uniform directory structure across projects is also one of
   its important aspects.

   In this quick article, we'll explore the standard directory layout of a typical Maven project.

2. Directory Layout
   A typical Maven project has a pom.xml file and a directory structure based on defined conventions:
+---maven-project
    +---pom.xml
    +---README.txt
    +---NOTICE.txt
    +---LICENSE.txt
    +---src
        +---main
        |   +---java
        |   +---resources
        |   +---filters
        |   +---webapp
        +---test
        |   +---java
        |   +---resources
        |   +---filters
        +---it
        +---site
        +---assembly

   The default directory layout can be overridden using project descriptors, but this is uncommon and
   discouraged.

   Going ahead in this article, we'll uncover more details about each standard file and subdirectory.

3. The Root Directory
   This directory serves as the root of every Maven project.

   Let's take a closer look at the standard files and subdirectories that are typically found at root:
     * maven-project/pom.xml - defines dependencies and modules needed during the build lifecycle of a
       Maven project
     * maven-project/LICENSE.txt - licensing information of the project
     * maven-project/README.txt - summary of the project
     * maven-project/NOTICE.txt - information about third-party libraries used in the project
     * maven-project/src/main - contains source code and resources that become part of the artifact
     * maven-project/src/test - holds all the test code and resources
     * maven-project/src/it - usually reserved for integration tests used by the Maven Failsafe Plugin
     * maven-project/src/site - site documentation created using the Maven Site Plugin
     * maven-project/src/assembly - assembly configuration for packaging binaries

4. The src/main Directory
   As the name indicates, src/main is the most important directory of a Maven project. Anything that is
   supposed to be part of an artifact, be it a jar or war, should be present here.

   Its subdirectories are:
     * src/main/java - Java source code for the artifact
     * src/main/resources - configuration files and others such as i18n files, per-environment
       configuration files, and XML configurations
     * src/main/webapp - for web applications, contains resources like JavaScript, CSS, HTML files, view
       templates, and images
     * src/main/filters - contains files that inject values into configuration properties in the
       resources folder during the build phase

5. The src/test Directory
   The directory src/test is the place where tests of each component in the application reside.

   Note that none of these directories or files will become part of the artifact. Let's see its
   subdirectories:
     * src/test/java - Java source code for tests
     * src/test/resources - configuration files and others used by tests
     * src/test/filters - contains files that inject values into configuration properties in the
       resources folder during the test phase

6. Conclusion
   In this article, we looked at the standard directory layout for an Apache Maven project.
   
   
---
https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html

Introduction to the Standard Directory Layout

   Having a common directory layout would allow for users familiar with one Maven project to immediately
   feel at home in another Maven project. The advantages are analogous to adopting a site-wide
   look-and-feel.

   The next section documents the directory layout expected by Maven and the directory layout created by
   Maven. Please try to conform to this structure as much as possible; however, if you can't these
   settings can be overridden via the project descriptor.
   
   src/main/filters       Resource filter files
   src/main/webapp        Web application sources
   src/test/java          Test sources
   src/main/resources     Application/Library resources
   src/main/java          Application/Library sources
   src/test/resources     Test resources
   src/test/filters       Test resource filter files
   src/it                 Integration Tests (primarily for plugins)
   src/assembly           Assembly descriptors
   src/site               Site
   LICENSE.txt            Project's license
   NOTICE.txt             Notices and attributions required by libraries that the project depends on
   README.txt             Project's readme

   At the top level, files descriptive of the project: a pom.xml file. In addition, there are textual
   documents meant for the user to be able to read immediately on receiving the source: README.txt,
   LICENSE.txt, etc.

   There are just two subdirectories of this structure: src and target. The only other directories that
   would be expected here are metadata like CVS, .git or .svn, and any subprojects in a multiproject
   build (each of which would be laid out as above).

   The target directory is used to house all output of the build.

   The src directory contains all of the source material for building the project, its site and so on.
   It contains a subdirectory for each type: main for the main build artifact, test for the unit test
   code and resources, site and so on.

   Within artifact producing source directories (ie. main and test), there is one directory for the
   language java (under which the normal package hierarchy exists), and one for resources (the structure
   which is copied to the target classpath given the default resource definition).

   If there are other contributing sources to the artifact build, they would be under other
   subdirectories: for example src/main/antlr would contain Antlr grammar definition files.

---
