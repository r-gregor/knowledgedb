filename: java-method-return-multiple-values-multif_20210506.txt
https://www.geeksforgeeks.org/returning-multiple-values-in-java/

Returning Multiple values in Java
13 Sep, 2018

  Java doesn't support multi-value returns. We can use following solutions to return multiple values.

  If all returned elements are of same type
  We can return an array in Java. Below is a Java program to demonstrate the same.

// A Java program to demonstrate that a method
// can return multiple values of same type by
// returning an array
class Test {
	// Returns an array such that first element
	// of array is a+b, and second element is a-b
	static int[] getSumAndSub(int a, int b)
	{
		int[] ans = new int[2];
		ans[0] = a + b;
		ans[1] = a - b;

		// returning array of elements
		return ans;
	}

	// Driver method
	public static void main(String[] args)
	{
		int[] ans = getSumAndSub(100, 50);
		System.out.println("Sum = " + ans[0]);
		System.out.println("Sub = " + ans[1]);
	}
}


   Output:
Sum = 150
Sub = 50

  If returned elements are of different types

  Using Pair (If there are only two returned values)
  We can use Pair in Java to return two values.

// Returning a pair of values from a function
import javafx.util.Pair;

class GfG {
	public static Pair<Integer, String> getTwo()
	{
		return new Pair<Integer, String>(10, "GeeksforGeeks");
	}

	// Return multiple values from a method in Java 8
	public static void main(String[] args)
	{
		Pair<Integer, String> p = getTwo();
		System.out.println(p.getKey() + " " + p.getValue());
	}
}


  If there are more than two returned values
  We can encapsulate all returned types into a class and then return an object of that class.

  Let us have a look at the following code.

// A Java program to demonstrate that we can return
// multiple values of different types by making a class
// and returning an object of class.

// A class that is used to store and return
// three members of different types
class MultiDivAdd {
	int mul; // To store multiplication
	double div; // To store division
	int add; // To store addition
	MultiDivAdd(int m, double d, int a)
	{
		mul = m;
		div = d;
		add = a;
	}
}

class Test {
	static MultiDivAdd getMultDivAdd(int a, int b)
	{
		// Returning multiple values of different
		// types by returning an object
		return new MultiDivAdd(a * b, (double)a / b, (a + b));
	}

	// Driver code
	public static void main(String[] args)
	{
		MultiDivAdd ans = getMultDivAdd(10, 20);
		System.out.println("Multiplication = " + ans.mul);
		System.out.println("Division = " + ans.div);
		System.out.println("Addition = " + ans.add);
	}
}


   Output:
Multiplication = 200
Division = 0.5
Addition = 30

  Returning list of Object Class

// Java program to demonstrate return of
// multiple values from a function using
// list Object class.
import java.util.*;

class GfG {
	public static List<Object> getDetails()
	{
		String name = "Geek";
		int age = 35;
		char gender = 'M';

		return Arrays.asList(name, age, gender);
	}

	// Driver code
	public static void main(String[] args)
	{
		List<Object> person = getDetails();
		System.out.println(person);
	}
}


   Output:
[Geek, 35, M]

  This article is contributed by Twinkle Tyagi. If you like GeeksforGeeks and would like to contribute,
  you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article
  appearing on the GeeksforGeeks main page and help other Geeks.

  Please write comments if you find anything incorrect, or you want to share more information about the
  topic discussed above

  Attention reader! Don't stop learning now. Get hold of all the important Java Foundation and
  Collections concepts with the Fundamentals of Java and Java Collections Course at a
  student-friendly price and become industry ready. To complete your preparation from learning a
  language to DS Algo and many more,  please refer Complete Interview Preparation Course.


---
https://www.baeldung.com/java-method-return-multiple-values

How to Return Multiple Values From a Java Method
January 6, 2021

  1. Overview
  In this tutorial, we'll learn different ways to return multiple values from a Java method.
  First, we'll return arrays and collections. Then, we'll show how to use container classes
  for complex data and learn how to create generic tuple classes.
  Finally, we'll see examples of how to use third-party libraries to return multiple values.

  2. Using Arrays
  Arrays can be used to return both primitive and reference data types.

  For example, the following getCoordinates method returns an array of two double values:
double[] getCoordinatesDoubleArray() {

	double[] coordinates = new double[2];

	coordinates[0] = 10;
	coordinates[1] = 12.5;

	return coordinates;
}

  If we want to return an array of different reference types, we can use a common parent type
  as the array's type:
Number[] getCoordinatesNumberArray() {

	Number[] coordinates = new Number[2];

	coordinates[0] = 10;   // Integer
	coordinates[1] = 12.5; // Double

	return coordinates;
}
  Here we've defined the coordinates array of type Number because it's the common class
  between Integer and Double elements.

  3. Using Collections
  With generic Java collections, we can return multiple values of a common type.
  The collections framework has a wide spectrum of classes and interfaces. However, in this
  section, we'll limit our discussion to the List and Map interfaces.

  3.1. Returning Values of Similar Type in a List
  To start with, let's rewrite the previous array example using List<Number>:

List<Number> getCoordinatesList() {

	List<Number> coordinates = new ArrayList<>();

	coordinates.add(10);  // Integer
	coordinates.add(12.5);	// Double

	return coordinates;
}

  Like Number[], the List<Number> collection holds a sequence of mixed-type elements all of
  the same common type.

  3.2. Returning Named Values in a Map
  If we'd like to name each entry in our collection, a Map can be used instead:

Map<String, Number> getCoordinatesMap() {

	Map<String, Number> coordinates = new HashMap<>();

	coordinates.put("longitude", 10);
	coordinates.put("latitude", 12.5);

	return coordinates;
}

  Users of the getCoordinatesMap method can use the "longitude" or "latitude" keys with the
  Map#get method to retrieve the corresponding value.
  4. Using Container Classes
  Unlike arrays and collections, container classes (POJOs) can wrap multiple fields with
  different data types.

  For instance, the following Coordinates class has two different data types, double and
  String:

public class Coordinates {

	private double longitude;
	private double latitude;
	private String placeName;

	public Coordinates(double longitude, double latitude, String placeName) {

		this.longitude = longitude;
		this.latitude = latitude;
		this.placeName = placeName;
	}

	// getters and setters
}

  Using container classes like Coordinates enables us to model complex data types with
  meaningful names.
  The next step is to instantiate and return an instance of Coordinates:

Coordinates getCoordinates() {

	double longitude = 10;
	double latitude = 12.5;
	String placeName = "home";

	return new Coordinates(longitude, latitude, placeName);
}

  We should note that it's recommended that we make data classes like Coordinates
  immutable. By doing so, we create simple, thread-safe, sharable objects.

  5. Using Tuples
  Like containers, tuples store fields of different types. However, they differ in that they
  are not application-specific.
  They are specialized when we use them to describe which types we want them to handle, but
  are general purpose container of a certain number of values. This means we do not need to
  write custom code to have them, and we can use a library, or create a common single
  implementation.

  A tuple can be of any number of fields and is often called Tuplen, where n is the number of
  fields. For example, Tuple2 is a two-field tuple, Tuple3 is a three-field tuple, and so on.
  To demonstrate the importance of tuples, let's consider the following example. Suppose that
  we want to find the distance between a Coordinates point and all other points inside a
  List<Coordinates>. Then, we need to return that most distant Coordinate object, along with
  the distance.

  Let's first create a generic two-fields tuple:

public class Tuple2<K, V> {

	private K first;
	private V second;

	public Tuple2(K first, V second){
		this.first = first;
		this.second = second;
	}

	// getters and setters
}

  Next, let's implement our logic and use a Tuple2<Coordinates, Double> instance to wrap the
  results:

Tuple2<Coordinates, Double> getMostDistantPoint(List<Coordinates> coordinatesList,
													   Coordinates target) {

	return coordinatesList.stream()
	  .map(coor -> new Tuple2<>(coor, coor.calculateDistance(target)))
	  .max((d1, d2) -> Double.compare(d1.getSecond(), d2.getSecond())) // compare distances
	  .get();
}

  Using Tuple2<Coordinates, Double> in the previous example has saved us from creating a
  separate container class for one-time use with this particular method.
  Like containers, tuples should be immutable. Additionally, due to their general-purpose
  nature, we should use tuples internally rather than as part of our public API.

  6. Third-Party Libraries
  Some third-party libraries have implemented an immutable Pair or Triple type. Apache
  Commons Lang and javatuples are prime examples. Once we have those libraries as
  dependencies in our application, we can directly use the Pair or Triple types provided by
  the libraries instead of creating them by ourselves.

  Let's look at an example using Apache Commons Lang to return a Pair or a Triple object.
  Before we step further, let's add the commons-lang3 dependency in our pom.xml:

<dependency>
	<groupId>org.apache.commons</groupId>
	<artifactId>commons-lang3</artifactId>
	<version>3.11</version>
</dependency>

  6.1. ImmutablePair from Apache Commons Lang
  The ImmutablePair type from Apache Commons Lang is exactly what we want: an immutable
  type whose usage is straightforward.

  It contains two fields: left and right. Let's see how to make our getMostDistantPoint method
  return an object of the ImmutablePair type:

ImmutablePair<Coordinates, Double> getMostDistantPoint(
  List<Coordinates> coordinatesList, Coordinates target) {
	return coordinatesList.stream()
	  .map(coordinates -> ImmutablePair.of(coordinates, coordinates.calculateDistance(target)))
	  .max(Comparator.comparingDouble(Pair::getRight))
	  .get();
}

  6.2. ImmutableTriple from Apache Commons Lang
  The ImmutableTriple is pretty similar to the ImmutablePair. The only difference is, as
  its name tells, an ImmutableTriple contains three fields: left, middle, and right.
  Now, let's add a new method to our coordinates calculation to show how to use the
  ImmutableTriple type.

  We're going to go through all points in a List<Coordinates> to find out the min, avg, and
  max distances to the given target point.
  Let's see how can we return the three values with a single method using the ImmutableTriple
  class:

ImmutableTriple<Double, Double, Double> getMinAvgMaxTriple(
  List<Coordinates> coordinatesList, Coordinates target) {
	List<Double> distanceList = coordinatesList.stream()
	  .map(coordinates -> coordinates.calculateDistance(target))
	  .collect(Collectors.toList());
	Double minDistance = distanceList.stream().mapToDouble(Double::doubleValue).min().getAsDouble();
	Double avgDistance = distanceList.stream().mapToDouble(Double::doubleValue).average().orElse(0.0D);
	Double maxDistance = distanceList.stream().mapToDouble(Double::doubleValue).max().getAsDouble();

	return ImmutableTriple.of(minDistance, avgDistance, maxDistance);
}

  7. Conclusion
  In this article, we've learned how to use arrays, collections, containers, and tuples to
  return multiple values from a method. We can use arrays and collections in simple cases
  since they wrap a single data type.
  On the other hand, containers and tuples are useful in creating complex types, with
  containers offering better readability.
  We also learned that some third-party libraries have implemented pair and triple types and
  saw some examples from the Apache Commons Lang library.

  As usual, the source code for this article is available over on GitHub.


---
https://www.techiedelight.com/return-multiple-values-method-java/

5 ways to return multiple values from a method in Java

   This post will discuss how to return multiple values from a method in Java.

   As per the Java Language Specification, the methods in Java can return only one value at a time. So
   returning multiple values from a method is theoretically not possible in Java. But the beauty of Java
   lies in the fact that we can do desired things with some smart workarounds. This post provides an
   overview of some of the available alternatives to accomplish this.

1. Using a POJO class instance
   This is the most commonly used method to return multiple values from a method in Java. The idea is to
   return an instance of a class containing all fields we want to return.

   This class can be a POJO with public member variables and a public constructor to initiate its fields
   with required values or a JavaBean with corresponding getters and setters for their private member
   variables and no-arg public constructor.

// POGO for grouping multiple fields
final class Person
{
	public String name;
	public int age;
	public char gender;

	public Person(String name, int age, char gender)
	{
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
}

class Main
{
	public static Person getDetails()
	{
		// return person details from the method
		String name = "Ryan";
		int age = 25;
		char gender = 'M';

		return new Person(name, age, gender);
	}

	// Return multiple values from a method in Java
	public static void main(String[] args)
	{
		Person person = getDetails();

		System.out.println("Name is " + person.name);
		System.out.println("Age is " + person.age);
		System.out.println("Gender is " + person.gender);
	}
}

   Output:
   Name is Ryan
   Age is 25
   Gender is M


   The benefits of using this method over other methods discussed below are that it provides the
   type-safety and considerably improves the code's readability.

   Following is a simpler version of the above program that uses an object array to store all the
   required fields, but it doesn't offer any type-safety or even pass field information to the caller.

   import java.util.Arrays;

// Class for grouping multiple fields
class Collection
{
	private Object[] items;
	private final int size;

	// Constructs an object array and initialize it with given values
	public Collection(Object... values)
	{
		this.size = values.length;
		this.items = Arrays.copyOf(values, size);
	}

	public Object get(int i) {
		return items[i];
	}

	public int getSize() {
		return size;
	}

	@Override
	public String toString() {
		return Arrays.toString(items);
	}
}

class Main
{
	public static Collection getDetails()
	{
		String name = "Ryan";
		int age = 25;
		char gender = 'M';
		long income = 100000;

		return new Collection(name, age, gender, income);
	}

	// Return multiple values from a method in Java
	public static void main(String[] args)
	{
		Collection details = getDetails();

		System.out.println("The returned values are " + details);
		System.out.println("The collection size is " + details.getSize());
		System.out.println("The name field has value " + details.get(0));
	}
}

   Output:
   The returned values are [Ryan, 25, M, 100000]
   The collection size is 4
   The name field has value Ryan

   We can also implement a generic Pair or generic Tuple, which also offers type-safety if we just need
   to return two or three fields from the method.

2. Using javafx.util.Pair class
   From Java 8 onward, we can use the Pair class included in the javafx.util package representing
   the name-value pairs.

import javafx.util.Pair;

class Main
{
	public static Pair[] getDetails()
	{
		return new Pair[] { new Pair<>("name", "Ryan"),
				new Pair<>("age", 25),
				new Pair<>("gender", 'M') };
	}

	// Return multiple values from a method in Java 8 and above
	public static void main(String[] args)
	{
		Pair[] person = getDetails();

		for (int i = 0; i < person.length; i++)
		{
			System.out.println("{" + person[i].getKey() + " : " +
					person[i].getValue() + "}");
		}
	}
}

   Output:
   {name : Ryan}
   {age : 25}
   {gender : M}

3. Return an array of specific type or an object array
   This is the simplest approach so far but doesn't offer type-safety (for an object array) or pass
   field information to the caller. For arguments of the same type, we can do something like:

import java.util.Arrays;

class Main
{
	public static int[] getDetails()
	{
		int v1 = 30;
		int v2 = 50;
		int v3 = 100;

		return new int[] { v1, v2, v3 };
	}

	// Return multiple values from a method in Java
	public static void main(String[] args)
	{
		int[] ints = getDetails();
		System.out.println(Arrays.toString(ints));
	}
}

   Output:
   [30, 50, 100]

   For multi-type arguments, we can return an array of Objects, as shown below:

import java.util.Arrays;

class Main
{
	public static Object[] getDetails()
	{
		String name = "Ryan";
		int age = 25;
		char gender = 'M';
		long income = 100000;

		return new Object[] { name, age, gender, income };
	}

	// Return multiple values from a method in Java
	public static void main(String[] args)
	{
		Object[] person = getDetails();
		System.out.println(Arrays.toString(person));
	}
}

   Output:
   [Ryan, 25, M, 100000]

4. Return a Collection
   Instead of returning an array, we can also return a Collection. For example, the following program
   uses a List instead of an array.

import java.util.Arrays;
import java.util.List;

class Main
{
	public static List<Object> getDetails()
	{
		String name = "Ryan";
		int age = 25;
		char gender = 'M';
		long income = 100000;

		return Arrays.asList(name, age, gender, income);
	}

	// Return multiple values from a method in Java
	public static void main(String[] args)
	{
		List<Object> person = getDetails();
		System.out.println(person);
	}
}

   Output:
   [Ryan, 25, M, 100000]

   Using a List doesn't pass field information to the caller. We can create a map instead to pass the
   field name and its value as key-value pairs, as shown below:

import java.util.AbstractMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class Main
{
	public static Map<String, String> getDetails()
	{
		return Stream.of(
				new AbstractMap.SimpleEntry<>("name", "Ryan"),
				new AbstractMap.SimpleEntry<>("age", "25"),
				new AbstractMap.SimpleEntry<>("gender", "Male"),
				new AbstractMap.SimpleEntry<>("income", "100000$")
			)
			.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
	}

	// Return multiple values from a method in Java
	public static void main(String[] args)
	{
		Map<String, String> person = getDetails();

		for (String key: person.keySet()) {
			System.out.println(key + " is " + person.get(key));
		}
	}
}

   Output:
   income is 100000$
   gender is Male
   name is Ryan
   age is 25

5. Using a delimiter
   Here, the idea is to return a string consisting of all values separated by a delimiter. We then need
   to split the string using the same delimiter before using the values inside the caller method.

   This approach is not so neat but still vastly used in many legacy projects to transfer data between
   model and view.

class Main
{
	public static String getDetails() {
		return "George" + "~" + "Martin";
	}

	// Return multiple values from a method in Java
	public static void main(String[] args)
	{
		String[] name = getDetails().split("~");

		for (String s: name) {
			System.out.println(s);
		}
	}
}

   Output:
   George
   Martin

   That's all about returning multiple values from a method in Java.


---
https://www.tutorialspoint.com/Can-a-method-return-multiple-values-in-Java

Can a method return multiple values in Java?
   You can return only one value in Java. If needed you can return multiple values using array or an
   object.

Example
   In the example given below the calculate() method accepts two integer variables performs the addition
   subtraction, multiplication and, division operations on them stores the results in an array and
   returns the array.
   
public class ReturningMultipleValues {
   static int[] calculate(int a, int b){
	  int[] result = new int[4];
	  result[0] = a + b;
	  result[1] = a - b;
	  result[2] = a * b;
	  result[3] = a / b;
	  return result;
   }

   public static void main(String args[]){
	  Scanner sc = new Scanner(System.in);
	  System.out.println("Enter the value of a: ");
	  int a = sc.nextInt();

	  System.out.println("Enter the value of b: ");
	  int b = sc.nextInt();
	  int[] result = calculate(a, b);

	  System.out.println("Result of addition: "+result[0]);
	  System.out.println("Result of subtraction: "+result[1]);
	  System.out.println("Result of multiplication: "+result[2]);
	  System.out.println("Result of division: "+result[3]);
   }
}

Output

Enter the value of a:
20
Enter the value of b:
10
Result of addition: 30
Result of subtraction: 10
Result of multiplication: 200
Result of division: 2



---

https://www.pera-software.com/html/blog/returning-multiple-values/returning-multiple-values.html

Returning multiple values from a method in Java
11.01.2021

Problem
Sometimes it is necessary to return multiple values from a method. When you search the Internet for
possible solutions, then you find a couple of suggestions:

1. Return an Object[] or List<Object>.
2. Modify an Object[] or List<Object> parameter.
3. Return a Tuple<> with the values.
4. Return a proper Object with the values as attributes.
5. etc.

1. and 2. are very type unsafe because you have to know which type is at what position.
3. is at least typesafe but, if for example, you want to return multiple strings, then you have to know
which tuple attribute contains what value.
4. is probably the cleanest solution but it means that you might end up with a lot of small "Result" classes.

Approach
Other curly brace languages like C++ or C# have built-in call-by-reference mechanism for this situation.
C++ has reference parameter (&,&&) or pointer parameter (&,*). C# has the 'out' and 'ref' parameter
modifiers.

Java on the other hand, has only call-by-value and so it is not possible to modify a given parameter
directly.
But if you call a method with an modifiable object, then you can modify the given object and store
additional information.
If we generalize this approach then we need a class which allows us to:
- Set a value in the called method.
- et the value in the caller method.

Note that we don't need an initializing constructor because 'out' parameters are only assigned in the
called method and are not used to deliver a value to the called method.
So let's try with a very simple generic 'Out<T>':

package com.pera_software.blog.returning_multiple_values;

public class Out< T > {

	private T _value = null;

	public Out() {
	}

	public void set( T value ) {
		_value = value;
	}

	public T get() {
		return _value;
	}
}

Examples
The following examples show how 'Out<T>' can be used.
A simple example is splitting a string at a specified separator:

package com.pera_software.blog.returning_multiple_values;

import static org.junit.Assert.*;

public class Example1 {

	public static void main( String[] arguments ) {
		String keyValue = "language=java";
		Out< String > key = new Out<>();
		Out< String > value = new Out<>();

		assertTrue( splitString( keyValue, '=', key, value ));
		assertEquals( "language", key.get() );
		assertEquals( "java", value.get() );
	}

	public static boolean splitString( String s, char separator, Out< String > before, Out< String >
	after ) {
		int index = s.indexOf( separator );
		if ( index >= 0 ) {
			before.set( s.substring( 0, index ));
			after.set( s.substring( index + 1 ));
		}
		return index >= 0;
	}
}

Another example simulates a technique which is used quite often in C++. You call a function which returns
an error indicator and in case of an error fills an 'error_code'.
In the Java case we fill an exception output parameter:

package com.pera_software.blog.returning_multiple_values;

import java.io.*;

public class Example2 {

	public static void main( String[] arguments ) throws IOException {
		Out< IOException > streamException = new Out<>();
		try ( InputStream stream = openStream( "somefile.txt", streamException )) {
			if ( stream == null )
				System.out.printf( "Couldn't open stream because %s%n",
				streamException.get().getMessage() );
		}
	}

	public static InputStream openStream( String fileName, Out< IOException > streamException ) {
		try {
			return new FileInputStream( fileName );
		}
		catch ( IOException exception ) {
			streamException.set( exception );

			return null;
		}
	}
}

As a last example I'll show how the C# 'TryParse' function could be implemented in Java:

package com.pera_software.blog.returning_multiple_values;

import static org.junit.Assert.*;

public class Example3 {

	public static void main( String[] arguments ) {
		String number = "12345";
		Out< Integer > integer = new Out<>();

		assertTrue( tryParse( number, integer ));
		assertEquals( 12345, integer.get().intValue() );
	}

	public static boolean tryParse( String number, Out< Integer > integer ) {
		try {
			integer.set( Integer.parseInt( number ));

			return true;
		}
		catch ( NumberFormatException exception ) {
			return false;
		}
	}
}

Implementation
This is the 'Out<T>' version which you can find in my JavaAidKit Library. This version however is more
strict and doesn't allow null values:
- Out<T>::set() will throw a NullPointerException when trying to set null.
- Out<T>::get() will throw a NoSuchElementException when a value hasn't been set.


// Copyright 2016 Peter Most, PERA Software Solutions GmbH
//
// This file is part of the JavaAidKit library.
//
// JavaAidKit is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// JavaAidKit is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with JavaAidKit. If not, see <http://www.gnu.org/licenses/>.

package com.pera_software.aidkit.lang;

import java.util.*;

/**
 * A class which can be used to return a value from a method via a parameter. The difference to
 * {@link com.pera_software.aidkit.lang.Ref} is that it doesn't need to be initialized with a value.
 *
 * {@code}
 * <blockquote><pre>
 * public static boolean splitString( String s, char separator, Out< String > before, Out< String > after ) {
 *	   int index = s.indexOf( separator );
 *	   if ( index >= 0 ) {
 *		   before.set( s.substring( 0, index ));
 *		   after.set( s.substring( index + 1 ));
 *	   }
 *	   return index >= 0;
 * }
 * </pre></blockquote>
 *
 * @author P. Most
 */
public class Out< T > {
	private T _value = null;

	/**
	 * No initializing constructor because {@code out} parameters are only supposed to be set in the
	 * called method.
	 */
	public Out() {
	}

	/**
	 * Sets the value if not null, otherwise throws a {@code NullPointerException}.
	 * @param value the non-null value to set
	 * @throws NullPointerException if value is null
	 */
	public void set( T value ) {
		if ( value != null )
			_value = value;
		else
			throw new NullPointerException();

	}

	/**
	 * If a value is present, returns the value, otherwise throws {@code NoSuchElementException}.
	 * @throws NoSuchElementException if there is no value present
	 * @return the non-null value held
	 */
	public T get() {
		if ( _value != null )
			return _value;
		else
			throw new NoSuchElementException();

	}

	@Override
	public String toString() {
		String className = ( _value != null ) ? _value.getClass().getSimpleName() : Strings.EMPTY;
		return String.format( "Out<%s>: '%s'", className, _value != null ? _value : "null" );
	}
}

Related
The JavaAidKit Library. also contains a 'Ref<T>' type, which extends 'Out<T>' and contains an additional
constructor which allows to set an initial value.
Because 'Ref<T>' extends 'Out<T>' you can use it whenever an 'Out<T>' is expected.

Tips
- As a callee make sure that the 'Out<T>' parameter gets a value and/or give the caller some indication
that the 'Out<T>' parameter wasn't set.
  (The C# compiler will complain if you don't assign to an 'out' parameter, but Java and C++ don't!)
- As a caller consider to use 'Ref<T>' and initialize it with a default value. This will prevent
NoSuchElementException if the callee didn't set a value.

Notes
After writing 'Out<T>' and 'Ref<T>' I've found this article Simulating C# ref parameter in Java.
[http://www.codeproject.com/Articles/683970/Simulating-Csharp-ref-parameter-in-Java]


---

