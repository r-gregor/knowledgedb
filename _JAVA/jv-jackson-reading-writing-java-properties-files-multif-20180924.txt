filename: jv_jackson_reading-writing-java-properties-files-multif_20180924.txt
https://medium.com/@cowtowncoder/reading-writing-java-properties-files-using-jackson-2-8-efd7a8da9d4c

Reading/writing Java properties files using Jackson (2.8)

   I will still need to write more about Jackson 2.7 and 2.8 releases (last one I wrote about
   was 2.6), but before that let's talk about one of biggest new things in 2.8: support for reading and
   writing plain old Java properties using `jackson-dataformat-properties`.

Jackson-supported data formats

   Prior to 2.8 Jackson already had support for following data formats with official FasterXML data
   format modules (in order of addition):
     * JSON (0.5)
     * Smile (binary JSON) (1.6)
     * XML (1.8)
     * CSV (2.0)
     * YAML (2.0)
     * Avro (2.1)
     * CBOR (binary JSON) (2.4)
     * Protobuf (2.6)

   and there are a few others (see Jackson portal for details) that add support for other formats
   like BSON, MessagePack and Hocon.

   So addition of yet another data format module does not seem like a big deal. Right?

Motivation
   As things are, reading and writing Properties from/to files and resources (files stored in jars) is
   relatively simple. But actual use is cumbersome because access is through untyped (`Properties` is
   basically a `Map<String,String>`) and flat (no nested values) model: even if underlying information
   needs to contain typed things (say, URLs, numbers) and at least simple structures like Lists.

   For example, you might have very simple configuration Properties file:
title=Home Page
site.host=localhost
site.port=8080

   which could approximate contents of a JSON document like:
{ "title" : "Home Page",
  "site" : {
     "host" : "localhost",
     "port" : 8080
  }
}

   and thereby map to a POJO (Plain Old Java Object) like this:
public class Endpoint {
  public String title;
  public Site site;
}
public class Site {
  public String host;
  public int port;
}

   but you'd still have to access values using awkward code like:
Properties props = ...;
int port;
String portStr = props.get("site.port");
if (portStr == null) {
  ... // report missing value
}
try {
   port = Integer.parseInt(portStr);
} catch (NumberFormatException e) {
   .... // handle
}

   But this is not how things need to be since:
    1. Implied structure is commonly expressed using de-facto standard of dotted path, which is easily
       resolvable to intended structure
    2. Implied structure matches simple POJOs
    3. Leaf values are usually simple scalars (Strings, numbers, booleans)

   Because of these properties it is possible to relatively easily map actual contents into POJOs.
   This is what `jackson-dataformat-properties` does.

Basic usage
   Usage should be familiar to anyone who has used Jackson in general; the main difference is that a
   subtype of `ObjectMapper`(*) is to be used, but otherwise interface is the same:
JavaPropsMapper mapper = new JavaPropsMapper();
// and then read/write data as usual
Endpoint host = mapper.readValue(new File("site.properties"),
   Endpoint.class);
String asText = mapper.writeValueAsString(host);

   and there are some additional convenience methods too:
// Or, if you actually require `Properties` object you can use:
Properties props = mapper.writeValueAsProperties(host);
// or, convert a `Properties` to instance to POJO
Endpoint fromProps = mapper.readValue(props, Endpoint.class);

   (*) Actually, you can construct plain 'ObjectMapper' if you want, with:
   ObjectMapper mapper = new ObjectMapper(new JavaPropsFactory());
   - just make sure you give it different factory, and not default 'JsonFactory'

Advanced Features
   But wait! In addition to implied structure of contained POJO types, and simple conversions/coercions,
   support exists for arrays/Lists as well!
   Consider following properties:
boxes.1.x = 5
boxes.1.y = 6
boxes.2.x = -5
boxes.2.y = 15

   which could map to, say, a List (or array) of Point objects.
   Or, maybe as an alternative:
boxes[1].x = 5
boxes[1].y = 6
boxes[2].x = -5
boxes[2].y = 15

   And guess what? This is supported, by default. Just bind to something like:
public class Boxes {
   public List<Box> boxes;
}
public class Box {
  public int x, y;
}

Configurability
   Examples above were relying on default settings, but the module allows quite a bit of configurability
   regarding how individual property values are constructed/deconstructed (modified to read/write).

   Configurability is handled by another existing and widely used (with formats like CSV, Protobuf,
   Avro) interface of `FormatSchema`. For Properties, subtype to use is `JavaPropsSchema`, and you
   construct instances with a fluent-like methods:
JavaPropsSchema schema = JavaPropsSchema.emptySchema()
   // Use brackets instead of dots for array index
   .withWriteIndexUsingMarkers(true)
   // and start from 3, not 1
   .withFirstArrayOffset(3);
String props = propsMapper.writer(schema).writeValueAsString();

   and get output like:
boxes[3].x = 5
boxes[3].y = 6
boxes[4].x = -5
boxes[4].y = 15

   you may similarly configure other aspects like:
     * Line ending to use (default: "\n")
     * Indentation to use, if any
     * Path separator (default: ".")
     * Header (usually comment) to write before serialized property values
     * Key/value separator to use (default: "=", but Java properties specification also allows ":")
     * Whether "simple" array indexes (numbers as path segments) are recognized or not (default: true;
       sometimes useful to disable to avoid coercion to array values)

Feedback Appreciated
   Since this is a new module, not much feedback has yet been received. Usability and quality usually
   increase rapidly when users are using the component and reporting both problems, and suggestions for
   further improvements. So feedback would be appreciated via mailing lists, bug tracker, or
   Twitter.


---
https://en.wikipedia.org/wiki/Jackson_(API)

Jackson (API)
   From Wikipedia, the free encyclopedia

   In computing, Jackson is a high-performance JSON processor for Java. Its developers extol
   the combination of fast, correct, lightweight, and ergonomic attributes of the
   library.

Contents

Implementation
   Jackson provides many ways of working including simple [28]POJO converted to/from JSON for simple
   cases. Jackson provides a set of annotations for mapping too.

Usage example
   Sample code for reading and writing with POJOs may look like the following:
public class ReadWriteJackson {
  public static void main(String[] args) throws IOException {
    ObjectMapper mapper = new ObjectMapper();

    String jsonInput = "{\"id\":0,\"firstName\":\"Robin\",\"lastName\":\"Wilson\"}";
    Person q = mapper.readValue(jsonInput, Person.class);
    System.out.println("Read and parsed Person from JSON: " + q);

    Person p = new Person("Roger", "Rabbit");
    System.out.print("Person object " + p + " as JSON = ");
    mapper.writeValue(System.out, p);
  }
}


---
https://www.journaldev.com/2324/jackson-json-java-parser-api-example-tutorial

Jackson JSON Java Parser API Example Tutorial
APRIL 6, 2018 

Jackson JSON Java Parser is very popular and used in Spring framework too. Java JSON Processing API is
not very user friendly and doesn't provide features for automatic transformation from Json to Java
object and vice versa. Luckily we have some alternative APIs that we can use for JSON processing. In
last article we learned about Google Gson API and saw how easy to use it.

Jackson JSON Java Parser
Jackson JSON Parser Java API Example Tutorial, ObjectMapper, JSON to Java Object, Java Object to JSON
To use Jackson JSON Java API in our project, we can add it to the project build path or if you are using
maven, we can add below dependency.

<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.2.3</version>
</dependency>

jackson-databind jar depends on jackson-core and jackson-annotations libraries, so if you are adding
them directly to build path, make sure you add all three otherwise you will get runtime error.

Jackson JSON Parser API provides easy way to convert JSON to POJO Object and supports easy conversion
to Map from JSON data. Jackson supports generics too and directly converts them from JSON to object.

Jackson JSON Example
For our example for JSON to POJO/Java object conversion, we will take a complex example with nested
object and arrays. We will use arrays, list and Map in java objects for conversion. Our complex json is
stored in a file employee.txt with below structure:

<code>
{
  "id": 123,
  "name": "Pankaj",
  "permanent": true,
  "address": {
    "street": "Albany Dr",
    "city": "San Jose",
    "zipcode": 95129
  },
  "phoneNumbers": [
    123456,
    987654
  ],
  "role": "Manager",
  "cities": [
    "Los Angeles",
    "New York"
  ],
  "properties": {
    "age": "29 years",
    "salary": "1000 USD"
  }
}
</code>

We have following java classes corresponding to the json data.

<code>
package com.journaldev.jackson.model;

public class Address {

    private String street;
    private String city;
    private int zipcode;

    public String getStreet() {
        return street;
    }
    public void setStreet(String street) {
        this.street = street;
    }
    public String getCity() {
        return city;
    }
    public void setCity(String city) {
        this.city = city;
    }
    public int getZipcode() {
        return zipcode;
    }
    public void setZipcode(int zipcode) {
        this.zipcode = zipcode;
    }

    @Override
    public String toString(){
        return getStreet() + ", "+getCity()+", "+getZipcode();
    }
}
</code>

Address class corresponds to the inner object in the root json data.

<code>
package com.journaldev.jackson.model;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class Employee {

    private int id;
    private String name;
    private boolean permanent;
    private Address address;
    private long[] phoneNumbers;
    private String role;
    private List<String> cities;
    private Map<String, String> properties;

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public boolean isPermanent() {
        return permanent;
    }
    public void setPermanent(boolean permanent) {
        this.permanent = permanent;
    }
    public Address getAddress() {
        return address;
    }
    public void setAddress(Address address) {
        this.address = address;
    }
    public long[] getPhoneNumbers() {
        return phoneNumbers;
    }
    public void setPhoneNumbers(long[] phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
    }
    public String getRole() {
        return role;
    }
    public void setRole(String role) {
        this.role = role;
    }

    @Override
    public String toString(){
        StringBuilder sb = new StringBuilder();
        sb.append("***** Employee Details *****\n");
        sb.append("ID="+getId()+"\n");
        sb.append("Name="+getName()+"\n");
        sb.append("Permanent="+isPermanent()+"\n");
        sb.append("Role="+getRole()+"\n");
        sb.append("Phone Numbers="+Arrays.toString(getPhoneNumbers())+"\n");
        sb.append("Address="+getAddress()+"\n");
        sb.append("Cities="+Arrays.toString(getCities().toArray())+"\n");
        sb.append("Properties="+getProperties()+"\n");
        sb.append("*****************************");

        return sb.toString();
    }
    public List<String> getCities() {
        return cities;
    }
    public void setCities(List<String> cities) {
        this.cities = cities;
    }
    public Map<String, String> getProperties() {
        return properties;
    }
    public void setProperties(Map<String, String> properties) {
        this.properties = properties;
    }
}
</code>

Employee is the java bean representing the root json object. Now let's see how can we transform JSON
to java object using Jackson JSON parser API.

<code>
package com.journaldev.jackson.json;

import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.journaldev.jackson.model.Address;
import com.journaldev.jackson.model.Employee;


public class JacksonObjectMapperExample {

    public static void main(String[] args) throws IOException {

        //read json file data to String
        byte[] jsonData = Files.readAllBytes(Paths.get("employee.txt"));

        //create ObjectMapper instance
        ObjectMapper objectMapper = new ObjectMapper();

        //convert json string to object
        Employee emp = objectMapper.readValue(jsonData, Employee.class);

        System.out.println("Employee Object\n"+emp);

        //convert Object to json string
        Employee emp1 = createEmployee();
        //configure Object mapper for pretty print
        objectMapper.configure(SerializationFeature.INDENT_OUTPUT, true);

        //writing to console, can write to any output stream such as file
        StringWriter stringEmp = new StringWriter();
        objectMapper.writeValue(stringEmp, emp1);
        System.out.println("Employee JSON is\n"+stringEmp);
    }

    public static Employee createEmployee() {

        Employee emp = new Employee();
        emp.setId(100);
        emp.setName("David");
        emp.setPermanent(false);
        emp.setPhoneNumbers(new long[] { 123456, 987654 });
        emp.setRole("Manager");

        Address add = new Address();
        add.setCity("Bangalore");
        add.setStreet("BTM 1st Stage");
        add.setZipcode(560100);
        emp.setAddress(add);

        List<String> cities = new ArrayList<String>();
        cities.add("Los Angeles");
        cities.add("New York");
        emp.setCities(cities);

        Map<String, String> props = new HashMap<String, String>();
        props.put("salary", "1000 Rs");
        props.put("age", "28 years");
        emp.setProperties(props);

        return emp;
    }

}
</code>

When we run above program, you will get following output.

<code>
Employee Object
***** Employee Details *****
ID=123
Name=Pankaj
Permanent=true
Role=Manager
Phone Numbers=[123456, 987654]
Address=Albany Dr, San Jose, 95129
Cities=[Los Angeles, New York]
Properties={age=29 years, salary=1000 USD}
*****************************
Employee JSON is
//printing same as above json file data
</code>

com.fasterxml.jackson.databind.ObjectMapper is the most important class in Jackson API that provides
readValue() and writeValue() methods to transform JSON to Java Object and Java Object to JSON.

ObjectMapper class can be reused and we can initialize it once as Singleton object. There are so many
overloaded versions of readValue() and writeValue() methods to work with byte array, File, input/output
stream and Reader/Writer objects.

Jackson JSON - Converting JSON to Map
Sometimes we have a JSON object like below, in data.txt file:

<code>
{
  "name": "David",
  "role": "Manager",
  "city": "Los Angeles"
}
</code>

and we want to convert it to a Map and not to java object with same properties and keys. We can do it
very easily in Jackson JSON API with two methods with below code:

<code>
//converting json to Map
byte[] mapData = Files.readAllBytes(Paths.get("data.txt"));
Map<String,String> myMap = new HashMap<String, String>();

ObjectMapper objectMapper = new ObjectMapper();
myMap = objectMapper.readValue(mapData, HashMap.class);
System.out.println("Map is: "+myMap);

//another way
myMap = objectMapper.readValue(mapData, new TypeReference<HashMap<String,String>>() {});
System.out.println("Map using TypeReference: "+myMap);
</code>

Once we execute above snippet, we get following output:

<code>
Map is: {name=David, role=Manager, city=Los Angeles}
Map using TypeReference: {name=David, role=Manager, city=Los Angeles}
</code>

Jackson JSON - Read Specific JSON Key
Sometimes we have json data and we are interested in only few of the keys values, so in that case converting
whole JSON to object is not a good idea. Jackson JSON API provides option to read json data as tree like
DOM Parser and we can read specific elements of JSON object through this. Below code provides snippet
to read specific entries from json file.

<code>
//read json file data to String
byte[] jsonData = Files.readAllBytes(Paths.get("employee.txt"));

//create ObjectMapper instance
ObjectMapper objectMapper = new ObjectMapper();

//read JSON like DOM Parser
JsonNode rootNode = objectMapper.readTree(jsonData);
JsonNode idNode = rootNode.path("id");
System.out.println("id = "+idNode.asInt());

JsonNode phoneNosNode = rootNode.path("phoneNumbers");
Iterator<JsonNode> elements = phoneNosNode.elements();
while(elements.hasNext()){
    JsonNode phone = elements.next();
    System.out.println("Phone No = "+phone.asLong());
}
</code>

We get following output when we execute above code snippet.

<code>
id = 123
Phone No = 123456
Phone No = 987654
</code>

Jackson JSON - Edit JSON Document
Jackson JSON Java API provide useful methods to add, edit and remove keys from JSON data and then we
can save it as new json file or write it to any stream. Below code shows us how to do this easily.

<code>
byte[] jsonData = Files.readAllBytes(Paths.get("employee.txt"));

ObjectMapper objectMapper = new ObjectMapper();

//create JsonNode
JsonNode rootNode = objectMapper.readTree(jsonData);

//update JSON data
((ObjectNode) rootNode).put("id", 500);
//add new key value
((ObjectNode) rootNode).put("test", "test value");
//remove existing key
((ObjectNode) rootNode).remove("role");
((ObjectNode) rootNode).remove("properties");
objectMapper.writeValue(new File("updated_emp.txt"), rootNode);
</code>

If you will execute above code and look for the new file, you will notice that it doesn't have
"role" and "properties" key. You will also notice that "id" value is updated to 500 and a
new key "test" is added to updated_emp.txt file.

Jackson JSON Streaming API Example
Jackson JSON Java API also provide streaming support that is helpful in working with large json data
because it reads the whole file as tokens and uses less memory. The only problem with streaming API is
that we need to take care of all the tokens while parsing the JSON data.

If we have json data as {"role":"Manager"} then we will get following tokens in order - {
(start object), "role" (key name), "Manager" (key value) and } (end object). Colon (:) is the
delimiter in JSON and hence not considered as a token.

<code>
package com.journaldev.jackson.json;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.journaldev.jackson.model.Address;
import com.journaldev.jackson.model.Employee;

public class JacksonStreamingReadExample {

    public static void main(String[] args) throws JsonParseException, IOException {

        //create JsonParser object
        JsonParser jsonParser = new JsonFactory().createParser(new File("employee.txt"));

        //loop through the tokens
        Employee emp = new Employee();
        Address address = new Address();
        emp.setAddress(address);
        emp.setCities(new ArrayList<String>());
        emp.setProperties(new HashMap<String, String>());
        List<Long> phoneNums = new ArrayList<Long>();
        boolean insidePropertiesObj=false;

        parseJSON(jsonParser, emp, phoneNums, insidePropertiesObj);

        long[] nums = new long[phoneNums.size()];
        int index = 0;
        for(Long l :phoneNums){
            nums[index++] = l;
        }
        emp.setPhoneNumbers(nums);

        jsonParser.close();
        //print employee object
        System.out.println("Employee Object\n\n"+emp);
    }

    private static void parseJSON(JsonParser jsonParser, Employee emp,
            List<Long> phoneNums, boolean insidePropertiesObj) throws JsonParseException,
            IOException {

        //loop through the JsonTokens
        while(jsonParser.nextToken() != JsonToken.END_OBJECT){
            String name = jsonParser.getCurrentName();
            if("id".equals(name)){
                jsonParser.nextToken();
                emp.setId(jsonParser.getIntValue());
            }else if("name".equals(name)){
                jsonParser.nextToken();
                emp.setName(jsonParser.getText());
            }else if("permanent".equals(name)){
                jsonParser.nextToken();
                emp.setPermanent(jsonParser.getBooleanValue());
            }else if("address".equals(name)){
                jsonParser.nextToken();
                //nested object, recursive call
                parseJSON(jsonParser, emp, phoneNums, insidePropertiesObj);
            }else if("street".equals(name)){
                jsonParser.nextToken();
                emp.getAddress().setStreet(jsonParser.getText());
            }else if("city".equals(name)){
                jsonParser.nextToken();
                emp.getAddress().setCity(jsonParser.getText());
            }else if("zipcode".equals(name)){
                jsonParser.nextToken();
                emp.getAddress().setZipcode(jsonParser.getIntValue());
            }else if("phoneNumbers".equals(name)){
                jsonParser.nextToken();
                while (jsonParser.nextToken() != JsonToken.END_ARRAY) {
                    phoneNums.add(jsonParser.getLongValue());
                }
            }else if("role".equals(name)){
                jsonParser.nextToken();
                emp.setRole(jsonParser.getText());
            }else if("cities".equals(name)){
                jsonParser.nextToken();
                while (jsonParser.nextToken() != JsonToken.END_ARRAY) {
                    emp.getCities().add(jsonParser.getText());
                }
            }else if("properties".equals(name)){
                jsonParser.nextToken();
                while(jsonParser.nextToken() != JsonToken.END_OBJECT){
                    String key = jsonParser.getCurrentName();
                    jsonParser.nextToken();
                    String value = jsonParser.getText();
                    emp.getProperties().put(key, value);
                }
            }
        }
    }

}
</code>

JsonParser is the jackson json streaming API to read json data, we are using it to read data from the
file and then parseJSON() method is used to loop through the tokens and process them to create our java
object. Notice that parseJSON() method is called recursively for "address" because it's a nested
object in the json data. For parsing arrays, we are looping through the json document.

We can use JsonGenerator class to generate json data with streaming API.

<code>
package com.journaldev.jackson.json;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Set;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.journaldev.jackson.model.Employee;

public class JacksonStreamingWriteExample {

    public static void main(String[] args) throws IOException {
        Employee emp = JacksonObjectMapperExample.createEmployee();

        JsonGenerator jsonGenerator = new JsonFactory()
                .createGenerator(new FileOutputStream("stream_emp.txt"));
        //for pretty printing
        jsonGenerator.setPrettyPrinter(new DefaultPrettyPrinter());

        jsonGenerator.writeStartObject(); // start root object
        jsonGenerator.writeNumberField("id", emp.getId());
        jsonGenerator.writeStringField("name", emp.getName());
        jsonGenerator.writeBooleanField("permanent", emp.isPermanent());

        jsonGenerator.writeObjectFieldStart("address"); //start address object
            jsonGenerator.writeStringField("street", emp.getAddress().getStreet());
            jsonGenerator.writeStringField("city", emp.getAddress().getCity());
            jsonGenerator.writeNumberField("zipcode", emp.getAddress().getZipcode());
        jsonGenerator.writeEndObject(); //end address object

        jsonGenerator.writeArrayFieldStart("phoneNumbers");
            for(long num : emp.getPhoneNumbers())
                jsonGenerator.writeNumber(num);
        jsonGenerator.writeEndArray();

        jsonGenerator.writeStringField("role", emp.getRole());

        jsonGenerator.writeArrayFieldStart("cities"); //start cities array
        for(String city : emp.getCities())
            jsonGenerator.writeString(city);
        jsonGenerator.writeEndArray(); //closing cities array

        jsonGenerator.writeObjectFieldStart("properties");
            Set<String> keySet = emp.getProperties().keySet();
            for(String key : keySet){
                String value = emp.getProperties().get(key);
                jsonGenerator.writeStringField(key, value);
            }
        jsonGenerator.writeEndObject(); //closing properties
        jsonGenerator.writeEndObject(); //closing root object

        jsonGenerator.flush();
        jsonGenerator.close();
    }

}
</code>

JsonGenerator is easy to use in comparison to JsonParser.

That's all for quick reference tutorial to Jackson JSON Parser Java API. Jackson JSON Java API is easy
to use and provide a lot of options for the ease of developers working with JSON data. Download project
from below link and play around with it to explore more options about Jackson Json API.


---
