filename: jv_properties-multif_20180917.txt
https://www.baeldung.com/java-properties

Getting Started with Java Properties
August 18, 2018

1. Overview
   Most Java application need to use properties at some point, generally to store simple parameters as
   key-value pairs, outside of compiled code.

   And so the language has first class support for properties - the java.util.Properties - a utility
   class designed for handling this type of configuration files.

   That's what we'll focus on in this article.

2. Loading Properties
  2.1. From Properties Files

   Let's start with an example for loading key-value pairs from properties files; we're loading two
   files we have available on our classpath:

   app.properties:
version=1.0
name=TestApp
date=2016-11-12

   And catalog:
c1=files
c2=images
c3=videos

   Notice that although the properties files are recommended to use ".properties", the suffix, it's not
   necessary.

   We can now load them very simply into a Properties instance:
String rootPath = Thread.currentThread().getContextClassLoader().getResource("").getPath();
String appConfigPath = rootPath + "app.properties";
String catalogConfigPath = rootPath + "catalog";

Properties appProps = new Properties();
appProps.load(new FileInputStream(appConfigPath));

Properties catalogProps = new Properties();
catalogProps.load(new FileInputStream(catalogConfigPath));

   As long as a file's content meet properties file format requirements, it can be parsed correctly by
   Properties class. Here are more details for [***] Property file format:
   
--------------------------------------------------------------------------------------------------------------   
[***]
https://en.wikipedia.org/wiki/.properties

.properties
   .properties is a file extension for files mainly used in Java related technologies to store
   the configurable parameters of an [10]application. They can also be used for storing strings for
   Internationalization and localization; these are known as Property Resource Bundles.

   Each parameter is stored as a pair of strings, one storing the name of the parameter (called the
   key), and the other storing the value.

Format
   Each line in a .properties file normally stores a single property. Several formats are possible for
   each line, including key=value, key = value, key:value, and key value. Note that single-quotes or
   double-quotes are considered part of the string. Trailing space is significant and presumed to be
   trimmed as required by the consumer.

   Comment lines in .properties files are denoted by the [21]number sign (#) or the [22]exclamation
   mark (!) as the first non [23]blank [24]character, in which all remaining text on that line is
   ignored. The backwards slash is used to escape a character. An example of a properties file is
   provided below.
   
<code>
# You are reading the ".properties" entry.
! The exclamation mark can also mark text as comments.
# The key characters =, and : should be written with
# a preceding backslash to ensure that they are properly loaded.
# However, there is no need to precede the value characters =, and : by a backslash.
website = https://en.wikipedia.org/
language = English
# The backslash below tells the application to continue reading
# the value onto the next line.
message = Welcome to \
          Wikipedia!
# Add spaces to the key
key\ with\ spaces = This is the value that could be looked up with the key "key with spaces".
# Unicode
tab : \u0009
# If you want your property to include a backslash, it should be escaped by another backslash
path=c:\\wiki\\templates
# However, some editors will handle this automatically
</code>

   In the example above,
   website would be a key, and its corresponding value would be
   https://en.wikipedia.org/. While the number sign (#) and the exclamation mark (!) marks text as
   comments, it has no effect when it is part of a property. Thus, the key message has the value
   Welcome to Wikipedia! and not Welcome to Wikipedia. Note also that all of the whitespace in front of
   Wikipedia! is excluded completely.

   The encoding of a .properties file is ISO-8859-1, also known as Latin-1. All non-Latin-1
   characters must be entered by using Unicode escape characters, e.g. \uHHHH where HHHH is a
   hexadecimal index of the character in the Unicode character set. This allows for using .properties
   files as resource bundles for localization. A non-Latin-1 text file can be converted to a
   correct .properties file by using the native2ascii tool that is shipped with the JDK or by
   using a tool, such as po2prop, that manages the transformation from a bilingual localization
   format into .properties escaping.

   An alternative to using unicode escape characters for non-Latin-1 character in ISO 8859-1 character
   encoded Java *.properties files is to use the JDK's XML Properties file format which by default is
   UTF-8 encoded, introduced starting with Java 1.5.

   Another alternative is to create custom control that provides custom encoding.

   In Java 9 and newer, the default encoding for .properties files is UTF-8, and if an invalid UTF-8
   byte sequence is encountered it falls back to ISO-8859-1.

Editing
   Editing .properties files is done using any text editor such as those typically installed on
   various Operating Systems including Notepad on Windows or Emacs, Vim, etc. on Linux
   systems.

   Third-party tools are also available with additional functionality specific to editing .properties
   files such as:
     * Data Validation
     * Creating new keys
     * Synchronization of key names
     * Automatic bi-directional conversion of non-ASCII symbols to support non-Latin languages
     * Integration with Eclipse
--------------------------------------------------------------------------------------------------------------

  2.2. Load From XML Files
   Besides properties files, Properties class can also load XML files which conform to the specific DTD
   specifications.

   Here is an example for loading key-value pairs from an XML file - icons.xml:
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>xml example</comment>
    <entry key="fileIcon">icon1.jpg</entry>
    <entry key="imageIcon">icon2.jpg</entry>
    <entry key="videoIcon">icon3.jpg</entry>
</properties>

   Now, let's load it:
String rootPath = Thread.currentThread().getContextClassLoader().getResource("").getPath();
String iconConfigPath = rootPath + "icons.xml";
Properties iconProps = new Properties();
iconProps.loadFromXML(new FileInputStream(iconConfigPath));

3. Get Properties
   We can use getProperty(String key) and getProperty(String key, String defaultValue) to get value by
   its key.

   If the key-value pair exists, the two methods will both return the corresponding value. But if there
   is no such key-value pair, the former will return null, and the latter will return defaultValue
   instead.

   Example code:
String appVersion = appProps.getProperty("version");
String appName = appProps.getProperty("name", "defaultName");
String appGroup = appProps.getProperty("group", "baeldung");
String appDownloadAddr = appProps.getProperty("downloadAddr");
System.out.println(appVersion);
System.out.println(appName);
System.out.println(appGroup);
System.out.println(appDownloadAddr);

   Note that although Properties class inherits get() method from Hashtable class, I wouldn't recommend
   you use it to get value. Because its get() method will return an Object value which can only be cast
   to String and the getProperty() method already handles the raw Object value properly for you.

   The code below will throw an Exception:
float appVerFloat = (float) appProps.get("version");

4. Set Properties
   We can use setProperty() method to update an existed key-value pair or add a new key-value pair.

   Example code:
appProps.setProperty("name", "NewAppName"); // update an old value
appProps.setProperty("downloadAddr", "www.baeldung.com/downloads"); // add new key-value pair
String newAppName = appProps.getProperty("name");
String newAppDownloadAddr = appProps.getProperty("downloadAddr");
System.out.println("new app name: " + newAppName);
System.out.println("new app downloadAddr: " + newAppDownloadAddr);

   Note that although Properties class inherits put() method and putAll() method from Hashtable class, I
   wouldn't recommend you use them for the same reason as for get() method: only String values can be
   used in Properties.

   The code below will not work as you wish, when you use getProperty() to get its value, it will return
   null:
appProps.put("version", 2);

5. Remove Properties
   If you want to remove a key-value pair, you can use remove() method.

   Example Code:
System.out.println("before removal, version is: " + appProps.getProperty("version"));
appProps.remove("version");
System.out.println("after removal, version is: " + appProps.getProperty("version"));

6. Store
  6.1. Store to Properties Files

   Properties class provides a store() method to output key-value pairs.

   Example code:
String newAppConfigPropertiesFile = rootPath + "newApp.properties";
appProps.store(new FileWriter(newAppConfigPropertiesFile), "store to properties file");

   The second parameter is for comment. If you don't want to write any comment, simply use null for it.

  6.2. Store to XML Files
   Properties class also provides a storeToXML() method to output key-value pairs in XML format.

   Example code:
String newAppConfigXmlFile = rootPath + "newApp.xml";
appProps.storeToXML(new FileOutputStream(newAppConfigXmlFile), "store to xml file");

   The second parameter is as same as it in the store() method.

7. Other Common Operations
   Properties class also provides some other methods to operate the properties.

   Example code:
appProps.list(System.out); // list all key-value pairs

Enumeration<Object> valueEnumeration = appProps.elements();
while (valueEnumeration.hasMoreElements()) {
    System.out.println(valueEnumeration.nextElement());
}

Enumeration<Object> keyEnumeration = appProps.keys();
while (keyEnumeration.hasMoreElements()) {
    System.out.println(keyEnumeration.nextElement());
}

int size = appProps.size();
System.out.println(size);

8. Default Property List
   A Properties object can contain another Properties object as its default property list. The default
   property list will be searched if the property key is not found in the original one.

   Besides "app.properties", we have another file - "default.properties" - on our classpath:

   default.properties:
site=www.google.com
name=DefaultAppName
topic=Properties
category=core-java

   Example Code:
String rootPath = Thread.currentThread().getContextClassLoader().getResource("").getPath();

String defaultConfigPath = rootPath + "default.properties";
Properties defaultProps = new Properties();
defaultProps.load(new FileInputStream(defaultConfigPath));

String appConfigPath = rootPath + "app.properties";
Properties appProps = new Properties(defaultProps);
appProps.load(new FileInputStream(appConfigPath));

System.out.println(appProps.getProperty("name"));
System.out.println(appProps.getProperty("version"));
System.out.println(appProps.getProperty("site"));

7. Properties and Encoding
   By default, properties files are expected to be ISO-8859-1 (Latin-1) encoded, so properties with
   characters outside of the ISO-8859-1 shouldn't generally be used.

   We can work around that limitation with the help of tools such as the JDK native2ascii tool or
   explicit encodings on files, if necessary.

   For XML files, the loadFromXML() method and the storeToXML() method use UTF-8 character encoding by
   default.

   However, when reading an XML file encoded differently, we can specify that in the DOCTYPE
   declaration; writing is also flexible enough - we can specify the encoding in a third parameter of
   the storeToXML() API.

8. Conclusion
   In this article, we have discussed basic Properties class usage, including how to use Properties load
   and store key-value pairs in both properties and XML format, how to operate key-value pairs in a
   Properties object, such as retrieve values, update values, get its size, and how to use a default
   list for a Properties object.


---
https://www.geeksforgeeks.org/java-util-properties-class-java/

Java.util.Properties class in Java
   The Properties class represents a persistent set of properties. The Properties can be saved to a
   stream or loaded from a stream.
     * Properties is a subclass of Hashtable.
     * It is used to maintain list of value in which the key is a string and the value is also a string.
     * One useful capability of the Properties class is that you can specify a default property that
       will be returned if no value is associated with a certain key.
     * Multiple thread can share a single properties object without the need of external
       synchronisation.

   Properties defines a instance variable
   Properties defaults: This variable holds a default property list associated with a Properties object.
   Constructors:
    1. Properties(): This creates a Properties object that has no default values.
    2. Properties(Properties propDefault): The second creates an object that uses propDefault for its
       default value.

   Methods:
   In addition to method that Properties inherits from Hashtable, Properties defines some legacy method
   listed below-
    1. String getProperty(String key): Searches for the property with the specified key in this property
       list. If the key is not found in this property list, the default property list, and its defaults,
       recursively, are then checked. The method returns null if the property is not found.
Syntax: public String getProperty(String key).
Returns: the value associated with key.
Exception: NA.

    2. String getProperty(String key, String defaultProperty): Searches for the property with the
       specified key in this property list. If the key is not found in this property list, the default
       property list, and its defaults, recursively, are then checked. The method returns the default
       value argument if the property is not found.

Syntax: public String getProperty(String key, String defaultProperty).
Returns: The value associated with key.
Exception: NA.

   // Java code illustrating getProperty() method
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[])
       {
           Properties gfg = new Properties();
           Set URL;
           String str;

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           // checking what's in table
           URL = gfg.keySet();
           Iterator itr = URL.iterator();

           while(itr.hasNext())
           {
               str = (String)itr.next();
               System.out.println("The URL for " + str +
                       " is " + gfg.getProperty(str));
           }

           System.out.println();

           // looking for URL that not in list
           str = gfg.getProperty("articl", "not found");
           System.out.println("The URL for article is " + str);

       }
   }

   (Submit) Run on IDE

   Output:
The URL for contribute is contribute.geeksforgeeks.org
The URL for quiz is quiz.geeksforgeeks.org
The URL for ide is ide.geeksforgeeks.org

The URL for article is not found

     void list(PrintStream streamOut): Sends the property list to the output stream linked to streamOut.
Syntax: public void list(PrintStream streamOut).
Returns: NA.
Exception: NA.

   // Java code illustrating list() method
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[])
       {
           Properties gfg = new Properties();
           Set URL;
           String str;

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           gfg.list(System.out);
       }
   }

   (Submit) Run on IDE

   Output:
-- listing properties --
contribute=contribute.geeksforgeeks.org
quiz=quiz.geeksforgeeks.org
ide=ide.geeksforgeeks.org

     void list(PrintWriter streamOut): Prints this property list out to the specified output stream.
   This method is useful for debugging.
Syntax: public void list(PrintWriter streamOut).
Return: NA.
Exception: ClassCastException - if any key in
this property list is not a string.

   // Java code illustrating list() method
   import java.io.PrintWriter;
   import java.util.*;
   class PropertiesDemo
   {


       public static void main(String arg[])
       {
           Properties gfg = new Properties();

           PrintWriter writer = new PrintWriter(System.out);

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           // printing list using PrintWriter object
           gfg.list(writer);

           // flushing the stream
           writer.flush();
       }
   }

   (Submit) Run on IDE

   Output:
-- listing properties --
contribute=contribute.geeksforgeeks.org
quiz=quiz.geeksforgeeks.org
ide=ide.geeksforgeeks.org

     Enumeration propertyNames(): This method returns an enumeration of the keys. This includes those
   keys found in the default property list, too.
Syntax: public Enumeration propertyNames().
Returns: enumeration of key.
Exception: ClassCastException -- if any key in this
property list is not a string.

   // Java code illustrating propertyNames() method
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[])
       {
           Properties gfg = new Properties();
           Set str;
           String s;
           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           Enumeration name = gfg.propertyNames();

           // print the enumaration elements
           System.out.println(name.nextElement());
           System.out.println(name.nextElement());
           System.out.println(name.nextElement());

       }
   }

   (Submit) Run on IDE

   Output:
contribute
quiz
ide

     Object setProperty(String key, String value): Associate value with key. Returns the previous value
   associated with key, or returns null if no such association exist.
Syntax: public Object setProperty(String key, String value).
Returns: the previous value of the specified key in
this property list, or null if it did not have one.
Exception: NA.

   // Java code illustrating setProperty() method
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[])
       {
           Properties gfg = new Properties();

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");

           gfg.setProperty("quiz", "quiz.geeksforgeeks.org");

           System.out.println(gfg);

       }
   }

   (Submit) Run on IDE

   Output:
{contribute=contribute.geeksforgeeks.org,
 quiz=quiz.geeksforgeeks.org, ide=ide.geeksforgeeks.org}

     void load(InputStream streamIn): This method reads a property list (key and element pairs) from the
   input byte stream.
Syntax: public void load(InputStream streamIn).
Returns: NA.
Exception: IOException -- if an error occurred when reading from
the input stream.
IllegalArgumentException -- if the input stream contains a malformed
 Unicode escape sequence.

   // Java code illustrating load() method
   import java.io.FileInputStream;
   import java.io.FileOutputStream;
   import java.io.IOException;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();
           String s = "ide = ide.geeksforgeeks.org";

           FileOutputStream out = new FileOutputStream("properties.txt");
           FileInputStream in = new FileInputStream("properties.txt");

           // write the property in the output stream file
           out.write(s.getBytes());

           // load from input stream
           gfg.load(in);

           gfg.list(System.out);
       }
   }

   (Submit) Run on IDE

   Output:
-- listing properties --
ide=ide.geeksforgeeks.org

     void load(Reader reader): This method Reads a property list (key and element pairs) from the input
   character stream in a simple line-oriented format.
Syntax: public void load(Reader reader).
Returns: NA.
Exception: IOException -- if an error occurred when reading from
the input stream.
IllegalArgumentException -- if the input stream contains a malformed
 Unicode escape sequence.

   // Java code illustrating load() method
   import java.io.IOException;
   import java.io.StringReader;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();
           String s = "ide = ide.geeksforgeeks.org";

           // creating a new reader
           StringReader reader = new StringReader(s);

           // loading from input stream
           gfg.load(reader);

           gfg.list(System.out);
       }
   }

   (Submit) Run on IDE

   Output:
-- listing properties --
ide=ide.geeksforgeeks.org

     void store(OutputStream streamOut, String Description): After writing the string specified by
   description, the property list is written to the output stream linked to streamOut.
Syntax: public void store(OutputStream streamOut, String Description).
Returns: the previous value of the specified key
in this property list, or null if it did not have one.
Exception:
IOException -- if writing this property list to the
specified output stream throws an IOException.
ClassCastException -- if this Properties object contains
any keys or values that are not Strings.
NullPointerException -- if out is null.

   // Java code illustrating store() method
   import java.io.IOException;
   import java.io.StringReader;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();
           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           // store the properties in output stream
           gfg.store(System.out, "Demo of Properties class");
       }
   }

   (Submit) Run on IDE

   Output:
#Demo of Properties class
#Wed Jul 05 22:49:43 IST 2017
contribute=contribute.geeksforgeeks.org
quiz=quiz.geeksforgeeks.org
ide=ide.geeksforgeeks.org

     void store(Reader reader, String Description): This method writes this property list (key and
   element pairs) in this Properties table to the output character stream in a format suitable for using
   the load(Reader) method.
Syntax: public store(Reader reader, String Description)
Returns: the previous value of the specified key in
this property list, or null if it did not have one.
Exception:
IOException -- if writing this property list to
the specified output stream throws an IOException.
ClassCastException -- if this Properties object contains
any keys or values that are not Strings.
NullPointerException -- if out is null.

   // Java code illustrating store() method
   import java.io.IOException;
   import java.io.StringWriter;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();
           StringWriter writer = new StringWriter();
           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           gfg.store(writer, "Demo of Properties class");

           System.out.print(writer.toString());
       }
   }

   (Submit) Run on IDE

   Output:
#Demo of Properties class
#Wed Jul 05 22:55:16 IST 2017
contribute=contribute.geeksforgeeks.org
quiz=quiz.geeksforgeeks.org
ide=ide.geeksforgeeks.org

     Set stringPropertyNames(): Returns a set of keys in this property list where the key and its
   corresponding value are strings, including distinct keys in the default property list if a key of the
   same name has not already been found from the main properties list. Properties whose key or value is
   not of type String are omitted.
   The returned set is not backed by the Properties object. Changes to this Properties are not reflected
   in the set, or vice versa.
Syntax: public Set stringPropertyNames().
Returns: a set of keys in this property list
where the key and its corresponding value are strings, including
the keys in the default property list.
Exception: NA.

   // Java code illustrating stringPropertiesNames() method
   import java.io.IOException;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           // property name in the set
           Set set = gfg.stringPropertyNames();

           System.out.print(set);
       }
   }

   (Submit) Run on IDE

   Output:
[contribute, quiz, ide]

     void loadFromXML(InputStream in): Loads all of the properties represented by the XML document on
   the specified input stream into this properties table.
Syntax: public void loadFromXML(InputStream in).
Returns: NA.
Exception:
IOException - if reading from the specified input stream results in an IOException.
InvalidPropertiesFormatException - Data on input stream
does not constitute a valid XML document with the mandated
document type.
NullPointerException - if in is null.

   // Java code illustrating loadFromXML() method
   import java.io.FileInputStream;
   import java.io.FileOutputStream;
   import java.io.IOException;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           FileOutputStream out = new FileOutputStream("properties.xml");
           FileInputStream in = new FileInputStream("properties.xml");

           // store the properties into specified xml
           gfg.storeToXML(out, null);

           // load the properties from specified xml
           gfg.loadFromXML(in);

           gfg.list(System.out);
       }
   }

   (Submit) Run on IDE

   Output:
-- listing properties --
contribute=contribute.geeksforgeeks.org
quiz=quiz.geeksforgeeks.org
ide=ide.geeksforgeeks.org

   Run the java code for method no.- 13 and 14 on ide installed in your computer system for the output
   of code.

     void storeToXML(OutputStream os, String comment): This method emits an XML document representing
   all of the properties contained in this table.
Syntax: public void storeToXML(OutputStream os, String comment)
Returns: NA.
Exception:
IOException -- if writing this property list to the
specified output stream throws an IOException.
ClassCastException -- if this Properties object contains any
keys or values that are not Strings.
NullPointerException -- if out is null.

   // Java method illustrating storeToXML() method
   import java.io.FileInputStream;
   import java.io.FileOutputStream;
   import java.io.IOException;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           FileOutputStream out = new FileOutputStream("properties.xml");
           FileInputStream in = new FileInputStream("properties.xml");

           // store the properties into specified xml
           gfg.storeToXML(out, "Demo of properties class");

           while(in.available()>0)
           {
           System.out.print((char)in.read());
           }
       }
   }

   (Submit) Run on IDE

     void storeToXML(OutputStream os, String comment, String encoding): This method emits an XML
   document representing all of the properties contained in this table, using the specified encoding.
Syntax: public void storeToXML(OutputStream os, String comment, String encoding)
Returns: NA.
Exception:
IOException -- if writing this property list to
the specified output stream throws an IOException.
ClassCastException -- if this Properties object
contains any keys or values that are not Strings.
NullPointerException -- if out is null.

   // Java code illustrating storeToXML() method
   import java.io.FileInputStream;
   import java.io.FileOutputStream;
   import java.io.IOException;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           FileOutputStream out = new FileOutputStream("properties.xml");
           FileInputStream in = new FileInputStream("properties.xml");

           // store the properties into specified xml
           gfg.storeToXML(out, "Demo of properties class", "ISO-8859-3");

           while(in.available()>0)
           {
           System.out.print((char)in.read());
           }
       }
   }

   (Submit) Run on IDE

     void save(): This method does not throw an IOException if an I/O error occurs while saving the
   property list. Calls the store(OutputStream out, String comments) method and suppresses IOExceptions
   that were thrown.
Syntax: public void save().
Returns: NA.
Exception:
ClassCastException - if this Properties object contains any keys
 or values that are not Strings.

   // Java code illustrating save() method
   import java.io.FileInputStream;
   import java.io.FileOutputStream;
   import java.io.IOException;
   import java.util.*;
   class PropertiesDemo
   {
       public static void main(String arg[]) throws IOException
       {
           Properties gfg = new Properties();

           gfg.put("ide", "ide.geeksforgeeks.org");
           gfg.put("contribute", "contribute.geeksforgeeks.org");
           gfg.put("quiz", "quiz.geeksforgeeks.org");

           FileOutputStream out = new FileOutputStream("properties.txt");
           FileInputStream in = new FileInputStream("properties.txt");

           // saving the properties in specified txt file
           gfg.save(out, null);

           gfg.load(in);

           gfg.list(System.out);

       }
   }

   (Submit) Run on IDE

   Output:
-- listing properties --
contribute=contribute.geeksforgeeks.org
quiz=quiz.geeksforgeeks.org
ide=ide.geeksforgeeks.org


---
https://www.tutorialspoint.com/java/java_properties_class.htm

Java - The Properties Class

   Properties is a subclass of Hashtable. It is used to maintain lists of values in which the key is a
   String and the value is also a String.

   The Properties class is used by many other Java classes. For example, it is the type of object
   returned by System.getProperties( ) when obtaining environmental values.

   Properties define the following instance variable. This variable holds a default property list
   associated with a Properties object.
Properties defaults;

   Following is the list of constructors provided by the properties class.
   Sr.No. Constructor & Description
        Properties( )

   This constructor creates a Properties object that has no default values.
        Properties(Properties propDefault)

   Creates an object that uses propDefault for its default values. In both cases, the property list is
   empty.

   Apart from the methods defined by Hashtable, Properties define the following methods −
   Sr.No. Method & Description
        String getProperty(String key)

   Returns the value associated with the key. A null object is returned if the key is neither in the
   list nor in the default property list.
        String getProperty(String key, String defaultProperty)

   Returns the value associated with the key; defaultProperty is returned if the key is neither in the
   list nor in the default property list.
        void list(PrintStream streamOut)

   Sends the property list to the output stream linked to streamOut.
        void list(PrintWriter streamOut)

   Sends the property list to the output stream linked to streamOut.
        void load(InputStream streamIn) throws IOException

   Inputs a property list from the input stream linked to streamIn.
        Enumeration propertyNames( )

   Returns an enumeration of the keys. This includes those keys found in the default property list, too.
        Object setProperty(String key, String value)

   Associates value with the key. Returns the previous value associated with the key, or returns null if
   no such association exists.
        void store(OutputStream streamOut, String description)

   After writing the string specified by description, the property list is written to the output stream
   linked to streamOut.

Example
   The following program illustrates several of the methods supported by this data structure −
   Live Demo
<code>
import java.util.*;
public class PropDemo {

   public static void main(String args[]) {
      Properties capitals = new Properties();
      Set states;
      String str;

      capitals.put("Illinois", "Springfield");
      capitals.put("Missouri", "Jefferson City");
      capitals.put("Washington", "Olympia");
      capitals.put("California", "Sacramento");
      capitals.put("Indiana", "Indianapolis");

      // Show all states and capitals in hashtable.
      states = capitals.keySet();   // get set-view of keys
      Iterator itr = states.iterator();

      while(itr.hasNext()) {
         str = (String) itr.next();
         System.out.println("The capital of " + str + " is " +
            capitals.getProperty(str) + ".");
      }
      System.out.println();

      // look for state not in list -- specify default
      str = capitals.getProperty("Florida", "Not Found");
      System.out.println("The capital of Florida is " + str + ".");
   }
}
</code>

   This will produce the following result −

Output

The capital of Missouri is Jefferson City.
The capital of Illinois is Springfield.
The capital of Indiana is Indianapolis.
The capital of California is Sacramento.
The capital of Washington is Olympia.

The capital of Florida is Not Found.
