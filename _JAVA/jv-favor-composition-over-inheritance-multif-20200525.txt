filename: jv_favor-composition-over-inheritance-multif_20200525.txt
https://www.journaldev.com/12086/composition-vs-inheritance

Composition vs Inheritance

   Composition vs Inheritance is one of the frequently asked interview questions. You must have also
   heard to use Composition over Inheritance.

Composition vs Inheritance
   Both composition and inheritance are object-oriented programming concepts. They are not tied up
   with any specific programming language such as Java. Before we compare composition over inheritance
   programmatically, let's have a quick definition of them.

Composition
   Composition is the design technique in object-oriented programming to implement has-a relationship
   between objects. Composition in java is achieved by using instance variables of other objects. For
   example, a person who has a Job is implemented like below in java object-oriented programming.
package com.journaldev.composition;

public class Job {
    // variables, methods etc.
}

package com.journaldev.composition;

public class Person {

    //composition has-a relationship
    private Job job;

    //variables, methods, constructors etc. object-oriented

Inheritance
   Inheritance is the design technique in object-oriented programming to implement is-a relationship
   between objects. Inheritance in Java is implemented using the extends keyword.

   For example, Cat is an Animal relationship in java programming will be implemented like below.
package com.journaldev.inheritance;

public class Animal {
// variables, methods etc.
}

package com.journaldev.inheritance;

public class Cat extends Animal{
}

Composition over Inheritance
   Both composition and inheritance promote code reuse through different approaches. So which one to
   choose? How to compare composition vs inheritance. You must have heard that in programming you should
   favor composition over inheritance. Let's see some of the reasons that will help you in choosing
   composition vs inheritance.
   
    1. Inheritance is tightly coupled whereas composition is loosely coupled. Let's assume we have below
       classes with inheritance.
package com.journaldev.java.examples;

public class ClassA {

    public void foo(){
    }
}

class ClassB extends ClassA{
    public void bar(){

    }
}

       For simplicity, we have both the superclass and subclass in a single package. But mostly they
       will be in the separate codebase.
       There could be many classes extending the superclass ClassA. A very common example of this
       situation is extending the Exception class.
       Now let's say ClassA implementation is changed like below, a new method bar() is added.
package com.journaldev.java.examples;

public class ClassA {

    public void foo(){
    }

    public int bar(){
        return 0;
    }
}

       As soon as you start using new ClassA implementation, you will get compile time error in ClassB
       as The return type is incompatible with ClassA.bar(). The solution would be to change either the
       superclass or the subclass bar() method to make them compatible.
       If you would have used Composition over inheritance, you will never face this problem. A simple
       example of ClassB implementation using Composition can be as below.
class ClassB{
    ClassA classA = new ClassA();

    public void bar(){
        classA.foo();
        classA.bar();
    }
}

    2. There is no access control in inheritance whereas access can be restricted in composition. We
       expose all the superclass methods to the other classes having access to subclass. So if a new
       method is introduced or there are security holes in the superclass, subclass becomes vulnerable.
       Since in composition we choose which methods to use, it's more secure than inheritance. For
       example, we can provide ClassA foo() method exposure to other classes using below code in ClassB.
class ClassB {

    ClassA classA = new ClassA();

    public void foo(){
        classA.foo();
    }

    public void bar(){
    }

}

       This is one of the major advantage of composition over inheritance.
       
    3. Composition provides flexibility in invocation of methods that is useful with multiple subclass
       scenario. For example, let's say we have below inheritance scenario.
abstract class Abs {
    abstract void foo();
}

public class ClassA extends Abs{

    public void foo(){
    }

}

class ClassB extends Abs{

    public void foo(){
    }

}

class Test {

    ClassA a = new ClassA();
    ClassB b = new ClassB();

    public void test(){
        a.foo();
        b.foo();
    }
}

       So what if there are more subclasses, will composition make our code ugly by having one instance
       for each subclass? No, we can rewrite the Test class like below.
class Test {
    Abs obj = null;

    Test1(Abs o){
        this.obj = o;
    }

    public void foo(){
        this.obj.foo();
    }

}

       This will give you the flexibility to use any subclass based on the object used in the
       constructor.
       
    4. One more benefit of composition over inheritance is testing scope. Unit testing is easy in
       composition because we know what all methods we are using from another class. We can mock it up
       for testing whereas in inheritance we depend heavily on superclass and don't know what all
       methods of superclass will be used. So we will have to test all the methods of the superclass.
       This is extra work and we need to do it unnecessarily because of inheritance.

   That's all for composition vs inheritance. You have got enough reasons to choose composition over
   inheritance. Use inheritance only when you are sure that superclass will not be changed, otherwise go
   for composition.


---
https://medium.com/humans-create-software/composition-over-inheritance-cb6f88070205

Composition over Inheritance

   Today, we are are going to talk about composition over inheritance. Inheritance is when you design
   your types after what they are, while composition is when you design your types after what they
   cando. We are going to learn about the limitations of inheritance, and how to solve them using
   composition.

   This is a weekly show where we try to become more confident and excited about programming by learning
   intriguing things that we didn't know before. A tip is that you'll get more out of this video if
   you've watched the previous episode about factory functions.

   Let's first talk about inheritance for a bit. Let's say that we are designing a game, and I need a
   Dog:
Dog
    .bark()

   After a while, we realize that our software, like everything, needs Cats, so we create a Cat class:
Cat
    .meow()

   Because nature calls, we add .poop() to the Cat and the Dog class:
Dog
    .poop()
    .bark()
Cat
    .poop()
    .meow()

   That's duplication, so we lift .poop() into a shared Animal class.
Animal
    .poop()
    
    Dog
        .bark()
    
    Cat
        .meow()

   Now that we have a lot of animals pooping everywhere, we need a cleaningrobot:
CleaningRobot
    .drive()
    .clean()

   You also need a MurderRobot that can .drive() and .kill() the Cats and Dogs that are .poop()ing all
   over your white floors:
MurderRobot
    .drive()
    .kill()

   Since .drive() is now duplicated between CleaningRobot and MurderRobot we create a Robot class to put
   it in.
Robot
    .drive()

    CleaningRobot
        .clean()

    MurderRobot
        .kill()

   This is what the whole shabang looks like:
Robot
    .drive()
    
    CleaningRobot
        .clean()
    
    MurderRobot
        .kill()
     
    Animal
        .poop()
        
        Dog
            .bark()
        
        Cat
            .meow()

   A couple of months of development go by, and your Dog, MurderRobot and friends have all grown into a
   mature, stable system. You're feeling good about it.

   But at this point in the project, without fail, the project manager will say this:

   "Our customers demand a MurderRobotDog. It needs to be able to .kill(), .drive(), .bark(), but it
   cannot poop().

   And now, we're screwed. We simply cannot fit the MurderRobotDog nicely into this inheritance
   hierarchy. We could create a new parent object, where you put all the functionality that is shared:
GameObject
    .bark()
  
        Robot
            .drive()
         
            CleaningRobot
                .clean()
             
            MurderRobot
                .kill()
                
                MurderRobotDog
        
        Animal
            .poop()
         
            Dog
            
            Cat
                .meow()
         
   But that means that your objects will have a ton of functionality that they don't use, so you end up
   with a Gorilla/Banana problem - you request a banana, but you end up with a gorilla holding the
   banana and the entire jungle with it.

   The other bad route that you can take is to duplicate functionality:
Robot
    .drive()
    
        CleaningRobot
            .clean()
        
        MurderRobot
            .kill()
            
            MurderRobotDog
                .bark()

Animal
    .poop()
        
        Dog
            .bark()
        
        Cat
                .meow()

   That's not as bad, but it's still yucky duplication.

   Composition to the rescue! Again, inheritance is when you design your types around what they are, and
   composition is when you design types around what they do.

   So, using composition, we would do this instead:
dog            = pooper + barker
cat            = pooper + meower
cleaningRobot  = driver + cleaner
murderRobot    = driver + killer
murderRobotDog = driver + killer + barker

   I'm going to show you how to do this in practice using JavaScript. We are going to do this using
   normal functions and normal object literals.
const barker = (state) => ({
    bark: () => console.log('Woof, I am ' + state.name)
})

const driver = (state) => ({
    drive: () => state.position = state.position + state.speed
})

   These are the definitions of barker and driver. (Host has temporary been replaced with elevator
   music) You might have noted that these functions are like the factories from previous video, but
   instead of creating their own state internally, they accept their state as function parameter.
const murderRobotDog = (name)  => {
    let state = {
        name,
        speed: 100,
        position: 0
    }
    
    return Object.assign(
        {},
        barker(state),
        driver(state),
        killer(state)
    )
}

const bruno =  murderRobotDog('bruno')
bruno.bark() // "Woof, I am Bruno"

   So here we have the murderRobotDog factory function. First, it creates a state object. It assigns
   some default values to it - speed and position, and also assigns the name from the funciton argument.
   It then uses something called Object.assign - this is a function that is built into ES6, but there
   are equivalent methods in all JavaScript libraries. What it does is that it takes an object, in this
   case a new, empty object, and assign the properties from other objects to it.

   So in this case, it creates a barker, a driver, a killer, and then merge them all into the new
   object, and return it. Hence, we have our MurderRobotDog. Easy as pie.

   So we've looked at an example of an inheritance tree that broke down, and then we looked at how to
   restructure it using composition, and we looked at how to compose objects with JavaScript.

   The question that is probably on your mind now is - when to use each one? Well... the vast majority of
   developers agree that we should favor composition over inheritance. Me, personally, I don't see the
   point of inheritiance at all. I don't think it is a good pattern, and I don't think it should be
   used.

   A lot of people are going to tell you that if something has a "is a" relationship, then you should
   use inheritance. For example, Mattias "is a" man, thus I can inherit man. If the relationship is of a
   "has a" nature, such as a car "has an" engine, then you should use composition.

   I think that reasoning is topsy-turvy. While I am a man, I also have arms, and have cooking skills.
   While the car "has an engine", it is also a vehicle. You can interpret pretty much any concept both
   ways.

   But the really big problem with inheritance is that you're encouraged to predict the future.
   Inheritance encourages you to build this taxonomy of objects very early on in your project, and you
   are most likely going to make design mistakes doing that, because humans cannot predict the future
   (even though it feels like we can), and getting out of these inheritiance taxonomies is a lot harder
   than getting out of them.

   I think it's just better to use composition in the first place. It's more flexible, powerful, and
   it's also very easy to do, so why not.

   And that's it, that's my thoughts on composition. But what are yours? Comment down below, or just
   like the video if you're not the talkative type.

   Again, in this show, we try to become more confident and excited about programming by learning
   intriguing things that we didn't know before. There won't be an episode next monday, because I will
   be at JSConf in Berlin. If you're going to be there, Tweet me @mpjme so that we can say hi in
   real life. If you're not going to JSConf, make sure that you subscribe so that you don't miss the
   next episode.

   Until next time, stay curious.


---
