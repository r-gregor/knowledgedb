filename: jv_compile-and-run-java-programm-from-cli-with-external-jars-multyf_20190410.txt
https://ericplayground.com/2015/06/10/java-classpath-and-external-library-with-some-personal-notes-as-well/

Java classpath and external library (with some personal notes as well)
2015-06

   Classpath is a parameter-set either on the command-line, or through an environment
   variable-that tells the Java Virtual Machine or the Java compiler where to look for
   user-defined classes and packages.

Contents
     * 1 Overview and architecture
     * 2 Setting the path to execute Java programs
          + 2.1 Supplying as application argument
          + 2.2 Setting the path through an environment variable
          + 2.3 Setting the path of a Jar file
          + 2.4 Adding all JAR files in a directory
          + 2.5 Setting the path in a Manifest file
     * 3 OS specific notes
     * 4 Diagnose

Overview and architecture
   Similar to the classic dynamic loading behavior, when executing Java programs, the
   Java Virtual Machine finds and loads classes lazily (it loads the bytecode of a
   class only when this class is first used). The classpath tells Java where to look in the
   filesystem for files defining these classes.

   The virtual machine searches for and loads classes in this order:
    1. bootstrap classes: the classes that are fundamental to the Java Platform
       (comprising the public classes of the Java Class Library, and the private classes
       that are necessary for this library to be functional).
    2. extension classes: packages that are in the extension directory of the JRE or
       JDK, jre/lib/ext/
    3. user-defined packages and libraries

   By default only the packages of the JDK standard API and extension packages are
   accessible without needing to set where to find them. The path for all user-defined
   packages and libraries must be set in the command-line (or in the Manifest
   associated with the Jar file containing the classes).

Setting the path to execute Java programs
Supplying as application argument

   Suppose we have a package called org.mypackage containing the classes:
     * HelloWorld (main class)
     * SupportClass
     * UtilClass

   and the files defining this package are stored physically under the directory D:\myprogram
   (on Windows) or /home/user/myprogram (on Linux).

   The file structure will look like this:

/home/user/myprogram/       (D:\myprogram\ -- in WINDOWS)
    |
    +-->org/
         |
         *--> mypackage/
                |
                +--> HelloWorld.class
                +--> SupportClass.class
                +--> UtilClass.class

   When we invoke Java, we specify the name of the application to run:
   org.mypackage.HelloWorld. However we must also tell Java where to look for the files and
   directories defining our package. So to launch the program, we use the following command:
$> java -classpath D:\myprogram org.mypackage.HelloWorld   [on WINDOWS]
$> java -cp /home/user/myprogram org.mypackage.HelloWorld  [on Linux]

   where:
     * java is a java application launcher, a type of sdkTool(A command-line tool, such as
       javac, javadoc, or apt)
     * -classpath D:\myprogram sets the path to the packages used in the program (on Linux,
       -cp /home/user/myprogram) and
     * org.mypackage.HelloWorld is the name of the main class

Setting the path through an environment variable
   The environment variable named CLASSPATH may be alternatively used to set the
   classpath. For the above example, we could also use on Windows:
$> set CLASSPATH=D:\myprogram
$> java org.mypackage.HelloWorld

   The rule is that -classpath option, when used to start the java application, overrides the
   CLASSPATH environment variable. If none are specified, the current working directory is
   used as classpath. This means that when our working directory is D:\myprogram\ (on Linux,
   /home/user/myprogram/), we would not need to specify the classpath explicitly. When
   overriding however, it is advised to include current folder "." into the classpath in the
   case when loading classes from current folder is desired.

   The same applies not only to java launcher but also to javac, the java compiler.

Setting the path of a Jar file
   If a program uses a supporting library enclosed in a Jar file called supportLib.jar,
   physically in the directory D:\myprogram\lib\ and the corresponding physical file structure
   is:

/home/user/myprogram/       (D:\myprogram\ -- in WINDOWS)
   |
   +-->lib/
   |    |
   |    *--> supportLib.jar
   |
   +-->org/
        |
        *--> mypackage/
                |
                +--> HelloWorld.class
                +--> SupportClass.class
                +--> UtilClass.class

   the following command-line option is needed:
$> java -classpath D:\myprogram;D:\myprogram\lib\supportLib.jar org.mypackage.HelloWorld

   or alternatively:
$> et CLASSPATH=D:\myprogram;D:\myprogram\lib\supportLib.jar
$> java org.mypackage.HelloWorld

Adding all JAR files in a directory
   In Java 6 and higher, one can add all jar-files in a specific directory to the
   classpath using wildcard notation.

   Windows example:
java -classpath ".;c:\mylib\*" MyApp

   Linux example:
java -classpath '.:/mylib/*' MyApp

   This works for both -classpath options and environment classpaths.

Setting the path in a Manifest file
   Suppose that a program has been enclosed in a Jar file called helloWorld.jar, put
   directly in the D:\myprogram directory. We have the following file structure:

/home/user/myprogram/       (D:\myprogram\ -- in WINDOWS)
    |
    +--> helloWorld.jar
    |
    +--> lib/
          |
          *--> supportLib.jar

   The manifest file defined in this Jar file has this definition:
Main-Class: org.mypackage.HelloWorld
Class-Path: lib/supportLib.jar
<blank line>

   It's important that the manifest file ends with either a new line or carriage return.

   To launch the program, we can use the following command:
$> java -jar D:\myprogram\helloWorld.jar [app arguments]

   This will automatically start the org.mypackage.HelloWorld specified in the Main-Class with
   the arguments and user cannot replace this class name using java -jar options. The
   Class-Path meantime describes the location of the supportLib.jar file relative to the
   location of the helloWorld.jar. Neither absolute file path (which is permitted in
   -classpath parameter on the command line) nor jar-internal paths are supported. This
   particularly means that if main class file is contained in a jar,
   org/mypackage/HelloWorld.class must be a valid path on the root within the jar.

   Multiple classpath entries are separated with spaces:
Class-Path: lib/supportLib.jar lib/supportLib2.jar

OS specific notes
   Being closely associated with the file system, the command-line Classpath syntax
   depends on the operating system. For example:
     * on all Unix-like operating systems (such as Linux and Mac OS X), the
       directory structure has a Unix syntax, with separate file paths separated by a
       colon (":").
     * on Windows, the directory structure has a Windows syntax, and each file path must
       be separated by a semicolon (";").

   This does not apply when the Classpath is defined in manifest files, where each file
   path must be separated by a space (" "), regardless of the operating system.

Diagnose
   Application programmers may want to find out/debug the current settings under which the
   application is running:
System.getProperty("java.class.path")


Personal notes:
   Pay attention to the directory structure. It is wise that you put the compiled Java code
   (HelloWorldApp.class) in a separate folder when using java to execute the code with
   additional external libraries.

   Here is a simple example, assuming that you only have one Java source file
   (HelloWorldApp.java) to compile.

   Here is the directory

   D:\HelloWorldJava\lib\samplelib.jar (//external library)
   D:\HelloWorldJava\helloworldapp\HelloWorldApp.java (java source code)

   First step is to compile the source code (Windows environment shown here)
   Command prompt (Windows):

$> javac -classpath D:\HelloWorldJava;D:\HelloWorldJava\lib\samplelib.jar \
   D:\HelloWorldJava\helloworldapp\HelloWorldApp.java

    Note that you need to specify the full path to the java source file (*.java).

   Now you have a HelloWorldApp.class file. You should create a sub-folder and move this java
   class file to that sub-folder.

   Command prompt (Windows):
$> java -classpath D:\HelloWorldJava;D:\HelloWorldJava\lib\samplelib.jar helloworldapp.HelloWorldApp

   If you put the compiled class file in the directory D:\HelloWorldJava, you will likely end
   up with "Error: Could not find or load main class HelloWorldApp"

   On Linux platform, make sure the compiled java class is in the folder that has the correct
   package name. In the example below, the folder should be named "javaapplication1". You will
   see error if not.
package javaapplication1;
public class JavaApplication1 {
    /**
     * @param args the command line arguments
     */

    public static void main(String[] args) {
        // TODO code application logic here
        System.out.println("Hello world! Today is Wed, June 10th, 2015");
    }
}

Another example on Linux (3/15/2016 by Eric)
   Let's say you have a Java program to send Twitter direct message to someone and it has the
   following directory structure, with one source file (main class) and one external jar
   library

   /home/eric/MyDirectMessage/com/mydirectmessage/MyDirectMessage.java
   /home/eric/MyDirectMessage/lib/twitter4j305.jar

   Note that the header of the source file contains the following package information
   (directory info)
package com.mydirectmessage;

   ....

   Now, let's compile it first
$> javac -cp /home/eric/MyDirectMessage/lib/twitter4j305.jar \
   /home/eric/MyDirectMessage/com/mydirectmessage/MyDirectMessage.java

   Now, the java class file has been created in the same folder as the java source file
   "MyDirectMessage.java"

   Next, you could execute it
$> java -cp '/home/eric/MyDirectMessage:/home/eric/MyDirectMessage/lib/twitter4j305.jar' \
   com.mydirectmessage.MyDirectMessage

   Or, you could navigate to the target directory /home/eric/MyDirectMessage first, then
~/MyDirectMessage $> java -cp '.:./lib/twitter4j305.jar' com.mydirectmessage.MyDirectMessage
   That's it.

---
https://www.programcreek.com/2014/01/compile-and-run-java-in-command-line-with-external-jars/

Compile and Run Java in Command Line with External Jars


   The following example shows how to compile and run Java program in command line mode with
   external jars. It is developed under Linux.

   1. Compile & Run Java Program Without External Jar

   Let's create a simple hello world program "helloworld.java".
public class helloworld {
    public static void main(String[] args) {
        System.out.println("Hello!");
    }
}


   Compile & Run
$> javac helloworld.java
$> java helloworld

   Output
Hello!

   2. Compile & Run Java Program With External Jar
   Now let's download a third-party library and use some method from the library. In this
   case, I downloaded apache.commons.lang from here, and use the StringUtils.capitalize()
   method. The jar file is downloaded to "jars" directory which is located the same with
   helloworld.java.
import org.apache.commons.lang3.*;
public class helloworld {
    public static void main(String[] args) {
        String x = "abcd";
        System.out.println(StringUtils.capitalize(x));
    }
}


   Compile & Run
$> javac -cp ".:./jars/common.jar" helloworld.java
$> java -cp ".:./jars/common.jar" helloworld

   Output:
Abcd

   For Windows, ":" should be replaced with ";".


---
https://docs.oracle.com/javase/tutorial/java/package/managingfiles.html

Managing Source and Class Files

   Many implementations of the Java platform rely on hierarchical file systems to manage
   source and class files, although The Java Language Specification does not require this. The
   strategy is as follows.

   Put the source code for a class, interface, enumeration, or annotation type in a text file
   whose name is the simple name of the type and whose extension is .java. For example:
//in the Rectangle.java file
package graphics;
public class Rectangle {
   ...
}

   Then, put the source file in a directory whose name reflects the name of the package to
   which the type belongs:
.....\graphics\Rectangle.java

   The qualified name of the package member and the path name to the file are parallel,
   assuming the Microsoft Windows file name separator backslash (for UNIX, use the forward
   slash).
     * class name - graphics.Rectangle
     * pathname to file - graphics\Rectangle.java

   As you should recall, by convention a company uses its reversed Internet domain name for
   its package names. The Example company, whose Internet domain name is example.com, would
   precede all its package names with com.example. Each component of the package name
   corresponds to a subdirectory. So, if the Example company had a com.example.graphics
   package that contained a Rectangle.java source file, it would be contained in a series of
   subdirectories like this:
....\com\example\graphics\Rectangle.java

   When you compile a source file, the compiler creates a different output file for each type
   defined in it. The base name of the output file is the name of the type, and its extension
   is .class. For example, if the source file is like this
//in the Rectangle.java file
package com.example.graphics;
public class Rectangle {
      . . .
}

class Helper{
      . . .
}

   then the compiled files will be located at:
<path to the parent directory of the output files>\com\example\graphics\Rectangle.class
<path to the parent directory of the output files>\com\example\graphics\Helper.class

   Like the .java source files, the compiled .class files should be in a series of directories
   that reflect the package name. However, the path to the .class files does not have to be
   the same as the path to the .java source files. You can arrange your source and class
   directories separately, as:
<path_one>\sources\com\example\graphics\Rectangle.java
<path_two>\classes\com\example\graphics\Rectangle.class

   By doing this, you can give the classes directory to other programmers without revealing
   your sources. You also need to manage source and class files in this manner so that the
   compiler and the Java Virtual Machine (JVM) can find all the types your program uses.

   The full path to the classes directory, <path_two>\classes, is called the class path, and
   is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path
   to your .class files by adding the package name to the class path. For example, if
<path_two>\classes

   is your class path, and the package name is
com.example.graphics,

   then the compiler and JVM look for .class files in
<path_two>\classes\com\example\graphics.

   A class path may include several paths, separated by a semicolon (Windows) or colon (UNIX).
   By default, the compiler and the JVM search the current directory and the JAR file
   containing the Java platform classes so that these directories are automatically in your
   class path.

Setting the CLASSPATH System Variable
   To display the current CLASSPATH variable, use these commands in Windows and UNIX (Bourne
   shell):
In Windows:   C:\> set CLASSPATH
In UNIX:      $> echo $CLASSPATH

   To delete the current contents of the CLASSPATH variable, use these commands:
In Windows:   C:\> set CLASSPATH=
In UNIX:      $> unset CLASSPATH; export CLASSPATH

   To set the CLASSPATH variable, use these commands (for example):
In Windows:   C:\> set CLASSPATH=C:\users\george\java\classes
In UNIX:      $> CLASSPATH=/home/george/java/classes; export CLASSPATH


---
http://deeplearning.lipingyang.org/2017/05/24/run-java-program-on-terminal-with-external-library-jar/

Run Java program on terminal with external library JAR on Ubuntu

   This post provides the instructions how to run a Java program from Terminal with external
   library JAR.

   When using Eclipse to code Java program, which imports some external JAR library, we
   can use Eclipse to compile/build/run the program.

   But if we would like to run our Java program that used External library Jars from Terminal,
   where should we put those JAR files, and how to build and run the program.
     * For compiling the java file having dependency on a jar

$ javac -cp .:/path/to/jar/file Myprogram.java
     * For executing the class file

$ java -cp .:/path/to/jar/file Myprogram

   Note: cp in the above commands refers to classpath, which is a parameter in Java
   Virtual Machine or the Java compiler that specifies the location of user-defined
   classes and packages. The parameter may be set either on the command-line, or
   through an environment variable.

   For example,  if your current working directory in terminal is src/report/
$ javac -cp .:src/external/myImportedJarfile.jar myJavaProgram.java

$ java -cp .:src/external/myImportedJarfile.jar myJavaProgram

   If you have multiple jar files a.jar,b.jar and c.jar. To add them to classpath
$javac -cp .:a.jar:b.jar:c.jar HelloWorld.java

$java -cp .:a.jar:b.jar:c.jar HelloWorld

   Note: on Windows, use ";" instead of ":"

   Using Java 6 or later, the classpath option supports wildcards. Note the following:
     * Use straight quotes (")
     * Use *, not *.jar

   Wild cards were introduced from Java 6. Class path entries can contain the basename
   wildcard character *, which is considered equivalent to specifying a list of all the files
   in the directory with the extension .jar or .JAR.
java -cp "lib/*" -jar %MAINJAR%

   If you need only specific jars, you will need to add them individually. The classpath
   string does not accept generic wildcards like Jar*, .jar, hiber etc.

   Example

   The following entry does not work:
java -cp "Halo.jar;lib/*.jar" ni.package.MainClass

   Correct entry is :
java -cp "Halo.jar;lib/*" ni.package.MainClass


---
https://www.programminglogic.com/how-to-compile-and-run-java-programs-with-external-libraries/

How to Compile and Run Java Programs with External Libraries

   If you use an IDE like Eclipse to develop your Java programs then using external libraries
   is pretty straight forward. You just need to add the JAR file to your project and then
   right click on it and add it to the build path, and the IDE will do the rest of the work
   for you.

   If you are writing and running your programs from the command line, however, you'll need to
   add the classpath manually.

   Let's suppose you want to use the Apache Lang library. First you need to download the tar
   file and extract it to the folder of your application. Then you can compile it like this:
$> javac -cp .:commons-lang3-3.2/commons-lang3-3.2.jar MyClass.java

   And then run it like this:
$> java -cp .:commons-lang3-3.2/commons-lang3-3.2.jar MyClass

   The tricky part is the .: before the jar file when running the program. Most people forget
   that, and if you do you'll get an error.


---
https://www.jitendrazaa.com/blog/java/compile-and-run-java-program-in-package-from-command-line/

Compile and run Java program in package from command line
April 14, 2011

   How to Compile JAVA Program in Package from command line
   The topic is very easy and i am sure that lots of java programmer already know how to
   compile java program existing in package. However there are users who frequently works on
   eclipse, netbeans or any other IDE and don't know that how the program actually works
   behind the IDE. So this article basically emphasizes on basics of Java Compilation.

   Consider following directory structure:
   Exec Jar/
   |
   +--> classes/
   +--> src/
        |
        +--> com/
             |
             +--> g2/
                  |
                  +--> ExecJar

   Our java files will be in "src" folder. I want all the class files in folder "classes" and
   currently i am in folder "Exec Jar".

   Consider below Java Files:

   Person.java
package com.g2.ExecJar;

public class Person {
    private String name;
    private int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}


   Start.java
package com.g2.ExecJar;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Start {

    public static void main(String[] args) {

        try {
            InputStreamReader io = new InputStreamReader( System.in );
            BufferedReader read = new BufferedReader(io);

            System.out.println("Enter Name");
            Person p = new Person();
            p.setName(read.readLine());

            System.out.println("Enter Age");
            p.setAge(Integer.parseInt( read.readLine()) );

            System.out.println( "-------- You have Eneterd --------- " );
            System.out.println("Name : " + p.getName());
            System.out.println("Age : " + p.getAge());

            System.out.println( "---------- Progarm run by executable jar ------------ ");

        } catch (IOException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            System.out.println("Age entered is not in correct format");
        }
    }
}

   Run below steps to compile and run java programs from command line:
1  D:\Exec Jar $> javac -d "classes" "src/com/g2/ExecJar/Person.java"
2  D:\Exec Jar $> javac -d "classes" -classpath "classes" "src/com/g2/ExecJar/Start.java"
3  D:\Exec Jar $> java -classpath "classes" com.g2.ExecJar.Start

Output:
$> Enter name
$> ShivaSoft
$> Enter Age
$> 25
$> -------- You have Eneterd ---------
$> Name : ShivaSoft
$> Age : 25
$> ---------- Progarm run by executable jar ------------
$>

   Command Explanation :
   Line 1 :
     * "javac" is the java compiler available in bin folder of the jdk.
     * "-d" stands for the "directory". it explains compiler that where the class files should
       be created.
     * Last argument is the Complete path, where the java file exists.

   Line 2 :
     * in line 2, you have noted one extra parameter "-classpath". As class "Start" depends on
       class "Person" and its class file is not in the same directory.  Therefore we need to
       explicitly tell compiler that where it can find required class files.
     * To include more than one classpath use semicolon ";".  Example:  -classpath
       path1;path2;path3

   Line 3 :
     * It will run the program. her we have to again specify that where all the class files
       exist with the help of parameter "-classpath"

   The complete set of argument supported by the java compiler can be found on the Oracle
   site.

---
