filename: jv_howto-shift-to-functional-programming_20220530.txt
https://medium.com/swlh/super-java-how-to-shift-to-functional-programming-in-java-a13d3176cc61

Java Chapter 3 : How to Shift to Functional Programming in Java

   In my [**1previous post, I discussed what Functional Programming is and the benefits of adopting
   Functional Programming in Object-Oriented languages. Now, let's get our hands dirty and apply

   Before I begin, I want to clarify what I mean by adopting Functional Programming. Some people can say
   that they've adopted Functional Programming by simply implementing first-class functions or pure
   functions. However, I think it's only half correct. Adopting Functional Programming is not only using
   the techniques of Functional Programming but understanding the conceptual difference between
   Object-Oriented Programming and start programming in a functional way. To understand what it is to
   program in a functional way, we have to know what declarative and imperative programming is.
	 * There are two ways to program: declarative and imperative programming
	 * Functional Programming is a type of declarative programming
	 * Object-Oriented Programming is a type of imperative programming

   Both are simply different approaches to solve the same problem.

Imperative vs Declarative Programming
   Imperative programming is programming how to do something. It's like a sequence of orders to modify
   the state. Think of how a for-loop works. You initialize a state and perform some kind of operation
   to change the state for each iteration. I'll give you an example of imperative programming and
   compare it with a declarative programming version.

public static List<String> getNames(List<String> nameList) {
	List<String> newNameList = new ArrayList<String>();
	for (int i = 0; i < nameList.size(); i++) {
		String name = nameList.get(i);
		if (name.length() > 5) {
			newNameList.add(name.toUpperCase());
		}
	}
	return newNameList;
}

   Assume say we have a list of names. We want a new list that only contains names longer than 5
   characters after capitalizing them. Probably the most intuitive way is to use a for-loop.

   Let's interpret what we did in the code above. We had to manually implement a way to iterate the list
   (using for loop), check each name's length, capitalize and add it to the new list.

   In other words, we iterated each element and
	 * filtered the elements longer than 5 characters
	 * converted the elements to uppercase, and
	 * added the elements to a list.

   What if there's a way that automates the process using predefined functions? That's how declarative
   programming works. Declarative programming is programming what to do instead of how. Processes such
   as filtering, converting, and adding can be represented as functions.

   Java provides Stream API as a functional approach to process collections. A stream can iterate
   itself, so we don't need to implement how to iterate the list. It works like a pipeline that can take
   in a number of operations.

   The example above can be programmed declaratively using Stream API.

public static List<String> getNames2(List<String> nameList) {
	return nameList
			.stream()
			.filter(name -> name.length() > 5)
			.map(name -> name.toUpperCase())
			.collect(Collectors.toList());
}

   Instead of implementing how to filter, convert, and add the elements in imperative programming, we
   can now use methods provided by the Stream API such as filter(), map(), and collect() and customize
   them by passing parameters. There are many more methods provided by the Stream API so I recommend
   looking them up.

   I'll quickly go over filter(), map(), and collect().

Filter()
   It takes a predicate as a parameter and returns a stream that matches the predicate. To recap, a
   predicate is a predefined functional interface that takes in one parameter and returns a boolean.

   Here are some examples using filter():

// nums = [1, 2, 3, 4, 5, 6]
nums.stream().filter(num -> num < 3);
nums.stream().filter(num -> num % 10 == 0);

// names = ["Boy In Space", "Trevor Daniel", "Lil Peep", "Payday", "Joji"]
names.stream().filter(name -> name.startsWith("BOY"));
names.stream().filter(name -> name.contains("Space"));

Map()
   It takes a Function as a parameter and returns a stream that applied the given function to each
   element. Here, Function is referring to a predefined functional interface that takes in one parameter
   and returns a value. Note that filter() and map() are examples of higher-order functions.

   Here are some examples using map():

// nums = [1, 2, 3, 4, 5, 6]
nums.stream().map(num -> num * 2)

// names = ["Boy In Space", "Trevor Daniel", "Lil Peep", "Payday", "Joji"]
names.stream().map(name -> name.toLowerCase())
names.stream().map(name -> name.substring(2))
names.stream().map(name -> name.charAt(1))

Collect()
   It takes Collector as a parameter and puts the iterated elements in the Collector. We can use
   Collectors which are Collector implementation provided by Java.

   Here are some examples using collect:

// nums = [1, 2, 3, 3, 5]
List<Integer> numList = nums.stream().map(num -> num * 2).collect(Collectors.toList());
// [4, 6, 6, 10]
Set<Integer> numSet = nums.stream().map(num -> num * 2).collect(Collectors.toSet());
// [4, 6, 10]

// names = ["Boy In Space", "Trevor Daniel", "Lil Peep", "Payday", "Joji"]
List<String> nameList = names.stream().map(name -> name.toLowerCase()).collect(Collectors.toList());
// [boy in space, trevor daniel, lil peep, payday, joji]
Set<String> nameSet = names.stream().map(name -> name.toLowerCase()).collect(Collectors.toSet());
// [lil peep, boy in space, joji, trevor daniel, payday]


   If you noticed that what filter() and map() do is different from what collect() does, good catch! In
   fact, there are two types of Stream operations: terminal and non-terminal operation. Filter() and
   map() are examples of non-terminal operation and collect() is an example of terminal operation.
	 * A Terminal operation returns a value.
	 * A Non-Terminal operation, also called an intermediate operation, performs certain operations and
	   returns a new stream. Many non-terminal operations take functional interface as their parameter
	   and this is why we can use lambda expressions as used in the examples above.

Conclusion
   Functional Programming isn't simply using lambda expressions or Stream API to implement first-class
   functions or pure functions, but programming declaratively. According to Functional Thinking by Neal
   Ford, transitioning from imperative to declarative programming is "learning where to apply the
   higher-level abstractions and stop going immediately for detailed implementations." It's really about
   where and how to abstract your code to make your code more concise and precise. Indeed, Functional
   Programming isn't always the answer to write good code. It is more important to understand the
   differences and be flexible to use both ways appropriately.


---
[**1]
https://levelup.gitconnected.com/super-java-functional-programming-in-object-oriented-programming-84dab44a915f

Java Chapter 2 : Why Functional Programming in Object-Oriented Programming

   Please read [**2]my previous post before you continue reading.

   In my previous post, I showed how using Functional Interface and Lambda Expression adds syntactic
   sugar to the code. It's a good enough reason why we should consider using those. However, is that all
   they offer? There must be more reasons why Java introduced these concepts.

   To get straight to the answer, Functional Interface and Lambda Expression allow us to adopt
   Functional Programming in Java. Wait a minute. Wasn't Java an Object-Oriented programming language?
   What is Functional programming in the first place and why do we have to adopt Functional Programming
   in Java?

   In this post, I will start by going over what Object-Oriented Programming language is and explore the
   motivation behind adopting Functional Programming in Java. Then, I will outline some of the key
   concepts of Functional Programming.

I. Why use functional programming in Java
   Java is an Object-Oriented Programming language. What does Object-Oriented Programming (OOP) mean
   anyway? You probably know that OOP is a way of programming where we define objects with attributes,
   assign data, and use methods to manipulate the data. You probably are also familiar with the OOP
   concepts: encapsulation, abstraction, polymorphism, and inheritance. Let's recap.
	 * Encapsulation is wrapping the data and code to manipulate in a single unit. Encapsulation is
	   achieved through data hiding to control data flow.
	 * Abstraction is hiding logic. Think about how an interface work. You don't need to know how it
	   does but what it can do.
	 * Polymorphism is the ability to take many forms. It allows performing the same action in different
	   ways usually achieved by inheritance.
	 * Inheritance is extending a class. The subclass which extends the superclass inherits the
	   superclass's public methods and variable.

   If we think about why we came up with these concepts, we can understand OOP better. Since data in
   Java objects are mutable, it is prone to side effects and unwanted changes. This is why we use
   encapsulation and abstraction to control who can view and edit the data. Since the building block for
   OOP is an object, we often end up with extensive boilerplate codes to create every single object.
   This is why we use polymorphism and inheritance to achieve code reusability and extensibility.

   What if there is another way to tackle some of the underlying issues in OOP regarding mutable state
   and long boilerplate code? This is where Functional Programming comes into play.

Introducing Functional Programming
   Functional Programming (FP) is a style of programming computation as math functions. FP has no state
   nor mutable variables. How is this possible? It's similar to using all variables with the final
   keyword. Initially, FP has not received much attention because FP used a lot of memory to be
   stateless and memory was very expensive. However, memory is no longer expensive. More ironically,
   this particular trait has made FP more appealing. As modern software programs get more and more
   complex, the demand for multithreading and parallel processing has increased. Since FP has no state,
   there's no blocking or concurrency issue.

   FP removes moving parts and optimizes operation for concise and error-free code. Wouldn't adopting
   this particular way of coding (no state and no mutable variables) in OOP make code more effective and
   efficient?

II. How Functional Programming works
   To use Functional Programming in Java, let's dive into the fundamentals of functional programming.
   The two key concepts of FP are first-class functions and pure functions.

First-class functions
   First-class functions mean that functions are treated as first-class citizens. First-class citizens
   support all operations such as being assigned to a variable, passed to a parameter, and returned as a
   value. This property enables higher-order functions. Higher-order functions are functions that
   receive a function as an argument and return a function. In FP, higher-order functions are used for
   function composition and currying.

Pure Functions
   A function is a pure function when the execution has no side effect and the return value only depends
   on the input.

   A function has a side effect when it changes a state outside of the function. If the execution of a
   function changes the member variable of a class or an object or even an external system such as
   databases, the function has a side effect.

   Let's look at some examples.

public class Tiger {
	public String cry (String sound) {
		return "Tiger cries" + sound;
	}
}

   cry has no side effects because it doesn't change the state outside of a function. The return value
   only depends on the input sound.

   However, cry2 below has side effects.

public class Tiger {
	String tigerCry = "Tiger cries ";
	public String cry2 (String sound) {
		tigerCry += sound;
		return tigerCry;
	}
}

   When we execute tiger.cry2("roar"), it updates the member variable tigerCry to "Tiger cries roar."
   This violates the pure function's trait to not change the state outside of the function.

Tiger tiger = new Tiger();
System.out.println(tiger.cry("roar"));

   Also since the value of tigerCry is changed, the execution of the code below returns "Tiger cries
   roar howl." Here, the output not only depends on the input but also on the member variable, tigerCry.
   This goes against the pure function's trait where return value should only depend on the input

System.out.println(tiger.cry("howl"));

   To clarify, the methods can have local variables, to temporally store its state, It just can't
   reference any member variables of the class or the objects.

III. Lambda Expression and Functional Programming
   Lambda Expression and functional interface in Java is introduced so that functional programming can
   be more easily adopted in Java. Using Lambda expression, we can mimic the functional programming
   syntax of assigning a method to a variable or passing it to a parameter. It almost seems like we are
   treating functions as first-class citizens. However, technically speaking, lambda expression still
   implements a functional interface. Thus, it is an object, not a function.

   Before I end this post, I want to share a quote that capsulizes OOP and FP.

	 OO makes code understandable by encapsulating moving parts.
	 FP makes code understandable by minimizing moving parts.


---
[**2]
https://medium.com/swlh/super-basic-java-anonymous-class-functional-interface-and-lambda-expression-fba411a787

Java Chapter 1 : Anonymous Class, Functional Interface, and Lambda Expression

   I like using Lambda Expression because it makes my code cleaner. However, I realized I didn't fully
   understand why and how Lambda Expression works. In this post, I'd like to share what I learned about
   Anonymous Class, Functional Interface, and Lambda Expression.

Anonymous Inner Class
   Suppose you have an interface Animal.

interface Animal {
	public String cry(String sound);
}

   Let's declare a class Pig that implements the interface Animal.

class Pig implements Animal {
	@Override
	public String cry(String sound) {
		return "Pig " + sound;
	}
}

   We can now instantiate this class with the new keyword.
Animal pig = new Pig();

   This was wordy. What if there's a much shorter way? An Anonymous Class allows you to declare and
   instantiate a class at the same time.

Animal cat = new Animal() {
	@Override
	public String cry(String sound) {
		return "Cat " + sound;
	}
};

   As you can see, the Anonymous Inner class is self-explanatory. It is an inner class because it is a
   class within a class. It is anonymous because it has no name. It pretty much looks like a constructor
   except that its class definition is included in its body.
	 * Unlike a local class, a declaration, an Anonymous Class is an expression
	 * Use an Anonymous Class when you want to use the local class once
	 * Anonymous class usually extends a subclass or implement an interface

Functional Interface
   Functional Interface is simply an interface that has exactly one abstract method. For example, the
   interface Animal is a Functional Interface.
	 * You can annotate functional interfaces with @FunctionalInterface
	 * Functional Interface is also called Single Abstract Method (SAM) Interface

Functional Interface and Lambda Expression
   As you can see, using Anonymous class makes your code much concise. What if you can make it even
   shorter? When implementing a functional interface, you can use Lambda Expression.

Animal tiger = (sound) -> "Tiger " + sound;

   How is this possible? Tiger's type is Animal and since Animal is an interface with only one method,
   the compiler is smart enough to know that we are overriding sound(). Compare how short the code is
   compared to Pig Class.

   The basic syntax for Lambda expression is as simple as this:

parameter -> expression

   When there is one or more parameter, you can add like this:

(param1, param2) -> expression

   No matter how you implemented them, all animals can be called exactly the same!

System.out.println(pig.cry("oink"));   // Pig oink
System.out.println(cat.cry("meows"));  // Cat meows
System.out.println(tiger.cry("roar")); // Tiger roar

Example 1: Predefined Functional Interfaces
   In fact, Java has provided us with several functional interfaces.
	 * Supplier<T> represents a supplier, which returns a value, type T.
	 * Consumer<T> represents an operation that takes one parameter, type T, and consumes T. It returns
	   void.
	 * Function<T, R> represents a function that takes one parameter, type T, and returns a value, type
	   R.
	 * Predicate<T> represents a boolean-valued function that takes one parameter, type T, and returns a
	   boolean.
	 * BiFunction<T, U, R> represents a function that takes two parameters, type T and type U, and
	   returns a value, type R.

   Let's try using one of these predefined functional interfaces for the Animal example above. I've
   slightly tweaked the example above.

public class AnimalFarm {

	public String sayHello(Animal animal, String sound) {
		return animal.cry(sound);
	}

	public static void main(String[] args) throws Exception {

		AnimalFarm animalFarm = new AnimalFarm();
		Animal tiger = (sound) -> "Hi, Tiger " + sound;
		System.out.println(animalFarm.sayHello(tiger, "ROARR"));
	}
}

interface Animal {
	public String cry(String sound);
}

   The method cry(String sound) takes in one argument, a String, and returns a String value. This is
   what Function<String, String> does!

   We can substitute Animal interface with Function interface.

public class AnimalFarm {

	public String sayHello(Function<String, String> function, String sound) {
		return function.apply(sound);
	}

	public static void main(String[] args) throws Exception {

		AnimalFarm animalFarm = new AnimalFarm();
		class DoggyOne implements Function<String, String> {
			public String apply(String t) {
				return "Doggy One " + t;
			}
		}
		DoggyOne doggyOne = new DoggyOne();
		System.out.println(animalFarm.sayHello(doggyOne, "barks"));
	}
}


   Or using Anonymous class, we can make it shorter.

public class AnimalFarm {

	public String sayHello(Function<String, String> function, String sound) {
		return function.apply(sound);
	}

	public static void main(String[] args) throws Exception {

		AnimalFarm animalFarm = new AnimalFarm();
		Function<String, String> doggyTwo = new Function<String, String>() {
			@Override
			public String apply(String t) {
				return "Doggy Two also " + t;
			}
		};
		System.out.println(animalFarm.sayHello(doggyTwo, "barks"));
	}
}

   Or using Lambda Expression, we can make it even shorter.

public class AnimalFarm {

	public String sayHello(Function<String, String> function, String sound) {
		return function.apply(sound);
	}

	public static void main(String[] args) throws Exception {

		AnimalFarm animalFarm = new AnimalFarm();
		Function<String, String> doggyThree = (sound) -> "Even Doggy Three " + sound;
		System.out.println(animalFarm.sayHello(doggyThree, "barks"));
	}
}

Example 2: Real Java Example - stream().forEach()
   You might have used stream().forEach before. Simply put, it is a stream(💦 🦦 💦) of data, which you can
   apply many operations. It's a more elegant way of using for-loops or for-each. Internally, Java uses
   functional interface to provide a simple and concise Stream API.

   Suppose you have a list of Integers:

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

   You want to multiply each element by 10 and print each of them. You can easily do this, using one of
   Stream's method, forEach().

numbers.stream().forEach(t -> System.out.println(t * 10));

   Doesn't this syntax look familiar to what we've been doing? In fact, forEach takes a parameter type
   of Consumer<T>.

   So basically, you can write the same code using an Anonymous class!

Consumer<Integer> consumer = new Consumer<Integer>() {
	@Override
	public void accept(Integer t) {
		System.out.println(t * 10);
	}
};

numbers.stream().forEach(consumer);

The Ultimate Goal - Functional programming
   Clearly, using Functional Interface and Lambda Expressions add syntactic sugar to your code. It lets
   you use functions as arguments or return a function as a result without having to write verbose code.
   This is similar to how Functional Programming treats functions as first-class citizens. So besides
   making your code cleaner, it helps you to achieve some benefits of functional programming.


---

