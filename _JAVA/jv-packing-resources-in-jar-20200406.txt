filename: jv_packing_resources_in_jar_20200406.txt
https://www.cefns.nau.edu/~edo/Classes/CS477_WWW/Docs/pack_resources_in_jar.html

Packaging and accessing run-time resources in a runnable Jar

Introduction
   Often times we will work on a Java project where certain resources (e.g. images, sounds, movie clips)
   will be required by our program at runtime. For compactness, we would like (a) the Java program to be
   packaged as a runnable Jar, and (b) all resources needed by the program to be packaged neatly inside
   the jar file. As it turns out, this is simple in in concept, but more than a little tricky to
   implement in practice. Generally, your runnable jar'ed java program will (when running) simply look
   locally in the file system for required resource files. One way to make sure they are there is to
   (manually or [**1]automatically) place them there in a folder - but this is definitely less than
   elegant. Ideally, your program would simply access the resource files right out of the jar package;
   this makes complete sense and is in line with the spirit of jar packaging. This tutorial is created
   to help point you to number of approaches for doing this.
   Here is a general overview of what we need to do to achieve our goal:
     * Package the required resource files inside the jar file; it's easiest if you put them in the same
       package.
     * Modify our code to explicitly access the resources as we need them.

   One question I haven't answered to my satisfaction yet is whether this same modified resource access
   code will also work during development. The implications from Mr. Baier's experience (see further
   down) is "no, once you change it, it will only run from Jar", meaning it's the very last modification
   you want to do before submitting your app. Kind of unfortunate...and doesn't actually make much
   sense, ie, the class loader should be viable whether or not your running from jar. Wouldn't be the
   first thing though. I'll try to explore this when I get some free minutes...

Overview of the technique:
   Packaging an application and all of its resources in a single runnable Jar file is clean and
   efficient. However, the technique for successfully accessing images or other resource files inside of
   the jar from inside your code is not at all self evident --- until you hit on the general principle
   of how to do it: calling on the class loader for some class you are using (which KNOWS where it's
   class is .... ie, in the jar file....i.e., this is also where the resource files are) to help you
   access the desired resource files. Here are a couple of code examples:

   Accessing a file as an input stream,
   e.g., to load a XML file, you could use the code below. Assume the file "properties.xml" is inside of
   the "application.jar" file, that is stored in the "conf" package. Here we tell the classloader to
   return the resource as a stream.

   ...
   ClassLoader cl = this.getClass().getClassLoader();
   java.io.InputStream in = cl.getResourceAsStream("conf/properties.xml");
   ...

   Accessing a resource file, e.g., image, sounds, etc.
   The code here is just slightly different in that we simply ask the classloader to return us resource
   file directly. The example below shows how to create an image icon to illustrate the concept.

   ...
   // When the image file is in the same package of the class 'SearchTab'.
   new ImageIcon(SearchTab.class.getResource("magnifyingGlass.png");

   // When the image file is in another package of the jar file.
   ClassLoader cl = this.getClass().getClassLoader();
   JButton btRemove = new JButton(new ImageIcon(cl.getResource("images/remove.png")));

Reading versus Writing.
   It does not appear that the Java API provides any way to MODIFY(write to) files inside a Jar file ---
   it's a read-only container. This does more or less make sense: it's supposed to be an archive, not
   some sort of database or pseudo-filesystem.

Another take on the same thing
   S. Baier found a similar solution to the problem, i.e., still uses the classloader to help find the
   resources. Just slightly different code. Here is what he came up with:

   Initializations:
   static ImageIcon squareL;
   static ImageIcon squareM;
   static ImageIcon squareS;

   In class constructor:
   URLClassLoader urlLoader=(URLClassLoader)this.getClass().getClassLoader();
   squareL = new ImageIcon(urlLoader.findResource("squareL.GIF"));
   squareM = new ImageIcon(urlLoader.findResource("squareM.GIF"));
   squareS = new ImageIcon(urlLoader.findResource("squareS.GIF"));

   Notes:
     * Capitalization on extension is important (.GIF not .gif).
     * Doesn't work for subfolders, just mash all of it in one folder.
     * Don't misspell file names (duh!), but I did it!
     * Source of this information: http://forums.sun.com/thread.jspa?threadID=330269
     * Once the image loading is changed to this you can only run the program from the jar file. If you
       try to run it normally (say from your IDE) it will throw errors. Thus, these changes should be
       saved for last. Alternatively, standard image loading code could be retained in the source and
       used during development, while JAR file image loading code could be written but commented out. At
       final packaging, you then uncomment the Jar-loading code, while commenting out the "standard
       loading" code.


---
[**1]
https://www.cefns.nau.edu/~edo/Classes/CS477_WWW/Docs/unpack_tutorial.html

Unpacking a required resource library in a stand-alone JAR-file at Runtime

   Oftentimes we will work on a Java project where certain resources (e.g. images, sounds, movie clips)
   will be required by our program at runtime. Typically, we can just have a library folder outside of
   our runnable jar, referenced by the class-path, which will contain our resources. This can be a major
   problem, however, when we want to have a standalone java application run with just the executable JAR
   file. There are several complicated solutions out there for single JAR packaging, but for a quick,
   easy, and pain-free solution we can have our program automatically "unpack" its own library folder!
   This tutorial is created to help you do just that.
   Here is a general overview of what we need to do to achieve our goal:
     * Create the desired folder* on the local machine (ex., lib)
     * Get a handle on the resource inside our JAR
     * Write this resource from the JAR file into an external file
     * Start the main application**

   *Make sure that this folder coincides with the class-path in your runnable JAR's manifest file. In
   the case of netbeans library, you will want to use "lib" as your folder.
   **In order to not crash on start-up, we need to unpack before we run the main class.
   First, we need to create the desired library folder in the JAR's environment. This is done using the
   File class' mkdir() command. For example, lets make a "lib" directory:
  new File("lib").mkdir();

   The code above will create the folder "lib" in whatever directory the JAR is being run from.
   Second, we need to get a handle on the resource in our JAR file in stream format. This can be done
   simply with the getClass().getResourceAsStream() method, as illustrated below:
  InputStream input = getClass().getResourceAsStream("/lib/swing-layout-1.0.jar");

   This code will get an InputStream from the given resource. In this case, the file
   "swing-layout-1.0.jar" is located in the "lib" folder of our runnable JAR.
   Third, we need to take this InputStream and write it to an actual file. This can be done with a
   simple method that utilizes a FileOutputStream to write the file to disk. This method, setFile, and
   an example usage are shown below:
  /**
   *Writes a file given the inputstream and filename.
   *Used for unpacking the JAR.
   *
   *@param io       Source InputStream to be written to a file
   *@param fileName Name of file to be written
   */
  public void setFile(InputStream io, String fileName)
  throws IOException {
    FileOutputStream fos = new FileOutputStream(fileName);
    byte[] buf = new byte[256];
    int read = 0;
    while ((read = io.read(buf)) > 0) {
      fos.write(buf, 0, read);
    }
  }

  setFile(getClass().getResourceAsStream("/lib/swing-layout-1.0.jar"),"lib/swing-layout-1.0.jar");


   Lastly, start the main application. Now that the libraries are in place, the program should be up and
   running!


---
