filename: bash_howto-define-script-with-variable-number-of-arguments_20180917.txt
https://stackoverflow.com/questions/10307280/how-to-define-a-shell-script-with-variable-number-of-arguments

How to define a shell script with variable number of arguments?

   I would like to define a simple abbreviation of a call to gs (ghostscript) via a shell script. The
   first argument(s) give all the files that should be merged, the last one gives the name of the output
   file. Obviously, the following does not work (it's just for showing the goal):
#!/bin/sh
gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOUTPUTFILE=$last $1 $2 ...

   How can this be done?

***
   The bash variables $@ and $* expand into the list of command line arguments. Generally, you will want
   to use "$@" (that is, $@ surrounded by double quotes). This will do the right thing if someone passes
   your script an argument containing whitespace.

   So if you had this in your script:
outputfile=$1
shift
gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOUTPUTFILE=$outputfile "$@"

   And you called your script like this:
myscript out.pdf foo.ps bar.ps "another file.ps"

   This would expand to:
gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf foo.ps bar.ps "another file.ps"


***
     * Thanks larsks. Is it possible to have the output file name as the last (not the first) argument?

***
     * Marius Hofert: You can't easily shift off the last element, so that is a little more tricky.
       Something like this: outputfile=${@: -1}; args=("${@:1:$((${#@}-1))}").

***
   To pass the output file as the last argument, use an array:
ARGS=("$@")
# Get the last argument
outputfile=${ARGS[-1]}
# Drop it from the array
unset ARGS[${#ARGS[@]}-1]

exec gs ... -sOUTPUTFILE=$outputfile "${ARGS[@]}"

   Before version 4, bash didn't allow negative subscripts in arrays (and produced the error reported by
   Marius in the comments), so if you're using 3.x you need to use the much uglier
outputfile=${ARGS[${#ARGS[@]}-1]}

   This works for bash 4.x as well.

***
     * I obtain: gsMerge infile1.pdf infile2.pdf all.pdf /usr/bin/gsMerge: line 4: ARGS: bad array
       subscript **** Unable to open the initial device, quitting. – [53]Marius Hofert Apr 25 '12 at
       5:59
     * @Marius: You're probably using an old version of bash. I updated the answer to cover that case.
       – [54]Idelic Apr 25 '12 at 14:48
     * Thanks, Idelic, very good. – [55]Marius Hofert Apr 25 '12 at 15:08
     * Just to add: On Mac OS X 10.10.3, I updated bash to 4.3.33 but still needed to use
       outputfile=${ARGS[${#ARGS[@]}-1]} for it to work. In Debian Linux with bash 4.3.30
       outputfile=${ARGS[-1]} worked. – [56]Marius Hofert Jun 5 '15 at 12:06

***
   To access the last argument, in addition to Idelic's answer above, you can also do:
echo "${@: $#}"

   This reads all of the arguments and prints them starting from the last one. This way, you can also
   access the N last arguments, for example for the last three arguments:
echo "${@: $#-2}"

$ ./script "what    does" "this  script" "do" "?"
this  script do ?

***
     * Wow, this is awesome. Where is this defined in the manual? And is there a range version of this?
       – [61]i336_ May 7 '17 at 1:40
     * See this answer: [https://stackoverflow.com/questions/1335815/how-to-slice-an-array-in-bash] 
	   link about splicing arrays, the above answer is simply using that to slice the array of input arguments.
	   – [63]Ran Lottem May 8 '17 at 11:29

---
https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html

3.4.2 Special Parameters
The shell treats several parameters specially. These parameters may only be referenced; assignment to them is
not allowed.

*
($*) Expands to the positional parameters, starting from one. When the expansion is not within double quotes,
each positional parameter expands to a separate word. In contexts where it is performed, those words are
subject to further word splitting and pathname expansion. When the expansion occurs within double quotes,
it expands to a single word with the value of each parameter separated by the first character of the IFS
special variable. That is, "$*" is equivalent to "$1c$2c…", where c is the first character of the value of the
IFS variable. If IFS is unset, the parameters are separated by spaces. If IFS is null, the parameters are joined
without intervening separators.

@
($@) Expands to the positional parameters, starting from one. When the expansion occurs within double quotes,
each parameter expands to a separate word. That is, "$@" is equivalent to "$1" "$2" …. If the double-quoted
expansion occurs within a word, the expansion of the first parameter is joined with the beginning part of the
original word, and the expansion of the last parameter is joined with the last part of the original word. When
there are no positional parameters, "$@" and $@ expand to nothing (i.e., they are removed).

#
($#) Expands to the number of positional parameters in decimal.

?
($?) Expands to the exit status of the most recently executed foreground pipeline.

-
($-, a hyphen.) Expands to the current option flags as specified upon invocation, by the set builtin command,
or those set by the shell itself (such as the -i option).

$
($$) Expands to the process ID of the shell. In a () subshell, it expands to the process ID of the invoking
shell, not the subshell.

!
($!) Expands to the process ID of the job most recently placed into the background, whether executed as an
asynchronous command or using the bg builtin (see Job Control Builtins).

0
($0) Expands to the name of the shell or shell script. This is set at shell initialization. If Bash is invoked
with a file of commands (see Shell Scripts), $0 is set to the name of that file.
If Bash is started with the -c option (see Invoking Bash), then $0 is set to the first argument after the
string to be executed, if one is present. Otherwise, it is set to the filename used to invoke Bash, as given
by argument zero.

_
($_, an underscore.) At shell startup, set to the absolute pathname used to invoke the shell or shell script
being executed as passed in the environment or argument list. Subsequently, expands to the last argument to
the previous command, after expansion. Also set to the full pathname used to invoke each command executed and
placed in the environment exported to that command. When checking mail, this parameter holds the name of the
mail file.


---
https://stackoverflow.com/questions/1335815/how-to-slice-an-array-in-bash

How to slice an array in Bash

Looking the "Array" section in the bash(1) man page, I didn't find a way to slice an array.

So I came up with this overly complicated function:

#!/bin/bash

# @brief: slice a bash array
# @arg1:  output-name
# @arg2:  input-name
# @args:  seq args
# ----------------------------------------------
function slice() {
   local output=$1
   local input=$2
   shift 2
   local indexes=$(seq $*)

   local -i i
   local tmp=$(for i in $indexes 
                 do echo "$(eval echo \"\${$input[$i]}\")" 
               done)

   local IFS=$'\n'
   eval $output="( \$tmp )"
}
Used like this:

$ A=( foo bar "a  b c" 42 )
$ slice B A 1 2
$ echo "${B[0]}"  # bar
$ echo "${B[1]}"  # a  b c
Is there a better way to do this?


***
See the Parameter Expansion section in the Bash man page. A[@] returns the contents of the array, :1:2 takes
a slice of length 2, starting at index 1.

A=( foo bar "a  b c" 42 )
B=("${A[@]:1:2}")
C=("${A[@]:1}")       # slice to the end of the array
echo "${B[@]}"        # bar a  b c
echo "${B[1]}"        # a  b c
echo "${C[@]}"        # bar a  b c 42
echo "${C[@]: -2:2}"  # a  b c 42 # The space before the - is necesssary
Note that the fact that "a b c" is one array element (and that it contains an extra space) is preserved.

***
@AquariusPower: Create an array of indices and slice it: idx=(${!A[@]}); echo ${idx[@]:1}.

***
@Feuermurmel: Just do it without the indexing square brackets: ${@:1:2}

***
@DennisWilliamson I found that I needed to convert $@ to a proper array before doing this or arguments that
contained spaces would get split: ARGS=( "$@" ); ARGS_AFTER_FIRST=( "${ARGS[@]:1}" )
show 8 more comments

***
There is also a convenient shortcut to get all elements of the array starting with specified index.
For example "${A[@]:1}" would be the "tail" of the array, that is the array without its first element.

version=4.7.1
A=( ${version//\./ } )
echo "${A[@]}"    # 4 7 1
B=( "${A[@]:1}" )
echo "${B[@]}"    # 7 1

***
And while you at it: echo "${A[@]::1}" # 4

***
This is great, but it should be noted that if used within a function,
it must be altered slightly to read "${${@}[@]:1}".

***
Array slicing like in Python (From the rebash library):

array_slice() {
    local __doc__='
    Returns a slice of an array (similar to Python).

    From the Python documentation:
    One way to remember how slices work is to think of the indices as pointing
    between elements, with the left edge of the first character numbered 0.
    Then the right edge of the last element of an array of length n has
    index n, for example:
    ```
    +---+---+---+---+---+---+
    | 0 | 1 | 2 | 3 | 4 | 5 |
    +---+---+---+---+---+---+
    0   1   2   3   4   5   6
    -6  -5  -4  -3  -2  -1
    ```

    >>> local a=(0 1 2 3 4 5)
    >>> echo $(array.slice 1:-2 "${a[@]}")
    1 2 3
    >>> local a=(0 1 2 3 4 5)
    >>> echo $(array.slice 0:1 "${a[@]}")
    0
    >>> local a=(0 1 2 3 4 5)
    >>> [ -z "$(array.slice 1:1 "${a[@]}")" ] && echo empty
    empty
    >>> local a=(0 1 2 3 4 5)
    >>> [ -z "$(array.slice 2:1 "${a[@]}")" ] && echo empty
    empty
    >>> local a=(0 1 2 3 4 5)
    >>> [ -z "$(array.slice -2:-3 "${a[@]}")" ] && echo empty
    empty
    >>> [ -z "$(array.slice -2:-2 "${a[@]}")" ] && echo empty
    empty

    Slice indices have useful defaults; an omitted first index defaults to
    zero, an omitted second index defaults to the size of the string being
    sliced.
    >>> local a=(0 1 2 3 4 5)
    >>> # from the beginning to position 2 (excluded)
    >>> echo $(array.slice 0:2 "${a[@]}")
    >>> echo $(array.slice :2 "${a[@]}")
    0 1
    0 1

    >>> local a=(0 1 2 3 4 5)
    >>> # from position 3 (included) to the end
    >>> echo $(array.slice 3:"${#a[@]}" "${a[@]}")
    >>> echo $(array.slice 3: "${a[@]}")
    3 4 5
    3 4 5

    >>> local a=(0 1 2 3 4 5)
    >>> # from the second-last (included) to the end
    >>> echo $(array.slice -2:"${#a[@]}" "${a[@]}")
    >>> echo $(array.slice -2: "${a[@]}")
    4 5
    4 5

    >>> local a=(0 1 2 3 4 5)
    >>> echo $(array.slice -4:-2 "${a[@]}")
    2 3

    If no range is given, it works like normal array indices.
    >>> local a=(0 1 2 3 4 5)
    >>> echo $(array.slice -1 "${a[@]}")
    5
    >>> local a=(0 1 2 3 4 5)
    >>> echo $(array.slice -2 "${a[@]}")
    4
    >>> local a=(0 1 2 3 4 5)
    >>> echo $(array.slice 0 "${a[@]}")
    0
    >>> local a=(0 1 2 3 4 5)
    >>> echo $(array.slice 1 "${a[@]}")
    1
    >>> local a=(0 1 2 3 4 5)
    >>> array.slice 6 "${a[@]}"; echo $?
    1
    >>> local a=(0 1 2 3 4 5)
    >>> array.slice -7 "${a[@]}"; echo $?
    1
    '
    local start end array_length length
    if [[ $1 == *:* ]]; then
        IFS=":"; read -r start end <<<"$1"
        shift
        array_length="$#"
        # defaults
        [ -z "$end" ] && end=$array_length
        [ -z "$start" ] && start=0
        (( start < 0 )) && let "start=(( array_length + start ))"
        (( end < 0 )) && let "end=(( array_length + end ))"
    else
        start="$1"
        shift
        array_length="$#"
        (( start < 0 )) && let "start=(( array_length + start ))"
        let "end=(( start + 1 ))"
    fi
    let "length=(( end - start ))"
    (( start < 0 )) && return 1
    # check bounds
    (( length < 0 )) && return 1
    (( start < 0 )) && return 1
    (( start >= array_length )) && return 1
    # parameters start with $1, so add 1 to $start
    let "start=(( start + 1 ))"
    echo "${@: $start:$length}"
}
alias array.slice="array_slice"


---
