filename: nohup_howto-avoid-creating-nohup-out-file_20240627.txt
https://unix.stackexchange.com/questions/527206/how-to-avoid-creating-nohup-out-file

How to avoid creating nohup.out file

$> nohup command &> /dev/null &

   This command still creates nohup.out file. Could you please help on how to avoid it?

***
   &> is not POSIX standard. You need to use this syntax:
$> nohup command >/dev/null 2>&1 &

   Related: [**1]Difference between 2>&-, 2>/dev/null, |&, &>/dev/null and >/dev/null 2>&1
   https://unix.stackexchange.com/questions/70963/difference-between-2-2-dev-null-dev-null-and-dev-null-21


---
[**1]
https://unix.stackexchange.com/questions/70963/difference-between-2-2-dev-null-dev-null-and-dev-null-21

Difference between 2>&-, 2>/dev/null, |&, &>/dev/null and >/dev/null 2>&1

   Just looking for the difference between
     * 2>&-
     * 2>/dev/null
     * |&
     * &>/dev/null
     * >/dev/null 2>&1

   and their portability with non-Bourne shells like tcsh, mksh, etc.

***
   For background:
     * a number 1 = standard out (i.e. STDOUT)
     * a number 2 = standard error (i.e. STDERR)
     * if a number isn't explicitly given, then number 1 is assumed by the shell (bash)

   First let's tackle the function of these. For reference see the Advanced Bash-Scripting Guide.

Functions
2>&-
   The general form of this one is M>&-, where "M" is a file descriptor number. This will close output
   for whichever file descriptor is referenced, i.e. "M".

2>/dev/null
   The general form of this one is M>/dev/null, where "M" is a file descriptor number. This will
   redirect the file descriptor, "M", to /dev/null.

2>&1
   The general form of this one is M>&N, where "M" & "N" are file descriptor numbers. It combines the
   output of file descriptors "M" and "N" into a single stream.

|&
   This is just an abbreviation for 2>&1 |. It was added in Bash 4.

&>/dev/null
   This is just an abbreviation for >/dev/null 2>&1. It redirects file descriptor 2 (STDERR) and
   descriptor 1 (STDOUT) to /dev/null.

>/dev/null
   This is just an abbreviation for 1>/dev/null. It redirects file descriptor 1 (STDOUT) to /dev/null.

Portability to non-bash, tcsh, mksh, etc.
   I've not dealt much with other shells outside of csh and tcsh. My experience with those 2 compared to
   bash's redirection operators, is that bash is superior in that regard. See the tcsh man page for
   more details.

   Of the commands you asked about none are directly supported by csh/tcsh. You'd have to use different
   syntaxes to construct similar functions.

***
   This is for redirecting the STDERR & STDOUT:
     * 2>/dev/null
       Redirect STDERR to /dev/null (prevent from showing up on console)
     * |&
       Redirect STDERR and STDOUT to STDIN of piped command (cmd1 |& cmd2)
     * &>/dev/null
       Redirect both STDERR & STDOUT to /dev/null (nothing shows up on console)
     * >/dev/null
       Redirect STDOUT to /dev/null (only STDERR shows on console)
     * 2>&-
       Is for closing a file descriptor used with redirection

   These are all standard redirection methods for the Bourne shells.

***
   Consider this an addendum to the selected answer. You may want to know which forms are POSIX and
   which are not.

   Two POSIX forms are involved:
     * 2.7.2 Redirecting Output
     * 2.7.6 Duplicating an Output File Descriptor

     2.7.2 Redirecting Output
     The two general formats for redirecting output are:

     [n]>word

     [n]>|word

     where the optional n represents the file descriptor number. If the number is omitted, the
     redirection shall refer to standard output (file descriptor 1).

     Output redirection using the '>' format shall fail if the noclobber option is set (see the
     description of set -C) and the file named by the expansion of word exists and is a regular file.
     Otherwise, redirection using the '>' or ">|" formats shall cause the file whose name results from
     the expansion of word to be created and opened for output on the designated file descriptor, or
     standard output if none is specified. If the file does not exist, it shall be created; otherwise,
     it shall be truncated to be an empty file after being opened.

   -

     2.7.6 Duplicating an Output File Descriptor

     The redirection operator:
     [n]>&word

     shall duplicate one output file descriptor from another, or shall close one. If word evaluates to
     one or more digits, the file descriptor denoted by n, or standard output if n is not specified,
     shall be made to be a copy of the file descriptor denoted by word; if the digits in word do not
     represent a file descriptor already open for output, a redirection error shall result; see
     Consequences of Shell Errors. If word evaluates to '-', file descriptor n, or standard output if n
     is not specified, is closed. Attempts to close a file descriptor that is not open shall not
     constitute an error. If word evaluates to something else, the behavior is unspecified.

   Therefore:
Function      POSIX-compat    POSIX
2>&-          Yes             close
2>/dev/null   Yes             redir
2>&1          Yes             dup
|&            No
&>/dev/null   No
>/dev/null    Yes             redir
>&/dev/null   ?               ?dup

   The last line is not in the original question, but it works without complaint in bash. (Also works
   with /dev/tty substituted for /dev/null).


---

