filename: bash_handling-flags-with-arguments-multif_20250107.txt
https://medium.com/@wujido20/handling-flags-in-bash-scripts-4b06b4d0ed04

Master Flag Handling in Bash Scripts: A Comprehensive Guide

Customize Bash script behaviour using flags for efficient task automation.
   Bash scripts are powerful tools for automating tasks and running complex commands. Often, it's useful
   to provide options or flags to customize the behaviour of a script. Flags allow users to tailor the
   script's functionality according to their specific needs. In this article, we will explore how to
   effectively handle flags in Bash scripts, enabling greater flexibility and customization.

   Flags, also known as command-line options, are additional parameters passed to a script when it is
   executed. They modify the script's behaviour or specify certain settings. Flags are typically
   prefixed with a hyphen -for short options or two hyphens --for long options. For example, -hor
   longer--helpcan be used to display the script's help information.

   Using flags provides several benefits:
   1. Customization: Flags allow users to customize the script's behaviour to suit their specific
      requirements.

   2. Flexibility: By providing different options, scripts can accommodate various scenarios without
      requiring code modifications.

   3. Usability: Well-designed flags make scripts more user-friendly by providing clear instructions and
      options.

The Getopts Command
   In Bash, the getoptscommand is a built-in utility for parsing command-line options. It is primarily
   used to handle short options and their corresponding arguments. Here's a brief overview of how
   getopts works:

while getopts "hvf:" flag; do
	case $flag in
		h) # Handle the -h flag
		# Display script help information
		;;

		v) # Handle the -v flag
		# Enable verbose mode
		;;

		f) # Handle the -f flag with an argument
		filename=$OPTARG
		# Process the specified file
		;;

		\?)
		# Handle invalid options
		;;
	esac
done

   In the getopts command, the first argument is the string containing the option characters (flags)
   that the script should recognize. Each character represents a valid option. If a character is
   followed by a colon (:), it means that the option requires an argument.

   In the provided example getopts "hvf:" flag we have two flags without an argument h and v and one
   with an argument f.

   The second argument, flag, is the name of the variable that will store the recognized option
   character. In each iteration of the getopts loop, the currently processed option character is stored
   in the flag variable.

   When the getopts command encounters an invalid or unrecognized option, it assigns ? to the flag
   variable, and the script enters the case block \?) to handle this situation. Typically, this block
   includes code to display an error message indicating that an invalid option was provided, along with
   the usage information to guide the user on correct usage.

   In addition to the flag variable used in the getopts command, there are two other important
   variables: $OPTARG and $OPTIND. $OPTARG stores the value of the option argument associated with the
   currently processed option character. In example above we use it to get the name of the file.$OPTIND
   is an index variable that represents the index of the next argument to be processed by getopts.

   However, getopts has limitations when it comes to handling long options like --help or --verbose. In
   such cases, an extended approach is required.

Extended Approach: Handling Short and Long Options
   To handle both short and long options in Bash scripts, we can use shift utility. This utility shifts
   the positional parameters of the script to the right. This is best described by the example:

echo "Before shift:"
echo "First argument:  $1"
echo "Second argument: $2"
shift
echo "After shift:"
echo "First argument:  $1"
echo "Second argument: $2"

   Here is the output of the script called like this shift-demo one two:
Before shift:
First argument:  one
Second argument: two
After shift:
First argument:  two
Second argument:

   As you can see the content of the $1 is replaced by $2 and the content of $2 is gone. We can leverage
   this in the while loop that handles the arguments.

while [ $# -gt 0 ]; do
	case $1 in
		# handle options
	esac
	shift
done

   This while loop will loop over all the positional arguments of the script. To handle individual flags
   we can simply add cases like this.

-h | --help)
  # Display script help information# Display script help information
  ;;

-v | --verbose)
  # Enable verbose mode
  ;;

   In this case, we handle both the long and short variants of the flag. However, a more complex
   scenario arises when dealing with the -f or --file flag. Since we're not using getopts, we don't have
   access to the $OPTARG variable, requiring us to manually parse the argument associated with the flag.
   Also if the flag's argument is mandatory, we must verify whether the user has provided one.

-f | --file)
	if [[ -z "$2" || "$2" == -*]]; then
		echo "File not specified." >&2
		exit 1
	fi

	filename=$2
	# Process the specified file
	shift
	;;

   If the second positional argument is empty or begins with a dash -, it indicates that the user has
   not provided any additional argument or the argument itself is a flag. In such cases, we display an
   error message to the standard error and exit from the script. Conversely, if the second positional
   argument contains a value, we can process it as a parameter. It's important to note that the use of
   the shift command within the case statement is necessary to ensure the correct operation of the
   remaining part of the while loop. Now we can use the flag -f filename or --file filename .

   At times, you may encounter flags with an equal sign, such as --file=filename. If you wish to support
   this format, you can extend the aforementioned solution as follows. I won't provide a detailed
   explanation of the code, but you can experiment with it and try to understand it as an exercise.

has_argument() {
	[[ ("$1" == *=* && -n ${1#*=}) || ( ! -z "$2" && "$2" != -*)  ]];
}

extract_argument() {
	echo "${2:-${1#*=}}"
}

# In `case` statement
-f | --file*)
	if ! has_argument $@; then
		echo "File not specified." >&2
		usage
		exit 1
	fi
	output_file=$(extract_argument $@)
	shift
	;;

     Note that in this setup, you can use the --file=filename format to specify a file, but you cannot
     use the -f=filename format.

   To handle invalid arguments, we can utilize the default case in the case statement. When a flag falls
   into the default case, it indicates that the flag is not supported and therefore considered invalid.

*)
	echo "Invalid option: $1" >&2
	exit 1
	;;

   Here is the whole program for reference:

#!/bin/bash

# Default variable values
verbose_mode=false
output_file=""

# Function to display script usage
usage() {
	echo "Usage: $0 [OPTIONS]"
	echo "Options:"
	echo " -h, --help      Display this help message"
	echo " -v, --verbose   Enable verbose mode"
	echo " -f, --file      FILE Specify an output file"
}

has_argument() {
	[[ ("$1" == *=* && -n ${1#*=}) || ( ! -z "$2" && "$2" != -*)  ]];
}

extract_argument() {
	echo "${2:-${1#*=}}"
}

# Function to handle options and arguments
handle_options() {
	while [ $# -gt 0 ]; do
		case $1 in
		-h | --help)
			usage
			exit 0
			;;

		-v | --verbose)
			verbose_mode=true
			;;

		-f | --file*)
			if ! has_argument $@; then
			echo "File not specified." >&2
			usage
			exit 1
			fi
			output_file=$(extract_argument $@)
			shift
			;;

		*)
			echo "Invalid option: $1" >&2
			usage
			exit 1
			;;

		esac
		shift
	done
}

# Main script execution
handle_options "$@"

# Perform the desired actions based on the provided flags and arguments
if [ "$verbose_mode" = true ]; then
	echo "Verbose mode enabled."
fi

if [ -n "$output_file" ]; then
	echo "Output file specified: $output_file"
fi

Conclusion
   Handling flags in Bash scripts allows users to customize the script's behaviour and provides greater
   flexibility and usability. The getopts command is suitable for handling short options, while an
   extended approach enables handling both short and long options. By incorporating a usage function and
   implementing error handling, scripts become more user-friendly. With these techniques, you can
   enhance your Bash scripts and make them more versatile and adaptable to various scenarios.


---
https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash

How to get arguments with flags in Bash

   I know that I can easily get positioned parameters like this in bash:
   $0 or $1

   I want to be able to use flag options like this to specify for what each parameter is used:
mysql -u user -h host

   What is the best way to get -u param value and -h param value by flag instead of by position?

***
   This example uses Bash's built-in getopts command and is from the Google Shell Style Guide:
a_flag=''
b_flag=''
files=''
verbose='false'

print_usage() {
	printf "Usage: ..."
}

while getopts 'abf:v' flag; do
	case "${flag}" in
		a) a_flag='true' ;;
		b) b_flag='true' ;;
		f) files="${OPTARG}" ;;
		v) verbose='true' ;;
		*) print_usage
		exit 1 ;;
	esac
done

   Note: If a character is followed by a colon (e.g. f:), that option is expected to have an argument.

   Example usage: ./script -v -a -b -f filename

   Using getopts has several advantages over the accepted answer:
     * the while condition is a lot more readable and shows what the accepted options are
     * cleaner code; no counting the number of parameters and shifting
     * you can join options (e.g. -a -b -c --> -abc)

   However, a big disadvantage is that it doesn't support long options, only single-character options.

***
   This is the idiom I usually use:

while test $# -gt 0; do
	case "$1" in
		-h|--help)
			echo "$package - attempt to capture frames"
			echo " "
			echo "$package [options] application [arguments]"
			echo " "
			echo "options:"
			echo "-h, --help                show brief help"
			echo "-a, --action=ACTION       specify an action to use"
			echo "-o, --output-dir=DIR      specify a directory to store output in"
			exit 0
			;;

		-a)
			shift
			if test $# -gt 0; then
				export PROCESS=$1
			else
				echo "no process specified"
				exit 1
			fi
			shift
			;;

		--action*)
			export PROCESS=`echo $1 | sed -e 's/^[^=]*=//g'`
			shift
			;;
			-o)
			shift
			if test $# -gt 0; then
				export OUTPUT=$1
			else
				echo "no output dir specified"
				exit 1
			fi
			shift
			;;

		--output-dir*)
			export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
			shift
			;;

		*)
			break
			;;
	esac
done

   Key points are:
     * $# is the number of arguments
     * while loop looks at all the arguments supplied, matching on their values inside a case statement
     * shift takes the first one away. You can shift multiple times inside of a case statement to take
       multiple values.

***
   getopt is your friend.. a simple example:

function f () {
	TEMP=`getopt --long -o "u:h:" "$@"`
		eval set -- "$TEMP"
		while true ; do
			case "$1" in
				-u )
					user=$2
					shift 2
					;;

				-h )
					host=$2
					shift 2
					;;

				*)
					break
					;;

			esac
		done;

	echo "user = $user, host = $host"
}

f -u myself -h some_host

***
   I propose a simple TLDR:; example for the un-initiated.

   Create a bash script called greeter.sh

#!/bin/bash

while getopts "n:" arg; do
	case $arg in
		n) Name=$OPTARG;;
	esac
done

echo "Hello $Name!"

   You can then pass an optional parameter -n when executing the script.

   Execute the script as such:
$ bash greeter.sh -n 'Bob'

   Output
$ Hello Bob!

   Notes
   If you'd like to use multiple parameters:
    1. extend while getops "n:" arg: do with more paramaters such as while getops "n:o:p:" arg: do
    2. extend the case switch with extra variable assignments. Such as o) Option=$OPTARG and p)
       Parameter=$OPTARG

   To make the script executable:
chmod u+x greeter.sh

***
   I think this would serve as a simpler example of what you want to achieve. There is no need to use
   external tools. Bash built in tools can do the job for you.

function DOSOMETHING {
	while test $# -gt 0; do
		case "$1" in
			-first)
				shift
				first_argument=$1
				shift
				;;

			-last)
				shift
				last_argument=$1
				shift
				;;

			*)
				echo "$1 is not a recognized flag!"
				return 1;
			;;

		esac
	done

	echo "First argument : $first_argument";
	echo "Last argument : $last_argument";
}

   This will allow you to use flags so no matter which order you are passing the parameters you will get
   the proper behavior.

   Example :
 DOSOMETHING -last "Adios" -first "Hola"

   Output :
 First argument : Hola
 Last argument : Adios

   You can add this function to your profile or put it inside of a script.

   Thanks!

   Edit : Save this as a a file and then execute it as yourfile.sh -last "Adios" -first "Hola"

#!/bin/bash

while test $# -gt 0; do
	case "$1" in
		-first)
			shift
			first_argument=$1
			shift
			;;

		-last)
			shift
			last_argument=$1
			shift
			;;

		*)
		echo "$1 is not a recognized flag!"
		return 1;
		;;

	esac
done

echo "First argument : $first_argument";
echo "Last argument : $last_argument";

***
   Another alternative would be to use something like the below example which would allow you to use
   long --image or short -i tags and also allow compiled -i="example.jpg" or separate -i example.jpg
   methods of passing in arguments.

# declaring a couple of associative arrays
declare -A arguments=();
declare -A variables=();

# declaring an index integer
declare -i index=1;

# any variables you want to use here
# on the left left side is argument label or key (entered at the command line along with it's value)
# on the right side is the variable name the value of these arguments should be mapped to.
# (the examples above show how these are being passed into this script)
variables["-gu"]="git_user";
variables["--git-user"]="git_user";
variables["-gb"]="git_branch";
variables["--git-branch"]="git_branch";
variables["-dbr"]="db_fqdn";
variables["--db-redirect"]="db_fqdn";
variables["-e"]="environment";
variables["--environment"]="environment";

# $@ here represents all arguments passed in
for i in "$@"; do
	arguments[$index]=$i;
	prev_index="$(expr $index - 1)";

	# this if block does something akin to "where $i contains ="
	# "%=*" here strips out everything from the = to the end of the argument leaving only the label
	if [[ $i == *"="* ]]
		then argument_label=${i%=*}
		else argument_label=${arguments[$prev_index]}
	fi

	# this if block only evaluates to true if the argument label exists in the variables array
	if [[ -n ${variables[$argument_label]} ]]
		then
			# dynamically creating variables names using declare
			# "#$argument_label=" here strips out the label leaving only the value
			if [[ $i == *"="* ]]
				then declare ${variables[$argument_label]}=${i#$argument_label=}
				else declare ${variables[$argument_label]}=${arguments[$index]}
			fi
	fi

	index=index+1;
done;

# then you could simply use the variables like so:
	echo "$git_user";

***
   I like Robert McMahan's answer the best here as it seems the easiest to make into sharable include
   files for any of your scripts to use. But it seems to have a flaw with the line if [[ -n
   ${variables[$argument_label]} ]] throwing the message, "variables: bad array subscript". I don't have
   the rep to comment, and I doubt this is the proper 'fix,' but wrapping that if in if [[ -n
   $argument_label ]] ; then cleans it up.

   Here's the code I ended up with, if you know a better way please add a comment to Robert's answer.

   Include File "flags-declares.sh"

# declaring a couple of associative arrays
declare -A arguments=();
declare -A variables=();

# declaring an index integer
declare -i index=1;

   Include File "flags-arguments.sh"

# $@ here represents all arguments passed in
for i in "$@"; do
	arguments[$index]=$i;
	prev_index="$(expr $index - 1)";

	# this if block does something akin to "where $i contains ="
	# "%=*" here strips out everything from the = to the end of the argument leaving only the label
	if [[ $i == *"="* ]]
		then argument_label=${i%=*}
		else argument_label=${arguments[$prev_index]}
	fi

	if [[ -n $argument_label ]] ; then
		# this if block only evaluates to true if the argument label exists in the variables array
		if [[ -n ${variables[$argument_label]} ]] ; then
			# dynamically creating variables names using declare
			# "#$argument_label=" here strips out the label leaving only the value
			if [[ $i == *"="* ]]
				then declare ${variables[$argument_label]}=${i#$argument_label=}
				else declare ${variables[$argument_label]}=${arguments[$index]}
			fi
		fi
	fi

	index=index+1;
done;

   Your "script.sh"
. bin/includes/flags-declares.sh

# any variables you want to use here
# on the left left side is argument label or key (entered at the command line along with it's value)
# on the right side is the variable name the value of these arguments should be mapped to.
# (the examples above show how these are being passed into this script)
variables["-gu"]="git_user";
variables["--git-user"]="git_user";
variables["-gb"]="git_branch";
variables["--git-branch"]="git_branch";
variables["-dbr"]="db_fqdn";
variables["--db-redirect"]="db_fqdn";
variables["-e"]="environment";
variables["--environment"]="environment";

. bin/includes/flags-arguments.sh

# then you could simply use the variables like so:
echo "$git_user";
echo "$git_branch";
echo "$db_fqdn";
echo "$environment";

***
#!/bin/bash

if getopts "n:" arg; then
	echo "Welcome $OPTARG"
fi

Save it as sample.sh and try running
sh sample.sh -n John

in your terminal.

***
   If you're familiar with Python argparse, and don't mind calling python to parse bash arguments, there
   is a piece of code I found really helpful and super easy to use called argparse-bash
   https://github.com/nhoffman/argparse-bash

   Example take from their example.sh script:

#!/bin/bash

source $(dirname $0)/argparse.bash || exit 1
argparse "$@" <<EOF || exit 1
parser.add_argument('infile')
parser.add_argument('outfile')
parser.add_argument('-a', '--the-answer', default=42, type=int,
					help='Pick a number [default %(default)s]')
parser.add_argument('-d', '--do-the-thing', action='store_true',
					default=False, help='store a boolean [default %(default)s]')
parser.add_argument('-m', '--multiple', nargs='+',
					help='multiple values allowed')
EOF

echo required infile: "$INFILE"
echo required outfile: "$OUTFILE"
echo the answer: "$THE_ANSWER"
echo -n do the thing?
if [[ $DO_THE_THING ]]; then
	echo " yes, do it"
else
	echo " no, do not do it"
fi
echo -n "arg with multiple values: "
for a in "${MULTIPLE[@]}"; do
	echo -n "[$a] "
done
echo

***
   I had trouble using getopts with multiple flags, so I wrote this code. It uses a modal variable to
   detect flags, and to use those flags to assign arguments to variables.

   Note that, if a flag shouldn't have an argument, something other than setting CURRENTFLAG can be
   done.

for MYFIELD in "$@"; do

	CHECKFIRST=`echo $MYFIELD | cut -c1`

	if [ "$CHECKFIRST" == "-" ]; then
		mode="flag"
	else
		mode="arg"
	fi

	if [ "$mode" == "flag" ]; then
		case $MYFIELD in
			-a)
				CURRENTFLAG="VARIABLE_A"
				;;

			-b)
				CURRENTFLAG="VARIABLE_B"
				;;

			-c)
				CURRENTFLAG="VARIABLE_C"
				;;

		esac

	elif [ "$mode" == "arg" ]; then
		case $CURRENTFLAG in
			VARIABLE_A)
				VARIABLE_A="$MYFIELD"
				;;

			VARIABLE_B)
				VARIABLE_B="$MYFIELD"
				;;

			VARIABLE_C)
				VARIABLE_C="$MYFIELD"
				;;

		esac
	fi
done

***
   So here it is my solution. I wanted to be able to handle boolean flags without hyphen, with one
   hyphen, and with two hyphen as well as parameter/value assignment with one and two hyphens.

# Handle multiple types of arguments and prints some variables
#
# Boolean flags
# 1) No hyphen
#    create   Assigns `true` to the variable `CREATE`.
#             Default is `CREATE_DEFAULT`.
#    delete   Assigns true to the variable `DELETE`.
#             Default is `DELETE_DEFAULT`.
# 2) One hyphen
#      a      Assigns `true` to a. Default is `false`.
#      b      Assigns `true` to b. Default is `false`.
# 3) Two hyphens
#    cats     Assigns `true` to `cats`. By default is not set.
#    dogs     Assigns `true` to `cats`. By default is not set.
#
# Parameter - Value
# 1) One hyphen
#      c      Assign any value you want
#      d      Assign any value you want
#
# 2) Two hyphens
#   ... Anything really, whatever two-hyphen argument is given that is not
#       defined as flag, will be defined with the next argument after it.
#
# Example:
# ./parser_example.sh delete -a -c VA_1 --cats --dir /path/to/dir

parser() {
	# Define arguments with one hyphen that are boolean flags
	HYPHEN_FLAGS="a b"

	# Define arguments with two hyphens that are boolean flags
	DHYPHEN_FLAGS="cats dogs"

	# Iterate over all the arguments
	while [ $# -gt 0 ]; do
		# Handle the arguments with no hyphen
		if [[ $1 != "-"* ]]; then
			echo "Argument with no hyphen!"
			echo $1

			# Assign true to argument $1
			declare $1=true

			# Shift arguments by one to the left
			shift

		# Handle the arguments with one hyphen
		elif [[ $1 == "-"[A-Za-z0-9]* ]]; then
			# Handle the flags
			if [[ $HYPHEN_FLAGS == *"${1/-/}"* ]]; then
				echo "Argument with one hyphen flag!"
				echo $1

				# Remove the hyphen from $1
				local param="${1/-/}"

				# Assign true to $param
				declare $param=true

				# Shift by one
				shift

			# Handle the parameter-value cases
			else
				echo "Argument with one hyphen value!"
				echo $1 $2

				# Remove the hyphen from $1
				local param="${1/-/}"

				# Assign argument $2 to $param
				declare $param="$2"

				# Shift by two
				shift 2
			fi

		# Handle the arguments with two hyphens
		elif [[ $1 == "--"[A-Za-z0-9]* ]]; then
			# NOTE: For double hyphen I am using `declare -g $param`.
			#   This is the case because I am assuming that's going to be
			#   the final name of the variable
			echo "Argument with two hypens!"

			# Handle the flags
			if [[ $DHYPHEN_FLAGS == *"${1/--/}"* ]]; then
				echo $1 true

				# Remove the hyphens from $1
				local param="${1/--/}"

				# Assign argument $2 to $param
				declare -g $param=true

				# Shift by two
				shift

			# Handle the parameter-value cases
			else
				echo $1 $2

				# Remove the hyphens from $1
				local param="${1/--/}"

				# Assign argument $2 to $param
				declare -g $param="$2"

				# Shift by two
				shift 2
			fi
		fi

	done

	# Default value for arguments with no hypheb
	CREATE=${create:-'CREATE_DEFAULT'}
	DELETE=${delete:-'DELETE_DEFAULT'}

	# Default value for arguments with one hypen flag
	VAR1=${a:-false}
	VAR2=${b:-false}

	# Default value for arguments with value
	# NOTE1: This is just for illustration in one line. We can well create
	#   another function to handle this. Here I am handling the cases where
	#   we have a full named argument and a contraction of it.
	#   For example `--arg1` can be also set with `-c`.
	# NOTE2: What we are doing here is to check if $arg is defined. If not,
	#   check if $c was defined. If not, assign the default value "VD_"
	VAR3=$(if [[ $arg1 ]]; then echo $arg1; else echo ${c:-"VD_1"}; fi)
	VAR4=$(if [[ $arg2 ]]; then echo $arg2; else echo ${d:-"VD_2"}; fi)
}

# Pass all the arguments given to the script to the parser function
parser "$@"

echo $CREATE $DELETE $VAR1 $VAR2 $VAR3 $VAR4 $cats $dir


---
https://linuxconfig.org/bash-script-flags-usage-with-arguments-examples

Bash Script: Flags usage with arguments examples
9 March 2022

If you have any experience on the Linux command line, then you should have run into command flags, which help
us modify the behavior of a command that we are executing.

For example, if we execute the ls -l command, the -l part of the command is a flag that we are passing as an
argument to ls. This same functionality can be used in a Bash script, allowing us to pass some input to the
script through flags when we are executing the script.

Modifying a Bash script's behavior via runtime options, just like we normally do with command line programs,
can be very useful. The Bash shell provides the getopts builtin command, a standard way to achieve this. In
this tutorial, you will see how to use flags as arguments when executing a Bash script, through use of the
getopts builtin.

In this tutorial you will learn:

How to pass arguments to a Bash script via flags How to interpret flag input via getopts

Let's go over a basic example of using getopts in a Bash script. We are not aiming for practicality here, but
just a simple script that allows you to easily understand how getopts works.

We will configure our script below to accept command line options -l, -h, and -a.

#!/bin/bash

while getopts 'lha:' OPTION; do
	case "$OPTION" in
		l)
			echo "linuxconfig"
			;;

		h)
			echo "you have supplied the -h option"
			;;

		a)
			avalue="$OPTARG"
			echo "The value provided is $OPTARG"
			;;

		?)
			echo "script usage: $(basename \$0) [-l]
			[-h] [-a somevalue]" >&2
			exit 1
			;;

	esac
done

shift "$(($OPTIND -1))"

Let's analyze what we have above. First of all, the getopts commands must be used inside a while loop so all
options are parsed.  Then immediately after the getopts keyword, we defined the possible options our script
will accept. They are l, h and finally a.

What does the colon after this last option means? It is the way we tell getopts that the option requires an
argument. Each parsed option will be stored inside the $OPTION variable, while an argument, when present, will
become the value of the $OPTARG one.

Each option is managed inside a case statement, with a final ? case that will be matched whenever an option
that doesn't exist will be provided. In that case we will just echo the user the correct script usage and exit
with an error code.  Testing our script

First, we are going to call our script providing a non existing option, just to test the case we mentioned
above. Let's give the script executable permissions and then call it:

$> chmod +x test.sh && ./tesh.sh -c

As expected, we will receive a message telling us that the provided option is illegal and then instructions
about how to use the script:

$> ./test.sh: illegal option -- c script usage: test.sh [-l] [-h] [-a somevalue]

While the script usage string is the one we set to be printed on usage error, the illegal option message above
it is automatically generated by getopts and it can be disabled by prefixing the options with a :. Now let's
see what happens when we use the script the way it was meant to:

$> ./test.sh -l linuxconfig

We used the -l option, and the script printed onscreen the string we set in the corresponding case, this is
also what happens if we provide the -h option:

$> ./test.sh -h you have supplied the -h option

Let's now try to call the script with the -a option. As said above, this option requires an argument, and will
fail if the latter is not provided:

$> ./test.sh -a ./test.sh: option requires an argument -- a script usage: test.sh [-l] [-h] [-a somevalue]

As expected, the script responded with an error message, reminding us that the option we provided requires an
argument:

$> ./test.sh -a tux The value provided is tux

This time the script responded without error. Notice how the argument we provided, tux is printed because it
becomes the value of the $OPTARG variable.

Using getopts, you can provide also more than one option at the time to your script, combining the flags when
you launch it.  For example, let's see what happens when we try to call our scripts with both the -l and -h
options:

$> ./test.sh -lh linuxconfig you have supplied the -h option

As we can observe, both the options got processed, in the order we provided them. Of course the options can be
given separately, and we can also add the -a option, but always remember to add the required argument:

$> ./test.sh -l -h -a tux_rulez linuxconfig you have supplied the -h option The value provided is tux_rulez

The $OPTIND variable
If we take another look at the very trivial script we have written above, we see another instruction at the
end of the while loop: shift $(($OPTIND -1)). What is its purpose? Let's say we call the script this way:

$> ./test.sh -l -h -a hello world

When the script is invoked, the $OPTIND variable is set to 1, and it is incremented each time an option is
parsed, until it reaches the last one.  Therefore, in this case, it will have a value of 5 when it will reach
the last element, which is hello, the mandatory argument required by the -a option.

shift is a shell builtin which moves the positional parameters of the script down a specified number of
positions provided to it as a positive number, discarding the related arguments.

The way we launched the script above, the last provided argument, "world", is not parsed by getopts, which at
that point already finished its job.

Now, if we make a shift of the value of $OPTIND - 1 (that is the effective number of the parsed options, 4 in
this case) on the positional parameters, what remains are just the arguments that are not options, in this
case "world", that we can access by using the $* variable later in this script.  Closing Thoughts

In this tutorial, we saw how to parge flags used as command line arguments passed to a Bash script. The
getopts Bash builtin allows our script to accept command flags, even multiple at a time, much the same way
that default commands work on a Linux system. We also learned about the $OPTIND builtin, which is handy in
this type of script and allows us to process additional input.


---

