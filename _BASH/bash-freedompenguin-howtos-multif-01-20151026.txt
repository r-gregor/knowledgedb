filename: bash_freedompenguin_howtos-multif_01-20151026.txt
http://freedompenguin.com/articles/how-to/bashing-your-shell-shell-scripting-boot-camp/

BASHING YOUR SHELL: SHELL SCRIPTING BOOT CAMP

Spend enough time on the command line and you’ll eventually want to do many tasks…that take some
intricate commands…repeatedly. A good example of this, is making thumbnails of photos. Basically,
our workhorse of this script is not ImageMagick (which provides convert, identify and mogrify), but the
for loop in bash itself. Ready? Grab your pen-knife and let’s whittle out a script:

[ ! -d ~/bin ] && mkdir ~/bin
cd ~/bin
touch makeThumbs.sh
chmod +x makeThumbs.sh
vim makeThumbs.sh

If you just copy-pasted that block of commands…you just executed a shell script and we’re done. See
you next week!

Oh, OK, I’ll keep going since all that created was a file and got you into your editor. A proper shell
script begins with a “shebang” (#!/bin/bash), (also pronounced in its Batman fight-scene parts:
“pound, bang, slash, bin, slash, bash!”).

#!/bin/bash
for f in *.jpg ; do
echo $f
done

That’s pretty much how most shell scripts get going: looping over a series of file names. No matching
file names? Let’s make a quick one:

touch asdf.jpg
Some safety tips:
1) start all your for loops this way, with your for-echo.
2) exit on errors immediately. Use touch asdf.jpg
3) need more help? use set -x, and watch it in action
4) double quote your variables
5) test for files with -f
6) test for error conditions (non-zero exit conditions)
7) need more help? Install the bash debugger (Debian/Ubuntu using apt): apt-get install bashdb

Let’s add these to our thumbnail program:

#!/bin/bash
set -e # this makes any command returning !0 exit the script
set -x # shows all script commands
for f in *.jpg ; do
echo "$f"
done

Now we can test for to see if the files actually exist, since there is no point calling a script on
something that isn’t there.

for f in *.jpg ; do
if [ -f "$f" ]; then
echo "$f"
fi
done

Why do we put quotes around the variable? Consider that file names can have spaces, yet when we give
arguments to for, it separates things with spaces.

touch "a b c.txt"
for f in a*txt; do
echo "# $f;"
done

Will output:
# a; # b; # c.txt;

So putting double quotes around for variables doesn’t work, does it? You’re right. That’s safer
to use while read loops. We can pipe the output of ls to read in a while loop. The ls command outputs
a file per line, and read ingests a whole line. Now we’ll do it right:

ls *jpg | while read f ; do
if [ -f "$f" ]; then
echo "$f"
fi
done

Next, let’s remove asdf.jpg and now we have no pictures in our directory. The set -e in our script
will break and exit our script right before we get to the while. This is because ls exits with error
code 2 if there are files not found. We can be strict and detect this and exit early:

ls *jpg &>/dev/null || ( echo "Nothing to thumbnail, bye"; exit 0)

ls *jpg | while read f ; do … done

Getting tough yet? If you’re keeping up with me, you’re a bad-ass. Most people skip this stuff. If
they script enough, they have a bugger of a time figuring out where their script takes a dump. Let’s
put some more meat on this skeleton and make a thumbnail:

#!/bin/bash
set -e
set -x
ls *jpg &>/dev/null || ( echo "Nothing to thumbnail, bye"; exit 0)
size=450x300
options="-quality 96 \
-thumbnail $size \
-bordercolor gray \
-border 10x10 \
-strip"
ls *jpg | while read f ; do
if [ -f "$f" ]; then
thumbnail="${f/.jpg/}-$size.jpg"
convert "$f" $options $thumbnail || true
fi
done

What we did if [ -f $f ]? For file a b c.txt, that would evaluate in the script as:
 if [ -f a b c.txt ] and return "a: file not found".

See what I mean about convert not actually being the meat of the script? The script is the meat. Convert
is merely the hammer that strikes the iron. Some things you might not have seen before:

Line continuation looks like this: this \
is the same line

|| true lets a command fail but not have set -e kill the script

${f/.jpg/} means ${variable/pattern/replacement} Basic pattern replacement! You do not need to call out
to sed or perl to do regular expressions.

We do a lot of work in this script to detect our error conditions. Know what we can do when we get it
working? We can take a deep breath and comment out set -e and set -x.
# set -e
# set -x

Be sure to leave that in so that any other shell script lover will appreciate our careful work!


---
http://freedompenguin.com/articles/how-to/extracting-and-organizing-with-bash/

EXTRACTING AND ORGANIZING WITH BASH

October 22, 2015 Jed Reynolds 1 Comment How To

Long week? Yeah, me too. I have my heavy metal Linux band in the motel room and no customers to attend
to at the moment…let’s do some Bash scripting! Remember the “thumbnailing” script I did a few
weeks ago? This is the script I use before doing thumbnails. It’s actually a bit more trippy and uses
another script which I’ll cover in the next installment.

I begin by getting a temporary file setup:

#!/bin/bash
set -e
DateFile="/tmp/image-dates.$$"
[ -z "$DateFile" ] && echo "no datefile, bye." && exit 1
[ -f "$DateFile" ] && rm -f $DateFile
touch "$DateFile"

We have a guard: did we screw up our file name? That’s almost irrationally cautious, so you might feel
justified in deleting that guard. The $$ symbol is a quick way to get your process ID (PID). You can
use this for many things, but it is reasonably unique with low-frequency usage (that is, a few times a day).

65535Process

You can only have 65535 process IDs, and there are 86400 seconds a day, so if you approach one process
a second, you’ll get repeats. If we find an identical date file, let’s delete it anyhow and create
a new one. (POP QUIZ: tell me a one-liner that does this.)

Turn that metal up! We’re about to “headbang” through a crazy lead solo of string manipulation:

ls *.jpg *.dng *.bmp *.tiff *.jpeg \
*.JPG *.DNG *.BMP *.TIFF *.JPEG 2>/dev/null \
| while read F
do
     G=$( echo -n "$F" | perl -pe 'y/[A-Z]/[a-z]/' )
     cmd="mv -v $F $G"
     $cmd
done

Yeah! Let’s crush some upper-case file names! Why the 2>/dev/null though? Have you ever done an “ls *
.txt” command just to get everything in your directory listed and followed by a warning: .txt: file
not found ? Yeah. That error message, or those TIFF or JPEG files you probably won’t have will all
give you that message. It’s a safe message to discard into /dev/null.

devnull

We’re taking each file name F, and piping it into perl and feeding it into the Sarlacc jaws of the
y/// translator. This y/// operator is the perl equivalent to the ‘tr’ command: it translates one
character pattern to another character pattern. We’re forcing all upper-case alphabetic characters
into lower case characters. Why? Type in caps much? (The bassist does, the bastard.) Extra credit:
give me the shell command that replaces that perl command.

Now G is the transformed name, and we just move the file from the original F value to the new G value. (POP
QUIZ: Why, oh why would I assemble a string of this command? Could this be evidence of an erased echo
statement?) Extra Credit: make this command safer for filenames with spaces in them.

Drum solo! We’re going to rattle out some dates with another wee utility called ImgDate.sh:

ls *.{jpg,dng,bmp,tiff,jpeg,gif,png} 2>/dev/null \
| while read F
do
     echo -n "$F " >> $DateFile
     ~/bin/ImgDate.sh $F >> $DateFile
done

imagelist

Remember that the >> operator appends to files and echo -n prints stuff without a newline. Pay attention
to spaces. We’re immediately going to use this output in a loop:

cat $DateFile | sort | uniq \
| while read D
do
     echo "D $D"
     imgfile=`echo "$D" | awk '{print $1}'`
     imgdir=`echo "$D" | awk '{print $NF}'`
     if [ ! -d "$imgdir" ]
     then
        mkdir -v $imgdir
     fi
     mv -v $imgfile $imgdir
done

What, another external program…awk? Isn’t that the sound your drummer makes after the fifth shot of
Jagermeister? Hell yeah. Awk loves to toss out column values, so $1 is anything in the first column. What
did we put in the first column of DateFile? Oh yeah…the drummer, no, the image file name. The last
column is always $NF. Pop Quiz: Why not $2 in the second column? Warning: Don’t ask where why the
drummer is called NF, he’s shy. Extra Credit #2: what if the file name has spaces in it?

tree

Now we need to clean the floor of our motel room: /tmp. Let’s wipe up $DateFile.

rm -f $DateFile
I’m going to drag the drummer off to the tour bus, but I’m going to leave you with one more puzzler:
If I delete $DateFile at the end of this party, why do I bother deleting it at the start of the party
as well? Think about it…
