filename: bash_functions-multif_20150603.txt
https://www.howtoforge.com/tutorial/linux-shell-scripting-lessons-5/

Shell Scripting Part V: Functions in Bash

Introduction

   A function, also known as a subroutine in programming languages is a set of instructions
   that performs a specific task for a main routine [1]. It allows programmers to break a
   complicated and lengthy code to small sections which can be called whenever needed. Each
   function needs to be called by a main routine in order to run, thus, it is isolated with
   other parts of your code and this creates an easy way of code testing. Additionally,
   functions can be called anytime and repeatedly, this allows you reuse, optimize and
   minimize your codes. Like most programming languages the bash shell also supports
   functions.

General Syntax:

    1. Syntax 1:
       function function_name
       {
           ##### set of commands
       }
    2. Syntax 2:
       function_name()
       {
           #### set of commands
       }

Creating Functions

   The bash supports two structures for functions. In using the first syntax, you have to use
   the keyword function, followed by your function name and open and close parentheses and
   curly braces to separate the contents of your functions to your main routine. You will find
   this syntax familiar if you have a background in PHP because functions in PHP are declared
   in the same way. The other syntax only consists of a function name, open and close
   parentheses and curly braces.

   #!/bin/bash
   myfunction(){
       echo "My function works!"
   }
   myfunction

   [28]creating functions in shell scripts

   I have used the second syntax in our example. After creating the function myfunction, it
   was then invoked by calling its function name to our main routine. The main routine will be
   anywhere in our script that was not defined as part of our function.

   Now let's rearrange our code to test whether functions can be declared anywhere in our
   script. Consider the code below:

   #!/bin/bash
   echo "testing my function"
   myfunction
   myfunction(){
       echo "My function works!"
   }

   [29]creating functions in bash

   The line 3 in the above code returns a command not found error. This only means that:

   The function only works if it is declared before your main routine. The interpreter will
   return an error if you have declared your function after your main routine.

Restructuring codes using functions

   One of the best features of functions is being able to reuse codes. When a procedure
   requires repeatedly executing commands but could not be structured using looping statements
   then function can be a solution.

   For example, consider the code below:

   #!/bin/bash
   while(true)
   do
       clear
       printf "Choose from the following operations: \n"
       printf "[a]ddition\n[b]Subtraction\n[c]Multiplication\n[d]Division\n"
       printf "################################\n"
       read -p "Your choice: " choice
       case $choice in
       [aA])
           read -p "Enter first integer: " int1
           read -p "Enter second integer: " int2
           res=$((int1+int2))
       ;;
       [bB])
           read -p "Enter first integer: " int1
           read -p "Enter second integer: " int2
       res=$((int1-int2))
       ;;
       [cC])
           read -p "Enter first integer: " int1
           read -p "Enter second integer: " int2
           res=$((int1*int2))
       ;;
       [dD])
           read -p "Enter first integer: " int1
           read -p "Enter second integer: " int2
           res=$((int1/int2))
       ;;
       *)
           res=0
           echo "wrong choice!"
       esac
       echo "The result is: " $res
       read -p "Do you wish to continue? [y]es or [n]o: " ans
       if [ $ans == 'n' ]
           then
            echo "Exiting the script. Have a nice day!"
           break
       else
           continue
       fi
   done

   [30]switch statement in bash

   The script is running well however, notice that the lines for accepting inputs are
   repeatedly done in each pattern in our switch statement.

   #!/bin/bash
   inputs(){
        read -p "Enter first integer: " int1
       read -p "Enter second integer: " int2
   }
   exitPrompt(){
       read -p "Do you wish to continue? [y]es or [n]o: " ans
       if [ $ans == 'n' ]
       then
           echo "Exiting the script. Have a nice day!"
           break
       else
           continue
       fi
   }
   while(true)
       do
       clear
       printf "Choose from the following operations: \n"
       printf "[a]Addition\n[b]Subtraction\n[c]Multiplication\n[d]Division\n"
       printf "################################\n"
       read -p "Your choice: " choice
       case $choice in
       [aA])
           inputs
           res=$((int1+int2))
       ;;
       [bB])
           inputs
           res=$((int1-int2))
       ;;
       [cC])
           inputs
           res=$((int1*int2))
       ;;
       [dD])
           inputs
           res=$((int1/int2))
       ;;
       *)
           res=0
           echo "wrong choice!"
       esac
       echo "The result is: " $res
       exitPrompt
   done

   [31]case statement in bash

   We improved our code by creating subsections inputs and exitPrompt. It works exactly the
   same with our previous code, however, our current code is easier to troubleshoot because it
   is structured properly.

Passing parameters on functions

   Like most of the programming languages, you can pass parameters and process those data in
   functions in bash. The code below shows the procedure on how to pass values in shell
   scripting:

   #!/bin/bash
   myfunction(){
       echo $1
       echo $2
   }
   myfunction "Hello" "World"

   [32]passing values between functions using bash

   Notice in our example, we added the values "Hello" and "World" after we called the
   myfunction. Those values are passed to the myfunction as parameters and stored in a local
   variable. However, the unlike other languages, the interpreter stores the passed values in
   to predefined variables, which is named according to the sequence of passing the
   parameters, 1 as the starting name up to the order of passing. Notice that the "Hello" word
   is stored to the variable 1 and value "World" is stored in variable 2.

   Note: The 1 and 2 in our example are local variables and thus, are not accessible to other
   parts of the script aside from the function where the parameters are being passed.

   For instance,

   #!/bin/bash
   myfunction(){
       echo $1
       echo $2
   }
   myfunction "Hello" "World"
   echo $1
   echo $2

   [33]Parameter passing bash scripting

   The echo $1 and echo $2 in the last two lines of our script have no display since the
   interpreter does not recognize both variables because they are both local to the
   myfunction.

Returning Values from Functions

   Aside from creating functions and passing parameters to it, bash functions can pass the
   values of a function's local variable to the main routine by using the keyword return. The
   returned values are then stored to the default variable $? For instance, consider the
   following code:

   #!/bin/bash
   add(){
       sum=$(($1+$2))
       return $sum
   }
   read -p "Enter an integer: " int1
   read -p "Enter an integer: " int2
   add $int1 $int2
   echo "The result is: " $?

   [34]Returning values from a function bash

   In the example, we pass the parameters int1 and int2 to the add function. Next the add
   function processes it through the line sum=$(($1+$2)). Then the value of the sum variable
   is passed to the main routine through the line return $sum. By default, the values of $sum
   will be stored to the default variable $? Finally, the line echo "The result is: " $?
   prints the result.

   Note: Shell scripts can only return a single value.

   Unlike other programming languages, shell scripts cannot return multiple values from a
   function. Let's take a look in this example:

   #!/bin/bash
   add(){
       sum=$(($1+$2))
       dif=$(($1-$2))
       return $sum
   }
   read -p "Enter an integer: " int1
   read -p "Enter an integer: " int2
   add $int1 $int2
   echo "The result is: " $?
   echo "The result is: " $?

   [35]Return values in bash functions

To sum it up

   Let's have another example that uses functions, passes parameters to it and returns value.

   #!/bin/bash
   #####################
   #Author: HowtoForge #
   #####################
   clear(){
       clear
   }
   bin(){
       bin1=$(echo "obase=2;$1"|bc)
       echo $bin1
   }
   dec(){
       dec1=$(echo "ibase=2;$1"|bc)
       return $dec1
   }
   ########Main#########
       printf "Choose from the following operations:\n[1]Decimal to Binary Conversion\n"
       printf "[2]Binary to Decimal Conversion\n"
       read -p "Your choice: " op
       case $op in
       1)
           read -p "Enter integer number: " int
           bin $int
       ;;
       2)
           read -p "Enter binary number: " int
           dec $int
           echo "The decimal equivalent of $int is $?"
       ;;
       *)
           echo "Wrong Choice!"
       esac

   [36]Binary to decimal conversions in bash

   [37]Decimal to binary conversions in bash

   The given example converts a given input to both binary or decimal value using obase and
   ibase command. The line $(echo "obase=2;$1"|bc) converts a given decimal value to binary
   digit and store it to bin1 variable. Next we displayed the value of $bin1 by using echo
   command.

   Note: It's better to use echo directly when converting from decimal to binary because when
   you return command to pass a binary value, the bash converts the binary value to decimal
   before returning it.

   Additionally, we have converted the binary value to decimal using the command $(echo
   "ibase=2;$1"|bc).

   You must also remember that the interpreter is only capable of accepting 8-bit binary
   digit. You will input digit that exceeds the 8-bit limit, it will generate an overflow and
   the most significant bit of the digit will be discarded.

   The 10-bits binary digit 1000001010 returns 10 since following the 8-bit rule, the
   remaining 2 bits in the right side (most significant bit) will be omitted, thus, 1000001010
   will become equal to 00001010 which is equal to 10. If you want an operation that accepts
   binary digits exceeding 8-bits then you have to create the code manually.

Conclusion

   Bash has functionalities that are very similar to programming languages to provide numerous
   tools to the user and make Linux systems more powerful. In this series, you have enhanced
   your knowledge in shell scripting through functions. Functions in shell scripts to provide
   modularity to the user, making scripts easier to troubleshoot and enable code reuse.



---
http://bash.cyberciti.biz/guide/Defining_functions

Defining functions

   To define a function, use the following syntax:
name() compound_command ## POSIX compliant
## see the bash man page for def. of a compound command

   OR
function name { ## ksh style works in bash
 command1
 command2
}

   OR
function name() { ## bash-only hybrid
 command1
 command2
}

One Line Functions Syntax

   One line functions inside { ... } must end with a semicolon:
function name { command1; command2; commandN;}

   OR
name() { command1; command2; commandN;}

   where name is the name of the function, and "command1; command2;" is a list of commands
   used in the function. You need to replace name with actual function name such as
   delete_account:
rollback(){
  ...
}

add_user(){
  ...
}

delete_user(){
  ...
}

Example

   Define a function called mount_nas and umount_nas:
# function to mount NAS device
mount_nas(){
        # define variables
        NASMNT=/nas10
        NASSERVER="nas10.nixcraft.net.in"
        NASUSER="vivek"
        NASPASSWORD="myNasAccountPassword"
        [ ! -d $NASMNT ] && /bin/mkdir -p $NASMNT
        mount | grep -q $NASMNT
        [ $? -eq 0 ] || /bin/mount -t cifs //$NASSERVER/$NASUSER -o username=$NASUSER,password=$NASP
ASSWORD $NASMNT
}

# function to unmount NAS device
umount_nas(){
        NASMNT=/nas10
        mount | grep -q $NASMNT
        [ $? -eq 0 ] && /bin/umount $NASMNT
}

   You can type your function at the beginning of the shell script:
#!/bin/bash
# define variables
NASMNT=/nas10
....
..
....
# define functions
function umount_nas(){
  /bin/mount | grep -q $NASMNT
  [ $? -eq 0 ] && /bin/umount $NASMNT
}

# another function
functiom mount_nas(){
  command1
  command2
}

....
...
### main logic ##

[ $? -eq 0 ] && { echo "Usage: $0 device"; exit 1; }
...
.....

# When you wish to access function, you use the following format:
umount_nas



---
http://tldp.org/LDP/abs/html/functions.html

Chapter 24. Functions

   Like "real" programming languages, Bash has functions, though in a somewhat limited
   implementation. A function is a subroutine, a [10]code block that implements a set of
   operations, a "black box" that performs a specified task. Wherever there is repetitive
   code, when a task repeats with only slight variations in procedure, then consider using a
   function.

   function function_name {
   command...
   }
   or

   function_name () {
   command...
   }

   This second form will cheer the hearts of C programmers (and is more [11]portable).

   As in C, the function's opening bracket may optionally appear on the second line.

   function_name ()
   {
   command...
   }

   Note

   A function may be "compacted" into a single line.

fun () { echo "This is a function"; echo; }
#                                 ^     ^

   In this case, however, a semicolon must follow the final command in the function.

fun () { echo "This is a function"; echo } # Error!
#                                       ^

fun2 () { echo "Even a single-command function? Yes!"; }
#                                                    ^

   Functions are called, triggered, simply by invoking their names. A function call is
   equivalent to a command.

   Example 24-1. Simple functions
#!/bin/bash
# ex59.sh: Exercising functions (simple).

JUST_A_SECOND=1

funky ()
{ # This is about as simple as functions get.
  echo "This is a funky function."
  echo "Now exiting funky function."
} # Function declaration must precede call.


fun ()
{ # A somewhat more complex function.
  i=0
  REPEATS=30

  echo
  echo "And now the fun really begins."
  echo

  sleep $JUST_A_SECOND    # Hey, wait a second!
  while [ $i -lt $REPEATS ]
  do
    echo "----------FUNCTIONS---------->"
    echo "<------------ARE-------------"
    echo "<------------FUN------------>"
    echo
    let "i+=1"
  done
}

  # Now, call the functions.

funky
fun

exit $?

   The function definition must precede the first call to it. There is no method of
   "declaring" the function, as, for example, in C.

f1
# Will give an error message, since function "f1" not yet defined.

declare -f f1      # This doesn't help either.
f1                 # Still an error message.

# However...


f1 ()
{
  echo "Calling function \"f2\" from within function \"f1\"."
  f2
}

f2 ()
{
  echo "Function \"f2\"."
}

f1  #  Function "f2" is not actually called until this point,
    #+ although it is referenced before its definition.
    #  This is permissible.

    # Thanks, S.C.

   Note

   Functions may not be empty!
#!/bin/bash
# empty-function.sh

empty ()
{
}

exit 0  # Will not exit here!

# $ sh empty-function.sh
# empty-function.sh: line 6: syntax error near unexpected token `}'
# empty-function.sh: line 6: `}'

# $ echo $?
# 2


# Note that a function containing only comments is empty.

func ()
{
  # Comment 1.
  # Comment 2.
  # This is still an empty function.
  # Thank you, Mark Bova, for pointing this out.
}
# Results in same error message as above.


# However ...

not_quite_empty ()
{
  illegal_command
} #  A script containing this function will *not* bomb
  #+ as long as the function is not called.

not_empty ()
{
  :
} # Contains a : (null command), and this is okay.


# Thank you, Dominick Geyer and Thiemo Kellner.

   It is even possible to nest a function within another function, although this is not very
   useful.

f1 ()
{

  f2 () # nested
  {
    echo "Function \"f2\", inside \"f1\"."
  }

}

f2  #  Gives an error message.
    #  Even a preceding "declare -f f2" wouldn't help.

echo

f1  #  Does nothing, since calling "f1" does not automatically call "f2".
f2  #  Now, it's all right to call "f2",
    #+ since its definition has been made visible by calling "f1".

    # Thanks, S.C.

   Function declarations can appear in unlikely places, even where a command would otherwise
   go.

ls -l | foo() { echo "foo"; }  # Permissible, but useless.



if [ "$USER" = bozo ]
then
  bozo_greet ()   # Function definition embedded in an if/then construct.
  {
    echo "Hello, Bozo."
  }
fi

bozo_greet        # Works only for Bozo, and other users get an error.



# Something like this might be useful in some contexts.
NO_EXIT=1   # Will enable function definition below.

[[ $NO_EXIT -eq 1 ]] && exit() { true; }     # Function definition in an "and-list".
# If $NO_EXIT is 1, declares "exit ()".
# This disables the "exit" builtin by aliasing it to "true".

exit  # Invokes "exit ()" function, not "exit" builtin.



# Or, similarly:
filename=file1

[ -f "$filename" ] &&
foo () { rm -f "$filename"; echo "File "$filename" deleted."; } ||
foo () { echo "File "$filename" not found."; touch bar; }

foo

# Thanks, S.C. and Christopher Head

   Function names can take strange forms.

  _(){ for i in {1..10}; do echo -n "$FUNCNAME"; done; echo; }
# ^^^         No space between function name and parentheses.
#             This doesn't always work. Why not?

# Now, let's invoke the function.
  _         # __________
#             ^^^^^^^^^^   10 underscores (10 x function name)!
# A "naked" underscore is an acceptable function name.


# In fact, a colon is likewise an acceptable function name.

:(){ echo ":"; }; :

# Of what use is this?
# It's a devious way to obfuscate the code in a script.

   See also [12]Example A-56

   Note

   What happens when different versions of the same function appear in a script?
#  As Yan Chen points out,
#  when a function is defined multiple times,
#  the final version is what is invoked.
#  This is not, however, particularly useful.

func ()
{
  echo "First version of func ()."
}

func ()
{
  echo "Second version of func ()."
}

func   # Second version of func ().

exit $?

#  It is even possible to use functions to override
#+ or preempt system commands.
#  Of course, this is *not* advisable.
 


---
http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_11_02.html

11.2. Examples of functions in scripts

11.2.1. Recycling

   There are plenty of scripts on your system that use functions as a structured way of
   handling series of commands. On some Linux systems, for instance, you will find the
   /etc/rc.d/init.d/functions definition file, which is sourced in all init scripts. Using
   this method, common tasks such as checking if a process runs, starting or stopping a daemon
   and so on, only have to be written once, in a general way. If the same task is needed
   again, the code is recycled.

   You could make your own /etc/functions file that contains all functions that you use
   regularly on your system, in different scripts. Just put the line

   . /etc/functions

   somewhere at the start of the script and you can recycle functions.

11.2.2. Setting the path

   This section might be found in your /etc/profile file. The function pathmunge is defined
   and then used to set the path for the root and other users:
pathmunge () {
        if ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
           if [ "$2" = "after" ] ; then
              PATH=$PATH:$1
           else
              PATH=$1:$PATH
           fi
        fi
}

# Path manipulation
if [ `id -u` = 0 ]; then
        pathmunge /sbin
        pathmunge /usr/sbin
        pathmunge /usr/local/sbin
fi

pathmunge /usr/X11R6/bin after

unset pathmunge

   The function takes its first argument to be a path name. If this path name is not yet in
   the current path, it is added. The second argument to the function defines if the path will
   be added in front or after the current PATH definition.

   Normal users only get /usr/X11R6/bin added to their paths, while root gets a couple of
   extra directories containing system commands. After being used, the function is unset so
   that it is not retained.

11.2.3. Remote backups

   The following example is one that I use for making backups of the files for my books. It
   uses SSH keys for enabling the remote connection. Two functions are defined, buplinux and
   bupbash, that each make a .tar file, which is then compressed and sent to a remote server.
   After that, the local copy is cleaned up.

   On Sunday, only bupbash is executed.
#/bin/bash

LOGFILE="/nethome/tille/log/backupscript.log"
echo "Starting backups for `date`" >> "$LOGFILE"

buplinux()
{
DIR="/nethome/tille/xml/db/linux-basics/"
TAR="Linux.tar"
BZIP="$TAR.bz2"
SERVER="rincewind"
RDIR="/var/www/intra/tille/html/training/"

cd "$DIR"
tar cf "$TAR" src/*.xml src/images/*.png src/images/*.eps
echo "Compressing $TAR..." >> "$LOGFILE"
bzip2 "$TAR"
echo "...done." >> "$LOGFILE"
echo "Copying to $SERVER..." >> "$LOGFILE"
scp "$BZIP" "$SERVER:$RDIR" > /dev/null 2>&1
echo "...done." >> "$LOGFILE"
echo -e "Done backing up Linux course:\nSource files, PNG and EPS images.\nRubbish removed." >> "$LO
GFILE"
rm "$BZIP"
}

bupbash()
{
DIR="/nethome/tille/xml/db/"
TAR="Bash.tar"
BZIP="$TAR.bz2"
FILES="bash-programming/"
SERVER="rincewind"
RDIR="/var/www/intra/tille/html/training/"

cd "$DIR"
tar cf "$TAR" "$FILES"
echo "Compressing $TAR..." >> "$LOGFILE"
bzip2 "$TAR"
echo "...done." >> "$LOGFILE"
echo "Copying to $SERVER..." >> "$LOGFILE"
scp "$BZIP" "$SERVER:$RDIR" > /dev/null 2>&1
echo "...done." >> "$LOGFILE"

echo -e "Done backing up Bash course:\n$FILES\nRubbish removed." >> "$LOGFILE"
rm "$BZIP"
}

DAY=`date +%w`

if [ "$DAY" -lt "2" ]; then
  echo "It is `date +%A`, only backing up Bash course." >> "$LOGFILE"
  bupbash
else
  buplinux
  bupbash
fi


echo -e "Remote backup `date` SUCCESS\n----------" >> "$LOGFILE"

   This script runs from cron, meaning without user interaction, so we redirect standard error
   from the scp command to /dev/null.

   It might be argued that all the separate steps can be combined in a command such as

   tar c dir_to_backup/ | bzip2 | ssh server "cat > backup.tar.bz2"

   However, if you are interested in intermediate results, which might be recovered upon
   failure of the script, this is not what you want.

   The expression

   command &> file

   is equivalent to

   command > file 2>&1



---
http://www.thegeekstuff.com/2010/04/unix-bash-function-examples/

Bash Shell Functions Tutorial with 6 Practical Examples

   Bash shell functions are a way to group several UNIX / Linux commands for later execution
   using a single name for the group. Bash shell function can be executed just like a regular
   Unix command. Shell functions are executed in the current shell context without creating
   any new process to interpret them.
   Both bash aliases and functions allow you to define shortcuts for longer or more
   complicated commands. However, aliases don’t allow control-flows, arguments, and other
   trickery things these functions will allow as explained in this tutorial.

   This article is part of the on-going bash tutorial series. Refer to our earlier tutorial
   about [11]bash introduction, [12]bash exist status and [13]bash alias examples.

   Syntax to create a bash function:
function functionname()
{
commands
.
.
}
     * function is a keyword which is optional.
     * functionname is the name of the function
     * commands – List of commands to be executed in the functions.

   Function accepts arguments. During execution, the arguments to the function becomes the
   positional parameters. Positional parameter 0 will have the scriptname which remains
   unchanged.

   You can call the bash function from the command line as shown below:
$ functionname arg1 arg2
     * When shell interprets a Linux command, it first looks into the special built-in
       functions like break, continue, eval, exec etc., then it looks for shell functions.
     * The exit status of the bash function is the exit status of the last command executed in
       the function body.

   Note: Place the shell function definitions in a shell start up file (for example,
   .bash_profile ). This way, the shell function is always available for you from the command
   line. Refer to our earlier [14]bash execution sequence article to identify when
   .bash_profile will get executed.

Example 1: Function to display long list of files with the given extension

   The function “lsext” is used to find the list of files in the current directory, which has
   the given extension as shown below. This function uses the combination of [15]find command
   and [16]ls command to get the job done.

   [INS: :INS]

$ function lsext()
{
find . -type f -iname '*.'${1}'' -exec ls -l {} \; ;
}

$ cd ~

$ lsext txt
-rw-r--r-- 1 root root   24 Dec 15 14:00 InMorning.txt
-rw-r--r-- 1 root root  184 Dec 16 11:45 Changes16.txt
-rw-r--r-- 1 root root  458 Dec 18 11:04 Changes18.txt
-rw-r--r-- 1 root root 1821 Feb  4 15:01 ChangesOfDB.txt

Example 2. Bash Function to execute a given Linux command on a group of files

   In the following example, function “batchexec” finds the files with the given extension and
   executes the given command on those selected files.
$ function batchexec()
{
find . -type f -iname '*.'${1}'' -exec ${@:2}  {} \; ;
}

$ cd ~

$ batchexec sh ls

$ batchexec sh chmod 755

$ ls -l *.sh
-rwxr-xr-x 1 root root  144 Mar  9 14:39 debug.sh
-rwxr-xr-x 1 root root 5431 Jan 25 11:32 get_opc_vers.sh
-rwxr-xr-x 1 root root   22 Mar 18 08:32 t.sh

   In the above example, it finds all the shell script files with the .sh extension, and
   changes its permission to 755. (All permission for user, for group and others read and
   execute permission). In the function definition you could notice “${@:2}” which gives the
   second and following positional parameters (shell expansion feature).

Example 3. Bash Function to generate random password

   The following function is used to generate the random [17]strong passwords with special
   character for the given length. If length is not given by default it generates with 12
   characters length.
$ function rpass() {
        cat /dev/urandom | tr -cd '[:graph:]' | head -c ${1:-12}
}

$ rpass 6
-Ju.T[[

$ rpass
Gz1f!aKN^""k

   In the above example, when rpass is executed with the argument 6, it generates random
   password with 6 characters and rpass without argument generates 12 character length
   password. ${1:-12} means if $1 is unset or null 12 will be returned else value of $1 will
   be substituted.

Example 4. Bash function to get IP address of a given interface

   The following example defines a function called ‘getip’ which accepts interface name as an
   argument, and gives the IP address assigned on the given interface in the machine. ( by
   default it returns eth0 ip address ). This uses the [18]ifconfig command to get the
   ip-address.
$ function getip()
{
/sbin/ifconfig ${1:-eth0} | awk '/inet addr/ {print $2}' | awk -F: '{print $2}';
}

$ getip
15.110.106.86

$ getip eth0
15.110.106.86

$ getip lo
127.0.0.1

Example 5. Bash function to print the machines details

   This example defines the function which gives all the required information about the
   machine. Users can define and call this function in the start up files, so that you will
   get these information during startup.
$ function mach()
{
    echo -e "\nMachine information:" ; uname -a
    echo -e "\nUsers logged on:" ; w -h
    echo -e "\nCurrent date :" ; date
    echo -e "\nMachine status :" ; uptime
    echo -e "\nMemory status :" ; free
    echo -e "\nFilesystem status :"; df -h
}

$ mach
Machine information:
Linux dev-db 2.6.18-128.el5 #1 SMP Wed Dec 17 11:41:38 EST 2008 x86_64 GNU/Linux

Users logged on:
root     pts/2    ptal.mot Wed10    0.00s  1.35s  0.01s w -h

Current date :
Thu Mar 18 11:59:36 CET 2010

Machine status :
 11:59:36 up 7 days, 3 min,  1 user,  load average: 0.01, 0.15, 0.15

Memory status :
             total       used       free     shared    buffers     cached
Mem:       2059768    2033212      26556          0      81912     797560
-/+ buffers/cache:    1153740     906028
Swap:      4192956      48164    4144792

Filesystem status :
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda1              12G   12G     0 100% /
tmpfs                1006M  377M  629M  38% /dev/shm
/dev/sdc5             9.9G  409M  9.0G   5% /mydisk

Example 6: Bash function to format ls output better

   The following function will clear the screen, place the cursor at the top of the screen,
   executes ls, and then places the cursor at the end of the screen.
$ function ll ()
{
    clear;
    tput cup 0 0;
    ls --color=auto -F --color=always -lhFrt;
    tput cup 40 0;
}

$ ll

Display the function code using type command

   type is a shell built-in used to view the function code.
Syntax:
type function-name
$ type ll
ll is a function
ll ()
{
    clear;
    tput cup 0 0;
    ls --color=auto -F --color=always -lhFrt;
    tput cup 40 0;
    alias ls="ls --color=auto -F"
}

   For your easy reference, get all the 6 functions mentioned this article from this
   [19]sample .bash_profile functions file.

   Add all these functions to your ~/.bash_profile file, to make sure you have access to these
   functions all the times without having to create it every time.
