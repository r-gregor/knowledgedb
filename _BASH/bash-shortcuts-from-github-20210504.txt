filename: bash_shortcuts_from_github_20210504.txt
https://gist.github.com/tuxfight3r/60051ac67c5f0445efee

Bash Shortcuts
May 4, 2021

======================================================================================================
Moving
------------------------------------------------------------------------------------------------------
command            description
ctrl+a           Goto BEGINNING of command line
ctrl+e           Goto END of command line
ctrl+b           move back one character
ctrl+f           move forward one character
alt+f            move cursor FORWARD one word
alt+b            move cursor BACK one word
ctrl+xx          Toggle between the start of line and current cursor position
ctrl+]+x       Where x is any character, moves the cursor forward to the next occurance of x
alt+ctrl+]+x Where x is any character, moves the cursor backwards to the previous occurance of x
======================================================================================================
Edit / Other
------------------------------------------------------------------------------------------------------
command            description
ctrl+d           Delete the character under the cursor
ctrl+h           Delete the previous character before cursor
ctrl+u           Clear all / cut BEFORE cursor
ctrl+k           Clear all / cut AFTER cursor
ctrl+w           delete the word BEFORE the cursor
alt+d            delete the word FROM the cursor
ctrl+y           paste (if you used a previous command to delete)
ctrl+i           command completion like Tab
ctrl+l           Clear the screen (same as clear command)
ctrl+c           kill whatever is running
ctrl+d           Exit shell (same as exit command)
ctrl+z           Place current process in background
ctrl+_           Undo
ctrl+x ctrl+u  Undo the last changes. ctrl+ _ does the same
ctrl+t           Swap the last two characters before the cursor
esc+t            Swap last two words before the cursor
alt+t            swap current word with previous
esc+.
esc+_
alt+[Backspace]  delete PREVIOUS word
alt+<            Move to the first line in the history
alt+>            Move to the end of the input history, i.e., the line currently being entered
alt+?            Display the file/folder names in the current path as help
alt+*            Print all the file/folder names in the current path as parameter
alt+.            Print the LAST ARGUMENT (ie "vim file1.txt file2.txt" will yield "file2.txt")
alt+c            Capitalize the first character to end of word starting at cursor (whole word if cursor is at
                   The beginning of word)
alt+u            Make uppercase from cursor to end of word
alt+l            Make lowercase from cursor to end of word
alt+n
alt+p            Non-incremental reverse search of history.
alt+r            Undo all changes to the line
alt+ctl+e      Expand command line.
~[TAB][TAB]        List all users
$[TAB][TAB]        List all system variables
@[TAB][TAB]        List all entries in your /etc/hosts file
[TAB]              Auto complete
cd -               Change to PREVIOUS working directory
======================================================================================================
 History
------------------------------------------------------------------------------------------------------
command                                           description
ctrl+r Search backward starting at the current line and moving 'up' through the history as necessary
crtl+s Search forward starting at the current line and moving 'down' through the history as necessary
ctrl+p Fetch the previous command from the history list, moving back in the list (same as up arrow)
ctrl+n Fetch the next command from the history list, moving forward in the list (same as down arrow)
ctrl+o Execute the command found via Ctrl+r or Ctrl+s
ctrl+g Escape from history searching mode
!!       Run PREVIOUS command (ie sudo !!)
!vi      Run PREVIOUS command that BEGINS with vi
!vi:p    Print previously run command that BEGINS with vi
!n       Execute nth command in history
!$       Last argument of last command
!^       First argument of last command
^abc^xyz Replace first occurance of abc with xyz in last command and execute it
------------------------------------------------------------------------------------------------------

Kill a job
n = job number, to list jobs, run jobs
$> kill %n

Example:
$> kill %1


---
https://github.com/fliptheweb/bash-shortcuts-cheat-sheet/blob/master/README.md

bash-shortcuts-cheat-sheet/README.md

===================================================================================================
 Move cursor
---------------------------------------------------------------------------------------------------
Ctrl+a     Go to the beginning of the line (Home)
Ctrl+e     Go to the End of the line (End)
Alt+b      Back (left) one word
Alt+f      Forward (right) one word
Ctrl+f     Forward one character
Ctrl+b     Backward one character
Ctrl+xx    Toggle between the start of line and current cursor position
===================================================================================================
 Edit
---------------------------------------------------------------------------------------------------
Ctrl+u     Cut the line before the cursor position
Alt+       Delete the Word before the cursor
Del
Alt+d      Delete the Word after the cursor
Ctrl+d     Delete character under the cursor
Ctrl+h     Delete character before the cursor (backspace)
Ctrl+w     Cut the Word before the cursor to the clipboard
Ctrl+k     Cut the Line after the cursor to the clipboard
Alt+t      Swap current word with previous
Ctrl+t     Swap the last two characters before the cursor (typo)
Esc+t      Swap the last two words before the cursor.
Ctrl+y     Paste the last thing to be cut (yank)
Alt+u      UPPER capitalize every character from the cursor to the end of the Current word.
Alt+l      Lower the case of every character from the cursor to the end of the Current word.
Alt+c      Capitalize the character under the cursor and move to the end of the Word.
Alt+r      Cancel the changes and put back the line as it was in the history (revert)
Ð¡trl+_     Undo
===================================================================================================
 History
---------------------------------------------------------------------------------------------------
Ctrl+r     Recall the last command including the specified character(s)(equivalent
           to : vim ~/.bash_history).
Ctrl+p     Previous command in history (i.e. walk back through the command history)
Ctrl+n     Next command in history (i.e. walk forward through the command history)
Ctrl+s     Go back to the next most recent command.
Ctrl+o     Execute the command found via Ctrl+r or Ctrl+s
Ctrl+g     Escape from history searching mode
Alt+.      Use the last word of the previous command
===================================================================================================
Process control
---------------------------------------------------------------------------------------------------
Bang(!) - The History Expansion
Bash also has some handy features that use the ! (bang) to allow you to do some funky stuff with
bash commands.
General notation is '![event][:word[:modifier[:modifier]...]]'.
You may omit word separator ':', if the word designator begins with a '^', '$','*', '-', or '%'.
If a word designator is supplied without an event specification, the previous command is used as
the event.
After the optional word designator, you can add a sequence of one or more modifiers,
each preceded by a ':'.
===================================================================================================
 Events         Meaning                     Example
---------------------------------------------------------------------------------------------------
                Start a history
                substitution, except
                when followed by a
                space, tab, the end
!               of the line, '=' or
                '(' (when the
                extglob shell option
                is enabled using the
                shopt builtin).
---------------------------------------------------------------------------------------------------
                                            $ history
                                            1 echo foo bar baz
                                            2 history
                                            $ !1
!n              Refer to command            #Print command that will be saved in history
                line n.                     #+and executed
                                            echo foo bar baz
                                            #Actual execution
                                            foo bar baz
---------------------------------------------------------------------------------------------------
                                            $ history
                                            1 echo foo
                                            2 echo bar
                Refer to the command        3 echo baz
!-n             n lines back.               4 history
                                            $ !-3
                                            echo bar
                                            bar
---------------------------------------------------------------------------------------------------
                                            $ echo foo bar baz
                Refer to the                foo bar baz
!!              previous command.           $ !!
                This is a synonym           echo foo bar baz
                for '!-1'.                  foo bar baz
---------------------------------------------------------------------------------------------------
                Refer to the most           $printf '%s\n' foo
                recent command              foo
                preceding the               $ echo bar
!string         current position in         bar
                the history list            $ !pri
                starting with string        printf '%s\n' foo
                .                           foo
---------------------------------------------------------------------------------------------------
                Refer to the most           $printf '%s\n' foo
                recent command              foo
                preceding the               $ echo bar
                current position in         bar
!?string        the history list            $ !?ntf
[?]             containing string.          printf '%s\n' foo
                The trailing '?' may        foo
                be omitted if the           $ !?bar
                string is followed          echo bar
                immediately by a            bar
                newline.
---------------------------------------------------------------------------------------------------
                                            For more info, refer to 's/old/new/' in
                Quick Substitution.         Modifiers section.
                Repeat the last
^string1^       command, replacing          $ echo foo
tring2^         string1 with string2        foo
                . Equivalent to             $ ^echo^printf '%s\n'^
                '!!:s/string1/              printf '%s\n' foo
                string2'.                   foo
---------------------------------------------------------------------------------------------------
                                            $ echo foo; echo bar; !#echo baz
                                            echo foo; echo bar; echo foo; echo bar; echo baz
                Repeat entire               foo
!#              command line before         bar
                this event.                 foo
                                            bar
                                            baz
===================================================================================================
Words         Meaning                       Example
              The 0th word. For             $ echo foo
              many applications,            foo
0 (zero)      this is the command           $ !:0
              word.                         echo

----------    ---------------------         --------------------------------------------------------------------
                                            $ echo foo bar baz
                                            foo bar baz
n             The nth word.                 $ echo !:2
                                            echo bar
                                            bar

----------    ---------------------         --------------------------------------------------------------------
                                            $ echo foo bar baz
                                            foo bar baz
^             The first argument;           $ echo !^
              that is, word 1.              echo foo
                                            foo
----------    ---------------------         --------------------------------------------------------------------

                                            $ echo foo bar baz
                                            foo bar baz
$             The last argument.            $ echo !$
                                            echo baz
                                            baz
---------------------------------------------------------------------------------------------------

                                            $ echo foo
                                            foo
                                            $ printf '%s\n' bar
                                            bar
                                            $ !?ch
                                            echo foo
                                            foo
              The word matched by           $ !% baz
%             the most recent '?            echo baz
              string?' search               baz
                                            $ !?bar
                                            printf '%s\n' bar
                                            bar
                                            $ echo !%
                                            echo bar
                                            bar
----------    ---------------------         --------------------------------------------------------------------

                                            $ echo foo bar baz
                                            foo bar baz
                                            $ echo !:2-3
              A range of words;             echo bar baz
x-y           '-y' abbreviates              bar baz
              '0-y'.                        $ !:-1
                                            echo bar
                                            bar
---------------------------------------------------------------------------------------------------

              All of the words,              
              except the 0th. This          $ echo foo bar baz
              is a synonym for              foo bar baz
              '1-$'. It is not an           $ printf '%s\n' !*
*             error to use '*' if           printf '%s\n' foo bar baz
              there is just one             foo
              word in the event -           bar
              the empty string is           baz
              returned in that
              case.
----------    ---------------------         --------------------------------------------------------------------
                                            $ echo foo bar baz
                                            foo bar baz
                                            $ printf '%s\n' !:2*
x*            Abbreviates 'x-$'             printf '%s\n' bar baz
                                            bar
                                            baz
----------    ---------------------         --------------------------------------------------------------------

                                            $ echo foo bar baz
                                            foo bar baz
              Abbreviates 'x-$'             $ printf '%s\n' !:0-
x-            like 'x*', but omits          printf '%s\n' echo foo bar
              the last word.                echo
                                            foo
                                            bar
===================================================================================================
Modifiers     Meaning                       Example
              Print the new                 $ echo foo bar baz
              command but do not            foo bar baz
              execute it.                   $ !:p
p             Printed command is            #Printed, but not executed
              saved in history, so          echo foo bar baz
              you can use Ctrl+p            $ !:*:p
              to re-enter it in             foo bar baz
              current prompt.
---------------------------------------------------------------------------------------------------
              Remove a trailing
              pathname component,           $ echo foo /example/path/bar.txt baz
              leaving only the              foo /example/path/bar.txt baz
h             head (Actually,               $ !:p:h
              remove all after              echo foo /example/path
              last '/',
              including).
---------------------------------------------------------------------------------------------------
              Remove all leading            $ echo foo /example/path/bar.txt baz
              pathname components,          foo /example/path/bar.txt baz
t             leaving the tail              $ !:p:t
              (Actually, remove             bar.txt baz
              all before last '/',
              including).
---------------------------------------------------------------------------------------------------
              Remove a trailing
              suffix of the form            $ echo foo /example/path/bar.txt baz
              '.suffix', leaving            foo /example/path/bar.txt baz
r             the basename                  $ !:p:r
              (Actually, remove             echo foo /example/path/bar
              all after last '.',
              including).
---------------------------------------------------------------------------------------------------
              Remove all but the            $ echo foo /example/path/bar.txt baz
              trailing suffix               foo /example/path/bar.txt baz
e             (Actually, remove             $ !:p:e
              all before last '.',          txt baz
              including).
---------------------------------------------------------------------------------------------------
              Quote the                     $ echo foo 'bar baz'
              substituted words,            foo bar baz
q             escaping further              $ !:p:q
              substitutions.                'echo foo '\'bar baz'\'''

---------------------------------------------------------------------------------------------------
              Quote the                     $ echo foo 'bar baz'
              substituted words as          foo bar baz
x             with 'q', but break           $ !:p:x
              into words at                 'echo' 'foo' ''\'bar' 'baz'\'''
              spaces, tabs, and
              newlines.
---------------------------------------------------------------------------------------------------
              Substitute new for
              the first occurrence
              of old in the event
              line. Any delimiter
              may be used in place
              of '/'. The
              delimiter may be              $ echo foo bar
              quoted in old and             foo bar
s/old/new/    new with a single             $ !:p:s/foo/baz
              backslash. If '&'             echo baz bar
              appears in new, it
              is replaced by old.
              A single backslash
              will quote the '&'.
              The final delimiter
              is optional if it is
              the last character
              on the input line.
---------------------------------------------------------------------------------------------------
                                            $ echo foo bar
                                            foo bar
                                            $ !:p:s/foo/baz
              Repeat the previous           echo baz bar
&             substitution.                 $ printf '%s\n' foo
                                            foo
                                            $ !:p:&
                                            printf '%s\n' baz
---------------------------------------------------------------------------------------------------

              Cause changes to be
              applied over the              $ echo foo bar foo
g             entire event line.            foo bar foo
a             Used in conjunction           $ !:p:gs/foo/baz
              with 's', as in gs/           echo baz bar baz
              old/new/, or with '&'
---------------------------------------------------------------------------------------------------
              Apply the following
G             's' modifier once to          Result is same as in 'g' modifier
              each word in the
              event.
===================================================================================================


---

