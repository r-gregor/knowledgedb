filename: bash_howto-assign-heredoc-to-variable_20160517.txt
http://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash

[30]How to assign a heredoc value to a variable in Bash?

   I have this multi-line string (quotes included)
abc'asdf"
$(dont-execute-this)
foo"bar"''

   How would I assign it to a variable using a heredoc in Bash?

   I need to preserves newlines.

   I don't want to escape the characters in the string, that would be annoying...
***
   @JohnM - I have just tried a heredoc assignment with single-quoted 'EOF', with escaped linebreaks
   with ` in the content: if the second line has cd` command, I get back: ".sh: line X: cd: command not
   found"; but if I double-quote "EOF"; then bash variables ${A} do not get preserved as strings (they
   get expanded); but then, line-breaks are preserved - and, I don't have a problem running a command
   with cd in second line (and both 'EOF' and "EOF" seem to play well also with eval, for running a set
   of commands stored in a string variable). Cheers! – [39]sdaau May 24 '12 at 8:08
   1
   ... and to add to my previous comment: bash comments "#" in double-qouted "EOF" variable, if called
   via eval $VAR, will cause all of the rest of the script to be commented, as here $VAR will be seen as
   a single line; to be able to use bash # comments in multiline script, double-quote also variable in
   the eval call: eval "$VAR"`. – [40]sdaau May 24 '12 at 8:18

***
   You can avoid a useless use of cat and handle mismatched quotes better with this:
$ read -r -d '' VAR <<'EOF'
abc'asdf"
$(dont-execute-this)
foo"bar"''
EOF

   If you don't quote the variable when you echo it, newlines are lost. Quoting it preserves them:
$ echo "$VAR"
abc'asdf"
$(dont-execute-this)
foo"bar"''

   If you want to use indentation for readability in the source code, use a dash after the less-thans.
   The indentation must be done using only tabs (no spaces).
$ read -r -d '' VAR <<-'EOF'
    abc'asdf"
    $(dont-execute-this)
    foo"bar"''
    EOF
$ echo "$VAR"
abc'asdf"
$(dont-execute-this)
foo"bar"''

   If, instead, you want to preserve the tabs in the contents of the resulting variable, you need to
   remove tab from IFS. The terminal marker for the here doc (EOF) must not be indented.
$ IFS='' read -r -d '' VAR <<'EOF'
    abc'asdf"
    $(dont-execute-this)
    foo"bar"''
EOF
$ echo "$VAR"
    abc'asdf"
    $(dont-execute-this)
    foo"bar"''

   Tabs can be inserted at the command line by pressing Ctrl-V Tab. If you are using an editor,
   depending on which one, that may also work or you may have to turn off the feature that automatically
   converts tabs to spaces.
***
   I think it's worth mentioning that if you have set -o errexit (a.k.a set -e) in your script and you
   use this then it will terminate your script because read returns a non-zero return code when it
   reaches EOF. – [49]Mark Byers Jun 28 '11 at 8:04
***
   @MarkByers: That's one of the reasons I never use set -e and always recommend against its use. It's
   better to use proper error handling instead. trap is your friend. Other friends: else and || among
   others. – [50]Dennis Williamson Jun 29 '11 at 3:37
***
   @ulidtko That's because you don't have a space between d and the empty string; bash collapses -rd''
   to simply -rd before read ever sees its arguments, so VAR is treated as the argument to -d.
   – [51]chepner Apr 1 '14 at 19:16
***
   In this format, read will return with a non-zero exit code. This makes this method less than ideal in
   a script with error checking enabled (eg set -e). – [52]Swiss Apr 28 '15 at 22:08
***
   Use $() to assign the output of cat to your variable like this:
VAR=$(cat <<'END_HEREDOC'
abc'asdf"
$(dont-execute-this)
foo"bar"''
END_HEREDOC
)

echo "$VAR"

   Making sure to delimit END_HEREDOC with single-quotes.
***
   +1. This is the most readable solution, at least for my eyes. It leaves the name of the variable at
   the far left of the page, instead of embedding it in the read command. – [60]Clayton Stanley Apr 26
   '13 at 22:57
***
   PSA: remember that the variable must be quoted to preserve newlines. echo "$VAR" instead of echo
   $VAR. – [62]sevko Nov 6 '14 at 3:43
***
   this is variation of Dennis method, looks more elegant in the scripts.

   function definition:
define(){ IFS='\n' read -r -d '' ${1} || true; }

   usage:
define VAR <<'EOF'
abc'asdf"
$(dont-execute-this)
foo"bar"''
EOF

echo "$VAR"

   enjoy
***
   This is also superior to the accepted answer, because it can be modified to support POSIX sh in
   addition to bash (a read loop in the function, to avoid the -d '' bashism necessary to preserve
   newlines). – [71]ELLIOTTCABLE Dec 22 '14 at 0:32
***
VAR=<<END
abc
END

   doesn't work because you are redirecting stdin to something that doesn't care about it, namely the
   assignment
export A=`cat <<END
sdfsdf
sdfsdf
sdfsfds
END
` ; echo $A

   works, but there's a back-tic in there that may stop you from using this. Also, you should really
   avoid using backticks, it's better to use the command substitution notation $(..).
export A=$(cat <<END
sdfsdf
sdfsdf
sdfsfds
END
) ; echo $A

***
   I've updated my question to include $(executable). Also, how do you preserve newlines? – [77]Neil Jul
   22 '09 at 20:05
***
   @l0st3d: So close... Use $(cat <<'END' instead. @Neil: The very last newline will not be part of the
   variable, but the rest will be preserved. – [78]ephemient Jul 22 '09 at 20:16
***
   It doesn't seem like any newlines are preserved. Running the above example I see: "sdfsdf sdfsdf
   sdfsfds"... ah! But writing echo "$A" (i.e. putting $A in double quotes) and you do see the newlines!
   – [79]Darren Cook May 15 '13 at 11:58
***
   @Darren: aha! I had noticed the newlines issue, and using the quotes around the output variable does
   fix the issue. thx! – [80]javadba Jun 5 '13 at 19:14
***
   @l0st3d I would just leave out mention of backticks. – [81]Brad Koch May 21 '14 at 16:03
   add a comment |
***
   Adding comment here as an answer since I don't have enough rep points to comment on your question
   text.

     There is still no solution that preserves newlines.

   This is not true - you're probably just being misled by the behaviour of echo:

   echo $VAR # strips newlines

   echo "$VAR" # preserves newlines
***
   Getting rep on stackoverflow is more difficult than programming bash. +1 out of sympathy.
   – [85]Onnonymous Aug 20 '15 at 9:10
***
   Really this is the behavior of how quoting a variable works. Without quotes, it will insert them as
   different parameters, space deliminated, while with quotes the entire variable contents will be
   treated as one argument – [86]Czipperz Nov 9 '15 at 1:02
***
assign a heredoc value to a variable

VAR="$(cat <<'VAREOF'
abc'asdf"
$(dont-execute-this)
foo"bar"''
VAREOF
)"

used as an argument of a command

echo "$(cat <<'SQLEOF'
xxx''xxx'xxx'xx  123123    123123
abc'asdf"
$(dont-execute-this)
foo"bar"''
SQLEOF
)"

***
   When I tried the first method, there seems to be no line terminators between the lines. Must be some
   kind of configuration on my linux machine? – [91]Kemin Zhou Nov 24 '15 at 18:46

   This probably means when you were echoing your variable, you didn't put quotes around it... Try it
   like so: echo "$VAR" – [92]Brad Parks Feb 22 at 15:15
***
   An array is a variable, so in that case mapfile will work
mapfile y <<z
abc'asdf"
$(dont-execute-this)
foo"bar"''
z

   Then you can print like this
printf %s "${y[@]}"

***
   I found myself having to read a string with NULL in it, so here is a solution that will read anything
   you throw at it. Although if you actually are dealing with NULL, you will need to deal with that at
   the hex level.

   $ cat > read.dd.sh
read.dd() {
     buf=
     while read; do
        buf+=$REPLY
     done < <( dd bs=1 2>/dev/null | xxd -p )

     printf -v REPLY '%b' $( sed 's/../ \\\x&/g' <<< $buf )
}

   Proof:
$ . read.dd.sh
$ read.dd < read.dd.sh
$ echo -n "$REPLY" > read.dd.sh.copy
$ diff read.dd.sh read.dd.sh.copy || echo "File are different"
$

   HEREDOC example (with ^J, ^M, ^I):
$ read.dd <<'HEREDOC'
>       (TAB)
>       (SPACES)
(^J)^M(^M)
> DONE
>
> HEREDOC

$ declare -p REPLY
declare -- REPLY="  (TAB)
      (SPACES)
(^M)
DONE

"

$ declare -p REPLY | xxd
0000000: 6465 636c 6172 6520 2d2d 2052 4550 4c59  declare -- REPLY
0000010: 3d22 0928 5441 4229 0a20 2020 2020 2028  =".(TAB).      (
0000020: 5350 4143 4553 290a 285e 4a29 0d28 5e4d  SPACES).(^J).(^M
0000030: 290a 444f 4e45 0a0a 220a                 ).DONE

***
   This one works as expected, but it depends on gvim. – [99]Techlive Zheng Oct 10 '12 at 16:00
   add a comment |
   up vote 1 down vote

   Branching off [100]Neil's answer, you often don't need a var at all, you can use a function in much
   the same way as a variable and it's much easier to read than the inline or read-based solutions.
$ complex_message() {
  cat <<'EOF'
abc'asdf"
$(dont-execute-this)
foo"bar"''
EOF
}

$ echo "This is a $(complex_message)"
This is a abc'asdf"
$(dont-execute-this)
foo"bar"''

***
   Thanks to [104]dimo414's answer, this shows how his great solution works, and shows that you can have
   quotes and variables in the text easily as well:

example output

$ ./test.sh

The text from the example function is:
  Welcome dev: Would you "like" to know how many 'files' there are in /tmp?

  There are "      38" files in /tmp, according to the "wc" command

test.sh

#!/bin/bash

function text1()
{
  COUNT=$(\ls /tmp | wc -l)
cat <<EOF

  $1 Would you "like" to know how many 'files' there are in /tmp?

  There are "$COUNT" files in /tmp, according to the "wc" command

EOF
}

function main()
{
  OUT=$(text1 "Welcome dev:")
  echo "The text from the example function is: $OUT"
}

main

***
$TEST="ok"
read MYTEXT <<EOT
this bash trick
should preserve
newlines $TEST
long live perl
EOT
echo -e $MYTEXT

