filename: bash_terminal-colors-setup-multif_20240215.txt

https://www.tutorialspoint.com/how-to-change-terminal-output-color-in-linux

How to Change Terminal Output Color in Linux?

Introduction
   The Linux Terminal is a powerful tool that allows users to interact with the operating system through
   the command line. However, the terminal's default output color can be dull and unattractive. In this
   article, we will discuss several ways to change the terminal output color in Linux. We'll cover the
   use of different commands and tools that can be used to customize the terminal's color scheme, as
   well as some examples of how to use them. This guide is intended for Linux users who want to improve
   their terminal experience by changing the output color.

Using the "LS" command
   One of the easiest ways to change the terminal output color in Linux is by using the "ls" command.
   The "ls" command is used to list the contents of a directory and has several options that can be used
   to customize the output. Here is an example of the "ls" command −
$> ls

   The output will look like this −
bin@   home/            lib32@       media/  root/  sys/  vmlinuz@
boot/  initrd.img@      lib64@       mnt/    run/   tmp/  vmlinuz.old@
dev/   initrd.img.old@  libx32@      opt/    sbin@  usr/
etc/   lib@             lost+found/  proc/   srv/   var/

Using the "LS_COLORS" environment variable
   Another way to change the color of terminal output on Linux is to use the "LS_COLORS" environment
   variable. This variable can be used to set the color scheme for the "ls" command. The variable can be
   set in the ".bashrc" file, located in the user's home directory. To set the "LS_COLORS" variable, add
   the following line to the ".bashrc" file −
$> export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:\
or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.'

   The line above sets the color scheme for different file types. For example, "of" represents the
   directory and "1;35" represents the color code of the directory. Similarly, "ex" represents the
   executable and "01;32" represents the color code of the executable.

Using the "Tput" command
   The "tput" command can be used to change the color of terminal output on Linux. The "tput" command
   can be used to set the color scheme of the terminal, as well as change the background and text color.
   Below is an example of how to use the "tput" command to set the text color to red −
$> tput setaf 1

   The above command sets the text color to red. To change the background color, use the "setab" option
   instead of "setaf". Here is an example of how to use the "tput" command to set the background color
   to blue −
$> tput setab 4

Using "Gnome-Terminal"
   Gnome-Terminal is a terminal emulator for the GNOME desktop environment. It provides several options
   for customizing the terminal, including the ability to change the terminal output color. To change
   the color of terminal output in Gnome-Terminal, open the terminal and go to "Edit -> Profile
   Preferences". In the "Colors" tab you can change the background and text color of the terminal.

ANSI escape codes
   Another method to change the color of terminal output is to use ANSI escape codes. ANSI escape codes
   are standardized commands used to manipulate the behavior and appearance of text in a terminal or
   terminal emulator. For example, we can write a script that prints the red words "Hello world" on a
   green background using the echo command and then resets the colors to normal −
#!/bin/sh
RED_ON_GREEN='\033[31;42m'
RESET='\033[0m'
echo "${RED_ON_GREEN}Hello world${RESET}"

   "\33" is the most platform-independent way of encoding an ESC character in the terminal, although a
   reference, "\e", can also be used on Linux. Also, it's worth noting that the color settings aren't
   encapsulated in any way. As a result, if we don't restart them, they will bleed out of our script,
   which is undesirable in most cases. We can find the full list of color codes on Wikipedia.
#!/bin/sh
RED_FG=`tput setaf 1`
GREEN_BG=`tput setab 2`
RESET=`tput sgr0`
echo "${RED_FG}${GREEN_BG}Hello world${RESET}"

tput command
   The tput command is another option that can be used to change the color of terminal output on Linux.
   The tput command allows users to query the terminfo database and provides a convenient way to extract
   the escape codes we need. For example, we can recreate the script from the previous section using the
   tput command −

Conclusion
   In this article, we have discussed various ways to change the color of terminal output in Linux. We
   have covered the use of several commands and tools such as the "ls" command, the "LS_COLORS"
   environment variable, the "tput" command, and Gnome-Terminal to customize the terminal's color
   scheme. We also discussed using ANSI escape codes and the tput command to change the color of
   terminal output. Using these methods, you can make your terminal more visually appealing and easier
   to read. Remember to use commands with the correct syntax and options to change the color of terminal
   output on Linux.


---
https://www.codeproject.com/Articles/5329247/How-to-Change-Text-Color-in-a-Linux-Terminal

How to Change Text Color in a Linux Terminal

   A quick overview and a simple bash script to make your script output a little more lively
   Outputting text in a terminal can result in a monochrome experience for the user. Adding color is
   easy, so here I provide a script that includes helper methods for outputting text, using defined
   colors, and handling the dark mode vs light mode terminal windows.

Introduction
   The default text output to a terminal is monochromatic and doesn't provide a simple method to provide
   context. For instance, you may want an error to appear in red, success in green, or important info to
   be output in bold.

   Adding color to your terminal output is straightforward and involves outputting the correct control
   characters before your text.

Terminal Colors
   To output colored text, you need to printf or echo -e (the -e to ensure control characters are
   interpreted) the control characters for the required color, then output your text, and then (to be
   tidy) reset the output back to defaults. The following table lists the codes:
   ------------------------------------------------------
   Color                       Foreground      Background
   ------------------------------------------------------
   Default                     \033[39m        \033[49m
   Black                       \033[30m        \033[40m
   Dark red                    \033[31m        \033[41m
   Dark green                  \033[32m        \033[42m
   Dark yellow (Orange-ish)    \033[33m        \033[43m
   Dark blue                   \033[34m        \033[44m
   Dark magenta                \033[35m        \033[45m
   Dark cyan                   \033[36m        \033[46m
   Light gray                  \033[37m        \033[47m
   Dark gray                   \033[90m        \033[100m
   Red                         \033[91m        \033[101m
   Green                       \033[92m        \033[101m
   Orange                      \033[93m        \033[103m
   Blue                        \033[94m        \033[104m
   Magenta                     \033[95m        \033[105m
   Cyan                        \033[96m        \033[106m
   White                       \033[97m        \033[107m
   ------------------------------------------------------
   and the reset code is:      \033[0m
   ------------------------------------------------------

   The format of the string for foreground color is:
"\033[" + "<0 or 1, meaning normal or bold>;" + "<color code> + "m"

   and for background:
"\033[" + "<color code>" + "m"

   These codes can be output together in order to change fore- and back-ground colors simultaneously.

Using the Code
   A simple example of red text:
$> printf "\033[91mThis is red text\033[0m"

   An example of red text on a white background:
$> printf "\033[91m\033[107mThis is red text on a white background\033[0m"

   This is a little cumbersome so I've created some simple subroutines that provide the means to output
   text in a more civilised manner.

Helper Functions
   The following helper functions allow you to do stuff like:
WriteLine "This is red text" "Red"
WriteLine "This is red text on a white background" "Red" "White"

   Much easier.
useColor="true" # Set to false if you find your environment just doesn't handle colors well

# Returns a color code for the given foreground/background colors
# This code is echoed to the terminal before outputting text in
# order to generate a colored output.
#
# string foreground color name. Optional if no background provided.
#        Defaults to "Default" which uses the system default
# string background color name.  Optional. Defaults to $color_background
#        which is set based on the current terminal background
# returns a string

function Color () {
	local foreground=$1
	local background=$2

	if [ "$foreground" == "" ];  then foreground="Default"; fi
	if [ "$background" == "" ]; then background="$color_background"; fi

	local colorString='\033['

	# Foreground Colours
	case "$foreground" in
		"Default")      colorString='\033[0;39m';;
		"Black" )       colorString='\033[0;30m';;
		"DarkRed" )     colorString='\033[0;31m';;
		"DarkGreen" )   colorString='\033[0;32m';;
		"DarkYellow" )  colorString='\033[0;33m';;
		"DarkBlue" )    colorString='\033[0;34m';;
		"DarkMagenta" ) colorString='\033[0;35m';;
		"DarkCyan" )    colorString='\033[0;36m';;
		"Gray" )        colorString='\033[0;37m';;
		"DarkGray" )    colorString='\033[1;90m';;
		"Red" )         colorString='\033[1;91m';;
		"Green" )       colorString='\033[1;92m';;
		"Yellow" )      colorString='\033[1;93m';;
		"Blue" )        colorString='\033[1;94m';;
		"Magenta" )     colorString='\033[1;95m';;
		"Cyan" )        colorString='\033[1;96m';;
		"White" )       colorString='\033[1;97m';;
		*)              colorString='\033[0;39m';;
	esac

	# Background Colours
	case "$background" in
		"Default" )     colorString="${colorString}\033[49m";;
		"Black" )       colorString="${colorString}\033[40m";;
		"DarkRed" )     colorString="${colorString}\033[41m";;
		"DarkGreen" )   colorString="${colorString}\033[42m";;
		"DarkYellow" )  colorString="${colorString}\033[43m";;
		"DarkBlue" )    colorString="${colorString}\033[44m";;
		"DarkMagenta" ) colorString="${colorString}\033[45m";;
		"DarkCyan" )    colorString="${colorString}\033[46m";;
		"Gray" )        colorString="${colorString}\033[47m";;
		"DarkGray" )    colorString="${colorString}\033[100m";;
		"Red" )         colorString="${colorString}\033[101m";;
		"Green" )       colorString="${colorString}\033[102m";;
		"Yellow" )      colorString="${colorString}\033[103m";;
		"Blue" )        colorString="${colorString}\033[104m";;
		"Magenta" )     colorString="${colorString}\033[105m";;
		"Cyan" )        colorString="${colorString}\033[106m";;
		"White" )       colorString="${colorString}\033[107m";;
		*)              colorString="${colorString}\033[49m";;
	esac

	echo "${colorString}"
}


# Outputs a line, including linefeed, to the terminal using the given foreground / background
# colors
#
# string The text to output. Optional if no foreground provided. Default is just a line feed.
# string Foreground color name. Optional if no background provided. Defaults to "Default" which
#        uses the system default
# string Background color name.  Optional. Defaults to $color_background which is set based on the
#        current terminal background

function WriteLine () {

	local resetColor='\033[0m'

	local str=$1
	local forecolor=$2
	local backcolor=$3

	if [ "$str" == "" ]; then
		printf "\n"
		return;
	fi

	# Note the use of the format placeholder %s. This allows us to pass "--" as strings without error
	if [ "$useColor" == "true" ]; then
		local colorString=$(Color ${forecolor} ${backcolor})
		printf "${colorString}%s${resetColor}\n" "${str}"
	else
		printf "%s\n" "${str}"
	fi
}

# Outputs a line without a linefeed to the terminal using the given foreground / background colors
#
# string The text to output. Optional if no foreground provided. Default is just a line feed.
# string Foreground color name. Optional if no background provided. Defaults to "Default" which
#        uses the system default
# string Background color name.  Optional. Defaults to $color_background which is set based on the
#        current terminal background

function Write () {
	local resetColor="\033[0m"

	local forecolor=$1
	local backcolor=$2
	local str=$3

	if [ "$str" == "" ];  then
		return;
	fi

	# Note the use of the format placeholder %s. This allows us to pass "--" as strings without error
	if [ "$useColor" == "true" ]; then
		local colorString=$(Color ${forecolor} ${backcolor})
		printf "${colorString}%s${resetColor}" "${str}"
	else
		printf "%s" "$str"
	fi
}

Handling Dark Mode and Light Mode
   In many Linux and Unix distros the terminal is black background, white text. On macOS, the default is
   white background with black text. There are ways and means to test and guess what's happening
   but ultimately you'll need to test on your system and decide what works for you.

   What I do is assume that if we're on a mac, then we can test directly, otherwise we assume white on
   black. I then also try to stick to default colors, and where I want a bit of color, I'll stick to
   some predefined colors I know will work well anywhere.

# Gets the terminal background color. It's a very naive guess
# returns an RGB triplet, values from 0 - 64K

function getBackground () {
	if [[ $OSTYPE == 'darwin'* ]]; then
		osascript -e \
		'tell application "Terminal"
			get background color of selected tab of window 1
		end tell'
	else

		# See https://github.com/rocky/shell-term-background/blob/master/term-background.bash
		# for a comprehensive way to test for background colour. For now we're just going to
		# assume that non-macOS terminals have a black background.

		echo "0,0,0" # we're making assumptions here
	fi
}

# Determines whether or not the current terminal is in dark mode (dark background, light text)
# returns "true" if running in dark mode; false otherwise

function isDarkMode () {
	local bgColor=$(getBackground)
	IFS=','; colors=($bgColor); IFS=' ';

	# Is the background more or less dark?
	if [ ${colors[0]} -lt 20000 ] && [ ${colors[1]} -lt 20000 ] && [ ${colors[2]} -lt 20000 ]; then
		echo "true"
	else
		echo "false"
	fi
}

   Once we have a rough idea of what we're dealing with, I'll do:

darkmode=$(isDarkMode)

# Setup some predefined colours. Note that we can't reliably determine the background
# color of the terminal so we avoid specifically setting black or white for the foreground
# or background. You can always just use "White" and "Black" if you specifically want
# this combo, but test thoroughly
if [ "$darkmode" == "true" ]; then
	color_primary="Blue"
	color_mute="Gray"
	color_info="Yellow"
	color_success="Green"
	color_warn="DarkYellow"
	color_error="Red"
else
	color_primary="DarkBlue"
	color_mute="Gray"
	color_info="Magenta"
	color_success="DarkGreen"
	color_warn="DarkYellow"
	color_error="Red"
fi

   and to use these:
WriteLine "Predefined colors on default background"
WriteLine

WriteLine "Default colored text" "Default"
WriteLine "Primary colored text" $color_primary
WriteLine "Mute colored text"    $color_mute
WriteLine "Info colored text"    $color_info
WriteLine "Success colored text" $color_success
WriteLine "Warning colored text" $color_warn
WriteLine "Error colored text"   $color_error

WriteLine
WriteLine "Default color on predefined background"
WriteLine

WriteLine "Default colored background" "Default"
WriteLine "Primary colored background" "Default" $color_primary
WriteLine "Mute colored background"    "Default" $color_mute
WriteLine "Info colored background"    "Default" $color_info
WriteLine "Success colored background" "Default" $color_success
WriteLine "Warning colored background" "Default" $color_warn
WriteLine "Error colored background"   "Default" $color_error

   Things are a bit murky so let's add one more function that will provide a contrasting foreground on
   whatever background we choose.

# Returns the name of a color that will providing a contrasting foreground
# color for the given background color. This function assumes $darkmode has
# been set globally.
#
# string background color name.
# returns a string representing a contrasting foreground colour name
function ContrastForeground () {

	local color=$1
	if [ "$color" == "" ]; then color="Default"; fi

	if [ "$darkmode" == "true" ]; then
		case "$color" in
			"Default" )     echo "White";;
			"Black" )       echo "White";;
			"DarkRed" )     echo "White";;
			"DarkGreen" )   echo "White";;
			"DarkYellow" )  echo "White";;
			"DarkBlue" )    echo "White";;
			"DarkMagenta" ) echo "White";;
			"DarkCyan" )    echo "White";;
			"Gray" )        echo "Black";;
			"DarkGray" )    echo "White";;
			"Red" )         echo "White";;
			"Green" )       echo "White";;
			"Yellow" )      echo "Black";;
			"Blue" )        echo "White";;
			"Magenta" )     echo "White";;
			"Cyan" )        echo "Black";;
			"White" )       echo "Black";;
			*)              echo "White";;
		esac
	else
		case "$color" in
			"Default" )     echo "Black";;
			"Black" )       echo "White";;
			"DarkRed" )     echo "White";;
			"DarkGreen" )   echo "White";;
			"DarkYellow" )  echo "White";;
			"DarkBlue" )    echo "White";;
			"DarkMagenta" ) echo "White";;
			"DarkCyan" )    echo "White";;
			"Gray" )        echo "Black";;
			"DarkGray" )    echo "White";;
			"Red" )         echo "White";;
			"Green" )       echo "Black";;
			"Yellow" )      echo "Black";;
			"Blue" )        echo "White";;
			"Magenta" )     echo "White";;
			"Cyan" )        echo "Black";;
			"White" )       echo "Black";;
			*)              echo "White";;
		esac
	fi

	echo "${colorString}"
}

   Then, in the Color subroutine, we can do:

function Color () {

	local foreground=$1
	local background=$2

	if [ "$foreground" == "" ]; then foreground="Default"; fi
	if [ "$background" == "" ]; then background="$color_background"; fi

	if [ "$foreground" == "Contrast" ]; then
		foreground=$(ContrastForeground ${background})
	fi

	...

   and to make our text with background color a little more legible, we do:

WriteLine
WriteLine "Default contrasting color on predefined background"
WriteLine

WriteLine "Primary colored background" "Contrast" $color_primary
WriteLine "Mute colored background"    "Contrast" $color_mute
WriteLine "Info colored background"    "Contrast" $color_info
WriteLine "Success colored background" "Contrast" $color_success
WriteLine "Warning colored background" "Contrast" $color_warn
WriteLine "Error colored background"   "Contrast" $color_error


---
https://askubuntu.com/questions/1413851/changing-bash-terminal-color-and-setting-it-back-to-default

Changing bash terminal color and setting it back to default?

   I found this command to change the background color to back:
$> echo -ne '\e]11;#000000\e\\'

   So, how to I make it to change the default again?

***
   The idea is to replace the #000000 with the color of your choice. If "default" is white, you could
   run

$> echo -ne '\e]11;#ffffff\e\\'

   Now since OP wants it in a bash script, I adapted the script by blueyed available here
   https://gist.github.com/blueyed/c8470c2aad3381c33ea3:

#!/bin/sh
# Query a property from the terminal, e.g. background color.
#
# XTerm Operating System Commands
#     "ESC ] Ps;Pt ST"
#
# Source:
# Adapted from https://gist.github.com/blueyed/c8470c2aad3381c33ea3
# Posted at:
# https://stackoverflow.com/questions/2507337/how-to-determine-a-terminals-background-color#7767891
#

# save stty
oldstty=$(stty -g)

# Such that no input is needed for the read command:
stty raw -echo min 0 time 0

#11 for background color
printf "\033]11;?\033\\"

# xterm needs the sleep
sleep 0.1
read -r answer

# Change background color for #fff000 (as an example)
printf  "\033]11;#fff000\033\\"

# Do your stuff on yellow background
# Here for purpose of demonstration just sleep
sleep 1
#

# Restore background-color.
printf "\033$answer\\"

# Restore stty
stty $oldstty

   You can then put your actual code in this script and modify the custom bg color (here yellow) and the
   sleep times etc. I tested it only on gnome-terminal.


---
https://saturncloud.io/blog/how-to-print-colored-text-to-the-terminal/

How to Print Colored Text to the Terminal
June 12, 2023

   As a software engineer, you may be familiar with printing text to the terminal. However, have you
   ever wanted to add some color to make your output more visually appealing? In this post, we'll
   explore how to print colored text to the terminal using ANSI escape codes.

   As a software engineer, you may be familiar with printing text to the terminal. However, have you
   ever wanted to add some color to make your output more visually appealing? In this post, we'll
   explore how to print colored text to the terminal using ANSI escape codes.

What are ANSI Escape Codes?
   ANSI escape codes are a sequence of characters that allow you to control various aspects of the
   terminal, such as the color of the text or the position of the cursor. These codes begin with the
   escape character, represented by the ASCII value 27, followed by a series of characters that specify
   the desired action.

How to Use ANSI Escape Codes
   To use ANSI escape codes to print colored text to the terminal, you'll need to follow these steps:
    1. Print the escape character: \u001b (or \033 in octal)
    2. Add the desired action code
    3. Optionally, add any additional parameters for the action
    4. Print the text you want to be affected by the action
    5. Reset the terminal to its default state (optional)

Color Codes
   Let's start with the most common use case: printing colored text. ANSI escape codes provide several
   color codes that you can use to change the color of your text. Here are the most commonly used ones:
     * Black:    \u001b[30m
     * Red:      \u001b[31m
     * Green:    \u001b[32m
     * Yellow:   \u001b[33m
     * Blue:     \u001b[34m
     * Magenta:  \u001b[35m
     * Cyan:     \u001b[36m
     * White:    \u001b[37m

   To print red text to the terminal, for example, you would use the following code:
print("\u001b[31mHello, world!\u001b[0m")

   Text Terminal Colors
   Note that we reset the terminal to its default state at the end of the string by using the code
   \u001b[0m. This is important because otherwise, any text printed after this statement would also be
   in red.

Background Color Codes
   You can also change the background color of your text by using background color codes. Here are the
   most commonly used ones:
     * Black:    \u001b[40m
     * Red:      \u001b[41m
     * Green:    \u001b[42m
     * Yellow:   \u001b[43m
     * Blue:     \u001b[44m
     * Magenta:  \u001b[45m
     * Cyan:     \u001b[46m
     * White:    \u001b[47m

   To print text with a blue background, for example, you would use the following code:
print("\u001b[44mHello, world!\u001b[0m")

   Text Terminal Colors Background

Other Action Codes
   In addition to color codes, ANSI escape codes provide other action codes that you can use to control
   various aspects of the terminal, such as the position of the cursor or the font style. Here are some
   of the most commonly used ones:

     * Cursor Up:        \u001b[{n}A
     * Cursor Down:      \u001b[{n}B
     * Cursor Forward:   \u001b[{n}C
     * Cursor Backward:  \u001b[{n}D
     * Clear Screen:     \u001b[2J
     * Bold:             \u001b[1m
     * Underline:        \u001b[4m
     * Blink:            \u001b[5m

Combining Action Codes
   You can combine multiple action codes to achieve more complex effects. For example, to print bold red
   text, you would use the following code:
print("\u001b[1m\u001b[31mHello, world!\u001b[0m")

Handling Non-ANSI Terminals
   It's worth noting that not all terminals support ANSI escape codes. In some cases, the codes may
   display as plain text instead of changing the color of the text. To handle non-ANSI terminals, you
   can use a library like colorama to provide cross-platform support for colored text.

Conclusion
   Printing colored text to the terminal can be a great way to make your output more visually appealing
   and easier to read. By using ANSI escape codes, you can easily change the color of your text or
   background, or even control other aspects of the terminal. With this knowledge, you can take your
   console output to the next level and impress your colleagues with your newfound skills!


---
https://chrisyeh96.github.io/2020/03/28/terminal-colors.html

Terminal Colors
Mar 28, 2020.

   In this post, I explore how terminals display color, a two-stage process involving ANSI escape codes
   and user-defined color schemes.

Overview
   Terminals traditionally take an input of bytes and display them as white text on a black background.
   If the input contains specific "control characters," then the terminal may alter certain display
   properties of the text, such as the color or font. Old terminals could only display a maximum of 8
   colors. However, modern computer screens are capable of displaying 24-bit RGB color, so modern
   terminals have to implement a mapping of the 8 original colors to RGB values. This mapping can
   usually be changed according to user-defined color schemes.

ASCII Escape Character
   The ANSI ASCII standard represents the escape ESC character by the decimal number 27 (33 in
   octal, 1B in hexadecimal). This is one of the control characters (0-31 and 127), not one of the
   printable characters (32-126).

   ASCII code 27 is indeed the character corresponding to the Escape key on a keyboard. However,
   most shells recognize the Escape key as a control character (usually for a keyboard shortcut) and
   therefore do not translate the Escape key into any text representation. Thus, each programming
   language has its own method of representing the escape character within a string:

   ----------------------------------------------------------------------------------------------------------
               Bash          C                     Python 3
   ----------------------------------------------------------------------------------------------------------
   literal     \e, \E        \e (non-standard)     Python 3.3+ only: \N{ESCAPE}, \N{escape}, \N{ESC}, \N{esc}
   octal       \033          \33, \033             \33, \033
   hexadecimal \x1b          \x1b                  \x1b
   Unicode     \u1b, \U1b    -                     \u001b, \U0000001b
   ----------------------------------------------------------------------------------------------------------

   Additional notes
     * For all 3 languages, any place where 1b appears, the capitalized hexadecimal 1B also works.
     * Bash supports Unicode characters of the form \uXXXX (\u + 4 hexadecimal digits) and \UXXXXXXXX
       (\U + 8 hexadecimal digits), but unlike Python, it allows for leading zeros to be omitted.
     * Most major C compilers, including gcc and clang, support the non-standard \e syntax for
       the escape character.
     * While C generally supports unicode characters of the form \uXXXX and \UXXXXXXXX, it oddly does
       not support Unicode control characters. From the C18 specification on universal character
       names:

     A universal character name shall not specify a character whose short identifier is less than 00A0
     other than 0024 ($), 0040 (@), or 0060 (')

ANSI Escape Codes for Terminal Graphics
   The ANSI escape code standard, formally adopted as ISO/IEC 6429, defines a series of control
   sequences. Each control sequence begins with a Control Sequence Inducer (CSI), defined as an escape
   character followed immediately by a bracket: ESC[. In particular, a CSI followed by a certain number
   of "parameter bytes" (ASCII 0-9:;<=>?) then the letter m forms a control sequence known as a Select
   Graphic Rendition (SGR). If no parameter bytes are explicitly given, then it is assumed to be 0. SGR
   parameters can be chained together with a semicolon ; as the delimiter.

   Some common SGR parameters are shown below:
   -----------------------------------------------------------
   Parameter       Effect
   -----------------------------------------------------------
   0               reset all SGR effects to their default
   1               bold or increased intensity
   2               faint or decreased intensity
   4               singly underlined
   5               slow blink
   30-37           foreground color (8 colors)
   38;5;x          foreground color (256 colors, non-standard)
   38;2;r;g;b      foreground color (RGB, non-standard)
   40-47           background color (8 colors)
   48;5;x          background color (256 colors, non-standard)
   48;2;r;g;b      background color (RGB, non-standard)
   90-97           bright foreground color (non-standard)
   100-107         bright background color (non-standard)
   -----------------------------------------------------------

   The 8 actual colors within the ranges (30-37, 40-47, 90-97, 100-107) are defined by the ANSI standard
   as follows:

   --------------------
   Last Digit   Color
   --------------------
   0            black
   1            red
   2            green
   3            yellow
   4            blue
   5            magenta
   6            cyan
   7            white
   --------------------

   We put these pieces together to create a SGR command. Thus, ESC[1m specifies bold (or bright) text,
   and ESC[31m specifies red foreground text. We can chain together parameters; for example, ESC[32;47m
   specifies green foreground text on a white background.

   The following diagram shows a complete example for rendering the word "text" in red with a single
   underline.

    CSI     Final Byte
    |       |
   !---!    |
   \x1b[31;4mtext
   !--! !--!
   |     |
   |     Parameters
   |
   ESC character
   in Hex ASCII

   Notes
     * For terminals that support bright foreground colors, ESC[1;3Xm is usually equivalent to ESC[9Xm
       (where X is a digit in 0-7). However, the reverse does not seem to hold, at least anecdotally:
       ESC[2;9Xm usually does not render the same as ESC[3Xm.
     * Not all terminals support every effect.
     * Documentation is available for Microsoft Windows Console and Linux.
     * Microsoft and the Linux manual pages both refer to SGR as "Set Graphics Rendition," instead of
       "Select Graphic Rendition."

   Examples
     * Bash: printf "\u1b[31mtest\033[ming\n"
     * C: printf("%s\n", "\x1b[31mtest\033[0ming");
     * Python: print('\N{ESC}[31mtest\u001b[0ming')
     * Output: testing

   Additional Sources
     * [http://jafrog.com/2013/11/23/colors-in-terminal.html]Colors In Terminal: describes control sequences
       at a high level and covers 256-color support
     * [http://ascii-table.com/ansi-escape-sequences.php]ANSI Escape sequences: easy-to-read chart of control
       sequences

Color Schemes
   The role of terminal color schemes is to map the 8 colors to RGB values. Most terminals support an
   additional 8 colors corresponding to the bold or bright variants of the original colors. The GitHub
   repo mbadolato/iTerm2-Color-Schemes provides a sampling of common color schemes.

Windows Colors
   While the 8 standard color names are widely used within ANSI and ISO standards documents as well as
   the Linux community, Microsoft uses slightly different names and ordering of colors.

   Windows Console (Command Prompt)
   The command color sets the default console foreground and background colors, and it can also be used
   to list out the supported colors with color /?. The colors are named as follows:
0 = Black       8 = Gray
1 = Blue        9 = Light Blue
2 = Green       A = Light Green
3 = Aqua        B = Light Aqua
4 = Red         C = Light Red
5 = Purple      D = Light Purple
6 = Yellow      E = Light Yellow
7 = White       F = Bright White

   Notably, Microsoft renames "cyan" to "aqua" and "magenta" to "purple," and it names the bold/bright
   variant of black as "gray." This ordering is also the ordering of colors that appear in the Windows
   Console settings.


   Windows Terminal (beta)
   Windows Terminal now uses the ANSI color names except that it still uses "purple" instead of
   "magenta." However, there is an open issue (as of March 28, 2020) where Microsoft seems to be
   considering "magenta."

My Preferred Color Scheme
   Personally, here is the color scheme that I've found to work well for me. It is largely based on
   Ubuntu's default terminal color scheme (changes are marked by an asterisk *).

   ------------------------------------------------------
   Color              RGB                     Hexadecimal
   ------------------------------------------------------
   *black*            0, 0, 0                 000000
   *red               204, 0, 0               cc0000
   *green             78, 154, 6              4e9a06
   *yellow            196, 160, 0             c4a000
   *blue*             114, 159, 207           729fcf
   *magenta           117, 80, 123            75507b
   *cyan              6, 152, 154             06989a
   *white             211, 215, 207           d3d7cf
   *bright black      85, 87, 83              555753
   *bright red        239, 41, 41             ef2929
   *bright green      138, 226, 52            8ae234
   *bright yellow     252, 233, 79            fce94f
   *bright blue*      50, 175, 255            32afff
   *bright magenta    173, 127, 168           ad7fa8
   *bright cyan       52, 226, 226            34e2e2
   *bright white*     255, 255, 255           ffffff
   ------------------------------------------------------


---

