filename: ubuntu_simple-bash-script-server-post-installation-multif_20170131.txt
https://www.ostechnix.com/simple-bash-script-ubuntu-server-post-installation/

A Simple BASH Script For Ubuntu Server Post Installation

   by [52]sk · January 30, 2017
   BASH Script For Ubuntu Server Post Installation BASH Script For Ubuntu Server Post Installation

   Today, I have stumbled upon a simple BASH script called “Ubuntu-server-setup” that helps you
   to automate the setup and provisioning of Ubuntu server after a new installation. This script will do
   the following:
     * Adds a new user account with sudo access
     * Adds a public ssh key for the new user account
     * Disables password authentication to the server
     * Deny root login to the server
     * Setup Uncomplicated Firewall (UFW)
     * Create Swap file based on machine’s installed memory
     * Setup the timezone for the server (Default value is “Asia/Singapore”. You can mention your
       timezone)
     * Install Network Time Protocol

   In this brief tutorial, we are going to see how to run this script in Ubuntu 16.04 LTS server. This
   might work on other Ubuntu versions too.
   Download – [53]Free EBook: “Ubuntu Documentation: Ubuntu Server Guide 2014”

Ubuntu-server-setup – A BASH Script For Ubuntu Server Post Installation
   Before going to use this script, you need to create public ssh key on your client system. You will
   need this when running the script.

   To create public ssh key, run:
ssh-keygen -t rsa

   Enter the passphrase twice.
Generating public/private rsa key pair.
Enter file in which to save the key (/home/sk/.ssh/id_rsa):
Created directory '/home/sk/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/sk/.ssh/id_rsa.
Your public key has been saved in /home/sk/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:JFEf6UJEHVmuU/wO1zFUeXyE5oxhLCBfJOKB4yoX9mI sk@ubuntuserver
The key's randomart image is:
+---[RSA 2048]----+
| .=+*+=*. ==|
| o. *.+=++ +.+|
| . .o.o..o+* oo|
| o . o. .o..o.o|
| . + S.o . o .|
|. E . . + |
| + . . |
| |
| |
+----[SHA256]-----+

   To view the newly created SSH public key, open a new Terminal window and run:
cat ~/.ssh/id_rsa.pub

   Copy the ssh public key and keep it safe. You have to enter this key later.

   Now, Login to your Ubuntu server. Install ‘git’ using commands:
sudo apt-get update
sudo apt-get install git

   Next, grab the Ubuntu-server-setup script using command:
git clone https://github.com/jasonheecs/ubuntu-server-setup.git

   The above command will clone the latest version to a folder called “ubuntu-server-setup” in your
   current working directory.

   Go to the Ubuntu-server-setup directory and run the script as shown below.
cd ubuntu-server-setup/

bash setup.sh

   Now, you’ll have to answer series of question. Answer the, accordingly. First, Enter the new
   username:
Enter the username of the new user account:ostechnix
Enter new UNIX password:
Retype new UNIX password:
Adding user `ostechnix' ...
Adding new group `ostechnix' (1001) ...
Adding new user `ostechnix' (1001) with group `ostechnix' ...
Creating home directory `/home/ostechnix' ...
Copying files from `/etc/skel' ...
Changing the user information for ostechnix
Enter the new value, or press ENTER for the default
 Full Name []: Senthilkumar
 Room Number []: 123
 Work Phone []:
 Home Phone []:
 Other []:
Is the information correct? [Y/n] y

   Copy/Paste the Public ssh key which we created in the previous step.

Paste in the public SSH key for the new user:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDg2S1/s3ZB/O/KBVT6OP0JEQKPQ3QjTOaWhAjFN9CJrb2IVYGx0P8SA52d81tw0UJXByXkPp
xvGwXYbWukV6bF/mdm8kj+e+BxEYlq2sXbFdwW+lW0GwTYMq2tIRQ1Iec6QFLGNSi0QjLcIhG/JTg5TrmK9KyECCHRFQfR7cDWRXo2tBtMkDxd
JdH/D4BdmO//rvSFgY4QiqjwmkKqgpLrK5ZvvfgjKWtO0+1D+hfrm+cTNGByWHvOAj3j5HyXB6dzNaKswCQygzkvESzXI6eyMWYW3+QNz2PBHb
of+HVHSd9av7aC8IO31aUMsyvrTcSB3wHk0NpmrDfqLRvOspNb sk@ubuntuserver
Running setup script...

   Enter your timezone now:
Enter the timezone for the server (Default is 'Asia/Singapore'):
Asia/Kolkata
Timezone is set to Asia/Kolkata
Installing Network Time Protocol...
Setup Done! Log file is located at output.lo

   Please note that you can’t ssh to the Ubuntu server with any other users, except the one (i.e
   ostechnix in our case) you have just created. Because this script will disable the password-based ssh
   authentication for all users including root. And also, you can only ssh to the Ubuntu server from the
   client system where you have created the public ssh key and shared it with the remote system. If you
   want to ssh from some other systems, the public ssh key should be manually uploaded to a remote
   server that you want to be able to log into with SSH.

   From now on, You’ll be asked to enter the passphrase that you created in the client system every time
   you try to ssh to your server like below.
ssh ostechnix@192.168.1.105

   Enter the passphrase for the key:
Enter passphrase for key '/home/sk/.ssh/id_rsa':

   That’s it. Ubuntu-server-setup script just completed the basic post installation tasks. Start
   installing other things you want to run in the server.

   Cheers!


---
https://github.com/jasonheecs/ubuntu-server-setup

Bash setup script for Ubuntu servers

   This is a setup script to automate the setup and provisioning of Ubuntu servers. It does the
   following:
     * Adds a new user account with sudo access
     * Adds a public ssh key for the new user account
     * Disables password authentication to the server
     * Deny root login to the server
     * Setup Uncomplicated Firewall
     * Create Swap file based on machine's installed memory
     * Setup the timezone for the server (Default to "Asia/Singapore")
     * Install Network Time Protocol

Installation
   SSH into your server and install git if it is not installed:
sudo apt-get update
sudo apt-get install git

   Clone this repository into your home directory:
cd ~
git clone https://github.com/jasonheecs/ubuntu-server-setup.git

   Run the setup script
cd ubuntu-server-setup
bash setup.sh

Setup prompts
   When the setup script is run, you will be prompted to enter the username and password of the new user
   account.

   Following that, you will then be prompted to add a public ssh key (which should be from your local
   machine) for the new account. To generate an ssh key from your local machine:
ssh-keygen -t rsa
cat ~/.ssh/id_rsa.pub

   Finally, you will be prompted to specify a [60]timezone for the server. It will be set to
   'Asia/Singapore' if you do not specify a value.



---
https://github.com/jasonheecs/ubuntu-server-setup/blob/master/setup.sh

<code>
   #!/bin/bash
   set -e
   function getCurrentDir() {
	local current_dir="${BASH_SOURCE%/*}"
	
	if [[ ! -d "${current_dir}" ]]; then current_dir="$PWD"; fi
	
	echo "${current_dir}"
    }
	
   function includeDependencies() {
	# shellcheck source=./setupLibrary.sh
	source "${current_dir}/setupLibrary.sh"
    }
   current_dir=$(getCurrentDir)
   includeDependencies
   output_file="output.log"
   function main() {
	read -rp "Enter the username of the new user account:" username
	promptForPassword
	# Run setup functions
	trap cleanup EXIT SIGHUP SIGINT SIGTERM
	addUserAccount "${username}" "${password}"
	read -rp $'Paste in the public SSH key for the new user:\n' sshKey
	echo 'Running setup script...'
	logTimestamp "${output_file}"
	exec 3>&1 >>"${output_file}" 2>&1
	disableSudoPassword "${username}"
	addSSHKey "${username}" "${sshKey}"
	changeSSHConfig
	setupUfw
	
	if ! hasSwap; then
		setupSwap
	fi
	
	setupTimezone
	echo "Installing Network Time Protocol... " >&3
	configureNTP
	sudo service ssh restart
	cleanup
	echo "Setup Done! Log file is located at ${output_file}" >&3
    }
	
   function setupSwap() {
	createSwap
	mountSwap
	tweakSwapSettings "10" "50"
	saveSwapSettings "10" "50"
    }

   function hasSwap() {
	[[ "$(sudo swapon -s)" == *"/swapfile"* ]]
    }
	
   function cleanup() {
	if [[ -f "/etc/sudoers.bak" ]]; then
		revertSudoers
	fi
    }

    function logTimestamp() {
	local filename=${1}
	{
		echo "==================="
		echo "Log generated on $(date)"
		echo "==================="
	} >>"${filename}" 2>&1
    }
    
   function setupTimezone() {
	echo -ne "Enter the timezone for the server (Default is 'Asia/Singapore'):\n" >&3
	read -r timezone
	
	if [ -z "${timezone}" ]; then
		timezone="Asia/Singapore"
	fi
	
	setTimezone "${timezone}"
	echo "Timezone is set to $(cat /etc/timezone)" >&3
   }
   
   # Keep prompting for the password and password confirmation
   function promptForPassword() {
	PASSWORDS_MATCH=0
	while [ "${PASSWORDS_MATCH}" -eq "0" ]; do
		read -s -rp "Enter new UNIX password:" password
		printf "\n"
		read -s -rp "Retype new UNIX password:" password_confirmation
		printf "\n"
		
		if [[ "${password}" != "${password_confirmation}" ]]; then
			echo "Passwords do not match! Please try again."
		else
			PASSWORDS_MATCH=1
		fi
	done
   }
   
   main
</code>



---
https://github.com/jasonheecs/ubuntu-server-setup/blob/master/setupLibrary.sh

   #[1]GitHub [2]Recent Commits to ubuntu-server-setup:master

   [3]Skip to content

   (BUTTON)
   [4]Personal [5]Open source [6]Business [7]Explore
   [8]Sign up [9]Sign in
   [10]Pricing [11]Blog [12]Support [13]Search GitHub
   This repository
   ____________________

     * [14]Watch [15]4
     * [16]Star [17]43
     * [18]Fork [19]4

[20]jasonheecs/[21]ubuntu-server-setup

<code>
   #!/bin/bash
   # Add the new user account
   # Arguments:
   # Account Username
   # Account Password
   # Flag to determine if user account is added silently. (With / Without GECOS prompt)
   function addUserAccount() {
	local username=${1}
	local password=${2}
	local silent_mode=${3}
	
	if [[ ${silent_mode} == "true" ]]; then
		sudo adduser --disabled-password --gecos '' "${username}"
	else
		sudo adduser --disabled-password "${username}"
	fi
	
	echo "${username}:${password}" | sudo chpasswd
	sudo usermod -aG sudo "${username}"
   }
   
   # Add the local machine public SSH Key for the new user account
   # Arguments:
   # Account Username
   # Public SSH Key
   function addSSHKey() {
	local username=${1}
	local sshKey=${2}
	execAsUser "${username}" "mkdir -p ~/.ssh; chmod 700 ~/.ssh; touch ~/.ssh/authorized_keys"
	execAsUser "${username}" "echo \"${sshKey}\" | sudo tee -a ~/.ssh/authorized_keys"
	execAsUser "${username}" "chmod 600 ~/.ssh/authorized_keys"
   }
   
   # Execute a command as a certain user
   # Arguments:
   # Account Username
   # Command to be executed
   function execAsUser() {
	local username=${1}
	local exec_command=${2}
	sudo -u "${username}" -H bash -c "${exec_command}"
   }
   
   # Modify the sshd_config file
   # shellcheck disable=2116
   function changeSSHConfig() {
	sudo sed -re 's/^(\#?)(PasswordAuthentication)([[:space:]]+)yes/\2\3no/' -i."$(echo 'old')"
	/etc/ssh/sshd_config
	sudo sed -re 's/^(\#?)(PermitRootLogin)([[:space:]]+)(.*)/PermitRootLogin no/' -i
	/etc/ssh/sshd_config
   }
   
   # Setup the Uncomplicated Firewall
   function setupUfw() {
	sudo ufw allow OpenSSH
	yes y | sudo ufw enable
   }
   
   # Create the swap file based on amount of physical memory on machine (Maximum size of swap is 4GB)
   function createSwap() {
	local swapmem=$(($(getPhysicalMemory) * 2))
	# Anything over 4GB in swap is probably unnecessary as a RAM fallback
	
	if [ ${swapmem} -gt 4 ]; then
		swapmem=4
	fi
	
	sudo fallocate -l "${swapmem}G" /swapfile
	sudo chmod 600 /swapfile
	sudo mkswap /swapfile
	sudo swapon /swapfile
   }
   
   # Mount the swapfile
   function mountSwap() {
	sudo cp /etc/fstab /etc/fstab.bak
	echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
   }
   
   # Modify the swapfile settings
   # Arguments:
   # new vm.swappiness value
   # new vm.vfs_cache_pressure value
   function tweakSwapSettings() {
	local swappiness=${1}
	local vfs_cache_pressure=${2}
	sudo sysctl vm.swappiness="${swappiness}"
	sudo sysctl vm.vfs_cache_pressure="${vfs_cache_pressure}"
   }
   
   # Save the modified swap settings
   # Arguments:
   # new vm.swappiness value
   # new vm.vfs_cache_pressure value
   function saveSwapSettings() {
	local swappiness=${1}
	local vfs_cache_pressure=${2}
	echo "vm.swappiness=${swappiness}" | sudo tee -a /etc/sysctl.conf
	echo "vm.vfs_cache_pressure=${vfs_cache_pressure}" | sudo tee -a /etc/sysctl.conf
   }
   
   # Set the machine's timezone
   # Arguments:
   # tz data timezone
   function setTimezone() {
	local timezone=${1}
	echo "${1}" | sudo tee /etc/timezone
	sudo ln -fs "/usr/share/zoneinfo/${timezone}" /etc/localtime #
	https://bugs.launchpad.net/ubuntu/+source/tzdata/+bug/1554806
	sudo dpkg-reconfigure -f noninteractive tzdata
   }
   
   # Configure Network Time Protocol
   function configureNTP() {
	sudo apt-get update
	sudo apt-get --assume-yes install ntp
   }
   
   # Gets the amount of physical memory in GB (rounded up) installed on the machine
   function getPhysicalMemory() {
	local phymem
	phymem="$(free -g|awk '/^Mem:/{print $2}')"
	
	if [[ ${phymem} == '0' ]]; then
		echo 1
	else
		echo "${phymem}"
	fi
   }
   
   # Disables the sudo password prompt for a user account by editing /etc/sudoers
   # Arguments:
   # Account username
   function disableSudoPassword() {
	local username="${1}"
	sudo cp /etc/sudoers /etc/sudoers.bak
	sudo bash -c "echo '${1} ALL=(ALL) NOPASSWD: ALL' | (EDITOR='tee -a' visudo)"
   }
   
   # Reverts the original /etc/sudoers file before this script is ran
   function revertSudoers() {
	sudo cp /etc/sudoers.bak /etc/sudoers
	sudo rm -rf /etc/sudoers.bak
   }
</code>
