filename: bash-email-from-the-command-line-20250818.txt
https://thenewstack.io/linux-email-from-the-command-line/

Linux: Email From the Command Line
2025-08-16

   Linux has more commands than you will probably ever need to use. For desktop users, that is
   certainly the case. However, for admins who manage Linux servers, there are far more commands that
   you will need to take advantage of.

   One such command is mail.

   The Linux mail command allows users to send and receive emails directly from the command line. But
   don't think this is a terminal replacement for the likes of Thunderbird or Geary. The mail command is
   all about GUI-less Linux machines, so emails can be sent via services and/or scripts.

   Think about it this way:

   You've created a backup script and want to have that script notify you upon either a successful or
   failed run. After all, you need to know if your backups are running correctly. Without that
   notification, you would have to manually check to see if a new backup file was created. Imagine how
   things would play out if you failed to check the backup for a few months and you lost everything.

   Not good.

   Let's talk more about how mail is installed and used.

Installing mail on Popular Distributions

   How you install mail will depend on the distribution you use because the mail command is found in
   different utilities.

   For example, if your distribution of choice is Red Hat Enterprise Linux (or is based on RHEL), the
   command for installing mail is:
$> sudo dnf install mailx -y

   On the other hand, if your distribution is Ubuntu (or based on Ubuntu), mail is found in mailutils,
   which is installed with the command:
$> sudo apt-get install mailutils -y

   During the installation, you'll be prompted to configure Postfix (the Linux mail transfer agent that
   routes and delivers email). If you plan on using mail in conjunction with SMTP, you'll want to select
   "Internet site" for this.

   Next, you'll need to add the machine's Fully Qualified Domain Name (FQDN). Once you've taken care of
   that, you should be good to go.

   One thing to keep in mind is that if the emails are going to be sent only to users on the local
   system, and that local system doesn't have an FQDN, you can select Local only.

Mail Command Syntax
   Every Linux command has a specific syntax for its usage, and mail is no different. The basic syntax
   of the mail command is:

   mail [ options ] -s [ subject ] [recipient_address]

   Naturally, there are quite a few options for the mail command, such as:
     * -A - Attaches a file.
     * -a=[header] - Used for appending specific messages to an email as well as cc'ing or bcc'ing.
     * -f - Allows you to specify an alternate mailbox.
     * -I - Forces interactive mode.
     * -s - Allows you to specify a subject for the email.

Examples of the Linux mail Command
   Now, let's take a look at some examples of the Linux mail command, starting with a simple,
   straightforward email with a subject and a body. Let's say our subject is "Hello, New Stack" and our
   body is "How are you doing?" We want to send that mail to the Linux user newstack. Here's what that
   command would look like:
$> mail -s "Hello, New Stack" newstack

   Hit Enter on your keyboard and you'll find yourself in interactive mode, where you can add a cc user,
   followed by the body of the email. Once you've typed the body and are pleased with it, hit Enter
   again and then hit the Ctrl+D combination, and the email is off to the recipient.

   The recipient can then read the mail by typing the mail command with no options. They'll be presented
   with a list of emails they can select from.

   You can simplify this with the help of the echo command, which bypasses interactive mode, using echo
   to add the body of the email.

   Here's how that's done (using the same example as above):
$> echo "How are you doing?" | mail -s "Hello, New Stack" newstack

   The newstack user will see the same email as they did when you ran mail in interactive mode. I'll
   include all comments in the script, so you know what's happening.

Using mail in a Bash Script
   Let's first see a simple example of using mail in a [343]Bash script.

   This example simply sends an email to a user:
<code>
#!/bin/bash

# Define email variables
RECIPIENT="newstack"
SUBJECT="Hello, New Stack"
BODY="How are you?"

# Send the email
echo -e "$BODY" | mail -s "$SUBJECT" "$RECIPIENT"
echo "Email sent to $RECIPIENT with subject: $SUBJECT"
</code>

   As you can see, we define the recipient, subject and body as variables and then use them in the mail
   command.

   Now let's take a look at a far more complex bash script that also employs the mail command. This
   script runs a backup and then alerts the admin in the event of a success or failure:

<code>
# Configuration
BACKUP_SOURCE="/path/to/your/data" # Directory to be backed up
BACKUP_DEST="/path/to/your/backup/location" # Destination for backup files
MAIL_RECIPIENT="your_email@example.com" # Email address for notifications
MAIL_SUBJECT_SUCCESS="Backup Successful: $(hostname) - $(date +%Y-%m-%d)"
MAIL_SUBJECT_FAILURE="Backup FAILED: $(hostname) - $(date +%Y-%m-%d)"
LOG_FILE="/var/log/backup.log" # Log file for backup operations

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DEST"

# Generate timestamp for backup filename
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILENAME="backup_${TIMESTAMP}.tar.gz"

# Perform the backup
echo "Starting backup at $(date)" | tee -a "$LOG_FILE"
tar -czf "$BACKUP_DEST/$BACKUP_FILENAME" "$BACKUP_SOURCE" >> "$LOG_FILE"

# Check if backup was successful

if [ $? -eq 0 ]; then
	MAIL_BODY="Backup of $BACKUP_SOURCE to $BACKUP_DEST/$BACKUP_FILENAME completed successfully."
	mail -s "$MAIL_SUBJECT_SUCCESS" "$MAIL_RECIPIENT" <<< "$MAIL_BODY"
	echo "Backup successful. Notification sent to $MAIL_RECIPIENT." | tee -a "$LOG_FILE"
else
	MAIL_BODY="Backup of $BACKUP_SOURCE FAILED. Check $LOG_FILE for details."
	mail -s "$MAIL_SUBJECT_FAILURE" "$MAIL_RECIPIENT" <<< "$MAIL_BODY"
	echo "Backup failed. Notification sent to $MAIL_RECIPIENT." | tee -a "$LOG_FILE"
fi

echo "Backup script finished at $(date)" | tee -a "$LOG_FILE"
</code>

   As you can see, even within the complexity of the backup script, the mail command should be clear and
   obvious (even though it's using declared variables).


---

