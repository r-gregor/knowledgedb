filename: bash_dates-getting-tomorrows-yesterdays_20230519.txt
https://tecadmin.net/getting-tomorrows-date-in-bash/

Getting Tomorrow's Date in Bash: A Practical Walkthrough
May 16, 2023

   In the world of system administration and shell scripting, the ability to manipulate dates and times
   is crucial. Whether it's for scheduling tasks, log rotation, or simply timestamping files, an
   understanding of how to work with dates in your scripts can save a lot of time and effort. Bash, the
   Bourne Again Shell, comes with a powerful set of tools for this purpose.

   In this article, we'll explore a practical example: how to get tomorrow's date using Bash. There are
   multiple ways to achieve this, and we'll walk through a few examples using core utilities like date
   and GNU date.

The Date Command in Bash
   The date command in Bash is a versatile tool that allows you to format and manipulate dates. By
   default, it displays the current date and time when executed without any arguments.
$> date

Wed May 15 10:34:12 UTC 2023

   But the true power of the date command comes from its formatting and manipulation options. By using
   the -d (or --date) option, you can specify a date string that date will use instead of the current
   date. This date string can be a fixed date, like "2023-05-15", or a relative date like "yesterday" or
   "next week".

Getting Tomorrow's Date
   To get tomorrow's date, you can use the date command with the -d option and the string "tomorrow".
$> date -d "tomorrow"

Thu May 16 10:34:12 UTC 2023

   This command will display the date and time 24 hours from now. If you only want the date, you can use
   the + option to format the output:
$> date -d "tomorrow" '+%Y-%m-%d'

2023-05-16

   The '+%Y-%m-%d' option tells date to format the output as "Year-Month-Day", which is a common and
   useful date format.

Cross-Platform Considerations
   While the above solution works well on GNU/Linux systems, it might not work on all Unix-like systems.
   For instance, macOS uses the BSD version of date, which does not support the -d option. However, BSD
   date has the -v option, which allows you to adjust the value of a particular time component. To get
   tomorrow's date on a system with BSD date, you could use:
$> date -v+1d '+%Y-%m-%d'

2023-05-16

   Here, '-v+1d' tells date to add one to the current date's day component.

Conclusion
   In this article, we explored how to get tomorrow's date in Bash using the date command and its
   various options. Whether you're working on a GNU/Linux system or a Unix-like system with BSD date,
   these techniques can help you manipulate dates effectively in your scripts.

   Remember, date manipulation is a vast topic, and we've only just scratched the surface here. The date
   command has many more options and possibilities. To explore further, check out the man page by typing
   man date into your terminal, or look up the online documentation for your system's version of date.


---
https://tecadmin.net/getting-yesterdays-date-in-bash/

Getting Yesterday's Date in Bash: A Practical Walkthrough
May 16, 2023

   Bash, the Bourne-Again SHell, is an incredibly flexible and powerful command language interpreter,
   commonly used in Unix and Unix-like operating systems. It provides a wide range of features,
   including the ability to manipulate date and time data. One such application is the ability to obtain
   yesterday's date. This may seem like a simple task, but it's a useful technique that often comes up
   in script writing and automation tasks.

   In this article, we'll take a practical walkthrough on how to get yesterday's date in Bash. We'll
   cover basic Bash commands, learn about the date command, and finally, explore the process of getting
   yesterday's date using Bash scripting.

Understanding the Date Command
   Before we dive into getting yesterday's date, it's important to first understand the date command in
   Bash. The date command is used to display or set the system date and time. By default, without any
   arguments, it displays the current date and time.
$> date

   The output will be the current date and time, like so:
Tue May 14 23:23:00 PDT 2023

   The date command also allows you to format the output. For example, you can display the date in the
   format YYYY-MM-DD using the following command:
$> date +"%Y-%m-%d"

   This will output:
2023-05-14

Getting Yesterday's Date
   Now, let's talk about how to get yesterday's date. With the -d or --date option of the 'date'
   command, we can display the time described by string, instead of 'now'. This string can be a relative
   expression, like '1 day ago'.
$> date -d "1 day ago" +"%Y-%m-%d"

   This will output the date of one day ago in the format YYYY-MM-DD:
2023-05-13

   It's important to note that the date command and its -d option may behave differently in different
   Unix-like systems. For example, on a MacOS system, you would use -v-1d to get yesterday's date:
$> date -v-1d +"%Y-%m-%d"

Getting Other Previous Dates
   Apart from getting yesterday's date, the date command also gives you the flexibility to retrieve any
   previous date. This can be done by manipulating the relative expression provided to the -d or --date
   option.
     * For instance, if you want to get the date from 3 days ago, you would run:
$> date -d "3 days ago" +"%Y-%m-%d"

       This command will output the date of three days ago in the format YYYY-MM-DD.
     * Similarly, you can get the date of a week ago, a month ago, or even a year ago:
$> date -d "1 week ago" +"%Y-%m-%d"
$> date -d "1 month ago" +"%Y-%m-%d"
$> date -d "1 year ago" +"%Y-%m-%d"

       These commands will output the dates of one week, one month, and one year ago, respectively, in
       the YYYY-MM-DD format.
     * Remember, on MacOS, you would use -v-3d to get the date from 3 days ago, -v-1w to get the date
       from 1 week ago, -v-1m to get the date from 1 month ago, and -v-1y to get the date from 1 year
       ago:
$> date -v-3d +"%Y-%m-%d"
$> date -v-1w +"%Y-%m-%d"
$> date -v-1m +"%Y-%m-%d"
$> date -v-1y +"%Y-%m-%d"

   These commands offer a lot of flexibility in Bash scripting, allowing you to easily manipulate date
   and time data to suit your needs.

Conclusion
   Knowing how to manipulate date and time data in Bash scripting is a valuable skill. Whether it's for
   logging, report generation, or creating backup files, there are many situations in which you might
   need to retrieve yesterday's date. This article has shown you how to do it in a simple and
   straightforward way.

   Remember, the power of Bash comes from its flexibility and vast range of capabilities. Don't hesitate
   to explore more about the date command and other Bash commands. Happy scripting!


---

