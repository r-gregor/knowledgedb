filename: bc_command-examples_20230406.txt
https://tecadmin.net/bc-command-examples/

15 Practical Examples of Linux bc Command
April 4, 2023

   In Linux, the bc command is a versatile tool that can be used to perform complex mathematical
   calculations, automate tasks, and write scripts. The bc command supports a wide range of functions,
   operators, and variables that allow you to perform calculations with great precision and flexibility.
   In this article, we will discuss 15 practical examples of the bc command in Linux that illustrate its
   full range of capabilities and possibilities.

   Each example is designed to showcase a specific aspect of the bc command and how it can be used to
   solve real-world problems. We will start with basic calculations and progress to more advanced
   examples such as using arrays, time calculations, and working with hexadecimal and octal numbers.

15 Practical Examples of Linux bc Command
   By understanding these examples, you will gain a deeper understanding of the bc command and its
   capabilities. You will also learn how to apply the bc command to your own work, whether you are a
   developer, a data analyst, or a scientist. Whether you need to perform basic arithmetic or complex
   mathematical functions, the bc command is a powerful tool that can help you get the job done
   efficiently and accurately.

1. Basic Calculation
       To perform a basic calculation using the bc command, simply enter the equation on the command
       line. For example:
$> echo "5+3" | bc

       Output:
       8

       In this example, we use the echo command to input the equation "5+3" into the bc command. The bc
       command then calculates the result, which is 8.

2. Using Math Functions
       The bc command includes many built-in math functions that can be used in calculations. For
       example:
$> echo "scale=2;sqrt(25)" | bc -l

       Output:
       5.00

       In this example, we use the "sqrt()" function to calculate the square root of 25. We also set the
       "scale" variable to 2, which specifies the number of decimal places to display in the result. The
       "-l" option is used to load the math library, which includes the "sqrt()" function.

3. Setting Variables
       You can set variables in the bc command using the "variable=value" syntax. For example:
$> echo "x=5; y=3; x+y" | bc

       Output:
       8

       In this example, we set the variables "x" and "y" to 5 and 3, respectively. We then perform the
       calculation "x+y", which gives us a result of 8.

4. Using Loops
       The bc command also supports loops, which can be used to repeat calculations. For example:
$> echo "for (i=1; i<=5; i++) { print i }" | bc

       Output:
       12345

       In this example, we use a "for" loop to print the numbers 1 through 5. The "print" statement is
       used to output each number on a new line.

5. Using Scale
       The scale variable in the bc command is used to set the number of decimal places in the output.
       For example:
$> echo "scale=3; 7/2" | bc

       Output:
       3.500

       In this example, we set the scale to 3, which specifies that we want the result to have 3 decimal
       places. The bc command then calculates 7/2, which is 3.500.

6. Using If Statements
       The bc command supports if statements, which can be used to conditionally execute calculations.
       For example:
$> echo "if (3<4) {print \"3 is less than 4\"}" | bc

       Output:
       3 is less than 4

       In this example, we use an if statement to check if 3 is less than 4. If the statement is true,
       the bc command outputs "3 is less than 4".

7. Using While Loops
       The bc command also supports while loops, which can be used to repeatedly execute calculations.
       For example:
$> echo "i=1; while (i<=5) {print i; i=i+1}" | bc

       Output:
       12345

       In this example, we use a while loop to print the numbers 1 through 5. The "i=i+1" statement
       increments the value of the "i" variable each time the loop is executed.

8. Using Trigonometric Functions
       The bc command includes trigonometric functions such as sin(), cos(), and tan(). For example:
$> echo "scale=2; s=5; c=7; a=atan(s/c); a*180/3.14159" | bc -l

       Output:
       Runtime error (func=(main), adr=25): Function atan not defined. # Cygwin (win10)

       In this example, we calculate the angle between the hypotenuse and the adjacent side of a right
       triangle with sides of length 5 and 7. We first set the "scale" variable to 2, which specifies
       that we want the result to have 2 decimal places. We then use the "atan()" function to calculate
       the angle, and multiply the result by 180/3.14159 to convert the angle from radians to degrees.

9. Using Logical Operators
       The bc command supports logical operators such as "&&" and "||", which can be used to combine
       multiple conditions. For example:
$> echo "x=5; y=3; if (x>3 && y<5) {print \"x is greater than 3 and y is less than 5\"}" | bc

       Output:
       x is greater than 3 and y is less than 5

       In this example, we use the "&&" operator to combine two conditions: x is greater than 3 and y is
       less than 5. If both conditions are true, the bc command outputs "x is greater than 3 and y is
       less than 5".

10. Using Arrays
       The bc command also supports arrays, which can be used to store multiple values. For example:
$> echo "array[0]=5; array[1]=3; array[2]=7; array[3]=1; for (i=0; i<4; i++) {print array[i]}" | bc

       Output:
       5371

       In this example, we create an array with four values and use a for loop to print each value on a
       new line.

11. Using Substrings
       The bc command supports substring extraction, which can be used to extract parts of a string. For
       example:
$> echo "string=\"hello world\"; print substr(string, 2, 5)" | bc

       In this example, we extract the substring "ello " from the string "hello world". The "substr()"
       function takes three arguments: the string to extract from, the starting position, and the
       length.

12. Using Time Calculations
       The bc command can also be used to perform time calculations. For example:
$> echo "scale=2; 24*60*60" | bc

       Output:
       86400

       In this example, we calculate the number of seconds in a day (24 hours times 60 minutes times 60
       seconds). We set the "scale" variable to 2 to specify that we want the result to have 2 decimal
       places.

13. Using Exponentiation
       The bc command supports exponentiation, which can be used to raise a number to a power. For
       example:
$> echo "scale=2; 2^10" | bc

       Output:
       1024

       In this example, we calculate 2 to the power of 10, which is 1024. We set the "scale" variable to
       2 to specify that we want the result to have 2 decimal places.

14. Using Hexadecimal Numbers
       The bc command can be used to perform calculations with hexadecimal numbers. For example:
$> echo "ibase=16; FF+1" | bc

       Output:
       256

       In this example, we set the input base ("ibase") to 16, which specifies that we are using
       hexadecimal numbers. We then add FF and 1, which gives us 256 in hexadecimal.

15. Using Octal Numbers
       The bc command can also be used to perform calculations with octal numbers. For example:
$> echo "ibase=8; 12+10" | bc

       Output:
       18

       In this example, we set the input base to 8, which specifies that we are using octal numbers. We
       then add 12 and 10, which gives us 18 in octal.

Conclusion
   The bc command in Linux is a powerful tool for performing mathematical calculations. It supports many
   built-in functions, operators, and variables that allow you to perform complex calculations and
   automate tasks in your scripts and programs. In this article, we have discussed 15 practical examples
   of the bc command in Linux that illustrate its full range of capabilities and possibilities. By
   understanding these examples, you can use the bc command more effectively and efficiently in your own
   work.


---

