filename: /c/Users/gregor.redelonghi/Dropbox/ODPRTO/_TXT/bash_rename-mutiple-files-multif_20160307.txt

http://www.howtogeek.com/howto/ubuntu/shell-geek-rename-multiple-files-at-once/

[26]Shell Geek: Rename Multiple Files At Once

   Let’s say you have a directory with hundreds of files with the wrong file names, and you’d like to
   replace every filename containing test with prod. (this is a contrived example). We can easily do
   this with the “for” command in bash, combined with a little bit of bash goodness. Today we’ll learn
   how to replace text in a variable in a for loop.

   The “for” command works like this:

     for var in <files>;do <command> $var;done

   You can replace <files> with any file match pattern, such as * or *.txt, and you can replace
   <command> with any linux command. The command will be run in sequence on each of the files matched by
   the file match pattern.

   This is where the bash variable handling makes it even more interesting. Instead of just doing
   something like “mv $var”, we can replace text in the filename using this syntax:

     ${var/originaltext/replacetext}

   So now, if we run this command on our directory:

     for f in *;do mv $f ${f/test/prod};done

   For each file matched by *, bash will execute a command similar to this:

     mv test.config prod.config

   I’ve found that knowledge of the shell is invaluable when administering servers or just for managing
   your file collection, and has saved me hours of what would have otherwise been manual work.

   And yes, I realize there are a number of tools that can accomplish renaming of multiple files.



---
http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-12.html

12. More Scripts

12.1 Applying a command to all files in a directory.

12.2 Sample: A very simple backup script (little bit better)

            #!/bin/bash
            SRCD="/home/"
            TGTD="/var/backups/"
            OF=home-$(date +%Y%m%d).tgz
            tar -cZf $TGTD$OF $SRCD


12.3 File re-namer


             #!/bin/sh
             # renna: rename multiple files according to several rules
             # written by felix hudson Jan - 2000

             #first check for the various 'modes' that this program has
             #if the first ($1) condition matches then we execute that portion of the
             #program and then exit

             # check for the prefix condition
             if [ $1 = p ]; then

             #we now get rid of the mode ($1) variable and prefix ($2)
               prefix=$2 ; shift ; shift

             # a quick check to see if any files were given
             # if none then its better not to do anything than rename some non-existent
             # files!!

               if [$1 = ]; then
                  echo "no files given"
                  exit 0
               fi

             # this for loop iterates through all of the files that we gave the program
             # it does one rename per file given
               for file in $*
                 do
                 mv ${file} $prefix$file
               done

             #we now exit the program
               exit 0
             fi

             # check for a suffix rename
             # the rest of this part is virtually identical to the previous section
             # please see those notes
             if [ $1 = s ]; then
               suffix=$2 ; shift ; shift

                if [$1 = ]; then
                 echo "no files given"
                exit 0
                fi

              for file in $*
               do
                mv ${file} $file$suffix
              done

              exit 0
             fi

             # check for the replacement rename
             if [ $1 = r ]; then

               shift

             # i included this bit as to not damage any files if the user does not specify
             # anything to be done
             # just a safety measure

               if [ $# -lt 3 ] ; then
                 echo "usage: renna r [expression] [replacement] files... "
                 exit 0
               fi

             # remove other information
               OLD=$1 ; NEW=$2 ; shift ; shift

             # this for loop iterates through all of the files that we give the program
             # it does one rename per file given using the program 'sed'
             # this is a sinple command line program that parses standard input and
             # replaces a set expression with a give string
             # here we pass it the file name ( as standard input) and replace the nessesary
             # text

               for file in $*
               do
                 new=`echo ${file} | sed s/${OLD}/${NEW}/g`
                 mv ${file} $new
               done
             exit 0
             fi

             # if we have reached here then nothing proper was passed to the program
             # so we tell the user how to use it
             echo "usage;"
             echo " renna p [prefix] files.."
             echo " renna s [suffix] files.."
             echo " renna r [expression] [replacement] files.."
             exit 0

             # done!



12.4 File renamer (simple)

     #!/bin/bash
     # renames.sh
     # basic file renamer

     criteria=$1
     re_match=$2
     replace=$3

     for i in $( ls *$criteria* );
     do
         src=$i
         tgt=$(echo $i | sed -e "s/$re_match/$replace/")
         mv $src $tgt
     done



---
http://serverfault.com/questions/228733/how-to-rename-multiple-files-by-replacing-word-in-file-name

[30]How to rename multiple files by replacing word in file name?

   Replace ACDC to AC-DC

   For example we have these files

     ACDC - Rock N' Roll Ain't Noise Pollution.xxx

     ACDC - Rocker.xxx

     ACDC - Shoot To Thrill.xxx

   I want them to become:

     AC-DC - Rock N' Roll Ain't Noise Pollution.xxx

     AC-DC - Rocker.xxx

     AC-DC - Shoot To Thrill.xxx

   I know that sed or awk is used for this operation. I can't google anything so I'm asking for your
   help =) Could you please provide full working shell command for this task?

***
   I sense there is a larger question here - are you trying to fix up mp3 filenames in general? There
   are a number of scripts people have written over the years to do this. I think one I've used was
   called mp3fixer. – [42]Phil Hollenback Jan 30 '11 at 8:34

   no it's not about mp3's I just have to manage some huge files with similar names, and something
   everything must be replaced or fixed... common situation so I need this nifty solution for renaming


6 Answers 6

***
   from man rename
DESCRIPTION
       "rename" renames the filenames supplied according to the rule specified as the
first argument.  The perlexpr argument is a Perl expression which is expected to modify the
$_ string in Perl for at least some of the filenames specified.  If a given filename is not
modified by the expression, it will not be renamed.  If no filenames are given on
           the command line, filenames will be read via standard input.

   For example, to rename all files matching "*.bak" to strip the extension, you might say
rename 's/\.bak$//' *.bak

   To translate uppercase names to lower, you'd use
rename 'y/A-Z/a-z/' *

***
   Note that many linux machines come with rename from util-linux, which implements simple substitution,
   not regexes. So if rename fails silently without doing anything, you're probably using the wrong
   rename. – [52]Phil Hollenback Jan 30 '11 at 8:31

   I was searching this for ages! thnx! – [53]holms Jan 30 '11 at 14:39
   add a comment |
   up vote 6 down vote

   This answer contains the good parts from all other answers, while leaving out such heresy as ls |
   while read.

   Current directory:
for file in ACDC*.xxx; do
    mv "$file" "${file//ACDC/AC-DC}"
done

   Including subdirectories:
find . -type f -name "ACDC*" -print0 | while read -r -d '' file; do
    mv "$file" "${file//ACDC/AC-DC}"
done

   Newline characters are really unlikely to be in filenames, so this can be simpler while still working
   with names containing spaces:
find . -type f -name "ACDC*" | while read -r file; do
    mv "$file" "${file//ACDC/AC-DC}"
done

***
   Using the bash shell
find . -type f -name "ACDC*" -print0 | while read -d $'\0' f
do
   new=`echo "$f" | sed -e "s/ACDC/AC-DC/"`
   mv "$f" "$new"
done

   Note: using find will process the current directory, and the directories under.
   
***
   To use the util-linux version of rename that Phil referred to (on Ubuntu, it's called rename.ul):
rename ACDC AC-DC ACDC*

   or
rename.ul ACDC AC-DC ACDC*

***
   your variant is the best =) so many stupid articles in google about find and send and awk... to this
   simple operation for which renameutils egxist already! – [64]holms Jan 30 '11 at 15:23
   add a comment |
   up vote 0 down vote

   Depends on your shell. In zsh, I'd do this:
for file in ACDC*.xxx; do
    mv "$file" "$(echo $file | sed -e 's/ACDC/AC-DC/')"
done

   Probably not the best solution, but works.
   
***
   Using bash:
ls *.xxx | while read fn; do
    mv "${fn}" "${fn/ACDC/AC-DC}";
done

   If you have the rename program installed:
rename 's/ACDC/AC-DC/' *.xxx



---
https://www.debian-administration.org/article/150/Easily_renaming_multiple_files.
https://www.debian-administration.org/article/150/Easily_renaming_multiple_files.

Easily renaming multiple files.

Posted by Steve on Wed 1 Jun 2005 at 05:29

Tags: none.
Renaming multiple files seems to be a problem which many newcomers to shell scripting, or administration,
have problems with. But once you've done it a few times the actual solutions are very simple.

There are many cases where you might have a large number of files to rename en masse, for example files
which are output from a given script or tool. Or files that must be renamed to be uploaded to a web-host.

How you rename the files mostly depends on which tools you have available, and which shell you're using.

The way I tend to rename large numbers of files is the same way that I tend do any job which requires
running the same command on a number of files - I use the looping facility within the bash shell.

For example lets assume you have several files in a directory a.JPG, b.JPG, c.JPG and d.JPG then you
can work with each one as follows:

skx@lappy:~$ for i in *.JPG; do echo $i; done
a.JPG
b.JPG
c.JPG
d.JPG
This command has worked with each file which matches the pattern "*.JPG", and runs a command on each
file - in this case it's "echo $i".

Obviously the command which we're running, here it is echo, can be replaced with other commands.

If we used to use this style of command to rename each of the files to lowercase their extensions we
have two possible approaches:

Take advantage of bash's variable substituion.
Use the standard unix command basename.
The bash shell has a notion of text substitutions which is very powerful, and something that can be very
useful to know about so we'll cover that first.

The simplest example I can think of is to strip the extension. For a filename which is stored in the
shell variable $i you can strip a known extension with this:

skx@lappy:~$ i=a.JPG
skx@lappy:~$ echo $i
a.JPG
skx@lappy:~$ echo ${i/.JPG/}
a
Here we've used the substitution operation to strip the ".JPG" from the end of our variable - we can
plug this into the loop we showed earlier to force a rename:

skx@lappy:~$ ls
a.JPG  b.JPG  c.JPG  d.JPG
skx@lappy:~$ for i in *.JPG; do mv "$i" "${i/.JPG}".jpg; done
skx@lappy:~$ ls
a.jpg  b.jpg  c.jpg  d.jpg
(The "quotes" around the arguments to the mv command are useful if you're ever working with files which
contain strange characters, or spaces, in their names).

This is the basic way that you can rename files with bash - use a loop to work on each file, then use
the built-in substituion operations to strip or add to each name in turn.

The other approach is to use basename to manipulate filenames. basename is a standard command which
allows you to strip suffixes from filenames:

skx@lappy:~$ basename c.jpg .jpg
c
skx@lappy:~$ basename c.jpg pg
c.j
Here you can see that the command just returns the filename you've specified with the second argument
removed from it.

This can be plugged into our loop like this:

skx@lappy:~$ ls
a.jpg  b.jpg  c.jpg  d.jpg
skx@lappy:~$ for i in *.jpg; do mv "$i" "`basename $i .jpg`.JPG"; done
skx@lappy:~$ ls
a.JPG  b.JPG  c.JPG  d.JPG
Using Specialised Commands
Instead of remembering how to run these loops over files with bash, you can instead rename files en
masse with specialised renaming commands.

A simple one is the rename command which is included with the Debian perl package and almost certainly
available to you already.

The rename command allows you to rename files with full perl expressions, in a simple manner.

For example our preceeding example of changing the extension can be achieved with:

skx@lappy:~$ rename 's/\.JPG/\.jpg/' *.JPG
We can also, for example, strip spaces from filenames with this:

skx@lappy:~$ rename 's/ //' *.JPG
Renaming files from upper to lower case can be a simple job:

skx@lappy:~$ rename 'y/A-Z/a-z/' *
There are also other specialised commands which you can 'locate with the apt-cache command'
[http://www.debian-administration.org/articles/26], such as mmv [http://packages.debian.org/mmv] and
mrename [http://packages.debian.org/mrename].


---
https://www.debian-administration.org/article/150/Easily_renaming_multiple_files.

Easily renaming multiple files.

Posted by Steve on Wed 1 Jun 2005 at 05:29

Tags: none.
Renaming multiple files seems to be a problem which many newcomers to shell scripting, or administration,
have problems with. But once you've done it a few times the actual solutions are very simple.

There are many cases where you might have a large number of files to rename en masse, for example files
which are output from a given script or tool. Or files that must be renamed to be uploaded to a web-host.

How you rename the files mostly depends on which tools you have available, and which shell you're using.

The way I tend to rename large numbers of files is the same way that I tend do any job which requires
running the same command on a number of files - I use the looping facility within the bash shell.

For example lets assume you have several files in a directory a.JPG, b.JPG, c.JPG and d.JPG then you
can work with each one as follows:

skx@lappy:~$ for i in *.JPG; do echo $i; done
a.JPG
b.JPG
c.JPG
d.JPG
This command has worked with each file which matches the pattern "*.JPG", and runs a command on each
file - in this case it's "echo $i".

Obviously the command which we're running, here it is echo, can be replaced with other commands.

If we used to use this style of command to rename each of the files to lowercase their extensions we
have two possible approaches:

Take advantage of bash's variable substituion.
Use the standard unix command basename.
The bash shell has a notion of text substitutions which is very powerful, and something that can be very
useful to know about so we'll cover that first.

The simplest example I can think of is to strip the extension. For a filename which is stored in the
shell variable $i you can strip a known extension with this:

skx@lappy:~$ i=a.JPG
skx@lappy:~$ echo $i
a.JPG
skx@lappy:~$ echo ${i/.JPG/}
a
Here we've used the substitution operation to strip the ".JPG" from the end of our variable - we can
plug this into the loop we showed earlier to force a rename:

skx@lappy:~$ ls
a.JPG  b.JPG  c.JPG  d.JPG
skx@lappy:~$ for i in *.JPG; do mv "$i" "${i/.JPG}".jpg; done
skx@lappy:~$ ls
a.jpg  b.jpg  c.jpg  d.jpg
(The "quotes" around the arguments to the mv command are useful if you're ever working with files which
contain strange characters, or spaces, in their names).

This is the basic way that you can rename files with bash - use a loop to work on each file, then use
the built-in substituion operations to strip or add to each name in turn.

The other approach is to use basename to manipulate filenames. basename is a standard command which
allows you to strip suffixes from filenames:

skx@lappy:~$ basename c.jpg .jpg
c
skx@lappy:~$ basename c.jpg pg
c.j
Here you can see that the command just returns the filename you've specified with the second argument
removed from it.

This can be plugged into our loop like this:

skx@lappy:~$ ls
a.jpg  b.jpg  c.jpg  d.jpg
skx@lappy:~$ for i in *.jpg; do mv "$i" "`basename $i .jpg`.JPG"; done
skx@lappy:~$ ls
a.JPG  b.JPG  c.JPG  d.JPG
Using Specialised Commands
Instead of remembering how to run these loops over files with bash, you can instead rename files en
masse with specialised renaming commands.

A simple one is the rename command which is included with the Debian perl package and almost certainly
available to you already.

The rename command allows you to rename files with full perl expressions, in a simple manner.

For example our preceeding example of changing the extension can be achieved with:

skx@lappy:~$ rename 's/\.JPG/\.jpg/' *.JPG
We can also, for example, strip spaces from filenames with this:

skx@lappy:~$ rename 's/ //' *.JPG
Renaming files from upper to lower case can be a simple job:

skx@lappy:~$ rename 'y/A-Z/a-z/' *
There are also other specialised commands which you can 'locate with the apt-cache command'
[http://www.debian-administration.org/articles/26], such as mmv [http://packages.debian.org/mmv] and
mrename [http://packages.debian.org/mrename].




---
http://www.peteryu.ca/tutorials/shellscripting/batch_rename

Batch rename files by finding and replacing terms in the filename

   I had a set of files that have a common naming scheme and I wantd to replace a word common to all the
   filenames with another word. Unix-style shell utilities make it easy to do this sort of batch rename
   operation by finding and replacing patterns in filenames. Windows users can gain access to these
   powerful programs by installing [27]Cygwin. In this short tutorial I will explain how you can do a
   batch rename of all files in the current directory by replacing a specific common word in the
   filenames with another word. I have only tested this on Windows with Cygwin, but it should be very
   similar on Linux or Unix.

   If you want to just replace the file name extension, then see my [28]tutorial on batch renaming file
   extensions.

Problem statement

   I had a number of pictures from my digital camera that are named like so:
IMG_2378.JPG
IMG_2379.JPG
IMG_2380.JPG

   I wanted to do a batch rename to replace “IMG_” with “Fireworks”:
Fireworks2378.JPG
Fireworks2379.JPG
Fireworks2380.JPG

Method

   To perform a batch rename, the basic command looks like this:
for filename in *foo*; do echo mv \"$filename\" \"${filename//foo/bar}\"; done > rename.txt

   The command works as follows:
    1. The for loop goes through all files with name *foo* in the current directory.
    2. For each filename, it constructs and echoes a command of the form mv “filename” “newfilename”,
       where the filename and new file name are surrounded by double quotes (to account for spaces in
       the file name) and the new file name has all instances of foo replaced with bar. The substitution
       function ${filename//foo/bar} has two slashes (//) to replace every occurrence of foo with bar.
    3. Finally, the entire output is saved to rename.txt for user review to ensure that the rename
       commands are being generated correctly.

   If you are confident that the command did not mess anything up, then you can directly pipe it
   directly to /bin/bash:
for filename in *foo*; do echo mv \"$filename\" \"${filename//foo/bar}\"; done | /bin/bash

   Or, you can have Bash execute the mv command directly (note that the double quotes are no longer
   escaped with a \):
for filename in *foo*; do mv "$filename" "${filename//foo/bar}"; done

   I do not recommend using either of these direct execution options without checking the output first.

   If no files are found matching the *foo*, the loop still executes but the generated command is wrong.
   Therefore, always check the output before using it.

Example

   The image renaming example at the beginning of this page can be now be solved. In the following code
   blocks, the command after the $ character is what I typed into the Bash prompt. First, I can list the
   files in the directory:
$ ls -1 IMG_*
IMG_2378.JPG
IMG_2379.JPG
IMG_2380.JPG

   Next, I can modify the batch renaming command for this renaming job:
$ for filename in IMG_*; do echo mv \"$filename\" \"${filename//IMG_/Fireworks}\"; done
mv "IMG_2378.JPG" "Fireworks2378.JPG"
mv "IMG_2379.JPG" "Fireworks2379.JPG"
mv "IMG_2380.JPG" "Fireworks2380.JPG"

   Finally, by piping the above output into /bin/bash, the commands can be executed and the files are
   renamed.

Alternative methods

   Here are some altnative methods that I have used in the past, each with a few weaknesses that need to
   be taken into account. I want to document them here because they are instructive.

Batch rename with awk and sed

   This was my first workable attempt at doing batch renaming:
ls -1 *foo* | awk '{print("mv "$1 " " $1)}' | sed 's/foo/bar/2' > rename.txt

   The command works as follows:
    1. ls -1 *foo* lists all the files in the current directory with foo in the file name. It lists one
       filename per line.
    2. The ouptut is piped to awk '{print("mv "$1 " " $1)}' command. This produces new output where each
       line is mv FILENAME FILENAME, with FILENAME being the corresponding filename.
    3. The output from the awk command is piped to sed 's/foo/bar/2', which replaces the second instance
       of foo in a line with bar. The second instance of foo corresponds to the second FILENAME in the
       mv FILENAME FILENAME lines generated by the awk command. This creates output of the form mv
       FILENAME NEWFILENAME, where the new filename is desired filename with foo replaced with bar.
    4. Finally, the entire output is saved to rename.txt for user review to ensure that the rename
       commands are being generated correctly. As with the main batch rename technique, you could pipe
       the output to /bin/bash but this is not recommended.

   This technique has some caveats. The first is that since it does not work with file names with
   spaces. The awk command prints the first field $1 in each line of input, and the spaces in the file
   name causes the first word of the filename to be treated as the entire first field.

   The second is that since sed replaces the second instance of foo in a line, it does not handle the
   case where the file name had multiple instances of foo in the first place. For example, if you had a
   file named “foofoo.jpg”, then the corresponding command generated by the above code would be:
mv foobar.jpg foofoo.jpg

   The second foo is replaced with bar, which is not what you want. Thus, this technique does not work
   when there is more than one instance of the word you want to replace in the filename.

Batch rename with paste and sed

   An alternative I tried to get around the limitation in the previous technique of only one instance of
   the search term being allowed to occur per file name:
paste <(ls -1 *foo* | sed 's/^/mv "/;s/$/"/') <(ls -1 *foo* | sed 's/^/"/;s/$/"/;s/foo/bar/g') -d ' ' > rename
.txt

   How it works:
    1. The commands in <( … ) are processed first. This is a process substitution in Bash and the output
       of the command inside is given to paste.
    2. The first process substitution lists all files named *foo* and sed prepends mv ” and appends a
       double quote to the end. This surrounds the file name with double quotes to take care of spaces.
    3. The second process substitution again lists all the files named *foo* and then uses sed to
       surround the file name with double quotes and replace “foo” with “bar” in the file name.
    4. The paste command [29]concatenates the output of the two process substitutions line by line, and
       uses a space as a delimiter. This produces a list of mv commands that can be saved to a file or
       piped to /bin/bash for execution.

   I do not see too many weaknesses in this technique but it seems cryptic and perhaps inelegant.

Discussion

   Rose, 2011/03/31 05:41
   Hi Peter,
   Thanks for your example of renaming files. I only wanted to rename some music files. I found the
   fancy sed commands confusing and I found your simple suggestion (the first one) worked well. I
   especially appreciated how one can check this first with rename.txt, before renaming the files.
   Rose
   Reply
   james santinello, 2012/03/18 16:56
   Hi: i have a folder with 700 song titles.i wish to have them all in upper case.is that possible?
   Reply
   Peter Yu, 2012/03/18 22:08
   James - A quick search found this to convert file names to uppercase:
   for filename in *foo*; do echo mv \"$filename\" \"`echo "$filename"|awk '{print
   toupper($filename)}'`\"; done
   Reply
   David, 2012/07/05 16:31
   Thank you for your example. This is just what I needed (the first option). It worked perfectly on my
   MacBook Pro.
   Reply
   Cygwin_user, 2012/10/10 10:41
   The Windows command prompt had a renaming utility called "rename" or "ren." So you can do make cmd
   execute a command from your cygwin terminal as follows:
   cmd /C rename \*foo\* \*bar\*
   Note "cmd /C [windows_cmd_command]" makes cmd execute the cmd command that follows "/C," and that you
   need to escape the asterisks ("\*") to prevent your cygwin shell (bash by default) from doing the
   globbing before sending the command to cmd.
   Reply
   Peter Yu, 2012/10/24 22:22
   That's interesting, but I wasn't able to get it to work properly. Sometimes it complains about
   "duplicate files" and sometimes it just tacks on the "bar", so that files named "foo0001.cr2" become
   "foo0001.cr2bar".
   Reply
   Roey, 2012/12/21 06:13
   Hmm, with the first method I get an error that the file isn't found
   e.g. `mv: cannot stat `"454Reads.HAL3W_2_L.sff"': No such file or directory`.
   The `awk` and `sed` methods work great.
   Thanks
   Reply
   Peter Yu, 2012/12/23 23:36
   I've never seen that before. I'd do the first method and check the output of the rename.txt file to
   see if everything is output properly.
   Reply
   Roey, 2012/12/25 06:30
   sorry my mistake, all works now...
   Reply
   Kooalia, 2013/06/26 20:37
   for change winter_2013_festvial.jpg to-> summer_2013_festvial.jpg
   On windows by cmd command dos, go in directory and type:
   rename winter*. summer*.*
   Reply
   Eric C, 2014/01/08 15:22
   For what it's worth, Cygwin has the rename command which would make this very easy to accomplish:
   rename IMG_ Fireworks *
   Syntax: rename <Characters You Don't Want> <Characters You Do Want> filenames (wildcards are
   acceptable)
   Reply
   Mohsen, 2015/02/15 09:42
   Thank youu , This is Greatt , so what we have to do if we want to rename all files in all
   subdirectories too ?
   Reply
   Terry Flannery, 2015/05/01 11:18
   Hi Peter,
   Many thanks for the rename script it was well documented and worked. Short and simple.
   Great job.
   Terry
   Reply
   Michelle, 2015/09/04 10:20
   Hi Peter,
   I have files that are named with our state ID number that I want to rename with out school ID number.
   I have a csv file of state number with school number in next column. How can I rename the files like
   this:
   04459.jpg to 1234567.jpg
   0562.jpg to 145874.jpg
   etc based on my file.
   Reply
   John, 2015/12/04 12:07
   Peter,
   I am trying to copy every single image and video on my Mac to a single folder for backup purposes.
   Here are a couple of lines I am currently using in my bash script.
   find /Users/"$(whoami)"/Library/Messages/Attachments -name "*.jpg" -exec cp {}
   /Users/"$(whoami)"/Desktop/ImagesBackup/$now \;;
   find /Users/"$(whoami)"/Library/Messages/Attachments -name "*.JPG" -exec cp {}
   /Users/"$(whoami)"/Desktop/ImagesBackup/$now \;;
   find /Users/"$(whoami)"/Library/Messages/Attachments -name "*.png" -exec cp {}
   /Users/"$(whoami)"/Desktop/ImagesBackup/$now \;;
   find /Users/"$(whoami)"/Library/Messages/Attachments -name "*.PNG" -exec cp {}
   /Users/"$(whoami)"/Desktop/ImagesBackup/$now \;;
   The problem I am running in to is duplicates. How can I have my script rename every single file as it
   is copied into the new location?



---
http://superuser.com/questions/613985/how-to-rename-multiple-files-in-a-directory-in-some-pattern-in-linux

[31]How to rename multiple files in a directory in some pattern in Linux?

   up vote 5 down vote [32]favorite
   2

   I have a directory which has files with random names. What I want to do is rename the files with
   file1, file2 and so on.The lexicographically smaller file name should be numbered with smaller
   number. How can I do that?
   [33]linux [34]shell [35]ls
   [36]share|[37]improve this question
         [38]edited Jul 5 '13 at 13:27
   asked Jul 1 '13 at 3:30
   [39]banarun
   141117

   Also look at pyrenamer. Depending on your distro, it may be in your standard repositories.
   – [40]Paddy Landau Jul 1 '13 at 11:23
   add a comment |

4 Answers 4

   [41]active [42]oldest [43]votes
   up vote 7 down vote accepted

   A simple bash script should do it.
#!/usr/bin/env bash

count=0
for i in *; do
    mv "${i}" file${count}.`echo "${i}" | awk -F. '{print $2}'`
    ((++count))
done

   To help with a line-by-line explanation:
    1. Location of the bash shell this is executing under, determined by your environmental variable.
    2. Set the variable "count" to 0
    3. Creates a for-loop, iterating over the output of the command ls (sorted alphabetically by
       default).
    4. Moves (i.e. renames) the file "i" (current one in the loop) to file#.ext. The "#" is the current
       number in "count" and the stuff past the "." is a quick way to get the current file extension (so
       this could work in a folder of various file extensions).
    5. Increment the counter variable

   loop, loop, loop
    1. done!

   Note:
    1. This executes in whatever directory you are executing it from. So as a script, you'd want to add
       a command line argument. Instead I would open a terminal, navigate to the directory to do this
       on, and execute the following (exactly):
for i in *; do mv "${i}" "file${count}".`echo "${i}" |
  awk -F. '{print $2}'`; ((++count)); done

    2. This is assuming that you only have file names such as "file.txt" not "this.is.a.file.txt"

   [44]share|[45]improve this answer
       [46]edited Jul 2 '13 at 14:27
   answered Jul 1 '13 at 4:08
   [47]nerdwaller
   9,38311431
   1
   Two things: Use * instead of `ls`, and quote ${i}: "${i}". – [48]Christoffer Hammarström Jul 1 '13 at
   7:01
   3
   As @ChristofferHammarström says, use * not ls, because your code will handle files with spaces
   incorrectly, and because the output from ls is not guaranteed always to be the same on different
   systems. Also quote your use of the variables, as "${i}" and "${2}", because multiple, leading and
   trailing spaces will be affected. A minor point: In the calculation, you can omit the
   parameter-substitution, as count=$(( count + 1 )) or, even better, just use (( ++count )) by itself.
   – [49]Paddy Landau Jul 1 '13 at 11:19

   @PaddyLandau - Thanks for the tips (and explanation)! Updated. – [50]nerdwaller Jul 1 '13 at 13:03

   Your script assumes all files have extensions which is not necessarily true. – [51]terdon Jul 1 '13
   at 13:55

   @terdon - Good point, in which case the OP can simply drop everything between ${count} and the
   following ; (exclusive). – [52]nerdwaller Jul 1 '13 at 14:28
    |  [53]show 4 more comments
   up vote 3 down vote

   You can use this python script:
#!/usr/bin/python
import os
#enter the path to the folder: relative or absolute
direc = raw_input('Enter the path to directory: ')
os.chdir(os.path.join(os.getcwd(),direc))
files = os.listdir('.')
def func(x):
    return map(str.lower,os.path.splitext(x))
files.sort(key = func)
for i,x in enumerate(files, 1):
    name, ext = os.path.splitext(x)
    os.rename(x, 'file{}{}'.format(i,ext))

   [54]share|[55]improve this answer
        [56]edited Jul 1 '13 at 4:54
   answered Jul 1 '13 at 4:12
   [57]Ashwini Chaudhary
   1555

   I would suggest making your script respect extensions (an easy update), I'll +1 when you do that
   since otherwise their files may be like "wtf mate?" – [58]nerdwaller Jul 1 '13 at 4:18

   @nerdwaller solution updated. – [59]Ashwini Chaudhary Jul 1 '13 at 4:54
   add a comment |
   up vote 2 down vote

   A [60]bash possibility (similar to nerdwaller's solution, but without subshells and forks to
   [61]awk):
#!/usr/bin/bash

shopt -s nullglob

count=0
for i in *; do
    mv -nv -- "$i" "file$((++count))"
done

   Switches for mv:
     * -n for no clobber: won't overwrite an otherwise existing file. Remove it if you actually want to
       overwrite files (might not be available depending on your version of mv),
     * -v for verbose: tell what it's doing. Highly optional (but I like to have these lines on my
       terminal to impress my colleagues),
     * -- for end of options: without this, and if a filename starts with a hyphen, that would confuse
       mv as it would try to interpret it as an option. Might not be available depending on your version
       of mv. Use it if available!

   I'm also using the shell optional behavior nullglob so that if there are no files, then you won't get
   any errors (the loop will not get executed as * would expand to nothing in this case).
     ________________________________________________________________________________________________

   If you need to handle extensions too (as in nerdwaller's version), you don't need [62]awk, it can all
   be done in [63]bash:
#!/usr/bin/bash

shopt -s nullglob

count=0
for i in *; do
    mv -nv -- "$i" "file$((++count)).${i##*.}"
done
     ________________________________________________________________________________________________

   Observe that the numbering will not have any leading zeros, so that you'll get files named so:
file1
file2
...
file10
file11
...

   and this might screw up the order of the files in listings. If you need leading zeros too:
#!/usr/bin/bash

shopt -s nullglob

files=( * )

lz=0
for ((n=${#files[@]};n;n/=10)); do ((++lz)); done

count=0
for i in "${files[@]}"; do
    printf -v n "%0${lz}d" $((++count))
    mv -nv -- "$i" "file$n"
done

   And if you want it to keep the original file's extension, replace the line
mv -nv -- "$i" "file$n"

   with
mv -nv -- "$i" "file$n.${i##*.}"
     ________________________________________________________________________________________________

   Caveats.
     * Because this uses [64]bash globbing, it might be quite slow if you have a huge number of files in
       your directory (globbing can take some time).
     * This will rename everything, including directories, but not hidden files.

   Cures.
     * I don't have any solutions regarding speed in case of huge number of files in [65]bash.
     * If you need to discard directories from this renaming procedure, and only rename files, add [[ -f
       $i ]] || continue just after the for i in *; do statement.
     * If you need to also rename hidden files, add shopt -s dotglob just after the shopt -s nullglob
       statement.
     ________________________________________________________________________________________________

   If you read down to here, I guess you'll be able to craft something that matches your very own need
   from the examples I gave you, hopefully using good [66]bash practice (provided you choose to solve
   your problem using [67]bash of course).

   I wanted to implement the same when I was a student and was studying the Linux Shell Scripts. then I
   created the below script.. Have a look..
   [71]https://github.com/rushyang/GTU-OS-Bash-Scripts/blob/master/Working/System%20Scripts/final_rename
   _updated.sh

   

---

