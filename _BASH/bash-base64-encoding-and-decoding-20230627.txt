https://tecadmin.net/base64-encoding-and-decoding-in-bash/
filename: bash_base64-encoding-and-decoding_20230627.txt

Base64 Encoding and Decoding in Bash
June 25, 2023

   The Bash shell, which is often used as the default shell in most Linux distributions, supports
   various commands and features that assist in data manipulation. Among these features, Base64 encoding
   and decoding are two of the most frequently used, due to their widespread usage in programming, web
   development, and data science. This article will provide an in-depth exploration of Base64 encoding
   and decoding in the Bash environment.

Understanding Base64 Encoding
   Before delving into the technicalities of Base64 encoding in Bash, let's first grasp the concept of
   Base64 encoding. This encoding scheme converts binary data into text format to ensure safe and
   efficient data transfer over networks that are designed to handle text. Base64 encoding is designed
   to handle data that does not contain only printable characters.

   Base64 encoding converts three octets of data into four encoded characters, each within a set of 64
   different possible characters. These characters include uppercase letters (A-Z), lowercase letters
   (a-z), numeric digits (0-9), plus (+), and slash (/). Also, the equal sign (=) is used for padding in
   the encoded output.

Base64 Encoding and Decoding in Bash
   In the Bash shell, the base64 command-line tool is used to perform Base64 encoding and decoding. By
   default, the base64 command encodes the provided data, while using the -d or --decode option enables
   decoding.

Encoding
   To encode a string using Base64 in Bash, use the base64 command as follows:
$> echo 'Hello World' | base64

   In this example, the string 'Hello World' is passed to base64 via a pipe (|). The command returns the
   Base64 encoded version of the string.

Decoding
   Decoding a Base64 encoded string in Bash is also straightforward:
$> echo 'SGVsbG8gV29ybGQ=' | base64 --decode

   In this case, the Base64 encoded string 'SGVsbG8gV29ybGQ=' is passed to base64 with the --decode
   option.

Handling Files
   In addition to encoding and decoding strings, the base64 command can also work with files. For
   instance, you can encode an image file as follows:
$> base64 image.jpg > image.txt

   This command creates a text file image.txt containing the Base64 encoded version of the image.

   To decode the encoded image file, use the -d or --decode option:
$> base64 -d image.txt > output.jpg

   This command decodes the data from image.txt and saves it as an image file output.jpg.

Beware of Line Wrapping
   By default, the base64 command wraps encoded strings at 76 characters per line to comply with MIME
   specifications. If you need to avoid line wrapping, you can use the -w or code><--wrap
   option with a value of 0:
$> echo 'Hello World' | base64 -w 0

   This command encodes the string 'Hello World' without wrapping the output.

Conclusion
   Base64 encoding and decoding are fundamental in various computing areas, especially in data transfer
   and storage. The Bash shell offers a convenient way to handle Base64 encoding and decoding using the
   base64 command-line tool, making it a handy skill for developers and data scientists. Just remember
   the nuances of line wrapping and you'll be able to manipulate Base64 data in Bash effectively.


---

