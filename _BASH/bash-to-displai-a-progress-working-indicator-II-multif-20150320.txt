filename: bash-to-displai-a-progress-working-indicator-II_multif_20150320.txt
http://nixcraft.com/showthread.php/13664-Shell-Script-To-Show-Progress-Indicators-Dots-While-Making-The-Backups

Thread: [28]Shell Script To Show Progress Indicators / Dots While Making The Backups

Default Shell Script To Show Progress Indicators / Dots While Making The Backups

     A simple progress indicator using nothing but a series of dots and the while loop.
     Code:
#!/bin/bash
# Tested it under Fedora Linux 10 and Bash shell. YMMV ;)
# show progress dots
function progress(){
echo -n "Please wait..."
while true
do
     echo -n "."
     sleep 5
done
}

function dobackup(){
    # put backup commands here
    tar -zcvf /dev/st0 /home &>/dev/null
}

# Start it in the background
progress &

# Save PID
MYSELF=$!

# Start backup
dobackup

# Kill progress
kill $MYSELF &>/dev/null

echo -n "...done."
echo

     Last edited by rockdalinux; 8th October 2009 at 03:03 AM.
***
     Try this real progress bar - that I wrote for LSST example section.
     Code:
#!/bin/bash
DIRS=(/bin/* /etc/*)
DEST="/tmp/test.$$"
[ ! -d $DEST ] && mkdir -p $DEST
dialog --title "Copy file" --gauge "Copying file..." 10 75 < <(
   n=${#DIRS[*]};
   i=0
   for f in "${DIRS[@]}"
   do
      PCT=$(( 100*(++i)/n ))
cat <
XXX
$PCT
Copying file "$f"...
XXX
EOF
  /bin/cp $f ${DEST} &>/dev/null
   done
)
/bin/rm -rf $DEST

     However, OPs examples directly works with bash no need to install anything. Hell it will even work
     with AIX, HP-UX or any other UNIX like oses ... indeed he deserves +10 from me

     
     
---
http://www.linuxquestions.org/questions/programming-9/bash-how-can-i-create-a-progress-indicator-68066/

   bash: How can I create a progress indicator?

   Something that has puzzled me for quite som time now is how I could create a progress indicator in
   bash.
   You know when you're executing a long-running command and the command prints out dots, or a rotating
   dash, to show you that it's still working.
   I was thinking about something like this:
   Code:
echo -n "Working"

while (downloading a file or maybe searching for a file); do
    echo -n "."
    sleep 1
done

echo " Done"

   The above example would not work since the command is performed and if it succeeds then echo a dot,
   sleep for one second and return to the beginning of the loop and run the command again...
   I've also tried with a variable and a function run in the background.
   When the function is finished it would change the variable and this would cause the loop to finnish,
   but this didn't work either...
   Does anyone have a working solution for this?
   Thanks in advance!
***
   Solved it with some help from another forum.
   I'll leave this post in case someone else is interested.
   The final code:
   Code:
searchfor="xmms"                # something to search for
tempfile="/tmp/search.log"      # temporary logfile


echo -n "Searching for $searchfor"

# execute the command
# send errors to /dev/null
# send output to logfile
find / -name $searchfor 2>/dev/null 1>>$tempfile &

#  echo dots while command is executing
while ps |grep $! &>/dev/null; do
        echo -n "."
        sleep 2
done

echo " Done"

echo "Result:"
cat $tempfile

rm $tempfile

***
   If you'd like a stationary spinner instead of moving dots:
   Code:
#!/usr/bin/env bash

while [ 1 ]; do
echo -e -n '|\r\c'
echo -e -n '/\r\c'
echo -e -n '-\r\c'
echo -e -n '\\\r\c'
done

   Of course, you would want to change the while statement, and the spinner is very fast. . .

   
   
---
http://bash.cyberciti.biz/guide/Putting_functions_in_background

How Do I Put a Function In Background?

     * The syntax is as follows:

name(){
  echo "Do something"
  sleep 1
}

# put a function in the background
name &

# do something

Example

     * You can display a series of dots (progress bar) while performing tape backup. This is useful for
       the user or operator to display a progress bar.
     * Create a shell script called progressdots.sh^[15][1]:

#!/bin/bash
# progressdots.sh - Display progress while making backup
# Based on idea presnted by nixCraft forum user rockdalinux
# Show progress dots
progress(){
  echo -n "$0: Please wait..."
  while true
  do
    echo -n "."
    sleep 5
  done
}

dobackup(){
    # put backup commands here
    tar -zcvf /dev/st0 /home >/dev/null 2>&1
}

# Start it in the background
progress &

# Save progress() PID
# You need to use the PID to kill the function
MYSELF=$!

# Start backup
# Transfer control to dobackup()
dobackup

# Kill progress
kill $MYSELF >/dev/null 2>&1

echo -n "...done."
echo

   Save and close the file. Run it as follows:
chmod +x progressdots.sh
./progressdots.sh

   Sample outputs:
./progressdots.sh: Please wait..................done.


---
