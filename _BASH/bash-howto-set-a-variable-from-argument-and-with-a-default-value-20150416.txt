filename: bash-howto-set-a-variable-from-argument-and-with-a-default-value_20150416.txt
http://stackoverflow.com/questions/16074786/bash-how-to-set-a-variable-from-argument-and-with-a-default-value

[26]Bash: How to set a variable from argument, and with a default value

   up vote 3 down vote [27]favorite

   I'd really like to use a syntax that is easy to understand. It is pretty clear that with shell
   scripting this sort of thing can be accomplished in a huge number of ways (more than most programming
   languages) because of all the different variable expansion methods and programs like test and [ and
   [[, etc.

   Right now I'm just looking for
DIR=$1 or .

   Meaning, my DIR variable should contain either what is specified in the first arg or the current
   directory.

   Can I write something that actually reflects this logic, i.e. using some kind of logical or
   statement, rather than strange things like DIR=${1:-.}. What is the difference between this and
   DIR=${1-.}?

   It's all just confusing, in fact almost all of these variable expansions are confusing. I suppose
   there are few alternatives and they do achieve a high level of terseness.

   Why can't I do this?
DIR="$1" || '.'

   I'm guessing this means "if $1 is empty, the assignment still works (DIR becomes empty), so the
   invalid command '.' never gets executed."
   [28]bash [29]shell [30]unix
   [31]share|[32]improve this question
   asked Apr 18 '13 at 4:56
   [33]Steven Lu
   9,7431469157

   I found my answer to what the colon means: [34]wiki.bash-hackers.org/syntax/pe#use_a_default_value –
   [35]Steven Lu Apr 18 '13 at 5:07

   Embrace the language. Not all languages have the same idioms. DIR=${1:-.} is a perfectly natural way
   to express this logic in any POSIX-compatible shell. –  [36]chepner Apr 18 '13 at 12:26
   add a comment |

2 Answers 2

   [37]active [38]oldest [39]votes
   up vote 9 down vote accepted

   I see several questions here.
    1. “Can I write something that actually reflects this logic”
       Yes. There are a few ways you can do it. Here's one:
if [[ "$1" != "" ]]; then
    DIR="$1"
else
    DIR=.
fi

    2. “What is the difference between this and DIR=${1-.}?”
       The syntax ${1-.} expands to . if $1 is unset, but expands like $1 if $1 is set—even if $1 is set
       to the empty string.
       The syntax ${1:-.} expands to . if $1 is unset or is set to the empty string. It expands like $1
       only if $1 is set to something other than the empty string.
    3. “Why can't I do this? DIR="$1" || '.'”
       Because this is bash, not perl or ruby or some other language. (Pardon my snideness.)
       In bash, || separates entire commands (technically it separates pipelines). It doesn't separate
       expressions.
       So DIR="$1" || '.' means “execute DIR="$1", and if that exits with a non-zero exit code, execute
       '.'”.

   [40]share|[41]improve this answer
       [42]edited Apr 18 '13 at 5:28
   answered Apr 18 '13 at 5:11
   [43]rob mayoff
   159k19291335
   add a comment |
   up vote 2 down vote

   How about this:
DIR=.
if [ $# -gt 0 ]; then
  DIR=$1
fi

   $# is the number of arguments given to the script, and -gt means "greater than", so you basically set
   DIR to the default value, and if the user has specified an argument, then you set DIR to that
   instead.
