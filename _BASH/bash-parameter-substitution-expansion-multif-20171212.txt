filename: bash_parameter_substitution_expansion-multif_20171212.txt
http://bashscripts.org/wordpress/index.php/parameter-substitutionexpansion/

Parameter Substitution/Expansion

   1. Shell variables can be specified like $var or this ${var}.
   $ var=’a.ads,fssd2342%asd234#@.,&%,sdfgsdfgas4352′
   echo ${var}
   a.ads,fssd2342%asd234#@.,&%,sdfgsdfgas4352

   2. ${#var} is the length of the variable.
   $ echo ${#var}
   42

   3. ${var:pos} substrings the variable starting at pos.
   $ echo ${var:10}
   2342%asd234#@.,&%,sdfgsdfgas4352

   4. ${var:pos:len} substrings the variable starting at
   pos with a max length of len.
   $ echo ${var:10:5}
   2342%

   5. ${var#pattern} strips pattern from the front or left hand side
   of the variable. This form is not greedy meaning it stops as
   soon as the pattern is matched.
   ${var##pattern} is the greedy form.
   $ echo ${var#*,}
   fssd2342%asd234#@.,&%,sdfgsdfgas4352
   $ echo ${var##*,}
   sdfgsdfgas4352

   6. ${var%pattern} strips pattern from the back or right hand side
   of the variable. This form is not greedy meaning it stops as soon
   as the pattern is matched.
   ${var%%pattern} is the greedy form.
   $ echo ${var%,*}
   a.ads,fssd2342%asd234#@.,&%
   $ echo ${var%%,*}
   a.ads

   7. ${var/pattern/replacement} replaces pattern with replacement once.
   $ echo ${var/a/A}
   A.ads,fssd2342%asd234#@.,&%,sdfgsdfgas4352

   8. ${var//pattern/replacement} replaces pattern with replacement globally.
   $ echo ${var//a/A}
   A.Ads,fssd2342%Asd234#@.,&%,sdfgsdfgAs4352

   9. ${var/#pattern/replacement} if variable beginning matches the pattern
   it is replaced with replacement.
   $ echo ${var/#a./llll}
   llllads,fssd2342%asd234#@.,&%,sdfgsdfgas4352

   10. ${var/%pattern/replacement} if variable end matches the pattern
   it is replaced with replacement.
   $ echo ${var/%352/llll}
   a.ads,fssd2342%asd234#@.,&%,sdfgsdfgas4llll

   More useful links on this:


---
http://www.cyberciti.biz/tips/bash-shell-parameter-substitution.html

How To Use Bash Parameter Substitution Like A Pro
June 14, 2017

   The $ character is used for parameter expansion, arithmetic expansion and command substitution. You
   can use it for manipulating and expanding variables on demands without using external commands such
   as perl, python, sed or awk. This guide shows you how to use parameter expansion modifiers to
   transform Bash shell variables for your scripting needs.

Parameter expansion in Bash
   You can use variables to store data and configuration options. For example:
   dest="/backups"
   Use echo or printf command to display variable value:
   echo "$dest"
   OR
   printf "$dest\n"
   The parameter name or symbol such as $dest to be expanded may be enclosed in braces
   echo "Value ${dest}"
   It is optional but serve to protect the variable to be expanded from characters immediately following
   it which could be interpreted as part of the name.

#1: Setting Up Default Shell Variables Value
   The syntax is as follows:
${parameter:-defaultValue}
var=${parameter:-defaultValue}

   ${parameter:-defaultValue} var=${parameter:-defaultValue}

   If parameter not set, [24]use defaultValue. In this example, your shell script takes arguments
   supplied on the command line. You’d like to provide default value so that the most common value can
   be used without needing to type them every time. If variable $1 is not set or passed, use root as
   default value for u:
   u=${1:-root}

   u=${1:-root}

   Consider the following example:
#!/bin/bash
_jail_dir="${1:-/home/phpcgi}"
echo "Setting php-cgi at ${_jail_dir}..."
# rest of the script ...

   #!/bin/bash _jail_dir="${1:-/home/phpcgi}" echo "Setting php-cgi at ${_jail_dir}..." # rest of the
   script ...

   You can now run this script as follows:
./script.sh /jail              # <--- set php jail at /jail dir
./script.sh /home/httpd/jail   # <---- set php jail at /home/httpd/jail dir
./script.sh                    # <--- set php jail dir at /home/phpcgi (default)

   ./script.sh /jail # <--- set php jail at /jail dir ./script.sh /home/httpd/jail # <---- set php jail
   at /home/httpd/jail dir ./script.sh # <--- set php jail dir at /home/phpcgi (default)

   Here is another handy example:
_mkdir(){
        local d="$1"               # get dir name
        local p=${2:-0755}      # get permission, set default to 0755
        [ $# -eq 0 ] && { echo "$0: dirname"; return; }
        [ ! -d "$d" ] && mkdir -m $p -p "$d"
}

   _mkdir(){ local d="$1" # get dir name local p=${2:-0755} # get permission, set default to 0755 [ $#
   -eq 0 ] && { echo "$0: dirname"; return; } [ ! -d "$d" ] && mkdir -m $p -p "$d" }

   Use this substitution for creating failsafe functions and providing missing command line arguments in
   scripts.

#1.1: Setting Default Values
   The syntax is as follows:
${var:=value}
var=${USER:=value}

   ${var:=value} var=${USER:=value}

   The assignment (:=) operator is used to assign a value to the variable if it doesnâ€™t already have
   one. Try the following examples:
   echo $USER

   echo $USER

   Sample outputs:
vivek

   Now, assign a value foo to the $USER variable if doesn’t already have one:
   echo ${USER:=foo}

   echo ${USER:=foo}

   Sample outputs:
vivek

   Unset value for $USER:
unset USER
echo ${USER:=foo}

   unset USER echo ${USER:=foo}

   Sample outputs:
foo

   This make sure you always have a default reasonable value for your script.

Tip: ${var:-defaultValue} vs ${var:=defaultValue}

   Please note that it will not [25]work with positional parameter arguments:
var=${1:=defaultValue}  ### FAIL with an error cannot assign in this way
var=${1:-defaultValue}    ### Perfect

   var=${1:=defaultValue} ### FAIL with an error cannot assign in this way var=${1:-defaultValue} ###
   Perfect

#2: Display an Error Message If $VAR Not Passed
   If the variable is not defined or not passed, you [26]can stop executing the Bash script with the
   following syntax:
${varName?Error varName is not defined}
${varName:?Error varName is not defined or is empty}
${1:?"mkjail: Missing operand"}
MESSAGE="Usage: mkjail.sh domainname IPv4"             ### define error message
_domain=${2?"Error: ${MESSAGE}"}  ### you can use $MESSAGE too

   ${varName?Error varName is not defined} ${varName:?Error varName is not defined or is empty}
   ${1:?"mkjail: Missing operand"} MESSAGE="Usage: mkjail.sh domainname IPv4" ### define error message
   _domain=${2?"Error: ${MESSAGE}"} ### you can use $MESSAGE too

   This is used for giving an error message for unset parameters. In this example, if the $1 command
   line arg is not passed, stop executing the script with an error message:
   _domain="${1:?Usage: mknginxconf domainName}"

   _domain="${1:?Usage: mknginxconf domainName}"

   Here is a sample script:
#!/bin/bash
# Purpose: Wrapper script to setup Nginx Load Balancer
# Author: Vivek Gite
_root="/nas.pro/prod/scripts/perl/nginx"
_setup="${_root}/createnginxconf.pl"
_db="${_root}/database/text/vips.db"
_domain="${1:?Usage: mknginxconf domainName}"     ### die if domainName is not passed ####

[ ! -f $_db ] && { echo "$0: Error $_db file not found."; exit 1; }
line=$(grep "^${_domain}" $_db) || { echo "$0: Error $_domain not found in $_db."; exit 2; }

# Get domain config info into 4 fields:
# f1 - Domain Name|
# f2 - IPv4Vip:httpPort:HttpsPort, IPv6Vip:httpPort:HttpsPort|
# f3 - PrivateIP1:port1,PrivateIP2,port2,...PrivateIPN,portN|
# f4 - LB Type (true [round robin] OR false [session])
# -------------------------------------------------------------------------------
IFS='|'
read -r f1 f2 f3 f4  <<<"$line"

# Do we want ssl host config too?
IFS=':'
set -- $f2
ssl="false"
[ "$3" == "443" ] && ssl="true"

# Build query
d="$f1:$ssl:$f4"
IFS=','
ips=$f3

# Call our master script to setup nginx reverse proxy / load balancer (LB) for given domain name
$_setup "$d" $ips

   #!/bin/bash # Purpose: Wrapper script to setup Nginx Load Balancer # Author: Vivek Gite
   _root="/nas.pro/prod/scripts/perl/nginx" _setup="${_root}/createnginxconf.pl"
   _db="${_root}/database/text/vips.db" _domain="${1:?Usage: mknginxconf domainName}" ### die if
   domainName is not passed ####[ ! -f $_db ] && { echo "$0: Error $_db file not found."; exit 1; }
   line=$(grep "^${_domain}" $_db) || { echo "$0: Error $_domain not found in $_db."; exit 2; }# Get
   domain config info into 4 fields: # f1 - Domain Name| # f2 - IPv4Vip:httpPort:HttpsPort,
   IPv6Vip:httpPort:HttpsPort| # f3 - PrivateIP1:port1,PrivateIP2,port2,...PrivateIPN,portN| # f4 - LB
   Type (true [round robin] OR false [session]) #
   ------------------------------------------------------------------------------- IFS='|' read -r f1 f2
   f3 f4 <<<"$line"# Do we want ssl host config too? IFS=':' set -- $f2 ssl="false" [ "$3" == "443" ] &&
   ssl="true"# Build query d="$f1:$ssl:$f4" IFS=',' ips=$f3# Call our master script to setup nginx
   reverse proxy / load balancer (LB) for given domain name $_setup "$d" $ips

#2.1: Display an Error Message and Run Command
   If $2 is not set display an error message for $2 parameter and run cp command on fly as follows:
#!/bin/bash
_file="$HOME/.input"
_message="Usage: chkfile commandname"

# Run another command (compact format)
_cmd="${2:? $_message $(cp $_file $HOME/.output)}"

$_cmd "$_file"

   #!/bin/bash _file="$HOME/.input" _message="Usage: chkfile commandname"# Run another command (compact
   format) _cmd="${2:? $_message $(cp $_file $HOME/.output)}"$_cmd "$_file"

#3: Find Variable Length
   You can easily find string length using the following syntax:
${#variableName}
echo ${#variableName}
len=${#var}

   ${#variableName} echo ${#variableName} len=${#var}

   Here is a sample shell script to add a ftp user:
#!/bin/bash
# Usage : Add a ftp user
_fuser="$1"
_fpass="$2"

# die if username/password not provided
[ $# -ne 2 ] && { echo "Usage: addftpuser username password"; exit 1;}

# Get username length and make sure it always <= 8
[[ ${#_fuser} -ge 9 ]] && { echo "Error: Username should be maximum 8 characters in length. "; exit 2;}

# Check for existing user in /etc/passwd
/usr/bin/getent passwd "${_fuser}" &>/dev/null

# Check exit status
[ $? -eq 0 ] && { echo "Error: FTP username \"${_fuser}\" exists."; exit 3; }

# Add user
/sbin/useradd -s /sbin/nologin -m  "${_fuser}"
echo "${_fpass}" | /usr/bin/passwd "${_fuser}" --stdin

   #!/bin/bash # Usage : Add a ftp user _fuser="$1" _fpass="$2"# die if username/password not provided [
   $# -ne 2 ] && { echo "Usage: addftpuser username password"; exit 1;}# Get username length and make
   sure it always <= 8 [[ ${#_fuser} -ge 9 ]] && { echo "Error: Username should be maximum 8 characters
   in length. "; exit 2;}# Check for existing user in /etc/passwd /usr/bin/getent passwd "${_fuser}"
   &>/dev/null# Check exit status [ $? -eq 0 ] && { echo "Error: FTP username \"${_fuser}\" exists.";
   exit 3; }# Add user /sbin/useradd -s /sbin/nologin -m "${_fuser}" echo "${_fpass}" | /usr/bin/passwd
   "${_fuser}" --stdin

   Each Linux or UNIX command returns a status when it terminates normally or abnormally. You can use
   [27]command exit status in the shell script to display an error message or take some sort of action.
   In above example, if getent command is successful, it returns a code which tells the shell script to
   display an error message. 0 exit status means the command was successful without any errors. [28]$?
   holds the return value set by the previously executed command.

#4: Remove Pattern (Front of $VAR)
   The syntax is as follows:
${var#Pattern}
${var##Pattern}

   ${var#Pattern} ${var##Pattern}

   You can strip $var as per given pattern from front of $var. In this example remove /etc/ part and get
   a filename only, enter:
f="/etc/resolv.conf"
echo ${f#/etc/}

   f="/etc/resolv.conf" echo ${f#/etc/}

   The first syntax removes shortest part of pattern and the second syntax removes the longest part of
   the pattern. Consider the following example:
_version="20090128"
_url="http://dns.measurement-factory.com/tools/dnstop/src/dnstop-${_version}.tar.gz"

   _version="20090128"
   _url="http://dns.measurement-factory.com/tools/dnstop/src/dnstop-${_version}.tar.gz"

   You just want to get filename i.e. dnstop-20090128.tar.gz, enter (try to remove shortest part of
   $_url) :
   echo "${_url#*/}"

   echo "${_url#*/}"

   Sample outputs:
/dns.measurement-factory.com/tools/dnstop/src/dnstop-20090128.tar.gz

   Now try using the longest part of the pattern syntax:
   echo "${_url##*/}"

   echo "${_url##*/}"

   Sample outputs:
dnstop-20090128.tar.gz

   This is also useful to get a script name without using /bin/basename:
#!/bin/bash
_self="${0##*/}"
echo "$_self is called"

   #!/bin/bash _self="${0##*/}" echo "$_self is called"

   Create a script called master.info as follows:
#!/bin/bash
# Purpose: Display jail info as per softlink
# Author: Vivek Gite
_j="[29][email protected]"

# find out script name
_self="${0##*/}"

[ "$VERBOSE" == "1" ] && echo "Called as $_self for \"$_j\" domain(s)"

for j in $_j
do
        export _DOMAIN_NAME=$j
        source functions.sh
        init_jail
        # call appropriate functions as per script-name / softlink
        case $_self in
                uploaddir.info) echo "Upload dir for $j: $(get_domain_upload_dir)" ;;
                tmpdir.info) echo "/tmp dir for $j: $(get_domain_tmp_dir)" ;;
                mem.info) echo "$j domain mem usage (php+lighttpd): $(get_domain_mem_info)" ;;
                cpu.info) echo "$j domain cpu usage (php+lighttpd): $(get_domain_cpu_info)" ;;
                user.info) echo "$j domain user and group info: $(get_domain_users_info)" ;;
                diskquota.info) echo "$j domain disk quota info (mysql+disk): $(get_domain_diskquota_info)" ;;
                *) warn "Usage: $_self"
        esac
done

   #!/bin/bash # Purpose: Display jail info as per softlink # Author: Vivek Gite
   _j="[30][email protected]"# find out script name _self="${0##*/}"[ "$VERBOSE" == "1" ] && echo
   "Called as $_self for \"$_j\" domain(s)"for j in $_j do export _DOMAIN_NAME=$j source functions.sh
   init_jail # call appropriate functions as per script-name / softlink case $_self in uploaddir.info)
   echo "Upload dir for $j: $(get_domain_upload_dir)" ;; tmpdir.info) echo "/tmp dir for $j:
   $(get_domain_tmp_dir)" ;; mem.info) echo "$j domain mem usage (php+lighttpd): $(get_domain_mem_info)"
   ;; cpu.info) echo "$j domain cpu usage (php+lighttpd): $(get_domain_cpu_info)" ;; user.info) echo "$j
   domain user and group info: $(get_domain_users_info)" ;; diskquota.info) echo "$j domain disk quota
   info (mysql+disk): $(get_domain_diskquota_info)" ;; *) warn "Usage: $_self" esac done

   Finally, create softlink as follows:
   # ln -s master.info uploaddir.info
   # ln -s master.info tmpdir.info
   # ln -s master.info mem.info
   ....
   ..
   You can now call script as follows:
   # ./mem.info example.org
   # ./cpu.info example.com example.net

#4.1: Remove Pattern (Back of $VAR)
   The syntax is as follows:
${var%pattern}
${var%%pattern}

   ${var%pattern} ${var%%pattern}

   Exactly the same as above, except that it applies to the back of $var. In this example remove .tar.gz
   from $FILE, enter:
FILE="xcache-1.3.0.tar.gz"
echo ${FILE%.tar.gz}

   FILE="xcache-1.3.0.tar.gz" echo ${FILE%.tar.gz}

   Sample outputs:
xcache-1.3.0

   Rename all [31]*.perl files to *.pl using bash for loop as Apache web server is configured to only
   use .pl file and not .perl file names:
for p in /scripts/projects/.devl/perl/*.perl
do
        mv "$p" "${p%.perl}.pl"
done

   for p in /scripts/projects/.devl/perl/*.perl do mv "$p" "${p%.perl}.pl" done

   You can combine all of them as follows to [32]create a build scripts:
#!/bin/bash
# Usage: Build suhosin module for RHEL based servers
# Author: Vivek Gite
# ----
# Set default value for $2
VERSION="-${2:-0.9.31}"
URL="http://download.suhosin.org/suhosin${VERSION}.tgz"
vURL="http://download.suhosin.org/suhosin${VERSION}.tgz.sig"

# Get tar ball names
FILE="${URL##*/}"
vFILE="${vURL##*/}"
DLHOME="/opt"
SOFTWARE="suhosin"

# Remove .tgz and get dir name
DEST="${FILE%.tgz}"

# Download software
wget $URL -O "${DLHOME}/$FILE"
wget $vURL -O "${DLHOME}/$vFILE"

# Extract it
tar -zxvf $FILE
cd "$DEST"

# Build it and install it
phpize --clean && phpize && ./configure && make && read -p "Update/Install $SOFTWARE [Y/n] ? " answer
shopt -s nocasematch
[[ $answer =~ y|es  ]] && make install
shopt -u nocasematch

   #!/bin/bash # Usage: Build suhosin module for RHEL based servers # Author: Vivek Gite # ---- # Set
   default value for $2 VERSION="-${2:-0.9.31}" URL="http://download.suhosin.org/suhosin${VERSION}.tgz"
   vURL="http://download.suhosin.org/suhosin${VERSION}.tgz.sig"# Get tar ball names FILE="${URL##*/}"
   vFILE="${vURL##*/}" DLHOME="/opt" SOFTWARE="suhosin"# Remove .tgz and get dir name
   DEST="${FILE%.tgz}"# Download software wget $URL -O "${DLHOME}/$FILE" wget $vURL -O
   "${DLHOME}/$vFILE"# Extract it tar -zxvf $FILE cd "$DEST"# Build it and install it phpize --clean &&
   phpize && ./configure && make && read -p "Update/Install $SOFTWARE [Y/n] ? " answer shopt -s
   nocasematch [[ $answer =~ y|es ]] && make install shopt -u nocasematch

   If you turn on [33]nocasematch option, shell matches patterns in a case-insensitive fashion when
   performing matching while executing [34]case or [35][[ conditional expression.

#5: Find And Replace
   The syntax is as follows:
${varName/Pattern/Replacement}
${varName/word1/word2}
${os/Unix/Linux}

   ${varName/Pattern/Replacement} ${varName/word1/word2} ${os/Unix/Linux}

   Find word unix and replace with linux, enter:
x="Use unix or die"
sed 's/unix/linux/' <<<$x

   x="Use unix or die" sed 's/unix/linux/' <<<$x

   You can avoid using sed as follows:
echo "${x/unix/linux}"
out="${x/unix/linux}"
echo "${out}"

   echo "${x/unix/linux}" out="${x/unix/linux}" echo "${out}"

   To replace all matches of pattern, enter :
   out="${x//unix/linux}"

   out="${x//unix/linux}"

   You can use this to rename or remove files on fly
y=/etc/resolv.conf
cp "${y}" "${y/.conf/.conf.bak}"

   y=/etc/resolv.conf cp "${y}" "${y/.conf/.conf.bak}"

   Here is another example:
         # RHEL php modules path
        _php_modules="/usr/lib64/php/modules"
        for i in $_php_modules/*
        do
                p="${i##*/}"                  ## Get module name
                ini="/etc/php.d/${p/so/ini}"  ## Get ini file by replacing .so with .ini extension
                # make sure file exists
                [ ! -f "$ini" ] && echo "$i php module exists but $ini file not found."
        done

   # RHEL php modules path _php_modules="/usr/lib64/php/modules" for i in $_php_modules/* do
   p="${i##*/}" ## Get module name ini="/etc/php.d/${p/so/ini}" ## Get ini file by replacing .so with
   .ini extension # make sure file exists [ ! -f "$ini" ] && echo "$i php module exists but $ini file
   not found." done

   The following function installs required modules in chrooted php-cgi process
install_php_modules(){
        # get jail name
        local n="${_chrootbase}/${d##/}"
        local p=""
        local ini=""
        # enable only ${_php_modules_enabled} php modules and delete other .ini files if exists in jail
        for i in $_php_modules/*
        do
                p="${i##*/}"
                ini="$n/etc/php.d/${p/so/ini}"
                # find out if module is enabled or not
                if [[ ${_php_modules_enabled} = *${p}*   ]]
                then
                        [ "$VERBOSE" == "1" ] && echo " [+] Enabling php module $p"
                        $_cp -f "$i" "$n/${_php_modules##/}"      ## install it
                        copy_shared_libs "$i"                     ## get shared libs in jail too
                else
                        [ -f "${ini}" ] && $_rm -f "${ini}"       ## if old .ini exists in jail, just delete it
                fi
        done
}

   install_php_modules(){ # get jail name local n="${_chrootbase}/${d##/}" local p="" local ini="" #
   enable only ${_php_modules_enabled} php modules and delete other .ini files if exists in jail for i
   in $_php_modules/* do p="${i##*/}" ini="$n/etc/php.d/${p/so/ini}" # find out if module is enabled or
   not if [[ ${_php_modules_enabled} = *${p}* ]] then [ "$VERBOSE" == "1" ] && echo " [+] Enabling php
   module $p" $_cp -f "$i" "$n/${_php_modules##/}" ## install it copy_shared_libs "$i" ## get shared
   libs in jail too else [ -f "${ini}" ] && $_rm -f "${ini}" ## if old .ini exists in jail, just delete
   it fi done }

#6: Substring Starting Character
   The syntax is as follows:
${parameter:offset}
${parameter:offset:length}
${variable:position}
var=${string:position}

   ${parameter:offset} ${parameter:offset:length} ${variable:position} var=${string:position}

   Expands to up to length characters of parameter starting at the character specified by offset.
base="/backup/nas"
file="/data.tar.gz"
#### strip extra slash from $file  ####
path="${base}/${file:1}"

   base="/backup/nas" file="/data.tar.gz" #### strip extra slash from $file ####
   path="${base}/${file:1}"

   Extract craft word only:
x="nixcraft.com"
echo ${x:3:5}"

   x="nixcraft.com" echo ${x:3:5}"

   To extract phone number, enter:
phone="022-124567887"
# strip std code
echo "${phone:4}"

   phone="022-124567887" # strip std code echo "${phone:4}"

Summary: String Manipulation and Expanding Variables
   For your ready references here are all your handy bash parameter substitution operators. Try them
   all; enhance your scripting skills like a pro:
   ${parameter:-defaultValue}    Get default shell variables value
   ${parameter:=defaultValue}    Set default shell variables value
   ${parameter:?”Error Message”} Display an error message if parameter is not set
   ${#var}                       Find the length of the string
   ${var%pattern}                Remove from shortest rear (end) pattern
   ${var%%pattern}               Remove from longest rear (end) pattern
   ${var:num1:num2}              Substring
   ${var#pattern}                Remove from shortest front pattern
   ${var##pattern}               Remove from longest front pattern
   ${var/pattern/string}         Find and replace (only replace first occurrence)
   ${var//pattern/string}        Find and replace all occurrences


---
http://www.tldp.org/LDP/abs/html/parameter-substitution.html

10.2. Parameter Substitution

   Manipulating and/or expanding variables

   ${parameter}
          Same as $parameter, i.e., value of the variable parameter. In certain contexts, only the less
          ambiguous ${parameter} form works.

          May be used for concatenating variables with strings.

your_id=${USER}-on-${HOSTNAME}
echo "$your_id"
#
echo "Old \$PATH = $PATH"
PATH=${PATH}:/opt/bin  # Add /opt/bin to $PATH for duration of script.
echo "New \$PATH = $PATH"

   ${parameter-default}, ${parameter:-default}
          If parameter not set, use default.

var1=1
var2=2
# var3 is unset.

echo ${var1-$var2}   # 1
echo ${var3-$var2}   # 2
#           ^          Note the $ prefix.



echo ${username-`whoami`}
# Echoes the result of `whoami`, if variable $username is still unset.

   ${parameter-default} and ${parameter:-default} are almost equivalent. The extra : makes a difference
   only when parameter has been declared, but is null.

#!/bin/bash
# param-sub.sh

#  Whether a variable has been declared
#+ affects triggering of the default option
#+ even if the variable is null.

username0=
echo "username0 has been declared, but is set to null."
echo "username0 = ${username0-`whoami`}"
# Will not echo.

echo

echo username1 has not been declared.
echo "username1 = ${username1-`whoami`}"
# Will echo.

username2=
echo "username2 has been declared, but is set to null."
echo "username2 = ${username2:-`whoami`}"
#                            ^
# Will echo because of :- rather than just - in condition test.
# Compare to first instance, above.


#

# Once again:

variable=
# variable has been declared, but is set to null.

echo "${variable-0}"    # (no output)
echo "${variable:-1}"   # 1
#               ^

unset variable

echo "${variable-2}"    # 2
echo "${variable:-3}"   # 3

exit 0

          The default parameter construct finds use in providing "missing" command-line arguments in
          scripts.

DEFAULT_FILENAME=generic.data
filename=${1:-$DEFAULT_FILENAME}
#  If not otherwise specified, the following command block operates
#+ on the file "generic.data".
#  Begin-Command-Block
#  ...
#  ...
#  ...
#  End-Command-Block



#  From "hanoi2.bash" example:
DISKS=${1:-E_NOPARAM}   # Must specify how many disks.
#  Set $DISKS to $1 command-line-parameter,
#+ or to $E_NOPARAM if that is unset.

          See also [7]Example 3-4, [8]Example 31-2, and [9]Example A-6.

          Compare this method with [10]using an and list to supply a default command-line argument.

   ${parameter=default}, ${parameter:=default}
          If parameter not set, set it to default.

          Both forms nearly equivalent. The : makes a difference only when $parameter has been declared
          and is null, [11][1] as above.

echo ${var=abc}   # abc
echo ${var=xyz}   # abc
# $var had already been set to abc, so it did not change.

   ${parameter+alt_value}, ${parameter:+alt_value}
          If parameter set, use alt_value, else use null string.

          Both forms nearly equivalent. The : makes a difference only when parameter has been declared
          and is null, see below.

echo "###### \${parameter+alt_value} ########"
echo

a=${param1+xyz}
echo "a = $a"      # a =

param2=
a=${param2+xyz}
echo "a = $a"      # a = xyz

param3=123
a=${param3+xyz}
echo "a = $a"      # a = xyz

echo
echo "###### \${parameter:+alt_value} ########"
echo

a=${param4:+xyz}
echo "a = $a"      # a =

param5=
a=${param5:+xyz}
echo "a = $a"      # a =
# Different result from   a=${param5+xyz}

param6=123
a=${param6:+xyz}
echo "a = $a"      # a = xyz

   ${parameter?err_msg}, ${parameter:?err_msg}
          If parameter set, use it, else print err_msg and abort the script with an [12]exit status of
          1.

          Both forms nearly equivalent. The : makes a difference only when parameter has been declared
          and is null, as above.

   Example 10-7. Using parameter substitution and error messages
#!/bin/bash

#  Check some of the system's environmental variables.
#  This is good preventative maintenance.
#  If, for example, $USER, the name of the person at the console, is not set,
#+ the machine will not recognize you.

: ${HOSTNAME?} ${USER?} ${HOME?} ${MAIL?}
  echo
  echo "Name of the machine is $HOSTNAME."
  echo "You are $USER."
  echo "Your home directory is $HOME."
  echo "Your mail INBOX is located in $MAIL."
  echo
  echo "If you are reading this message,"
  echo "critical environmental variables have been set."
  echo
  echo

# ------------------------------------------------------

#  The ${variablename?} construction can also check
#+ for variables set within the script.

ThisVariable=Value-of-ThisVariable
#  Note, by the way, that string variables may be set
#+ to characters disallowed in their names.
: ${ThisVariable?}
echo "Value of ThisVariable is $ThisVariable".

echo; echo


: ${ZZXy23AB?"ZZXy23AB has not been set."}
#  Since ZZXy23AB has not been set,
#+ then the script terminates with an error message.

# You can specify the error message.
# : ${variablename?"ERROR MESSAGE"}


# Same result with:   dummy_variable=${ZZXy23AB?}
#                     dummy_variable=${ZZXy23AB?"ZXy23AB has not been set."}
#
#                     echo ${ZZXy23AB?} >/dev/null

#  Compare these methods of checking whether a variable has been set
#+ with "set -u" . . .


echo "You will not see this message, because script already terminated."

HERE=0
exit $HERE   # Will NOT exit here.

# In fact, this script will return an exit status (echo $?) of 1.

   Example 10-8. Parameter substitution and "usage" messages
#!/bin/bash
# usage-message.sh

: ${1?"Usage: $0 ARGUMENT"}
#  Script exits here if command-line parameter absent,
#+ with following error message.
#    usage-message.sh: 1: Usage: usage-message.sh ARGUMENT

echo "These two lines echo only if command-line parameter given."
echo "command-line parameter = \"$1\""

exit 0  # Will exit here only if command-line parameter present.

# Check the exit status, both with and without command-line parameter.
# If command-line parameter present, then "$?" is 0.
# If not, then "$?" is 1.

   Parameter substitution and/or expansion. The following expressions are the complement to the match in
   expr string operations (see [13]Example 16-9). These particular ones are used mostly in parsing file
   path names.

   Variable length / Substring removal

   ${#var}
          String length (number of characters in $var). For an [14]array, ${#array} is the length of the
          first element in the array.

   Exceptions:
          + ${#*} and ${#@} give the number of positional parameters.
          + For an array, ${#array[*]} and ${#array[@]} give the number of elements in the array.

          Example 10-9. Length of a variable

#!/bin/bash
# length.sh

E_NO_ARGS=65

if [ $# -eq 0 ]  # Must have command-line args to demo script.
then
  echo "Please invoke this script with one or more command-line arguments."
  exit $E_NO_ARGS
fi

var01=abcdEFGH28ij
echo "var01 = ${var01}"
echo "Length of var01 = ${#var01}"
# Now, let's try embedding a space.
var02="abcd EFGH28ij"
echo "var02 = ${var02}"
echo "Length of var02 = ${#var02}"

echo "Number of command-line arguments passed to script = ${#@}"
echo "Number of command-line arguments passed to script = ${#*}"

exit 0

   ${var#Pattern}, ${var##Pattern}
          ${var#Pattern} Remove from $var the shortest part of $Pattern that matches the front end of
          $var.

          ${var##Pattern} Remove from $var the longest part of $Pattern that matches the front end of
          $var.

          A usage illustration from [15]Example A-7:

# Function from "days-between.sh" example.
# Strips leading zero(s) from argument passed.

strip_leading_zero () #  Strip possible leading zero(s)
{                     #+ from argument passed.
  return=${1#0}       #  The "1" refers to "$1" -- passed arg.
}                     #  The "0" is what to remove from "$1" -- strips zeros.

          Manfred Schwarb's more elaborate variation of the above:

strip_leading_zero2 () # Strip possible leading zero(s), since otherwise
{                      # Bash will interpret such numbers as octal values.
  shopt -s extglob     # Turn on extended globbing.
  local val=${1##+(0)} # Use local variable, longest matching series of 0's.
  shopt -u extglob     # Turn off extended globbing.
  _strip_leading_zero2=${val:-0}
                       # If input was 0, return 0 instead of "".
}

          Another usage illustration:

echo `basename $PWD`        # Basename of current working directory.
echo "${PWD##*/}"           # Basename of current working directory.
echo
echo `basename $0`          # Name of script.
echo $0                     # Name of script.
echo "${0##*/}"             # Name of script.
echo
filename=test.data
echo "${filename##*.}"      # data
                            # Extension of filename.

   ${var%Pattern}, ${var%%Pattern}
          ${var%Pattern} Remove from $var the shortest part of $Pattern that matches the back end of
          $var.

          ${var%%Pattern} Remove from $var the longest part of $Pattern that matches the back end of
          $var.

   [16]Version 2 of Bash added additional options.

   Example 10-10. Pattern matching in parameter substitution
#!/bin/bash
# patt-matching.sh

# Pattern matching  using the # ## % %% parameter substitution operators.

var1=abcd12345abc6789
pattern1=a*c  # * (wild card) matches everything between a - c.

echo
echo "var1 = $var1"           # abcd12345abc6789
echo "var1 = ${var1}"         # abcd12345abc6789
                              # (alternate form)
echo "Number of characters in ${var1} = ${#var1}"
echo

echo "pattern1 = $pattern1"   # a*c  (everything between 'a' and 'c')
echo "--------------"
echo '${var1#$pattern1}  =' "${var1#$pattern1}"    #         d12345abc6789
# Shortest possible match, strips out first 3 characters  abcd12345abc6789
#                                     ^^^^^               |-|
echo '${var1##$pattern1} =' "${var1##$pattern1}"   #                  6789
# Longest possible match, strips out first 12 characters  abcd12345abc6789
#                                    ^^^^^                |----------|

echo; echo; echo

pattern2=b*9            # everything between 'b' and '9'
echo "var1 = $var1"     # Still  abcd12345abc6789
echo
echo "pattern2 = $pattern2"
echo "--------------"
echo '${var1%pattern2}  =' "${var1%$pattern2}"     #     abcd12345a
# Shortest possible match, strips out last 6 characters  abcd12345abc6789
#                                     ^^^^                         |----|
echo '${var1%%pattern2} =' "${var1%%$pattern2}"    #     a
# Longest possible match, strips out last 12 characters  abcd12345abc6789
#                                    ^^^^                 |-------------|

# Remember, # and ## work from the left end (beginning) of string,
#           % and %% work from the right end.

echo

exit 0

   Example 10-11. Renaming file extensions:
#!/bin/bash
# rfe.sh: Renaming file extensions.
#
#         rfe old_extension new_extension
#
# Example:
# To rename all *.gif files in working directory to *.jpg,
#          rfe gif jpg


E_BADARGS=65

case $# in
  0|1)             # The vertical bar means "or" in this context.
  echo "Usage: `basename $0` old_file_suffix new_file_suffix"
  exit $E_BADARGS  # If 0 or 1 arg, then bail out.
  ;;
esac


for filename in *.$1
# Traverse list of files ending with 1st argument.
do
  mv $filename ${filename%$1}$2
  #  Strip off part of filename matching 1st argument,
  #+ then append 2nd argument.
done

exit 0

   Variable expansion / Substring replacement

          These constructs have been adopted from ksh.

   ${var:pos}
          Variable var expanded, starting from offset pos.

   ${var:pos:len}
          Expansion to a max of len characters of variable var, from offset pos. See [17]Example A-13
          for an example of the creative use of this operator.

   ${var/Pattern/Replacement}
          First match of Pattern, within var replaced with Replacement.

          If Replacement is omitted, then the first match of Pattern is replaced by nothing, that is,
          deleted.

   ${var//Pattern/Replacement}
          Global replacement. All matches of Pattern, within var replaced with Replacement.

          As above, if Replacement is omitted, then all occurrences of Pattern are replaced by nothing,
          that is, deleted.

          Example 10-12. Using pattern matching to parse arbitrary strings

#!/bin/bash

var1=abcd-1234-defg
echo "var1 = $var1"

t=${var1#*-*}
echo "var1 (with everything, up to and including first - stripped out) = $t"
#  t=${var1#*-}  works just the same,
#+ since # matches the shortest string,
#+ and * matches everything preceding, including an empty string.
# (Thanks, Stephane Chazelas, for pointing this out.)

t=${var1##*-*}
echo "If var1 contains a \"-\", returns empty string...   var1 = $t"


t=${var1%*-*}
echo "var1 (with everything from the last - on stripped out) = $t"

echo

# -------------------------------------------
path_name=/home/bozo/ideas/thoughts.for.today
# -------------------------------------------
echo "path_name = $path_name"
t=${path_name##/*/}
echo "path_name, stripped of prefixes = $t"
# Same effect as   t=`basename $path_name` in this particular case.
#  t=${path_name%/}; t=${t##*/}   is a more general solution,
#+ but still fails sometimes.
#  If $path_name ends with a newline, then `basename $path_name` will not work,
#+ but the above expression will.
# (Thanks, S.C.)

t=${path_name%/*.*}
# Same effect as   t=`dirname $path_name`
echo "path_name, stripped of suffixes = $t"
# These will fail in some cases, such as "../", "/foo////", # "foo/", "/".
#  Removing suffixes, especially when the basename has no suffix,
#+ but the dirname does, also complicates matters.
# (Thanks, S.C.)

echo

t=${path_name:11}
echo "$path_name, with first 11 chars stripped off = $t"
t=${path_name:11:5}
echo "$path_name, with first 11 chars stripped off, length 5 = $t"

echo

t=${path_name/bozo/clown}
echo "$path_name with \"bozo\" replaced  by \"clown\" = $t"
t=${path_name/today/}
echo "$path_name with \"today\" deleted = $t"
t=${path_name//o/O}
echo "$path_name with all o's capitalized = $t"
t=${path_name//o/}
echo "$path_name with all o's deleted = $t"

exit 0

   ${var/#Pattern/Replacement}
          If prefix of var matches Pattern, then substitute Replacement for Pattern.

   ${var/%Pattern/Replacement}
          If suffix of var matches Pattern, then substitute Replacement for Pattern.

          Example 10-13. Matching patterns at prefix or suffix of string

#!/bin/bash
# var-match.sh:
# Demo of pattern replacement at prefix / suffix of string.

v0=abc1234zip1234abc    # Original variable.
echo "v0 = $v0"         # abc1234zip1234abc
echo

# Match at prefix (beginning) of string.
v1=${v0/#abc/ABCDEF}    # abc1234zip1234abc
                        # |-|
echo "v1 = $v1"         # ABCDEF1234zip1234abc
                        # |----|

# Match at suffix (end) of string.
v2=${v0/%abc/ABCDEF}    # abc1234zip123abc
                        #              |-|
echo "v2 = $v2"         # abc1234zip1234ABCDEF
                        #               |----|

echo

#  ----------------------------------------------------
#  Must match at beginning / end of string,
#+ otherwise no replacement results.
#  ----------------------------------------------------
v3=${v0/#123/000}       # Matches, but not at beginning.
echo "v3 = $v3"         # abc1234zip1234abc
                        # NO REPLACEMENT.
v4=${v0/%123/000}       # Matches, but not at end.
echo "v4 = $v4"         # abc1234zip1234abc
                        # NO REPLACEMENT.

exit 0

   ${!varprefix*}, ${!varprefix@}
          Matches names of all previously declared variables beginning with varprefix.

# This is a variation on indirect reference, but with a * or @.
# Bash, version 2.04, adds this feature.

xyz23=whatever
xyz24=

a=${!xyz*}         #  Expands to *names* of declared variables
# ^ ^   ^           + beginning with "xyz".
echo "a = $a"      #  a = xyz23 xyz24
a=${!xyz@}         #  Same as above.
echo "a = $a"      #  a = xyz23 xyz24

echo "---"

abc23=something_else
b=${!abc*}
echo "b = $b"      #  b = abc23
c=${!b}            #  Now, the more familiar type of indirect reference.
echo $c            #  something_else

   If $parameter is null in a non-interactive script, it will terminate with a 127 exit status (the
   Bash error code for "command not found").
