filename: bash_progress-indicator_20160426.txt
http://forums.justlinux.com/showthread.php?105064-bash-How-can-I-create-a-progress-indicator

bash: How can I create a progress indicator?

     Something that has puzzled me for quite som time now is how I could create a progress indicator in
     bash.
     
     You know when you're executing a long-running command and the command prints out dots, or a
     rotating dash, to show you that it's still working.
     Does anyone have a working solution for this?
     Thanks in advance!

	... I was thinking more about something like this:
     Code:
	echo -n "Working"
	while find a file; do
	    echo -n "."
	    sleep 1
	done

	echo " Done"

     or maybe:
     Code:
	echo -n "Downloading file"
	while downloading file; do
	    echo -n "."
	    sleep 1
	done

	echo " Done"

     Both of the above examples would not work since the commands are performed and if they succeed
     they echo a dot, sleep for one second and return to the beginning of loop.
     I've also tried with a variable and a function run in the background.
     When the function is finished it would change the variable and this would cause the loop to
     finnish, but this didn't work either...

***
     I have an idea. You could run the desired program in the background. (Make its output redirected
     to /dev/null or something, if it gives any output.) Then, in the foreground, you just have a loop
     that does your progress meter. (that "sleep 1 && echo -n ." loop would work)
     The only problem would be to determine when the command is done, so you can get out of the loop.
     There might be a way built-in to bash to do that. You would probably _need_ to get some
     builtin-bash feature(s) to make it failsafe, although you could just make it work "most of the
     time" by some other means. (e.g. interpreting 'ps' output, all I can think of at the moment)
     EDIT: OK, just took a peek at the bash manpage and found this special parameter:
     Code:
       !      Expands  to  the  process ID of the most recently executed back-
              ground (asynchronous) command.

     So, you could run the command, and then run the loop to terminate when 'ps | grep "^ $!" is not
     successful (i.e. returns 1 instead of 0) I think that would work, anyway.

***     
     Thanks to all for your interest and especially thanks to Strogian for pointing me in the right
     direction!
     The final code could look something like this:
     (this doesn't really do anything useful, but it serves as an example...)
     Code:
		searchfor="xmms"                # something to search for
		tempfile="/tmp/search.log"      # temporary logfile


		echo -n "Searching for $searchfor"

		# execute the command in the background
		# send errors to /dev/null
		# send output to logfile
		find / -name $searchfor 2>/dev/null 1>>$tempfile &

		#  echo dots while command is executing
		while ps |grep $! &>/dev/null; do
			echo -n "."
			sleep 2
		done

		echo " Done"

		echo "Result:"
		cat $tempfile

		rm $tempfile


     ...and here's an example with a rotating dash instead of the dots:
     Code:
		searchfor="xmms"                # something to search for
		tempfile="/tmp/search.log"      # temporary logfile


		echo -n "Searching for $searchfor.  "

		# execute the command
		# send errors to /dev/null
		# send output to logfile
		find / -name $searchfor 2>/dev/null 1>>$tempfile &

		#  show a rotating dash while command is executing
		while ps |grep $! &>/dev/null; do
			echo -en "\b-"
			sleep 1
			echo -en "\b\\"
			sleep 1
			echo -en "\b|"
			sleep 1
			echo -en "\b/"
			sleep 1
		done

		echo -e "\bDone"

		echo "Result:"
		cat $tempfile

		rm $tempfile

