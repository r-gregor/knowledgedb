filename: bash_oreder-of-executables-started_20160513.txt
https://flossstuff.wordpress.com/2011/07/09/how-bash-shell-interprets-a-command/

How Bash Shell interprets a command ??

In this previous part of this article we learned about  types of shells . In most of the Linux distributions
, bash shell is the default shell. So we are going to discuss the working of bash shell in this article.
Fasten your seat belts and get ready for the bash ride??

Normally we think that when we type a command, shell looks for the command in all the directories defined
in the PATH environment variable. But in real it goes through the following sequence to reach the above step.
1 - Redirection
2 - Aliases
3 - Expansion
4 - Shell Function
5 - Shell Builtin
6 - Hash table
7 - PATH variable

Now lets first discuss them one by one:
1. Redirection: Consider the example given in the following snapshot:

Redirection
Here files file1, file2, file3 exists in the current directory as seen from the output of ls command but
when we redirect the output to out.txt file, the out.txt file should contain the output of ls command
i.e. file1 file2 file3 but in real it also includes out.txt. This happens because before ls is executed
redirection is done and file out.txt is created in current directory (we can’t redirect output to a file
that doesn’t exit).
2. Aliases: After redirection shell moves to aliases.

Aliases
Here I have defined alias ls=cat , now when I type ls out.txt , ls is replaced with cat and contents of
out.txt file is displayes. To make the shell ignore alias use , precede the command name with backslash
(“\”).
3. Expansion: According to bash manpage there are seven kind of expansions : brace expansion, tilde
expansion, parameter and variable expansion, command substitution, arithmetic expansion, word splitting,
and pathname expansion. Discussing all of them is beyond the scope of this article, refer to bash manpage
(man bash) for more information. If the command you typed contain any variable name, wildcards (*,? etc)
shell expands them. As an example refer to the screenshot below :

Expansion
Here $HOME becomes /home/sumit (my home directory) after expansion and file* is expanded to file1, file2,
and file3.
4. Shell Function: Like many programming languages bash allows you to define functions. A function in
bash may contain multiple commands. You can execute a function just by typing its name. Example : Look
in the figure below, here I have defined an alias by name “ls” and a function by the same name. Since
alias gets priority over function, when I first type ls and press enter /bin/ls is executed. Next I have
used backspace to ignore alias. After deleting alias using unalias command, since there is no alias left
ls corresponds to function ls.

Shell Function
5. Shell Builtin : Some commands are a part of bash code itself, they are called Shell builtin commands. They
are given priority over hash table and directories in PATH variable. Example : echo is a shell builtin
command, you can use type command to determine how a given keyboard will be interpreted.

Shell Builtin
Here its clear that echo is shell builtin command, echo also exist in /bin/ folder but if you type echo
and hit enter , it will be ignored since builtin command are  of more  priority. Notice how the output
of “type ls” changes after defining the alias by the same name. Once we delete alias and function ls,
bash searched hash table, since ls is not in hash table is look in PATH and its found in /bin/ls.
6. Hash table: The concept of hash table is similar to cashing in Linux, shell store the full path of
all the executed commands to speed things up. Now in the snapshot below I have started a new shell,
after that I execute ls command (since there is no alias or function by the same name, it executes
/bin/ls because /bin is in PATH). Then after executing echo and firefox, I have used hash command to
look at hash table. The first column “hits” display cache hits and “command” column displays full path
of the command. Because  echo is internal command its not displayed in hash table. After I execute ls
one more time its hit column changes from 1 to 2.

Hash Table
7. PATH variable: Last of all shell searches for a given command in directories listed in PATH environment
variable. You can look at the contents of PATH by typing
$echo $PATH

To add any directory to PATH variable use
$export PATH=$PATH:/path/to/dir

where /path/to/dir is the absolute path to the directory you want to add. For more information you can
read bash manage ($man bash). Also to make the changed PATH settings permanent add the line export
PATH=$PATH:/path/to/dir to .bashrc file in your home directory.
$echo “PATH=$PATH:/path/to/dir” >> /home/your_user_name/.bashrc

Note: Make sure you use >> instead of >, otherwise .bashrc file will get overwritten instead of appending.



---
http://www.cyberciti.biz/tips/how-linux-or-unix-understand-which-program-to-run-part-i.html

How Linux or UNIX Understand which program to run – PART I

This article was organically contributed by monk.

When you are logged in to a Linux server and you type a command. It is the responsibility of the shell
to interpret your command. Here I will explain how BASH shell finds out which program to run. The method
used by SHELL is straightforward but often creates confusion for new Linux user/admins/Interns.

Remember your shell deals with different commands and command line options to process your request.
For example:
1 - Internal commands aka shell builtin command (such as set)
2 - External commands (such as clear, date)
3 - Aliases (such as alias rm=’rm -i’)
4 - Command substitutions ( such as echo “Today is $(date)”)
5 - Functions
6 - Pipes ( such as cat /etc/passwd | wc -l)
7 - I/O redirection (such as cat /etc/passwd > /tmp/names)

As you can see, SHELL has to do many things before it can find the correct executable file for you. For
example, when you type single command date; SHELL will locate date command for you. Then it spawns
(forks) a new process and “execs” the date command. Please note that discussion related forks and kernel
is beyond the scope of this document (see nice explanation by Tony @ How shells call other programs). Here
you just want to understand how Linux knows which program to run.

Shell uses PATH variable
Your shell uses the environment variable called PATH to locate commands. Just type following command to
display your current PATH:
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/bin/X11:/usr/games:/usr/java/bin:/home/monk/bin

The variable PATH defines search path for commands. As you can see, PATH holds a colon-separated list
of directories in which the shell looks for commands. Returning to the date example, when you type date
command, shell will start with the directory on left (i.e. /usr/local/bin) side of PATH variable and
checks to see if there is date command executable file. If executable file found, shell will execute
date command. If command cannot be located at all in all directories then you will see command not found
error message. BASH shell use following sequence to execute command (for example purpose, we will use
date command):
1 - If there exists a shell FUNCTION date() execute it and stop.
2 - If there exists a shell builtin date command, execute it and stop
3 - If the date is neither a shell function nor a builtin then BASH searches in HASH tables. If there exist
	an entry for date command execute it and stop.
4 - Finally, if date does not exist in HASH tables, it will search using PATH variable.
5 - If above all method fails then SHELL will return error “Command not found” and always exit with 127
	status code.

However, things started to get complicated if it is a shell script, the SHELL does exactly the same thing
(as mentioned above), but the exec fails, which causes the shell to read the script and interpret it.

What is a HASH table?
A HASH table is nothing but some sort of caching mechanism to speed up things. For each command, the full
file name of the command is determined by searching the directories in $PATH variable and remembered by
shell in HASH table. Just type hash command and it will display the all remembered directory name:
$ hash

Output:
	hits    command
	5    /usr/bin/chsh
	1    /usr/bin/man
	1    /bin/ls
	
Related shell commands
To solve a command searching mysteries Linux/SHELL offers couple of commands.
type command

Tells whether command is an alias, function, buitin command or executable command file. To be frank type
command indicate how it would be interpreted if used as a command name. General syntax:
type {command-name}
$ type -a ls
Output:
ls is aliased to 'ls --color=auto'


$ type date
Output:
date is hashed (/bin/date)

$ type dirs
Output:
dirs is a shell builtin

$ type if
Output:
if is a shell keyword

$ type getip
Output:
getip is a function
	getip ()
	{
	lynx --dump 'http://localhost:81/getip'
	}
	
which command

Use to locate a command in a PATH.

$ which ls
Output:
/bin/ls

Continue reading the second part of “How Linux or UNIX Understand which program to run” series (this is
part I).

PART I : How Linux or UNIX Understand which program to run
PART II : An example: How shell Understand which program to run

---
http://www.cyberciti.biz/tips/an-example-how-shell-understand-which-program-to-run-part-ii.html

How BASH Shell Command Search Sequence Works

This article was organically contributed by monk.

HASH tables and PATH is not the first method locating your program or executable files on a Linux or
Unix-like systems. Your program can be a shell function or builtin command or an alias. Here is the
complete sequence adopted by BASH shell to execute your command:

Before a command is executed REDIRECTION is done. Then following sequence used by SHELL
1 -ALIASES
2 - Parameter expansion, command substitution, arithmetic expansion, and quote removal before being assigned
	to the variable
3 - Shell FUNCTION
4 - BUILTIN command
5 - HASH tables
6 - PATH variable
7 - If everything fails, you see command not found error message.

Examples
Try out the following simple examples to understand the SHELL sequence

a) Create your own bin directory and add to a PATH:
$ mkdir ~/bin
$ export PATH=$PATH:~/bin

b) Create a shell function called hello:
$ function hello() { echo "Hello from function()" ; }

c) Create an alias called hello:
$ alias hello='echo Hello from alias'

d) Create a shell script called hello in /home/you/bin directory (which is added to your PATH)
$ echo 'echo Hello from script' > ~/bin/hello

$ chmod +x ~/bin/hello

e) Let us test it:
Now, you have three different commands with the same name (i.e. hello). Which one will execute first? Type
the following commands at command prompt:
$ type hello
$ hello

Sample outputs:
Hello from alias
f) Remove an alias and run hello again:
$ unalias hello
$ hello

Sample outputs:
Hello from function()
g) Remove a shell function hello and run hello again:
$ unset hello

Sample outputs:
Hello for script
h) Remove a shell script hello and run hello again:
$ rm ~/bin/hello
$ hello

Sample outputs:
bash: /home/monk/bin/hello: No such file or directory

You just removed the hello script but Bash shell still looking hello program at /home/monk/bin/hello
location. What is going on here? The answer is pretty simple, “HASH table. The shell is looking for a
cached PATH entry for hello script. To verify this just type the hash command to see HASH table:
$ hash

Sample outputs:
hits    command
1    /bin/rm
1    /bin/cat
2    /usr/bin/print
3    /home/monk/bin/hello
1    /usr/bin/man

Your SHELL remembered path settings names in HASH table. There is an easy solution, just clear hash
table and see the effect again:
$ hash -r

$ hello
Sample outputs:
bash: hello: command not found

I hope this basic explanation will help to all new users out there. As a result next time you run a
command remember shell goes through quite a complicated sequence of operations to process your request.
