filename: /c/Users/gregor.redelonghi/Dropbox/ODPRTO/_TXT/log-bash-history-multif_20160606.txt
https://spin.atomicobject.com/2016/05/28/log-bash-history/

How (and Why) to Log Your Entire Bash History
For the last three and a half years, every single command I’ve run from the command line on my MacBook
Pro has been logged to a set of log files.
Uncompressed, these files take up 16 MB of disk space on my laptop. But the return I’ve gotten on that
small investment is immense. Being able to go back and find any command you’ve run in the past is so
valuable, and it’s so easy to configure, you should definitely set it up today. I’m going to share
how to do this so you can take advantage of it as well.

Bash Configuration File
You’ll need to configure an environment variable so that it’s loaded in every command line session. On my
MacBook Pro, I use the .bash_profile file. On other operating systems, the .bashrc file is an option. See
this blog post on .bash_profile vs .bashrc for more on the differences.

PROMPT_COMMAND
The Bash Prompt HOWTO describes the PROMPT_COMMAND environment variable as follows:
Bash provides an environment variable called PROMPT_COMMAND. The contents of this variable are executed
as a regular Bash command just before Bash displays a prompt.
We’re going to set the PROMPT_COMMAND variable to be something that logs the most recent line of history
to a file. To do this, add the following to your chosen Bash configuration file (.bash_profile for me):
export PROMPT_COMMAND='if [ "$(id -u)" -ne 0 ]; then echo "$(date "+%Y-%m-%d.%H:%M:%S") $(pwd) $(history1)" \
	>> ~/.logs/bash-history-$(date "+%Y-%m-%d").log; fi'
	
First, this checks to make sure we’re not root.
If that checks out, it appends a line that includes the current timestamp, the current working directory,
and the last command executed to a log file that includes the current date in the filename.
Having the commands stored in separate files like this really helps when you’re trying to find a
command you ran sometime last month, for example.
> grep -h logcat ~/.logs/bash-history-2016-04*
2016-04-01.10:18:03 /Users/me 66555  adb logcat
2016-04-01.10:19:56 /Users/me 66555  adb logcat
2016-04-01.11:01:36 /Users/me 66555  adb logcat
2016-04-05.09:50:25 /Users/me/git/android-project 66368  adb logcat
2016-04-05.13:42:54 /Users/me/git/android-project 66349  adb -s emulator-5554 logcat
2016-04-06.10:40:08 /Users/me/git/android-project 66390  adb logcat
2016-04-06.10:48:54 /Users/me/git/android-project 66342  adb logcat

Conclusion
It will only take a few seconds to update your PROMPT_COMMAND so that it logs every command to a file.
And the next time you’re trying to remember the command line options you used with find that one time
(but can’t find in your current session’s history), you’ll be able to look it up in the log files.
Oh, and if you want to know how many times you’ve done a git push in the last three and a half years,
you can look that up, too (5,585 git pushes for me)!



---
http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html

.bash_profile vs .bashrc

What is a login or non-login shell?
   When you login (type username and password) via console, either sitting at the machine, or remotely
   via ssh: .bash_profile is executed to configure your shell before the initial command prompt.

   But, if you’ve already logged into your machine and open a new terminal window (xterm) inside Gnome
   or KDE, then .bashrc is executed before the window command prompt. .bashrc is also run when you start
   a new bash instance by typing /bin/bash in a terminal.

Why two different files?
   Say, you’d like to print some lengthy diagnostic information about your machine each time you login
   (load average, memory usage, current users, etc). You only want to see it on login, so you only want
   to place this in your .bash_profile. If you put it in your .bashrc, you’d see it every time you open
   a new terminal window.

Mac OS X — an exception
   An exception to the terminal window guidelines is Mac OS X’s Terminal.app, which runs a login shell
   by default for each new terminal window, calling .bash_profile instead of .bashrc. Other GUI terminal
   emulators may do the same, but most tend not to.

Recommendation
   Most of the time you don’t want to maintain two separate config files for login and non-login shells
   — when you set a PATH, you want it to apply to both. You can fix this by sourcing .bashrc from your
   .bash_profile file, then putting PATH and common settings in .bashrc.
   To do this, add the following lines to .bash_profile:

if [ -f ~/.bashrc ]; then
   source ~/.bashrc
fi

   Now when you login to your machine from a console .bashrc will be called.

Comments

   Thanks for enlightening, I was mystified on this front ..
   — Mahendra Shelke, October 12, 2006

   Thank you - that really helped me
   — Gene, November 1, 2006

   This may give undesirable results should you run a remote (non-interactive) shell-calling program
   (e.g.: scp). It’s probably wisest to use these .rc files as they were designed to be used. Alas, I’m
   not exactly sure how they were designed to be used. :-P I use tcsh, so I copied all of my old .tcshrc
   file into .tcsh_profile and combined the calls to .cshrc and .alias into .tcsh_profile while I was at
   it. Now when I login I don’t get any of my settings, but at least scp works again. Ah "progress"!
   — Anonymous, February 4, 2007

   I’ve been calling .bashrc from .bash_profile on my remote machine for a while and have never had a
   problem with scp, but I suppose it depends on the content of those files.
   — Josh Staiger, February 4, 2007

   Thanks a lot! This issue has been gnawing me for months!
   — Ankit Agrawal, March 1, 2007

   Wouldn’t this cause problem if you run one script from the other in both of them? For example, if you
   have those 3 lines to include .bashrc in .bash_profile, then it starts executing .bashrc and then
   reaches those 3 lines in .bashrc and starts to execute .bash_profile. Doesn’t this result in some
   sort of recursive stack overflow?
   — Tom, April 16, 2007

   I absolutely despise coloring ls output. ls -F is the obviously correct solution.
   — ajv, April 16, 2007

   It’s OK to call .bashrc from .bash_profile as long as you’re careful what commands you put in
   .bashrc. However you should never call .bash_profile from .bashrc. If you really want to execute
   .bash_profile, just start bash with a ’-l’ (or a ’--login’ if you prefer) option.
   — DevilDogs, April 16, 2007

   I absolutely despise coloring ls output. ls -F is the obviously correct solution.

   Well, that’s a personal preference. But ls -F is horrible IMO: those tacked on characters make files
   look like they have wonky names, to the extent that novice users even try to type them in as part of
   the name (which has caused me tech support hassle in the past). Coloring produces no such confusion-
   you don’t get people confused because they can’t type a green filename or purple filename, wanting to
   because "that’s how it looks in the listing"...
   — Spissy Spispopd, April 16, 2007

   Certain terminal emulators can be set to execute login shells rather than regular shells. And this
   has security benefits, IIRC, with regards to things that get logged to the system log (mostly to do
   with su/sudo, I’d have to look it up).

   .bashrc is also run whenever you run a script written in bash. So if you want to have
   /usr/games/fortune spit you out a funny bit of wisdom, you should make it run in .bash_profile, NOT
   .bashrc, unless you want to see a fortune every time an sh process gets directly or indirectly
   executed by a script (I did this once, and man, compiling packages from source got a little more
   interesting at least).
   — David Warde-Farley, April 17, 2007

   You should use ~/.profile for setting environment variables or executing login scripts. That way if
   you decide to switch to another shell (or if bash is for some reason unavailable - due to a disk
   failure for example) you won’t need to move those scripts out of ~/.bash_profile - they’ll be
   appropriately executed from ~/.profile.

   Any bash-specific settings should be set in ~/.bashrc, so that they will be set even if you execute
   bash from another shell or xterm (ie if bash is not your login shell for that session).

   All of this is clearly stated in the bash man page (ie ’man bash’ at the command line), as well as
   the [4]user guide.
   — Andrew, April 17, 2007

   It’s OK to call .bashrc from .bash_profile as long as you’re careful what commands you put in
   .bashrc.

   It is not just OK - it is standard/typical behaviour as stated by the user guide.

   However you should never call .bash_profile from .bashrc.

   Especially if you’re already calling .bashrc from .bash_profile. ;-)
   — Andrew, April 17, 2007

   This finally explained why I never saw my ~/.bashrc settings when I would login interactively.

   I tested the if/then contruct in my ~/.bash_profile and, sure enough, I get my fancy PS1 settings and
   all my aliases.
   — Bill, April 17, 2007

   Why not just hardlink .bashrc to .bash_profile and have one file to edit?
   — Robert D., April 17, 2007

   I typically check .bash_profile for anything useful. If there’s anything in there I want to keep, I
   move the contents to .bashrc. I then symlink .bash_profile to .bashrc to keep things simple.

   I also used to use the `source .bashrc` method you mentioned, but in the end I found it simpler to
   have only one file to maintain.
   — hollywoodb, April 17, 2007




---
http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x264.html

4.1. PROMPT_COMMAND

   Bash provides an environment variable called PROMPT_COMMAND. The contents of this variable are
   executed as a regular Bash command just before Bash displays a prompt.
[21:55:01][giles@nikola:~] PS1="[\u@\h:\w]\$ "
[giles@nikola:~] PROMPT_COMMAND="date +%H%M"
2155
[giles@nikola:~] d
bin   mail
2156
[giles@nikola:~]

   What happened above was that I changed PS1 to no longer include the \t escape sequence (added in a
   previous section), so the time was no longer a part of the prompt. Then I used date +%H%M to display
   the time in a format I like better. But it appears on a different line than the prompt. Tidying this
   up using echo -n ... as shown below works with Bash 2.0+, but appears not to work with Bash 1.14.7:
   apparently the prompt is drawn in a different way, and the following method results in overlapping
   text.
2156
[giles@nikola:~] PROMPT_COMMAND="echo -n [$(date +%H%M)]"
[2156][giles@nikola:~]$
[2156][giles@nikola:~]$ d
bin   mail
[2157][giles@nikola:~]$ unset PROMPT_COMMAND
[giles@nikola:~]

   echo -n ... controls the output of the date command and suppresses the trailing newline, allowing the
   prompt to appear all on one line. At the end, I used the unset command to remove the PROMPT_COMMAND
   environment variable.
