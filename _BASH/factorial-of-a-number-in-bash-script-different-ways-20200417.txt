filename: factorial-of-a-number-in-bash-script-different-ways_20200417.txt
https://www.tecrobust.com/find-factorial-of-a-number-in-bash-script-different-ways/

Find Factorial of a Number in Bash Script! {Different Ways}
April 16, 2020

Shell Script to Find Factorial of a Number!!
   Find Factorial of a Number in Bash: The factorial of a number is the multiplication of all the
   integers from 1 to that number. For example, the factorial of 3 (denoted as 3!) is 1*2*3 = 6. It is a
   basic program you will learn in most of the programming languages. In this article, let us learn how
   to Find Factorial of a Number in Bash Scripting using For and While Loops.

Find Factorial - Using Bash For Loop:
   In the below bash script, we use For Loop to find the factorial of a number.
   Find Factorial - Using For Loop

<code>
   echo -n "Enter a number: "

   #read number from terminal
   read number

   #initialize factorial
   factorial=1

   #for loop
   for(( i=1; i<=number; i++ ))
   do
   factorial=$[ $factorial * $i ]done

   echo The factorial of $number is $factorial
</code>

     * The For Loop will iterate through all numbers from 1 to the entered number and stores the
       multiplication of each number in a factorial variable.

   Run the script:
$> bash fact1.sh

Output:

   The script will echo the below output:

   Enter a number: 6
   The factorial of 6 is 720

Find Factorial - Using Bash While Loop:
   In this bash script, we are using while loop and iterate it given number of times, while we combine
   the factorial in a variable.

   In the below bash script, we use While Loop to find the factorial of a number.
   Find Factorial - Using While Loop

<code>
   #read number from terminal
   read -p "Enter a number: " num

   #initialize factorial
   fact=1

   #while loop
   while [ $num -gt 1 ]do
   fact=$((fact*num))
   num=$((num-1))
   done

   echo $fact
</code>

     * fact variable stores the result of factorial.
     * num is a temporary variable to store the given number and gets decremented in the while loop.
     * After the control comes out of while loop, we have the result in fact variable.

   Run the script:
$ bash fact2.sh

Output:

   The script will echo the below output:

   Enter a number: 5
   120

Closure:
   In the above tutorial, we have explained how to Find Factorial of a Number in Bash Scripting using
   For and While Loop with practical examples. We hope that you have learned clearly how to find
   factorial of a number in Bash. Feel free to leave your valuable comments below if you have any
   questions.


---
Explanations:
--------------------------------------------------------------------------------------------------------------

    $((...)) is called arithmetic expansion, which is typical of the bash and ksh shells. This allows doing
    simple integer arithmetic, no floating point stuff though. The result of the expression replaces the
    expression, as in echo $((1+1)) would become echo 2
    
    ((...)) is referred to as arithmetic evaluation and can be used as part of
    if ((...)); then or while ((...)) ; do statements. Arithmetic expansion expansion $((..)) substitutes the
    output of the operation and can be used to assign variables as in i=$((i+1)) but cannot be used in
    conditional statements.
    
    $[...] is the old syntax for arithmetic expansion which is deprecated. See also. This was likely kept so
    that old bash scripts don't break. This didn't work in ksh93, so my guess is that this syntax is
    bash-specific. NOTE: spaces are very important here; don't confuse $[1+1] with stuff like [ $a -eq $b ].
    The [ with spaces is known as the test command, and you typically see it in decision-making parts. It is
    very different in behavior and purpose.
    
    let is a bash and ksh keyword which allows for variable creation with simple arithmetic evaluation. If you
    try to assign a string there like let a="hello world" you'll get a syntax error. Works in bash and ksh93.
    
    $(...) is command substitution, where you literally take the output of a command and assign to a variable.
    Your command here is expr, which takes positional arguments, like expr arg1 arg2 arg3, so spaces are
    important. It's sort of like a small command-line calculator for integer arithmetic, plus some true/false
    and regex type of stuff. This is a shell-neutral command.

--------------------------------------------------------------------------------------------------------------

    An if statement typically looks like
    
    if commands1
    then
       commands2
    else
       commands3
    fi
    
    The then clause is executed if the exit code of commands1 is zero. If the exit code is nonzero, then the
    else clause is executed. commands1 can be simple or complex. It can, for example, be a sequence of one or
    more pipelines separated by one of the operators ;, &, &&, or ||. The if conditions shown below are just
    special cases of commands1:
    
        if [ condition ]
    
        This is the traditional shell test command. It is available on all POSIX shells. The test command sets
        an exit code and the if statement acts accordingly. Typical tests are whether a file exists or one
        number is equal to another.
    
        if [[ condition ]]
    
        This is a new upgraded variation on test from ksh that bash and zsh also support. This test command
        also sets an exit code and the if statement acts accordingly. Among its extended features, it can test
        whether a string matches a regular expression.
    
        if ((condition))
    
        Another ksh extension that bash and zsh also support. This performs arithmetic. As the result of the
        arithmetic, an exit code is set and the if statement acts accordingly. It returns an exit code of zero
        (true) if the result of the arithmetic calculation is nonzero. Like [[...]], this form is not POSIX and
        therefore not portable.
    
        if (command)
    
        This runs command in a subshell. When command completes, it sets an exit code and the if statement acts
        accordingly.
    
        A typical reason for using a subshell like this is to limit side-effects of command if command required
        variable assignments or other changes to the shell's environment. Such changes do not remain after the
        subshell completes.
    
        if command
    
        command is executed and the if statement acts according to its exit code.
        
--------------------------------------------------------------------------------------------------------------
