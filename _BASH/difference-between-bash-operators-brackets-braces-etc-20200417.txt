filename: difference-between-bash-operators_brackets-braces-etc_20200417.txt
https://unix.stackexchange.com/questions/306111/what-is-the-difference-between-the-bash-operators-vs-vs-vs

What is the difference between the Bash operators [[ vs [ vs ( vs ((?

   I am a little bit confused on what do these operators do differently when used in bash (brackets,
   double brackets, parenthesis and double parenthesis).
[[ , [ , ( , ((

   I have seen people use them on if statements like this :
if [[condition]]

if [condition]

if ((condition))

if (condition)

***
   An if statement typically looks like
if commands1
then
   commands2
else
   commands3
fi

   The then clause is executed if the exit code of commands1 is zero. If the exit code is nonzero, then
   the else clause is executed. commands1 can be simple or complex. It can, for example, be a sequence
   of one or more pipelines separated by one of the operators ;, &, &&, or ||. The if conditions shown
   below are just special cases of commands1:
    1. if [ condition ]
       This is the traditional shell test command. It is available on all POSIX shells. The test command
       sets an exit code and the if statement acts accordingly. Typical tests are whether a file exists
       or one number is equal to another.
    2. if [[ condition ]]
       This is a new upgraded variation on test from ksh that bash and zsh also support. This test
       command also sets an exit code and the if statement acts accordingly. Among its extended
       features, it can test whether a string matches a regular expression.
    3. if ((condition))
       Another ksh extension that bash and zsh also support. This performs arithmetic. As the result of
       the arithmetic, an exit code is set and the if statement acts accordingly. It returns an exit
       code of zero (true) if the result of the arithmetic calculation is nonzero. Like [[...]], this
       form is not POSIX and therefore not portable.
    4. if (command)
       This runs command in a subshell. When command completes, it sets an exit code and the if
       statement acts accordingly.
       A typical reason for using a subshell like this is to limit side-effects of command if command
       required variable assignments or other changes to the shell's environment. Such changes do not
       remain after the subshell completes.
    5. if command
       command is executed and the if statement acts according to its exit code.

***
     * (...) parentheses indicate a subshell. What's inside them isn't an expression like in many
       other languages. It's a list of commands (just like outside parentheses). These commands are
       executed in a separate subprocess, so any redirection, assignment, etc. performed inside the
       parentheses has no effect outside the parentheses.
          + With a leading dollar sign, $(...) is a command substitution: there is a command inside
            the parentheses, and the output from the command is used as part of the command line (after
            extra expansions unless the substitution is between double quotes, but that's another
            story).
     * { ... } braces are like parentheses in that they group commands, but they only influence parsing,
       not grouping. The program x=2; { x=4; }; echo $x prints 4, whereas x=2; (x=4); echo $x prints 2.
       (Also braces being keywords need to be delimited and found in command position (hence the space
       after { and the ; before }) whereas parentheses don't. That's just a syntax quirk.)
          + With a leading dollar sign, ${VAR} is a parameter expansion, expanding to the value of a
            variable, with possible extra transformations. The ksh93 shell also supports ${ cmd;} as
            form of command substitution that doesn't spawn a subshell.
     * ((...)) double parentheses surround an arithmetic instruction, that is, a computation on
       integers, with a syntax resembling other programming languages. This syntax is mostly used for
       assignments and in conditionals. This only exists in ksh/bash/zsh, not in plain sh.
          + The same syntax is used in arithmetic expressions $((...)), which expand to the integer value
            of the expression.
     * [ ... ] single brackets surround conditional expressions. Conditional expressions are mostly
       built on operators such as -n "$variable" to test if a variable is empty and -e "$file" to
       test if a file exists. Note that you need a space around each operator (e.g. [ "$x" = "$y" ], not
       [DEL: [ "$x"="$y" ] :DEL] ), and a space or a character like ; both inside and outside the
       brackets (e.g. [ -n "$foo" ], not [DEL: [-n "$foo"] :DEL] ).
     * [[ ... ]] double brackets are an alternate form of conditional expressions in ksh/bash/zsh with a
       few additional features, for example you can write [[ -L $file && -f $file ]] to test if a file
       is a symbolic link to a regular file whereas single brackets require [ -L "$file" ] && [ -f
       "$file" ]. See Why does parameter expansion with spaces without quotes works inside double
       brackets [[ but not single brackets [? for more on this topic.

   In the shell, every command is a conditional command: every command has a return status which is
   either 0 indicating success or an integer between 1 and 255 (and potentially more in some shells)
   indicating failure. The [ ... ] command (or [[ ... ]] syntax form) is a particular command which can also
   be spelled test ... and succeeds when a file exists, or when a string is non-empty, or when a number is
   smaller than another, etc. The ((...)) syntax form succeeds when a number is nonzero. Here are a few
   examples of conditionals in a shell script:
     * Test if myfile contains the string hello:
if grep -q hello myfile; then ...

     * If mydir is a directory, change to it and do stuff:
if cd mydir; then
  echo "Creating mydir/myfile"
  echo 'some content' >myfile
else
  echo >&2 "Fatal error. This script requires mydir to exist."
fi

     * Test if there is a file called myfile in the current directory:
if [ -e myfile ]; then ...

     * The same, but also including dangling symbolic links:
if [ -e myfile ] || [ -L myfile ]; then ...

     * Test if the value of x (which is assumed to be numeric) is at least 2, portably:
if [ "$x" -ge 2 ]; then ...

     * Test if the value of x (which is assumed to be numeric) is at least 2, in bash/ksh/zsh:
if ((x >= 2)); then ...

***
     (list) list is executed in a subshell environment (see COMMAND EXECUTION ENVIRONMENT below).
     Variable assignments and builtin commands that affect the shell's environment do not remain in
     effect after the command completes. The return status is the exit status of list.

   In other words, you make sure that whatever happens in 'list' (like a cd) has no effect outside of
   the ( and ). The only thing that will leak is the exit code of the last command or with set -e the
   first command that generates an error (other than a few such as if, while, etc.)

     ((expression)) The expression is evaluated according to the rules described below under ARITHMETIC
     EVALUATION. If the value of the expression is non-zero, the return status is 0; otherwise the
     return status is 1. This is exactly equivalent to let "expression".

   This is a bash extension allowing you to do math. This is somewhat similar to using expr without all
   the limitations of expr (such as having spaces everywhere, escaping *, etc.)

     [[ expression ]] Return a status of 0 or 1 depending on the evaluation of the conditional
     expression expression. Expressions are composed of the primaries described below under CONDITIONAL
     EXPRESSIONS. Word splitting and pathname expansion are not performed on the words between the [[
     and ]]; tilde expansion, parameter and variable expansion, arithmetic expansion, command
     substitution, process substitution, and quote removal are performed. Conditional operators such as
     -f must be unquoted to be recognized as primaries.

     When used with [[, the < and > operators sort lexicographically using the current locale.

   This offers an advanced test to compare strings, numbers, and files a bit like test offers, but more
   powerful.

     [ expr ] Return a status of 0 (true) or 1 (false) depending on the evaluation of the conditional
     expression expr. Each operator and oper and must be a separate argument. Expressions are composed
     of the primaries described above under CONDITIONAL EXPRESSIONS. test does not accept any options,
     nor does it accept and ignore an argument of -- as signifying the end of options.

     [...]

   This one calls test. Actually, in the old days, [ was a symbolic link to test. It works the same way
   and you have the same limitations. Since a binary knows the name with which it was started, the test
   program can parse parameters until it finds a parameter ]. Fun Unix tricks.

   Note that in case of bash, [ and test are built-in functions (as mentioned in a comment), yet pretty
   much the same limitations apply.

***
   Some differences on Bash 4.3.11:
     * POSIX vs Bash extension:
          + [ is POSIX
          + [[ is a Bash extensionÂ¹ documented at:
            https://www.gnu.org/software/bash/manual/bash.html#Conditional-Constructs
     * regular command vs magic
          + [ is just a regular command with a weird name.
            ] is just an argument of [ that prevents further arguments from being used.
            Ubuntu 16.04 actually has an executable for it at /usr/bin/[ provided by coreutils, but the
            bash built-in version takes precedence.
            Nothing is altered in the way that Bash parses the command.
            In particular, < is redirection, && and || concatenate multiple commands, ( ) generates
            subshells unless escaped by \, and word expansion happens as usual.
          + [[ X ]] is a single construct that makes X be parsed magically. <, &&, || and () are treated
            specially, and word splitting rules are different.
            There are also further differences like = and =~.
            In Bashese: [ is a built-in command, and [[ is a keyword:
            https://askubuntu.com/questions/445749/whats-the-difference-between-shell-builtin-and-sh
            ell-keyword
     * <
          + [[ a < b ]]: lexicographical comparison
          + [ a \< b ]: Same as above. \ required or else does redirection like for any other command.
            Bash extension.
          + expr a \< b > /dev/null: POSIX equivalentÂ², see:
            https://stackoverflow.com/questions/21294867/how-to-test-strings-for-lexicographic-less-
            than-or-equal-in-bash/52707989#52707989
     * && and ||
          + [[ a = a && b = b ]]: true, logical and
          + [ a = a && b = b ]: syntax error, && parsed as an AND command separator cmd1 && cmd2
          + [ a = a -a b = b ]: equivalent, but deprecated by POSIXÂ³
          + [ a = a ] && [ b = b ]: POSIX and reliable equivalent
     * (
          + [[ (a = a || a = b) && a = b ]]: false
          + [ ( a = a ) ]: syntax error, () is interpreted as a subshell
          + [ \( a = a -o a = b \) -a a = b ]: equivalent, but () is deprecated by POSIX
          + { [ a = a ] || [ a = b ]; } && [ a = b ] POSIX equivalent^5
     * word splitting and filename generation upon expansions (split+glob)
          + x='a b'; [[ $x = 'a b' ]]: true, quotes not needed
          + x='a b'; [ $x = 'a b' ]: syntax error, expands to [ a b = 'a b' ]
          + x='*'; [ $x = 'a b' ]: syntax error if there's more than one file in the current directory.
          + x='a b'; [ "$x" = 'a b' ]: POSIX equivalent
     * =
          + [[ ab = a? ]]: true, because it does pattern matching (* ? [ are magic). Does not glob
            expand to files in current directory.
          + [ ab = a? ]: a? glob expands. So may be true or false depending on the files in the current
            directory.
          + [ ab = a\? ]: false, not glob expansion
          + = and == are the same in both [ and [[, but == is a Bash extension.
          + case ab in (a?) echo match; esac: POSIX equivalent
          + [[ ab =~ 'ab?' ]]: false^4, loses magic with ''
          + [[ ab? =~ 'ab?' ]]: true
     * =~
          + [[ ab =~ ab? ]]: true, POSIX extended regular expression match, ? does not glob expand
          + [ a =~ a ]: syntax error. No bash equivalent.
          + printf 'ab\n' | grep -Eq 'ab?': POSIX equivalent (single line data only)
          + awk 'BEGIN{exit !(ARGV[1] ~ ARGV[2])}' ab 'ab?': POSIX equivalent.

   Recommendation: always use [].

   There are POSIX equivalents for every [[ ]] construct I've seen.

   If you use [[ ]] you:
     * lose portability
     * force the reader to learn the intricacies of another bash extension. [ is just a regular command
       with a weird name, no special semantics are involved.
     ________________________________________________________________________________________________

   ^Â¹ Inspired from the equivalent [[...]] construct in the Korn shell

   ^Â² but fails for some values of a or b (like + or index) and does numeric comparison if a and b look
   like decimal integers. expr "x$a" '<' "x$b" works around both.

   ^Â³ and also fails for some values of a or b like ! or (.

   ^^4 in bash 3.2 and above and provided compatibility to bash 3.1 is not enabled (like with
   BASH_COMPAT=3.1)

   ^^5 though the grouping (here with the {...;} command group instead of (...) which would run an
   unnecessary subshell) is not necessary as the || and && shell operators (as opposed to the || and &&
   [[...]] operators or the -o/-a [ operators) have equal precedence.
   So [ a = a ] || [ a = b ] && [ a =  b ] would be equivalent.
   


---
