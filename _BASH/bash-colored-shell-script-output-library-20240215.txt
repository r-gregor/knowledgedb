filename: bash_colored-shell-script-output-library_20240215.txt
https://copyprogramming.com/howto/colored-shell-script-output-library

Library for Generating Colorful Output in Shell Scripts
2023-04-12

One possible solution to force color output from a particular command or program is to use Bash functions,
such as the one described in an article titled "How to turn on or off colors in bash" by NIX CRAFT on
November 4, 2006. This solution applies to the Bash shell. Another issue that someone may encounter is how
to change the color of a bar based on the number of true conditions out of 10. For example, if 3 conditions
are true, the bar color should be red; if 5 conditions are true, the bar color should be blue; and if 9
conditions are true, the bar color should be black. The coding for this can involve if statements, but
alternative approaches may also be possible.

Question:
I am in search of a conclusive method to construct shell scripts that can generates colored output effectively.

Regrettably, I'm struggling to discover a suitable library or effective method to accomplish this task.
Although I've come across many useful yet straightforward examples similar to this, the most extensive
manual I've stumbled upon so far is this one.

My main concerns/observations:
Ensuring safety is essential. It is important to prevent producing inferior output since not all terminals
or pagers/editors such as less, more, vim, support colored or styled output including bold, italic, and blinking.
The requirement is for simplicity and readability. Direct utilization of ANSI escape codes is an awful way
to achieve this goal. Example: echo -e '[32mthis is ugly and [1;32mvery green[0m'
I require complete access to the color palette and styles for both foreground and background text. However,
I noticed that many of the available examples only utilize basic colors for the foreground text.
It's better to stick with basic commands such as those found in bash or other simple shells, as well as
commonly used commands available on most operating systems. For example, while I could use the colorize
command, it would require both the installation of the ruby language (which is manageable) and the colorize
gem (which is not).
While Tput is capable of efficiently manipulating the shell cursor, it may be considered less versatile than
other options available.

This gist aims to achieve terminal control and output formatting, which I researched before writing. Up
until now, it has performed satisfactorily.

Solution 1:

This altered code excerpt from my dotfiles should accomplish your desired outcome.

RCol='\e[0m'     # Text Reset
# Regular       Bold             Underline        High Intensity   BoldHigh Intens   Background       High Intensity Backgrounds
Bla='\e[0;30m'; BBla='\e[1;30m'; UBla='\e[4;30m'; IBla='\e[0;90m'; BIBla='\e[1;90m'; On_Bla='\e[40m'; On_IBla='\e[0;100m';
Red='\e[0;31m'; BRed='\e[1;31m'; URed='\e[4;31m'; IRed='\e[0;91m'; BIRed='\e[1;91m'; On_Red='\e[41m'; On_IRed='\e[0;101m';
Gre='\e[0;32m'; BGre='\e[1;32m'; UGre='\e[4;32m'; IGre='\e[0;92m'; BIGre='\e[1;92m'; On_Gre='\e[42m'; On_IGre='\e[0;102m';
Yel='\e[0;33m'; BYel='\e[1;33m'; UYel='\e[4;33m'; IYel='\e[0;93m'; BIYel='\e[1;93m'; On_Yel='\e[43m'; On_IYel='\e[0;103m';
Blu='\e[0;34m'; BBlu='\e[1;34m'; UBlu='\e[4;34m'; IBlu='\e[0;94m'; BIBlu='\e[1;94m'; On_Blu='\e[44m'; On_IBlu='\e[0;104m';
Pur='\e[0;35m'; BPur='\e[1;35m'; UPur='\e[4;35m'; IPur='\e[0;95m'; BIPur='\e[1;95m'; On_Pur='\e[45m'; On_IPur='\e[0;105m';
Cya='\e[0;36m'; BCya='\e[1;36m'; UCya='\e[4;36m'; ICya='\e[0;96m'; BICya='\e[1;96m'; On_Cya='\e[46m'; On_ICya='\e[0;106m';
Whi='\e[0;37m'; BWhi='\e[1;37m'; UWhi='\e[4;37m'; IWhi='\e[0;97m'; BIWhi='\e[1;97m'; On_Whi='\e[47m'; On_IWhi='\e[0;107m';

Then you can just echo -e "${Blu}blue ${Red}red ${RCol}etc...."

Solution 2:

echo -e "\033[33;31m Color Text" - red
echo -e "\033[33;32m Color Text" - green
echo -e "\033[33;33m Color Text" - yellow
echo -e "\033[33;34m Color Text" - blue
echo -e "\033[33;35m Color Text" - Magenta
echo -e "\033[33;30m Color Text" - Gray
echo -e "\033[33;36m Color Text" - Cyan

Ezoic Learn how to display colored text in Linux shell by visiting a blog post on techietent from March 2013.

Solution 3:

Ezoic Drawing inspiration from demure's list, I applied the DRY principle to it and made a few changes. I
opted to switch from \ \ \ \ \ \e\ \ \ \ to the hexadecimal \ \ \ \ \ \x1B\ \ \ \ as the former is not
compatible with OS X's Terminal.app since Snow Leopard. As a result, this is what I created.

## Colours and font styles
## Syntax: echo -e "${FOREGROUND_COLOUR}${BACKGROUND_COLOUR}${STYLE}Hello world!${RESET_ALL}"
# Escape sequence and resets
ESC_SEQ="\x1b["
RESET_ALL="${ESC_SEQ}0m"
RESET_BOLD="${ESC_SEQ}21m"
RESET_UL="${ESC_SEQ}24m"
# Foreground colours
FG_BLACK="${ESC_SEQ}30;"
FG_RED="${ESC_SEQ}31;"
FG_GREEN="${ESC_SEQ}32;"
FG_YELLOW="${ESC_SEQ}33;"
FG_BLUE="${ESC_SEQ}34;"
FG_MAGENTA="${ESC_SEQ}35;"
FG_CYAN="${ESC_SEQ}36;"
FG_WHITE="${ESC_SEQ}37;"
FG_BR_BLACK="${ESC_SEQ}90;"
FG_BR_RED="${ESC_SEQ}91;"
FG_BR_GREEN="${ESC_SEQ}92;"
FG_BR_YELLOW="${ESC_SEQ}93;"
FG_BR_BLUE="${ESC_SEQ}94;"
FG_BR_MAGENTA="${ESC_SEQ}95;"
FG_BR_CYAN="${ESC_SEQ}96;"
FG_BR_WHITE="${ESC_SEQ}97;"
# Background colours (optional)
BG_BLACK="40;"
BG_RED="41;"
BG_GREEN="42;"
BG_YELLOW="43;"
BG_BLUE="44;"
BG_MAGENTA="45;"
BG_CYAN="46;"
BG_WHITE="47;"
# Font styles
FS_REG="0m"
FS_BOLD="1m"
FS_UL="4m"

The BR_ hues are classified as vibrant or high-intensity colors. This approach allows for their seamless
integration with other font types, such as underlined bright white.

To save this for future reference, I have created a gist that you can bookmark at
https://gist.github.com/ian128K/39a490e5aa8d3bb77a8b.

Solution 4:

The capabilities of tput go beyond what is stated on the linked page. tput simply produces the characters
that are specified in your echo statement, using the information provided by the termcap/terminfo database
of the current terminal. Here are a few illustrations:

$ tput setaf 5 | hexdump -C
00000000  1b 5b 33 35 6d                                    |.[35m|
$ tput setaf 17 | hexdump -C
00000000  1b 5b 33 38 3b 35 3b 31  37 6d                    |.[38;5;17m|
$ tput reset | hexdump -C
00000000  1b 63 1b 5b 3f 31 30 30  30 6c 1b 5b 3f 32 35 68  |.c.[?1000l.[?25h|

You can use the portable method of creating your gist, which involves using the variable defined in your
gist in the same way.

black=$(tput setaf 0)

Pine Script Multiple Conditions to Change Bar Colors, 1 Answer. that corresponds to your condition
requirement. Then sum the number of true conditions and color the bar depending your criteria

How to enable colored output from shell command wrapped in a script?

Question:
Suppose I use the grep command that generates results with a flag -r . If I include this command in a shell
script and run it, the output will not retain the original color-coding effect.

Is it possible to display the output of the shell script on the terminal without having to use tput or
performing color coding manually, while still maintaining the same color-coding format?

Solution 1:

To generate color output from the code identified as grep , use the following method:

grep --color=always

From man grep :

   --color[=WHEN], --colour[=WHEN]
          Surround   the   matched   (non-empty)   strings,
          matching lines, context lines, file  names,  line
          numbers, byte offsets, and separators (for fields
          and  groups  of  context   lines)   with   escape
          sequences   to  display  them  in  color  on  the
          terminal.   The  colors  are   defined   by   the
          environment variable GREP_COLORS.  The deprecated
          environment   variable   GREP_COLOR   is    still
          supported,   but   its   setting  does  not  have
          priority.  WHEN is never, always, or auto.

Solution 2:

Employ Bash functions such as the following one.

make()
{
  pathpat="(/[^/]*)+:[0-9]+"
  ccred=$(echo -e "\033[0;31m")
  ccyellow=$(echo -e "\033[0;33m")
  ccend=$(echo -e "\033[0m")
  /usr/bin/make "$@" 2>&1 | sed -E -e "/[Ee]rror[: ]/ s%$pathpat%$ccred&$ccend%g" -e "/[Ww]arning[: ]/ s%$pathpat%$ccyellow&$ccend%g"
  return ${PIPESTATUS[0]}
}

Enabling or disabling colors in Bash
One comment was made on November 4, 2006, and the information was last updated on the same day by NIX CRAFT.

in BASH SHELL

What is the method to enable or disable color coding for file names in bash shell?

Many of the latest Linux distributions provide an alias, referred to as defines colors , for your file.
Nonetheless, it is the ls command that is in charge of exhibiting colors on the screen for files,
directories and other entities.

The ls command does not differentiate file types based on color unless the user specifies the use of colors
with the --color option.

Task: Turn off colors

Type the following command

$> ls --color=none

You can eliminate an alias by using the "unalias" command.

$> unalias ls

Task: Turn on colors

Use any of the following command:

$> ls --color=auto
$> ls --color=tty

The ~/.bash_profile or ~/.bashrc file allows you to modify the ls alias by adding or removing it.

These Bash commands are performing efficiently.

handy tput commands
tput bold          - Bold effect
tput rev           - Display inverse colors
tput sgr0          - Reset everything
tput setaf {CODE}  - Set foreground color, see color {CODE} below
tput setab {CODE}  - Set background color, see color {CODE} below

Colors {code} code for tput command
-----------------------
Color {code}    Color
-----------------------
0               Black
1               Red
2               Green
3               Yellow
4               Blue
5               Magenta
6               Cyan
7               White
-----------------------

Pine script - PineScript - Setting up Color Inputs for, You actually don't need any user input for the color
because you can easily change the color via style settings of the indicator.


---

