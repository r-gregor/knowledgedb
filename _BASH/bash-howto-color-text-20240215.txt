filename: bash_howto-color-text_20240215.txt
https://copyprogramming.com/howto/how-to-do-color-text-in-bash-script

Creating Colored Text in Bash Scripts: A Guide could be a possible
Author: Amanda Cardona Date: 2023-04-06

By using ANSI color escape codes, we can add color to output strings. The ANSI standard specifies certain
color codes:
------------------------------------------------------
Color           Foreground Code        Background Code
------------------------------------------------------
Black           30                     40
Red             31                     41
Green           32                     42
Yellow          33                     43
Blue            34                     44
Magenta         35                     45
Cyan            36                     46
Light Gray      37                     47
Gray            90                     100
Light Red       91                     101
Light Green     92                     102
Light Yellow    93                     103
Light Blue      94                     104
Light Magenta   95                     105
Light Cyan      96                     106
White           97                     107
------------------------------------------------------

To change the color of the text, what we want is the foreground code.

How to change the output color of echo in Linux

Solution 1:

Utilizing the following codes in ANSI escape is possible:

Black        0;30     Dark Gray     1;30
Red          0;31     Light Red     1;31
Green        0;32     Light Green   1;32
Brown/Orange 0;33     Yellow        1;33
Blue         0;34     Light Blue    1;34
Purple       0;35     Light Purple  1;35
Cyan         0;36     Light Cyan    1;36
Light Gray   0;37     White         1;37

Use the following in your script as such:

#    .---------- constant part!
#    vvvv vvvv-- the code from above
RED='\033[0;31m'
NC='\033[0m' # No Color
printf "I ${RED}love${NC} Stack Overflow\n"

It produces the text love in the color red.

In accordance with @james-lim's comment, when utilizing the echo command, ensure that you include the -e
flag to permit the use of backslash escapes.

# Continued from above example
echo -e "I ${RED}love${NC} Stack Overflow"

Avoid inserting " " while utilizing echo unless you intend to include an extra vacant line.

Solution 2:
some variables that you can use:

# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

the escape character in bash , hex and octal respectively:

|       | bash  | hex     | octal   | NOTE                         |
|-------+-------+---------+---------+------------------------------|
| start | \e    | \x1b    | \033    |                              |
| start | \E    | \x1B    | -       | x cannot be capital          |
| end   | \e[0m | \x1b[0m | \033[0m |                              |
| end   | \e[m  | \x1b[m  | \033[m  | 0 is appended if you omit it |
|       |       |         |         |                              |

short example:

| color       | bash         | hex            | octal          | NOTE                                  |
|-------------+--------------+----------------+----------------+---------------------------------------|
| start green | \e[32m       | \x1b[32m       | \033[32m       | m is NOT optional                     |
| reset       | \e[0m        | \1xb[0m        | \033[om        | o is optional (do it as best practice |
|             |              |                |                |                                       |

bash exception:

If you plan on utilizing these codes within your customized bash variables.
    PS0
    PS1
    PS2 (= this is for prompting)
    PS4

It is recommended to include additional escape characters to ensure proper interpretation by bash. Failure
to do so may result in issues when utilizing Ctrl + r during history searches.

exception rule for bash

To properly format ANSI codes, insert \[ at the beginning and \] at the end of each code. For instance,
[32mThis is in green[0m is used regularly, whereas \[[32m\]This is in green\[[m\] is used for PS0/1/2/4.

The code \[ indicates the beginning of a series of non-printable characters, while \] denotes the end of
such a sequence.

To aid in memorization, consider using the hashtag \[\] and inserting your ANSI code between the hashtags.

    \[start-ANSI-code\]
    \[end-ANSI-code\]

type of color sequence:
    3/4 bit
    8 bit
    24 bit

Prior to exploring these colors, it's important to familiarize yourself with the four modes associated with
these codes.

1. color-mode
It alters the color style and not the text style, such as increasing or decreasing the brightness of the color.

    0 reset
    1; less weighty than the average.
    Code 2; indicates that the shade is deeper than the usual.

The support for this mode is limited and is exclusively available on Gnome-Terminal.

2. text-mode
The purpose of this mode is to change the text's style, rather than its color.
    3; italic
    4; underline
    5; blinking (slow)
    6; blinking (fast)
    7; reverse
    8; hide
    9; cross-out

Some applications offer support for certain features while others do not. KDE-Konsole, for instance,
supports 5; whereas Gnome-Terminal does not. On the other hand, Gnome provides support for 8; , but KDE does
not.

3. foreground mode
The purpose of this mode is to add color to the foreground.

4. background mode
This mode is intended to add color to the background.

The table presented below provides a summary of the ANSI-color version that uses 3/4 bits.
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
| color-mode | octal    | hex     | bash  | description      | example (= in octal)         | NOTE                                 |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
|          0 | \033[0m  | \x1b[0m | \e[0m | reset any affect | echo -e "\033[0m"            | 0m equals to m                       |
|          1 | \033[1m  |         |       | light (= bright) | echo -e "\033[1m####\033[m"  | -                                    |
|          2 | \033[2m  |         |       | dark (= fade)    | echo -e "\033[2m####\033[m"  | -                                    |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
|  text-mode | ~        |         |       | ~                | ~                            | ~                                    |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
|          3 | \033[3m  |         |       | italic           | echo -e "\033[3m####\033[m"  |                                      |
|          4 | \033[4m  |         |       | underline        | echo -e "\033[4m####\033[m"  |                                      |
|          5 | \033[5m  |         |       | blink (slow)     | echo -e "\033[3m####\033[m"  |                                      |
|          6 | \033[6m  |         |       | blink (fast)     | ?                            | not wildly support                   |
|          7 | \003[7m  |         |       | reverse          | echo -e "\033[7m####\033[m"  | it affects the background/foreground |
|          8 | \033[8m  |         |       | hide             | echo -e "\033[8m####\033[m"  | it affects the background/foreground |
|          9 | \033[9m  |         |       | cross            | echo -e "\033[9m####\033[m"  |                                      |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
| foreground | ~        |         |       | ~                | ~                            | ~                                    |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
|         30 | \033[30m |         |       | black            | echo -e "\033[30m####\033[m" |                                      |
|         31 | \033[31m |         |       | red              | echo -e "\033[31m####\033[m" |                                      |
|         32 | \033[32m |         |       | green            | echo -e "\033[32m####\033[m" |                                      |
|         33 | \033[33m |         |       | yellow           | echo -e "\033[33m####\033[m" |                                      |
|         34 | \033[34m |         |       | blue             | echo -e "\033[34m####\033[m" |                                      |
|         35 | \033[35m |         |       | purple           | echo -e "\033[35m####\033[m" | real name: magenta = reddish-purple  |
|         36 | \033[36m |         |       | cyan             | echo -e "\033[36m####\033[m" |                                      |
|         37 | \033[37m |         |       | white            | echo -e "\033[37m####\033[m" |                                      |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
|         38 | 8/24     |                    This is for special use of 8-bit or 24-bit                                            |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
| background | ~        |         |       | ~                | ~                            | ~                                    |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
|         40 | \033[40m |         |       | black            | echo -e "\033[40m####\033[m" |                                      |
|         41 | \033[41m |         |       | red              | echo -e "\033[41m####\033[m" |                                      |
|         42 | \033[42m |         |       | green            | echo -e "\033[42m####\033[m" |                                      |
|         43 | \033[43m |         |       | yellow           | echo -e "\033[43m####\033[m" |                                      |
|         44 | \033[44m |         |       | blue             | echo -e "\033[44m####\033[m" |                                      |
|         45 | \033[45m |         |       | purple           | echo -e "\033[45m####\033[m" | real name: magenta = reddish-purple  |
|         46 | \033[46m |         |       | cyan             | echo -e "\033[46m####\033[m" |                                      |
|         47 | \033[47m |         |       | white            | echo -e "\033[47m####\033[m" |                                      |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|
|         48 | 8/24     |                    This is for special use of 8-bit or 24-bit                                            |                                                                                       |
|------------+----------+---------+-------+------------------+------------------------------+--------------------------------------|

Displayed in the table below is a brief overview of the ANSI-color's 8-bit version.
|------------+-----------+-----------+---------+------------------+------------------------------------+-------------------------|
| foreground | octal     | hex       | bash    | description      | example                            | NOTE                    |
|------------+-----------+-----------+---------+------------------+------------------------------------+-------------------------|
|        0-7 | \033[38;5 | \x1b[38;5 | \e[38;5 | standard. normal | echo -e '\033[38;5;1m####\033[m'   |                         |
|       8-15 |           |           |         | standard. light  | echo -e '\033[38;5;9m####\033[m'   |                         |
|     16-231 |           |           |         | more resolution  | echo -e '\033[38;5;45m####\033[m'  | has no specific pattern |
|    232-255 |           |           |         |                  | echo -e '\033[38;5;242m####\033[m' | from black to white     |
|------------+-----------+-----------+---------+------------------+------------------------------------+-------------------------|
| foreground | octal     | hex       | bash    | description      | example                            | NOTE                    |
|------------+-----------+-----------+---------+------------------+------------------------------------+-------------------------|
|        0-7 |           |           |         | standard. normal | echo -e '\033[48;5;1m####\033[m'   |                         |
|       8-15 |           |           |         | standard. light  | echo -e '\033[48;5;9m####\033[m'   |                         |
|     16-231 |           |           |         | more resolution  | echo -e '\033[48;5;45m####\033[m'  |                         |
|    232-255 |           |           |         |                  | echo -e '\033[48;5;242m####\033[m' | from black to white     |
|------------+-----------+-----------+---------+------------------+------------------------------------+-------------------------|

Presenting the rapid 8-bit test: \ \ \ \ \ for\ code\ in\ \{0\.\.255\};\ do\ echo\ \-e\ "\e\[38;05;\$\{code\}m\ \$code:\ Test";\ done\ \ \ \

Displayed in the table below is a summary of the ANSI-color version that consists of 24 bits.
|------------+-----------+-----------+---------+-------------+------------------------------------------+-----------------|
| foreground | octal     | hex       | bash    | description | example                                  | NOTE            |
|------------+-----------+-----------+---------+-------------+------------------------------------------+-----------------|
|      0-255 | \033[38;2 | \x1b[38;2 | \e[38;2 | R = red     | echo -e '\033[38;2;255;0;02m####\033[m'  | R=255, G=0, B=0 |
|      0-255 | \033[38;2 | \x1b[38;2 | \e[38;2 | G = green   | echo -e '\033[38;2;;0;255;02m####\033[m' | R=0, G=255, B=0 |
|      0-255 | \033[38;2 | \x1b[38;2 | \e[38;2 | B = blue    | echo -e '\033[38;2;0;0;2552m####\033[m'  | R=0, G=0, B=255 |
|------------+-----------+-----------+---------+-------------+------------------------------------------+-----------------|
| background | octal     | hex       | bash    | description | example                                  | NOTE            |
|------------+-----------+-----------+---------+-------------+------------------------------------------+-----------------|
|      0-255 | \033[48;2 | \x1b[48;2 | \e[48;2 | R = red     | echo -e '\033[48;2;255;0;02m####\033[m'  | R=255, G=0, B=0 |
|      0-255 | \033[48;2 | \x1b[48;2 | \e[48;2 | G = green   | echo -e '\033[48;2;;0;255;02m####\033[m' | R=0, G=255, B=0 |
|      0-255 | \033[48;2 | \x1b[48;2 | \e[48;2 | B = blue    | echo -e '\033[48;2;0;0;2552m####\033[m'  | R=0, G=0, B=255 |
|------------+-----------+-----------+---------+-------------+------------------------------------------+-----------------|


Tips and Tricks for Advanced Users and Programmers:
Can we use these codes in a programming language?

It is possible as I have expertise in multiple programming languages such as bash, C, C++, D, Perl, and Python.
Do they slow down the speed of a program?

I think, NO.

Can we use these on Windows?

If you use gcc to compile the code, 3/4-bit compatibility will be ensured and you can view some Win-7 screen
shots.

How to calculate the length of code?

[ = 2, other parts 1

Where can we use these codes?
Locations offering an interpreter for tty are available almost anywhere, including xterm , gnome-terminal ,
kde-terminal , mysql-client-CLI , and beyond. For instance, Perl can be utilized to add color to your output
when working with MySQL.

#!/usr/bin/perl -n
print "\033[1m\033[31m$1\033[36m$2\033[32m$3\033[33m$4\033[m" while /([|+-]+)|([0-9]+)|([a-zA-Z_]+)|([^\w])/g;

Save the following code as pcc (Perl Colorize Character) and move the file to a legitimate location named PATH.
After that, you can use the code anywhere you wish.

ls | pcc
df | pcc

To access mysql , begin by registering it for pager . Afterwards, attempt to enter.

[user2:db2] pager pcc
PAGER set to 'pcc'
[user2:db2] select * from table-name;

This software is not capable of managing Unicode.

Do these codes only do colorizing?

They are not limited in their abilities and can perform a variety of engaging tasks. Experiment with the
following suggestions:

echo -e '\033[2K'  # clear the screen and do not move the position

or:

echo -e '\033[2J\033[u' # clear the screen and reset the position

Many novice users aim to erase their screen by deploying system( "clear" ) . As an alternative to calling
system(3) , you can make use of this method.

Are they available in Unicode?

Yes. \ \ \ \ \ \u001b\ \ \ \

Which version of these colors is preferable?

3/4-bit is easy to use, but 24-bit is more accurate and aesthetically pleasing. If you're not familiar with
HTML, here's a quick guide: 24 bits are divided into 3 groups of 8 bits, with each group representing a
specific color. 1..8 stands for 9..16 , 17..24 represents the other two colors. In HTML, #FF0000
signifies 255;0;0 , and #00FF00 represents 0;255;0 . So, to recap - if you want a specific color, you can
combine it with these three 8-bit values.

The following sources were referenced: Wikipedia, tldp.org, misc.flogisoft.com, and several other blogs and
web pages whose names I cannot recall.

Solution 3:
Ignacio's answer suggests using the impressive tput command, which can generate terminal control codes for a
variety of purposes.

Usage
Later in the text, there will be a discussion of particular sub-commands identified by the code tput .

Direct
Incorporate tput into a series of directives.

tput setaf 1; echo "this is red text"

Instead of using && , opt for ; to ensure the text still appears even when tput generates errors.

Shell variables
An alternative approach would be to utilize variables in the shell.

red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`
echo "${red}red text ${green}green text${reset}"

The character sequences generated by tput have a specific interpretation in the terminal and are not displayed.
However, it is important to note that they can still be utilized as inputs by programs other than the
terminal or saved into files.

Command substitution
To streamline your workflow, you can use command substitution to incorporate the output of tput into your
echo strings, rather than inserting them separately.

echo "$(tput setaf 1)Red text $(tput setab 7)and white background$(tput sgr 0)"

Example
On Ubuntu, this is the output generated by the aforementioned command.

Foreground & background colour commands
tput setab [1-7] # Set the background colour using ANSI escape
tput setaf [1-7] # Set the foreground colour using ANSI escape

Colours are as follows:
------------------------------------
Num  Colour    #define         R G B
------------------------------------
0    black     COLOR_BLACK     0,0,0
1    red       COLOR_RED       1,0,0
2    green     COLOR_GREEN     0,1,0
3    yellow    COLOR_YELLOW    1,1,0
4    blue      COLOR_BLUE      0,0,1
5    magenta   COLOR_MAGENTA   1,0,1
6    cyan      COLOR_CYAN      0,1,1
7    white     COLOR_WHITE     1,1,1
------------------------------------

The color setting functions also have non-ANSI versions, using setb and setf instead of setab and setaf,
respectively. These versions use different numbers that are not specified here.

Text mode commands
--------------------------------------------
tput bold    # Select bold mode
tput dim     # Select dim (half-bright) mode
tput smul    # Enable underline mode
tput rmul    # Disable underline mode
tput rev     # Turn on reverse video mode
tput smso    # Enter standout (bold) mode
tput rmso    # Exit standout mode

Cursor movement commands
------------------------------------------------------------------
tput cup Y X # Move cursor to screen postion X,Y (top left is 0,0)
tput cuf N   # Move N characters forward (right)
tput cub N   # Move N characters back (left)
tput cuu N   # Move N lines up
tput ll      # Move to last line, first column (if no cup)
tput sc      # Save the cursor position
tput rc      # Restore the cursor position
tput lines   # Output the number of lines of the terminal
tput cols    # Output the number of columns of the terminal

Clear and insert commands
----------------------------------------------------------------
tput ech N   # Erase N characters
tput clear   # Clear screen and move the cursor to 0,0
tput el 1    # Clear to beginning of line
tput el      # Clear to end of line
tput ed      # Clear to end of screen
tput ich N   # Insert N characters (moves rest of line forward!)
tput il N    # Insert N lines

Other commands
----------------------------------------------------------
tput sgr0    # Reset text format to the terminal's default
tput bel     # Play a bell

The compiz wobbly windows feature includes a command, bel , that causes the terminal to briefly wobble in
order to grab the user's attention.

Scripts
The tput function executes after processing each command in a script submitted to tput , where each line
should contain only one command.

Prevent the use of temporary files by utilizing the echo command to output a string that spans multiple lines,
and then piping it to the required destination.

echo -e "setf 7\nsetb 1" | tput -S  # set fg white and bg red

See also
    See man 1 tput
    Refer to man 5 terminfo for a comprehensive inventory of instructions and additional information about
	these preferences. The corresponding instruction, listed in the Cap-name column of the extensive table
	beginning at line 81, can also be consulted.

Bash detect colored text output in bash, //ANSI color codes for output public static final String
ANSI_RED = "\u001B[31m"; public static final String ANSI_GREEN = "\u001B[32m"; public

Adding colors to Bash scripts
I developed a git hook for a server that generates output. However, I needed a way to differentiate my
output from the git information. As a result, I explored colorizing bash output.

Color can be added to output strings with the help of ANSI color escape codes, which conform to specific color codes as per the ANSI standard.

----------------------------------------------------
Color            Foreground Code     Background Code
----------------------------------------------------
Black            30                  40
Red              31                  41
Green            32                  42
Yellow           33                  43
Blue             34                  44
Magenta          35                  45
Cyan             36                  46
Light Gray       37                  47
Gray             90                  100
Light Red        91                  101
Light Green      92                  102
Light Yellow     93                  103
Light Blue       94                  104
Light Magenta    95                  105
Light Cyan       96                  106
White            97                  107
----------------------------------------------------

In order to alter the text's color, we require the foreground code. Additionally, there exist several non
color specialized codes that are pertinent to us.

-------------------------
Code      Description
-------------------------
0         Reset/Normal
1         Bold text
2         Faint text
3         Italics
4         Underlined text
-------------------------


The echo command is used to print text, but it needs to be instructed to work with special ANSI codes
instead of regular characters. To achieve this, we must add an escape sequence by
using \ \ \ \ \e\ \ \ at the beginning. The escape sequence for specifying color codes involves
using \ \ \ \ \e\[COLORm\ \ \ (where COLOR represents the color code). By default, echo does not support
escape sequences, but we can enable their interpretation by using the -e option.

One option to achieve the printing of red text is by implementing the following.

echo -e "\e[32mRed text\e[0m"

To reset the text color back to normal, we utilize the special code 0 represented by
\ \ \ \ \e\[0m\ \ \ . If this code is not used, any text printed after it would appear in red.

Utilizing variables to store color codes would enhance its readability, though it currently functions well.

RED="\e[31m"
ENDCOLOR="\e[0m"
echo -e "${RED}Red text${ENDCOLOR}"

By combining all of these factors, it is possible to create a script which might look like this.

#! /usr/bin/env bash
RED="\e[31m"
GREEN="\e[32m"
ENDCOLOR="\e[0m"
echo -e "${RED}This is some red text, ${ENDCOLOR}"
echo -e "${GREEN}And this is some green text${ENDCOLOR}"

We have the ability to merge different escape codes in order to produce more sophisticated results.

#! /usr/bin/env bash
RED="31"
GREEN="32"
BOLDGREEN="\e[1;${GREEN}m"
ITALICRED="\e[3;${RED}m"
ENDCOLOR="\e[0m"
echo -e "${BOLDGREEN}Behold! Bold, green text.${ENDCOLOR}"
echo -e "${ITALICRED}Italian italics${ENDCOLOR}"

There are endless possibilities to utilize these and add variety to your scripts. The choice of combinations
is completely yours. Enjoy the scripting process!

Styling and color text bash Code Example, Answers related to “styling and color text bash”. bash colors ·
how to edit bashrc · bash script colors · change shell prompt color linux

How to use ANSI color codes to print colored text to bash terminal from a file?

Solution 1:
    What is the process of reading a file, coloring its contents and displaying it on the terminal?

One option is to keep the expansions within the file and substitute the ${...} placeholders with the
corresponding variables during file reading.

RED=$'\E[0;31m'
NC=$'\E[0m'
GREEN=$'\E[0;32m'
sed 's/No/${RED}No${NC}/g ; s/Yes/${GREEN}Yes${NC}/g' file.txt > color_file.txt
( export RED NC GREEN ; envsubst color_file.txt )

However, my understanding is that your intention was to print the escape sequences directly onto the file.

RED=$'\E[0;31m'
NC=$'\E[0m'
GREEN=$'\E[0;32m'
sed "s/No/${RED}No${NC}/g ; s/Yes/${GREEN}Yes${NC}/g" file.txt > color_file.txt
cat color_file.txt

Perhaps your intention was for printf to handle the interpretation of escape sequences present within a file's content.

RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
sed "s/No/${RED}No${NC}/g ; s/Yes/${GREEN}Yes${NC}/g" file.txt > color_file.txt
printf "%b\n" "$(cat color_file.txt)"
# or maybe:
xargs -0 printf "%b" < color_file.txt
# or maybe:
sed 's/\\033/\e/g' color_file.txt 
# etc.

Utilize shellcheck to identify any errors present in your scripts.

    's/No/${RED}...'

Single quotes do not allow for variable expansion.

    #If you would:
    RED='\033[0;31m'
    .... sed "....${RED}..."

Octal escape sequences are not interpreted by sed . In the case of sed , the string contains a 0x00 zero byte followed by two 33 .

    printf "$(cat ...)"

Employing cat ... is a counterproductive approach, simply execute it instead.

    cat ... | sed..

Is a useless use of cat.

    Discover the method to have printf interpret the file's contents.

printf is not designed for reading files, therefore it cannot perform this task.

    Hence, carry out the instructions enclosed within it.

Although it may seem irrelevant to your problem, you can run a file by either invoking it using an interpreter
( sh ./file.sh ) or including it in the current execution environment ( . ./file.sh ).

Solution 2:

I possess a convenient bash function that can add colors to text without requiring one to memorize complex
ANSI escapes or numeric mappings. With the help of this function:

#!/usr/bin/env bash
# Map color names to terminfo setaf/setab codes.
declare -A colors=( [black]=0 [red]=1 [green]=2 [yellow]=3 [blue]=4 [magenta]=5 [cyan]=6 [white]=7 )
# colorize colorname text
# Returns text wrapped in ANSI color tags. Unknown color names are mapped to white.
colorize() {
	printf "%s%s%s" "$(tput setaf "${colors[$1]:-7}")" "$2" "$(tput op)"
}
greenyes=$(colorize green Yes)
redno=$(colorize red No)
sed -e "s/Yes/$greenyes/g" -e "s/No/$redno/g" file.txt

The colorized file.txt can be printed to standard output. You have the option to redirect it to another file
or pipe it to tee or any other desired destination simultaneously.


---

