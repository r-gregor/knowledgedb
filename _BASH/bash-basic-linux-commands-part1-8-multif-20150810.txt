filename: bash_basic-linux-commands_part1-8-multif_20150810.txt
http://www.unixmen.com/basic-linux-commands-used-linux-journey/

Some Basic Linux Commands I Have Used During My Linux Journey – Part 1

   It has been a very long time since I started using a linux distribution for the first time.
   There have been many cases when I did not know what I was doing but as the time passed I
   got better and better. Many errors, many problems and a lot of fun with the different
   utilities being used by linux geeks.

   The terminal is scary for so many people new to it but once you have learned the basics I
   got to tell that you will have hunger for learning more commands, learning different tricks
   and hacks to get the best out of your operating system.

The ls command

   Before using linux I had no idea about the power of the terminal and it is absolutely fair
   if you know nothing about this power either. For example if you want to list files in a
   directory you just run the ls command like shown below.
ls

    But the above command becomes very helpful when you are looking for a specific file. Lets
   suppose you have a directory with so many files and you want to see if test.txt exists in
   there. To find out you can easily pipe the output of the ls command to the grep command.
   The grep command then filters the output and greps the file you are looking for.
ls | grep test.txt

   If the file test.txt exists then it should be displayed on your console like shown below.
oltjano@baby:~/Desktop$ ls | grep test.txt
 test.txt~

    There are cases when you have to deal with files that start with a dot. Files that start
   with a . are hidden in a directory. Running the normal ls command is not going to list
   them. The -a option is needed in this case.
ls -a

   The above command lists all files including the hidden ones. There are many other options
   you can use when working with the ls command such as -l option which stands for a long
   listing format, -s to print the allocated size of each file in blocks, -t to sort by
   modification time (newest first), -h to print file sizes in a human readable format so
   everyone can read the output even if they have no idea about computers in general.

   If you are new to linux and to the ls command then you can learn how to use it by typing
   the following command on your console.
man ls

   Most of the times not only you will get the usage manual of a command when using man but
   you will also get practical examples that help to get a real world experience.

The pwd command

   There will be many cases when you want to display the current working directory. That is
   what the pwd command does. It prints the current working directory.
pwd

   Running the above command on my console displays the following output.
/home/oltjano/Desktop

   The above output means that I am working on my Desktop. I find the pwd command very useful
   when working on different projects.

The cd command

   You will not always work on the same directory so you need a command to change the working
   directory. The cd command command can do that for you.
pwd

   As you can see it prints the following. It means I am on my Desktop.
/home/oltjano/Desktop

   Then I can use the cd command to change directory like shown below.
cd  MyLab

   For now all you should know about the cd command is just to change the working directory.

The cat command

   The cat command is very helpful when you want to display the content of a file on your
   console. For example to display the content of the test.txt file I have to type the
   following command.
cat test.txt

The cp command

   The cp command is used to copy files and directories. This is very useful when you have
   files that start with the same name as it helps to do a bulk copy.
cp same_name* /home/oltjano/Desktop

   The above command is going to copy all files that start with same_name in my Desktop. Time
   is money so save it. And to save time while working on linux you should make use of this
   great utility.

The chmod command

   The chmod command is used to change permissions to file system objects. I mainly used this
   command to change file permissions of python scripts I use.

   The following command helps me to make my scripts executable.
chmod +x myscript.py

   In this case myscript.py is a python script which can be used in a linux operating system
   by typing the command shown below.
./myscript.py

   Usually you run the following command to execute a python script, but since we used chmod
   +x to make it executable a shorter command can be used.
python myscript.py

   Some examples of using the chmod command are shown below. Make sure to study them for
   future usage on your linux distribution because they are very useful.
     * chmod a+r mytest.txt read is added for all classes (i.e. User, Group and Others).
     * chmod +r mytest.txt omitting the class defaults to all classes, but the resultant
       permissions are dependent on umask
     * chmod a-x mytest.txt execute permission is removed for all classes.
     * chmod 664 mytest.txt sets read and write and no execution access for the user and
       group, and read, no write, no execute for all others.
     * chmod 0744 mytest.txt equivalent to u=rwx (400+200+100),go=r (40+ 4). The 0 specifies
       no special modes.

The wget command

   Downloading files in linux from the terminal can be done in many ways. On of them is to use
   the wget utility which can be used to retrieve files using  the HTTP, HTTPS and FTP
   protocols. This  non-interactive commandline tool has many cool features and also
   supports  HTTP proxies.

   To download a file just use the following command.
wget link_of_file_which_is_available_for_download_here

   By using the wget utility you can also resume aborted downloads, using REST and RANGE. For
   more information on the wget commandline tool visit the official [44]page.

The ssh command

    When doing freelance work for a client usually they give you the ssh credentials of their
   servers so you can start working there. Once  you got the right shh login credentials you
   need to use an ssh client to connect to the server. In case you do not know what ssh is let
   me explain it to you in short words: ssh stands for secure shell and is to access remote
   Linux and Unix-like servers, such as VPS instances.

   The basic usage is shown in the following example.
ssh remote_host

The uname command

   I use the uname command all the time to print system information. For example the following
   command is used to print all information of your system.
uname -a

   As you can see the -a stands for all.

   You can also print the kernel name by using the -s option.
uname -s

   When running the above command on my system I get the following output.
Linux

   It means that I am using a Linux kernel.

   To get the kernel release just use the uname command with the -r option like shown in the
   following example.
uname -r

   Running the above command prints the following output on my console.
3.8.0-36-generic

   What about the kernel version? Is there any option to display it? Yes the -v option can be
   used in this case.
uname -v

   The above command displays the following information on my console.
#52~precise1-Ubuntu SMP Mon Feb 3 21:54:46 UTC 2014

   There are many other useful options that the uname utility supports but the purpose of this
   article is not to discuss them here. Maybe we will take a deep look on the uname utility in
   another article.

Conclusion

   In this article I took a look at some command I have been using while working on Linux. But
   it does not end here. There are many other commands I use daily and would love to share
   each one of them with you guys.



---
http://www.unixmen.com/basic-linux-commands-used-linux-journey-part-2/

Some Basic Linux Commands I Have Used During My Linux Journey – Part 2

   As you keep working on linux you get better and better on the command line. it comes a
   point where you say to yourself: Damn I have learned some many commands, I went from being
   a total newbie to an intermediate linux user. At least you know what are you doing most of
   the time with your system.

   Also, read:
     * [44]Some Basic Linux Commands I Have Used During My Linux Journey – Part 1

   You know how to list files in a directory by using the ls command, you know how to change
   the working directory by using the cd command, you can download a file with the wget
   utility and maybe you understand how to properly use the grep command to find different
   files on your linux computer.

   To be honest this is only the beginning of working with the linux console. Do you know how
   to create a new directory, do you know how to remove it? Can you empty your trash from the
   commandline?

   It is time to show you guys some other useful linux commands that have helped me working on
   my ubuntu system. Lets start with the mkdir command.

The mkdir command

   The mkdir command is used to create a new directory. It’s syntax is very simple. If you
   would like to create a new directory on your linux machine you can do it right now by using
   the following command.
mkdir linuxcommands

   In the above command mkdir is the command, and linuxcommands is the name of the directory
   you want to create. You can also use the -v while working with the mkdir command to print a
   useful message for each directory you create. A simple example of such usage is show below.
mkdir -v newdirectory

   Running the above command on my system gives me the following output on my Ubuntu console.
mkdir: created directory `newdirectory'

   In short words the above output is very self explanatory. It tells the user that a new
   directory has been created with the use of the mkdir command.

The rm command

   The rm command is very useful when it comes to removing files or an entire directory
   including everything in it such as files and subdirectories.

   To remove a directory and their contents use the following command.
rm -r newdirectory

   The -r option tells the rm command to remove the content of a directory recursively. In
   order to get some information what is being done while using the rm command put the -v
   option in use. This helpful option usually stands for verbose.

rm -rv newdirectory

   I get the following output.
removed directory: `newdirectory'

   Another option which is  being used with the rm command is the -f option. It forces the
   remove process and never prompts the user to ask if they are sure what they are doing. I do
   not recommend this option when working with very important files.

   What I highly recommend to do when using the rm command to delete files is to make use of
   the -i option. This option will help you to securely delete files and never lose a single
   one that you don’t want to delete. What does securely mean in this case?

   The -i option prompts the use about the operating that is going to take place. In short
   words they are being asked if they want to really want to remove the file or not.

   The following is an example which demonstrates the usage of the rm command with the -i
   option.
rm -i myfile.txt

   When running the above command I get the following prompt.
rm: remove regular file `myfile.txt'?

   Am I sure about this? If yes then I type y and hit return. The best thing you can do in
   order to get rm to prompt you each time you want to remove a file is to create an alias.

Creating an alias of a command

   Sometimes you need a customized command for your personal usage in your linux system.
   Consider the rm command case when you want it to prompt you each time you want to remove a
   file on your system. I am sure you know now that making use of the -i option is going to do
   you for that, but what if you forget to use the -i option and somehow you delete a very
   important file?

   The solution to this very simple problem is to create an alias. What is an alias? According
   to wikipedia is mainly used for abbreviating a system command, or for adding default
   arguments to a regularly used command.

   So long story short we can create an alias for the rm -i command. You can name it whatever
   name fits best for you. A good one would be to  myrm. Do not make the mistake of making the
   following alias.
rm='rm -i'

   Why? It looks perfect to me, why not? Because you will get used to it and when you work on
   a new system that does not have the rm=rm-i alias you will take it for granted that your
   files are being delete in a secure way.

   Now that you know about aliases and how risky the rm command can be I am sure you want to
   know how to create an alias for this command on your system.

   I am supposing that you make use of the bash shell. To create an alias on your system open
   the .bashrc file with a text editor you like. I use vim for my text editing.
vim ~/.bashrc

   Put your alias inside this file.
alias myrm='rm -i'

   Once you are sure you have created the right alias then save and close the file. To make
   use of your alias just load them with the following command.
source ~/.bashrc

   Now each time you start a new shell your alias is going to get activated. You can use the
   new alias you created just you use any other command on your system.

   The myrm command is going to delete the files for you and before doing that it is going to
   prompt to telling you if you are sure what you are doing or not. Very useful, isn’t it?

The echo command

   The echo command is used to display something on your screen. It is useful when you want to
   pass some text to a file. This can be done by redirecting.

   The following example is useful if you want to learn how this redirecting this works.
echo 'Test' > file.txt

   To see if it worked, I mean if the text Test was saved inside the text file file.txt then
   just use the cat command to display its output on the console.
cat file.txt

    The echo command is very useful when writing shell scripts in bash. It can be used to echo
   output on the console for a program you want to build.

   In bash we can create variables using the syntax like shown below.
name='oltjano'

   We can easily display the value of the variable name by running the following command.
echo $name

The ps command

   The ps command is used to display various information about processes running on your
   system. Do you want to see every process running on your system?

   Cool, one single command can do that for you. The following command allows the user to see
   every process on the system using BSD syntax.
ps ax

   The following is a list of processes running on my machine.
 19625 pts/5 Ss 0:00 bash
 19732 ? S 0:00 [kworker/0:2]
 19733 ? Sl 0:01 /opt/google/chrome/chrome --type=renderer --enable-de
 19771 ? S 0:00 [kworker/u:0]
 19774 ? S 0:00 [kworker/0:0]
 19792 pts/5 R+ 0:00 ps ax
 20868 ? S 0:00 /usr/sbin/apache2 -k start
 20871 ? S 0:00 /usr/sbin/apache2 -k start
 30818 ? S 0:00 /usr/sbin/apache2 -k start
 30908 ? Sl 0:12 /opt/google/chrome/chrome --type=renderer --enable-de
 31197 ? Ss 0:00 /bin/sh -c gnome-terminal
 31198 ? Sl 3:18 gnome-terminal
 31202 ? S 0:00 gnome-pty-helper
 31203 pts/2 Ss+ 0:01 bash

Conclusion

   Learning new commands and new skills on the terminal takes time but for sure it pays off
   one day. I am not a ninja on the console but for sure I know how to securely delete files,
   how to find processes that are consuming my entire memory and also how to create
   directories for saving my projects and files.



---
http://www.unixmen.com/basic-linux-commands-used-linux-journey-part-3/

Some Basic Linux Commands I Have Used During My Linux Journey – Part 3

   As I use linux each day I have to deal with new things and so I learn new commands. I am
   sure that if you took a look at the previous two parts you know the purpose of piping
   output of one command as input for the another one.

   Check the following links to read our previous parts.
     * [44]Some Basic Linux Commands I Have Used During My Linux Journey – Part 1
     * [45]Some Basic Linux Commands I Have Used During My Linux Journey – Part 2

   There are times when you need to find a running process on your machine.

   Do you like to know how to do it? Ok, open a new terminal.

Find a running process

   You already know how to list processes on your linux machine. In case you don’t know
   anything about that just run the following command on your console and see what is going to
   happen.
ps aux

   But the above command is not useful when you are looking for a specific process and not the
   entire list. So the grep command comes in handy in this case. You can send the output of
   the ps aux command to the grep command and search for a process like shown in the following
   example.
ps aux | grep ipython

   The ipython shell is not running yet on my machine so the above command gives only the
   following output on my console.
oltjano 8698 0.0 0.0 13600 944 pts/4 S+ 13:49 0:00 grep --color=auto ipython

   And if i run ipython and do a ps aux | grep ipython again I get a different output which
   tells me that ipython is currently running.

   Running ipython with the following command.
ipython

   Then run ps aux | grep ipython.
ps aux | grep ipython

   The following output is displayed on my console when running the above command.
oltjano 8709 6.0 0.4 149684 18592 pts/0 Sl+ 13:53 0:00 /usr/bin/python /usr/local/bin/ipython
 oltjano 8712 0.0 0.0 13600 944 pts/4 S+ 13:54 0:00 grep --color=auto ipython

   So as you can see from the above output I am running the ipython located in /usr/local/bin
   with the process id of 8709. There is also a simple trick I want to share with you guys. In
   order to stop picking the actual grep itself use the following syntax.
ps aux | grep '[i]python'

   [i] is the trick used in the above command. Running the above command when ipython is a
   actually running gives only the following output which is different from the one produced
   by  ps aux | grep ipython.
oltjano 8709 6.0 0.4 149684 18592 pts/0 Sl+ 13:53 0:00 /usr/bin/python /usr/local/bin/ipython

   As you guys can see from the above output we do not pick the actual grep itself anymore.
   Less output, less stuff to watch, better results!

   Now would you like to know how do I kill a running process by its id?

Kill a running process by pid

   You can easily kill a running process if you know its pid by using the kill command like
   shown in the following example. Nothing hard here, but it is useful to know how to do it.
kill 8709

   After running the above command you will not see the running process anymore which in my
   case is ipython. It is going to be terminated. The kill 8709 command is good, but I would
   like to show you guys a more useful command. In fact some commands that are grouped
   together using piping.

   The following command extracts the process id of a process and kills it automatically for
   you.
kill $(ps aux | grep '[i]python' | awk '{print $2}')

   The following is an explanation of the parts taking place in the above command.

   First the ps command is run. It  lists all the running processes. The output of the ps
   command is piped with the | to the grep command. As we already know the grep command
   filters the output based on the search string. In this case I am looking for ipython.

   The output of the grep is then passed as input to the awk command which gives the second
   filed of each line. The second filed in this case is the pid.
oltjano 8709 6.0 0.4 149684 18592 pts/0 Sl+ 13:53 0:00 /usr/bin/python /usr/local/bin/ipython

   In the above output we can see that the first field is oltjano and the second field is 8709
   which is pid of the running process. Then we use the kill command to terminate the process
   or the processes if there is more than one pid.

   Cool! We did not have to manually type the pid of the process to kill it.

   It is time for some other commands. Now you know how to pickup a current specific running
   process and how to kill it by using the process id, the pid.

The tar command

   The tar command  is used to store and extract files from a tape or disk archive. You
   probably have seen some files ending in .tar, you need to use the tar utility in order to
   get its contents.

   For example the following command can be used to extract the contents of example.tar
   archive in a verbose way.
tar xvf example.tar

   Let me explain the options being used in the above command to you guys. The v option used
   in here stands for verbose output which is very helpful if you want to know what is
   happening while you are extracting the files from archive. The f option stands for file and
   the x option stands for extract which in other words means to get the files from the
   archive.

   You can also view the files of an existing archive without extracting it files.
 tar tvf example.tar

   What about creating a new tar archive. In order to create a new tar archive you need to use
   different options than the ones you used when you did an extract.

   First you need a directory with files in it. This is the directory that you are going to
   use to create a tar archive.
tar cvf example.tar example/

   The c option stands for creating an archive. The v option is for verbose output and the f
   option is for file. Easy, isn’t it? Just remember that when you want to create a new
   archive you have to use the c option.

Reduce size of the files with gzip

   The gzip utility is very useful when you want to reduce the size of files especially if you
   plan to share them over the network.

   The following is a short description of the gzip tool take from the manual page.

   Gzip reduces the size of the named files using Lempel-Ziv coding (LZ77). Whenever possible,
   each file is replaced by one with the extension .gz, while keeping the same ownership
   modes, access and modification times.(The default extension is -gz for VMS, z for MSDOS,
   OS/2 FAT, Windows NT FAT and Atari.) If no files are specified, or if a file name is “-“,
   the standard input is compressed to the standard output. Gzip will only attempt to compress
   regular files. In particular, it will ignore symbolic links.

   Now lets stop learning theory and show you guys how to use the gzip utility. The following
   command can be used to create a compressed .gz file.
gzip test.txt

   You can easily uncompress the file by using the same utility, gzip. To uncompress a *.gz
   file use the following syntax.
gzip -d test.txt.gz

   As you can see we have the -d option present in the above command when decompressing a *.gz
   file. This option stands for decompress or uncompress.

Enough for today, shutdown your computer

   I like to do everything from the commandline when  possible so why not shutdown the system
   from the console? What is the command? Do you guys want to do the same thing, or maybe use
   this command in the near future?

   In case you want to power off immediately  run the following command.
shutdown -h now

   Want to shutdown after some time? Then use the following syntax.
shutdown -h + 13

   The above command will make the system shutdown after 13 minutes.

Conclusion

   We have explored many useful commands so far. There are many more waiting for you guys, but
   until then make sure to practice what you have learned so far.



---
http://www.unixmen.com/basic-linux-commands-used-linux-journey-part-4/

Some Basic Linux Commands I Have Used During My Linux Journey – Part 4

   My linux journey has been great so far. I have learned so many commands that I feel a bit
   of a little ninja sometimes, but to be honest I am far from that. The more I use linux the
   more I understand that I don’t know much stuff about it.

   You might want to check the previous parts of this series.
     * [44]Some Basic Linux Commands I Have Used During My Linux Journey – Part 1
     * [45]Some Basic Linux Commands I Have Used During My Linux Journey – Part 2
     * [46]Some Basic Linux Commands I Have Used During My Linux Journey – Part 3

   Many of you guys are interested in learning new commands and becoming more practical when
   it comes to the commandline, are you ready for some other commands?

The tail command

   The tail command is very easy to use as the only thing you will need while using this
   utility is the name of the filename you want to output on the standard output, but in
   difference from cat it does not display the entire file, only the last parts of it.

   The following example shows how to use the tail utility.
tail text.txt

   The above command is going to print the last ten lines of the test.txt file on the standard
   output. Thee are also many other options that you can use with the tail utility such as the
   -c option which can be used to speficy the last K bytes you want to print to stdout, –retry
   to keep trying in case opening a file fails, -n to output the last K lines etc.

The nc command

   nc is a great commandline utility which is being referred as the TCP/IP swiss army knife.
   It has been in the field for more than 20 years I think but its power has made it last so
   far. I find this small utility very useful when I want to debug stuff I code.

   nc can be used both as a server and as a client. To do that you have to put the nc on the
   mode you want to use it.

   For example if you would like to create a listener on your machine at a specific port you
   have to specify the port and the mode which in this case is listening.

   The nc -l command puts nectat in listen mode.Run this command on your machine’s console and
   see what happens. If you want to learn new stuff you should keep trying and experimenting.

   The following command puts netcat on listening mode and tell it to listen on port 13. Port
   numbers can be individual or ranges.
nc -l -p 13

   You can also hex dump of traffic by using the -o option followed by the file where you want
   to do it. Do you like to create a simple chat with netcat? I am very sure it will make
   learning more interesting for you.

   Lets do it.

   Run netcat with the ‘-l’ option in order to operate in listening mode. You should also
   specify the listening port, I prefer 1300.
nc -l -p 1300

   Then, run another ‘netcat’ which will initiate the connection by connecting to the server.
nc localhost 1300

   Start chatting now by typing text in both parts. I mean in the netcat client and netcat
   server.

   Be careful when using netcat. Do not allow people that can do malicious stuff to your
   machine. A very dangerous option that is supported by netcat is the -c option which is
   being used to specify specify shell commands in string format to exec after connection has
   taken place.

The apt-get install command

   This command is debian specific. Ubuntu users use this command all the time to install new
   packages on their computers. For example to install nmap on my machine I just run the
   following command.
sudo apt-get install nmap

   The apt-get install command takes care of the package dependencies for me, so the only
   thing I have to do while installing software with it is just type y when needed and drink
   some coffee while software downloads.

The apt-get autoremove command

   The apt-get autoremove command is used to remove packages that were installed on your
   machine and are no longer required. Everything is done automatically, no need to specify
   the packages you want to remove as this is the purpose of this command.
sudo apt-get autoremove

   Running the above command on my Ubuntu machine gives me the following output on the
   console.
 Reading package lists... Done
 Building dependency tree
 Reading state information... Done
 The following packages will be REMOVED:
 radiance-materials tcsh
 0 upgraded, 0 newly installed, 2 to remove and 379 not upgraded.
 After this operation, 14.4 MB disk space will be freed.
 Do you want to continue [Y/n]?

   As you guys can see the above command reads the packages list, builds the dependency tree
   and informs the user about the packages that will be removed. If you want to continue just
   type the Y and hit return on your keyboard.

The cd ..

   This command is very useful when you want to go back on directory. For example If I am
   working on the projects/pyproject/base and want to cd back to the pyproject I just run the
   following command inside the current working directory.
cd ..

The cd ../ command

   There will be cases when you want to navigate back on your directories, but not just one so
   the cd .. comand is not useful in this case.

   To do that use the cd ../ command. Let me show you guys a very simple example in order to
   make things practical for you.

   First let me run the pwd command to print the current working directory on my console.
pwd

   I get the following output.
/home/oltjano/Desktop

   To go to the home directory I do the following.
cd ../../

   Doing pwd command again prints the following.
/home

The whereis command

   The whereis command can be used to locate the binary, source, and manual page files for a
   command. The usage is as simple as running the above command.
whereis ls

   The above command locates binaries and manual pages for the ls command. Let me run it on my
   terminal and show you guys the output of this command.

   After running the above command I get the following standard output on my console.
ls: /bin/ls /usr/share/man/man1/ls.1.gz

   What does the above output mean? It is easy to understand if you know the location of the
   linux commands such as ls, pwd etc. It tells the user that the ls command binary is located
   in /bin/ls and the manual page is located in /usr/share/man/man1/ls.1.gz.

   Why don’t you try it yourself now?
whereis pwd

   Then try this.
whereis whereis

   Then the following,
whereis cd

   When running the above command I get the following output.
whereis: /usr/bin/whereis /usr/bin/X11/whereis /usr/share/man/man1/whereis.1.gz

Rename files with mv command

   The mv command becomes very useful when you want to rename files. For example see the
   command shown below.
mv test.txt test13.txt

   The above command changes the name of the test.txt file to test13.txt. You can also use the
   mv command to move files in different directories.

The more command

   The more command helps to view the contents of a file by paging through text one screenful
   at a time. And to make it more practical to you guys try the following command.
more /etc/profile

The man command

   The man command is a great tool that helps the user to learn about different commands,
   their options, different examples and how to use them. A manual page consists of the
   following sections:
     * NAME
     * SYNOPSIS
     * CONFIGURATION
     * DESCRIPTION
     * OPTIONS
     * EXIT STATUS
     * RETURN VALUE
     * ERRORS
     * ENVIRONMENT
     * FILES
     * VERSIONS
     * CONFORMING TO
     * NOTES
     * BUGS
     * EXAMPLE
     * AUTHORS
     * SEE ALSO

   Every time I want to learn about a new command i reference to its manual page, to do that
   use the following syntax.
man command-name-here

   You can also lookup the manual pages referenced by an item and print out the short
   descriptions of any found. If you want to do this use the following syntax.
man -f ls

   The above command prints the following output.
ls (1) - list directory contents

   And last but not least, use the following command to read more about the man command.
man man

Conclusion

   You have learned many linux commands so  far. Do you know how to list files? Do you know
   how to ssh to a server? Do you know how to create a directory with the mkdir command? Do
   you know how to print the current working directory? Do you know how to copy files? If yes
   then good for you!



---
http://www.unixmen.com/basic-linux-commands-used-linux-journey-part-5/

Some Basic Linux Commands I Have Used During My Linux Journey – Part 5

   Maybe you thought that the number of commands in the linux operating system would come to
   an end in the fourth part of this series, but it did not. There are many others I have
   learned while working on the linux commandline.

   You might want to read our previous parts of this series.
     * [44]Some Basic Linux Commands I Have Used During My Linux Journey – Part 1
     * [45]Some Basic Linux Commands I Have Used During My Linux Journey – Part 2
     * [46]Some Basic Linux Commands I Have Used During My Linux Journey – Part 3
     * [47]Some Basic Linux Commands I Have Used During My Linux Journey – Part 4

The date command

   The date command is used to display the system date on standard output. Open a new terminal
   console on your linux machine and run the following command.
date

   Depending on the day you run it you should get a different output. I get the following.
Thu Jun 4 12:53:57 CEST 2015

   Not only we get information about the date when using the date command but we also learn
   the correct time in the zone of our system. And of course the year too.

   You can also output the date in  RFC 2822 format by using the -R option with the date
   command like shown in the following example which is being run on my machine.
date -R

   When using the above command you should get an output similar to the following. I mean the
   same format.
Thu, 04 Jun 2015 13:00:45 +0200

The lsusb command

   The lsusb command as the name suggests is used to list usb devices on your system.
   According to its manual page it displays information about USB buses in the system and the
   devices connected to them.

   Running the following command just lists the USB buses on my system. It does not give me a
   detailed information but is useful when I want to know what devices are connected to them.
lsusb

   And the output of the above command is shown below.
 Bus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
 Bus 002 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
 Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
 Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
 Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
 Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
 Bus 001 Device 005: ID 1bcf:2883 Sunplus Innovation Technology Inc.

   A more detailed output is displayed using the -v option which stands for verbose output.
   When using this option you will also get information on the descriptors for the device’s
   speed.

   Run the following command on your system.
lsusb -v

   The output of the above command is going to be very long so I am not going to post it in
   here. You should try the command and study it yourself for further learning or advancing
   your skills.

The arch command

   The arch command can be very useful when you want to show the architecture of your machine
   on standard output. If you have ever used uname -a then you understand the purpose of the
   arch command then.

   Run the following command to print the machine hardware name.
arch

   And I get the following output.
x86_64

   To find the version of the arch utility being used you can use the –version long option
   like shown in the following example.
arch --version

   When running the above command I get the following output.
 arch (GNU coreutils) 8.13
 Copyright (C) 2011 Free Software Foundation, Inc.
 License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
 This is free software: you are free to change and redistribute it.
 There is NO WARRANTY, to the extent permitted by law.
 Written by David MacKenzie and Karel Zak.

   To get help while using the arch command then use the –help long option like shown in the
   following example.
arch --help

   The following output is displayed on my console when  running the above command.
 Usage: arch [OPTION]...
 Print machine architecture.

 --help display this help and exit
 --version output version information and exit

 Report arch bugs to bug-coreutils@gnu.org
 GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
 General help using GNU software: <http://www.gnu.org/gethelp/>
 For complete documentation, run: info coreutils 'arch invocation'

   Unfortunately the arch tool does not support other options.

The cal command

   The cal command is used to display a simple calendar on the standard output. To show a
   calendar on your console just run the following command.
cal

   And you should a get nicely traditional calendar which highlights the current date. Mine is
   shown below.
 June 2015
 Su Mo Tu We Th Fr Sa
 1 2 3 4 5 6
 7 8 9 10 11 12 13
 14 15 16 17 18 19 20
 21 22 23 24 25 26 27
 28 29 30

   To turn off highlighting of today which is on by default then you should use the -h option
   like shown in the following example.
cal -h

   Now you will not get the today highlighted, I mean anytime you run the above command.

   Use the -y option to display the calendar for a specific year.
cal -y 2016

   The above command will display the all calendar for the year 2016.

The file command

   The file command is used to determine what a file contains before you view it. In short
   words when using the file command it will examine the file for you and tell its kind. As an
   example take the following command shown below.
file test.txt

   Running the above command on my system gives me the following output.
test.txt: ASCII text

   And if you would like to output mime strings rather than traditional ones then use the -i
   option like shown below.
file -i test.txt

   I get the following output.
test.txt: text/plain; charset=us-ascii

   You can also print specific elements out of the long mime string. For example to print the
   mime type run the following command.
file --mime-type test.txt

   I get the following output when running the above command.
test.txt: text/plain

   What about printing out the mime encoding? It is very simple! The –mime-encoding can be
   used in this case like shown in the following example.
file --mime-encoding test.txt

   Whe running the above command I get the following output.
test.txt: us-ascii

   To learn more about the file command  you know what to do. In case you don’t just run the
   following command.
man file

The ls /bin command

   I am sure you know about the ls command. It is used to list the files inside a directory.
   The ls /bin command can be used to list the files inside the /bin directory of your system.

The ls -l /bin command

   The ls -l /bin command lists the files inside the bin directory in the long format. The -l
   option stands for long output which is very useful to use when you want detailed stuff.

The hdparm -i /dev/sda command

   The hdparm -i /dev/sda command is used to show information about the disk /dev/sda. Run the
   following command on your console to get a better understanding.
hdparm -i /dev/sda

   I get the following output when running the above command.
 /dev/sda:
 Model=ST9500325AS, FwRev=0005HPM1, SerialNo=5VE436TP
 Config={ HardSect NotMFM HdSw>15uSec Fixed DTR>10Mbs RotSpdTol>.5% }
 RawCHS=16383/16/63, TrkSize=0, SectSize=0, ECCbytes=4
 BuffType=unknown, BuffSize=8192kB, MaxMultSect=16, MultSect=16
 CurCHS=16383/16/63, CurSects=16514064, LBA=yes, LBAsects=976773168
 IORDY=on/off, tPIO={min:120,w/IORDY:120}, tDMA={min:120,rec:120}
 PIO modes: pio0 pio1 pio2 pio3 pio4
 DMA modes: mdma0 mdma1 mdma2
 UDMA modes: udma0 udma1 udma2 udma3 udma4 *udma5
 AdvancedPM=yes: unknown setting WriteCache=enabled
 Drive conforms to: unknown: ATA/ATAPI-3,4,5,6,7
 * signifies the current active mode

The head -n1 /etc/issue command

   The head -n1 /etc/issue command is used to show the name and the version of distribution
   which powers your linux machine. Running this command on my system like shown below gives
   me some nice information about the Ubuntu version I am using.
head -n1 /etc/issue

   And the name and version of the machine being used is shown below.
Ubuntu 12.04.4 LTS \n \l

The last reboot command

   If you want to know the date and time of the last reboot of your machine then you should
   use the following command.
last reboot

   When running the above command I get the following output.
wtmp begins Tue Jun 2 03:04:39 2015

The free command

   The free command is used to display the amount of free and used memory on your system. For
   example to display information on my used and free ram I just use the free command like
   shown below.
free

   And I get a nice readable output like shown below.
 total used free shared buffers cached
 Mem: 3929724 3708236 221488 0 44712 1947924
 -/+ buffers/cache: 1715600 2214124
 Swap: 0 0 0

   To make it human readable make use of the -m option which is being used to display the
   amount of ram in MB.
free -m

   And the output produced by the above command is very human readable. It is shown below.
 total used free shared buffers cached
 Mem: 3837 3627 209 0 43 1913
 -/+ buffers/cache: 1670 2167
 Swap: 0 0 0

Conclusion

   In this part we took a look at some very practical linux commands I have learned all this
   time as a linux user. In the next part I will compile and explain some new useful commands
   for you guys.



---
http://www.unixmen.com/basic-linux-commands-used-linux-journey-part-6/

Some Basic Linux Commands I Have Used During My Linux Journey – Part 6

   There are some other commands you need to know about in order to get better at the
   commandline. In this tutorial we will take a look at some practical linux commands I have
   learned while doing different tasks on my machine.

   For example what command would you use if someones asked to extract images from a pdf file?
   I am sure you don’t know the solution unless you have done this before.

   You might want to read our previous parts of this series.
     * [44]Some Basic Linux Commands I Have Used During My Linux Journey – Part 1
     * [45]Some Basic Linux Commands I Have Used During My Linux Journey – Part 2
     * [46]Some Basic Linux Commands I Have Used During My Linux Journey – Part 3
     * [47]Some Basic Linux Commands I Have Used During My Linux Journey – Part 4
     * [48]Some Basic Linux Commands I Have Used During My Linux Journey – Part 5

The pdfimages command

   To extract images from .pdf files I use a tool which is called pdfimages. Ubuntu and Debian
   users can install it on their system by using the following command.
sudo apt-get install poppler-utils

   Then before extracting any images from a pdf file you need to learn how to use the tool.
   The following are some  important things you need to know before using the tool:
     * The name of the document you want to extract images from
     * The starting page (specify as integer)
     * The end page (specify as integer)
     * The -j option (Save jpeg images as jpeg)

   For example if I have unixmen.pdf and want to extract all images from it I use the
   following command.
pdfimages -j unixmen.pdf unixmen

   The -j option is being used to save images as jpeg. The unixmen at the end of the command
   is being used to name the images. Every image will start with unixmen. Of course you can
   put any name you want. It is always up to you.

The tac command

   The tac command is similar to ‘cat’ but instead of displaying the file in standard output
   as it is it will display the last line first. The following example explains it and makes
   clear for you.

   The test.txt is a file on my Desktop. Running the following command displays the file in
   standard output.
cat test.txt

   The file test.txt is displayed like shown below when running the above command.
this is a test
last line

   Then using tac shows the difference.
tac test.txt

   The last line in text.txt is displayed first when running the above command like shown
   below.
this is a test
last line

The diff command

   The diff command is used to find differences between two files. I use this command when I
   want to display differences between two files line by line. How to use this command?

   The general syntax of diff command as follows:
diff file1 file2

   Create two files test1.txt and test2.txt.

   Make test1.txt look like shown below.
This is the first file

   Make test2.txt look like shown below.
This is the second file

   Then run the following command.
diff test1.txt test2.txt

   What output does the above command display? In our case it displays the following.
1c1
< this is the first file
---
> this is the second file

The dirname command

   The dirname command is used to convert a full pathname to just a path. In other words it
   can be used to strip last component from file name.

   For example run the following command on your console.
 dirname /usr/bin

   The above command gives the following output.
/usr

The sleep command

   The sleep command is used to delay for a specified amount of time. The syntax of this
   command is as following.
 sleep NUMBER[SUFFIX]...
 sleep OPTION

   Try the following command and see what happens.
sleep 13

The tail command

   The tail command can be used to display the last part of files. According to the manual
   pages this command prints the last ten lines of each file on standard output. Lets try the
   following example.
tail test1.txt

   The above command prints the following on standard output.
this is the first file

   Then try the following command.
tail test1.txt test2.txt

   The above command gives a very nice output which is shown below.
==> test1.txt <==
this is the first file
==> test2.txt <==
this is the second file

   As you can see from the above output when more than one file is being used the tail
   command precede each with a header giving the file name.

   It is a very nice and easy to understand output format, isn’t it?

The who command

   The who command is used to show logged on users on the system. The usage is really simple
   and the following example demonstrates it.
who

   Running the above command on your console will show who is logged on. When running the
   above command on my console I get the following output.
oltjano tty7 2015-06-09 19:14
oltjano pts/5 2015-06-16 13:58 (:0.0)
oltjano pts/9 2015-06-16 19:43 (:0.0)

The wc  command

   The we command can be used to print number of bytes, numbers of words and line count in
   each given file. For example running the following command will print byte, word, and line
   count on my standard output for the test1.txt file.
wc test1.txt

   Running the above command displays the following output.
 1  5 23 test1.txt

   There are also some useful options you can use with the wc command. What if you want to
   print only the number of words of your file and not other stuff such as line count and
   bytes?

   The -w option is the solution to this problem. Run the following command.
wc -w test1.txt

   You can use any file you want. I am using test1.txt for this case. The -w option in the
   above command tells the wc that we want to count and print only the number of words on our
   system.

   Running the above command on my console gives me the following output.
5 test1.txt

   I get the number of words in the test1.txt file. As you can see from the above output the
   number of words in test1.txt is five. But what if you want to print the number of lines?

   Just make use of the -l option like shown below.
wc -l test1.txt

   And I get the following output.
1 test1.txt

   There is only one line in my file so the output is totally correct. You can also print only
   the byte counts by using the -c option like shown in the following command.
wc -c test1.txt

   The above command prints the following on my standard output.
23 test1.txt

The type command

   The type command is used to describe a command. In other words it finds out if a command is
   builtin or external binary file. Run the following command.
type pwd

   What does it print to the standard output? Running the above command on my console I get
   the following output.
pwd is a shell builtin

   And run again the type command like shown below.
type cd

   A different output is going to be displayed now. I get the following.
cd ()
{
 autoenv_cd "$@"
}

   If you want to find out all information about a command then use the -a option when making
   use of the type command. The following example shows you how to do it.
type -a pwd

   When running the above command on my console I get the following output.
pwd is a shell builtin
pwd is /bin/pwd

   You can also use the -t option with the type command. If the -t option is used, it will
   print a single word which is one of the following
     * alias (command is shell alias)
     * keyword (command is shell reserved word)
     * function (command is shell function)
     * builtin (command is shell builtin)
     * file (command is disk file)

   Type the following command on your console. Run it and see what happens.
type -t pwd

   I get the following output when running the above command.
builtin

   Why don’t you try yourself some other examples where the type command is being used. For
   example try to make use of the -p option like shown below.
type -p date

Conclusion

   As you can see from the commands I have shown to you so far linux offers an amazing builtin
   set of commands that can do different things such as listing files, finding the difference
   between two files, printing a working directory, counting the lines a file and other
   important stuff such as changing permissions of a file.

   Keep practising all the commands we have learned so far! I am very sure it pays in the end.

   
   
---
http://www.unixmen.com/basic-linux-commands-used-linux-journey-part-7

Some Basic Linux Commands I Have Used During My Linux Journey – Part 7

   Please share[35] Share on Facebook Share on Facebook [36]Share on Google+ Share on Google+ [37]Tweet
   about this on Twitter Tweet about this on Twitter [38]Share on LinkedIn Share on LinkedIn [39]Share
   on Reddit Share on Reddit [40]Digg this Digg this [41]Share on StumbleUpon Share on StumbleUpon
   [42]Share on VK Share on VK [43]Buffer this page Buffer this page

   As you read my tutorials on linux commands I am very sure you feel more confident with yourself while
   you see a console. I have explained many different things so far, from very basic built-in commands
   such as ls, cd, pwd, mv to more advanced ones such as pdfimages which helps to deal with images in
   pdf files.

   But the learning never ends. I have been a linux user for more than four years now and I learn a new
   command every day. Knowing many commands does not only help you to perform different tasks through
   the console of your machine, but also helps to solve a problem in different ways.

   Are you ready to learn some new more commands? If so then continue reading this article. There are so
   many things you need to learn in your way of becoming a linux ninja.

The head command

   As the name suggests the head command is used to output the first part of a file to standard output.
   According to the documentation it prints the first 10 lines of each file to standard output. When no
   file is specified it reads from standard input. But how to use this command on your console?

   The basic usage is very simple. Open a new console on your machine and type the following command.
head filename_in_here

    For example the following command displays the first 10 lines of my test.txt file on standard
   output.
head test.txt

   The output of the above command is shown below.
this is 1
this is 2
this is 3
this is 4
this is 5
this is 6
this is 7
this is 8
this is 9
this is 10

The cmp command

   The cmp command can be used to find the difference between two files. It shows the  the offsets and
   line numbers where two files differ. To make it more practical for you guys while explaining this
   command I am using my favorite text editor to create the two following files shown below.
names.old names.new

   Lets run the cat command which you have learned in previous series and see what each files contains.
cat names.old

   The above command prints the following to standard output.
oltjano

   Then running the following command will show a different output.
cat names.new

   The output of the above command is shown below.
jetbird

   As you can see from the results of cat command each one of the files contains only one single line of
   text. Now running the cmp command will show me the difference between the two files. You can easily
   tell it yourself, but what if you have files with million lines of text?
cmp names.new names.old

   Running the above command gives the following standard output on my console.
names.new names.old differ: byte 1, line 1

   As you can see from the output shown above the cmp command tells exactly where the two files differ.
   It shows the difference in a very clear way for the user to understand. In short words it tells the
   first byte and line number where they differ.

The hostname command

   The hostname command can be used to show the system’s hostname. To use it just follow the very simple
   syntax which is shown in the example below.
hostname

   Running the above command on my console gives me the following output.
baby

The logname command

   The logname command prints the user’s login name. Run it as shown below.
logname

   Running the above command on my console gives me the following output.
oltjano

The users command

   If you would like to print the names of the users currently logged in then type the following command
   on your console.
users

The units command

   The units command becomes very useful when you want to convert units from one scale to another. The
   units tool can be used interactively with prompts.

   This tool does not come as a builtin on linux you have to install it . Ubuntu user can use the apt
   package manager to install it like shown below.
sudo apt-get install units

   Once you have installed units on your machine run the following example.
units '2 kilometers' 'meters'

   What output do you get? Is your output the same as mine?
 * 2000
 / 0.0005

The ping command

   The ping command is used to test a network connection. It sends ICMP ECHO_REQUEST to network hosts.
   Use the following syntax to ping a host.
ping host_here

   For example the following command is used to ping google.com
ping www.google.com

   And the response of the ping is shown below.
PING www.google.com (74.125.29.104) 56(84) bytes of data.
64 bytes from qg-in-f104.1e100.net (74.125.29.104): icmp_req=1 ttl=42 time=346 ms
64 bytes from qg-in-f104.1e100.net (74.125.29.104): icmp_req=2 ttl=42 time=265 ms
64 bytes from qg-in-f104.1e100.net (74.125.29.104): icmp_req=3 ttl=42 time=289 ms
64 bytes from qg-in-f104.1e100.net (74.125.29.104): icmp_req=4 ttl=42 time=313 ms
64 bytes from qg-in-f104.1e100.net (74.125.29.104): icmp_req=5 ttl=42 time=336 ms
64 bytes from qg-in-f104.1e100.net (74.125.29.104): icmp_req=6 ttl=42 time=182 ms

   Use CTRL+C to stop the ping.

The dirs command

   The dirs command is used to display a list of remembered directories. Run it like shown in the
   following example.
dirs

The du command

   The du command is used to estimate file space usage. Run the following command on your console and
   see what happens.
du

   The kill command

   The kill command is used to send a signal to a process. It is very useful when you want to kill a
   process that you no longer need. The signals listed below may be available for use with kill.  When
   known constant, numbers and default  behavior are shown.
 Name Num Action Description
 0 0 n/a exit code indicates if a signal may be sent
 ALRM 14 exit
 HUP 1 exit
 INT 2 exit
 KILL 9 exit cannot be blocked
 PIPE 13 exit
 POLL exit
 PROF exit
 TERM 15 exit
 USR1 exit
 USR2 exit
 VTALRM exit
 STKFLT exit might not be implemented
 PWR ignore might exit on some systems
 WINCH ignore
 CHLD ignore
 URG ignore
 TSTP stop might interact with the shell
 TTIN stop might interact with the shell

   To kill a process use the following syntax.
kill PID

   You can use as many PIDs as you want in a single command.

   The following is an example of using the kill command.
kill 130

   The above command is going to kill the process with the PID specified above. In my case it is not
   going to work as I do not have such a process running on my machine.

   The following is displayed on my console when running the above command.
bash: kill: (130) - No such process

   As you can see bash tells you that is no such process running on your machine. You can display a list
   of processes by using the following command.
ps aux

   Then you can use piping to grep the process you want.

   Or you can do the following.
ps aux | less

The  locate command

   The locate command is used to find files by name. This command prints matching files to standard
   output. According to the documentation in the manual pages locate reads one or more databases
   prepared by updatedb(8) and writes file names matching at least one of the PATTERNs to standard
   output, one per line.
locate test.txt

What should you know so far

   Reading this series of linux commands has been a long process, but have you ever asked yourself what
   have you learned so far? In my opinion you should know the following:
     * how to list files using the ls command
     * how to navigate through directories using the cd command
     * how to print the current working directory using the pwd command
     * how to display the current date on your console
     * how to copy files with the cp command
     * how to remove files with the rm command
     * how to kill a process with the kill command
     * how to find information about your computer with the uname command

Conclusion

   There are so many commands on your head right now and I know it sounds very hard for you to know how
   to use all of them. Many of you who are new to linux will feel very confused. I felt the same way
   when I started learning linux commands. But when I look back I see the progress I have done.

   I am not a linux ninja, but I know how to do basic stuff. Keep learning.

   
   
---
http://www.unixmen.com/basic-linux-commands-used-linux-journey-part-8/

Some Basic Linux Commands I Have Used During My Linux Journey – Part 8

by oltjano terpollari
linux
Please shareShare on Facebook233Share on Google+6Tweet about this on Twitter24Share on LinkedIn0Share
on Reddit0Digg thisShare on StumbleUpon1Share on VKBuffer this page
As each day passes the more new linux commands I learn. A new command gives me some new power on the
linux system, a power which I did not have before.  For example yesterday I learned how to locate manual
pages by subject using the following syntax which is very easy to understand and use even for beginners.

man -k pwd
 Running the above command on my machine prints the following on the standard output.

lckpwdf (3) - get shadow password file entry
pwd (1) - print name of current/working directory
pwdx (1) - report current working directory of a process
ulckpwdf (3) - get shadow password file entry
unix_chkpwd (8) - Helper binary that verifies the password of the curren...
It finds all the manual pages that talk about the pwd command. If you want only the manual pages for
the command which prints the name of the current working directory then you can make use of piping like
shown below.

man -k pwd | grep "print"
Running the above command on my machine gives me the following output.

pwd (1)              - print name of current/working directory
The which command
which is very useful when you want to locate a command. When working as a developer you may use this
command to find out version of development tools you are using. For example the following command prints
on standard output the python interpreter which I am currently using.

which python
 The following is showed on my standard output.

/usr/bin/python
As you can see from the above output of the which command, the location of the executable file is printed
out. According to the manual page the which command searches the PATH environment variable for paths
matching the give filename arguments and if the matching occurs prints them to standard output.

The which command returns the following value, depending on what occurred:

All filenames were found, and all were executable.
One or more filenames were not found, or were not executable.
An invalid option was specified.
Lets take the following example. Run the command which is shown below on your console and see what is
going to happen. I have to tell before you run the command that is not going to do anything bad.

which sh
It just gives you some useful information. When running the above command on my console the following
is printed on standard output.

/bin/sh
What does the which sh command do? It locates the path of the file which would be run if the sh command
were executed. Then it prints this path on the standard output.

Try to run the following command.

which ls
What do you get on your standard output? I get the following.

/bin/ls
What about the following command?

which pwd
Does it print the following on standard output.

/bin/pwd
Then try another command.

which cd
You should get the output which is shown below.

/bin/cd
As you can see from the above examples the binaries of linux builtin commands such as ls, pwd, cd etc
are located inside the /bin directory which stands for binary files.

The find command
The find command is used to find files in a directory hierarchy. In other words this command searches
and locates files on your linux system.

Try to run the following command inside the current directory you are working.

find
What do you see on the standard output once you have executed the above command? Maybe many files will
be printed on your standard output depending on what the directory contains.

When used like shown above the find command will print a list of files inside the directory including
all the files inside subdirectories that are part of this directory.

Then run the following command.

find . /home/your_user_name_here/Desktop
The above command is going to print all files and directories inside Desktop directory. You can also
specify other directories for the searching to take place like shown below.

find . /home/your_user_name_here/Desktop /home/your_username_here
/home/your_username_here/Desktop/some_directory_here
Now lets say that you want to find files or directories that have a specific text in their name. For
example I want to print all the files and directories that contain the text ‘oltjano’ inside their name.

find /home/oltjano/ -name "oltjano"
Running the above command on my system prints the following on my console.

/home/oltjano/
/home/oltjano/.wine-browser/drive_c/users/oltjano
/home/oltjano/.config/teamviewer9/drive_c/users/oltjano
find: `/home/oltjano/.kde/share/apps/k3b': Permission denied./oltjanostudent.py
 ./oltjano.py
find: `/home/oltjano/.kde/share/apps/RecentDocuments': Permission denied
find: `/home/oltjano/.car-p': Permission denied
find: `/home/oltjano/Desktop/.cpanel': Permission denied
find: `/home/oltjano/Desktop/.cagefs': Permission denied
We can also make use of piping to filter output out. For example the following command is going to find
all files and directories that have the text “oltjano” in their name and filters others out.

find | grep oltjano
I get the following output when running the above command.

./oltjanostudent.py
./oltjano.py
And to show you guys files and sub directories inside the current working directory I am using the ls
command to list everything inside it and paste the output in here.

First let me run the pwd command to print the current working directory.

pwd
I get the following output.

/home/oltjano/Desktop/students
Then to list the files inside the above directory I use the ls command like shown below.

ls
The output which is shown below is printed to standard output after running the above command.

firststudent.py  oltjano.py  oltjanostudent.py
The find command has many options and there are many other examples I can show to you guys, but I am
thinking to dedicate an entire article to it.

The stat command
The stat command is used to display file or filesystem status.The syntax for using this command is very
simple. It is shown below.

stat [OPTION]... FILE...
For example running the following command gives me detailed information about the test.txt file.

stat test.txt
The output of the above command is shown below.

 File: `test.txt'
 Size: 211 Blocks: 24 IO Block: 4096 regular file
Device: 15h/21d Inode: 11845478 Links: 1
Access: (0664/-rw-rw-r--) Uid: ( 1000/ oltjano) Gid: ( 1000/ oltjano)
Access: 2015-07-07 13:49:41.132137281 +0200
Modify: 2015-07-03 11:39:04.147857766 +0200
Change: 2015-07-03 11:39:04.271857760 +0200
 Birth: -
You can also return the status of the first hard disk by using the following command.

stat -f /dev/sda
The above command display the following on standard output.

 File: "/dev/sda"
 ID: 0 Namelen: 255 Type: tmpfs
Block size: 4096 Fundamental block size: 4096
Blocks: Total: 487969 Free: 487968 Available: 487968
Inodes: Total: 487969 Free: 487434
The ifconfig command
The ifconfig command is used to configure network interfaces on your system or view the current
configuration. Try running the following command on your console.

ifconfig
What output do you get?

The edit command
The edit command is used top edit files. This command makes use of the edit text editing utility. Use
it like shown below.

edit test.txt
The apt-get command
This is a command line tool for working with APT software packages. I use this utility on my Ubuntu
machine to install, update and remove software.

For example the following command is going to install python on my machine.

sudo apt-get install python
And If I want to remove a specific package I do the following.

sudo apt-get remove package_name_here
You can also automatically remove no longer required packages using the following command.

apt-get autoremove
To search for a specific packages do the following.

apt-cache search package_name_here
You can install updates on your machine by using the followings.

Run the following command to fetch all the available updates for your specific system version.

sudo apt-get update

Then upgrade the current packages with the following command.

sudo apt-get upgrade
Finally install new updates.

sudo apt-get dist-upgrade
Conclusion
As you have seen so far there are some many linux commands out there waiting for you. In this tutorial
you learned some basic information about ifconfig, learned how to find files using the find command,
how to display filesystem status with the stat command, how to use the which command and you also took
a look at some practical commands of the apt-get utility.

I am sure that if you use Ubuntu you now know that the apt-get install command is used to install a new
package on your machine. Maybe you want to remove a package in the future so remember to use the apt-get
remove command.

You might want to read our previous parts of this series.
   