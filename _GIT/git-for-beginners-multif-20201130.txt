filename: git-for-beginners-multif_20201130.txt
https://medium.com/@samran.7272/git-for-beginners-part-1-8118a219c513

Git for Beginners - Part 1
Jun 1, 2018

   Git is a great tool for collaborating with your teammates on a project. Generally you will get a lot
   of material on how to use different git commands, but in order to enjoy the whole git experience you
   will need to know why and when to use a particular git command, which this article will help you
   with. You will also learn about some general practices for maintaining a git repository.

Creating a git repository
   There are platforms like GitHub, GitLab etc. on which you can host your repository. Using these
   platforms is very simple and you can create a repository by using their simple graphical user
   interface. If you are using these platforms then you can ignore this section, as this section helps
   you to create a repository on your server which will host the repository. It can be a PC lying around
   or a bought up space on a hosting platform. Following commands are to be run on the server on which
   you are planning to host your repository.
$> mkdir newProject.git
$> cd newProject.git
$> git --bare init

   Here the bare flag is used to initialize a git directory without creating a working directory. As you
   won't be working on the server, it is not recommended to have a working directory on the server.

   On the client you have to run the following commands to fully initialize your git directory. These
   set of commands are required to be run only once from your client.
$> mkdir newProject
$> cd newProject
$> touch .gitignore
$> git init
$> git add .
$> git commit -m "Initial Commit"
$> git remote add origin user@host:~/path_on_server/newProject.git
$> git push origin master

   This will be your first commit to your repository. We will explain the add, commit and push commands
   in later sections. The most important job here was to add an alias for your remote repository. After
   you add "origin" as your remote, your remote repository will have an alias "origin" in your working
   directory. From now on whenever you mention "origin" in your working directory, you will be referring
   to your remote repository URL i.e. "user@host:~/path_on_server/newProject.git".

   It's interesting to note that you can have multiple remote for your repository. As git is a
   distributed version control system it gives to the ability to host your repository on multiple
   servers, you just have to give each remote a different alias and use them accordingly while accessing
   the respective remote repository. You can list all the remotes for your repository by executing the
   following command.
$> git remote -v

   From the above set of commands you can notice that we have created a .gitignore file for the
   repository. This file is important because if you have some files in your repository that you don't
   want to push to the server then you can mention the name of those files in the .gitignore file and
   git will stop tracking the respective files. This can be helpful in case of temp files or executables
   that are generated from code.

Managing keys
   Now you have to copy your public key to the server's authorized_keys file. ssh-copy-id is a tool
   which will do this for you. You can find your ssh key in .ssh directory with the name id_rsa. If you
   can't find a key there, you can generate one by running ssh-keygen tool. Now if you have located your
   ssh key you can run the following command which will copy your public key to the server's
   authorized_keys file.
$> ssh-copy-id -i ~/.ssh/yourKey user@host

   Usually this step is optional, but skipping this step may result in keying in your server password
   every time your make a push or pull to the server. And if you are using a GUI tool like GitKraken
   etc. to make a push or pull you might consider doing this step, as without this step some of the GUI
   tools fails to function properly. Basically when you copy your public key to the server you don't
   need the password to connect to the server, instead the ssh keys are used for authentication which is
   a lot more secure than having a password.

Cloning your repository
   Now with your repository configured you are ready to collaborate with the contributors of your
   repository. Suppose now you want a fresh copy of your repository at a given path. You can run the
   following set of commands to configure your working directory.
$> mkdir newProject
$> cd newProject
$> git init
$> git remote add origin user@host:~/path_on_server/newProject.git
$> git pull origin master

   or you can just use the clone command and git will configure the working directory "newProject" for
   you.
$> git clone user@host:~/path_on_server/newProject.git

Staging your changes
   Git doesn't track the changes you make in your working directory for the next commit. Your changes
   need to be staged, so that git knows what are the files it has to consider for your next commit.
   However you can run git status command to see the summary of your changes made to the working
   directory. Following are the terms used for a file in the working directory.
     * Untracked files : Any new file created in your working directory is not tracked by git. These
       files won't even show up in git status command.
     * Unmodified files : Any file which is not changed since last commit.
     * Modified files : These are the files which have been modified since your last commit
     * Staged files : All the files added by git add command are considered as staged files

   All the files you want to commit should be staged first. You can do this by executing the following
   command.
$> git add filename

   You can also give a folder name instead which will stage all the untracked and modified files for
   next commit. So if you are at the root of your working directory, you can just run the following
   command which will stage all the changes of your working directory.
$> git add .

Committing your changes
   Before you make a commit make sure to set your name and email-id using git config command. You can
   also use global flag to set these parameters globally for every git directory on your machine. These
   parameter will be present in the git history as an identifier of all the commits made by you. You can
   view the git history by executing git log command.
$> git config user.name 'YourName'
$> git config user.email 'your@emailid'

   Now you can commit the staged files by executing the following command.
$> git commit -m "Commit Message"

   Here -m flag is used to mention the Commit message in the command itself otherwise the command will
   open an editor window for you to type in the commit message.

Making your first push
   A commit ensures that your changes are saved and added to the git history locally, but they are not
   available to other users as they are not pushed to the server. You need to push your commits to the
   server so that the changes you have made in the commits are available to others too. By executing the
   following command all your unpushed commits will get pushed to the server.
$> git push origin master

   we will go into details why master is mentioned in the command in the section where we will talk
   about branch. For the time being consider that the master is the default branch of your repository.

Updating your working directory
   While working you would also want to update your working directory. There are two ways in which you
   can keep your working directory updated to all the recent commit that other contributors have made.
   You can either pull or you can fetch from the remote.

   There is a basic difference between the two operations. For this you need to understand that git
   keeps two reference of your repository viz., master and origin/master. master is a reference for the
   local version of your repository whereas origin/master is the reference for the remote version of
   your repository that is present on your machine. When you commit something master is updated.
   origin/master is only updated by your work when you push your commit. But when you want to update
   your working directory to the commits that others have made, you can run the following command.
$> git pull origin master

   It will pull the latest snapshot from the server and update both master and origin/master. But if you
   run fetch only origin/master is updated.
$> git fetch origin master

   As the version that you work in your working directory is master, you won't notice any change in your
   working directory after a fetch command. But you can compare the two version by running the following
   git diff command.
$> git diff master master/origin

   Fetch is useful when you don't want to disturb your working directory but yet you want to see the
   changes that others have made to the repository.

Conclusion
   I hope this article is helpful and has provided you with the basic idea on how git functions. In the
   next part we will see some more basis concepts of git like, branch, merge and rebase.


---
https://medium.com/@samran.7272/git-for-beginners-part-2-6bd24ae9cd05

Git for Beginners - Part 2
Jun 14, 2018

   In the previous part we talked about basic git operations like commit, push and pull. In this
   part we will go into details of branch, merge and rebase. These are the basic tools which will allow
   you to use git with elegance and without these tools you cannot harness the true power of git.

Managing a branch
   While using git you would want to maintain different versions of your repository. This can be a case
   if different people are working on different independent features for the project and you would like
   to maintain independent versions for each feature. Or you want to maintain two versions of your
   repository for the project, one for production which is stable and error free and other for
   development which your team will work on. This is where the concept of branch kicks in. You can
   create a new branch by executing the following command.
$> git branch newFeature

   This will create a local branch in your working directory. You can see the list of branches available
   by executing git branch command. The result will also highlight the current branch. Creating a branch
   with branch command does not take you to the newly created branch by default. In order to switch to
   the newly created branch you would like to execute the following checkout command.
$> git checkout newFeature

   This will switch your working directory to newFeature branch. Alternatively you can use -b flag along
   with checkout command to create a new branch and switch your working directory to the newly created
   branch, both at the same time.
$> git checkout -b newFeature

   Now you can make any changes to your directory and commit them accordingly and it will be added to
   the current branch i.e. newFeature in this case. As your branch is local the remote repository is not
   having a reference for this branch, it will be created only if you make a push from the branch by
   executing the following command.
$> git push origin newFeature

   This will create a reference origin/newFeature on remote. Now anyone can pull the latest snapshot of
   your branch by executing the following command.
$> git pull origin newFeature

   Checkout command is important as it provides you with an option to switch between branches while
   working. It updates your working directory with the latest snapshot of the branch which you have
   switched to. Before every checkout you must run git status command because if you have uncommitted
   changes in your branch, switching branches is not recommended, as all the changes may get lost. You
   need to first commit your changes and make your directory clean and then switch to other branch. But
   sometimes it may happen that you can't commit your work because it is not complete and you still want
   to switch to a different branch, then you would like to stash your changes by executing the following
   command.
$> git stash

   Stash command saves all your uncommitted and untracked changes locally and makes your directory
   clean. You can view your stash entry using git stash list command. Later when you are back in your
   branch you can either apply or pop the stashed changes by executing the following command
   respectively.
$> git stash apply
$> git stash pop

   Both the command are similar with a basic difference, after executing pop command the stash entry is
   deleted unlike apply where the entry persists. Stashing may also come in handy when you want to pull
   onto your uncommitted changes.

   The last and important thing about stash which you would like to know is - stash is a global entry.
   It is available locally to all the branches irrespective of the branch from which it was created. So
   you can pop or apply a stash in any branch. This can be sometimes helpful but can lead to conflicts
   if not used properly, so you should work with them carefully.

Merging branches
   At times you would want to update a branch with the series of commits that have been made to other
   branch. This may be desired to keep your branch updated. This branch can also be the production
   branch which is now ready to be updated by the commits of a feature branch which is now thoroughly
   reviewed and tested. For this you will have to switch to the branch which needs to be updated and
   then merge it with the desired branch. Following sequence of commands are required to be executed for
   this.
$> git checkout production
$> git merge newFeature

   It is necessary to understand that by executing the above sequence of commands only "production"
   branch will get updated, while "newFeature" branch will remain unaffected. One extra commit called
   merge commit will be added by git onto "production" branch, which signifies as the merging point in
   the branch and ensures that all the commits from "newFeature" branch will be present for the
   "production" branch. You can notice in the following figure that "newFeature" pointer has not changed
   while "production" pointer has moved ahead, and now is pointing to the merge commit added by git.
   Image for post
   Image for post Image for post
   Merging newFeature into production

   Git can handle merge even if same files are changed in the two branches. But git is left clueless if
   same set of lines from a file are edited in both the branches or a line is deleted in one branch and
   the same line is modified in another branch. Git is unable to decide which of these changes are
   correct and this situation is termed as merge conflict. As a solution for this case, after merging
   git modifies the file in which merge conflict was detected. Basically it tries to keep both the
   change in the following format, so we can choose which one to keep.
<<<<<<< HEAD
This line was committed to current branch
=======
This line was committed to newFeature branch
>>>>>>> newFeature

   In order to remove the merge conflict, we have to choose which of these lines to keep in our branch,
   and remove the lines starting with <,= and >. Now you can commit this change to your branch.

   Merge conflicts can also happen while making a pull or push. It is very much possible that two people
   may have committed simultaneously onto the same parent commit, while working in their respective
   working directory. Both of them have a different snapshot of the same branch, which requires a merge.
   The person updating his local repository with a pull or updating the remote repository with a push,
   after other one has pushed his commit will experience merge, which may or may not lead to a merge
   conflict. One can wonder why merging is required while making a push or a pull. This happens because
   the local reference of a branch and the remote reference origin/branch are considered as separate
   branches. While pulling or pushing, git merges these two references by fast-forward method.

Rebasing your branch
   Suppose you are working on a feature branch and somebody just committed something to the parent
   branch. If this commit is important to your feature and you wish that your branch forked out from the
   parent after this particular commit, you can try rebasing your branch. When you rebase your branch,
   the base of the branch changes from old parent commit to the latest commit of the branch onto which
   you are rebasing. The important thing to note is that, all the existing commits of your branch are
   created again while rebasing. As the commits are created again, rebasing the branch rewrites the
   history of that branch. New commits are created with new timestamps.
   Image for post
   Image for post Image for post
   Rebasing feature onto master

   In the figure, for the rebased feature branch, the commits highlighted with dark colour are the new
   commits generated by git corresponding to the commits marked with light colour. The light coloured
   commits are not deleted, but they are just not part of any branch. These commits can be seen by
   executing git reflog command. We will talk more about reflog in the next section. Following commands
   are executed to rebase feature branch onto master.
$> git checkout feature
$> git rebase master

   As a thumb rule, one should never rebase a public branch i.e. the branch on which others are working
   too. This kind of rebasing can be dangerous as rebasing is a destructive process and you need to
   force push a rebased branch if the branch is having a remote reference. The other people working on
   the branch may loose their changes. So you should only rebase the branch on which only you are
   working.

   Rebasing is also useful when you want to keep your project history linear. For this you should
   consider rebasing your branch before merging into the parent branch. If you do so git performs a
   fast-forward merge and your project history is left linear and free from any merge commits. Executing
   the following sequence of commands will merge feature branch into master, in a fast-forward way.
$> git checkout feature
$> git rebase master
$> git checkout master
$> git merge feature

   You can rebase your branch in an interactive mode by giving -i flag. In this mode a terminal will
   open and you can choose how your new history will look like.

   All the things which can be achieved by rebase can also be done using merge. Both commands have their
   own way of doing things. If you are a beginner and scared of any complications, you should go with
   merge option as it is a non-destructive option.

Solving the detached HEAD problem
   HEAD is a reference which points to the current state of your working directory. Basically it points
   to the tip of the current branch, so when you checkout a branch, HEAD starts pointing to the tip of
   the switched branch.

   If you want to see how your repository looked after a particular commit, you can use the checkout
   command here as well. Checkout can also be used to switch to a particular commit. This mode is called
   a detached HEAD mode because in this particular case the HEAD reference is not present at the top of
   a branch, instead it is now pointing to a commit. You can execute the following command in order to
   do this. If you try to checkout to an upstream branch like origin/master, then this state is also
   termed as detached HEAD.
$> git checkout commit-hash

   To go back to the normal mode you need to switch back to a branch by executing the following command.
$> git checkout branch

   You should not make any changes in a detached HEAD mode, as you are not at the tip of a branch and
   any commit performed in this mode is termed as orphaned commit and are not included in any branch.
   But if you have made some changes and you wish to keep these changes, there are two methods which you
   can consider in order to achieve this.

   First solution is to create a temporary branch at this particular commit and then commit your changes
   to this branch. Now merge this temporary branch into the parent branch. You should resolve any merge
   conflict, if one occurs.
$> git checkout -b tempBranch
$> git add .
$> git commit -m "Changes at detached HEAD to be Retained"
$> git checkout branch
$> git merge tempBranch

   Second method is to commit these changes there, then switch back to your parent branch. Check reflog
   to find the commit-hash corresponding to the commit and then cherry-pick that commit to your branch.
$> git add .
$> git commit -m "Changes at detached HEAD to be Retained"
$> git checkout branch
$> git reflog
$> git cherry-pick commit-hash

   Reflog command displays the ordered list of commits that HEAD has pointed to in the past. All the
   commits and checkouts you have made will be stored in this history. This is a useful command if you
   wish to recover a deleted branch or a orphaned commit. Cherry-pick is another useful command which
   allows you to apply all the changes made in one commit to any other branch. Git will simply create an
   identical commit at the top of that branch.

Conclusion
   I hope this article was helpful and you have got some basic insight on how to collaborate properly
   using git. In the next part we will talk about the different methods used for undoing changes in
   git.


---
https://medium.com/@samran.7272/git-for-beginners-part-3-955f5aa03d0f

Git for Beginners - Part 3
Jul 4, 2018

   Last part was all about moving forward in your repository with commands like branch, merge and
   rebase. Whereas in this part we will talk about how to go backward in time with respect to your
   repository, or in other words undoing changes. We will talk about the options you have in situations
   where you have made some changes to your repository and now you want to undo them. We will also talk
   about the extent to which you can undo your work using git.

Checking out a file
   In the previous part we saw how checkout command can be used to switch between branches or commits.
   However it can be used to undo changes in your git repository too. Suppose you have made some changes
   in a file which is not staged yet and you want to discard this change, in this case you can use the
   checkout command along with the filename.
$> git checkout -- filename

   Executing the above command discards the unstaged changes that you made to the respective file since
   the last commit. This option should be used carefully as you can't recover the unstaged changes
   discarded by this command.

   If you wish to revert a file to a particular commit's version you can also achieve this with checkout
   command. When you mention the commit-hash in the following command along with the filename, the
   respective file will be updated with the version corresponding to the respective commit. The updated
   file will be staged automatically by git and in order to propagate this change you will have to
   commit and push this newly staged file. Or you can make some changes onto this version and stage it
   again by git add command.
$> git checkout commit-hash -- filename

   Commit hash which can be found by executing git log command, is a convenient way of mentioning a
   commit in any command. However you can also mention a particular commit if you only know that it
   happened n commits before a reference. For example, for a commit which happened 2 commits before the
   current commit which is pointed by the reference master(if you are working in master branch) or HEAD,
   can be mentioned in the following manner using ~ symbol.
$> git checkout master~2 -- filename

   If you wish to select only a few lines from a previous version try using patch mode by giving -p flag
   in the above command.

   The command with the commit reference and the one without the commit reference are both the same
   although they serve different purposes. The first command in which we didn't mention a commit
   reference, used index as the default reference. Index is a file maintained by git which in a way
   stores information about your staging area. All the staged changes are indexed in this file. When you
   run the above checkout command without the commit reference, it pulls the staged version of that
   particular file. This is the reason why all the unstaged changes were discarded by the first command
   as they are not indexed in the index file.

Starting a new Branch
   Checking out a commit as discussed in the previous part(detached HEAD mode) also gives us a way to
   undo changes. Suppose you want to go back to a particular commit and want to discard all the changes
   that have been made after that and restart your development from that respective commit. In this
   scenario you can try executing the following commands which will start a new branch from an old
   commit. After this you can delete your previous branch and eventually all the commits of that branch
   will be deleted by the git's garbage collector after sometime. If the previous branch is a public
   branch it can be left as it is.
$> git checkout commit-hash
$> git branch newBranch
$> git checkout newBranch

   Alternatively the above sequence of commands can be squeezed into a single command which is given
   below.
$> git checkout -b newBranch commit-hash

   This is a non destructive way of resetting to a commit, which is explained in the reset section.

Amending a commit
   You also have an option to modify your last commit which gives you the ability to include more
   changes to your last commit or modify the last commit-message or a combination of both. Just mention
   amend flag in the commit command and it will amend your last commit.
git commit --amend -m "New Message"

   By executing the above command all the staged file will be added to the last commit and along with
   this your commit message will also get updated. If you run this command without any staged changes it
   will only update the commit message. However if you want to keep the commit message and only want to
   add the staged changes to the last commit, you should mention the following no-edit flag in your
   command.
$> git commit --amend --no-edit

   You should never amend a commit which is already pushed to the remote repository as it will affect
   others who have a copy to this commit in their repository. You can anyway go ahead and force push
   your amended commit, but you should refrain from doing it. This command should only be used for local
   commit which hasn't been pushed yet.

Resetting staged files
   If you want to discard some changes from a staged file, you will need the following reset command.
$> git reset -- filename

   This command will unstage the file, following which you can use the checkout(file) command to discard
   the changes permanently from your working directory. This command can be only be helpful when you
   want to discard some staged changes completely. In order to make a slight modification you don't have
   to unstage the file, you can make the necessary changes and stage the file again.

Resetting to a commit
   Reset command can also be used to undo commits. It moves the HEAD reference to a commit along with
   the branch reference, which means that all the commits after the mentioned commit will no longer
   exist in your branch. This is different from the checkout(commit) command where only the HEAD is
   updated and your branch reference is left untouched.
$> git reset commit-hash

   This command can be executed in three modes which lets you decide the fate of the changes that you
   have just discarded from your branch. The three important modes in which you can use the command are:
     * soft
     * hard
     * mixed

   Soft mode is a non destructive mode of execution for the reset command. You can execute the following
   command to reset to a commit in soft mode.
$> git reset --soft commit-hash

   Suppose you have a series of commits in your branch and you want to reset your branch to the commit
   C(follow the diagram given below). After executing the soft reset command the HEAD and master(which
   is your current branch in this case) references starts pointing to the commit C. All the changes done
   in commit D and E which is also the diff of the commits E and C are staged by git. If you had any
   unstaged changes in your working directory prior to the execution of this command, it will remain
   untouched. So basically in this mode git does not modify your working directory nor your staging
   index, it just update your branch and HEAD references. As the staging index is not modified hence the
   changes undone are present in your staging area.
   Image for post
   Image for post Image for post
   Effects of git reset --soft C

   Hard flag when used with reset command resets both - the working directory as well as the staging
   index. It is a destructive mode and should be used carefully. Following command can be used in order
   to hard reset a branch to a particular commit.
$> git reset --hard commit-hash

   We will take the same example and apply the hard reset to the master branch which is currently
   pointing to the commit E(follow the diagram given below). As you can see that after hard resetting
   the branch to commit C, all the changes included in the commits D and E are lost. This happens
   because the working directory and the staging index are both reset to match the commit C. As the
   result of which all uncommitted changes prior to this commit - unstaged or staged are also lost in
   the process. It gives you a clean working directory which exactly matches the snapshot pointed by the
   HEAD reference.
   Image for post
   Image for post Image for post
   Effects of git reset --hard C

   Mixed reset is a combination of both the previous mode. In this mode only staging index is reset to
   match the given commit, whereas the working directory is left untouched. Following command can be
   executed to achieve a mixed reset. However this is the default mode for the reset command , hence the
   --mixed flag can also be dropped in this case.
$> git reset --mixed commit-hash

   From the diagram given below you can see how the changes included in the commits E and D are present
   in your working directory but are unstaged after a mixed reset. It is important to note that all the
   staged changes prior to the execution of this command will also become unstaged, as the staging index
   is reset to match the commit C.
   Image for post
   Image for post Image for post
   Effects of git reset --mixed C

   While selecting a mode for your reset command, always think about the extent to which you want to
   reset your branch. Always think about the effects of the mode on the staging index and the working
   directory. It will help you choose the right mode.

   If you want to undo a reset command, you can again reset your branch to the commit it was previously
   pointing to. You just need to run a git reflog command and find the hash for that commit and run the
   reset command again with the appropriate flag. Even a hard reset can be undone, however only
   committed changes would be recovered in this case, as all the uncommitted changes discarded by a hard
   reset are lost forever.

   It is worth mentioning that if you don't provide a commit reference to the reset command it takes
   HEAD as its default argument. So it's quite intuitive that if you execute the following command it
   will delete all the uncommitted changes from your working directory and thus make your working
   directory clean.
$> git reset --hard

   And it goes without saying that when you execute the following command it will unstage all your
   staged changes and make the staging area clean.
$> git reset

   If you are resetting your branch to a previous commit which has already been pushed, it's important
   to make sure that the branch is not a public branch. Otherwise you will need a force push which may
   affect others working on the same branch.

   P.S. You should make a general thumb rule that whenever git requires a force push for a public branch
   just don't do it. Git is full of options and you can surely find a non-destructive way of doing the
   same.

Reverting a commit
   If you wish to undo a commit in a non-destructive way, you can try the revert command. This command
   takes a commit as its argument and undo all the changes defined in that commit by adding a new commit
   onto the current branch. This new commit contains all the changes done in order to undo the given
   commit or in other words the new commit is a mirror image for the mentioned commit. The following
   command is used to revert the changes of a particular commit.
$> git revert commit-hash

   In the following diagram you can see that in order to revert commit C git has added a new commit C'
   which contains the inverse of the changes done in the commit C. After the revert operation the
   working directory will look like as if the commit C never happened.
   Image for post
   Image for post Image for post
   Reverting commit C

   If you pass the no-commit flag to this command in the following way, git will revert the commit
   without adding a new revert commit, instead all the undone changes will be staged by git.
$> git revert --no-commit commit-hash

   This is sometimes desired as you would want to make some more changes on top of the undone changes.
   And after you are done with the additional changes you can manually commit them or you can execute
   the revert command with the continue flag, which allows git to create a commit for the revert
   operation.
$> git revert --continue

   It is important to keep in mind that the revert command is only reverting a single commit, so if you
   have some commits which are dependent on the commit that you are reverting, it's logical to revert
   all of them in order to avoid any inconsistency in your project. You can execute the following set of
   command to revert multiple commits at once.
$> git revert --no-commit A
$> git revert --no-commit B
$> git revert --no-commit C
$> git commit -m "Revert Message"

   This can also happen when a set of commits represent a feature and you wish to revert the whole set
   of commit in order to revert the respective feature.

   If the multiple commits that you are reverting happens to be sequential then you can use the
   following command to revert a range of commits at once.
$> git revert --no-commit HEAD~3..HEAD
$> git revert commit -m "Revert Message"

   The first command in above sequence will revert the last four commits of your current branch without
   creating a new commit. The second command can be used to commit the undone changes.

   You should always use the no-commit flag and commit manually while reverting multiple commits, as git
   does not provide an appropriate commit message for multiple reverts.

   Reverting a merge commit can be tricky as two branches are involved for the commit and git is unable
   to decide which of the two set of changes to revert. Reverting a merge commit means that you want to
   undo the merge, so you need to choose which branch to keep as your mainline and the changes brought
   by the other branch involved will be discarded. The -m flag is used for mentioning the parent number
   - 1 for first parent and 2 for second parent. Parent information can be found in the commit details
   of the merge commit which can be displayed by the git log command.
$> git revert commit-hash -m parent_number

   Revert is useful, as all your doing and undoing are maintained in the git history and moreover you
   can perform this operation fearlessly even on a public branch as you are not rewriting the git
   history.

Cleaning untracked files
   Another command which you can consider keeping in your arsenal for undoing changes is the clean
   command. While the checkout and reset commands can only handle the files which are tracked by git,
   they will just ignore untracked files. If you want to get rid of all the untracked files from your
   working directories, you can try executing the following command.
$> git clean -f

   Although an untracked file can also be removed by rm command, but you have to specify the path of the
   files and make sure that the file is untracked or not by executing the git status command. If you
   wish to avoid these you can go ahead with the clean command. It is important to note the -f flag,
   which is a safety mechanism and without which git will throw an error for this command. If you wish
   to dry run this command you can also do this with -n flag. This will not remove any file and only
   inform you about the files which will be removed by the clean command.
$> git clean -n

   There are other important flags too, which you can use like, -i for interactive mode, -x for removing
   untracked ignored files and -d for removing untracked directories.

Conclusion
   As you can see that you have multiple options for undoing changes in your git repository. The option
   which you will choose will depend upon the circumstance and your requirement. Following diagram is a
   basic guide which will help you in making this choice and can be used as reference. The commands
   written below the arrow in orange can be used to undo the operation written above the arrows
   mentioned in green.


---
