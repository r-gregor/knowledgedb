filename: git_dotfiles_20220405.txt
https://www.atlassian.com/git/tutorials/dotfiles

The best way to store your dotfiles: A bare Git repository

Disclaimer: the title is slightly hyperbolic, there are other proven solutions to the problem. I do think
the technique below is very elegant though.

Recently I read about this amazing technique in an Hacker News thread
[**1][https://news.ycombinator.com/item?id=11070797] on people's solutions to store their dotfiles. User
StreakyCobra showed his elegant setup and ... It made so much sense! I am in the process of switching my own
system to the same technique. The only pre-requisite is to install Git.

In his words the technique below requires:
No extra tooling, no symlinks, files are tracked on a version control system, you can use different branches
for different computers, you can replicate you configuration easily on new installation.

The technique consists in storing a Git bare repository
[**2][http://www.saintsjd.com/2011/01/what-is-a-bare-git-repository/] in a "side" folder (like $HOME/.cfg or
$HOME/myconfig) using a specially crafted alias so that commands are run against that repository and not the
usual .git local folder, which would interfere with any other Git repositories around.

Starting from scratch
If you haven't been tracking your configurations in a Git repository before, you can start using this
technique easily with these lines:

$> git init --bare $HOME/.cfg
$> alias cnfg='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
$> cnfg config --local status.showUntrackedFiles no
$> echo "alias cnfg='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'" >> $HOME/.bashrc

	The first line creates a folder ~/.cfg which is a Git bare repository that will track our files.
	Then we create an alias cnfg which we will use instead of the regular git when we want to interact with
	our configuration repository.
	We set a flag --local to the repository - to hide files we are not explicitly tracking yet. This is so that
	when you type cnfg status and other commands later, files you are not interested in tracking will not
	show up as untracked.
	Also you can add the alias definition by hand to your .bashrc or use the the fourth line provided for
	convenience.

I packaged the above lines into a snippet up on Bitbucket and linked it from a short-url. So that you can
set things up with:

$> curl -Lks http://bit.do/cfg-init | /bin/bash

After you've executed the setup any file within the $HOME folder can be versioned with normal commands,
replacing git with your newly created cnfg alias, like:

$> cnfg status
$> cnfg add .vimrc
$> cnfg commit -m "Add vimrc"
$> cnfg add .bashrc
$> cnfg commit -m "Add bashrc"
$> cnfg push

Install your dotfiles onto a new system (or migrate to this setup)

If you already store your configuration/dotfiles in a Git repository, on a new system you can migrate to
this setup with the following steps:

	Prior to the installation make sure you have committed the alias to your .bashrc or .zsh:

$> alias cnfg='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'

	And that your source repository ignores the folder where you'll clone it, so that you don't create weird
	recursion problems:

$> echo ".cfg" >> .gitignore

	Now clone your dotfiles into a bare repository in a "dot" folder of your $HOME:

$> git clone --bare <git-repo-url> $HOME/.cfg

	Define the alias in the current shell scope:

$> alias cnfg='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'

	Checkout the actual content from the bare repository to your $HOME:

$> cnfg checkout

	The step above might fail with a message like:

error: The following untracked working tree files would be overwritten by checkout:
	.bashrc
	.gitignore
Please move or remove them before you can switch branches.
Aborting

This is because your $HOME folder might already have some stock configuration files which would be
overwritten by Git. The solution is simple: back up the files if you care about them, remove them if you dont
care. I provide you with a possible rough shortcut to move all the offending files automatically to a
backup folder:

$> mkdir -p .config-backup && \
$> cnfg checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | \
$> xargs -I{} mv {} .config-backup/{}

	Re-run the check out if you had problems:

$> cnfg checkout

	Set the flag showUntrackedFiles to no on this specific (local) repository:

$> cnfg config --local status.showUntrackedFiles no

	You're done, from now on you can now type cnfg commands to add and update your dotfiles:

$> cnfg status
$> cnfg add .vimrc
$> cnfg commit -m "Add vimrc"
$> cnfg add .bashrc
$> cnfg commit -m "Add bashrc"
$> cnfg push

Again as a shortcut not to have to remember all these steps on any new machine you want to setup, you can
create a simple script, store it as Bitbucket snippet like I did, create a short url for it and call it like
this:

$> curl -Lks http://bit.do/cfg-install | /bin/bash

For completeness this is what I ended up with (tested on many freshly minted Alpine Linux containers to test
it out):

$> git clone --bare https://bitbucket.org/durdn/cfg.git $HOME/.cfg

function cnfg {
	/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME $@
}
mkdir -p .config-backup
cnfg checkout
if [ $? = 0 ]; then
	echo "Checked out config.";
	else
	echo "Backing up pre-existing dot files.";
	cnfg checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} mv {} .config-backup/{}
fi;
cnfg checkout
cnfg config status.showUntrackedFiles no

Wrapping up
I hope you find this technique useful to track your configuration. If you're curious, my dotfiles live here
[https://bitbucket.org/durdn/cfg.git].

Also please do stay connected by following @durdn or my awesome team at @atlassiandev.



---
[**1]
https://news.ycombinator.com/item?id11070797

   Ask HN: What do you use to manage dotfiles?
   Feb 10, 2016

***   
   StreakyCobra on Feb 10, 2016
   I use:

    $> git init --bare $HOME/.myconf
    $> alias cnfg='/usr/bin/git --git-dir=$HOME/.myconf/ --work-tree=$HOME'
    $> cnfg config status.showUntrackedFiles no

   where my ~/.myconf directory is a git bare repository. Then any file within the home folder can be
   versioned with normal commands like:

    $> cnfg status
    $> cnfg add .vimrc
    $> cnfg commit -m "Add vimrc"
    $> cnfg add .config/redshift.conf
    $> cnfg commit -m "Add redshift config"
    $> cnfg push

   And so oneâ€¦

   No extra tooling, no symlinks, files are tracked on a version control system, you can use different
   branches for different computers, you can replicate you configuration easily on new installation.

***
   To complete the description of the workflow (for others), you can replicate your home directory on a
   new machine using the following command:

   $> git clone --separate-git-dir=~/.myconf /path/to/repo ~

   This is the best solution I've seen so far, and I may adopt it next time I get the itch to
   reconfigure my environment.

***
   For posterity, note that this will fail if your home directory isn't empty. To get around that, clone
   the repo's working directory into a temporary directory first and then delete that directory,

    $> git clone --separate-git-dir=$HOME/.myconf /path/to/repo $HOME/myconf-tmp
    $> cp ~/myconf-tmp/.gitmodules ~  # If you use Git submodules
    $> rm -r ~/myconf-tmp/
    $> alias cnfg='/usr/bin/git --git-dir=$HOME/.myconf/ --work-tree=$HOME'

   and then proceed as before.

***
   Finally got mine working, it does need some figuring out especially the replication part. I
   documented the needed commands here:
   https://github.com/Siilwyn/my-dotfiles/tree/master/.my-dotfi...

***
   I'll check how you did it. I wrote my notes and a couple of scripts down in a post:
   https://developer.atlassian.com/blog/2016/02/best-way-to-sto...

***
   Because the working tree is already your home folder, you don't need to also have a copy of these
   files in ".myconf/".

***
   It contains the files that would normally be in .git (run `git help gitrepository-layout` for more
   details on the contents).

***
   Honestly this is genius! I hadn't thought of doing it like that, thank you! I had resorted to the
   usual .cfg folder and a helper script to link/update everything.

***
   Could you explain how this works? Won't this be putting the .bashrc in $HOME/.myconf/.bashrc, which
   won't get picked up by bash? (And similar for other dotfiles)

***
   No, since the config alias runs git with the option "--work-tree=$HOME", which tells it that the
   working directory is your home directory root, i.e. where config files (used to) live.

   Anyway it's the proper root for config files, since if you use a .config directory (as seems to be
   the modern choice) that needs to live in your home directory of course.

***
   (I have a separate branch for windows, but I found out that branches are not a good solution for
   this, since unlike feature branches, they'll never be truly merged... and unlike maintainance
   branches, they'll never stop being touched due to being out of maintanance)

   And I use my own script, to also support Windows (since ansible supports windows targets, but cannot
   be used from Windows)... I defined this table with the destination for the symlinks (or, in the case
   of .ghci the destination where to copy it, since symlinking it wouldn't work)

   https://github.com/berdario/dotfiles/blob/master/deploy.py#L...

***
   Git and Xstow. I have a small shell script that parses the xstow.ini file and creates all the
   directories I have listed under the [keep-dirs] directive in order to prevent it from deleting empty
   directories or replacing them with links.

#!/usr/bin/env bash

#Read the keep directories from xstow.ini
	ini="$(<'xstow.ini')"
	IFS=$'\n' && ini=( ${ini} )
	ini=( ${ini[*]/\    =/=} )  # remove tabs before =
	ini=( ${ini[*]/=\   /=} )   # remove tabs after =
	ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =

#for each keep dir make sure it exists in the home dir
	for i in ${ini[@]}
	do
		if [[ $i =~ ^\ *dir ]]
		then
			eval $i
			mkdir $dir
		fi
	done

***
   I've probably spent hundreds of hours across all my configs over the years. In the old days, I'd
   rsync config files manually. Having frustrating times where I had to start everything over again.

   I have a lot to say on the subject.

   1. Like other users here, git is a great way version your files. Not just that, it handles the issue
   you have with keeping the configs of various systems in sync.

   1b. It doesn't have to be GitHub, but understand pushing to some remote gives you a backup, and a way
   to keep the latest configs you have in sync across multiple machines.

   2. As a rule of thumb, the more POSIX compliant you are, the more cross-compatible your dot-configs
   will be. In my case, a great deal of my config works superbly across Ubuntu, FreeBSD and OS X with no
   modification whatsoever.

   3. dotfiles (https://pypi.python.org/pypi/dotfiles) is very helpful for building those initial
   symlinks.

   4. Tangentially related is PATH's. Definitely be sure you're not accidentally appending multiple
   one's over again or omitting ones you want to search. For this, I recommend a pathappend function
   like one used at http://superuser.com/a/753948.

   5. As for managing vim / neovim, I'm coming to the realization the amount of time I've spent trying
   to configure completion / fix tiny things over the years probably makes me lose the net benefit vim
   has given me. Too bad there is no intellij for the CLI. In any event, I keep a vim config at
   https://github.com/tony/vim-config which I document extensively. It has quite a lot of bells and
   whistles, but lazy loads and checks the system before installing certain plugins. It should work with
   neovim too.

   I keep my central dot-configs (along with its submodules) at
   https://github.com/tony/.dot-config. Its permissively licensed, so feel free to copy whatever
   you'd like.

***
   I have everything in ~/dotfiles which is a git repository here:
   https://github.com/dmarcoux/dotfiles. Basically, I use GNU Stow to symlink what I need. I have
   master which contains common config and one branch per computer. Everything is explained in the
   README, in more details if you want do know more. It's not perfect yet, I still have some small
   irritants, but I'm quite happy with this setup.

***
   I have a modular family of git repos with a 'dotfiles' one that pulls in the dependencies via bower
   and handles various bootstrapping and install steps. I also have one for my system config which works
   similarly. Vim, zsh, and tmux have their own standalone repos with one step install and updating
   scripts. They are written as normal plugins that load other plugins.

   I want to avoid vendor lock-in to something like chef for this. The idea is that everything is either
   defined in a tool-agnostic config file, and bootstrapping / installing / updating the dependencies is
   handled by simple shell scripts. Down the road I can always swap out the tooling (bower,
   config_curator, archutil) without updating code in my repos since state is defined as data.

   I don't like syslinks or putting ~/ under git as I don't want my working tree to affect my dotfiles
   until I run an "install" command.

   https://github.com/rxrc

   https://github.com/rxrc/dotfiles

***
   Just git and Github.I have two folders, a .dotfiles (https://github.com/Arc0re/dotfiles) that
   contains stuff like .emacs (for each OS), .bashrc/.zshrc, etc, which I symlink into my $HOME folder,
   and an elisp (https://github.com/Arc0re/mac-elisp) folder that contains my Emacs themes and
   plugins.

***
   Just git.

  cd ~
  git init
  git remote add origin https://sgtpep@github.com/sgtpep/dotfiles.git
  git fetch
  git checkout -ft origin/master
  git config status.showUntrackedFiles no

***
    cd ~
    git init

   And add this to a .gitignore:

    # Ignore everything
    *

    # Except the dotfiles I explicitely want to share
    !.vimrc
    !.tmux.conf
    # ...



---
[**2]
https://www.saintsjd.com/2011/01/what-is-a-bare-git-repository/

What is a bare git repository?
26 Jan 2011

   UPDATED: 5/30/2015 - Fixed inaccurate description of where files are stored in bare git repositories
   and updated explanations of both bare and no-bare repositories

   What is the difference between a repository created using the git init command and the git init
   --bare command?

   Repositories created with the git init command are called working directories. In the top level
   folder of the repository you will find two things:
    1. A .git subfolder with all the git related revision history of your repo
    2. A working tree, or checked out copies of your project files.

   Repositories created with git init --bare are called bare repos. They are structured a bit
   differently from working directories. First off, they contain no working or checked out copy of your
   source files. And second, bare repos store git revision history of your repo in the root folder of
   your repository instead of in a .git subfolder. Note... bare repositories are customarily given a .git
   extension.

   Why use one or the other?
   Well, a working repository created with git init is for... working. It is where you will actually edit,
   add and delete files and git commit to save your changes. If you are starting a project in a folder
   on your dev machine where you will add, edit and delete files of your project, use "git init". Note:
   if you git clone a repository you will be given a working repository with the .git folder and copies
   of the working files for editing.

   A bare repository created with git init --bare is for... sharing. If you are collaborating with a team
   of developers, and need a place to share changes to a repo, then you will want to create a bare
   repository in centralized place where all users can push their changes (often the easy choice is
   github.com). Because git is a distributed version control system, no one will directly edit files in
   the shared centralized repository. Instead developers will clone the shared bare repo, make changes
   locally in their working copies of the repo, then push back to the shared bare repo to make their
   changes available to other users.

   Because no one ever makes edits directly to files in the shared bare repo, a working tree is not
   needed. In fact the working tree would just get in way and cause conflicts as users push code to the
   repository. This is why bare repositories exist and have no working tree.

   To summarize
   I use a working directory created with git init or git clone when I want to add, edit and delete
   files in myproject locally on my dev machine.

   When I am ready, I share my local changes with a git push to a bare repository myproject.git (usually
   on a remote server like github.com) so other developers can access my local changes.



---

