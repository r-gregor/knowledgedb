filename: git_create-github-repositories-from-cli-multif_20250210.txt
https://stackoverflow.com/questions/28385884/how-to-create-repository-in-github-through-github-api

How to create repository in github through github API?

   I am trying to use github api to create repositories under a particular organization. I was looking
   at this site which talks about how to create repositories under a particular organization.
Create a new repository in this organization. The authenticated user must be a member of the specified
organization.

   Now I am not able to understand what will be my full URL that I need to use to create the repository
   under a particular organization? I have my username and password which I can use to create the
   repository under an organization through https url.

   My github instance url is like this - https://github.host.com

   And I want my repository to be like this after getting created -
https://github.host.com/Database/ClientService

   What will be my curl command look like to create the repository under an organization?

***
   Go to Settings -> Developer Settings -> Personal Access Token Under OAuth Apps. Now, Generate a New
   Access token with Required privileges enabled. Ignore This if you already have one.

User Account:
   Replace ACCESS_TOKEN with Token and NEW_REPO_NAME with your New Repository Name in the command below:
curl -H "Authorization: token ACCESS_TOKEN" --data '{"name":"NEW_REPO_NAME"}' https://api.github.com/user/repos

Organization:
curl -H "Authorization: token ACCESS_TOKEN" --data '{"name":"NEW_REPO_NAME"}' https://api.github.com/orgs/ORGANIZATION_NAME/repos

***
   Step 1: Create a personal access token and use it in place of password

   Step 2: On command line use the given API as a POST request
https://api.github.com/orgs/<organisation_name>/repos?access_token=<generated token>

   or
https://api.github.com/user/<username>/repos?access_token=<generated token>

   In body, pass this as a payload:
{
  "name": "<Repo Name>",
  "description": "<Some message>",
  "homepage": "https://github.com",
  "private": false,
}

   You can pass other details.
   For more details: [https://developer.github.com/v3/repos/#create]click here

***
   To create a new repo in github for Enterprise this worked for me:

   Please change the value in angular brackets before executing. Put username:token after -u
curl -u https://github.com/api/v3/orgs/<org-name>/repos -d '{"name":"<reponame>"}

***
   Based on the two above answers, here's a bash >=4.2 script to create a clone a repo.
#!/usr/bin/env bash
TOKEN=0000000000000000000000000000000000000000

if [[ $# < 3 ]]; then
echo "arguments: $0 <RepoName> <RepoDescription>"
exit 1
fi

REPO_NAME=$1; shift
REPO_DESCRIPTION="$@"

echo "Name: $REPO_NAME"
echo "Description: $REPO_DESCRIPTION"
echo "Calling GitHub to create repo"

read -r -d '' PAYLOAD <<EOP
{
	"name": "$REPO_NAME",
		"description": "$REPO_DESCRIPTION",
		"homepage": "https://github.com/$REPO_NAME",
		"private": false
}
EOP

shopt -s lastpipe
curl -H "Authorization: token $TOKEN" --data "$PAYLOAD" \
	https://api.github.com/user/repos | readarray output

url=''
for line in "${output[@]}"; do
	echo -n "$line"
	#   "html_url": "https://github.com/sfinktah/vim-hex-sum",
	if [[ $line == *html_url* ]]; then
		l=${line#*\"}; l=${l#*\"}; l=${l#*\"}; url=${l%\"*}
	fi
done

count=0
[[ $url == http*://*github.com/* ]] &&
		until git clone $url; do
			sleep 10; (( count++ > 5 )) && break; echo Waiting...
		done

***
   Checkout this answer this is an old method, without installing github cli
   create repo in terminal directly with api
   replace userName and repoName

curl -u "userNameHere" https://api.github.com/user/repos -d > '{"name":"repoNameHere","private":true}'

   enter password and done

   for more info refer new official doc [https://docs.github.com/en/rest/reference/repos#create]here


---
https://gist.github.com/alexpchin/dc91e723d4db5018fef8

Create a new repository on the command line
February 8, 2025 06:59

Setting up a new Git Repo

   ##Create a new repository on the command line
$> touch README.md
$> git init
$> git add README.md
$> git commit -m "first commit"
$> git remote add origin git@github.com:alexpchin/<reponame>.git
$> git push -u origin master

   ##Push an existing repository from the command line
$> git remote add origin git@github.com:alexpchin/<reponame>.git
$> git push -u origin master

***
so I thought I'd leave this here to help everyone else who was having similar issues:
$> mkdir myDirName    #this is the name of your directory
$> cd /myDirName
$> git init
$> touch readME.md   #this is to create an initial file to push
$> git commit -m "enter commit message here"
$> git remote add origin git@github.com:YOUR_USERNAME/myDirName.git

$> curl -u USERNAME:PASSWORD https://api.github.com/user/repos -d '{"name":"myDirName"}'

# if you haven't generated and SSH key for github access then follow these steps, otherwise you're good to
$> push your shit to github.
$> eval $(ssh-agent -s)
$> ssh-keygen -t rsa -b 4096 -C "email@yourdomain.com" #this should be your github email address

## you'll be prompted to a couple of times. Press enter for the first prompt. choose a passphrase for the
second prompt, or press enter twice for no passphrase

ssh-add ~/.ssh/id_rsa   #this is your private key
cat ~/.ssh/id_rsa.pub   # copy the output of this command. this is your SSH public key

#the value you copied earlier and your keyname. I recommend using a combination of machine name and app (My-laptop (Git CLI)
$> curl -u USERNAME:PASSWORD https://api.github.com/user/keys -d '{"title":"KEY_NAME", "key":"YOUR_RSA_PUBLIC_KEY_HERE"}'
$> git push -u origin master

You can certainly change the order of steps and do the curl commands ssh generation first to
create the repo and push the keys, but I used this flow just because.

***
   Anyone who wants to have their own project.sh simple do varible $name I have modified the code above
   based on code above.
$> echo Please Provide New Repo Name:
$> read name

$> mkdir $name    #this is the name of your directory
$> cd /$name
$> git init
$> touch $name/readME.md   #this is to create an initial file to push
$> git commit -m "enter commit message here"
$> git remote add origin git@github.com:YOUR_USERNAME/$name.git

#this will create the repo in github
$> curl -u USERNAME:PASSWORD https://api.github.com/user/repos -d '{"name":"'$name'"}'

# if you haven't generated and SSH key for github access then follow these steps, otherwise you're good to
push your shit to github.

$> eval $(ssh-agent -s)
$> ssh-keygen -t rsa -b 4096 -C "email@yourdomain.com" #this should be your github email address

## you'll be prompted to a couple of times. Press enter for the first prompt. choose a passphrase for the
## second prompt, or press enter twice for no passphrase
$> ssh-add ~/.ssh/id_rsa   #this is your private key
$> cat ~/.ssh/id_rsa.pub   # copy the output of this command. this is your SSH public key

# the value you copied earlier and your keyname. I recommend using a combination of machine name and app
# (My-laptop (Git CLI)
$> curl -u USERNAME:PASSWORD https://api.github.com/user/keys -d '{"title":"KEY_NAME", "key":"YOUR_RSA_PUBLIC_KEY_HERE"}'
$> git push -u origin master

***
I have created this script. It allows for a repo to be created from terminal without having to
create it on github/bitbucket first.

It uses Personal Access Token for authentication on github and regular user:password auth on
bitbucket

[https://github.com/Joe-a-d/CLI/blob/master/git-new/git-new]git-new CLI

***
I think instead of SSH, This Might also Works Fine!!

curl https://api.github.com/user/repos?access_token=myAccessToken -d '{"name":"REPO_NAME"}'

If you Don't have an Access Token You could Just go to Git Hub Settings > Developer Settings >
Personal Access Tokens and Get your Token Replace that in the Curl Command.

$> git remote set-url origin https://github.com/user name/repo_name.git
$> git remote add origin https://github.com/user name/repo_name.git
$> git push -u origin main


---
https://robinwinslow.uk/create-github-repositories-from-the-command-line

Using Github's API to create repositories from the command-line
7th June 2013

   Git and GitHub are fantastic tools for any kind of project. As soon as you start any piece of
   text-based work - be it a program, a diary or a novel - it makes sense to keep version control, and
   to have it backed up online somewhere.

   So I'm now getting into the habit of setting up a git repository for the smallest of tasks:

$> mkdir ~/projects/canvas-play && cd !             #:1 # Make a new project directory
$> sublime-text index.html                          # do some playing around with canvas
$> git init                                         # make a repository
$> git add index.html                               # add my new canvas playing around
$> git commit -m 'Played around with some canvas'

   That's great. I've got version control. But the real dream is to put that repository online somewhere
   so I can carry on working if I'm not at my computer, or I could smash my computer against the wall
   and not have lost my work.

   The standard way isn't that difficult. Browse to GitHub, login, click "new repo" or whatever, type a
   name, copy the URL, then come back to the command-line. It only takes a minute or two, but it's kinda
   annoying to do that every time. I don't like touching the mouse if I can help it.

Updated solution: Hub
   After I posted my solution (below) my friend @timmow mentioned that there is an existing project
   that provides a whole bunch of extension commands for Github - including creating repositories and
   managing pull requests.

   It's called "Hub", and to be honest it might be simpler for you to just use that rather than my
   solution below.

My solution
   So I found this solution on StackOverflow (of course). The following command uses curl to talk to
   the GitHub API to create a repository:

# replace USER and REPO with real values
# but *not* the "/user/" in the GitHub URL
$> curl -u 'USER' https://api.github.com/user/repos -d '{"name":"REPO"}'

# you will be prompted for your password
$> git remote add origin git@GitHub.com:USER/REPO.git

   I decided that I was going to use this so often that I should have a shortcut to it, so I made it a
   git alias:

$> git config --global alias.gh-create '!sh -c "curl -u \"nottrobin\" https://api.github.com/user/repos 
	-d \"{\\\"name\\\":\\\"$1\\\"}\" && git remote add origin git@github.com:nottrobin/$1.git" -'

   Now I can augment my above process for new projects with the following:

$> git gh-create canvas-play # create the GitHub repository
$> git push -u origin master # push my repository to GitHub

   I don't know why, but this gives me a warm fuzzy feeling inside.


---
https://superuser.com/questions/1067831/create-github-repository-using-command-line-api

Create Github repository using command line + API

   Please provide working code that creates a Github repository using the API.

   I have tried different versions of the following:
$> curl 'https://api.github.com/users/repos?client_id= myusername&client_secret=abcdefghijklmnopqrstuvwxyz1234567890abcd'
$> curl -u 'myusername' https://api.github.com/users/repos -d '{"name":"my-new-repo"}'

   But I always get the following error:
"{
  \"message\": \"Bad credentials\",
  \"documentation_url\": \"https://developer.github.com/v3\"
}"

***
   I see a few problems in the curl commands you've posted:
     * You're using the path /users/repos. That will return the information of the user repos, instead
       of modifying a user's repositories. You need to use /user/repos (delete the s from users).
     * The field client_secret isn't for your username, but for the client ID you received when you
       registered your application in GitHub's API.
     * Your code field is missing too, if you're using the Web Application Flow.

   You can find more details on GitHub's API [https://developer.github.com/v3/oauth]OAuth section.

   However, if you're just looking for a ready-to-work version, this one worked for me:
$> curl -H "Authorization: token YOUR_TOKEN" --data '{"name":"YOUR_REPO_NAME"}' https://api.github.com/user/repos

   Although I'm pretty sure there are other simpler and cleaner ways to do this.

***
   One clarification on @Hewbot's answer.

   One can use personal access tokens instead of OAuth.

   The YOUR_TOKEN value in the "Authorization: token YOUR_TOKEN" section of the curl command can be
   obtained as follows.
    1. Upper right corner, click User
    2. Settings
    3. Personal Access Tokens
    4. For scopes, select Repos.
    5. Create New Token.


---

