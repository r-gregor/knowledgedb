filename: git-howto-remove-git-history-keeping-the-main-branch-intact-multif-20250923.txt
Google search:

Steps to Remove Git History While Keeping the Main Branch Intact
    Step 1: Clone the Repository. ...
    Step 2: Create a New Branch Without History. ...
    Step 3: Add All Files. ...
    Step 4: Commit the Current State. ...
    Step 5: Delete the Old Main Branch. ...
    Step 6: Rename the New Branch to Main. ...
    Step 7: Force Push to GitHub.

---
https://stackoverflow.com/questions/13716658/how-to-delete-all-commit-history-in-github

how to delete all commit history in github?
Feb 11, 2019

I want to delete all commit history but keep the code in its current state because, in my commit history,
there are too many unused commits.

How can I do it?

Is there any git command can do this?

git filter-branch ?
git rebase ?

***
Deleting the .git folder may cause problems in your git repository. If you want to delete all your commit
history but keep the code in its current state, it is very safe to do it as in the following:

1) Checkout/create orphan branch (this branch won't show in git branch command):
$> git checkout --orphan latest_branch

2) Add all the files to the newly created branch:
$> git add -A

3) Commit the changes:
$> git commit -am "commit message"

4) Delete main (default) branch (this step is permanent):
$> git branch -D main

5) Rename the current branch to main:
$> git branch -m main

6) Finally, all changes are completed on your local repository, and force update your remote repository:
$> git push -f origin main

PS: This will not keep your old commit history around. Now you should only see your new commit in the history
    of your git repository.

***
If you are sure you want to remove all commit history, simply delete the .git directory in your project root
(note that it's hidden). Then initialize a new repository in the same folder and link it to the GitHub
repository:
$> git init
$> git remote add origin git@github.com:user/repo

now commit your current version of code
$> git add *
$> git commit -am 'message'

and finally force the update to GitHub:
git push -f origin master

However, I suggest backing up the history (the .git folder in the repository) before taking these steps!


---
https://dev.to/documendous/how-to-remove-git-commit-history-while-keeping-your-main-branch-intact-4lk0

How to Remove Git Commit History While Keeping Your Main Branch Intact

If you've ever wanted to clean up your Git repository by removing its commit history while keeping the latest
version of your code intact, have a read. This post explains how to achieve this using Git.

Why Clear Git History?
There are a few reasons you might want to clean up your commit history:
* You would like your repo to have a clean commit history.
* Sensitive data was accidentally pushed and needs removal.
* The repository has too many unnecessary or cluttered commits.

Important Note: The process below is irreversible. Proceed with caution!

Steps to Remove Git History While Keeping the Main Branch Intact

Step 1: Clone the Repository
$> git clone https://github.com/username/repository.git
$> cd repository

Step 2: Create a New Branch Without History
$> git checkout --orphan new-main

This creates a fresh branch with no previous commit history.

Step 3: Add All Files
Stage all files from the working directory.
$> git add .


Step 4: Commit the Current State
Make a new commit reflecting the current project state.
$> git commit -m "Initial commit with current state"


Step 5: Delete the Old Main Branch
Remove the old branch locally.
$> git branch -D main


Step 6: Rename the New Branch to Main
Rename the new branch to main.
$> git branch -m main


Step 7: Force Push to GitHub
Push the new branch to the remote repository, overwriting the old history.
$> git push --force origin main

What About GitHub Activities?
Even after removing commit history, GitHub's Activities tab will still display past events like pushes, pull
requests, and issue tracking. This happens because GitHub tracks these separately from your Git commit
history.

How to Limit Activity Visibility:

1 - Make the Repository Private:
     * Go to Settings in your GitHub repository.
     * Scroll down to Danger Zone and click Make Private.

2 - Create a New Repository:
     * Delete the old repository if historical activity is problematic.
     * Create a new repository and push the cleaned code.

3 - Transfer Repository Ownership:
    * Transfer the repository to another account, which can reset some public logs.

4 - Consider GitHub Enterprise:
    * Use GitHub Enterprise for advanced control over activity visibility.

Final Thoughts
Removing Git commit history is useful for starting fresh, but keep in mind that GitHub's Activities tab will
still retain a record of past events. If a completely clean public record is essential, creating a new
repository is your best option.


---

