filename: git_moving-from-master-to-main-with-local-changes-multif_20230329.txt
https://utcc.utoronto.ca/~cks/space/blog/programming/GitMasterToMainWithLocalChanges

Moving from 'master' to 'main' in Git with local changes
March 27, 2023

   One of the things that various open source Git repositories are doing is changing their main branch
   from being called 'master' to being called 'main'. As a consumer of their repository, this is
   generally an easy switch for me to deal with; some day, I will do a 'git pull', get a report that
   there's a new 'main' branch but there's no upstream 'master', and then I'll do 'git checkout main'
   and I'm all good. However, with some repositories I have [6]my own local changes, which I handle
   through Git rebasing. Recently I had to go through a 'master' to 'main' switch on such a repository,
   so I'm writing down what I did for later use.

   The short version is:

$> git checkout main
$> git cherry-pick origin/master..master

   (This is similar to [7]something I did before with Darktable.)

   In general I could have done this with either 'git rebase' or 'git cherry-pick', and in theory
   according to [8]my old take on rebasing versus cherry-picking the 'proper' answer might have been a
   rebase, since I was moving my local commits onto the new 'main' branch. However it was clear to me
   that I would probably have wanted to use [9]the full three-argument form of 'git rebase', which is at
   least somewhat tricky to understand and to be sure I was doing right. Cherry-picking was much
   simpler; I could easily reason about what it was doing, and it left my old 'master' state alone in
   case.

   (Switching from rebasing to cherry-picking is [10]an experience I've had before.)

   Now that I've written this I've realized that there was probably a third way, because at a mechanical
   level branches in git don't entirely exist. The upstream 'master' and 'main' branches cover the same
   commits (up until possibly the 'main' branch adds some on top). The only thing that says my local
   changes are on 'master' instead of 'main' is a branch head. In theory, what I could have done was
   just relabeling my current state as being on 'main' instead of 'master', and then possibly a 'git
   pull' to be current with the new 'main'.

   (In the case of this particular repository, it was only a renaming of the main branch; upstream, both
   the old 'master' and the new 'main' are on the same commit.)

   Since I just tried it on a copy of my local repository in question, the commands to do this are:

$> git branch --force main master
$> git checkout main
# get up to date:
$> git pull

   I believe that you only need the pull if the upstream main is ahead of the old upstream master.

   This feels more magical than the rebase or cherry-pick version, so I'm probably not likely to use it
   in the future unless there's some oddity about the situation. One potential reason would be if I've
   published my repository, I don't expect upstream development (just the main branch being renamed),
   and other people might have changes on top of my changes. At that point, a cherry-pick (or a rebase)
   would change the commit hashes of my changes, while simply sticking the 'main' branch label on to
   them doesn't, so people who have changes on top of my changes might have an easier time.

References
   6. https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseLocalChangesSetup
   7. https://utcc.utoronto.ca/~cks/space/blog/programming/GitTreeUncertainShuffles
   8. https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseVsCherrypick
   9. https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseUnderstanding
  10. https://utcc.utoronto.ca/~cks/space/blog/programming/GitPickingRightApproach


---
https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseLocalChangesSetup

My Git settings for carrying local changes on top of upstream development
January 10, 2023

   For years now I've been [6]handling my local changes to upstream projects by committing them and
   rebasing on (Git) pulls, and it's been a positive experience. However, over the years the exact Git
   configuration settings I wanted to make this work smoothly have changed (due to things such as [7]Git
   2.34's change in fast-forward pull settings), and I've never written down all of the settings in one
   place. Since [8]I recently switched to Git for a big repository where I carry local changes, this is
   a good time to write them down for my future reference.

   My basic settings as of Fedora's Git 2.39.0 are:

$> git config pull.rebase true
$> git config pull.ff true

   The second is there to deal with [9]the Git 2.34 changes, since I have a global pull.ff setting of
   'only'.

   If you're working with a big repository where you don't really care about which files changed when
   you pull an upstream update and that output is way too verbose, the normal rebase behavior gives you
   this. You may also want the following:

$> git config merge.stat off

   This is mostly a safety measure, because normally you aren't merging, you're rebasing. If you want to
   still see 'git pull' like output, you want to set 'git config rebase.stat true' ([10]as I started
   years ago).

   If you have a repository with a lot of active branches, you may also want:

$> git config fetch.output compact

   This mostly helps if branch names are very long, long enough to overflow a terminal line; otherwise
   you get the same number of lines printed, they're just shorter. Unfortunately [11]you can't easily
   get tracking upstream repositories to be significantly more quiet.

   If your upstream goes through a churn of branches, [12]you (I) will want to prune now-deleted remote
   branches when you fetch updates. The condensed version is:

$> git config remote.origin.prune true

   With more Git work, it's possible to pull only the main branch. If I'm carrying local changes on top
   of the main branch and other branches are actively doing things, this may be what I want. It's
   relatively unlikely that I'll switch to another branch, since it won't have my changes.

   (This may turn out to be what I want with [13]the Mozilla gecko-dev repository, but it does have
   Firefox Beta and Release as well, and someday I may want convenient Git access to them. I'm not sure

   References
   how to dig out specific Firefox releases, though.)
   6. https://utcc.utoronto.ca/~cks/space/blog/programming/GitCommitAndRebaseBetter
   7. https://utcc.utoronto.ca/~cks/space/blog/programming/GitPullConfigAndRebase
   8. https://mastodon.social/@cks/109666899541803491
   9. https://utcc.utoronto.ca/~cks/space/blog/programming/GitPullConfigAndRebase
  10. https://utcc.utoronto.ca/~cks/space/blog/programming/GitCommitAndRebaseNotes
  11. https://utcc.utoronto.ca/~cks/space/blog/programming/GitQuieterRepoTracking
  12. https://utcc.utoronto.ca/~cks/space/blog/programming/GitPruneRemoteBranches
  13. https://github.com/mozilla/gecko-dev/


---
https://utcc.utoronto.ca/~cks/space/blog/programming/GitTreeUncertainShuffles

Some git repository manipulations that I don't know how to do well
September 30, 2016

   For a while now, I've been both tracking upstream git repositories and carrying and rebasing local
   changes on top of some of them in a straightforward way. The rebasing has been pretty easy and [6]a
   clear win. But recently I've run into a number of more complicated cases where I'm not sure that I'm
   using git in the best way. So here are a collection of problems that I'm semi-solving.

   I keep local tracking copies of a few upstream repos that are rebased periodically, such as [7]this
   one. I have no local changes in such tracking repositories (ie my local master is always the same as
   origin/master). When the upstream rebases my plain git pull will fail, either telling me that it
   can't be fast-forwarded or demanding that I merge things. In the past I've just deleted the entire
   repo and re-cloned as the simple way out. Recently I've constructed the manual fix:

$> git pull --ff-only
[fails, but it's fetched stuff]

$> git checkout -f -B master origin/master

   It would be nice to have the repo set up so that a plain 'git pull' would do this, ideally only if
   it's safe. I could script this but there are only some repos that I want to do this for; for others,
   either I have local changes or this should never happen.

   (The git pull manpage has some interesting wording that makes it sound like asking for a rebase here
   will maybe do the right thing. But I just found that and contriving a test case is not trivial. Or
   maybe I want 'git pull -f'. And now that I've done some web searches, apparently I want 'git reset
   --hard origin/master'. Git is like Perl; sometimes it has so many different paths to the same
   result.)

   Next, I'm tracking the repo for [8]my favorite RAW development software and have some little local
   fixes added on top. Normally I build from the latest git tip, but that's sort of in flux right now so
   I want to switch to the release branch but still add my changes on top. I'm doing this like so:

$> git checkout darktable-2.0.x
$> git cherry-pick origin/master..master

   I think that using git cherry-pick here instead of some form of git rebase is probably the correct
   approach and this is the one case where I'm doing things right.

   I'm tracking [9]the main repository for my shell and applying my changes on top of it. However, there
   is [10]a repository of interesting changes that I want to try out; of course I still want my local
   changes on top of this. When I did this I think what I did was 'git pull --rebase /the/other/repo',
   but I believe that probably wasn't the right approach. I suspect that what I really wanted to do was
   add the second repo as an alternate upstream, switch to it, and either cherry-pick or rebase my own
   changes on top.

   Except, well, looking back at my notes about [11]working with Github PRs it strikes me that this is
   basically the same situation (except this repo isn't an explicit PR). I should probably follow the
   same process instead of hacking my way around the way I did this time.

   Finally, we combine the two situations: I'm building on top of [12]the repo of interesting changes
   and it rebases itself. Now I want to replace the old version with the new version but reapply my
   changes on top. I'm not going to try to write down the process I used this time, because I'm
   convinced it's not optimal; I basically combined the reset origin plus cherry-pick process, using
   explicit commit hashes for the cherry-picking and recording them beforehand. Based on Aristotle
   Pagaltzis's comment on [13]my Github PR entry, I think I want something from [14]this Stackoverflow
   Q&A but I need to read the answers carefully and try it out before I'm sure I understand it all. It
   does look relatively simple.

   ([15]This writeup of git rebase --onto is helpful too, but again I need to digest it. Probably I need
   to redo this whole procedure the right way the next time this comes up, starting from a properly
   constructed repo.)

Sidebar: How I test this stuff out
   I always, always test anything like this on a copy of my repo, not on the main version. I make these
   copies with rsync, because making repo copies with 'git clone' changes how git sees things like
   upstreams (for obvious reasons). I suspect that this is the correct approach and there is no magic
   'git clone' option that does what I want here.
   6. https://utcc.utoronto.ca/~cks/space/blog/programming/GitCommitAndRebaseBetter

   References
   7. https://github.com/muennich/rc
   8. https://github.com/darktable-org/darktable
   9. https://github.com/rakitzis/rc
  10. https://github.com/muennich/rc
  11. https://utcc.utoronto.ca/~cks/space/blog/programming/GithubPRTestingWorkflow
  12. https://github.com/muennich/rc
  13. https://utcc.utoronto.ca/~cks/space/blog/programming/GithubPRTestingWorkflow
  14. https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub
  15. https://blog.pivotal.io/labs/labs/git-rebase-onto


---
https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseVsCherrypick

My take on Git rebasing versus cherry-picking
October 3, 2016

   [6]As I've noticed recently, there's a number of git problems that can be solved by either git rebase
   or git cherry-pick. Because I love git rebase I started out feeling that I should solve all of my
   problems with it (and resorting to 'git cherry-pick' was a weakness), but I've wound up convinced
   that sometimes this is wrong. However, until very recently I didn't feel that I understood when I
   wanted to use one or the other; instead it felt like I was making it up as I was going along. In
   large part due to learning from [7]Aristotle Pagaltzis's useful comments [8]here, I've now wound up
   with my take on when I want to try to use one versus the other.

   Put simply, my take is that:

     Git rebasing is for moving commits while cherry-picking is for copying them.

   An obvious case of moving commits is 'git pull --rebase'; I'm moving my commits from the old
   origin/master to the new one. Ultimately what makes something a move is that I don't really care
   about the old versions of the commits I'm rebasing; I'll only go back to them (via the reflog) if
   something goes badly wrong (for example, perhaps the new upstream version I pulled is broken).

   (If I look at rebasing as moving commits, git rebase always updating the current or target branch
   makes sense. The kind of things where I'd want to leave the 'source' of the commits intact is not a
   move.)

   Generally if I want to leave the old version of my local commits around as well as have a new
   version, that's a copy instead of a move. At a mechanical level I may use 'git rebase' after the 'git
   cherry-pick' to reorder commits and so on, but I'll start with a cherry-pick. One case that I've come
   to see as a copy instead of a move is transplanting my local changes on top of another branch in
   order to use it for various reasons. This covers both the 'switch from development to stable branch'
   and 'switch from mainline to someone's experimental changes' cases in [9]my collection of git tree
   shuffles I was uncertain about.

   I've also realized that this describes what I want to do when [10]I'm working with Github pull
   requests. My old writeup used 'git rebase', but it was clearly awkward; any time I'm making a branch
   and then later changing its upstream is a warning sign. A much simpler approach is to pull down the
   PR(s), check the appropriate one out as a new (local) branch, and then simply cherry-pick my changes
   on to it with 'git cherry-pick origin/master..master'.

   (This makes working with PRs the same as working with any other branch, which is really what I'd
   expect. If I want to cherry-pick when I'm moving from development to stable or stable to development,
   I want to cherry-pick for PRs too.)
   6. https://utcc.utoronto.ca/~cks/space/blog/programming/GitTreeUncertainShuffles

   References
   7. http://plasmasturm.org/
   8. https://utcc.utoronto.ca/~cks/space/blog/programming/GitTreeUncertainShuffles
   9. https://utcc.utoronto.ca/~cks/space/blog/programming/GitTreeUncertainShuffles
  10. https://utcc.utoronto.ca/~cks/space/blog/programming/GithubPRTestingWorkflow


---
https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseUnderstanding

Coming to a better understanding of what git rebase does
April 26, 2017

   Although I've used it reasonably regularly, git rebase has so far been a little bit magical to me, as
   you may be able to tell from [6]my extensive explanation to myself of using it to rebase changes on
   top of an upstream rebase. In my grand tradition, I'm going to write down what I hope is a better
   understanding of what it does and how its arguments interact with that.

   What git rebase does is that it takes a series of commits, replays them on top of some new commit,
   and then gives the resulting top commit a name so that you can use it. When you use the three
   argument form with --onto, you are fully specifying all of these. Take this command:

$> git rebase --onto muennich/master old-muennich master

   --onto names the new commit everything will be put onto (usually it's a branch, as it is here), the
   series of commits that will be replayed is old-muennich..master, and the new name is also master. You
   don't get a choice about the new name; git rebase always makes your new rebase into your branch,
   discarding the old value of the branch.

   (As far as I can tell there's no technical reason why git rebase couldn't let you specify the branch
   name of the result; it's just not in the conceptual model the authors have of how it should work. If
   you need this, you need to manually create a new branch beforehand.)

   The minimal version has no arguments:

$> git rebase

   This only works on branches with an upstream. It replays your commits from the current branch on top
   of the current (ie new) upstream, and it determines the range of commits to rebase roughly by finding
   the closest common ancestor of your commits and the upstream:

A -> B -> C -> D               [origin/master]
      \-> local-1 -> local-2   [master]

   In this bad plain text diagram, the upstream added C and D while you have local-1 and local-2. The
   common point is B, and so B..master describes the commits that will be put on top of origin/master
   and then your master branch will be switched to them (well, the new version of them).

   A rebase is conceptually a push to cherry-pick's pull. In cherry picking, you start on the new clean
   branch and pull in changes from elsewhere. In rebasing, you start on your 'dirty' local branch and
   push its changes on top of some other (clean) branch. You then keep the name of your local branch but
   not its old origin point.

   If you use the one or two argument form of git rebase, you're explicitly telling rebase what to
   consider the 'upstream' for both determining the common ancestor commit and for what to put your
   changes on top of. If I'm understanding this correctly, the following commands are both equivalent to
   a plain 'git rebase' on your master branch:

$> git rebase origin/master
$> git rebase origin/master master

   Based on the diagrams in [7]the git-rebase manpage, it looks like the one and two argument forms are
   most useful for cases where you have multiple local branches and want to shuffle around the
   relationship between them.

   In general [8]the git-rebase manpage has helpful examples combined with extensive ASCII diagrams. If
   I periodically read it carefully whenever I'm confused, it will probably all sink in eventually.

   (Of course, the git manual page that I actually should read carefully several times until it all
   sinks in and sticks is the one on [9]specifying revisions and ranges for Git. I sort of know what a
   number of the different forms mean, but in practice it's one part folklore to one part actual
   knowledge.)
   6. https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseOnRebase

   References
   7. https://git-scm.com/docs/git-rebase
   8. https://git-scm.com/docs/git-rebase
   9. https://git-scm.com/docs/gitrevisions


---
https://utcc.utoronto.ca/~cks/space/blog/programming/GitPickingRightApproach

With git, it's useful to pick the right approach to your problem
August 31, 2017

   One of the things about [6]Git is that once you go past basic committing, it generally has any number
   of ways for you to do what you want done. As with programming languages, part of getting better at
   Git is learning to pick the right idiom to attack your problem with. I can't claim that I'm good at
   this, but I am getting more experience, and recently I had an interesting experience here.

   I use [7]Byron Rakitzis' version of rc as my shell, which these days can be found [8]on Github. Well,
   [9]as has come up before, I don't actually use (just) that official version. I have my own change (to
   add a built-in read command) and because it was there, I also use [10]some completion improvements,
   which come from [11]Bert Münnich's collection of interesting rc modifications.

   (I originally tried out Bert Münnich's version to get [12]an important improvement before it became
   an official change. This change also shows the awesome power of raising [13]an issue even if you
   expect that it's hopeless, as well as exploring Github forks of a project you're interested in.)

   Recently some improvements have landed in [14]the main repo that Bert Münnich has not yet rebased his
   modifications on top of. The other day I decided that I should update my own version to pick up these
   changes, because it turned out that I wanted to rebuild it on Fedora 26 anyway (that's its own
   story). The obvious way to do this was a straight rebase on top of [15]the main repo, so that's what
   I did first.

   The end result worked, but getting there took a bunch of effort. Bert Münnich's modifications include
   things like changing the build system from GNU Autoconf to a simple Makefile based one, so there were
   a bunch of clashes and situations that I had to resolve by hand (and I wasn't entirely confident of
   my own changes, since I was modifying Münnich's modifications without fully understanding either them
   or the upstream changes they clashed with). It felt like I was both working too hard and creating a
   fragile edifice for myself, so at the end I took a step back and asked what I really wanted and if
   there was a simpler, better way to get it.

   When I did this I realized that what I really wanted was the upstream with my addition plus only a
   few of Bert Münnich's modifications (I've become addicted to command completion). While I could have
   created this with more rebasing, there was a much simpler approach (partly enabled by a better
   understanding of Git remotes and so on):
    1. Create a new clone of [16]the main repo.
    2. Add [17]Münnich's repo and my previous everything-together local repo as additional remotes.
    3. git fetch from both new remotes in order to make all of their commits available locally.
    4. git cherry-pick my addition by its commit hash.
    5. git cherry-pick the modifications I wanted from [18]Münnich's repo, which only amounted to a few
       of them. Again I did this commit by commit using the commit hash, rather than trying to do
       anything more sophisticated. One or two cherry-picks required minor adjustment; since I'd already
       had to deal with them during the rebase, it was easy to fix things up.

   While having done the rebase helped me deal with the conflicts during cherry-picking, the
   cherry-picking still felt much easier. I could have arrived at the same place with an interactive
   rebase (which would have let me drop modifications I'd decided I either didn't want or didn't care
   about), but I think it would have felt more indirect and chancy. Cherry-picking more directly
   expressed my intentions; I wanted my change and then this, this, and this from another tree. Done.

   (In both cases, the git repo I wind up with probably can't be used for further rebases against
   [19]Münnich's repo, just for rebases against [20]the main repo.)

   Stepping back, thinking about what I wanted, and then finding the right mechanism to express this in
   Git worked out very well. When I switched from rebasing to cherry-picking, I went from feeling that I
   was fighting git to get what I wanted to feeling that I was directly and naturally expressing myself
   and git was doing just what I wanted. Of course the real trick here is having the Git knowledge and
   experience to realize what the good way is; had I not had [21]some experience, I might not have been
   familiar enough with cherry-picking to reach for it here. And there are undoubtedly Git manipulations
   that I don't even know exist, so I'll never pick them as the right option.

   (As a side note, this isn't really the [22]copy versus move situation that I ran into before. Instead
   it's much more that I'm gluing together a completely new branch that happens to be made with bits and
   pieces from some other branches (and after I'm done the other branches aren't of direct interest to
   me).)

   References
   6. https://git-scm.com/
   7. http://tobold.org/article/rc
   8. https://github.com/rakitzis/rc
   9. https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseOnRebase
  10. https://utcc.utoronto.ca/~cks/space/blog/unix/CommandCompletionBenefit
  11. https://github.com/muennich/rc
  12. https://github.com/rakitzis/rc/commit/d0ee32e585437b76f095379ec84fd753a5d30a3c
  13. https://github.com/rakitzis/rc/issues/29
  14. http://tobold.org/article/rc
  15. http://tobold.org/article/rc
  16. http://tobold.org/article/rc
  17. https://github.com/muennich/rc
  18. https://github.com/muennich/rc
  19. https://github.com/muennich/rc
  20. http://tobold.org/article/rc
  21. https://utcc.utoronto.ca/~cks/space/blog/programming/GitTreeUncertainShuffles
  22. https://utcc.utoronto.ca/~cks/space/blog/programming/GitRebaseVsCherrypick


---

