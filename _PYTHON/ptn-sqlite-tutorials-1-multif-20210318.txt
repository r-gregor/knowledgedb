filename: ptn_sqlite_tutorials-1-multif_20210318.txt
https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3

How To Use the sqlite3 Module in Python 3
Published onJune 2, 2020

   The author selected the COVID-19 Relief Fund to receive a donation as part of the Write for
   DOnations program.

Introduction
   SQLite is a self-contained, file-based SQL database. SQLite comes bundled with Python and can
   be used in any of your Python applications without having to install any additional software.

   In this tutorial, we'll go through the sqlite3 module in Python 3. We'll create a connection to a
   SQLite database, add a table to that database, insert data into that table, and read and modify data
   in that table.

   For this tutorial, we'll be working primarily with an inventory of fish that we need to modify as
   fish are added to or removed from a fictional aquarium.

Prerequisites
   To get the most out of this tutorial, it is recommended to have some familiarity with programming in
   Python and some basic background with SQL.

Step 1 - Creating a Connection to a SQLite Database
   When we connect to a SQLite database, we are accessing data that ultimately resides in a file on our
   computer. SQLite databases are fully featured SQL engines that can be used for many purposes. For
   now, we'll consider a database that tracks the inventory of fish at a fictional aquarium.

   We can connect to a SQLite database using the Python sqlite3 module:
import sqlite3

connection = sqlite3.connect("aquarium.db")

   import sqlite3 gives our Python program access to the sqlite3 module. The sqlite3.connect() function
   returns a Connection object that we will use to interact with the SQLite database held in the
   file aquarium.db. The aquarium.db file is created automatically by sqlite3.connect() if aquarium.db
   does not already exist on our computer.

   We can verify we successfully created our connection object by running:
print(connection.total_changes)

   If we run this Python code, we will see output like:

   Output
0

   connection.total_changes is the total number of database rows that have been changed by connection.
   Since we have not executed any SQL commands yet, 0 total_changes is correct.

   If, at any time, we find we want to start this tutorial again, we can delete the aquarium.db file
   from our computer.

   Note: It is also possible to connect to a SQLite database that resides strictly in memory (and not in
   a file) by passing the special string ":memory:" into sqlite3.connect(). For example,
   sqlite3.connect(":memory:"). A ":memory:" SQLite database will disappear as soon as your Python
   program exits. This might be convenient if you want a temporary sandbox to try something out in
   SQLite, and don't need to persist any data after your program exits.

Step 2 - Adding Data to the SQLite Database
   Now that we have connected to the aquarium.db SQLite database, we can start inserting and reading
   data from it.

   In a SQL database, data is stored in tables. Tables define a set of columns, and contain 0 or more
   rows with data for each of the defined columns.

   We will create a table named fish that tracks the following data:
   name		species		tank_number
   Sammy	shark		1
   Jamie	cuttlefish	7

   The fish table will track a value for name, species, and tank_number for each fish at the aquarium.
   Two example fish rows are listed: one row for a shark named Sammy, and one row for a cuttlefish named
   Jamie.

   We can create this fish table in SQLite using the connection we made in Step 1:
cursor = connection.cursor()
cursor.execute("CREATE TABLE fish (name TEXT, species TEXT, tank_number INTEGER)")

   connection.cursor() returns a Cursor object. Cursor objects allow us to send SQL statements to a
   SQLite database using cursor.execute(). The "CREATE TABLE fish ..." string is a SQL statement that
   creates a table named fish with the three columns described earlier: name of type TEXT, species of
   type TEXT, and tank_number of type INTEGER.

   Now that we have created a table, we can insert rows of data into it:
cursor.execute("INSERT INTO fish VALUES ('Sammy', 'shark', 1)")
cursor.execute("INSERT INTO fish VALUES ('Jamie', 'cuttlefish', 7)")

   We call cursor.execute() two times: once to insert a row for the shark Sammy in tank 1, and once to
   insert a row for the cuttlefish Jamie in tank 7. "INSERT INTO fish VALUES ..." is a SQL statement
   that allows us to add rows to a table.

   In the next section, we will use a SQL SELECT statement to inspect the rows we just inserted into our
   fish table.

Step 3 - Reading Data from the SQLite Database
   In Step 2, we added two rows to a SQLite table named fish. We can retrieve those rows using a SELECT
   SQL statement:
rows = cursor.execute("SELECT name, species, tank_number FROM fish").fetchall()
print(rows)

   If we run this code, we will see output like the following:

   Output
[('Sammy', 'shark', 1), ('Jamie', 'cuttlefish', 7)]

   The cursor.execute() function runs a SELECT statement to retrieve values for the name, species, and
   tank_number columns in the fish table. fetchall() retrieves all the results of the SELECT statement.
   When we print(rows) we see a list of two tuples. Each tuple has three entries; one entry for each
   column we selected from the fish table. The two tuples have the data we inserted in Step 2: one tuple
   for Sammy the shark, and one tuple for Jamie the cuttlefish.

   If we wanted to retrieve rows in the fish table that match a specific set of criteria, we can use a
   WHERE clause:
target_fish_name = "Jamie"
rows = cursor.execute(
	"SELECT name, species, tank_number FROM fish WHERE name = ?",
	(target_fish_name,),
).fetchall()
print(rows)

   If we run this, we will see output like the following:

   Output
[('Jamie', 'cuttlefish', 7)]

   As with the previous example, cursor.execute(<SQL statement>).fetchall() allows us to fetch all the
   results of a SELECT statement. The WHERE clause in the SELECT statement filters for rows where the
   value of name is target_fish_name. Notice that we use ? to substitute our target_fish_name variable
   into the SELECT statement. We expect to only match one row, and indeed we only see the row for Jamie
   the cuttlefish returned.

   Warning: Never use Python string operations to dynamically create a SQL statement string. Using
   Python string operations to assemble a SQL statement string leaves you vulnerable to SQL
   injection attacks. SQL injection attacks can be used to steal, alter, or otherwise modify data stored
   in your database. Always use the ? placeholder in your SQL statements to dynamically substitute
   values from your Python program. Pass a tuple of values as the second argument to Cursor.execute() to
   bind your values to the SQL statement. This substitution pattern is demonstrated here and in other
   parts of this tutorial as well.

Step 4 - Modifying Data in the SQLite Database
   Rows in a SQLite database can be modified using UPDATE and DELETE SQL statements.

   Let's say, for example, that Sammy the shark was moved to tank number 2. We can change Sammy's row in
   the fish table to reflect this change:
new_tank_number = 2
moved_fish_name = "Sammy"
cursor.execute(
	"UPDATE fish SET tank_number = ? WHERE name = ?",
	(new_tank_number, moved_fish_name)
)

   We issue an UPDATE SQL statement to change the tank_number of Sammy to its new value of 2. The WHERE
   clause in the UPDATE statement ensures we only change the value of tank_number if a row has name =
   "Sammy".

   If we run the following SELECT statement, we can confirm our update was made correctly:
rows = cursor.execute("SELECT name, species, tank_number FROM fish").fetchall()
print(rows)

   If we run this, we will see output like the following:

   Output
[('Sammy', 'shark', 2), ('Jamie', 'cuttlefish', 7)]

   Notice that the row for Sammy now has the value of 2 for its tank_number column.

   Let's say that Sammy the shark was released into the wild and no longer held by the aquarium. Since
   Sammy no longer lives at the aquarium, it would make sense to remove the Sammy row from the fish
   table.

   Issue a DELETE SQL statement to remove a row:
released_fish_name = "Sammy"
cursor.execute(
	"DELETE FROM fish WHERE name = ?",
	(released_fish_name,)
)

   We issue a DELETE SQL statement to remove the row for Sammy the shark. The WHERE clause in the DELETE
   statement ensures we only delete a row if that row has name = "Sammy".

   If we run the following SELECT statement, we can confirm our deletion was made correctly:
rows = cursor.execute("SELECT name, species, tank_number FROM fish").fetchall()
print(rows)

   If we run this code, we will see output like the following:

   Output
[('Jamie', 'cuttlefish', 7)]

   Notice that the row for Sammy the shark is now gone, and only Jamie the cuttlefish remains.

Step 5 - Using with Statements For Automatic Cleanup
   In this tutorial, we've used two primary objects to interact with the "aquarium.db" SQLite database:
   a Connection object named connection, and a Cursor object named cursor.

   In the same way that Python files should be closed when we are done working with them, Connection and
   Cursor objects should also be closed when they are no longer needed.

   We can use a with statement to help us automatically close Connection and Cursor objects:
from contextlib import closing

with closing(sqlite3.connect("aquarium.db")) as connection:
	with closing(connection.cursor()) as cursor:
		rows = cursor.execute("SELECT 1").fetchall()
		print(rows)

   closing is a convenience function provided by the contextlib module. When a with statement exits,
   closing ensures that close() is called on whatever object is passed to it. The closing function is
   used twice in this example. Once to ensure that the Connection object returned by sqlite3.connect()
   is automatically closed, and a second time to ensure that the Cursor object returned by
   connection.cursor() is automatically closed.

   If we run this code, we will see output like the following:

   Output
[(1,)]

   Since "SELECT 1" is a SQL statement that always returns a single row with a single column with a
   value of 1, it makes sense to see a single tuple with 1 as its only value returned by our code.

Conclusion
   The sqlite3 module is a powerful part of the Python standard library; it lets us work with a fully
   featured on-disk SQL database without installing any additional software.

   In this tutorial, we learned how to use the sqlite3 module to connect to a SQLite database, add data
   to that database, as well as read and modify data in that database. Along the way, we also learned
   about the risks of SQL injection attacks and how to use contextlib.closing to automatically call
   close() on Python objects in with statements.


---
https://www.tutorialspoint.com/sqlite/sqlite_python.htm

SQLite - Python

   In this chapter, you will learn how to use SQLite in Python programs.

Installation
   SQLite3 can be integrated with Python using sqlite3 module, which was written by Gerhard Haring. It
   provides an SQL interface compliant with the DB-API 2.0 specification described by PEP 249. You do
   not need to install this module separately because it is shipped by default along with Python version
   2.5.x onwards.

   To use sqlite3 module, you must first create a connection object that represents the database and
   then optionally you can create a cursor object, which will help you in executing all the SQL
   statements.

Python sqlite3 module APIs
   Following are important sqlite3 module routines, which can suffice your requirement to work with
   SQLite database from your Python program. If you are looking for a more sophisticated application,
   then you can look into Python sqlite3 module's official documentation.
   Sr.No. API & Description

   sqlite3.connect(database [,timeout ,other optional arguments])

   This API opens a connection to the SQLite database file. You can use ":memory:" to open a database
   connection to a database that resides in RAM instead of on disk. If database is opened successfully,
   it returns a connection object.

   When a database is accessed by multiple connections, and one of the processes modifies the database,
   the SQLite database is locked until that transaction is committed. The timeout parameter specifies
   how long the connection should wait for the lock to go away until raising an exception. The default
   for the timeout parameter is 5.0 (five seconds).

   If the given database name does not exist then this call will create the database. You can specify
   filename with the required path as well if you want to create a database anywhere else except in the
   current directory.

   connection.cursor([cursorClass])

   This routine creates a cursor which will be used throughout of your database programming with Python.
   This method accepts a single optional parameter cursorClass. If supplied, this must be a custom
   cursor class that extends sqlite3.Cursor.

   cursor.execute(sql [, optional parameters])

   This routine executes an SQL statement. The SQL statement may be parameterized (i. e. placeholders
   instead of SQL literals). The sqlite3 module supports two kinds of placeholders: question marks and
   named placeholders (named style).

   For example − cursor.execute("insert into people values (?, ?)", (who, age))

   connection.execute(sql [, optional parameters])

   This routine is a shortcut of the above execute method provided by the cursor object and it creates
   an intermediate cursor object by calling the cursor method, then calls the cursor's execute method
   with the parameters given.

   cursor.executemany(sql, seq_of_parameters)

   This routine executes an SQL command against all parameter sequences or mappings found in the
   sequence sql.

   connection.executemany(sql[, parameters])

   This routine is a shortcut that creates an intermediate cursor object by calling the cursor method,
   then calls the cursor.s executemany method with the parameters given.

   cursor.executescript(sql_script)

   This routine executes multiple SQL statements at once provided in the form of script. It issues a
   COMMIT statement first, then executes the SQL script it gets as a parameter. All the SQL statements
   should be separated by a semi colon (;).

   connection.executescript(sql_script)

   This routine is a shortcut that creates an intermediate cursor object by calling the cursor method,
   then calls the cursor's executescript method with the parameters given.

   connection.total_changes()

   This routine returns the total number of database rows that have been modified, inserted, or deleted
   since the database connection was opened.

   connection.commit()

   This method commits the current transaction. If you don't call this method, anything you did since
   the last call to commit() is not visible from other database connections.

   connection.rollback()

   This method rolls back any changes to the database since the last call to commit().

   connection.close()

   This method closes the database connection. Note that this does not automatically call commit(). If
   you just close your database connection without calling commit() first, your changes will be lost!

   cursor.fetchone()

   This method fetches the next row of a query result set, returning a single sequence, or None when no
   more data is available.

   cursor.fetchmany([size = cursor.arraysize])

   This routine fetches the next set of rows of a query result, returning a list. An empty list is
   returned when no more rows are available. The method tries to fetch as many rows as indicated by the
   size parameter.

   cursor.fetchall()

   This routine fetches all (remaining) rows of a query result, returning a list. An empty list is
   returned when no rows are available.

Connect To Database
   Following Python code shows how to connect to an existing database. If the database does not exist,
   then it will be created and finally a database object will be returned.
#!/usr/bin/python

import sqlite3

conn = sqlite3.connect('test.db')

print "Opened database successfully";

   Here, you can also supply database name as the special name :memory: to create a database in RAM.
   Now, let's run the above program to create our database test.db in the current directory. You can
   change your path as per your requirement. Keep the above code in sqlite.py file and execute it as
   shown below. If the database is successfully created, then it will display the following message.
$chmod +x sqlite.py
$./sqlite.py
Open database successfully

Create a Table
   Following Python program will be used to create a table in the previously created database.
#!/usr/bin/python

import sqlite3

conn = sqlite3.connect('test.db')
print "Opened database successfully";

conn.execute('''CREATE TABLE COMPANY
		 (ID INT PRIMARY KEY	 NOT NULL,
		 NAME			TEXT	NOT NULL,
		 AGE			INT		NOT NULL,
		 ADDRESS		CHAR(50),
		 SALARY			REAL);''')
print "Table created successfully";

conn.close()

   When the above program is executed, it will create the COMPANY table in your test.db and it will
   display the following messages −
Opened database successfully
Table created successfully

INSERT Operation
   Following Python program shows how to create records in the COMPANY table created in the above
   example.
#!/usr/bin/python

import sqlite3

conn = sqlite3.connect('test.db')
print "Opened database successfully";

conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
	  VALUES (1, 'Paul', 32, 'California', 20000.00 )");

conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
	  VALUES (2, 'Allen', 25, 'Texas', 15000.00 )");

conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
	  VALUES (3, 'Teddy', 23, 'Norway', 20000.00 )");

conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
	  VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 )");

conn.commit()
print "Records created successfully";
conn.close()

   When the above program is executed, it will create the given records in the COMPANY table and it will
   display the following two lines −
Opened database successfully
Records created successfully

SELECT Operation
   Following Python program shows how to fetch and display records from the COMPANY table created in the
   above example.
#!/usr/bin/python

import sqlite3

conn = sqlite3.connect('test.db')
print "Opened database successfully";

cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
for row in cursor:
   print "ID = ", row[0]
   print "NAME = ", row[1]
   print "ADDRESS = ", row[2]
   print "SALARY = ", row[3], "\n"

print "Operation done successfully";
conn.close()

   When the above program is executed, it will produce the following result.
Opened database successfully
ID = 1
NAME = Paul
ADDRESS = California
SALARY = 20000.0

ID = 2
NAME = Allen
ADDRESS = Texas
SALARY = 15000.0

ID = 3
NAME = Teddy
ADDRESS = Norway
SALARY = 20000.0

ID = 4
NAME = Mark
ADDRESS = Rich-Mond
SALARY = 65000.0

Operation done successfully

UPDATE Operation
   Following Python code shows how to use UPDATE statement to update any record and then fetch and
   display the updated records from the COMPANY table.
#!/usr/bin/python

import sqlite3

conn = sqlite3.connect('test.db')
print "Opened database successfully";

conn.execute("UPDATE COMPANY set SALARY = 25000.00 where ID = 1")
conn.commit()
print "Total number of rows updated :", conn.total_changes

cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
for row in cursor:
   print "ID = ", row[0]
   print "NAME = ", row[1]
   print "ADDRESS = ", row[2]
   print "SALARY = ", row[3], "\n"

print "Operation done successfully";
conn.close()

   When the above program is executed, it will produce the following result.
Opened database successfully
Total number of rows updated : 1
ID = 1
NAME = Paul
ADDRESS = California
SALARY = 25000.0

ID = 2
NAME = Allen
ADDRESS = Texas
SALARY = 15000.0

ID = 3
NAME = Teddy
ADDRESS = Norway
SALARY = 20000.0

ID = 4
NAME = Mark
ADDRESS = Rich-Mond
SALARY = 65000.0

Operation done successfully

DELETE Operation
   Following Python code shows how to use DELETE statement to delete any record and then fetch and
   display the remaining records from the COMPANY table.
#!/usr/bin/python

import sqlite3

conn = sqlite3.connect('test.db')
print "Opened database successfully";

conn.execute("DELETE from COMPANY where ID = 2;")
conn.commit()
print "Total number of rows deleted :", conn.total_changes

cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
for row in cursor:
   print "ID = ", row[0]
   print "NAME = ", row[1]
   print "ADDRESS = ", row[2]
   print "SALARY = ", row[3], "\n"

print "Operation done successfully";
conn.close()

   When the above program is executed, it will produce the following result.
Opened database successfully
Total number of rows deleted : 1
ID = 1
NAME = Paul
ADDRESS = California
SALARY = 20000.0

ID = 3
NAME = Teddy
ADDRESS = Norway
SALARY = 20000.0

ID = 4
NAME = Mark
ADDRESS = Rich-Mond
SALARY = 65000.0

Operation done successfully



---
https://stackabuse.com/a-sqlite-tutorial-with-python/

A SQLite Tutorial with Python

Introduction
   This tutorial will cover using SQLite in combination with Python's sqlite3 interface. SQLite is a
   single file relational database bundled with most standard Python installs. SQLite is often the
   technology of choice for small applications, particularly those of embedded systems and devices like
   phones and tablets, smart appliances, and instruments. However, it is not uncommon to hear it being
   used for small to medium web and desktop applications.

Creating a Database and Making a Connection
   Creating a new SQLite database is as simple as creating a connection using the sqlite3 module in the
   Python standard library. To establish a connection all you need to do is pass a file path to the
   connect(...) method in the sqlite3 module, and if the database represented by the file does not
   exists one will be created at that path.
import sqlite3
con = sqlite3.connect('/path/to/file/db.sqlite3')

   You will find that in everyday database programming you will be constantly creating connections to
   your database, so it is a good idea to wrap this simple connection statement into a reusable
   generalized function.
# db_utils.py
<code>
import os
import sqlite3

# create a default path to connect to and create (if necessary) a database
# called 'database.sqlite3' in the same directory as this script
DEFAULT_PATH = os.path.join(os.path.dirname(__file__), 'database.sqlite3')

def db_connect(db_path=DEFAULT_PATH):
	con = sqlite3.connect(db_path)
	return con
</code>

Creating Tables
   In order to create database tables you need to have an idea of the structure of the data you are
   interested in storing. There are many design considerations that go into defining the tables of a
   relational database, which entire books have been written about. I will not be going into the details
   of this practice and will instead leave it up to reader to further investigate.

   However, to aid in our discussion of SQLite database programming with Python I will be working off
   the premise that a database needs to be created for a fictitious book store that has the below data
   already collected on book sales.
   customer       date        product                            price
   Alan Turing    2/22/1944   Introduction to Combinatorics      7.99
   Donald Knuth   7/3/1967    A Guide to Writing Short Stories   17.99
   Donald Knuth   7/3/1967    Data Structures and Algorithms     11.99
   Edgar Codd     1/12/1969   Advanced Set Theory                16.99

   Upon inspecting this data it is evident that it contains information about customers, products, and
   orders. A common pattern in database design for transactional systems of this type are to break the
   orders into two additional tables, orders and line items (sometimes referred to as order details) to
   achieve greater normalization.

   In a Python interpreter, in the same directory as the db_utils.py module defined previously, enter
   the SQL for creating the customers and products tables follows:
>>> from db_utils import db_connect
>>> con = db_connect() # connect to the database
>>> cur = con.cursor() # instantiate a cursor obj
>>> customers_sql = """
... CREATE TABLE customers (
... 	id integer PRIMARY KEY,
... 	first_name text NOT NULL,
... 	last_name text NOT NULL)"""
>>> cur.execute(customers_sql)
>>> products_sql = """
... CREATE TABLE products (
... 	id integer PRIMARY KEY,
... 	name text NOT NULL,
... 	price real NOT NULL)"""
>>> cur.execute(products_sql)

   The above code creates a connection object then uses it to instantiate a cursor object. The cursor
   object is used to execute SQL statements on the SQLite database.

   With the cursor created I then wrote the SQL to create the customers table, giving it a primary key
   along with a first and last name text field and assign it to a variable called customers_sql. I then
   call the execute(...) method of the cursor object passing it the customers_sql variable. I then
   create a products table in a similar way.

   You can query the sqlite_master table, a built-in SQLite metadata table, to verify that the above
   commands were successful.

   To see all the tables in the currently connected database query the name column of the sqlite_master
   table where the type is equal to "table".
>>> cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
<sqlite3.Cursor object at 0x104ff7ce0>
>>> print(cur.fetchall())
[('customers',), ('products',)]

   To get a look at the schema of the tables query the sql column of the same table where the type is
   still "table" and the name is equal to "customers" and/or "products".
>>> cur.execute("""SELECT sql FROM sqlite_master WHERE type='table'
... AND name='customers'""")
<sqlite3.Cursor object at 0x104ff7ce0>
>>> print(cur.fetchone()[0])
CREATE TABLE customers (
	id integer PRIMARY KEY,
	first_name text NOT NULL,
	last_name text NOT NULL)

   The next table to define will be the orders table which associates customers to orders via a foreign
   key and the date of their purchase. Since SQLite does not support an actual date/time data type (or
   data class to be consistent with the SQLite vernacular) all dates will be represented as text values.
>>> orders_sql = """
... CREATE TABLE orders (
... 	id integer PRIMARY KEY,
... 	date text NOT NULL,
... 	customer_id integer,
... 	FOREIGN KEY (customer_id) REFERENCES customers (id))"""
>>> cur.execute(orders_sql)

   The final table to define will be the line items table which gives a detailed accounting of the
   products in each order.
lineitems_sql = """
... CREATE TABLE lineitems (
... 	id integer PRIMARY KEY,
... 	quantity integer NOT NULL,
... 	total real NOT NULL,
... 	product_id integer,
... 	order_id integer,
... 	FOREIGN KEY (product_id) REFERENCES products (id),
... 	FOREIGN KEY (order_id) REFERENCES orders (id))"""
>>> cur.execute(lineitems_sql)

Loading the Data
   In this section I will be demonstrating how to INSERT our sample data into the tables just created. A
   natural starting place would be to populate the products table first because without products we
   cannot have a sale and thus would not have the foreign keys to relate to the line items and orders.
   Looking at the sample data I see that there are four products:
	 * Introduction to Combinatorics ($7.99)
	 * A Guide to Writing Short Stories ($17.99)
	 * Data Structures and Algorithms ($11.99)
	 * Advanced Set Theory ($16.99)

   The workflow for executing INSERT statements is simply:
	1. Connect to the database
	2. Create a cursor object
	3. Write a parameterized insert SQL statement and store as a variable
	4. Call the execute method on the cursor object passing it the sql variable and the values, as a
	   tuple, to be inserted into the table

   Given this general outline let us write some more code.
>>> con = db_connect()
>>> cur = con.cursor()
>>> product_sql = "INSERT INTO products (name, price) VALUES (?, ?)"
>>> cur.execute(product_sql, ('Introduction to Combinatorics', 7.99))
>>> cur.execute(product_sql, ('A Guide to Writing Short Stories', 17.99))
>>> cur.execute(product_sql, ('Data Structures and Algorithms', 11.99))
>>> cur.execute(product_sql, ('Advanced Set Theory', 16.99))

   The above code probably seems pretty obvious, but let me discuss it a bit as there are some important
   things going on here. The insert statement follows the standard SQL syntax except for the ? bit. The
   ?'s are actually placeholders in what is known as a "parameterized query".

   Parameterized queries are an important feature of essentially all database interfaces to modern high
   level programming languages such as the sqlite3 module in Python. This type of query serves to
   improve the efficiency of queries that are repeated several times. Perhaps more important, they also
   sanitize inputs that take the place of the ? placeholders which are passed in during the call to the
   execute method of the cursor object to prevent nefarious inputs leading to SQL injection. The
   following is a comic from the popular xkcd.com blog describing the dangers of SQL injection.

   To populate the remaining tables we are going to follow a slightly different pattern to change things
   up a bit. The workflow for each order, identified by a combination of customer first and last name
   and the purchase date, will be:
	1. Insert the new customer into the customers table and retrieve its primary key id
	2. Create an order entry based off the customer id and the purchase date then retrieve its primary
	   key id
	3. For each product in the order determine its primary key id and create a line item entry
	   associating the order and the product

   To make things simpler on ourselves let us do a quick look up of all our products. For now do not
   worry too much about the mechanics of the SELECT SQL statement as we will devote a section to it
   shortly.
>>> cur.execute("SELECT id, name, price FROM products")
>>> formatted_result = [f"{id:<5}{name:<35}{price:>5}" for id, name, price in cur.fetchall()]
>>> id, product, price = "Id", "Product", "Price"
>>> print('\n'.join([f"{id:<5}{product:<35}{price:>5}"] + formatted_result))
Id   Product                            Price
1    Introduction to Combinatorics       7.99
2    A Guide to Writing Short Stories   17.99
3    Data Structures and Algorithms     11.99
4    Advanced Set Theory                16.99

   The first order was placed on Feb 22, 1944 by Alan Turing who purchased Introduction to Combinatorics
   for $7.99.

   Start by making a new customer record for Mr. Turing then determine his primary key id by accessing
   the lastrowid field of the cursor object.
>>> customer_sql = "INSERT INTO customers (first_name, last_name) VALUES (?, ?)"
>>> cur.execute(customer_sql, ('Alan', 'Turing'))
>>> customer_id = cur.lastrowid
>>> print(customer_id)
1

   We can now create an order entry, collect the new order id value and associate it to a line item
   entry along with the product Mr. Turing ordered.
>>> order_sql = "INSERT INTO orders (date, customer_id) VALUES (?, ?)"
>>> date = "1944-02-22" # ISO formatted date
>>> cur.execute(order_sql, (date, customer_id))
>>> order_id = cur.lastrowid
>>> print(order_id)
1
>>> li_sql = """INSERT INTO lineitems
... 	(order_id, product_id, quantity, total)
... 	VALUES (?, ?, ?, ?)"""
>>> product_id = 1
>>> cur.execute(li_sql, (order_id, 1, 1, 7.99))

   The remaining records are loaded exactly the same except for the order made to Donald Knuth, which
   will receive two line item entries. However, the repetitive nature of such a task is crying out the
   need to wrap these functionalities into reusable functions. In the db_utils.py module add the
   following code:
def create_customer(con, first_name, last_name):
	sql = """
		INSERT INTO customers (first_name, last_name)
		VALUES (?, ?)"""
	cur = con.cursor()
	cur.execute(sql, (first_name, last_name))
	return cur.lastrowid

def create_order(con, customer_id, date):
	sql = """
		INSERT INTO orders (customer_id, date)
		VALUES (?, ?)"""
	cur = con.cursor()
	cur.execute(sql, (customer_id, date))
	return cur.lastrowid

def create_lineitem(con, order_id, product_id, qty, total):
	sql = """
		INSERT INTO lineitems
			(order_id, product_id, quantity, total)
		VALUES (?, ?, ?, ?)"""
	cur = con.cursor()
	cur.execute(sql, (order_id, product_id, qty, total))
	return cur.lastrowid

   Awh, now we can work with some efficiency!

   You will need to exit() your Python interpreter and reload it to get your new functions to become
   accessible in the interpreter.
>>> from db_utils import db_connect, create_customer, create_order, create_lineitem
>>> con = db_connect()
>>> knuth_id = create_customer(con, 'Donald', 'Knuth')
>>> knuth_order = create_order(con, knuth_id, '1967-07-03')
>>> knuth_li1 = create_lineitem(con, knuth_order, 2, 1, 17.99)
>>> knuth_li2 = create_lineitem(con, knuth_order, 3, 1, 11.99)
>>> codd_id = create_customer(con, 'Edgar', 'Codd')
>>> codd_order = create_order(con, codd_id, '1969-01-12')
>>> codd_li = create_lineitem(con, codd_order, 4, 1, 16.99)

   I feel compelled to give one additional piece of advice as a student of software craftsmanship. When
   you find yourself doing multiple database manipulations (INSERTs in this case) in order to accomplish
   what is actually one cumulative task (ie, creating an order) it is best to wrap the subtasks
   (creating customer, order, then line items) into a single database transaction so you can either
   commit on success or rollback if an error occurs along the way.

   This would look something like this:
try:
	codd_id = create_customer(con, 'Edgar', 'Codd')
	codd_order = create_order(con, codd_id, '1969-01-12')
	codd_li = create_lineitem(con, codd_order, 4, 1, 16.99)

	# commit the statements
	con.commit()
except:
	# rollback all database actions since last commit
	con.rollback()
	raise RuntimeError("Uh oh, an error occurred ...")

   I want to finish this section with a quick demonstration of how to UPDATE an existing record in the
   database. Let's update the Guide to Writing Short Stories' price to 10.99 (going on sale).
>>> update_sql = "UPDATE products SET price = ? WHERE id = ?"
>>> cur.execute(update_sql, (10.99, 2))

Querying the Database
   Generally the most common action performed on a database is a retrieval of some of the data stored in
   it via a SELECT statement. For this section I will be demonstrating how to use the sqlite3 interface
   to perform simple SELECT queries.

   To perform a basic multirow query of the customers table you pass a SELECT statement to the
   execute(...) method of the cursor object. After this you can iterate over the results of the query by
   calling the fetchall() method of the same cursor object.
>>> cur.execute("SELECT id, first_name, last_name FROM customers")
>>> results = cur.fetchall()
>>> for row in results:
... 	print(row)
(1, 'Alan', 'Turing')
(2, 'Donald', 'Knuth')
(3, 'Edgar', 'Codd')

   Lets say you would like to instead just retrieve one record from the database. You can do this by
   writing a more specific query, say for Donald Knuth's id of 2, and following that up by calling
   fetchone() method of the cursor object.
>>> cur.execute("SELECT id, first_name, last_name FROM customers WHERE id = 2")
>>> result = cur.fetchone()
>>> print(result)
(2, 'Donald', 'Knuth')

   See how the individual row of each result is in the form of a tuple? Well while tuples are a very
   useful Pythonic data structure for some programming use cases many people find them a bit hindering
   when it comes to the task of data retrieval. It just so happens that there is a way to represent the
   data in a way that is perhaps more flexible to some. All you need to do is set the row_factory method
   of the connection object to something more suitable such as sqlite3.Row. This will give you the
   ability to access the individual items of a row by position or keyword value.
>>> import sqlite3
>>> con.row_factory = sqlite3.Row
>>> cur = con.cursor()
>>> cur.execute("SELECT id, first_name, last_name FROM customers WHERE id = 2")
>>> result = cur.fetchone()
>>> id, first_name, last_name = result['id'], result['first_name'], result['last_name']
>>> print(f"Customer: {first_name} {last_name}'s id is {id}")
Customer: Donald Knuth's id is 2

Conclusion
   In this article I gave a brief demonstration of what I feel are the most important features and
   functionalities of the sqlite3 Python interface to the lightweight single file SQLite database that
   comes pre-bundled with most Python installs. I also tried to give a few bits of advices regarding
   best practices when it comes to database programming, but I do caution the new-comer that the
   intricacies of database programming is generally one of the most prone to security holes at the
   enterprise level and further knowledge is necessary before such an undertaking.



---
