filename: ptn_decorators-concepts-and-examples_20230411.txt
https://www.linuxcapable.com/python-decorators-concepts-and-examples/

Python Decorators: Concepts and Examples
April 8, 2023

Decorators are a powerful concept in Python programming that allows you to modify the behavior of functions
or classes in an elegant and reusable way. This article will provide an overview of Python decorators,
discussing their core concepts and showcasing examples of creating and applying them in your code.


Basic Concepts
Before diving into decorators, it's essential to understand a few fundamental concepts in Python:
functions as first-class objects, higher-order functions, and nested functions.
Functions as First-Class Objects

In Python, functions are first-class objects, meaning they can be treated like any other object, such
as integers, strings, or lists. This enables you to assign functions to variables, store them in data
structures, and even pass them as arguments to other functions. For example:

def greet(name):
	return f"Hello, {name}!"

welcome = greet
print(welcome("John"))	# Output: "Hello, John!"

Higher-Order Functions
Higher-order functions are functions that can either take other functions as arguments or return them
as results. Python's built-in functions map() and filter() are classic examples of higher-order functions:

def square(x):
	return x * x

numbers = [1, 2, 3, 4]
squared_numbers = map(square, numbers)
print(list(squared_numbers))  # Output: [1, 4, 9, 16]

Nested Functions
In Python, you can define functions inside other functions. These are called nested functions. For instance:

def outer_function():
	def inner_function():
		return "I'm the inner function!"

	return inner_function()

print(outer_function())  # Output: "I'm the inner function!"

Creating a Simple Decorator
A decorator is a higher-order function that takes a function as an argument and returns a new function
that usually extends or modifies the behavior of the input function. Here's a simple example of a decorator:

def uppercase_decorator(func):
	def wrapper():
		return func().upper()
	return wrapper

def greet():
	return "Hello, world!"

decorated_greet = uppercase_decorator(greet)
print(decorated_greet())  # Output: "HELLO, WORLD!"

Applying Decorators
There are two ways to apply decorators in Python: using the @ syntax or manually applying them.
Using the @ Syntax

The @ syntax is a shorthand for applying decorators. It's placed just above the function definition. Here's
the previous example using the @ syntax:

def uppercase_decorator(func):
	def wrapper():
		return func().upper()
	return wrapper

@uppercase_decorator
def greet():
	return "Hello, world!"

print(greet())	# Output: "HELLO, WORLD!"

In this example, using @uppercase_decorator is equivalent to calling uppercase_decorator(greet).

Manually Applying Decorators
You can also apply decorators manually by calling the decorator function with the target function as
an argument. This is useful when you want more control over when and how the decorator is applied. The
previous example demonstrates this approach with decorated_greet = uppercase_decorator(greet).
Chaining Multiple Decorators

You can chain multiple decorators to extend or modify the behavior of a function in various ways. Decorators
are applied from the innermost to the outermost:

def bold_decorator(func):
	def wrapper():
		return f"<b>{func()}</b>"
	return wrapper

def italic_decorator(func):
	def wrapper():
		return f"<i>{func()}</i>"
	return wrapper

@bold_decorator
@italic_decorator
def greet():
	return "Hello, world!"

print(greet())	# Output: "<b><i>Hello, world!</i></b>"

Using Decorators with Arguments
Sometimes you may want to pass arguments to a decorator. To do this, you need to create another level
of nesting in the decorator:

def repeat_decorator(times):
	def decorator(func):
		def wrapper(*args, **kwargs):
			result = ""
			for _ in range(times):
				result += func(*args, **kwargs)
			return result
		return wrapper
	return decorator

@repeat_decorator(3)
def greet(name):
	return f"Hello, {name}!\n"

print(greet("John"))  # Output: "Hello, John!\nHello, John!\nHello, John!\n"

In this example, the repeat_decorator takes an argument times and returns a decorator that repeats the
output of the decorated function times number of times.

Decorators with Classes
Decorators can be used with classes in two ways: decorating class methods or implementing decorators
as classes.

Decorating Class Methods
You can apply decorators to class methods just like you do with regular functions:

class Greeter:
	@uppercase_decorator
	def greet(self, name):
		return f"Hello, {name}!"

greeter = Greeter()
print(greeter.greet("John"))  # Output: "HELLO, JOHN!"

Implementing Decorators as Classes
You can also implement decorators as classes by defining the __call__ method:

class UppercaseDecorator:
	def __init__(self, func):
		self.func = func

	def __call__(self, *args, **kwargs):
		return self.func(*args, **kwargs).upper()

@UppercaseDecorator
def greet(name):
	return f"Hello, {name}!"

print(greet("John"))  # Output: "HELLO, JOHN!"

Common Use Cases for Decorators
Decorators can be used in various scenarios to enhance or modify the behavior of functions or classes. Here
are some common use cases:

Timing Functions
You can use decorators to measure the execution time of a function, which is helpful for performance
analysis and optimization:

import time

def timing_decorator(func):
	def wrapper(*args, **kwargs):
		start_time = time.perf_counter()
		result = func(*args, **kwargs)
		end_time = time.perf_counter()
		duration = end_time - start_time
		print(f"{func.__name__} took {duration:.2f} seconds to run.")
		return result
	return wrapper

@timing_decorator
def slow_function():
	time.sleep(2)

slow_function()

Caching Results
Decorators can be used to cache the results of expensive function calls, improving performance when the
same inputs are used multiple times:

from functools import lru_cache

@lru_cache(maxsize=None)
def fibonacci(n):
	if n <= 1:
		return n
	else:
		return fibonacci(n - 1) + fibonacci(n - 2)

print(fibonacci(100))  # Output: 354224848179261915075

Access Control
Decorators can be employed to enforce access control, restricting the execution of specific functions
based on user roles or permissions:

def admin_required(func):
	def wrapper(*args, **kwargs):
		if not user_is_admin():
			raise PermissionError("Admin privileges required.")
		return func(*args, **kwargs)
	return wrapper

@admin_required
def restricted_function():
	# Perform some sensitive operation
	pass

Logging
Logging the execution of functions can be useful for debugging and monitoring. A decorator can be used
to log when a function is called and when it returns:

import logging

def logging_decorator(func):
	def wrapper(*args, **kwargs):
		logging.info(f"Calling {func.__name__} with arguments {args} and keyword arguments {kwargs}.")
		result = func(*args, **kwargs)
		logging.info(f"{func.__name__} returned {result}.")
		return result
	return wrapper

@logging_decorator
def add(x, y):
	return x + y

print(add(3, 5))  # Output: 8

Drawbacks of Decorators
While decorators offer many benefits, they can also introduce some complexity and potential issues:

	They can make debugging more difficult, as decorators can modify the behavior of functions in
	non-obvious ways.
	Decorators can make stack traces harder to read, as the wrapper functions will appear in the trace
	instead of the original functions.
	When multiple decorators are chained, the order of application may not always be clear, leading to
	unexpected results.

Conclusion
Python decorators provide an elegant and powerful way to modify or extend the behavior of functions and
classes. Understanding the core concepts and common use cases of decorators will help you write cleaner,
more efficient, and more maintainable code.

Additional Resources and Links
To deepen your understanding of Python decorators and explore more advanced use cases, check out the
following resources:

	Python Documentation: The official Python documentation provides a comprehensive guide on decorators
	and their usage in Python:
		- Python Decorator Library
		  [https://docs.python.org/3/library/functools.html]

		- PEP 318 - Decorators for Functions and Methods
		  [https://www.python.org/dev/peps/pep-0318/]
	Stack Overflow: If you have specific questions or need help with Python decorators, Stack Overflow
	is a great place to find solutions and engage with the community:
		- Python Decorators on Stack Overflow
		  [https://stackoverflow.com/questions/tagged/python-decorators]



---

