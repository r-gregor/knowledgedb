filename: python_what-can-it-be-used-for_multif_20170213.txt
https://www.quora.com/What-is-Python-primarily-used-for

What is Python primarily used for?

   The expressive syntax of Python and abundance of libraries make Python a great language for almost
   anything besides systems programming (where C/C++ dominates). Here are some use cases for Python I've
   seen:
     * Writing scripts: Python is a great scripting language. You can use scripts to parse a text file,
       generate sample inputs to test a program, scrap content from websites
       (see [http://www.crummy.com/software/BeautifulSoup/bs4/doc/] Beautiful Soup
       library), etc.. If you are familiar with Python syntax but not with Bash scripting syntax, such
       as Bash branches or loops, you can write Python scripts instead of Bash scripts (see
       [16]subprocess module).
     * Build web application backends: This includes writing APIs and interacting with the database.
       Many popular websites use a Python backend, including Quora and Instagram. Common
       frameworks include [https://docs.djangoproject.com/en/1.8/] Django, [http://flask.pocoo.org/] Flask,
       and [http://www.pylonsproject.org/projects/pyramid/about] Pyramid.
     * Data analysis and visualization: Libraries like [http://www.numpy.org/] NumPy,
       [http://pandas.pydata.org/pandas-docs/stable/] pandas, [http://scikit-learn.org/stable/] scikit-learn
       brings features from MATLAB and R into Python, such as matrix operations, data frames, modeling (e.g.
       linear regression)... [http://ipython.org/] IPython has an interactive notebook for Python that is
       similar to RMarkdown and Wolfram Mathematica Notebook. [26]Matplotlib and [27]Seaborn provide powerful
       data visualization.
     * Science: I have a friend who used Python to do protein sequence analysis ([28]Protein Dynamics
       and Sequence Analysis).

   These are just a few I've used or heard of, and there are many more.

   
---
https://www.quora.com/What-can-I-do-build-with-Python

What can I do/build with Python?

   Is Python better for certain programming needs? What can you / can't you do with Python?
   UpdateCancel

   Python is a very versatile language. It is very popular because it can be used for just about
   anything nowadays: GUI development, web sites, data analysis, as a “glue” between other languages,
   etc. It even can be used to replace the operating system’s shell.

   Others have provided a large number of things you can do with Python. I’d like to cover some of its
   limitations, since you asked. As an interpreted language, Python is inherently slower than compiled
   languages. This means there are times when the code runs slower than desired; advances in computing
   technology alleviate this, but only so much. The good thing is that, unless an entire program has to
   be written in a compiled language, Python can still be used; the critical parts can just be rewritten
   in C/C++ and extended or embedded in Python.

   The interpreted nature of Python also means that there are certain applications that simply can’t be
   done with Python. If there isn’t a Python version available for the OS you want to use, for example,
   embedded Linux on an IoT device, you won’t be able to use Python directly on the device. You can get
   around this, somewhat, by using Python on an external device that communicates with something else on
   the IoT device, but obviously you’re going to be limited in what you can do.

   Python also can’t handle low-level device interaction, i.e. directly working with hardware. Ergo,
   Python isn’t ideal for making device drivers or other things that need to work with bare metal or
   work with the kernel. There are some ways around this, but the short answer is use another
   language like C/C++.

   This also means that Python can’t be used to completely write an OS. Python requires an interpreter
   to run Python code, so there has to be something for the interpreter to run on. Therefore, unless
   there are significant changes in computer science in the future, you won’t be seeing any OS written
   in Java, Python, Ruby, .NET, or similar languages. That’s not to say you couldn’t have an underlying
   “micro OS” written in C/C++, then run a Python shell on top of it, but you won’t be able to have a
   pure Python OS.

   Python is also used extensively in offensive and defensive cyber operations. Offensively, the actual
   exploit payload may be written in C, assembly, or some other low-level language depending on the
   destination device, but Python is used for the command & control of the exploit.

   Defensively, Python can be used for a number of things, from log analysis, managing databases and
   network traffic, analyzing vulnerabilities and known malware, etc. With the number of libraries
   available via PyPI, just about anything you want to do is available in Python.

   The power and versatility make Python my favorite programming language. I learned to enjoy Python so
   much that I eventually wrote my own Python book series. If you’re looking for support to improve
   your likelihood of success, I recommend looking at a mentoring site such as Thinkful; I am a
   mentor for Thinkful’s Python course.
   Mentors like myself provide 1-on-1 programming advice to new students, guiding them through the
   different lessons and helping them understand the concepts they are learning. Students who learn
   1-on-1 have been shown to perform better than 98% of students who learn in a traditional
   classroom.

   Mentors provide additional knowledge of the hows and whys behind writing code in a particular way. We
   can also show alternative ways of writing code, just for students to understand that there is no
   “right way” to code; as long as it gets the job done, it’s a successful application. However, a
   mentor can demonstrate a different or more optimized way to write a particular code block, allowing
   the student to see new ways to be creative and identify new thought processes.

   The Thinkful lessons cover a wide gamut of technology, which will set you up for future learning on
   your own. At a minimum, I believe you will have enough knowledge to get an entry level programming
   job, as you’ll have a capstone project to put into your programming portfolio.
   20.3k Views · View Upvotes

   
---
