filename: ptn_manage_duplicate-files-multif_20181218.txt
http://codingdirectional.info/2018/12/01/start-a-brand-new-python-windows-application-project-with-tkinter/

Start a brand new python windows application project with tkinter
December 1, 2018

   Welcome to the first chapter of this python's windows application project which we will start to
   create an application that will remove the duplicate files in our computer's folder. This project
   will use the tkinter module which is part of the python 3 modules to render all the user interfaces
   for us. I will use pycharm as the project's ide to create the entire project, if you want to know
   how to install pycharm and set up the python project with pycharm you can read it here.

   The first chapter of our tutorial is very simple, we are going to create a button which when we click
   on it, it will open a file selector window which allows us to pick a file from any folder, after we
   have selected a file on one of the folder that file name will be printed on the command window of
   pycharm.

   Before we start to look at the below code I will assume you have already known python for a while and
   is ready to create your first python's project, if not then there are lots of online documents
   that you can refer to for example you can read python's tutorial on the python website.

   Here is the python program.
from tkinter import *
from tkinter import filedialog

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI

# 4 Create a label
aLabel = Label(win, text="Remove duplicate file")
aLabel.grid(column=0, row=0) # 5 Position the label

# 6 Create a selectFile function to be used by button
def selectFile():

    filename = filedialog.askopenfilename(initialdir="/", title="Select file")
    print(filename) # 7 print the filename from the selected file

# 8 Adding a Button
action = Button(win, text="Search File", command=selectFile)
action.grid(column=0, row=1) # 9 Position the button

win.mainloop()  # 10 start GUI

   Run the above python program and you will see the below result.
   http://codingdirectional.info/wp-content/uploads/2018/12/python-application.mp4

   In the next chapter we will modify the select file function and turn it into a duplicate file removal
   function.


---
http://codingdirectional.info/2018/12/03/create-the-custom-made-thread-class-for-the-python-application-project/

Create the custom made thread class for the python application project
December 3, 2018

   Welcome back to the part 2 of the python application project, if you miss the first part of the
   project then you can read it here. In this chapter we are going to print out the file name which we
   have selected earlier with the help of the custom made thread instance instead of print out that
   filename directly inside the selectFile method just like in the previous chapter.

   First lets create a custom made thread class from the main Thread class then process the selected
   filename under it's run method.
import threading

class Remove(threading.Thread):

   def __init__(self, massage):

      threading.Thread.__init__(self)
      self.massage = massage

   def run(self):
      print(self.massage)
      print('program terminate!')
      return

   Now in the main file the program will create a new instance of the Remove thread class whenever the
   user has clicked on the button and selected a file from the folder.
   Open a folder and select a file Open a folder and select a file

   This is the modify version of the main file.
from tkinter import *
from tkinter import filedialog
from Remove import Remove

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI

# 4 Create a label
aLabel = Label(win, text="Remove duplicate file")
aLabel.grid(column=0, row=0) # 5 Position the label

# 6 Create a selectFile function to be used by button
def selectFile():

    filename = filedialog.askopenfilename(initialdir="/", title="Select file")
    remove = Remove(filename) # 7 create and start new thread to print the filename from the selected file
    remove.start()

# 8 Adding a Button
action = Button(win, text="Search File", command=selectFile)
action.grid(column=0, row=1) # 9 Position the button

win.mainloop()  # 10 start GUI

   The reason we need to create a thread when we search and remove the duplicate files later on in our
   project is because the search program will freeze up whenever we search for a very large folder which
   contains lots of files inside it, therefore creating a separate stand alone thread to process those
   files is a must.

   Alright, with that we are now ready to move to the next step of our project, which is to create a
   search engine which will help us to remove the duplicate files on our folder.


---
http://codingdirectional.info/2018/12/04/list-out-all-the-files-within-a-folder-with-python/

List out all the files within a folder with python
December 4, 2018

   In this article we will continue with our windows application development using tkinter, in the
   previous article we have created a button which when we click on it we can select a file from a
   folder and the program will print the name of that file on the pycharm command console. In this
   article we will write the program to do this.

   1) Select a folder.
   2) Print all the name of the files (with file extension) within that folder on the label part of our
   UI.

   First we will edit the main file of the program so it will open up a folder instead of a file.
from tkinter import *
from tkinter import filedialog
from Remove import Remove

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate file", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")

# 6 Create a selectFile function to be used by button
def selectFile():

    #filename = filedialog.askopenfilename(initialdir="/", title="Select file")
    folder = filedialog.askdirectory() # 7 open a folder then create and start a new thread to print those
                                       # filenames from the selected folder
                                       
    remove = Remove(folder, aLabel)
    remove.start()

# 8 Adding a Button
action = Button(win, text="Open Folder", command=selectFile)
action.grid(column=0, row=0) # 9 Position the button
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   As you can see, we have passed in the name of that folder which we have selected when we create a new
   Remove thread instance in the selectFile method, besides that we have also passed the label object
   into the Remove thread instance so we can modify it's content later on.

   Here is the modify version of the Remove thread class.
import threading
import os

class Remove(threading.Thread):

   def __init__(self, massage, aLabel):

      threading.Thread.__init__(self)
      self.massage = massage
      self.label = aLabel

   def run(self):

      text_filename = ''
      filepaths = os.listdir(self.massage)
      for filepath in filepaths:
         text_filename += filepath + '\n'
      self.label.config(text=text_filename)
      return

   The program is very simple, get each file name from that selected directory, concatenates them and
   finally prints them on the label object.
   Open a file folder Open a file folder

   Our main objective here is to create a program which will remove the duplicate files in another
   folder, we have already known the method to open a single file, and in this article we have learned
   the method to open a folder, in the next chapter we will continue to add in more methods for this
   particular program.


---
http://codingdirectional.info/2018/12/05/search-for-any-duplicate-file-with-python/

Search for any duplicate file with python
December 5, 2018

   Welcome to the new chapter of this remove duplicate file project. After creating a thread class, open
   a file and open a folder in the previous few chapters, we can now start to move toward our main
   objective which is to search for a duplicate file in another folder.

   What we will do in this chapter is to write a program to select a file and select a folder which we
   want to look for the file with the same filename as the one which we have just selected earlier. If
   the file with the same name does exists in another folder then we will print the file found statement
   on the application's label or else we will print out no file with the same name found statement on
   that same application's label.

   Lets get started. First of all we will edit the main program file to select a file and the folder,
   the open folder dialog will only open if and only if a file has been selected.
from tkinter import *
from tkinter import filedialog
from Remove import Remove

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate file", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")

# 6 Create a selectFile function to be used by button
def selectFile():

    filename = filedialog.askopenfilename(initialdir="/", title="Select file")
    if(filename != ''):
        filename = filename.split('/')[-1] # this is for the windows separator only
        folder = filedialog.askdirectory() # 7 open a folder then create and start a new thread to print those
 filenames from the selected folder
        remove = Remove(folder, aLabel, filename)
        remove.start()

# 8 Adding a Button
action = Button(win, text="Open Folder", command=selectFile)
action.grid(column=0, row=0) # 9 Position the button
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   Now we will modify our Remove thread class to search for a file inside another folder.
import threading
import os

class Remove(threading.Thread):

   def __init__(self, massage, aLabel, filename):

      threading.Thread.__init__(self)
      self.massage = massage
      self.label = aLabel
      self.filename = filename

   def run(self):
      text_filename = 'There is no duplicate item'
      filepaths = os.listdir(self.massage)
      for filepath in filepaths:
         if(filepath == self.filename):
            text_filename = 'Found duplicate item'
      self.label.config(text=text_filename)
      return

   If you run the above program you will see this statement appears if the duplicate file has been
   found!
   Found the duplicate item Found the duplicate item

   In the next chapter we will start to remove the duplicate file from another folder!


---
http://codingdirectional.info/2018/12/06/delete-duplicate-file-with-python-program/

Delete duplicate file with python program
December 6, 2018

   In this article we will start to explore the technique which we will use to delete a duplicate file
   in our computer folder. The main objective in this chapter is to select a file in one folder and then
   searches and deletes the file with the same filename as the one which we have selected earlier. We
   will use back the same program which we have created in the previous chapter to delete the duplicate
   file in the computer hard drive.

   First of all there are not many changes in the main file, I just include another if statement to make
   sure that a new remove thread instance will only get created if the folder which we want to search
   for the duplicate file has been selected.
from tkinter import *
from tkinter import filedialog
from Remove import Remove
import os

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")

# 6 Create a selectFile function to be used by button
def selectFile():

    filename = filedialog.askopenfilename(initialdir="/", title="Select file")
    if(filename != ''):
        filename = filename.split('/')[-1] # this is for the windows separator only
        folder = filedialog.askdirectory() # 7 open a folder then create and start a new remove thread to
        delete the duplicate file
        if(folder != ''):
            remove = Remove(folder, aLabel, filename)
            remove.start()

# 8 Adding a Button
action = Button(win, text="Open Folder", command=selectFile)
action.grid(column=0, row=0) # 9 Position the button
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   Next we will delete the duplicate file if we found one in another folder.
import threading
import os

class Remove(threading.Thread):

   def __init__(self, massage, aLabel, filename):

      threading.Thread.__init__(self)
      self.massage = massage
      self.label = aLabel
      self.filename = filename

   def run(self):
      text_filename = 'The is no duplicate item'
      filepaths = os.listdir(self.massage)
      for filepath in list(filepaths):
         if(filepath == self.filename):
            os.chdir(self.massage)
            os.remove(filepath)
            text_filename = filepath + '  has been removed'

      self.label.config(text=text_filename)

      return

   This is just the beginning of this project which we will search within folders to further look for
   the file with the same name in the next chapter. But we will not stop there because what we really
   want to achieve is to delete a file with the same content instead of with the same name because the
   file with the same name might contains different contents which means that it is not a duplicate file
   after all, but for now lets pretend it is, the most important strategy of writing program is to build
   up the framework first.


---
http://codingdirectional.info/2018/12/08/remove-the-duplicate-file-from-nested-folders-with-python/

Remove the duplicate file from nested folders with python
December 8, 2018

   In this article we will continue to develop our python application which will remove the duplicate
   file within a folder. In the last chapter we have removed a duplicate file in another folder and this
   time we will remove all the duplicate files within the nested folders by slightly modifying the
   previous program. First of all we will edit the main file by replacing the forward slash with
   backward slash to suite the windows file path's format.
from tkinter import *
from tkinter import filedialog
from Remove import Remove

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")

# 6 Create a selectFile function to be used by button
def selectFile():

    filename = filedialog.askopenfilename(initialdir="/", title="Select file")
    if(filename != ''):
        filename = filename.split('/')[-1] # this is for the windows separator only
        folder = filedialog.askdirectory() # 7 open a folder then create and start a new remove thread to dele
te the duplicate file
        if(folder != ''):
            folder = folder.replace('/', '\\')
            remove = Remove(folder, aLabel, filename)
            remove.start()

# 8 Adding a Button
action = Button(win, text="Select File", command=selectFile)
action.grid(column=0, row=0) # 9 Position the button
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   Next we will modify the remove class so now we can remove all the duplicate files within nested
   folder.
import threading
import os

class Remove(threading.Thread):

   def __init__(self, massage, aLabel, filename):

      threading.Thread.__init__(self)
      self.massage = massage
      self.label = aLabel
      self.filename = filename

   def run(self):

      filepaths = os.listdir(self.massage)

      for filepath in list(filepaths):
         os.chdir(self.massage)
         if(os.path.isfile(filepath)):
            if(filepath == self.filename):
               os.remove(filepath)
         else:
            self.delete_duplicate(os.path.join(self.massage, filepath))
      return

   def delete_duplicate(self, folder): # sub method to pass folder to

      filepaths = os.listdir(folder)

      for filepath in list(filepaths):
         os.chdir(folder)   # need this to reset the current folder
         if(os.path.isfile(filepath)):
            if (filepath == self.filename):
               os.remove(filepath)
         else:
            self.delete_duplicate(os.path.join(folder, filepath))

   After you have selected a file from a folder and selected another folder which you want to search and
   remove the file with the same file name as the one inside the previous folder, you can just sit back
   and wait for the program to search and destroy all the duplicate files in that second folder plus all
   the duplicate files inside the folders that are within the second folder as well as the duplicate
   file insides the folder which contains inside the folder which is insides that second folder. The
   program has successfully removed all the duplicate files within folders that have less than 50 files
   each without any delays with only one new thread. Will the program slow down if there are lots of
   folders and files to search for? We don't know yet and will only modify it if we need more threads to
   handle the job. Our next goal is to remove the file if and only if the content of that file is the
   same as the selected one. Remember what I have written in the previous chapter? We simply cannot
   assume that two files with the same name and the same file's extension contain the same content. So
   stay tune for the next chapter.


---
http://codingdirectional.info/2018/12/09/compare-and-delete-files-with-the-same-content-with-python/

Compare and delete files with the same content with python
December 9, 2018

   Welcome back to this new chapter of the delete duplicate application project, in the previous chapter
   this python program has successfully deleted the duplicate files inside the nested folders, however
   it has not really delete the file with the same content but instead just deletes the duplicate file
   with the same name as the selected one. Thus in this chapter we are going one step further to only
   delete the file with the same content and leave the one with the same name alone. First of all we
   will include the full path to the file which we have selected as the forth parameter when we create a
   new remove thread instance.
from tkinter import *
from tkinter import filedialog
from Remove import Remove

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")

# 6 Create a selectFile function to be used by button
def selectFile():

    fullfilename = filedialog.askopenfilename(initialdir="/", title="Select file")
    if(fullfilename != ''):
        filename = fullfilename.split('/')[-1] # this is for the windows separator only
        folder = filedialog.askdirectory() # 7 open a folder then create and start a new remove thread to dele
te the duplicate file
        if(folder != ''):
            folder = folder.replace('/', '\\')
            remove = Remove(folder, aLabel, filename, fullfilename)
            remove.start()

# 8 Adding a Button
action = Button(win, text="Select File", command=selectFile)
action.grid(column=0, row=0) # 9 Position the button
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   Next we will modify the remove thread class by introducing in the filecmp module which will be used
   to compared the content of two files. If a file has the same content as the selected file then it
   will get deleted or else it won't get deleted even if it has a same name as the selected file.
import threading
import os
import filecmp

class Remove(threading.Thread):

   def __init__(self, massage, aLabel, filename, fullfilename):

      threading.Thread.__init__(self)
      self.massage = massage
      self.label = aLabel
      self.filename, self.file_extension = os.path.splitext(filename)
      self.fullfilename = fullfilename

   def run(self):

      filepaths = os.listdir(self.massage)

      for filepath in list(filepaths):
         os.chdir(self.massage)
         if(os.path.isfile(filepath)):
            filename, file_extension = os.path.splitext(filepath)
            self.remove_file(file_extension, filepath)
         else:
            self.delete_duplicate(os.path.join(self.massage, filepath))
      return

   def delete_duplicate(self, folder): # sub method to pass folder to

      filepaths = os.listdir(folder)

      for filepath in list(filepaths):
         os.chdir(folder)
         if(os.path.isfile(filepath)):
            filename, file_extension = os.path.splitext(filepath)
            self.remove_file(file_extension, filepath)
         else:
            self.delete_duplicate(os.path.join(folder, filepath))

   def remove_file(self, file_extension, filepath):
      if (file_extension == self.file_extension):
         if filecmp.cmp(filepath, self.fullfilename, shallow=False):
            os.remove(filepath)

   The python program above runs successfully without any problem. With that we can now come back and
   look at the remove thread class again and further modify it in the next coming chapter so that it can
   handle the heavy work load such as to search for a few different type of duplicate files at the same
   time! If you do enjoy this tutorial make sure you subscribe to the rss feed of this website.


---
http://codingdirectional.info/2018/12/10/create-multiple-threads-to-delete-multiple-files-with-python/

Create multiple threads to delete multiple files with python
December 10, 2018

   In this article we are going to continue with the previous remove duplicate project and this time the
   program will create multiple threads to remove multiple duplicate files in the hard drive of the
   windows os's laptop. Before we can remove multiple duplicate files in the pc hard drive we will need
   to select multiple files that will be used by the program to search for the multiple duplicate files
   in another folder of our laptop hard drive first,  in order to select multiple files in windows hard
   drive we will need to left click on one file and then hold shift and left click on the other files at
   the same time.

   Now lets edit the main project file to make some changes. We will first remove the label parameter
   from the remove thread because it has served no purpose anymore in our program. Next we will use the
   filedialog.askopenfilenames method to open the file dialog which allows us to select multiple files
   at the same time. The last thing we need to do is to create separate thread to handle separate
   duplicate file removal process, how many threads can we actually create at the same time is depends
   on the memory limit of our computer, but you do not need to worry about this issue because the search
   and destroy process only takes very short time, thus one thread will be freed and ready to handle the
   next round of search and destroy process after it has finished it's previous job in a very short time
   period. If you want to know how many threads can the cpu core produces then here is a great
   article about this topic.
from tkinter import *
from tkinter import filedialog
from Remove import Remove

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")

# 6 Create a selectFile function to be used by button
def selectFile():

    fullfilenames = filedialog.askopenfilenames(initialdir="/", title="Select file") # select multiple files
                                                                                     # from the hard drive
    fullfilenamelist = win.tk.splitlist(fullfilenames)

    if(fullfilenamelist[0] != ''):

        folder = filedialog.askdirectory()  # 7 open a folder then create and start a new remove thread to
                                            # delete the duplicate file

        if(folder != ''):
            folder = folder.replace('/', '\\')
            for fullfilename in fullfilenamelist:

                if(fullfilename != ''):
                    filename = fullfilename.split('/')[-1] # 8 this is for the windows separator only
                    remove = Remove(folder, filename, fullfilename)
                    remove.start()
                    remove.join()

# 9 Adding a Button
action = Button(win, text="Select File", command=selectFile)
action.grid(column=0, row=0)
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   Nothing much for us to modify in the remove thread class, all we need to do is just to remove the
   label parameter which we no longer need it.
import threading
import os
import filecmp

class Remove(threading.Thread):

   def __init__(self, massage,  filename, fullfilename):

      threading.Thread.__init__(self)
      self.massage = massage
      self.filename, self.file_extension = os.path.splitext(filename)
      self.fullfilename = fullfilename

   def run(self):

      filepaths = os.listdir(self.massage)

      for filepath in list(filepaths):
         os.chdir(self.massage)
         if(os.path.isfile(filepath)):
            filename, file_extension = os.path.splitext(filepath)
            self.remove_file(file_extension, filepath)
         else:
            self.delete_duplicate(os.path.join(self.massage, filepath))
      return

   def delete_duplicate(self, folder): # sub method to pass folder to

      filepaths = os.listdir(folder)

      for filepath in list(filepaths):
         os.chdir(folder)
         if(os.path.isfile(filepath)):
            filename, file_extension = os.path.splitext(filepath)
            self.remove_file(file_extension, filepath)
         else:
            self.delete_duplicate(os.path.join(folder, filepath))

   def remove_file(self, file_extension, filepath):
      if (file_extension == self.file_extension):
         if filecmp.cmp(filepath, self.fullfilename, shallow=False):
            os.remove(filepath)

   That is it, now we will have a fully function able multiple files selection remove duplicate files
   program!  I will continue use this program to search for lots of files and see whether will the
   program slows down or not when we search for lots of files at the same time. The program next task is
   to only allows the search process to begin if and only if the user has selected a different folder
   instead of a current one because we certainly don't want to remove the file which is in the present
   folder, so stay tune for the next lesson.


---
http://codingdirectional.info/2018/12/11/dont-delete-the-same-file-in-its-own-directory/

Don't delete the same file in it's own directory
December 11, 2018

   Welcome back to the next chapter of the delete duplicate application, in the previous chapters we
   have successfully created a multiple files selector which will delete all the duplicate files in
   another folder. And in this chapter we will further tune up the program to make sure we can also
   delete all those duplicate files in the nested folders that are contain in the same folder where the
   file which we want to search for it's duplicate version is located. The first file which we need to
   change is the main file, the program will need to make sure the user has selected a file to search
   for it's duplicate version as well as the user has selected a folder to search for the duplicate file
   or else a message box will pop up to warn the user about that. The program will also pass in the
   folder path which the selected file is located to the remove thread so the thread will not search and
   delete that selected file.
from tkinter import *
from tkinter import filedialog
from Remove import Remove
import os
from tkinter import messagebox

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")

# 6 Create a selectFile function to be used by button
def selectFile():

    fullfilenames = filedialog.askopenfilenames(initialdir="/", title="Select a file") # select multiple files
                                                                                       # from the hard drive

    if(fullfilenames != ''):

        fullfilenamelist = win.tk.splitlist(fullfilenames)
        directory_path = os.path.dirname(os.path.abspath(fullfilenamelist[0]))

        os.chdir(directory_path)  # change the directory to the selected file directory

        folder = filedialog.askdirectory()  # 7 open a folder then create and start a new remove thread to
                                            # delete the duplicate file
                                            
        folder = folder.replace('/', '\\')  # 8 this is for the windows separator only

        if(folder != '' and folder != os.getcwd()):

            for fullfilename in fullfilenamelist:

                if(fullfilename != ''):
                    filename = fullfilename.split('/')[-1]
                    remove = Remove(folder, filename, fullfilename, directory_path)
                    remove.start()
                    remove.join()

        else:
            messagebox.showinfo("Error", "Kindly select one folder and it must be a different one")
            return

    else:
        messagebox.showinfo("Select file", "You need to select a file!")
        return


# 9 Adding a Button
action = Button(win, text="Select File", command=selectFile)
action.grid(column=0, row=0)
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   Next we will modify the remove class to match those changes in our program.
import threading
import os
import filecmp

class Remove(threading.Thread):

   def __init__(self, massage,  filename, fullfilename, directory_path):

      threading.Thread.__init__(self)
      self.massage = massage
      self.filename, self.file_extension = os.path.splitext(filename)
      self.fullfilename = fullfilename
      self.directory_path = directory_path

   def run(self):

      filepaths = os.listdir(self.massage)

      for filepath in list(filepaths):
         os.chdir(self.massage)
         if(os.getcwd() != self.directory_path): # make sure that we will not delete the same file in the sele
cted file directory
            if(os.path.isfile(filepath)):
               filename, file_extension = os.path.splitext(filepath)
               self.remove_file(file_extension, filepath)
            else:
               self.delete_duplicate(os.path.join(self.massage, filepath))
         else:
            continue


   def delete_duplicate(self, folder): # sub method to pass folder to

      filepaths = os.listdir(folder)

      for filepath in list(filepaths):
         os.chdir(folder)
         if(os.getcwd() != self.directory_path):

            if(os.path.isfile(filepath)):
               filename, file_extension = os.path.splitext(filepath)
               self.remove_file(file_extension, filepath)
            else:
               self.delete_duplicate(os.path.join(folder, filepath))

         else:
            continue

   def remove_file(self, file_extension, filepath):
      if (file_extension == self.file_extension):
         if filecmp.cmp(filepath, self.fullfilename, shallow=False):
            os.remove(filepath)

   That is it, the remove file sub method will compare the files' extension first before further
   compares the two files which will reduce the time of thread process. Our next mission is to create a
   massage box to inform the user how many duplicate files have been deleted and we will do that on the
   next chapter.


---
http://codingdirectional.info/2018/12/12/tell-the-user-how-many-duplicate-files-have-the-python-program-deleted/

Tell the user how many duplicate files have the python program deleted
December 12, 2018

   Welcome back again, in this chapter we will create a message box to tell the user how many duplicate
   files have been deleted from each selected file. The game plan here is simple, we will attach a
   message variable to the label widget and pass that widget to each remove thread instance so the
   program can modify the content of that message by adding in the selected file name as well as the
   total number of duplicate files that have been remove from the selected folder. That modify message
   will then be shown by the messagebox on the main thread at the end of each file deleting process. The
   first file we need to edit is the main file where we will pass in the tkinter's label object with the
   message variable to each new remove thread instance which the program has created, the remove thread
   instance will then modify the content of that same message which includes the total number of
   duplicate files that have been deleted together with the file name of the original selected file. We
   need not worry too much about whether those threads will compete with each other to modify the
   content of the message or not because one process will finish before another so therefore there is
   always a time gap in between the process in this case. Here is the new version of the main file.
from tkinter import *
from tkinter import filedialog
from Remove import Remove
import os
from tkinter import messagebox

win = Tk() # 1 Create instance
win.title("Multitas") # 2 Add a title
win.resizable(0, 0) # 3 Disable resizing the GUI
win.configure(background='black') # 4 change background color

# 5 Create a label
aLabel = Label(win, text="Remove duplicate", anchor="center")
aLabel.grid(column=0, row=1)
aLabel.configure(foreground="white")
aLabel.configure(background="black")
aLabel.message = ''

# 6 Create a selectFile function to be used by button
def selectFile():

    fullfilenames = filedialog.askopenfilenames(initialdir="/", title="Select a file") # select multiple files
 from the hard drive

    if(fullfilenames != ''):

        fullfilenamelist = win.tk.splitlist(fullfilenames)
        directory_path = os.path.dirname(os.path.abspath(fullfilenamelist[0]))

        os.chdir(directory_path)  # change the directory to the selected file directory

        folder = filedialog.askdirectory()  # 7 open a folder then create and start a new remove thread to del
ete the duplicate file
        folder = folder.replace('/', '\\')  # 8 this is for the windows separator only

        if(folder != '' and folder != os.getcwd()):

            for fullfilename in fullfilenamelist:

                if(fullfilename != ''):
                    filename = fullfilename.split('/')[-1]
                    remove = Remove(folder, filename, fullfilename, directory_path, aLabel)
                    remove.start()
                    remove.join()
                    messagebox.showinfo('Remove duplicate files', aLabel.message)

        else:
            messagebox.showinfo("Error", "Kindly select one folder and it must be a different one")
            return

    else:
        messagebox.showinfo("Select file", "You need to select a file!")
        return


# 9 Adding a Button
action = Button(win, text="Select File", command=selectFile)
action.grid(column=0, row=0)
action.configure(background='brown')
action.configure(foreground='white')

win.mainloop()  # 10 start GUI

   And here is the edit version of the remove thread class.
import threading
import os
import filecmp
from tkinter import messagebox

class Remove(threading.Thread):

    def __init__(self, massage,  filename, fullfilename, directory_path, aLabel):

        threading.Thread.__init__(self)
        self.massage = massage
        self.filename, self.file_extension = os.path.splitext(filename)
        self.fullfilename = fullfilename
        self.directory_path = directory_path
        self.count = 0
        self.aLabel = aLabel

    def run(self):

        filepaths = os.listdir(self.massage)

        for filepath in list(filepaths):
            os.chdir(self.massage)
            if(os.getcwd() != self.directory_path): # make sure that we will not delete the same file in the
                                                    # selected file directory
                                                    
                if(os.path.isfile(filepath)):
                    filename, file_extension = os.path.splitext(filepath)
                    self.remove_file(file_extension, filepath)
                else:
                    self.delete_duplicate(os.path.join(self.massage, filepath))
            else:
                continue

        self.aLabel.message = 'Removed ' + str(self.count) + ' duplicate : ' + self.filename
        # show this message box each time a set of duplicate files have been remove


    def delete_duplicate(self, folder): # sub method to pass folder to

        filepaths = os.listdir(folder)

        for filepath in list(filepaths):
            os.chdir(folder)
            if(os.getcwd() != self.directory_path):

                if(os.path.isfile(filepath)):
                    filename, file_extension = os.path.splitext(filepath)
                    self.remove_file(file_extension, filepath)
                else:
                    self.delete_duplicate(os.path.join(folder, filepath))

            else:
                continue

    def remove_file(self, file_extension, filepath):
        if (file_extension == self.file_extension):
            if filecmp.cmp(filepath, self.fullfilename, shallow=False):
                os.remove(filepath)
                self.count += 1

   Now each remove thread will manage it's own business so there is no conflict with the count variable
   and the old message text will be replaced by the new one by the next process which changes it. That
   is basically it for this remove duplicate project, we are now fully ready to pack it up and use it on
   our windows' desktop.


---
