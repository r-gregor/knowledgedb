https://www.quora.com/In-Python-why-cant-you-remove-elements-from-a-list-with-a-for-loop-but-you-can-with-a-while-loop
filename: ptn_removing-items-from-list-with-for-loop-error-solved_20180809.txt

In Python, why can't you remove elements from a list with a for loop, but you can with a while loop?

***
Let’s say you have a list with integers:
1 >>> lst = [1, 2, 3, 4]

Now, suppose I want to delete 1 1 from the list. Let’s use a while loop.
Logic: I’ll just iterate through the list, and when I see the 1 1, I’ll remove it.
Let’s code this up.
1 >>> i = 0
2 >>> while i < len(lst):
3 ... 	if lst[i] == 1:
4 ...			del lst[i]
5 ...		else:
6 ...			i += 1

Let’s see what the list contains.
1 >>> lst
2 [2, 3, 4]

It works!

Now, let’s try a for loop using the same logic. Let’s try to remove 2 2 now.
1 >>> for i in range(len(lst)):
2 ... 	if lst[i] == 2:
3 ...			del lst[i]
4 Traceback (most recent call last):
5 File "<stdin>", line 2, in <module>
6 IndexError: list index out of range


Well, that gives us an error. Just out of curiosity let’s check what our list now contains.
1 >>> lst
2 [3, 4] 

Well, it does work. But why? And why the error?
The reason why we get an error is we’re iterating over a range. Initially, our range is from [0,3) [0,3).
When we delete an item from the list, we are destructively shortening the list, but the range stays the same.
Thus, the length of the range is no longer equal to the length of the list, in fact it is greater. Thus, at
some point i i exceeds the count of the list and so we get an index out of range error.

It works because by the time the error is thrown, we have iterated over the entire list. So all elements of
the list that met the condition were deleted.

Why doesn’t this happen with a while loop?

On each iteration the while loop condition will get evaluated. This means that we will check the length of the
list on each iteration. Therefore, there will never be an index error.

Can we still use a for loop?
Yes we can. The most simple change would be to reverse the range, i.e. do the following instead:
1 >>> for i in range(len(lst)-1, -1, -1):
2 ... 	if lst[i] == 2:
3 ...			del lst[i]


The reason why this works is because we’re beginning to cut the list from the end now, so the length of the
list is no longer an issue.
