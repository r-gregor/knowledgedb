filename: ptn_what-is-property_20190401.txt
https://www.quora.com/What-is-property-in-Python

What is @property in Python?

***
   Imagine you have a class with an attribute called foo :
# Bar class v1.0
class Bar:
        def __init__(self, value):
        self.foo = value

   Your code using the Bar class v1.0 would be able to write code like this :
# Using Bar v1.0
print(b.foo)
# We have another foo to record
b.foo += 1

   New requirements
   You now get a new requirement where you need to raise an exception if foo becomes bigger than 10 -
   one way might be to hide the foo attribute (renaming it to _foo), and then writing two new methods
   get_foo and inc_foo :
# Bar class v2.0
class Bar:
        def __init__(self, value):
        self._foo = value
        def get_foo(self):
                return self._foo
        def inc_foo(self):
                self._foo +=1
                if self._foo > 10:
                        raise ValueError('Too many foos')

   Hiding the foo attribute stops code which uses the Bar class from overriding the protection of having
   no more than 10 foos.

   Impact on other code
   Changing your class means that you have to change all of your code where you get or increment the foo
   attribute :
# Using Bar class v2.0
print(b.get_foo())
# We have another foo to record
b.inc_foo()

   And if you miss a case, you get a very odd bug because some instances will count using the foo
   attribute (the old code), and the some instances will count using the inc_foo method. Imagine the
   issue if this Bar class was used by people other than you; you have now made a relatively simple
   change to your class, and forced everyone else to change their code too.

   Ideally you want to be able to change the Bar class without forcing other bits of your code to
   change; but how ?

   Welcome to properties :
   The property decorator (and it’s siblings .setter) gives you a better option :
# Bar class v3.0
class Bar:
        def __init__(self, value):
        self._foo = value
        @property
        def foo(self):
                return self._foo
        @foo.setter
        def foo(self, value):
                self._foo = value
                if self._foo > 10:
                        raise ValueError('Too many foos')

   This means that your code can still use the Bar.foo attribute but it will call the foo property
   method (lines 5–12 in Bar class v3.0)

   So using this code looks like this :
# Using Bar class v3.0
print(b.foo)
# We have another foo to record
b.foo += 1

   line 2 will call the foo property method, lines 4–6 in Bar class v3.0

   Line 4 will call both the foo property method (lines 4–6 in Bar v3.0) - to fetch the current value of
   the foo attribute; and then call foo.setter method (lines 8–12 in Bar v3.0) .

   This code to use Bar class v3.0 is exactly the same as the code to use Bar class v1.0 - all of the
   extra protections you added into the Bar class is effectively transparent to the code using the
   class.

   In Summary :
   In short - using property and it’s siblings (.setter & .deleter) allows you to implement a virtual
   attribute in your classes - something that looks like a simple attribute to everyone who uses your
   class, but where you can add code to control how it is set, fetched, and deleted.

   For instance - you can use properties to :
     * make attributes read only
     * make attributes that you can only set once
     * make attributes that you can only set to a specific type (integer, float, string for instance)
     * make attributes where you can control the range of values that the attribute can be set to.
     * make attributes that can’t be deleted

   I hope this helps
   As a final note, using property (and its siblings) it is entirely possible to create an entirely
   virtual attribute something that looks like an attribute but isn’t ever stored - it is calculated
   every time it is fetched. For instance you can write a temperature class which has only one real
   stored attribute (the temperature in Celsius), and the temperature in Fareheit is only ever
   calculated ;
class Temperature:
   """Example class to demonstrate virtual attributes using properties"""
   def __init__(self, celsius =0):
       self._celsius = celsius
   @property
   def celsius(self):
       """Fetch the temperature in C"""
       return self._celsius
   @celsius.setter
   def celsius(self, value):
       """Store the temperature in C"""
       self._celsius = value
   @property
   def farenheit(self):
       """Return temp in F based on store temp in C"""
       return (self._celsius*9)/5 + 32
   @farenheit.setter
   def farenheit(self, value):
       """store temperature in C"""
       self._celsius = (value-32)*5/9

temp = Temperature()
print(temp.celsius, temp.farenheit)
temp.celsius =100
print(temp.celsius,temp.farenheit)
temp.farenheit =-40
print(temp.celsius, temp.farenheit)

   In this class the farenheit attribute can be used as it if really exists as a store attribute (it can
   be read and set), but the only thing that is actually stored is the temperature in celsius.


---
