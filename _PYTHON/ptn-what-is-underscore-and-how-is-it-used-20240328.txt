filename: ptn_what-is-underscore-and-how-is-it-used_20240328.txt
https://thenewstack.io/what-is-the-python-underscore-and-how-is-it-used/

What Is the Python Underscore and How Is It Used?
2024-03-26

   Ah, the underscore, the "_" that connects multiple words when a blank space. A character that can
   mean nothing and something all at the same time. Once upon a time, I used underscores in Linux
   file names, like image_1.jpg or test_file.txt. That was back when spaces in file names could wreak
   havoc within the command line. Although things have changed with that, I still use the
   underscore now and then.

   With Python, however, the underscore takes on some important meanings and can be used for
   different purposes. As you've scanned Python code, you might have come across two different
   underscores, single and double. Each of those can be used for a different purpose. For example, the
   single underscore can be used, after a name, before a name, or in numeric literals. The double
   underscore can be used in two ways: before a name or before and after a name.

   But what does it all mean?

   Let's dig in and find out.

The Single Underscore
   First, we'll examine the single underscore In Interpreter. What does In Interpreter mean? Open a
   terminal window on whatever machine you have Python installed (I'm using Pop!_OS Linux with
   Python 3) and issue the command:
$> python3

   You have officially entered the Python interpreter. What you should see is something like this:

Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 

   That >>> is where you enter Python commands. Let me show you an example, using a single underscore.
   This type of underscore serves as an identifier in Python, which means it can be used to reference an
   object. Remember, an object is a variable that contains data.

   From the interpreter, issue the command:
print(_)

   For the above effort, you'll receive the following error:

Traceback (most recent call last):
File "<stdin>", line 1, in <module>
NameError: name '_' is not defined

   Why? Because the underscore isn't defined. The single underscore stores the last object and because
   there was no last object, it threw an error. But what if you defined an object like this in the
   Python interpreter:
10 + 10

   Now, run the command:
print(_)

   This time you should see 20 in the output. Why? Because the result of 10 + 10 was the most recent
   object defined.

   Here's another way to look at the same thing. At the interpreter, copy the following:
for _ in range(10):
	print("Hello, New Stack!")

   Hit enter and you'll see the text in the second line printed 10 times. This is a different type of
   usage for the single underscore. When used in a loop like this, it ignores values that you wouldn't
   need to use at a later time. In fact, after you run the above code, type print(_) again and see what
   happens. The output will be "9." Why? Because the last object was created by range(10) and not by the
   print() statement, which was a value ("Hello, New Stack") and not an object ("9").

   What about the trailing single underscore? This is used to avoid conflicts with Python keywords. For
   example, list is a Python keyword (as in the list() constructor) and you wouldn't want to use
   list as, say, a variable name. But what if you wanted to use list as a variable name? That's where
   the trailing underscore comes in handy. So, instead of:
list = [red, green, yellow, blue]

   You would use:
list_ = [red, green, yellow, blue]

   By doing this, you can use any keyword as a variable name, so long as you add a trailing underscore.
   Doing this ensures your variable names won't conflict with keywords.

   Another usage of the single underscore is to separate digits of numbers. You couldn't use 1,000,000
   because the comma has a very different meaning in Python. You could, however, use 1_000_000 to
   represent a million. You could also use the underscore to separate binary, octal, or hex portions of
   a number. At the Python interpreter, type:
a = 1_000_000

   Next, type:
print(a)

   The output will be:
1000000

The Double Underscore
   Next, we'll examine the Python double underscore. This one is a bit tricky. Essentially, the double
   underscore is used for name mangling (which is used for class attributes that you don't want to be
   used by subclasses). The double pre underscore instructs the interpreter to rewrite the attribute
   name of a subclass, to avoid naming conflicts.

   For instance, if you used __foo, the interpreter would automatically replace it with
   __classname__foo. This is done to make certain there would be no overlap of __foo in another class.
   This also prevents your method from being overridden by a subclass or accessed accidentally.

   Here's an example.

class SampleClass():
	def __init__(self):
		self.var1 = 21
		self._var2 = "Hello, New Stack"
		self.__var3 = 12

obj1 = SampleClass()
print(dir(obj1))

   Notice that var1 and var2 use a leading single underscore, whereas var3 uses a leading double
   underscore, We've also used a leading double underscore before init and (self), but the key is in
   var1, var2, and var3.

   If you were to run the above code you would see in the output '_var2′ and '_var1′. However, what
   happened to var3? As you probably expected, it comes back as '_SampleClass__var3′.

   Name mangling in action.

   And that does it for your introduction to the Python underscore. Start using this feature and see if
   it doesn't help make your Python programming life a bit easier.


---

