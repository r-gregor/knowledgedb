filename: python_equivalent-for-hashmap_20170607.txt
https://stackoverflow.com/questions/19588290/python-equivalent-for-hashmap

Python equivalent for HashMap

   This question already has an answer here:
     (****) Hash Map in Python

   Im new to python. I have a directory which has many subfolders and files. So in these files i have to
   replace some specified set of strings to new strings. In java i have done this using hashMap. I have
   stored the old strings as keys and new strings as their corresponding values. I searched for the key
   in the hashMap and if i got a hit, i replaced with the corresponding value. Is there something
   similar to hashMap in Python or can you suggest how to go about this problem.

   To give an example lets take the set of strings are Request, Response. I want to change them to
   MyRequest and MyResponse. My hashMap was
Key -- value
Request -- MyRequest
Response -- MyResponse

   I need an equivalent to this.

***
   This question has been asked before and already has an answer. If those answers do not fully address
   your question, please [39]ask a new question.

   you can use dictionary. [40]docs.python.org/2/tutorial/datastructures.html#dictionaries

***
   You need a [45]dict:
my_dict = {'cheese': 'cake'}

   Example code (from the docs):
>>> a = dict(one=1, two=2, three=3)
>>> b = {'one': 1, 'two': 2, 'three': 3}
>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
>>> d = dict([('two', 2), ('one', 1), ('three', 3)])
>>> e = dict({'three': 3, 'one': 1, 'two': 2})
>>> a == b == c == d == e
True


---
 (****)
https://stackoverflow.com/questions/8703496/hash-map-in-python

Hash Map in Python

   I want to implement a HashMap in Python. I want to ask a user for an input. depending on his input I
   am retrieving some information from the HashMap. If the user enters a key of the HashMap, I would
   like to retrieve the corresponding value.

   How do I implement this functionality in Python?
HashMap<String,String> streetno=new HashMap<String,String>();
   streetno.put("1", "Sachin Tendulkar");
   streetno.put("2", "Dravid");
   streetno.put("3","Sehwag");
   streetno.put("4","Laxman");
   streetno.put("5","Kohli")

***
   [40]Python dictionary is a built-in type that supports key-value pairs.
streetno = {"1":"Sachine Tendulkar", "2":"Dravid", "3":"Sehwag", "4":"Laxman","5":"Kohli"}

   as well as using the dict keyword:
streetno = dict({"1":"Sachine Tendulkar", "2":"Dravid"})

   or:
streetno = {}
streetno["1"] = "Sachine Tendulkar"

***
   The second example just builds a dict in the same ways as before and then copies it. The other use
   dict, which would be more appopriate in this context, is dict(key1=value1, key2=value2, ...) but that
   requires the keys to strings which are also valid Python identifiers (and internally, this also
   creates a dictionary). – [44]delnan Jan 2 '12 at 17:31

   Ah interesting, I didn't realize that naked strings were valid identifiers. – [45]Alan Jan 2 '12 at

***
   I'm not sure if I understand you correctly (what are "naked strings"?), but I believe you got it
   backwards. Your updated second example is invalid and I never intended to state something like that
   work. The [46]keyword arguments syntax, which accepts only naked identifiers, internally uses a
   dictionary. The dict constructor supports keyword arguments and works like def dict(**kwds): return
   kwds if given keyword arguments. – [47]delnan Jan 2 '12 at 17:39

   second example raises a syntax error. variable names can't start with a number – [48]Simon Jan 2 '12
   at 17:49

   Please tell me how to has_key(key) method in python. – [49]Kiran Bhat Jan 2 '12 at 17:51
   add a comment |
   up vote 12 down vote

   All you wanted was a hint. Here's a hint: In Python, you can use [50]dictionaries.

***
streetno = { 1 : "Sachin Tendulkar",
            2 : "Dravid",
            3 : "Sehwag",
            4 : "Laxman",
            5 : "Kohli" }

   And to retrieve values:
name = streetno.get(3, "default value")

   Or
name = streetno[3]

   That's using number as keys, put quotes around the numbers to use strings as keys.

***
   It's built-in for Python. See [57]dictionaries.

   Based on your example:
streetno = {"1": "Sachine Tendulkar",
            "2": "Dravid",
            "3": "Sehwag",
            "4": "Laxman",
            "5": "Kohli" }

   You could then access it like so:
sachine = streetno["1"]

   Also worth mentioning: it can use any non-mutable data type as a key. That is, it can use a tuple,
   boolean, or string as a key.

***
   Hash maps are built-in in Python, they're called [61]dictionaries:
streetno = {}                        #create a dictionary called streetno
streetno["1"] = "Sachin Tendulkar"   #assign value to key "1"

   Usage:
"1" in streetno                      #check if key "1" is in streetno
streetno["1"]                        #get the value from key "1"

   See the documentation for more information, e.g. built-in methods and so on. They're great, and very
   common in Python programs (unsurprisingly).
