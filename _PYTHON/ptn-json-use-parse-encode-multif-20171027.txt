filename: python_json_use-parse-encode-multif_20171027.txt
https://linuxconfig.org/how-to-use-json-api-data-in-python

How to Use JSON API Data In Python

     * # - requires given command to be executed with root privileges either directly as a root user or
       by use of sudo command
     * $ - given command to be executed as a regular non-privileged user

Introduction
   One of the main reasons that you'd like to work with JSON in Python is consuming APIs. There are
   hundreds of excellent public APIs out there and ready to use in your application. Even huge players
   on the web, like Facebook and Twitter, out out APIs for you to work with.
   You can build entire applications around API data, including building web applications that
   aggregate, manipulate, and display that data in a convenient way.

Set Up A File
   Before you start working with APIs, you need to set up a Python file. It's much easier than working
   in the interpreter. Start off by importing the JSON module.
import json

   You'll need urllib3. It lets you access a URL with Python.
import urllib3

Open The URL
   While there are a ton of great APIs on the Internet, most of them require you to sign up in order to
   get an API key. This guide isn't about that or using a specific API. The OpenDota API provides access
   to a ton of data pertaining to the popular MoBA DoTA2 without the need to sign up or get a key. In
   case you didn't know, it is available for Linux. That's the API that this guide will use.
   You can find the documentation for the whole API at https://docs.opendota.com, but this guide will be
   using the https://api.opendota.com/api/heroes Heroes data.
   Start by creating a PoolManager() object using urllib3. It's that object that you can use to make
   requests to a website.
http = urllib3.PoolManager()

   Make a GET request using the http object that you just created to the DoTA API.
heroes = http.request('GET', 'https://api.opendota.com/api/heroes')

Parse The JSON
   Try printing out the heroes variable that you just created.
print(heroes)

   Not what you expected? It's still a request object, and it has more data than you need. Try printing
   out heroes.data
print(heroes.data)

   That looks closer, but it's still not quite there. Decode the data to UTF-8.
print(heroes.data.decode('UTF-8'))

   Now, that's JSON. You can parse that with the JSON module.
heroes_dict = json.loads(heroes.data.decode('UTF-8'))
print(heroes_dict)

Work With The Data
   You have a Python dictionary containing all of the data from the API. You can now use that data
   however you choose. Try iterating over it.
for hero in heroes:
    print(heroes['localized_name'])

   Your loop will print out the name of every hero in DoTA2. You can see from the dictionary that there
   is ton's more data, but you know how to access that.

Closing Thoughts
   The road there wasn't all that direct, but it certainly got there. If you're doing this with API
   keys, it'll just change the URL structure. Everything else should remain the same throughout. You are
   now equipped to access API data from your Python programs.

Exercise
   Pick and API from https://github.com/toddmotto/public-apis, and convert it into a Python dictionary.
   Iterate over it, and print out the values of at least two keys.


---
https://linuxconfig.org/how-to-parse-data-from-json-into-python

How to Parse Data From JSON Into Python

Introduction
   JSON is a favorite among developers for serializing data. It's used in most public APIs on the web,
   and it's a great way to pass data between programs. Python has no problem reading JSON.

Set Up
   Before you can start working with JSON in Python, you'll need some JSON to work with. There are a few
   things that you'll need to set up first. First, create a Python file that will hold your code for
   these exercises. Inside the file, import the JSON module.
import json

   Then, create some basic JSON. It shares almost identical syntax with a dictionary, so make a
   dictionary, and Python can use it as JSON.
json_data = '{"a": 1, "b"": 2, "c": 3, "d": 4, "e": 5}'

   The next thing that you'll need is a JSON file. If you're not familiar, they are text files with the
   .json extension. Use your text editor of choice to make one and name it distros.json. Put the JSON
   below in the file
[
        {
                "Name": "Debian",
                "Version": "9",
                "Install": "apt",
                "Owner": "SPI",
                "Kernel": "4.9"
        },
        {
                "Name": "Ubuntu",
                "Version": "17.10",
                "Install": "apt",
                "Owner": "Canonical",
                "Kernel": "4.13"
        },
        {
                "Name": "Fedora",
                "Version": "26",
                "Install": "dnf",
                "Owner": "Red Hat",
                "Kernel": "4.13"
        },
        {
                "Name": "CentOS",
                "Version": "7",
                "Install": "yum",
                "Owner": "Red Hat",
                "Kernel": "3.10"
        },
        {
                "Name": "OpenSUSE",
                "Version": "42.3",
                "Install": "zypper",
                "Owner": "Novell",
                "Kernel": "4.4"
        },
        {
                "Name": "Arch Linux",
                "Version": "Rolling Release",
                "Install": "pacman",
                "Owner": "SPI",
                "Kernel": "4.13"
        },
        {
                "Name": "Gentoo",
                "Version": "Rolling Release",
                "Install": "emerge",
                "Owner": "Gentoo Foundation",
                "Kernel": "4.12"
        }
]

Parse Simple JSON
   Everything's ready. Take a step back to that simple line of JSON that you created earlier. That's
   what you'll be working with first.
   Python uses the loads method from the json to load JSON from a string. Did you notice the quotes
   around that dictionary that you created for the JSON? That's because Python treats JSON as a string
   unless it's coming from a file. You don't really need to worry about it too much. Just know that this
   form handles data while load handles files. Try loading the JSON.
print(json.loads(json_data)

   It won't look much different, but Python sees it in a usable form now. You can save it to a variable
   and iterate over it to see.
loaded_json = json.loads(json_data)
for x in loaded_json:
        print("%s: %d" % (x, loaded_json[x]))

   As you can see, loaded_json contains a dictionary, not a string that looks like one.

Parse To An Object
   JSON is actually an object in JavaScript, so it would make sense to want to import it as an object in
   Python. There are a few ways to do this, but most involve creating a class that you instantiate by
   populating it with data from the JSON. There really isn't a direct conversion.
   There is a fairly direct way to do it by loading the JSON into an object's __dict__ property.
class Test(object):
    def __init__(self, data):
            self.__dict__ = json.loads(data)

test1 = Test(json_data)
print(test1.a)

Parse a JSON File
   You're really not going to need to parse JSON from within a Python program. That doesn't make much
   sense in practicality. You will need to read and parse it from files, though, and that's why you set
   up that distros.json file.
   A with can simplify the process of reading and closing the file, so that's the structure to use here.
   The other thing to note is the load method replaces loads because this is a file. Otherwise, the
   process is mostly the same.
with open('distros.json', 'r') as f:
    distros_dict = json.load(f)

for distro in distros_dict:
    print(distro['Name'])

Closing Thoughts
   It's really not hard to parse JSON in Python. By using the json.load methods, you can convert the
   JSON into a dictionary. That dictionary can be used as a dictionary, or it can be imported into an
   object as it's instantiated to transfer data into a new object.

Exercises

    1. Create a new Python file an import JSON
    2. Crate a dictionary in the form of a string to use as JSON
    3. Use the JSON module to convert your string into a dictionary.
    4. Write a class to load the data from your string.
    5. Instantiate an object from your class and print some data from it.
    6. Create a JSON file with some JSON in it.
    7. Import your JSON file into Python and iterate over the resulting data.


---
https://linuxconfig.org/how-to-encode-data-from-python-to-json

How to Encode Data From Python To JSON

Introduction
   JSON is the universal format for passing data between programs and/or languages, especially on the
   web. Python has excellent built-in support for converting data from a Python program into JSON for
   another program to use.

Basic Encoding
   Python's JSON support comes from a module. Before you can work with JSON, you need to import it.
import json

   Next, the method requires that your data be arranged in a dictionary. Set up a dictionary to work
   with.
distro_install_command = {'Debian': 'apt',
                                                  'Ubuntu': 'apt',
                                                  'Fedora': 'dnf',
                                                  'CentOS': 'yum',
                                                  'OpenSUSE': 'zypper',
                                                  'Arch': 'pacman',
                                                  'Gentoo': 'emerge'
}

   There is a method called dumps in the json module that you can use to "dump" your data into JSON.
distro_json = json.dumps(distro_install_command)

   Try printing it out.
print(distro_json)

   It's somewhat neat, since it was already a dictionary, but it's not presented in the usual JSON
   structure.

Sorting
   If you want your JSON to print out like JSON, there are a couple of extra options that you need to
   pass to json.dumps.
distro_json = json.dumps(distro_install_command, sort_keys=True, indent=4)

   Try printing that out. It'll look more like you'd expect.
print(distro_json)

File Output
   It's probably better to output that JSON to somewhere that it can be accessed. The most common option
   on the web is to create an API with JSON. That's a little out of the scope of this guide, so it'll
   cover creating a file instead.
   So, this part is easier to work with out of a Python file, since you have to lay out all of the
   pieces. Set up a file with the import and the dictionary from above on top.
   Now, the easiest structure to use for this is the with statement. It condenses a lot of code into a
   simplified form and ensures that your file closes. Your with statement should look like the one
   below.
with open('distros.json', 'w') as f:
    json.dump(distro_install_command, f)

   The JSON will be written to the file after that block runs. Notice the subtle differences. This
   requires the dump method instead of the dumps method. dumps treats it as a string, and that can mess
   things up.

Objects
   You can serialize objects into JSON too, but it requires a bit of extra work. json.dumps only accepts
   dictionaries, so you'll need to use the __dict)) attribute of the object. It contains the information
   about the object organized in a dictionary, and can be used to treat the object like it is a
   dictionary.
   Create an object to work with.
class Test(object):
    def __init__():
            self.a = 10
                self.b = 15
                self.c = 20

test1 = Test()

   You can pass the object that you instantiated to json.dumps.
print(json.dumps(test1.__dict__))

   You'll see the variables that you set in the object printed out.

Closing Thoughts
   That's it for encoding JSON. You can definitely do more, and play around different data
   configurations. JSON and dictionaries have similar syntax and structure, so it's easy to arrange your
   data in an simple to understand way.

Exercises

    1. Import the JSON module
    2. Create a dictionary to encode
    3. Print the encoded dictionary
    4. Print the dictionary encoded and sorted
    5. Export your dictionary as JSON to a file
    6. Create a Python object containing instance data
    7. Print your object as JSON
    8. Export your object as JSON to a file
