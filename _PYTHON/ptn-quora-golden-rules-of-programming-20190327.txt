filename: ptn_quora_golden-rules-of-programming_20190327.txt
https://www.quora.com/What-are-the-golden-rules-of-programming-in-Python

What are the golden rules of programming in Python?

***
   The Golden Rules of PYTHON Programming:-
    1. Python is a case sensitive language.
    2. Python uses forward slashes for path specification.
    3. No Command Terminator is used in PYTHON.
    4. Write one single executable statement in one line.
    5. You can use Single, Double and even Triple quotes to represent string literals.
    6. Use # at the start of any statement and make it comment.
    7. Use a backslash \ at the end of each line for the multiline code.
    8. Blank lines in a program are ignored in PYTHON.
    9. PYTHON uses indentation to define a code block. Use tab or space for indentation.

***
Just as we look to PEP-8 for how to format our Python code, we try to be Pythonic (that is, follow the
conventions of the Python community) when writing our code. Here are a few "rules" that come to mind...
•Prefer Python's natural iteration over indexing. So don't do this:
>>> mylist
['foo', 'bar', 'baz']
>>> i = 0
>>> while i < len(mylist):
...      print(mylist[i])
...      i += 1


...and don't do this:
>>> for i in range(len(mylist)):
...     print(mylist[i])


...when you really mean this:
>>> for word in mylist:
...     print(word)
...
foo
bar
baz


(Just to be clear, there is nothing wrong with indexing when you need it, but you don't need it in
the above case.)
- Use list comprehensions or range() to generate lists whenever possible. So, do this:
>>> nums = list(range(0, 101, 5))
>>> nums
[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]


....instead of using a for loop, and do this:
>>> nums_not_divisible_by_5 = [num for num in range(100)
...                                     if num % 5]
>>> nums_not_divisible_by_5
[1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33,
4, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66,
7, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99]


instead of this:
>>> for num in range(100):
...     if num % 5:
...         nums_not_divisible_by_5.append(num)
...
>>> nums_not_divisible_by_5
[1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33,
4, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66,
7, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99]

- Embrace type conversion when it makes things easier. So, this:
>>> num = 123_456_789 # Python 3.6+ allows _ in numeric literals
>>> sum_of_digits = 0
>>> for digit in str(num):
...      sum_of_digits += int(digit)
...
>>> sum_of_digits
45


...is easier than this (which took me two attempts to get right):
>>> sum_of_digits = 0
>>> while num:
...      sum_of_digits += num % 10
...      num //= 10
...
>>> sum_of_digits
45

- Dictionaries are a Pythonic way to avoid long if/else chains. So don't do this:
>>> if year == 1066:
...     print('Battle of Hastings')
... elif year == 1215:
...     print('Magna Carta')
... elif year == 1607:
...     print('Jamestown')
... elif year == 1620:
...     print('Plymouth Rock')


...instead, do this:
>>> year_dict = {
...     1066: 'Battle of Hastings',
...     1215: 'Magna Carta',
...     1607: 'Jamestown',
...     1620: 'Plymouth Rock'
... }
>>> print(year_dict[year])
Magna Carta


If you can't be certain that year will be one of the entries in the dict, you can do this:
>>> if year in year_dict:
...     print(year_dict[year])
... else:
...     print('Invalid year:', year)
...
Invalid year: 1234


or you can do this (and I snuck in an f-string from Python 3.6+)
>>> print(year_dict.get(year, f'Invalid year: {year}'))
Magna Carta
>>> year += 1
>>> print(year_dict.get(year, f'Invalid year: {year}'))
Invalid year: 1216


or use a defaultdict from the collections module.
- Use tuples and tuple unpacking to make code clearer:
>>> def square_cube(x): # functions return multiple vals as a tuple
...     return x ** 2, x ** 3
...
>>> square, cube = square_cube(5)
>>> square, cube
(25, 125)
>>> list_of_cubes = [square_cube(num)[1] for num in range(1, 11)]
>>> list_of_cubes
[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
# the below requires Python 3+
>>> one_cubed, two_cubed, *rest = list_of_cubes
>>> one_cubed
1
>>> two_cubed
8
>>> rest
[27, 64, 125, 216, 343, 512, 729, 1000]

- Use _ as the variable name when you don't need the variable later:
>>> import random
>>> list_of_nums = [random.randint(1, 100) for _ in range(100)]
>>> list_of_nums
[24, 26, 38, 19, 28, 83, 63, 35, 83, 32, 95, 49, 44, 60, 10, 94, 60, 66, 50, 34, 95, 57, 83, 59, 74,
9, 3, 34, 48, 89, 89, 42, 54, 93, 60, 41, 80, 69, 5, 29, 37, 96, 21, 44, 81, 7, 52, 100, 19, 24, 78,
4, 15, 93, 65, 28, 66, 96, 76, 24, 45, 74, 43, 73, 53, 42, 17, 29, 21, 85, 77, 70, 29, 82, 7, 34, 60,
3, 4, 46, 96, 61, 28, 19, 92, 86, 69, 99, 20, 99, 32, 19, 52, 30, 54, 100, 13, 20, 44, 16]


or...
>>> def func():
...     return 34, 'string'
...
>>> num, _ = func()
>>> num
34

- Use tuples when you want to hold multiple attributes that refer to a single object (e.g., an employee,
a country, a business, etc.) and lists when you want to hold a sequence of the same type of object:
>>> first_names = 'Bruce Sardar J.K.'.split()
>>> last_names = 'Lee Patel Rowling'.split()
>>> birth_country = 'USA India UK'.split()
>>> list_of_people = [(last, first, country)
...         for last, first, country in
...             zip(last_names, first_names, birth_country)]
>>> list_of_people
[('Lee', 'Bruce', 'USA'), ('Patel', 'Sardar', 'India'), ('Rowling', 'J.K.', 'UK')]


EDIT: I can't believe I forgot one of my favorites–the in operator. I always tells students it's
underused in Python and they should make it an important tool in their Python "tool belt."
- look for item in list...
>>> 'fo' in ['fee', 'fi', 'fo', 'fum']
True
>>> 'for' in ['fee', 'fi', 'fo', 'fum']
False

- not just a list, but any container...
>>> 'Lee' in ('Bruce', 'Lee', 1940, 'San Francisco')
True
>>> 'X' in { 'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1 }
True
>>> unique_letters = set('pack my box with five dozen liquor jugs'.replace(' ', ''))
>>> unique_letters
{'j', 'p', 'v', 'y', 'm', 't', 'n', 'e', 'z', 'b', 'd', 'u', 'c', 'k', 'o', 'a', 'r', 'i', 'x', 'w',
'l', 'g', 'q', 'h', 's', 'f'}
>>> 'X' in unique_letters
False
>>> 'x' in unique_letters
True

- even (sub-)strings:
>>> 'owl' in 'J.K. Rowling'
2True


---

