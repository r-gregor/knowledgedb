filename: ptn_howto-prepare-and-publish-your-first-python-package_20210330.txt
https://betterprogramming.pub/how-to-prepare-and-publish-your-first-python-package-85de378b77f6

How to Prepare and Publish Your First Python Package

Honestly, it's pretty easy
Oct 7, 2020

   Python has become one of the most popular programming languages. One major reason is that we, regular
   Python users, are free to share our code and others can use it very conveniently. A formal way of
   such code sharing is to pack all your code into a package and upload it to the Python Package Index
   (pypi.org), through which other Python users can install your package easily using the pip tool.

   If you have published a Python package yourself, you should know that the process is not difficult.
   However, for those who have never done it, you may have mistakenly thought that it must be a painful
   process. In this article, I'll show you the steps to preparing your package and publishing it.

   Apparently, the first step is to complete your project. However, we all understand that packages are
   never perfect. As a result, you don't have to wait for the completion of your project before you can
   figure out how to publish your package.

   For the purpose of the current tutorial, let's suppose that the directory that has all your Python
   files (e.g. python_file_0.py, as shown later) is called test_package. This is the one that you want
   to publish. To keep things simple, the file python_file_0.py has just the following code, which will
   be used when we're ready to import the package after its publication:
def hello_world():
	print("Hello World!")

1. Prepare Files
   Before we dive into the details for publishing, let's first structure the directory with the
   necessary support files:

the_root_dir/
|-- README.md
|-- setup.py
|-- test_package
|	|-- __init__.py
|	|-- python_file_0.py
|	|-- python_file_1.py
|	|-- python_file_2.py

	 * At the root directory, at the same level as the test_package, create the README.md file. This
	   file will cover things that you want the users to know about your package, such as installation
	   and use instructions.
	 * Another file at the same level is the setup.py file. This file will contain the information
	   necessary to set up the package for publishing. We'll talk about what's inside this file in a
	   minute.
	 * Within the test_package directory, create the __init__.py file. This file has to be named such,
	   and what it does is convert a regular directory to a Python package. For the current simple
	   package, we can just put the code in the python_file_0.py for exporting from
	   test_package.python_file_0 import hello_world.

The README file
   Theoretically, you can use just plain text for this file, but I prefer to use a markdown file that
   gives you formatting options to make it more interesting to read. For simplicity's sake, an example
   README.md file is shown below:
<code>   
This is a test package, which is part of a Medium tutorial.

**Some bold text**

*Some italic text*

## License
MIT License
</code>

   Please note that the gist is saved as a TXT file, which shows you the source text for the markdown
   before GitHub automatically applies the formatting for markdown files.

   Usually, it's recommended that you include the license information about the package so that the
   users can know the terms. In this case, we simply use the MIT license.

The setup file
   As mentioned previously, we use the setup.py file to indicate how our package should be prepared. The
   following code shows you what a typical setup.py file looks like:
<code>
import setuptools

with open("README.md") as file:
	read_me_description = file.read()

setuptools.setup(
	name="test-package-username",
	version="0.1",
	author="Your Name",
	author_email="your_email",
	description="This is a test package.",
	long_description=read_me_description,
	long_description_content_type="text/markdown",
	url="package_github_page",
	packages=['test_package'],
	classifiers=[
		"Programming Language :: Python :: 3",
		"License :: OSI Approved :: MIT License",
		"Operating System :: OS Independent",
	],
	python_requires='>=3.5',
)
</code>

	 * We first import the setuptools module, which has the convenient methods for packaging set up.
	 * In the setup() function call, most parameters are very straightforward and should be
	   self-explanatory. Some highlights are shown below:

   name: The distribution name of the package, which has to be unique on pypi.org. To ensure uniqueness,
   it's always a good idea that you append your pypi username to your package name.

   long_description: The long description is usually set from the README.md file. To show the
   description properly, you specify that it is a markdown file by setting the
   long_description_content_type parameter.

   packages: The list of packages that you want to publish in the distribution package. Because we're
   only publishing just one package (test_package), its name is shown in a list. However, if you want to
   publish all packages in the directory, you can use setuptools.find_packages() to retrieve them
   conveniently.

   python_requires: Specifies the version of Python that your package requires.

2. Get Ready for Uploading

Register PyPI account
   When we talk about PyPI, most of the time, we're referring to the regular website
   (https://pypi.org/), which is the place that indexes Python packages. However, there is another
   test instance of the website (https://test.pypi.org/) that is dedicated to testing purposes
   without messing up the official indexing.

   Please note that the accounts on these two instances are separate. Thus, for testing purposes, let's
   just use the test instance. Go ahead and register an account here:
   https://test.pypi.org/account/register/.

Create PyPI API token
   Once you have the account ready, it's recommended that you create an API token for uploading the
   package. Go to your account settings, the API tokens section, and click "Add API token."

   You'll be prompted to create an API token. You can specify the scope of this token that applies to
   all projects or specific projects. Once it's created, it's important to save the token somewhere that
   you can retrieve it later on because the exact same token cannot be recreated or recovered for
   security reasons.

Install archiving and uploading tools
   It should be noted that there are different tools for archiving and uploading Python packages. The
   ones that we'll use are setuptools, wheel, and twine, which are more commonly used for Python package
   distribution.

   If you don't have them already installed on your computer, simply run the command below that will
   install all three packages and their dependents:
$> python3 -m pip install --user --upgrade setuptools wheel twine

3. Distribute Package

Archive package
   The first step is to prepare the package for distribution by archiving it. In a terminal, navigate to
   the root directory where all the package files (e.g. setup.py) are located. Run the following
   command:
$> python3 setup.py sdist bdist_wheel

   This command uses the wheel tool, which will use the instruction detailed in the setup.py file to
   create all the files necessary for distribution:

the_root_dir/
|-- .eggs
|   |-- a bunch of files in this directory
|-- build
|   |-- a bunch of files in this directory
|-- dist
|   |-- test-package-username-0.1.tar.gz
|   |-- test_package_username-0.1-py3-none-any.whl
|-- test_package
|   |-- the original files in the package
|-- test_package_username.egg-info
|   |-- a bunch of files in this directory
|-- README.md
|-- setup.py
|-- test_package

   In particular, it will create two files in the dist directory, as shown above. These files are the
   key files that are ready for uploading.

Upload package
   Uploading the package to PyPI (again, we're using the test instance, but the principle is the same
   with the regular instance) is very straightforward. We'll just use the twine tool that we downloaded
   earlier by running the following command in the terminal:
$> python3 -m twine upload --repository testpypi dist/*

   In essence, this command requests that the files in the dist directory be uploaded to the testpypi
   repository for distribution. You'll be prompted to enter your username and password. Although it's OK
   to enter the username and password for uploading to PyPI, it's more secure if you simply use the
   __token__ as the username and the token that you created earlier as the password.

   If you have everything correct, you should be able to upload your package without any problems.
   However, if anything is wrong, it will usually give you clear information regarding possible errors
   in your setup.py file. Just correct any mistakes should any arise, and you're good to go.

4. Test Package

View package on PyPI
   Once your package is uploaded to testpypi, you can go to the package's page to see if everything is
   shown correctly (e.g. package descriptions). In our case, the website should be provided to you
   directly after you upload: https://test.pypi.org/project/test-package-username/0.1.1/. The
   following screenshot shows you that the long description as detailed in our README.md is correctly
   rendered:
   Package description
   Package description Package description
   Test package description on pypi.org

Import package
   The same webpage gives you the command line for installing the test package. Simply copy and paste to
   your terminal:
$> pip install -i https://test.pypi.org/simple/ test-package-username==0.1.1

   You should have no problems installing this package. Now it's time to test if we can use the package
   - the one that is considered to be public after we uploaded it to the pypi repository.
<code>
>>> from test_package import python_file_0
>>> python_file_0.hello_world()
Hello World!
</code>

   As shown above, we're able to use the very first package that we just uploaded to pypi for
   distribution. What an achievement!

Conclusion
   In this article, we learned the four major steps that we use to create a Python package for
   distribution through pypi.org. Although the example shown is focused on the test instance of the
   package index, everything is essentially the same for the regular instance of the package index.

References

    https://pythonhosted.org/an_example_pypi_project/setuptools.html
    https://packaging.python.org/tutorials/packaging-projects/



---

