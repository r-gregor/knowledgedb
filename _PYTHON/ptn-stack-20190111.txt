filename: ptn_stack_20190111.txt
https://www.tutorialspoint.com/python/python_stack.htm

Python - Stack

   In the english dictionary the word stack means arranging objects on over another. It is the same way
   memory is allocated in this data structure. It stores the data elements in a similar fashion as a
   bunch of plates are stored one above another in the kitchen. So stack data strcuture allows
   operations at one end wich can be called top of the stack. We can add elements or remove elements
   only form this en dof the stack.

   In a stack the element insreted last in sequence will come out first as we can remove only from the
   top of the stack. Such feature is known as Last in First Out(LIFO) feature. The operations of adding
   and removing the elements is known as PUSH and POP. In the following program we implement it as add
   and and remove functions. We dclare an empty list and use the append() and pop() methods to add and
   remove the data elements.

PUSH into a Stack

<code>
class Stack:

    def __init__(self):
        self.stack = []

    def add(self, dataval):
# Use list append method to add element
        if dataval not in self.stack:
            self.stack.append(dataval)
            return True
        else:
            return False
# Use peek to look at the top of the stack

    def peek(self):
            return self.stack[0]

AStack = Stack()
AStack.add("Mon")
AStack.add("Tue")
AStack.peek()
print(AStack.peek())
AStack.add("Wed")
AStack.add("Thu")
print(AStack.peek())
</code>

   When the above code is executed, it produces the following result:
Mon
Mon

POP from a Stack

   As we know we can remove only the too most data element from the stack, we implement a python program
   which does that. The remove function in the following program returns the top most element. we check
   the top element by calculating the size of the stack first and then use the in-built pop() method to
   find out the top most element.

<code>
class Stack:

    def __init__(self):
        self.stack = []

    def add(self, dataval):
# Use list append method to add element
        if dataval not in self.stack:
            self.stack.append(dataval)
            return True
        else:
            return False

# Use list pop method to remove element
    def remove(self):
        if len(self.stack) <= 0:
            return ("No element in the Stack")
        else:
            return self.stack.pop()

AStack = Stack()
AStack.add("Mon")
AStack.add("Tue")
print(AStack.remove())
AStack.add("Wed")
AStack.add("Thu")
print(AStack.remove())
</code>

   When the above code is executed, it produces the following result:
Tue
Thu


---
http://interactivepython.org/courselib/static/pythonds/BasicDS/ImplementingaStackinPython.html

3.5. Implementing a Stack in Python

Now that we have clearly defined the stack as an abstract data type we will turn our attention to using Python
to implement the stack. Recall that when we give an abstract data type a physical implementation we refer to
the implementation as a data structure.

As we described in Chapter 1, in Python, as in any object-oriented programming language, the implementation of
choice for an abstract data type such as a stack is the creation of a new class. The stack operations are
implemented as methods. Further, to implement a stack, which is a collection of elements, it makes sense to
utilize the power and simplicity of the primitive collections provided by Python. We will use a list.

Recall that the list class in Python provides an ordered collection mechanism and a set of methods. For example,
if we have the list [2,5,3,6,7,4], we need only to decide which end of the list will be considered the top of
the stack and which will be the base. Once that decision is made, the operations can be implemented using the
list methods such as append and pop.

The following stack implementation (ActiveCode 1) assumes that the end of the list will hold the top element
of the stack. As the stack grows (as push operations occur), new items will be added on the end of the list.
pop operations will manipulate that same end.

class Stack:

    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):

        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)

        
Implementing a Stack class using Python lists (stack_1ac)
Remember that nothing happens when we click the run button other than the definition of the class. We must
create a Stack object and then use it. ActiveCode 2 shows the Stack class in action as we perform the sequence
of operations from Table 1. Notice that the definition of the Stack class is imported from the pythonds module.

Note
The pythonds module contains implementations of all data structures discussed in this book. It is structured
according to the sections: basic, trees, and graphs. The module can be downloaded from pythonworks.org.

from pythonds.basic.stack import Stack

s=Stack()

print(s.isEmpty())
s.push(4)
s.push('dog')
print(s.peek())
s.push(True)
print(s.size())
print(s.isEmpty())
s.push(8.4)
print(s.pop())
print(s.pop())
print(s.size())

Output:
True
dog
3
False
8.4
True
2

---
