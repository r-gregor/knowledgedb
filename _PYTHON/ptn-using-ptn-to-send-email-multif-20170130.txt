filename: python_using-python-to-send-email_multif_20170130.txt
http://www.pythonforbeginners.com/code-snippets-source-code/using-python-to-send-email

Using Python to Send Email
Python includes several modules in the standard library for working with emails and email servers.
smtplib Overview
The smtplib module defines an SMTP client session object that can be used to send
mail to any Internet machine with an SMTP or ESMTP listener daemon. 

SMTP stands for Simple Mail Transfer Protocol. 

The smtplib modules is useful for communicating with mail servers to send mail.

Sending mail is done with Python's smtplib using an SMTP server. 

Actual usage varies depending on complexity of the email and settings of the
email server, the instructions here are based on sending email through Gmail.
smtplib Usage
This example is taken from this post at wikibooks.org
"""The first step is to create an SMTP object, each object is used for connection 
with one server."""

import smtplib
server = smtplib.SMTP('smtp.gmail.com', 587)

#Next, log in to the server
server.login("youremailusername", "password")

#Send the mail
msg = "
Hello!" # The /n separates the message from the headers
server.sendmail("you@gmail.com", "target@example.com", msg)
To include a From, To and Subject headers, we should use the email package,
since smtplib does not modify the contents or headers at all.

 
Email Package Overview
Python's email package contains many classes and functions for composing and
parsing email messages.
Email Package Usage
We start by only importing only the classes we need, this also saves us from
having to use the full module name later.
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
Then we compose some of the basic message headers:
fromaddr = "you@gmail.com"
toaddr = "target@example.com"
msg = MIMEMultipart()
msg['From'] = fromaddr
msg['To'] = toaddr
msg['Subject'] = "Python email"
Next, we attach the body of the email to the MIME message:
body = "Python test mail"
msg.attach(MIMEText(body, 'plain'))
For sending the mail, we have to convert the object to a string, and then
use the same prodecure as above to send using the SMTP server..
import smtplib
server = smtplib.SMTP('smtp.gmail.com', 587)
server.ehlo()
server.starttls()
server.ehlo()
server.login("youremailusername", "password")
text = msg.as_string()
server.sendmail(fromaddr, toaddr, text)
Verify an email address
The SMTP protocol includes a command to ask a server whether an address is valid. 

Usually VRFY is disabled to prevent spammers from finding legitimate email 
addresses,but if it is enabled you can ask the server about an address and
receive a status code indicating validity along with the user’s full name. 

This example is based on this post
import smtplib

server = smtplib.SMTP('mail')
server.set_debuglevel(True)  # show communication with the server
try:
    dhellmann_result = server.verify('dhellmann')
    notthere_result = server.verify('notthere')
finally:
    server.quit()

print 'dhellmann:', dhellmann_result
print 'notthere :', notthere_result
Sending Mails using Gmail
This example is taken from http://rosettacode.org/wiki/Send_an_email#Python
import smtplib
 
def sendemail(from_addr, to_addr_list, cc_addr_list,
              subject, message,
              login, password,
              smtpserver='smtp.gmail.com:587'):
    header  = 'From: %s
' % from_addr
    header += 'To: %s
' % ','.join(to_addr_list)
    header += 'Cc: %s
' % ','.join(cc_addr_list)
    header += 'Subject: %s

' % subject
    message = header + message
 
    server = smtplib.SMTP(smtpserver)
    server.starttls()
    server.login(login,password)
    problems = server.sendmail(from_addr, to_addr_list, message)
    server.quit()
Example Usage of above script

sendemail(from_addr    = 'python@RC.net', 
          to_addr_list = ['RC@gmail.com'],
          cc_addr_list = ['RC@xx.co.uk'], 
          subject      = 'Howdy', 
          message      = 'Howdy from a python function', 
          login        = 'pythonuser', 
          password     = 'XXXXX')
Sample Email Received

sendemail(from_addr    = 'python@RC.net', 
          to_addr_list = ['RC@gmail.com'],
          cc_addr_list = ['RC@xx.co.uk'], 
          subject      = 'Howdy', 
          message      = 'Howdy from a python function', 
          login        = 'pythonuser', 
          password     = 'XXXXX')
	  
	  
---
http://naelshiab.com/tutorial-send-email-python/

Tutorial: How to send an email with Python

To code a script to send emails could be very useful for reporters. We could use it to create personalized
alerts about any topic we want or to monitor our running scripts at a distance.
Note: To send yourself an email with a Python script, you need minimal knowledge of programming. I made this
tutorial for people willing to learn. Once done with the tutorial, you should be able to use the code I wrote
below!

#I Personalized alerts
By sending an email to yourself with the conditions of your choice, as coded in your script, you can create
completely customized alerts.
You want to closely monitor an elected representative? Code a script that will check his Twitter and Facebook
accounts every 10 minutes. If something new has been posted, an email will be automatically sent to you!
Your program could check three times a day all the transcript files of all the meetings he is supposed to
attend. He said something? Tada! Your script could copy-paste his interventions in an email that you’ll receive
a few seconds later! Isn’t that great? Google Alerts are a joke compared to this!

#II Monitor you scripts at a distance
Another interesting use: to indicate when your scripts are done or when they stopped for an unexpected reason.
Some scripts can run for a very long time… If you are a web scraping addict, you know what I am talking about.
If there is a lot of data to extract, your scripts will give your grey hair!
I remember a scraper I coded for one of my class, for my master’s degree. The goal was to extract all the data
from the pro-active disclosure section of Public Works and Government Services Canada. Thousands of contracts,
all on different webpages…! On top of that, I was regularly disconnected from their server. It took me days!
But when you are a reporter always running here and there, it’s impossible for you to stay close to your
computer and check your beloved scripts! Hopefully, email updates could avoid you a lot of stress.

#III For a basic email
[ EDIT: Gmail made some security change change recently. You now have to allow “less secure apps” on your
account. Otherwise, you won’t be able to connect to it with your python script. ]
There’s a native library in Python to send emails: smtplib. No need to install external librairies!
To send a basic email (without subject line), with a Gmail address, the code is fairly simple:
	import smtplib

	server = smtplib.SMTP('smtp.gmail.com', 587)
	server.starttls()
	server.login("YOUR EMAIL ADDRESS", "YOUR PASSWORD")

	msg = "YOUR MESSAGE!"
	server.sendmail("YOUR EMAIL ADDRESS", "THE EMAIL ADDRESS TO SEND TO", msg)
	server.quit()

On line 2, it’s the parameters for the Gmail server. First, the server location (or its ip address), then the
port to use. If you have an email address from another service, like Yahoo for example, you have to find the
corresponding information.
On line 4, there’s a security function, needed to connect to the Gmail server. It will protect your password.
Donc forget to indicate your email address and your password on line 5.
The msg variable will contain your message and the last ligne will send it!
#IV For a more elaborate email
[ EDIT: Don’t forget to allow “less secure apps” on your Gmail account. ]
If you want to automatically send an email to the police for an interview each time there’s a press release
regarding drug trafficking, you need to send more professional looking emails!
With the code below, you will send a clean email, with a sender, a receiver and a subject line.
To do this, you need two more modules: email.MIMEMultipart et email.MIMEText. They are part of the basic Python
librairies. No need to install them.
	import smtplib
	from email.MIMEMultipart import MIMEMultipart
	from email.MIMEText import MIMEText
	 
	 
	fromaddr = "YOUR ADDRESS"
	toaddr = "ADDRESS YOU WANT TO SEND TO"
	msg = MIMEMultipart()
	msg['From'] = fromaddr
	msg['To'] = toaddr
	msg['Subject'] = "SUBJECT OF THE MAIL"
	 
	body = "YOUR MESSAGE HERE"
	msg.attach(MIMEText(body, 'plain'))
	 
	server = smtplib.SMTP('smtp.gmail.com', 587)
	server.starttls()
	server.login(fromaddr, "YOUR PASSWORD")
	text = msg.as_string()
	server.sendmail(fromaddr, toaddr, text)
	server.quit()
	
Again, don’t forget to change the following lines:
Line 6 with your email address
Line 6 with the receiver’s email address
Line 11 with the email subject
Line 13 with your message
Line 18 with your password

#V To send an email with attachment
[ EDIT: Allow “less secure apps” on your Gmail account before running your script. ]
To have files attached to an email requires a more complicated code. While doing some research, I noticed
almost everybody has a slightly different method to do this (my sources are all at the end of this article).
I tried to keep the code as simple as possible. However, many modules are still needed, as you can see below.
In summary, the essential step is to convert the file into a Base64 before sending it. My code works for text
files, pdf files, images, audio files and video files!
	import smtplib
	from email.MIMEMultipart import MIMEMultipart
	from email.MIMEText import MIMEText
	from email.MIMEBase import MIMEBase
	from email import encoders
	 
	fromaddr = "YOUR EMAIL"
	toaddr = "EMAIL ADDRESS YOU SEND TO"
	 
	msg = MIMEMultipart()
	 
	msg['From'] = fromaddr
	msg['To'] = toaddr
	msg['Subject'] = "SUBJECT OF THE EMAIL"
	 
	body = "TEXT YOU WANT TO SEND"
	 
	msg.attach(MIMEText(body, 'plain'))
	 
	filename = "NAME OF THE FILE WITH ITS EXTENSION"
	attachment = open("PATH OF THE FILE", "rb")
	 
	part = MIMEBase('application', 'octet-stream')
	part.set_payload((attachment).read())
	encoders.encode_base64(part)
	part.add_header('Content-Disposition', "attachment; filename= %s" % filename)
	 
	msg.attach(part)
	 
	server = smtplib.SMTP('smtp.gmail.com', 587)
	server.starttls()
	server.login(fromaddr, "YOUR PASSWORD")
	text = msg.as_string()
	server.sendmail(fromaddr, toaddr, text)
	server.quit()
	
On top of all the authentification needed, this time you also need to indicate:
The name of the file on line 21,
The path to the file on line 22.
It’s done! You have everything you need to add email sending to your scripts!

Follow me on Facebook, Twitter and LinkedIn to know when I will publish new articles!
How did I learn to send emails with Python? By reading all  of these really good articles:
– https://docs.python.org/2/library/smtplib.html 
– http://www.tutorialspoint.com/python/python_sending_email.htm
– http://en.wikibooks.org/wiki/Python_Programming/Email
– http://www.pythonforbeginners.com/code-snippets-source-code/using-python-to-send-email
– https://docs.python.org/2/library/email.mime.html
– https://docs.python.org/2/library/email-examples.html
– https://docs.python.org/2/library/email.html
– http://www.blog.pythonlibrary.org/2013/06/26/python-102-how-to-send-an-email-using-smtplib-email/
– http://www.smipple.net/snippet/Jimmyromanticde/gmail.py


---
https://gist.github.com/hugorodgerbrown/4176850

Python script to send HTML email from command line

gmail_actions_example.html
	<!--
	This is a sample email taken from https://developers.google.com/gmail/schemas/apps-script-tutorial
	and used to test the GMail actions support.
	-->
	<html>
	  <head>
	    <script type="application/ld+json">
	    {
	      "@context":       "http://schema.org",
	      "@type":          "EmailMessage",
	      "description":    "Check this out",
	      "action": {
		"@type": "ViewAction",
		"url":   "https://www.youtube.com/watch?v=eH8KwfdkSqU"
	      }
	    }
	    </script>
	  </head>
	  <body>
	    <p>
	      This a test for a Go-To action in Gmail.
	    </p>
	  </body>
	</html>



send_html_email.py

<code>
# Simple script used to send an HTML file as an HTML formatted email,
# using Gmail's SMTP service. Used for testing HTML emails.
# The core message-sending code is taken from the docs:
# http://docs.python.org/2/library/email-examples.html
# The code for correctly authenticating against Gmail comes from:
# http://kutuma.blogspot.co.uk/2007/08/sending-emails-via-gmail-with-python.html
import smtplib
import argparse
from getpass import getpass
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


def parse_args():
    """
    Parse script input arguments.
    Returns the parsed args, having validated that the input
    file can be read, and that there is a valid Username.
    """
    parser = get_parser()
    args = parser.parse_args()

    # artificially adding this to args, so that
    # it can be passed around easily
    args.html = open(args.html_filename).read()

    # we have to have a valid Gmail account in order to access the SMTP service
    if args.username is None:
        args.username = raw_input('Gmail username: ')
    print_args(args)
    return args


def get_parser():
    """ Return the parser used to interpret the script arguments."""
    usage = (
        "Script to send an HTML file as an HTML email, using Google's SMTP server."
        "\nExamples:"
        "\n1. Send the contents of test_file.html to fred"
        "\n$ send_html_email.py fred@example.com test_file.html"
        "\n"
        "\n2. Send the mail to both fred and bob"
        "\n$ send_html_email.py fred@example.com bob@example.com test_file.html"
        "\n"
        "\n3. Use fred123@gmail.com as the Gmail authenticating account"
        "\n$ send_html_email.py fred@example.com test_file.html -u fred123@gmail.com"
        "\n"
        "\n4. Override the default test mail subject line"
        "\n$ send_html_email.py fred@example.com test_file.html -t 'Test email'"
        "\n"
        "\n5. Turn on SMTP debugging"
        "\n$ send_html_email.py fred@example.com test_file.html -d"
    )
    epilog = "NB This script requires a Gmail account."

    parser = argparse.ArgumentParser(description=usage, epilog=epilog,
        # maintains raw formatting, instead of wrapping lines automatically
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('recipients', help='The recipient email addresses (space delimited)', nargs='+')
    parser.add_argument('html_filename', help='The HTML file to use as the email body content')
    parser.add_argument('-s', '--sender',
        help='The sender email address (defaults to <do-not-reply@example.com>)',
        default='do-not-reply@example.com'
    )
    parser.add_argument('-u', '--username',
        help=('A valid Gmail user account (used to authenticate against Google\'s SMTP service). '
            'If this argument is not supplied, the user will be prompted to type it in.')
    )
    parser.add_argument('-t', '--title',
        help='The test email subject line (defaults to "Test email")',
        default="Test email"
    )
    parser.add_argument('-p', '--plain',
        help=('The test email plain text content. This script is designed primarily for the '
            'testing of HTML emails, so this text is really just a placeholder, for completeness. '
            'The default is "This is a test email (plain text)."'),
        default="This is a test email (plain text)"
    )
    parser.add_argument('-d', '--debug', action='store_true',
        help=('Use this option to turn on DEBUG for the SMTP server interaction.')
    )
    return parser


def print_args(args):
    """Print out the input arguments."""
    print 'Sending test email to: %s' % args.recipients
    print 'Sending test email from: %s' % args.sender
    print 'Using Gmail account: %s' % args.username


def create_message(args):
    """ Create the email message container from the input args."""
    # Create message container - the correct MIME type is multipart/alternative.
    msg = MIMEMultipart('alternative')
    msg['Subject'] = args.title
    msg['From'] = args.sender
    msg['To'] = ','.join(args.recipients)

    # Record the MIME types of both parts - text/plain and text/html.
    part1 = MIMEText(args.plain, 'plain')
    part2 = MIMEText(args.html, 'html')

    # Attach parts into message container.
    # According to RFC 2046, the last part of a multipart message, in this case
    # the HTML message, is best and preferred.
    msg.attach(part1)
    msg.attach(part2)
    return msg


def main():

    args = parse_args()
    msg = create_message(args)

    try:
        smtpserver = smtplib.SMTP("smtp.gmail.com", 587)
        smtpserver.set_debuglevel(args.debug)
        smtpserver.ehlo()
        smtpserver.starttls()
        smtpserver.ehlo
        # getpass() prompts the user for their password (so it never appears in plain text)
        smtpserver.login(args.username, getpass())
        # sendmail function takes 3 arguments: sender's address, recipient's address
        # and message to send - here it is sent as one string.
        smtpserver.sendmail(args.sender, args.recipients, msg.as_string())
        print "Message sent to '%s'." % args.recipients
        smtpserver.quit()
    except smtplib.SMTPAuthenticationError as e:
        print "Unable to send message: %s" % e

if __name__ == "__main__":
    main()
</code>


---
https://www.blog.pythonlibrary.org/2013/06/26/python-102-how-to-send-an-email-using-smtplib-email/

Python 102: How to Send an Email Using smtplib + email
June 26, 2013Cross-Platform, PythonPython, Python 101Mike

I wrote an article on this topic several years ago, but I think it is time for me to revisit it. Why? Well,
lately I’ve been doing a lot of work on a program for sending emails and I’ve been looking at my old article
and thinking I missed a few things when I first wrote it. So in this article we will learn the following:

The basics of emailing – kind of a rehash of the original article
How to send email using the TO, CC and BCC lines
How to send to multiple addresses at once
How to add an attachment and a body using the email module
Let’s get started!

How to Send an Email with Python with smtplib

We will begin with a slightly modified version of the code from the original article. I noticed that I had
forgotten to set up the HOST variable in the original, so this example will be a little more complete:

<code>
import smtplib
import string
 
HOST = "mySMTP.server.com"
SUBJECT = "Test email from Python"
TO = "mike@someAddress.org"
FROM = "python@mydomain.com"
text = "Python rules them all!"
BODY = string.join((
        "From: %s" % FROM,
        "To: %s" % TO,
        "Subject: %s" % SUBJECT ,
        "",
        text
        ), "\r\n")
server = smtplib.SMTP(HOST)
server.sendmail(FROM, [TO], BODY)
server.quit()
</code>

You will note that this code doesn’t have a username or password in it. If your server requires authentication,
then you’ll need to add the following code:

server.login(username, password)
This should be added right after you create the server object. Normally, you would want to put this code into
a function and call it with some of these parameters. You might even want to put some of this information into
a config file. Let’s do that next.

<code>
#----------------------------------------------------------------------
def send_email(host, subject, to_addr, from_addr, body_text):
    """
    Send an email
    """
    BODY = string.join((
            "From: %s" % from_addr,
            "To: %s" % to_addr,
            "Subject: %s" % subject ,
            "",
            body_text
            ), "\r\n")
    server = smtplib.SMTP(host)
    server.sendmail(from_addr, [to_addr], BODY)
    server.quit()
 
if __name__ == "__main__":
    host = "mySMTP.server.com"
    subject = "Test email from Python"
    to_addr = "mike@someAddress.org"
    from_addr = "python@mydomain.com"
    body_text = "Python rules them all!"
    send_email(host, subject, to_addr, from_addr, body_text)
</code>

Now you can see how small the actual code is by just looking at the function itself. That’s 13 lines! And we
could make it shorter if we didn’t put every item in the BODY on its own line, but it wouldn’t be as readable.
Now we’ll add a config file to hold the server information and the from address. Why? Well in the work I do,
we might use different email servers to send email or if the email server gets upgraded and the name changes,
then we only need to change the config file rather than the code. The same thing could apply to the from
address if our company was bought and merged into another. We’ll be using the configObj package instead of
Python’s ConfigParser as I find configObj simpler. You should go on over to the Python Package Index (PyPI)
and download a copy if you don’t already have it.

Let’s take a look at the config file:
	server = some.server.com
	from_addr = python@mydomain.com
	
That is a very simple config file. In it we have a section labeled smtp in which we have two items: server and
from_addr. We’ll use configObj to read this file and turn it into a Python dictionary. Here’s the updated
version of the code:

<code>
import os
import smtplib
import string
import sys
 
from configobj import ConfigObj
 
#----------------------------------------------------------------------
def send_email(subject, to_addr, body_text):
    """
    Send an email
    """
    base_path = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(base_path, "config.ini")
 
    if os.path.exists(config_path):
        cfg = ConfigObj(config_path)
        cfg_dict = cfg.dict()
    else:
        print "Config not found! Exiting!"
        sys.exit(1)
 
    host = cfg_dict["smtp"]["server"]
    from_addr = cfg_dict["smtp"]["from_addr"]
 
    BODY = string.join((
            "From: %s" % from_addr,
            "To: %s" % to_addr,
            "Subject: %s" % subject ,
            "",
            body_text
            ), "\r\n")
    server = smtplib.SMTP(host)
    server.sendmail(from_addr, [to_addr], BODY)
    server.quit()
 
if __name__ == "__main__":
    subject = "Test email from Python"
    to_addr = "mike@someAddress.org"
    body_text = "Python rules them all!"
    send_email(subject, to_addr, body_text)
</code>

We’ve added a little check to this code. We want to first grab the path that the script itself is in, which is
what base_path represents. Next we combine that path with the file name to get a fully qualified path to the
config file. We then check for the existence of that file. If it’s there, we create a dictionary and if it’s
not, we print a message and exit the script. We should add an exception handler around the ConfigObj call just
to be on the safe side though as the file could exist, but be corrupt or we might not have permission to open
it and that will throw an exception. That will be a little project that you can attempt on your own. Anyway,
let’s say that everything goes well and we get our dictionary. Now we can extract the host and from_addr
information using normal dictionary syntax.

Now we’re ready to learn how to send multiple emails at the same time!

How to Send Multiple Emails at Once

If you do a search on the web on this topic, you’ll likely come across this StackOverflow question where we
can learn for sending multiple emails via the smtplib module. Let’s modify our last example a little so we
send multiple emails!

<code>
import os
import smtplib
import string
import sys
 
from configobj import ConfigObj
 
#----------------------------------------------------------------------
def send_email(subject, body_text, emails):
    """
    Send an email
    """
    base_path = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(base_path, "config.ini")
 
    if os.path.exists(config_path):
        cfg = ConfigObj(config_path)
        cfg_dict = cfg.dict()
    else:
        print "Config not found! Exiting!"
        sys.exit(1)
 
    host = cfg_dict["smtp"]["server"]
    from_addr = cfg_dict["smtp"]["from_addr"]
 
    BODY = string.join((
            "From: %s" % from_addr,
            "To: %s" % ', '.join(emails),
            "Subject: %s" % subject ,
            "",
            body_text
            ), "\r\n")
    server = smtplib.SMTP(host)
    server.sendmail(from_addr, emails, BODY)
    server.quit()
 
if __name__ == "__main__":
    emails = ["mike@example.org", "someone@gmail.com"]
    subject = "Test email from Python"
    body_text = "Python rules them all!"
    send_email(subject, body_text, emails)
</code>

You’ll notice that in this example, we removed the to_addr parameter and added an emails parameter, which is a
list of email addresses. To make this work, we need to create a comma-separated string in the To: portion of
the BODY and also pass the email list to the sendmail method. Thus we do the following to create a simple comma
separated string: ‘, ‘.join(emails). Simple, huh?

Now we just need to figure out how to send using the CC and BCC fields. Let’s create a new version of this
code that supports that functionality!

<code>
import os
import smtplib
import string
import sys
 
from configobj import ConfigObj
 
#----------------------------------------------------------------------
def send_email(subject, body_text, to_emails, cc_emails, bcc_emails):
    """
    Send an email
    """
    base_path = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(base_path, "config.ini")
 
    if os.path.exists(config_path):
        cfg = ConfigObj(config_path)
        cfg_dict = cfg.dict()
    else:
        print "Config not found! Exiting!"
        sys.exit(1)
 
    host = cfg_dict["smtp"]["server"]
    from_addr = cfg_dict["smtp"]["from_addr"]
 
    BODY = string.join((
            "From: %s" % from_addr,
            "To: %s" % ', '.join(to_emails),
            "CC: %s" % ', '.join(cc_emails),
            "BCC: %s" % ', '.join(bcc_emails),
            "Subject: %s" % subject ,
            "",
            body_text
            ), "\r\n")
    emails = to_emails + cc_emails + bcc_emails
 
    server = smtplib.SMTP(host)
    server.sendmail(from_addr, emails, BODY)
    server.quit()
 
if __name__ == "__main__":
    emails = ["mike@somewhere.org"]
    cc_emails = ["someone@gmail.com"]
    bcc_emails = ["schmuck@newtel.net"]
 
    subject = "Test email from Python"
    body_text = "Python rules them all!"
    send_email(subject, body_text, emails, cc_emails, bcc_emails)
</code>

In this code, we pass in 3 lists, each with one email address a piece. We create the CC and BCC fields exactly
the same as before, but we also need to combine the 3 lists into one so we can pass the combined list to the
sendmail() method. There is some talk on StackOverflow that some email clients may handle the BCC field in odd
ways that allow the recipient to see the BCC list via the email headers. I am unable to confirm this behavior,
but I do know that Gmail successfully strips the BCC information from the email header. I haven’t found a
client that doesn’t, but if you have, feel free to let us know in the comments.

Now we’re ready to move on to using Python’s email module!

Sending Email Attachments with Python

Now we’ll take what we learned from the previous section and mix it together with the Python email module.
The email module makes adding attachments extremely easy. Here’s the code:

<code>
import os
import smtplib
import string
import sys
 
from configobj import ConfigObj
from email import Encoders
from email.mime.text import MIMEText
from email.MIMEBase import MIMEBase
from email.MIMEMultipart import MIMEMultipart
from email.Utils import formatdate
 
#----------------------------------------------------------------------
def send_email_with_attachment(subject, body_text, to_emails,
                               cc_emails, bcc_emails, file_to_attach):
    """
    Send an email with an attachment
    """
    base_path = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(base_path, "config.ini")
    header = 'Content-Disposition', 'attachment; filename="%s"' % file_to_attach
 
    # get the config
    if os.path.exists(config_path):
        cfg = ConfigObj(config_path)
        cfg_dict = cfg.dict()
    else:
        print "Config not found! Exiting!"
        sys.exit(1)
 
    # extract server and from_addr from config
    host = cfg_dict["smtp"]["server"]
    from_addr = cfg_dict["smtp"]["from_addr"]
 
    # create the message
    msg = MIMEMultipart()
    msg["From"] = from_addr
    msg["Subject"] = subject
    msg["Date"] = formatdate(localtime=True)
    if body_text:
        msg.attach( MIMEText(body_text) )
 
    msg["To"] = ', '.join(to_emails)
    msg["cc"] = ', '.join(cc_emails)
 
    attachment = MIMEBase('application', "octet-stream")
    try:
        with open(file_to_attach, "rb") as fh:
            data = fh.read()
        attachment.set_payload( data )
        Encoders.encode_base64(attachment)
        attachment.add_header(*header)
        msg.attach(attachment)
    except IOError:
        msg = "Error opening attachment file %s" % file_to_attach
        print msg
        sys.exit(1)
 
    emails = to_emails + cc_emails
 
    server = smtplib.SMTP(host)
    server.sendmail(from_addr, emails, msg.as_string())
    server.quit()
 
if __name__ == "__main__":
    emails = ["mike@somewhere.org", "nedry@jp.net"]
    cc_emails = ["someone@gmail.com"]
    bcc_emails = ["anonymous@circe.org"]
 
    subject = "Test email with attachment from Python"
    body_text = "This email contains an attachment!"
    path = "/path/to/some/file"
    send_email_with_attachment(subject, body_text, emails, 
                               cc_emails, bcc_emails, path)
</code>

Here we have renamed our function and added a new argument, file_to_attach. We also need to add a header and
create a MIMEMultipart object. The header could be created any time before we add the attachment. We add
elements to the MIMEMultipart object (msg) like we would keys to a dictionary. You’ll note that we have to use
the email module’s formatdate method to insert the properly formatted date. To add the body of the message, we
need to create an instance of MIMEText. If you’re paying attention, you’ll see that we didn’t add the BCC
information, but you could easily do so by following the conventions in the code above. Next we add the
attachment. We wrap it in an exception handler and use the with statement to extract the file and place it in
our MIMEBase object. Finally we add it to the msg variable and we send it out. Notice that we have to convert
the msg to a string in the sendmail method.

Wrapping Up
Now you know how to send out emails with Python. For those of you that like mini projects, you should go back
and add additional error handling around the server.sendmail portion of the code in case something odd happens
during the process, such as an SMTPAuthenticationError or SMTPConnectError. We could also beef up the error
handling during the attachment of the file to catch other errors. Finally, we may want take those various lists
of emails and create one normalized list that has removed duplicates. This is especially important if we are
reading a list of email addresses from a file.

Also note that our from address is fake. We can spoof emails using Python and other programming languages, but
that is very bad etiquette and possibly illegal depending on where you live. You have been warned! Use your
knowledge wisely and enjoy Python for fun and profit!

Note: All email addresses in code above are fake. This code was tested using Python 2.6.6 on Windows 7.



---
https://www.linkedin.com/pulse/python-script-send-email-attachment-using-your-gmail-account-singh

Python script to send email with attachment using your gmail account
Published on April 15, 2015

LikePython script to send email with attachment using your gmail account11Comment3ShareShare Python script to
send email with attachment using your gmail account

Here is a script to send email with attachment using your gmail credentials to ensure that your mail doesn't go
to spam, and it guarantees the email is delivered to recipient.

usage: if you are saving your script as: send-email.py:
./send-email.py "subject-here" "path of file to be attached"


<code>
#!/usr/bin/env python
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from smtplib import SMTP
import smtplib
import sys

recipients = ['rcpt1@example.com','rcpt2@example.com','group1@example.com'] 
emaillist = [elem.strip().split(',') for elem in recipients]
msg = MIMEMultipart()
msg['Subject'] = str(sys.argv[1])
msg['From'] = 'abcxyz@gmail.com'
msg['Reply-to'] = 'abcxyz@gmail.com'
 
msg.preamble = 'Multipart massage.\n'
 
part = MIMEText("Hi, please find the attached file")
msg.attach(part)
 
part = MIMEApplication(open(str(sys.argv[2]),"rb").read())
part.add_header('Content-Disposition', 'attachment', filename=str(sys.argv[2]))
msg.attach(part)
 

server = smtplib.SMTP("smtp.gmail.com:587")
server.ehlo()
server.starttls()
server.login("abcxyz@gmail.com", "yourpasswordhere")
 
server.sendmail(msg['From'], emaillist , msg.as_string())
</code>


---
https://dzone.com/articles/send-email-attachments-python

Send Email with Attachment(s) In Python
This code snippet will help you send an email (with attachments) in Python.

<code>
import smtplib
import os
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email.Utils import COMMASPACE, formatdate
from email import Encoders
def send_mail(send_from, send_to, subject, text, files=[], server="localhost"):
  assert type(send_to)==list
  assert type(files)==list
  msg = MIMEMultipart()
  msg['From'] = send_from
  msg['To'] = COMMASPACE.join(send_to)
  msg['Date'] = formatdate(localtime=True)
  msg['Subject'] = subject
  msg.attach( MIMEText(text) )
  for f in files:
    part = MIMEBase('application', "octet-stream")
    part.set_payload( open(file,"rb").read() )
    Encoders.encode_base64(part)
    part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(f))
    msg.attach(part)
  smtp = smtplib.SMTP(server)
  smtp.sendmail(send_from, send_to, msg.as_string())
  smtp.close()
</code>