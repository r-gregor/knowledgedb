filename: ptn_virtualenv-and-virtualenwrapper-multif_20190319.txt
https://codeburst.io/understanding-python-installation-and-virtualenv-a-friendly-guide-for-beginners-and-2b82859b06ae

Understanding Python Installation and VirtualEnv : A friendly guide for beginners and not-so-beginners
Apr 1, 2018

   In this article, we will try to learn about the following:
    1. Python multiple versions: Why and how?
    2. virtualenv : What, why and how?
    3. How to manage multiple environments for different projects using virtualenv?

   Summary to install and getting started with virtualenv
# Install Python, Pip, VirtualEnvWrapper
sudo apt update
sudo apt install python3
sudo apt install python3-pip
sudo pip3 install virtualenvwrapper
# Configure virtualenvWrapper
vi $HOME/.bashrc OR vi $HOME/.zshrc
# default location of virtual environment directories
export WORKON_HOME=$HOME/.virtualenvs
# default python version to use with virtualenv
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=' -p /usr/bin/python3 '
source `virtualenvwrapper.sh`
source $HOME/.bashrc OR $HOME/.zshrc

Python Installation
   You often have come across a situation where you need to install multiple versions of python.

   A natural question comes to mind about why are there so many versions. The answer, actually there are
   not. We have just 2 versions installed viz python2.7 and python3.5. Rest all are links to these two
   binaries (fancy name for software) with little modifications. python 2 and python 3 largely
   differ and they need to have different binaries.

   To test whether, these commands like python, python2 etc. point to same binary, you can do
> readlink -e $(which python)       # Command 1
/usr/bin/python2.7
> readlink -e $(which python2.7)    # Command 2
/usr/bin/python2.7

   Command 1 and 2 produced same ouput. Conclusion, python and python2.7 are same.

   So, if you want to use python 2 version, just write python2 and if version 3 is desired, python3 will
   suffice. This way, we can manage multiple versions of python.

   To install modules (additional files that can be imported in python, (something like
   #include<iostream> in C++), we can use pip, a package management system which will download these
   modules from internet for us and keep us away from hassle.

   To install modules supported for python2, use pip2. To install modules supported for python3, use
   pip3.
sudo apt install python-pip      # Installs pip2
sudo apt install python3-pip     # Installs pip3

Need for Virtualenv
   Suppose you are working on two projects, A being a finance related, B being social media related.
   Now, if both A and B are being developed in python2, then we have two serious problems:
    1. Modules installed for project A using pip2 are available to project B and vice-versa
    2. It becomes difficult to manage multiple versions of same module in multiple projects. For
       example, module X ver 1 is required in A, ver 2 is required in B.

   To rescue, we have virtualenv

VirtualEnv
   virtualenv is a software that helps you isolate different environments for python, i.e., it creates a
   dedicated folder say fA, where you can install modules and use them in project A. It creates another
   dedicated folder, say fB where you can install modules for project B. The best part, fA and fB do not
   know about each other and are completely separate.

   Installing virtualenv
sudo pip3 install virtualenvwrapper

   Add the following lines to .bashrc file. In case you use zsh like me, update .zshrc
# default location of virtual environment directories
export WORKON_HOME=$HOME/.virtualenvs
# default python version to use with virtualenv
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=' -p /usr/bin/python3 '
source $(which virtualenvwrapper.sh)

   Inside terminal, write
source $HOME/.bashrc

Using a virtual environment
   There are just a few other useful commands that we should know (there are more in the tool
   documentation, but these are the ones we'll use regularly):
     * deactivate - Exit out of the current Python virtual environment
     * workon - List available virtual environments
     * mkvirtualenv name_of_environment - Create a new virtual environment
     * workon name_of_environment - Activate the specified Python virtual environment
     * rmvirtualenv name_of_environment - Remove the specified environment.

A practical demo
   Setting the Scene
   Suppose we wish to use two modules each in Project A and B.

         +-----------+---------------+
         | Project A  |   Project B  |
         +------------+--------------+
         | - Requests | - Requests   |
         | - numpy    | - matplotlib |
         +-----------+---------------+

    1. We will create 2 environment, one for A, other for B. Call it envA, envB respectively.

mkvirtualenv envA
mkvirtualenv envB

   2. To install modules for A, we have to workon envA and install the modules
> workon envA
(envA)> pip3 install requests
(envA)> pip3 install numpy
# Look at envA prefixed before prompt
# To exit envA
> deactivate

   Same steps for project B.

   So now I guess, the idea of virtual environment is better.

Some key points that we must always know
   There are two types of places where python packages are installed.
    1. Global site-packages
    2. Per-user site-packages

   To list the location of 1 and 2, use
python -m site
python -m site --user-site

   Make sure, you run these command out of virtual environment.

   Now run python -m site from a virtual environment. I am sure, you got the difference. The packages
   you install from a virtual environment go into these locations, particularly

   $HOME/.virtualenvs/<name_of_virtual_env>/lib/python3.<X>/site-packages

   So, in essence, virtual environment let you create a virtual workspace for each project. You can list
   all the modules installed using pip freeze.


---
https://medium.com/@__pamaron__/understanding-and-use-python-virtualenvs-from-data-scientist-perspective-bfed61faeb3f

Understanding and use python virtualenvs from Data Scientist perspective
Jul 13, 2017

   A Virtual Environment is a real good way to keep the dependencies required by different projects in
   separate places, by creating virtual Python environments for each of them. It solves the "Project X
   depends on version 1.x but, Project Y needs 4.x" dilemma, and keeps your global site-packages
   directory clean and manageable. For example, you can work on a project which requires matplotlib
   1.5.3 while also maintaining a project which requires matplotlib 1.4.2.

   There are different tools that can manage python virtual environment, those I will show are:
     * virtualenv
     * anaconda (by continuum analytics)

   The first one is the most popular for general pourpose coding projects, anaconda is much more
   suitable for who works in data science field. In this post I would like to explain out how to install
   and use both of them to create your python virtualenv.

Virtualenv
   When you run virtualenv command inside your shell, it creates a folder which contains all the
   necessary executables to use the packages that a Python project would need.

   To install virtualenv via pip:
$ pip install virtualenv

   To install python pip via s.o. package manager (ubuntu for instance):
$ sudo apt-get install python-pip

Basic usage
   Create a firt virtual environment for your project:
$ cd my_venv_dir
$ virtualenv myproject

   virtualenv myproject will create a folder in the directory you are which will contain the Python
   executable files, and a copy of the pip library which you can use to install other packages. Usually
   I do not create the virtual environment within the source code directory in order to keep venv and
   code separate. In this way I don't need to exclude the virtualenv directory from the version control
   system I will use for software versioning.

   In your virtualenvironment directory you shuold have something like this:
$ ls -la
drwxr-xr-x  16 user  staff  544 May 15 06:33 bin
drwxr-xr-x   3 user  staff  102 May 15 06:30 include
drwxr-xr-x   4 user  staff  136 May 15 06:33 lib
-rw-r--r--   1 user  staff   60 May 15 06:33 pip-selfcheck.json

   You can also use the Python interpreter of your choice (like python2.7).
$ virtualenv -p /usr/local/bin/python2 myproject

   Naturally you need change the python 2 path with yours.

   To begin using the virtual environment, it needs to be activated:
$ source /myproject/bin/activate

   The name of the current virtual environment will now appear as prefix of the prompt (e.g.
   $(myproject)username@yourcomputer) to let you know that it's active. From now on, any package that
   you install using pip will be placed in the myproject folder, in this way the global Python
   installation will remain clean.

   Install packages as usual:
$ pip install matplotlib

   If you want to deactivate your virtualenv with:
$ deactivate

   This puts you back to the system's default Python interpreter with all its installed libraries.

   To delete a virtual environment, just delete the folder. (In this case, it would be rm -rf
   myproject.)

   After a while, though, you might end up with a lot of virtual environments littered across your
   system, and its possible you'll forget their names or where they were placed.

Extra commands
   In order to keep your environment consistent, it's a good idea to "freeze" the current state of the
   environment packages. To do this, run
$ pip freeze > requirements.txt

   This will create a requirements.txt file, which contains a list of all the packages in the current
   environment, and their respective versions. You can see the list of installed packages without the
   requirements format using pip list. Later it will be easier for a different developer (or you, if you
   need to re-create the environment) to install the same packages using the same versions:
$ pip install -r requirements.txt

   Remember to add the requirements file in your current project directory; this can help ensure
   consistency across installations, across deployments, and across developers.

   Now let's take a look to the packages you need for starting a new virtual environment for data
   analytics projects. The most used by me are: numpy, pandas, matplotlib, jupyter notebook, scipy;
   naturaly each of you can use those who prefer.

   As you can see in the previous paragraphs to install a python lib in a virtualenv you may use pip
   command; to install each package there are 2 simple ways: install them one by one or create a
   requirements.txt file with one library per line:
numpy
pandas
matplotlib
jupyter
scipy

   or if you want you can specify the version if you want to avoid the installation of the latest stable
   release of the softwares:
numpy==1.10
pandas==0.18.1
jupyter
matplotlib==1.5.1
scipy

   Now pip install -r requirements.txt will install all your software and the related dependencies; and
   your data science oriented virtualenv is now ready to go.

The Anaconda© python distribution
   From my personal point of view, a more appropriate way than using virtualenv is to adopt the
   Anaconda platform. Anaconda is the leading open data science platform powered by Python. The open
   source version of Anaconda is a high performance distribution of Python and R and includes over 100
   of the most popular Python, R and Scala packages for data science.

   Additionally, you'll have access to over 720 packages that can easily be installed with conda, our
   renowned package, dependency and environment manager, that is included in Anaconda.

   If you're interesting on "Why should I use Anaconda?" I may suggest you to read:
     * https://www.continuum.io/why-anaconda
     * https://www.reddit.com/r/Python/comments/3t23vv/what_advantages_are_there_of_using_anaconda/

   The two principal advantages more useful in my own experience are the user level install of the
   version of python you want and the "batteries included" for data science (e.g. numpy, scipy, PyQt,
   spyder IDE, etc.)

   Install Anaconda is very simple, just download the rigth package for your O.S. and use the
   instructions on the page to install it in the proper way.

   For instance if you use Linux or Mac OSX:
bash Anaconda-v-0.x.y.sh

   and follow the instructions on the screen. Note that during the Anaconda installation process it will
   ask you to add a directive in your bash profile to change your default python path. In this way
   Anaconda python distribution will be your new python ecosystem, otherwise if you answer no to use the
   Anaconda python you have to select the python executable by hand.

   Now that Anaconda is installed you are able to create a new conda environment or anyway you can use
   the root env with a lot of packages. Let's see how to create a conda env now:
conda create -n envname
# if you want to pass a specific python version
conda create -n envname python=2.7

   Once the env is created you may activate it
source activate envname

   This should procude something like this:
(envname) user@hostname$
# check your python version
(envname) user@hostname$ python
Python 3.5.2 |Continuum Analytics, Inc.| (default, Jul  2 2016, 17:52:12)
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>

   Now, as used with the virtualenv tool we can install the packages we need in our conda env with the
   conda command.
(envname) user@hostname$ conda install pandas
# e.g. install pandas package

   Managing the environments is quite easy, there are several options to use with conda command;

   Remember that Anaconda is batteries included so it's possible you have all the packages you need in
   the root env. Without create or activate any environment try to check the library installed in your
   conda root instance, you should have something like this
user@hostname$ conda list
...
ruamel_yaml               0.11.14                  py35_0
sasl                      0.2.1                     <pip>
scikit-image              0.12.3              np111py35_1
scikit-learn              0.17.1              np111py35_2
scipy                     0.18.1              np111py35_0
scp                       0.10.2                    <pip>
seaborn                   0.7.1                     <pip>
...

   As you can notice some packages in the previous snippet are installed via pip, this means that with
   anaconda and within any conda env you can use also the pip command to get the python modules you
   want.

Import and Export a conda environment
   To enable other people to create an exact copy of your environment, you can export the active
   environment file.

   Activate the environment you wish to export:

   Linux, OS X: source activate envname

   windows: activate envname

   Now export your env to new declarative file:

     conda env export > environment.yml

   NOTE: If you already have an environment.yml file in you current directory, it will be overwritten
   with the new file.

   If you instead of exporting your env you want to create a new conda environment from an .yml file:

   conda env create -f environment.yml

   The enviromnent files can be created by hand just beeing compliant with some basic ruels. For
   instance if you want to set your dependencies these are the rules to follow:
env_name: stats
dependencies:
   - numpy
   - pandas
   - scipy

   and then save your file with the name you want.

   Unlike pip, conda is language-agnostic, this permit you to use the R language in your conda
   environment, and obviously create R based notebooks with jupyter.

   The Anaconda team has created an "R Essentials" bundle with the IRKernel and over 80 of the most used
   R packages for data science, including dplyr, shiny, ggplot2, tidyr,caret and nnet.

   Downloading "R Essentials" requires conda. Miniconda includes conda, Python, and a few other
   necessary packages, while Anaconda includes all this and over 200 of the most popularPython packages
   for science, math, engineering, and data analysis. Users may install all of Anaconda at once, or they
   may install Miniconda at first and then use conda to install any other packages they need, including
   any of the packages in Anaconda.

   Once you have conda, you may install "R Essentials" into the current environment:
conda install -c r r-essentials

     and now starting jupyter notebook from your virtual environment $ jupyter notebook you are able to
     create a new R notebook


---
https://www.bogotobogo.com/python/python_virtualenv_virtualenvwrapper.php

virtualenv & virtualenvwrapper

   virtualenv
   A Virtual Environment enables us to keep the dependencies required by different projects in separate
   places, by creating virtual Python environments.

   In other words, virtualenv is a tool to create isolated Python environments. The virtualenv creates a
   folder which contains all the necessary executables to use the packages that a Python project would
   need.

   So, each project can have its own dependencies, regardless of what dependencies every other project
   has.
   
   Sitepackages
   The site packages (3rd party libraries) installed using easy_install or pip are typically placed in
   one of the directories pointed to by site.getsitepackages:
>>> import site
>>> site.getsitepackages()
['/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages']
>>>

$ python3
Python 3.5.2 (default, Jul  5 2016, 12:43:10)
>>> import site
>>> site.getsitepackages()
['/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.5/dist-packages']

   pip
   Pip is a tool that fetched Python packages from the Python package Index and its mirrors. We use
   it to manage and install Python packages. It is similar to easy_install but pip was originally
   written to improve on easy_install. So, it has more features, the key feature being support for
   virtualenv.
   
   virtualenv install

   To install it with pip:
$ sudo pip install virtualenv
Password:
Downloading/unpacking virtualenv
  Downloading virtualenv-13.0.1-py2.py3-none-any.whl (1.7MB): 1.7MB downloaded
Installing collected packages: virtualenv
Successfully installed virtualenv
Cleaning up...

   Creating a new virtual environment
   When we install a package from PyPI using the copy of pip that's created by the virtualenv tool, it
   will install the package into the site-packages directory inside the virtualenv directory. We can
   then use it in our program just as before.

   We only need the virtualenv tool itself when we want to create a new environment. This is really
   simple. Start by changing directory into the root of our project directory, and then use the
   virtualenv command-line tool to create a new environment:
$ mkdir myproject
$ cd myproject

$ virtualenv env
New python executable in env/bin/python
Installing setuptools, pip, wheel...done.

   Here, env is just the name of the directory we want to create our virtual environment inside. It's a
   common convention to call this directory env, and to put it inside our project directory (so, say we
   keep our code at $HOME/myproject/, the environment will be at $HOME/myproject/env/ - each project gets its
   own env). But we can put it whatever we like.

   If we look inside the env directory we just created, we'll see a few subdirectories:
   tree

   The one we care about the most is bin. This is where the local copy of the python binary and the pip
   installer exists. Let's start by using the copy of pip to install requests into the virtualenv
   (rather than globally):
$ env/bin/pip install requests
/home/k/myproject/env/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:90:
Collecting requests
/home/k/myproject/env/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:90:
  Downloading requests-2.7.0-py2.py3-none-any.whl (470kB)
    100% |------------------| 471kB 783kB/s
Installing collected packages: requests
Successfully installed requests-2.7.0

   Notice that we didn't need to use sudo this time, because we're not installing requests globally,
   we're just installing it inside our home directory.

   Now, instead of typing python to get a Python shell, we type env/bin/python:
$ env/bin/python
Python 2.7.5 (default, Mar  9 2014, 22:15:05)
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import requests
>>> requests.get('http://bogotobogo.com')
<response [200]>
>>>
</response>

   Activating the environment
   Instead of typing env/bin/python and env/bin/pip every time, we can run a script to activate the
   environment. This script, which can be executed with source env/bin/activate, simply adjusts a few
   variables in our shell (temporarily) so that when we type python, we actually get the Python binary
   inside the virtualenv instead of the global one:
$ which python
/usr/bin/python

$ source env/bin/activate

(env)$ which python
/home/k/myproject/env/bin/python
(env)$

   So, now we can just run pip install requests (instead of env/bin/pip install requests) and pip will
   install the library into the environment, instead of globally. The adjustments to our shell only last
   for as long as the terminal is open, so we'll need to remember to rerun source env/bin/activate each
   time you close and open our terminal window. If we switch to work on a different project (with its
   own environment), we can run deactivate to stop using one environment, and then source
   env/bin/activate to activate the other.
   virtualenvwrapper

   virtualenvwrapper is a set of extensions to virtualenv tool. The extensions include wrappers for
   creating and deleting virtual environments and otherwise managing our development workflow, making it
   easier to work on more than one project at a time without introducing conflicts in their
   dependencies.

   To install it:
$ sudo pip install virtualenvwrapper
...
Successfully installed stevedore-1.18.0 virtualenv-15.1.0 virtualenv-clone-0.2.6 virtualenvwrapper-4.7.2

   Using virtualenv without virtualenvwrapper is a little bit painful because everytime we want to
   activate a virtual environment, so we have to type long command like this:
$ source $HOME/myproject/env/bin/activate

   But with virtualenvwrapper, we only need to type:
$ workon myproject

   Note that we haven't installed virtualenvwrapper.sh, this may not work yet.

   As initialization steps, we will want to add the command to source
   /usr/local/bin/virtualenvwrapper.sh to our shell startup file, changing the path to
   virtualenvwrapper.sh depending on where it was installed by pip:
$ vi $HOME/.bashrc
export WORKON_HOME=$HOME/Envs

   Run the script:
$ source $HOME/.bashrc

   Then, execute the following:
$ mkdir -p $WORKON_HOME

$ echo $WORKON_HOME
/home/k/Envs

   Run virtualenvwrapper.sh:
$ source /usr/local/bin/virtualenvwrapper.sh
virtualenvwrapper.user_scripts creating /home/k/Envs/premkproject
virtualenvwrapper.user_scripts creating /home/k/Envs/postmkproject
virtualenvwrapper.user_scripts creating /home/k/Envs/initialize
virtualenvwrapper.user_scripts creating /home/k/Envs/premkvirtualenv
virtualenvwrapper.user_scripts creating /home/k/Envs/postmkvirtualenv
virtualenvwrapper.user_scripts creating /home/k/Envs/prermvirtualenv
virtualenvwrapper.user_scripts creating /home/k/Envs/postrmvirtualenv
virtualenvwrapper.user_scripts creating /home/k/Envs/predeactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/postdeactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/preactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/postactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/get_env_details

   We may want to run the script from $HOME/.bashrc:
$ echo "source /usr/local/bin/virtualenvwrapper.sh" >> $HOME/.bashrc

   Let's create our first virtualenv:
$ mkvirtualenv env1
New python executable in /home/k/Envs/env1/bin/python
Installing setuptools, pip, wheel...done.
virtualenvwrapper.user_scripts creating /home/k/Envs/env1/bin/predeactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/env1/bin/postdeactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/env1/bin/preactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/env1/bin/postactivate
virtualenvwrapper.user_scripts creating /home/k/Envs/env1/bin/get_env_details
(env1) k@laptop:$HOME$

   We are not limited to a single virtualenv, and we can add another env:
(env1) k@laptop:$HOME$ mkvirtualenv env2

   List the envs:
(env1) k@laptop:$HOME$ ls $WORKON_HOME
env1    env2  ...

   Now, we can switch between envs with workon command:
(env2) k@laptop:$HOME$ workon env1

(env1) k@laptop:$HOME$ echo $VIRTUAL_ENV
/home/k/Envs/env1

(env1) k@laptop:$HOME$

   Now we can install some software into the environment:
(env1) k@laptop:$HOME$ pip install django
Collecting django
  Using cached Django-1.10.3-py2.py3-none-any.whl
Installing collected packages: django
Successfully installed django-1.10.3
(env1) k@laptop:$HOME$

   We can check the new package with lssitepackages:
(env1) k@laptop:$HOME$ lssitepackages
django                   pip                  setuptools-29.0.1.dist-info
Django-1.10.3.dist-info  pip-9.0.1.dist-info  wheel
easy_install.py          pkg_resources        wheel-0.29.0.dist-info
easy_install.pyc         setuptools
(env1) k@laptop:$HOME$

   How to leave/exit/deactivate a python virtualenv?
(env1) k@laptop:$HOME$ deactivate
k@laptop:$HOME$ workon env1

   Practical Example
   In this section, we have a sample of using virtualenv for Django application. The source is available
   from [https://github.com/epic-math/sfvue2.git]sfvue2.

   We get the following from the source:
   [sfvue-page.png]

   The following is from install.mb, and we can see how it works:
   #Installation Instructions *Make sure you have Python2.7.3, virtualenv, pip and sqlite3 installed*
    1. Download or clone this repo.
    2. Go to project home folder and run these commands:
$ cp sfvue/example_local.py sfvue/local_settings.py
$ virtualenv venv
$ source venv/bin/activate

    3. This will create a virtual environment and activate it. (note) We may want to install
       mariadb-devel to avoid vertualenv EnvironmentError: mysql_config not found Now use pip to install
       dependencies with:
$ pip install -r dev-requirements.txt
       (note) --allow-external PIL --allow-unverified PIL PIL==1.1.7

    4. Now we have to prepare a database:
$ python manage.py syncdb

    5. It will ask you to provide username, email and password. Give them and run following migrations:
$ python manage.py migrate guardian
$ python manage.py migrate resources
$ python manage.py migrate profiles

    6. Run django server
$ python manage.py runserver

    7. Go to [http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)
    8. Create Resource Types named Book, Ebook, Tutorial, Online Course, Other.
    9. Go to home page.


---
https://docs.python-guide.org/dev/virtualenvs/

Pipenv & Virtual Environments

   This tutorial walks you through installing and using Python packages.

   It will show you how to install and use the necessary tools and make strong recommendations on best
   practices. Keep in mind that Python is used for a great many different purposes, and precisely how
   you want to manage your dependencies may change based on how you decide to publish your software. The
   guidance presented here is most directly applicable to the development and deployment of network
   services (including web applications), but is also very well suited to managing development and
   testing environments for any kind of project.

   Note
   This guide is written for Python 3, however, these instructions should work fine on Python 2.7-if you
   are still using it, for some reason.

Make sure you've got Python & pip

   Before you go any further, make sure you have Python and that it's available from your command line.
   You can check this by simply running:
$ python --version

   You should get some output like 3.6.2. If you do not have Python, please install the latest 3.x
   version from python.org or refer to the Installing Python section of this guide.

   Note

   If you're newcomer and you get an error like this:
>>> python
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'python' is not defined

   It's because this command is intended to be run in a shell (also called a terminal or console). See
   the Python for Beginners getting started tutorial for an introduction to using your operating
   system's shell and interacting with Python.

   Additionally, you'll need to make sure you have pip available. You can check this by running:
$ pip --version

   If you installed Python from source, with an installer from python.org, or via Homebrew you
   should already have pip. If you're on Linux and installed using your OS package manager, you may have
   to install pip separately.

Installing Pipenv
   Pipenv is a dependency manager for Python projects. If you're familiar with Node.js' npm or
   Ruby's bundler, it is similar in spirit to those tools. While pip can install Python
   packages, Pipenv is recommended as it's a higher-level tool that simplifies dependency management for
   common use cases.

   Use pip to install Pipenv:
$ pip install --user pipenv

   Note
   This does a user installation to prevent breaking any system-wide packages. If pipenv isn't
   available in your shell after installation, you'll need to add the user base's binary directory
   to your PATH.

   On Linux and macOS you can find the user base binary directory by running python -m site --user-base
   and adding bin to the end. For example, this will typically print $HOME/.local (with $HOME expanded to the
   absolute path to your home directory) so you'll need to add $HOME/.local/bin to your PATH. You can set
   your PATH permanently by modifying $HOME/.profile.

   On Windows you can find the user base binary directory by running py -m site --user-site and
   replacing site-packages with Scripts. For example, this could return
   C:\Users\Username\AppData\Roaming\Python36\site-packages so you would need to set your PATH to
   include C:\Users\Username\AppData\Roaming\Python36\Scripts. You can set your user PATH permanently in
   the Control Panel. You may need to log out for the PATH changes to take effect.

Installing packages for your project
   Pipenv manages dependencies on a per-project basis. To install packages, change into your project's
   directory (or just an empty directory for this tutorial) and run:
$ cd project_folder
$ pipenv install requests

   Pipenv will install the excellent Requests library and create a Pipfile for you in your project's
   directory. The Pipfile is used to track which dependencies your project needs in case you need to
   re-install them, such as when you share your project with others. You should get output similar to
   this (although the exact paths shown will vary):
Creating a Pipfile for this project...
Creating a virtualenv for this project...
Using base prefix '/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6'
New python executable in $HOME/.local/share/virtualenvs/tmp-agwWamBd/bin/python3.6
Also creating executable in $HOME/.local/share/virtualenvs/tmp-agwWamBd/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: $HOME/.local/share/virtualenvs/tmp-agwWamBd
Installing requests...
Collecting requests
  Using cached requests-2.18.4-py2.py3-none-any.whl
Collecting idna<2.7,>=2.5 (from requests)
  Using cached idna-2.6-py2.py3-none-any.whl
Collecting urllib3<1.23,>=1.21.1 (from requests)
  Using cached urllib3-1.22-py2.py3-none-any.whl
Collecting chardet<3.1.0,>=3.0.2 (from requests)
  Using cached chardet-3.0.4-py2.py3-none-any.whl
Collecting certifi>=2017.4.17 (from requests)
  Using cached certifi-2017.7.27.1-py2.py3-none-any.whl
Installing collected packages: idna, urllib3, chardet, certifi, requests
Successfully installed certifi-2017.7.27.1 chardet-3.0.4 idna-2.6 requests-2.18.4 urllib3-1.22

Adding requests to Pipfile's [packages]...
P.S. You have excellent taste!

Using installed packages
   Now that Requests is installed you can create a simple main.py file to use it:
import requests

response = requests.get('https://httpbin.org/ip')

print('Your IP is {0}'.format(response.json()['origin']))

   Then you can run this script using pipenv run:
$ pipenv run python main.py

   You should get output similar to this:
Your IP is 8.8.8.8

   Using $ pipenv run ensures that your installed packages are available to your script. It's also
   possible to spawn a new shell that ensures all commands have access to your installed packages with $
   pipenv shell.

Next steps
   Congratulations, you now know how to install and use Python packages!

Lower level: virtualenv
   virtualenv is a tool to create isolated Python environments. virtualenv creates a folder which
   contains all the necessary executables to use the packages that a Python project would need.

   It can be used standalone, in place of Pipenv.

   Install virtualenv via pip:
$ pip install virtualenv

   Test your installation:
$ virtualenv --version

Basic Usage
    1. Create a virtual environment for a project:

$ cd project_folder
$ virtualenv venv

   virtualenv venv will create a folder in the current directory which will contain the Python
   executable files, and a copy of the pip library which you can use to install other packages. The name
   of the virtual environment (in this case, it was venv) can be anything; omitting the name will place
   the files in the current directory instead.

   Note

   'venv' is the general convention used globally. As it is readily available in ignore files (eg:
   .gitignore')

   This creates a copy of Python in whichever directory you ran the command in, placing it in a folder
   named venv.

   You can also use the Python interpreter of your choice (like python2.7).
$ virtualenv -p /usr/bin/python2.7 venv

   or change the interpreter globally with an env variable in $HOME/.bashrc:
$ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2.7

    2. To begin using the virtual environment, it needs to be activated:
$ source venv/bin/activate

   The name of the current virtual environment will now appear on the left of the prompt (e.g.
   (venv)Your-Computer:project_folder UserName$) to let you know that it's active. From now on, any
   package that you install using pip will be placed in the venv folder, isolated from the global Python
   installation.

   For Windows, the same command mentioned in step 1 can be used to create a virtual environment.
   However, activating the environment requires a slightly different command.

   Assuming that you are in your project directory:
C:\Users\SomeUser\project_folder> venv\Scripts\activate

   Install packages using the pip command:
$ pip install requests

    3. If you are done working in the virtual environment for the moment, you can deactivate it:
$ deactivate

   This puts you back to the system's default Python interpreter with all its installed libraries.

   To delete a virtual environment, just delete its folder. (In this case, it would be rm -rf
   project_folder.)

   After a while, though, you might end up with a lot of virtual environments littered across your
   system, and it's possible you'll forget their names or where they were placed.

   Note
   Python has included venv module from version 3.3. For more details: venv.

Other Notes
   Running virtualenv with the option --no-site-packages will not include the packages that are
   installed globally. This can be useful for keeping the package list clean in case it needs to be
   accessed later. [This is the default behavior for virtualenv 1.7 and later.]

   In order to keep your environment consistent, it's a good idea to "freeze" the current state of the
   environment packages. To do this, run:
$ pip freeze > requirements.txt

   This will create a requirements.txt file, which contains a simple list of all the packages in the
   current environment, and their respective versions. You can see the list of installed packages
   without the requirements format using pip list. Later it will be easier for a different developer (or
   you, if you need to re-create the environment) to install the same packages using the same versions:
$ pip install -r requirements.txt

   This can help ensure consistency across installations, across deployments, and across developers.

   Lastly, remember to exclude the virtual environment folder from source control by adding it to the
   ignore list (see Version Control Ignores).

virtualenvwrapper
   virtualenvwrapper provides a set of commands which makes working with virtual environments much
   more pleasant. It also places all your virtual environments in one place.

   To install (make sure virtualenv is already installed):
$ pip install virtualenvwrapper
$ export WORKON_HOME=$HOME/Envs
$ source /usr/local/bin/virtualenvwrapper.sh

   For Windows, you can use the virtualenvwrapper-win.

   To install (make sure virtualenv is already installed):
$ pip install virtualenvwrapper-win

   In Windows, the default path for WORKON_HOME is %USERPROFILE%\Envs

Basic Usage
    1. Create a virtual environment:
$ mkvirtualenv project_folder

   This creates the project_folder folder inside $HOME/Envs.
    2. Work on a virtual environment:
$ workon project_folder

   Alternatively, you can make a project, which creates the virtual environment, and also a project
   directory inside $WORKON_HOME, which is cd-ed into when you workon project_folder.
$ mkproject project_folder

   virtualenvwrapper provides tab-completion on environment names. It really helps when you have a lot
   of environments and have trouble remembering their names.

   workon also deactivates whatever environment you are currently in, so you can quickly switch between
   environments.
   
    3. Deactivating is still the same:
$ deactivate

    4. To delete:
$ rmvirtualenv venv

Other useful commands
   lsvirtualenv
          List all of the environments.

   cdvirtualenv
          Navigate into the directory of the currently activated virtual environment, so you can browse
          its site-packages, for example.

   cdsitepackages
          Like the above, but directly into site-packages directory.

   lssitepackages
          Shows contents of site-packages directory.

virtualenv-burrito
   With virtualenv-burrito, you can have a working virtualenv + virtualenvwrapper environment in a
   single command.

autoenv
   When you cd into a directory containing a .env, autoenv automagically activates the environment.

   Install it on Mac OS X using brew:
$ brew install autoenv

   And on Linux:
$ git clone git://github.com/kennethreitz/autoenv.git $HOME/.autoenv
$ echo 'source $HOME/.autoenv/activate.sh' >> $HOME/.bashrc


---
