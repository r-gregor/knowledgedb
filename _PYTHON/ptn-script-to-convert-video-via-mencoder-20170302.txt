filename: python_script-to-convert-video-via-mencoder_20170302.txt
http://forum.videohelp.com/threads/293542-Here-is-a-Basic-Python-Script-to-convert-video-via-Mencoder

Here is a Basic Python Script to convert video via Mencoder
     Below is a rather simple python script. It makes heavy use of hard-coding when it shouldn't. The
     motivation of this script was to have a simple, easy way to batch convert videos while still
     giving me direct control over [57]mencoder arguments. More precisely, I couldn't some videos to
     work with [58]ffmpegx and found some things annoying to do in ffmpegx. This script makes use of
     two threads because my own testing shows that to be faster than one. This may not be true for you
     (but probably is if you have 2 cpus). You could just use an argument to tell mencoder to use
     multiple CPUs, but different pieces of the image are worked on separately when you do this so you
     might lose a tad of quality. The script should be relatively easy for you to modify whether or not
     you know Python, though you'll need python if you want to be able to run it. As written, this
     script will convert videos named cluster#.flv to videos named cluster#.avi. It uses a separate
     thread fo 10-17 and 18-25. I used the copy of mencoder found at
     [59]http://prdownloads.sourceforge.net/mplayerosx/ffmpegXbinaries20060307.zip
     Take note that this script was mostly written for me and I didn't make it clean or have it use
     command line arguments. Eventually I might do something smarter but right now it's just one that
     is modified at need. I even left in some module imports that are not being used. That said, it
     might save a few people some work. If anybody ends up making use of this in some way, a quick post
     (unless people already responded to this thread to say so) about it is appreciated just so I'll
     know I didn't waste my time posting it here.
<code>
#! /usr/bin/env python

import re,urllib,os, threading,time,random

class MyThread ( threading.Thread):
	def __init__ (self, starti, endi):
		self.starti=starti
		self.endi=endi+1
		threading.Thread.__init__(self)
		
	def run( self):
		for a in xrange(self.starti, self.endi):
			os.spawnvp(os.P_WAIT,'./mencoder', ['mencoder',] + ['Cluster/cluster'+str(a)+'.flv',] + \
			['-o'] + ['cluster'+str(a)+'.avi'] + '-oac mp3lame -lameopts abr:br=92 -srate 22050 \
			-ovc xvid -xvidencopts bitrate=150'.split())

MyThread(10,17).start()
MyThread(18,25).start()
</code>
 