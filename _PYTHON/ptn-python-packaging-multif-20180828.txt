filename: ptn_python_packaging-multif_20180828.txt
https://packaging.python.org/tutorials/

Tutorials
   Tutorials are opinionated step-by-step guides to help you get familiar with packaging concepts. For
   more detailed information on specific packaging topics, see Guides.
     * Installing Packages
     * Managing Application Dependencies
     * Packaging Python Projects

Table Of Contents
     * Tutorials
       + Installing Packages
       + Managing Application Dependencies
       + Packaging Python Projects
     * Guides
     * Discussions
     * PyPA specifications
     * Project Summaries
     * Glossary
     * How to Get Support
     * Contribute to this guide
     * News


---
https://packaging.python.org/tutorials/installing-packages/

Installing Packages

   This section covers the basics of how to install Python packages.

   It's important to note that the term "package" in this context is being used as a synonym for a
   distribution (i.e. a bundle of software to be installed), not to refer to the kind of package
   that you import in your Python source code (i.e. a container of modules). It is common in the Python
   community to refer to a distribution using the term "package". Using the term "distribution" is
   often not preferred, because it can easily be confused with a Linux distribution, or another larger
   software distribution like Python itself.

Requirements for Installing Packages

   This section describes the steps to follow before installing other Python packages.

Ensure you can run Python from the command line
   Before you go any further, make sure you have Python and that the expected version is available from
   your command line. You can check this by running:
python --version

   You should get some output like Python 3.6.3. If you do not have Python, please install the latest
   3.x version from python.org or refer to the Installing Python section of the Hitchhiker's
   Guide to Python.

   Note

   If you're a newcomer and you get an error like this:
>>> python --version
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'python' is not defined

   It's because this command and other suggested commands in this tutorial are intended to be run in a
   shell (also called a terminal or console). See the Python for Beginners getting started tutorial
   for an introduction to using your operating system's shell and interacting with Python.

   Note

   If you're using an enhanced shell like IPython or the Jupyter notebook, you can run system commands
   like those in this tutorial by prefacing them with a ! character:

In : import sys
        !{sys.executable} --version
Python 3.6.3

   It's recommended to write {sys.executable} rather than plain python in order to ensure that commands
   are run in the Python installation matching the currently running notebook (which may not be the same
   Python installation that the python command refers to).

   Note

   Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the
   system Python without creating a virtual environment first should replace the python command in this
   tutorial with python3 and the pip command with pip3 --user. Do not run any of the commands in this
   tutorial with sudo: if you get a permissions error, come back to the section on creating virtual
   environments, set one up, and then continue with the tutorial as written.

Ensure you can run pip from the command line
   Additionally, you'll need to make sure you have pip available. You can check this by running:
pip --version

   If you installed Python from source, with an installer from python.org, or via Homebrew you
   should already have pip. If you're on Linux and installed using your OS package manager, you may have
   to install pip separately, see Installing pip/setuptools/wheel with Linux Package Managers.

   If pip isn't already installed, then first try to bootstrap it from the standard library:
python -m ensurepip --default-pip

   If that still doesn't allow you to run pip:

     * Securely Download get-pip.py 
     * Run python get-pip.py.  This will install or upgrade pip. Additionally, it will install
       setuptools and wheel if they're not installed already.
       Warning
       Be cautious if you're using a Python install that's managed by your operating system or another
       package manager. get-pip.py does not coordinate with those tools, and may leave your system in an
       inconsistent state. You can use python get-pip.py --prefix=/usr/local/ to install in /usr/local
       which is designed for locally-installed software.

Ensure pip, setuptools, and wheel are up to date
   While pip alone is sufficient to install from pre-built binary archives, up to date copies of the
   setuptools and wheel projects are useful to ensure you can also install from source archives:
python -m pip install --upgrade pip setuptools wheel

Optionally, create a virtual environment
   See section below for details, but here's the basic venv  command to use on a typical
   Linux system:
python3 -m venv tutorial_env
source tutorial_env/bin/activate

   This will create a new virtual environment in the tutorial_env subdirectory, and configure the
   current shell to use it as the default python environment.

Creating Virtual Environments
   Python "Virtual Environments" allow Python packages to be installed in an isolated location for a
   particular application, rather than being installed globally.

   Imagine you have an application that needs version 1 of LibFoo, but another application requires
   version 2. How can you use both these applications? If you install everything into
   /usr/lib/python3.6/site-packages (or whatever your platform's standard location is), it's easy to end
   up in a situation where you unintentionally upgrade an application that shouldn't be upgraded.

   Or more generally, what if you want to install an application and leave it be? If an application
   works, any change in its libraries or the versions of those libraries can break the application.

   Also, what if you can't install packages into the global site-packages directory? For instance,
   on a shared host.

   In all these cases, virtual environments can help you. They have their own installation directories
   and they don't share libraries with other virtual environments.

   Currently, there are two common tools for creating Python virtual environments:
     * venv is available by default in Python 3.3 and later, and installs pip and setuptools
       into created virtual environments in Python 3.4 and later.
     * virtualenv needs to be installed separately, but supports Python 2.6+ and Python 3.3+, and
       pip, setuptools and wheel are always installed into created virtual environments by
       default (regardless of Python version).

   The basic usage is like so:

   Using virtualenv:
virtualenv <DIR>
source <DIR>/bin/activate

   Using venv:
python3 -m venv <DIR>
source <DIR>/bin/activate

   For more information, see the virtualenv docs or the venv docs.

   In both of the above cases, Windows users should _not_ use the source command, but should rather run
   the activate script directly from the command shell. The use of source under Unix shells ensures that
   the virtual environment's variables are set within the current shell, and not in a subprocess (which
   then disappears, having no useful effect).

   Managing multiple virtual environments directly can become tedious, so the dependency management
   tutorial introduces a higher level tool, Pipenv, that automatically manages a separate virtual
   environment for each project and application that you work on.

Use pip for Installing
   pip is the recommended installer. Below, we'll cover the most common usage scenarios. For more
   detail, see the pip docs, which includes a complete Reference Guide.

Installing from PyPI
   The most common usage of pip is to install from the Python Package Index using a
   requirement specifier. Generally speaking, a requirement specifier is composed of a project name
   followed by an optional version specifier. PEP 440 contains a full specification of the
   currently supported specifiers. Below are some examples.

   To install the latest version of "SomeProject":
pip install 'SomeProject'

   To install a specific version:
pip install 'SomeProject==1.4'

   To install greater than or equal to one version and less than another:
pip install 'SomeProject>=1,<2'

   To install a version that's "compatible" with a certain version: 
pip install 'SomeProject~=1.4.2'

   In this case, this means to install any version "==1.4.*" version that's also ">=1.4.2".

Source Distributions vs Wheels
   pip can install from either Source Distributions (sdist) or Wheels, but if both are
   present on PyPI, pip will prefer a compatible wheel.

   Wheels are a pre-built distribution format that provides faster installation compared to
   Source Distributions (sdist), especially when a project contains compiled extensions.

   If pip does not find a wheel to install, it will locally build a wheel and cache it for future
   installs, instead of rebuilding the source distribution in the future.

Upgrading packages
   Upgrade an already installed SomeProject to the latest from PyPI.
pip install --upgrade SomeProject

Installing to the User Site
   To install packages that are isolated to the current user, use the --user flag:
pip install --user SomeProject

   For more information see the User Installs section from the pip docs.

   Note that the --user flag has no effect when inside a virtual environment - all installation commands
   will affect the virtual environment.

Requirements files
   Install a list of requirements specified in a Requirements File.
pip install -r requirements.txt

Installing from VCS
   Install a project from VCS in "editable" mode. For a full breakdown of the syntax, see pip's section
   on VCS Support.
pip install -e git+https://git.repo/some_pkg.git#egg=SomeProject          # from git
pip install -e hg+https://hg.repo/some_pkg#egg=SomeProject                # from mercurial
pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomeProject         # from svn
pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomeProject  # from a branch

Installing from other Indexes
   Install from an alternate index
pip install --index-url http://my.package.repo/simple/ SomeProject

   Search an additional index during install, in addition to PyPI
pip install --extra-index-url http://my.package.repo/simple SomeProject

Installing from a local src tree
   Installing from local src in Development Mode, i.e. in such a way that the project appears to be
   installed, but yet is still editable from the src tree.
pip install -e <path>

   You can also install normally from src
pip install <path>

Installing from local archives
   Install a particular source archive file.
pip install ./downloads/SomeProject-1.0.4.tar.gz

   Install from a local directory containing archives (and don't check PyPI)
pip install --no-index --find-links=file:///local/dir/ SomeProject
pip install --no-index --find-links=/local/dir/ SomeProject
pip install --no-index --find-links=relative/dir/ SomeProject

Installing from other sources
   To install from other data sources (for example Amazon S3 storage) you can create a helper
   application that presents the data in a PEP 503 compliant index format, and use the
   --extra-index-url flag to direct pip to use that index.
./s3helper --port=7777
pip install --extra-index-url http://localhost:7777 SomeProject

Installing Prereleases
   Find pre-release and development versions, in addition to stable versions. By default, pip only finds
   stable versions.
pip install --pre SomeProject

Installing Setuptools "Extras"
   Install setuptools extras.
$ pip install SomePackage
$ pip install SomePackage==3.0
$ pip install -e .==3.0  # editable project in current directory
     ________________________________________________________________________________________________

    "Secure" in this context means using a modern browser or a tool like curl that verifies SSL
   certificates when downloading from https URLs.
    Depending on your platform, this may require root or Administrator access. pip is
   currently considering changing this by making user installs the default behavior.
    Beginning with Python 3.4, venv (a stdlib alternative to virtualenv) will create
   virtualenv environments with pip pre-installed, thereby making it an equal alternative to
   virtualenv.
    The compatible release specifier was accepted in PEP 440 and support was released in
   setuptools v8.0 and pip v6.0


---
https://packaging.python.org/tutorials/managing-dependencies/

Managing Application Dependencies
   The package installation tutorial covered the basics of getting set up to install and update
   Python packages.

   However, running these commands interactively can get tedious even for your own personal projects,
   and things get even more difficult when trying to set up development environments automatically for
   projects with multiple contributors.

   This tutorial walks you through the use of Pipenv to manage dependencies for an application. It
   will show you how to install and use the necessary tools and make strong recommendations on best
   practices.

   Keep in mind that Python is used for a great many different purposes, and precisely how you want to
   manage your dependencies may change based on how you decide to publish your software. The guidance
   presented here is most directly applicable to the development and deployment of network services
   (including web applications), but is also very well suited to managing development and testing
   environments for any kind of project.

   Note
   This guide is written for Python 3, however, these instructions should also work on Python 2.7.

Installing Pipenv
   Pipenv is a dependency manager for Python projects. If you're familiar with Node.js' npm or
   Ruby's bundler, it is similar in spirit to those tools. While pip alone is often sufficient
   for personal use, Pipenv is recommended for collaborative projects as it's a higher-level tool that
   simplifies dependency management for common use cases.

   Use pip to install Pipenv:
pip install --user pipenv

   Note
   This does a user installation to prevent breaking any system-wide packages. If pipenv isn't
   available in your shell after installation, you'll need to add the user base's binary directory
   to your PATH.

   On Linux and macOS you can find the user base binary directory by running python -m site --user-base
   and adding bin to the end. For example, this will typically print ~/.local (with ~ expanded to the
   absolute path to your home directory) so you'll need to add ~/.local/bin to your PATH. You can set
   your PATH permanently by modifying ~/.profile.

   On Windows you can find the user base binary directory by running py -m site --user-site and
   replacing site-packages with Scripts. For example, this could return
   C:\Users\Username\AppData\Roaming\Python36\site-packages so you would need to set your PATH to
   include C:\Users\Username\AppData\Roaming\Python36\Scripts. You can set your user PATH permanently in
   the Control Panel. You may need to log out for the PATH changes to take effect.

Installing packages for your project
   Pipenv manages dependencies on a per-project basis. To install packages, change into your project's
   directory (or just an empty directory for this tutorial) and run:
cd myproject
pipenv install requests

   Pipenv will install the Requests library and create a Pipfile for you in your project's
   directory. The Pipfile is used to track which dependencies your project needs in case you need to
   re-install them, such as when you share your project with others. You should get output similar to
   this (although the exact paths shown will vary):
Creating a Pipfile for this project...
Creating a virtualenv for this project...
Using base prefix '/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6'
New python executable in ~/.local/share/virtualenvs/tmp-agwWamBd/bin/python3.6
Also creating executable in ~/.local/share/virtualenvs/tmp-agwWamBd/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: ~/.local/share/virtualenvs/tmp-agwWamBd
Installing requests...
Collecting requests
  Using cached requests-2.18.4-py2.py3-none-any.whl
Collecting idna<2.7,>=2.5 (from requests)
  Using cached idna-2.6-py2.py3-none-any.whl
Collecting urllib3<1.23,>=1.21.1 (from requests)
  Using cached urllib3-1.22-py2.py3-none-any.whl
Collecting chardet<3.1.0,>=3.0.2 (from requests)
  Using cached chardet-3.0.4-py2.py3-none-any.whl
Collecting certifi>=2017.4.17 (from requests)
  Using cached certifi-2017.7.27.1-py2.py3-none-any.whl
Installing collected packages: idna, urllib3, chardet, certifi, requests
Successfully installed certifi-2017.7.27.1 chardet-3.0.4 idna-2.6 requests-2.18.4 urllib3-1.22

Adding requests to Pipfile's [packages]...

Using installed packages
   Now that Requests is installed you can create a simple main.py file to use it:
import requests

response = requests.get('https://httpbin.org/ip')

print('Your IP is {0}'.format(response.json()['origin']))

   Then you can run this script using pipenv run:
pipenv run python main.py

   You should get output similar to this:
Your IP is 8.8.8.8

   Using pipenv run ensures that your installed packages are available to your script. It's also
   possible to spawn a new shell that ensures all commands have access to your installed packages with
   pipenv shell.

Next steps
   Congratulations, you now know how to effectively manage dependencies and development environments on
   a collaborative Python project!

   If you're interested in creating and distributing your own Python packages, see the tutorial on
   packaging and distributing packages.

   Note that when your application includes definitions of Python source packages, they (and their
   dependencies) can be added to your pipenv environment with pipenv install -e
   <relative-path-to-source-directory> (e.g. pipenv install -e . or pipenv install -e src).

   If you find this particular approach to managing application dependencies isn't working well for you
   or your use case, you may want to explore these other tools and techniques to see if one of them is a
   better fit:
     * pip-tools to build your own custom workflow from lower level pieces like pip-compile and
       pip-sync
     * hatch for opinionated coverage of even more steps in the project management workflow (such as
       incrementing versions, tagging releases, and creating new skeleton projects from project
       templates)
     * poetry for a tool comparable in scope to pipenv that focuses more directly on use cases where
       the repository being managed is structured as a Python project with a valid pyproject.toml file
       (by contrast, pipenv explicitly avoids making the assumption that the application being worked on
       that's depending on components from PyPI will itself support distribution as a pip-installable
       Python package).

	   
---
https://packaging.python.org/tutorials/packaging-projects/

Packaging Python Projects

   This tutorial walks you through how to package a simple Python project. It will show you how to add
   the necessary files and structure to create the package, how to build the package, and how to upload
   it to the Python Package Index.

A simple project
   This tutorial uses a simple project named example_pkg. If you are unfamiliar with Python's modules
   and import packages, take a few minutes to read over the Python documentation for packages
   and modules.

   To create this project locally, create the following file structure:
/example_pkg
  /example_pkg
    __init__.py

   Once you create this structure, you'll want to run all of the commands in this tutorial within the
   top-level folder - so be sure to cd example_pkg.

   You should also edit example_pkg/__init__.py and put the following code in there:
name = "example_pkg"

   This is just so that you can verify that it installed correctly later in this tutorial.

Creating the package files
   You will now create a handful of files to package up this project and prepare it for distribution.
   Create the new files listed below - you will add content to them in the following steps.
/example_pkg
  /example_pkg
    __init__.py
  setup.py
  LICENSE
  README.md

Creating setup.py
   setup.py is the build script for setuptools. It tells setuptools about your package (such as the
   name and version) as well as which code files to include.

   Open setup.py and enter the following content, you can personalize the values if you want:
import setuptools

with open("README.md", "r") as fh:
    long_description = fh.read()

setuptools.setup(
    name="example_pkg",
    version="0.0.1",
    author="Example Author",
    author_email="author@example.com",
    description="A small example package",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/pypa/sampleproject",
    packages=setuptools.find_packages(),
    classifiers=(
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ),
)

   setup() takes several arguments. This example package uses a relatively minimal set:
     * name is the name of your package. This can be any name as long as only contains letters, numbers,
       _ , and -. It also must not already taken on pypi.org.
     * version is the package version see PEP 440 for more details on versions.
     * author and author_email are used to identify the author of the package.
     * description is a short, one-sentence summary of the package.
     * long_description is a detailed description of the package. This is shown on the package detail
       package on the Python Package Index. In this case, the long description is loaded from README.md
       which is a common pattern.
     * long_description_content_type tells the index what type of markup is used for the long
       description. In this case, it's Markdown.
     * url is the URL for the homepage of the project. For many projects, this will just be a link to
       GitHub, GitLab, Bitbucket, or similar code hosting service.
     * packages is a list of all Python import packages that should be included in the
       distribution package. Instead of listing each package manually, we can use find_packages() to
       automatically discover all packages and subpackages. In this case, the list of packages will be
       example_pkg as that's the only package present.
     * classifiers tell the index and pip some additional metadata about your package. In this case,
       the package is only compatible with Python 3, is licensed under the MIT license, and is
       OS-independent. You should always include at least which version(s) of Python your package works
       on, which license your package is available under, and which operating systems your package will
       work on. For a complete list of classifiers, see https://pypi.org/classifiers/.

   There are many more than the ones mentioned here. See Packaging and distributing projects for
   more details.

Creating README.md

   Open README.md and enter the following content. You can customize this if you'd like.
# Example Package

This is a simple example package. You can use
[Github-flavored Markdown](https://guides.github.com/features/mastering-markdown/)
to write your content.

Creating a LICENSE
   It's important for every package uploaded to the Python Package Index to include a license. This
   tells users who install your package the terms under which they can use your package. For help
   picking a license, see https://choosealicense.com/. Once you have chosen a license, open LICENSE
   and enter the license text. For example, if you had chosen the MIT license:
Copyright (c) 2018 The Python Packaging Authority

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Generating distribution archives
   The next step is to generate distribution packages for the package. These are archives that are
   uploaded to the Package Index and can be installed by pip.

   Make sure you have the latest versions of setuptools and wheel installed:
python3 -m pip install --user --upgrade setuptools wheel

   Tip
   IF you have trouble installing these, see the Installing Packages tutorial.

   Now run this command from the same directory where setup.py is located:
python3 setup.py sdist bdist_wheel

   This command should output a lot of text and once completed should generate two files in the dist
   directory:
dist/
  example_pkg-0.0.1-py3-none-any.whl
  example_pkg-0.0.1.tar.gz

   Note
   If you run into trouble here, please copy the output and file an issue over on packaging problems
   and we'll do our best to help you!

   The tar.gz file is a source archive whereas the .whl file is a built distribution. Newer
   pip versions preferentially install built distributions, but will fall back to source archives if
   needed. You should always upload a source archive and provide built archives for the platforms your
   project is compatible with. In this case, our example package is compatible with Python on any
   platform so only one built distribution is needed.

Uploading the distribution archives
   Finally, it's time to upload your package to the Python Package Index!

   The first thing you'll need to do is register an account on Test PyPI. Test PyPI is a separate
   instance of the package index intended for testing and experimentation. It's great for things like
   this tutorial where we don't necessarily want to upload to the real index. To register an account, go
   to https://test.pypi.org/account/register/ and complete the steps on that page. You will also
   need to verify your email address before you're able to upload any packages. For more details on Test
   PyPI, see Using TestPyPI.

   Now that you are registered, you can use twine to upload the distribution packages. You'll need
   to install Twine:
python3 -m pip install --user --upgrade twine

   Once installed, run Twine to upload all of the archives under dist:
twine upload --repository-url https://test.pypi.org/legacy/ dist/*

   You will be prompted for the username and password you registered with Test PyPI. After the command
   completes, you should see output similar to this:
Uploading distributions to https://test.pypi.org/legacy/
Enter your username: [your username]
Enter your password:
Uploading example_pkg-0.0.1-py3-none-any.whl
100%|█████████████████████| 4.65k/4.65k [00:01<00:00, 2.88kB/s]
Uploading example_pkg-0.0.1.tar.gz
100%|█████████████████████| 4.25k/4.25k [00:01<00:00, 3.05kB/s]

   Note
   If you get an error that says The user '[your username]' isn't allowed to upload to project
   'example-pkg', you'll need to go and pick a unique name for your package. A good choice is
   example_pkg_your_username. Update the name argument in setup.py, remove the dist folder, and
   regenerate the archives.

   Once uploaded your package should be viewable on TestPyPI, for example,
   https://test.pypi.org/project/example-pkg

Installing your newly uploaded package
   You can use pip to install your package and verify that it works. Create a new virtualenv
   (see Installing Packages for detailed instructions) and install your package from TestPyPI:
python3 -m pip install --index-url https://test.pypi.org/simple/ example_pkg

   Note
   If you used a different package name in the preview step, replace example_pkg in the command above
   with your package name.

   pip should install the package from Test PyPI and the output should look something like this:
Collecting example_pkg
  Downloading https://test-files.pythonhosted.org/packages/.../example_pkg-0.0.1-py3-none-any.whl
Installing collected packages: example-pkg
Successfully installed example-pkg-0.0.1

   You can test that it was installed correctly by importing the module and referencing the name
   property you put in __init__.py earlier.

   Run the Python interpreter (make sure you're still in your virtualenv):
python

   And then import the module and print out the name property. This should be the same regardless of
   what you name you gave your distribution package in setup.py because your import package is
   example_pkg.
>>> import example_pkg
>>> example_pkg.name
'example_pkg'

Next steps
   Congratulations, you've packaged and distributed a Python project!

   Keep in mind that this tutorial showed you how to upload your package to Test PyPI and Test PyPI is
   ephemeral. It's not unusual for packages and accounts to be deleted occasionally. If you want to
   upload your package to the real Python Package Index you can do it by registering an account on
   https://pypi.org and following the same instructions, however, use twine upload dist/* to upload
   your package and enter your credentials for the account you registered on the real PyPI. You can
   install your package from the real PyPI using pip install your-package.

   At this point if you want to read more on packaging Python libraries here are some things you can do:
     * Read more about using setuptools to package libraries in Packaging and distributing
       projects.
     * Read about Packaging binary extensions.
     * Consider alternatives to setuptools such as flit, hatch, and poetry.
