filename: pipenv_python-devs-should-use_20180301.txt
https://opensource.com/article/18/2/why-python-devs-should-use-pipenv

Why Python devs should use Pipenv

Only a year old, Pipenv has become the official Python-recommended resource for managing package
dependencies.
28 Feb 2018

   Pipenv, the "Python Development Workflow for Humans" created by Kenneth Reitz a little more than a
   year ago, has become the [https://packaging.python.org/tutorials/managing-dependencies/#managing-dependencies]
   official Python-recommended resource for managing package dependencies.
   But there is still confusion about what problems it solves and how it's more useful than the standard
   workflow using pip and a requirements.txt file. In this month's Python column, we'll fill in the
   gaps.

A brief history of Python package installation

   To understand the problems that Pipenv solves, it's useful to show how Python package management has
   evolved.

   Take yourself back to the first Python iteration. We had Python, but there was no clean way to
   install packages.

   Then came [http://peak.telecommunity.com/DevCenter/EasyInstall] Easy Install, a package that installs other
   Python packages with relative ease. But it came with a catch: it wasn't easy to uninstall packages that
   were no longer needed.

   Enter pip, which most Python users are familiar with. pip lets us install and uninstall
   packages. We could specify versions, run pip freeze > requirements.txt to output a list of installed
   packages to a text file, and use that same text file to install everything an app needed with pip
   install -r requirements.txt.

   But pip didn't include a way to isolate packages from each other. We might work on apps that use

   environments, which enabled us to create small, isolated environments for each app we worked on.
   We've seen many tools for managing virtual environments: virtualenv, venv, virtualenvwrapper, pyenv, 
   pyenv-virtualenv, pyenv-virtualenvwrapper, and even more. They all play well with pip and
   requirements.txt files.

The new kid: Pipenv
   Pipenv aims to solve several problems.

   First, the problem of needing the pip library for package installation, plus a library for creating a
   virtual environment, plus a library for managing virtual environments, plus all the commands
   associated with those libraries. That's a lot to manage. Pipenv ships with package management and
   virtual environment support, so you can use one tool to install, uninstall, track, and document your
   dependencies and to create, use, and organize your virtual environments. When you start a project
   with it, Pipenv will automatically create a virtual environment for that project if you aren't
   already using one.

   Pipenv accomplishes this dependency management by abandoning the requirements.txt norm and trading it

   project is automatically updated with the details of that installation, including version information
   and possibly the Git repository location, file path, and other information.

   Second, Pipenv wants to make it easier to manage complex interdependencies. Your app might depend on
   a specific version of a library, and that library might depend on a specific version of another
   library, and it's just dependencies and turtles all the way down. When two libraries your app uses
   have conflicting dependencies, your life can become hard. Pipenv wants to ease that pain by keeping
   track of a tree of your app's interdependencies in a file called Pipfile.lock. Pipfile.lock also
   verifies that the right versions of dependencies are used in production.

   Also, Pipenv is handy when multiple developers are working on a project. With a pip workflow, Casey
   might install a library and spend two days implementing a new feature using that library. When Casey
   commits the changes, they might forget to run pip freeze to update the requirements file. The next
   day, Jamie pulls down Casey's changes, and suddenly tests are failing. It takes time to realize that
   the problem is libraries missing from the requirements file that Jamie doesn't have installed in the
   virtual environment.

   Because Pipenv auto-documents dependencies as you install them, if Jamie and Casey had been using
   Pipenv, the Pipfile would have been automatically updated and included in Casey's commit. Jamie and
   Casey would have saved time and shipped their product faster.

   Finally, using Pipenv signals to other people who work on your project that it ships with a
   standardized way to install project dependencies and development and testing requirements. Using a
   workflow with pip and requirements files means that you may have one single requirements.txt file, or
   several requirements files for different environments. It might not be clear to your colleagues
   whether they should run dev.txt or local.txt when they're running the project on their laptops, for
   example. It can also create confusion when two similar requirements files get wildly out of sync with
   each other: Is local.txt out of date, or is it really supposed to be that different from dev.txt?
   Multiple requirements files require more context and documentation to enable others to install the
   dependencies properly and as expected. This workflow has the potential to confuse colleagues and
   increase your maintenance burden.

   Using Pipenv, which gives you Pipfile, lets you avoid these problems by managing dependencies for
   different environments for you. This command will install the main project dependencies:
pipenv install

   Adding the --dev tag will install the dev/testing requirements:
pipenv install --dev

   There are other benefits to using Pipenv: It has better security features, graphs your dependencies
   in an easier-to-understand format, seamlessly handles .env files, and can automatically handle
   differing dependencies for development versus production environments in one file. You can read more


Pipenv in action
   official Python packaging tutorial. To install Pipenv, use pip:
pip install pipenv

   To install packages to use in your project, change into the directory for your project. Then to
   install a package (we'll use Django as an example), run:
pipenv install django

   You will see some output that indicates that Pipenv is creating a Pipfile for your project.

   If you aren't already using a virtual environment, you will also see some output from Pipenv saying
   it is creating a virtual environment for you.
   Then, you will see the output you are used to seeing when you install packages.

   To generate a Pipfile.lock file, run:
pipenv lock

   You can also run Python scripts with Pipenv. To run a top-level Python script called hello.py, run:
pipenv run python hello.py

   And you will see your expected result in the console.

   To start a shell, run:
pipenv shell

   If you would like to convert a project that currently uses a requirements.txt file to use Pipenv,
   install Pipenv and run:
pipenv install requirements.txt

   This will create a Pipfile and install the specified requirements. Consider your project upgraded!


---
https://packaging.python.org/tutorials/installing-packages/#installing-packages

Installing Packages
   This section covers the basics of how to install Python packages.

   It’s important to note that the term “package” in this context is being used as a synonym for a
   distribution (i.e. a bundle of software to be installed), not to refer to the kind of package
   that you import in your Python source code (i.e. a container of modules). It is common in the Python
   community to refer to a distribution using the term “package”. Using the term “distribution” is
   often not preferred, because it can easily be confused with a Linux distribution, or another larger
   software distribution like Python itself.

Requirements for Installing Packages
   This section describes the steps to follow before installing other Python packages.

Ensure you can run Python from the command line
   Before you go any further, make sure you have Python and that the expected version is available from
   your command line. You can check this by running:
python --version

   You should get some output like Python 3.6.3. If you do not have Python, please install the latest
   3.x version from python.org or refer to the Installing Python section of the Hitchhiker’s
   Guide to Python.

   Note
   If you’re a newcomer and you get an error like this:
>>> python --version
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'python' is not defined

   It’s because this command and other suggested commands in this tutorial are intended to be run in a
   shell (also called a terminal or console). See the Python for Beginners getting started tutorial
   for an introduction to using your operating system’s shell and interacting with Python.

   If you’re using an enhanced shell like IPython or the Jupyter notebook, you can run system commands
   like those in this tutorial by prefacing them with a ! character:
In : !python --version
Python 3.6.3

   Note
   Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the
   system Python without creating a virtual environment first should replace the python command in this
   tutorial with python3 and the pip command with pip3 --user. Do not run any of the commands in this
   tutorial with sudo: if you get a permissions error, come back to the section on creating virtual
   environments, set one up, and then continue with the tutorial as written.

Ensure you can run pip from the command line
   Additionally, you’ll need to make sure you have pip available. You can check this by running:
pip --version

   If you installed Python from source, with an installer from python.org, or via Homebrew you
   should already have pip. If you’re on Linux and installed using your OS package manager, you may have
   to install pip separately, see Installing pip/setuptools/wheel with Linux Package Managers.

   If pip isn’t already installed, then first try to bootstrap it from the standard library:
python -m ensurepip --default-pip

   If that still doesn’t allow you to run pip:

     * Securely Download get-pip.py 
     * Run python get-pip.py.  This will install or upgrade pip. Additionally, it will install
       setuptools and wheel if they’re not installed already.
       Warning
       Be cautious if you’re using a Python install that’s managed by your operating system or another
       package manager. get-pip.py does not coordinate with those tools, and may leave your system in an
       inconsistent state. You can use python get-pip.py --prefix=/usr/local/ to install in /usr/local
       which is designed for locally-installed software.

Ensure pip, setuptools, and wheel are up to date
   While pip alone is sufficient to install from pre-built binary archives, up to date copies of the
   setuptools and wheel projects are useful to ensure you can also install from source archives:
python -m pip install --upgrade pip setuptools wheel

Optionally, create a virtual environment
   See section below for details, but here’s the basic venv  command to use on a typical
   Linux system:
python3 -m venv tutorial_env
source tutorial_env/bin/activate

   This will create a new virtual environment in the tutorial_env subdirectory, and configure the
   current shell to use it as the default python environment.

Creating Virtual Environments
   Python “Virtual Environments” allow Python packages to be installed in an isolated location for a
   particular application, rather than being installed globally.

   Imagine you have an application that needs version 1 of LibFoo, but another application requires
   version 2. How can you use both these applications? If you install everything into
   /usr/lib/python2.7/site-packages (or whatever your platform’s standard location is), it’s easy to end
   up in a situation where you unintentionally upgrade an application that shouldn’t be upgraded.

   Or more generally, what if you want to install an application and leave it be? If an application
   works, any change in its libraries or the versions of those libraries can break the application.

   Also, what if you can’t install packages into the global site-packages directory? For instance,
   on a shared host.

   In all these cases, virtual environments can help you. They have their own installation directories
   and they don’t share libraries with other virtual environments.

   Currently, there are two common tools for creating Python virtual environments:
     * venv is available by default in Python 3.3 and later, and installs pip and setuptools
       into created virtual environments in Python 3.4 and later.
     * virtualenv needs to be installed separately, but supports Python 2.6+ and Python 3.3+, and
       pip, setuptools and wheel are always installed into created virtual environments by
       default (regardless of Python version).

   The basic usage is like so:

   Using virtualenv:
virtualenv <DIR>
source <DIR>/bin/activate

   Using venv:
python3 -m venv <DIR>
source <DIR>/bin/activate

   For more information, see the virtualenv docs or the venv docs.

   Managing multiple virtual environments directly can become tedious, so the dependency management
   tutorial introduces a higher level tool, Pipenv, that automatically manages a separate virtual
   environment for each project and application that you work on.

Use pip for Installing
   pip is the recommended installer. Below, we’ll cover the most common usage scenarios. For more
   detail, see the pip docs, which includes a complete Reference Guide.

Installing from PyPI
   The most common usage of pip is to install from the Python Package Index using a
   requirement specifier. Generally speaking, a requirement specifier is composed of a project name
   followed by an optional version specifier. PEP 440 contains a full specification of the
   currently supported specifiers. Below are some examples.

   To install the latest version of “SomeProject”:
pip install 'SomeProject'

   To install a specific version:
pip install 'SomeProject==1.4'

   To install greater than or equal to one version and less than another:
pip install 'SomeProject>=1,<2'

   To install a version that’s “compatible” with a certain version: 
pip install 'SomeProject~=1.4.2'

   In this case, this means to install any version “==1.4.*” version that’s also “>=1.4.2”.

Source Distributions vs Wheels
   pip can install from either Source Distributions (sdist) or Wheels, but if both are
   present on PyPI, pip will prefer a compatible wheel.

   Wheels are a pre-built distribution format that provides faster installation compared to
   Source Distributions (sdist), especially when a project contains compiled extensions.

   If pip does not find a wheel to install, it will locally build a wheel and cache it for future
   installs, instead of rebuilding the source distribution in the future.

Upgrading packages
   Upgrade an already installed SomeProject to the latest from PyPI.
pip install --upgrade SomeProject

Installing to the User Site
   To install packages that are isolated to the current user, use the --user flag:
pip install --user SomeProject

   For more information see the User Installs section from the pip docs.

   Note that the --user flag has no effect when inside a virtual environment - all installation commands
   will affect the virtual environment.

Requirements files
   Install a list of requirements specified in a Requirements File.
pip install -r requirements.txt

Installing from VCS
   Install a project from VCS in “editable” mode. For a full breakdown of the syntax, see pip’s section
   on VCS Support.
pip install -e git+https://git.repo/some_pkg.git#egg=SomeProject          # from git
pip install -e hg+https://hg.repo/some_pkg#egg=SomeProject                # from mercurial
pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomeProject         # from svn
pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomeProject  # from a branch

Installing from other Indexes
   Install from an alternate index
pip install --index-url http://my.package.repo/simple/ SomeProject

   Search an additional index during install, in addition to PyPI
pip install --extra-index-url http://my.package.repo/simple SomeProject

Installing from a local src tree
   Installing from local src in Development Mode, i.e. in such a way that the project appears to be
   installed, but yet is still editable from the src tree.
pip install -e <path>

   You can also install normally from src
pip install <path>

Installing from local archives
   Install a particular source archive file.
pip install ./downloads/SomeProject-1.0.4.tar.gz

   Install from a local directory containing archives (and don’t check PyPI)
pip install --no-index --find-links=file:///local/dir/ SomeProject
pip install --no-index --find-links=/local/dir/ SomeProject
pip install --no-index --find-links=relative/dir/ SomeProject

Installing from other sources
   To install from other data sources (for example Amazon S3 storage) you can create a helper
   application that presents the data in a PEP 503 compliant index format, and use the
   --extra-index-url flag to direct pip to use that index.
./s3helper --port=7777
pip install --extra-index-url http://localhost:7777 SomeProject

Installing Prereleases
   Find pre-release and development versions, in addition to stable versions. By default, pip only finds
   stable versions.
pip install --pre SomeProject

Installing Setuptools “Extras”
   Install setuptools extras.
$ pip install SomePackage[PDF]
$ pip install SomePackage[PDF]==3.0
$ pip install -e .[PDF]==3.0  # editable project in current directory
     ________________________________________________________________________________________________

    “Secure” in this context means using a modern browser or a tool like curl that verifies SSL
   certificates when downloading from https URLs.
    Depending on your platform, this may require root or Administrator access. pip is
   currently considering changing this by making user installs the default behavior.
    Beginning with Python 3.4, venv (a stdlib alternative to virtualenv) will create
   virtualenv environments with pip pre-installed, thereby making it an equal alternative to
   virtualenv.
    The compatible release specifier was accepted in PEP 440 and support was released in
   setuptools v8.0 and pip v6.0

 
---
https://packaging.python.org/tutorials/managing-dependencies/ 

Managing Application Dependencies
   The package installation tutorial covered the basics of getting set up to install and update
   Python packages.

   However, running these commands interactively can get tedious even for your own personal projects,
   and things get even more difficult when trying to set up development environments automatically for
   projects with multiple contributors.

   This tutorial walks you through the use of Pipenv to manage dependencies for an application. It
   will show you how to install and use the necessary tools and make strong recommendations on best
   practices.

   Keep in mind that Python is used for a great many different purposes, and precisely how you want to
   manage your dependencies may change based on how you decide to publish your software. The guidance
   presented here is most directly applicable to the development and deployment of network services
   (including web applications), but is also very well suited to managing development and testing
   environments for any kind of project.

   Note
   This guide is written for Python 3, however, these instructions should also work on Python 2.7.

Installing Pipenv
   Pipenv is a dependency manager for Python projects. If you’re familiar with Node.js’ npm or
   Ruby’s bundler, it is similar in spirit to those tools. While pip alone is often sufficient
   for personal use, Pipenv is recommended for collaborative projects as it’s a higher-level tool that
   simplifies dependency management for common use cases.

   Use pip to install Pipenv:
pip install --user pipenv

   Note
   This does a user installation to prevent breaking any system-wide packages. If pipenv isn’t
   available in your shell after installation, you’ll need to add the user base’s binary directory
   to your PATH.

   On Linux and macOS you can find the user base binary directory by running python -m site --user-base
   and adding bin to the end. For example, this will typically print ~/.local (with ~ expanded to the
   absolute path to your home directory) so you’ll need to add ~/.local/bin to your PATH. You can set
   your PATH permanently by modifying ~/.profile.

   On Windows you can find the user base binary directory by running py -m site --user-site and
   replacing site-packages with Scripts. For example, this could return
   C:\Users\Username\AppData\Roaming\Python36\site-packages so you would need to set your PATH to
   include C:\Users\Username\AppData\Roaming\Python36\Scripts. You can set your user PATH permanently in
   the Control Panel. You may need to log out for the PATH changes to take effect.

Installing packages for your project
   Pipenv manages dependencies on a per-project basis. To install packages, change into your project’s
   directory (or just an empty directory for this tutorial) and run:
cd myproject
pipenv install requests

   Pipenv will install the excellent Requests library and create a Pipfile for you in your project’s
   directory. The Pipfile is used to track which dependencies your project needs in case you need to
   re-install them, such as when you share your project with others. You should get output similar to
   this (although the exact paths shown will vary):
Creating a Pipfile for this project...
Creating a virtualenv for this project...
Using base prefix '/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6'
New python executable in ~/.local/share/virtualenvs/tmp-agwWamBd/bin/python3.6
Also creating executable in ~/.local/share/virtualenvs/tmp-agwWamBd/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: ~/.local/share/virtualenvs/tmp-agwWamBd
Installing requests...
Collecting requests
  Using cached requests-2.18.4-py2.py3-none-any.whl
Collecting idna<2.7,>=2.5 (from requests)
  Using cached idna-2.6-py2.py3-none-any.whl
Collecting urllib3<1.23,>=1.21.1 (from requests)
  Using cached urllib3-1.22-py2.py3-none-any.whl
Collecting chardet<3.1.0,>=3.0.2 (from requests)
  Using cached chardet-3.0.4-py2.py3-none-any.whl
Collecting certifi>=2017.4.17 (from requests)
  Using cached certifi-2017.7.27.1-py2.py3-none-any.whl
Installing collected packages: idna, urllib3, chardet, certifi, requests
Successfully installed certifi-2017.7.27.1 chardet-3.0.4 idna-2.6 requests-2.18.4 urllib3-1.22

Adding requests to Pipfile's [packages]...
P.S. You have excellent taste!

   Warning
   Due to an open issue with pipenv, it’s not currently reliable to use pipenv to create
   environments for different Python versions (as environment marker conditions may not be processed
   correctly). The interpreter version you use in your project should be the same as the interpreter
   version used to install pipenv. When testing against multiple versions with tox, install pipenv into
   each test environment, as described here.

Using installed packages
   Now that Requests is installed you can create a simple main.py file to use it:
import requests

response = requests.get('https://httpbin.org/ip')

print('Your IP is {0}'.format(response.json()['origin']))

   Then you can run this script using pipenv run:
pipenv run python main.py

   You should get output similar to this:
Your IP is 8.8.8.8

   Using pipenv run ensures that your installed packages are available to your script. It’s also
   possible to spawn a new shell that ensures all commands have access to your installed packages with
   pipenv shell.

Next steps
   Congratulations, you now know how to effectively manage dependencies and development environments on
   a collaborative Python project!

   If you find this particular approach isn’t working well for you or your use case, you may want to
   explore these other approaches:
     * pip-tools
     * hatch

   If you’re interesting in creating and distributing your own Python packages, see the tutorial on
   packaging and distributing packages.
