filename: ptn_howto-write-package-and-distribute-a-library_20190710.txt
https://code.tutsplus.com/tutorials/how-to-write-package-and-distribute-a-library-in-python--cms-28693

How to Write, Package and Distribute a Library in Python

   Python is a great programming language, but packaging is one of its weakest points. It is a
   well-known fact in the community. Installing, importing, using and creating packages has improved a
   lot over the years, but it's still not on par with newer languages like Go and Rust that learned a
   lot from the struggles of Python and other mature languages.

   In this tutorial, you'll learn everything you need to know about writing, packaging and distributing
   your own packages.

How to Write a Python Library
   A Python library is a coherent collection of Python modules that is organized as a Python package. In
   general, that means that all modules live under the same directory and that this directory is on the
   Python search path.

   Let's quickly write a little Python 3 package and illustrate all these concepts.

The Pathology Package
   Python 3 has an excellent Path object, which is a huge improvement over Python 2's awkward os.path
   module. But it's missing one crucial capability-finding the path of the current script. This is very
   important when you want to locate access files relative to the current script.

   In many cases, the script can be installed in any location, so you can't use absolute paths, and the
   working directory can be set to any value, so you can't use a relative path. If you want to access a
   file in a sub-directory or parent directory, you must be able to figure out the current script
   directory.

   Here is how you do it in Python:
import pathlib

script_dir = pathlib.Path(__file__).parent.resolve()

   To access a file called 'file.txt' in a 'data' sub-directory of the current script's directory, you
   can use the following code: print(open(str(script_dir/'data/file.txt').read())

   With the [193]pathology package, you have a built-in script_dir method, and you use it like this:
from pathology.Path import script_dir

print(open(str(script_dir()/'data/file.txt').read())


   Yep, it's a mouthful. The pathology package is very simple. It derives its own Path class from
   pathlib's Path and adds a static script_dir() that always returns the path of the calling script.

   Here is the implementation:
import pathlib
import inspect

class Path(type(pathlib.Path())):
    @staticmethod
    def script_dir():
        print(inspect.stack()[1].filename)
        p = pathlib.Path(inspect.stack()[1].filename)
        return p.parent.resolve()

   Due to the cross-platform implementation of pathlib.Path, you can derive directly from it and must
   derive from a specific sub-class (PosixPath or WindowsPath). The script dir resolution uses the
   inspect module to find the caller and then its filename attribute.

Testing the Pathology Package

   Whenever you write something that is more than a throwaway script, you should test it. The pathology
   module is no exception. Here are the tests using the standard unit test framework:
import os
import shutil
from unittest import TestCase
from pathology.path import Path


class PathTest(TestCase):
    def test_script_dir(self):
        expected = os.path.abspath(os.path.dirname(__file__))
        actual = str(Path.script_dir())
        self.assertEqual(expected, actual)

    def test_file_access(self):
        script_dir = os.path.abspath(os.path.dirname(__file__))
        subdir = os.path.join(script_dir, 'test_data')
        if Path(subdir).is_dir():
            shutil.rmtree(subdir)
        os.makedirs(subdir)
        file_path = str(Path(subdir)/'file.txt')
        content = '123'
        open(file_path, 'w').write(content)
        test_path = Path.script_dir()/subdir/'file.txt'
        actual = open(str(test_path)).read()

        self.assertEqual(content, actual)

The Python Path
   Python packages must be installed somewhere on the Python search path to be imported by Python
   modules. The Python search path is a list of directories and is always available in sys.path. Here is
   my current sys.path:
>>> print('\n'.join(sys.path))

/Users/gigi.sayfan/miniconda3/envs/py3/lib/python36.zip
/Users/gigi.sayfan/miniconda3/envs/py3/lib/python3.6
/Users/gigi.sayfan/miniconda3/envs/py3/lib/python3.6/lib-dynload
/Users/gigi.sayfan/miniconda3/envs/py3/lib/python3.6/site-packages
/Users/gigi.sayfan/miniconda3/envs/py3/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg

   Note that the first empty line of the output represents the current directory, so you can import
   modules from the current working directory, whatever it is. You can directly add or remove
   directories to/from sys.path.

   You can also define a PYTHONPATH environment variable, and there a few other ways to control it. The
   standard site-packages is included by default, and this is where packages you install using via pip
   go.

How to Package a Python Library
   Now that we have our code and tests, let's package it all into a proper library. Python provides an
   easy way via the setup module. You create a file called setup.py in your package's root directory.
   Then, to create a source distribution, you run: python setup.py sdist

   To create a binary distribution called a wheel, you run: python setup.py bdist_wheel

   Here is the setup.py file of the pathology package:
from setuptools import setup, find_packages

setup(name='pathology',
      version='0.1',
      url='https://github.com/the-gigi/pathology',
      license='MIT',
      author='Gigi Sayfan',
      author_email='the.gigi@gmail.com',
      description='Add static script_dir() method to Path',
      packages=find_packages(exclude=['tests']),
      long_description=open('README.md').read(),
      zip_safe=False)

   It includes a lot of metadata in addition to the 'packages' item that uses the find_packages()
   function imported from setuptools to find sub-packages.

   Let's build a source distribution:
$ python setup.py sdist
running sdist
running egg_info
creating pathology.egg-info
writing pathology.egg-info/PKG-INFO
writing dependency_links to pathology.egg-info/dependency_links.txt
writing top-level names to pathology.egg-info/top_level.txt
writing manifest file 'pathology.egg-info/SOURCES.txt'
reading manifest file 'pathology.egg-info/SOURCES.txt'
writing manifest file 'pathology.egg-info/SOURCES.txt'
warning: sdist: standard file not found: should have one of README, README.rst, README.txt

running check
creating pathology-0.1
creating pathology-0.1/pathology
creating pathology-0.1/pathology.egg-info
copying files to pathology-0.1...
copying setup.py -> pathology-0.1
copying pathology/__init__.py -> pathology-0.1/pathology
copying pathology/path.py -> pathology-0.1/pathology
copying pathology.egg-info/PKG-INFO -> pathology-0.1/pathology.egg-info
copying pathology.egg-info/SOURCES.txt -> pathology-0.1/pathology.egg-info
copying pathology.egg-info/dependency_links.txt -> pathology-0.1/pathology.egg-info
copying pathology.egg-info/not-zip-safe -> pathology-0.1/pathology.egg-info
copying pathology.egg-info/top_level.txt -> pathology-0.1/pathology.egg-info
Writing pathology-0.1/setup.cfg
creating dist
Creating tar archive
removing 'pathology-0.1' (and everything under it)

   The warning is because I used a non-standard README.md file. It's safe to ignore. The result is a
   tar-gzipped file under the dist directory:
$ ls -la dist
total 8
drwxr-xr-x   3 gigi.sayfan  gigi.sayfan   102 Apr 18 21:20 .
drwxr-xr-x  12 gigi.sayfan  gigi.sayfan   408 Apr 18 21:20 ..
-rw-r--r--   1 gigi.sayfan  gigi.sayfan  1223 Apr 18 21:20 pathology-0.1.tar.gz

   And here is a binary distribution:
$ python setup.py bdist_wheel
running bdist_wheel
running build
running build_py
creating build
creating build/lib
creating build/lib/pathology
copying pathology/__init__.py -> build/lib/pathology
copying pathology/path.py -> build/lib/pathology
installing to build/bdist.macosx-10.7-x86_64/wheel
running install
running install_lib
creating build/bdist.macosx-10.7-x86_64
creating build/bdist.macosx-10.7-x86_64/wheel
creating build/bdist.macosx-10.7-x86_64/wheel/pathology
copying build/lib/pathology/__init__.py -> build/bdist.macosx-10.7-x86_64/wheel/pathology
copying build/lib/pathology/path.py -> build/bdist.macosx-10.7-x86_64/wheel/pathology
running install_egg_info
running egg_info
writing pathology.egg-info/PKG-INFO
writing dependency_links to pathology.egg-info/dependency_links.txt
writing top-level names to pathology.egg-info/top_level.txt
reading manifest file 'pathology.egg-info/SOURCES.txt'
writing manifest file 'pathology.egg-info/SOURCES.txt'
Copying pathology.egg-info to build/bdist.macosx-10.7-x86_64/wheel/pathology-0.1-py3.6.egg-info
running install_scripts
creating build/bdist.macosx-10.7-x86_64/wheel/pathology-0.1.dist-info/WHEEL

   The pathology package contains only pure Python modules, so a universal package can be built. If your
   package includes C extensions, you'll have to build a separate wheel for each platform:
$ ls -la dist
total 16
drwxr-xr-x   4 gigi.sayfan  gigi.sayfan   136 Apr 18 21:24 .
drwxr-xr-x  13 gigi.sayfan  gigi.sayfan   442 Apr 18 21:24 ..
-rw-r--r--   1 gigi.sayfan  gigi.sayfan  2695 Apr 18 21:24 pathology-0.1-py3-none-any.whl
-rw-r--r--   1 gigi.sayfan  gigi.sayfan  1223 Apr 18 21:20 pathology-0.1.tar.gz

   For a deeper dive into the topic of packaging Python libraries, check out [194]How to Write Your Own
   Python Packages.

How to Distribute a Python Package
   Python has a central package repository called PyPI (Python Packages Index). When you install a
   Python package using pip, it will download the package from PyPI (unless you specify a different
   repository). To distribute our pathology package, we need to upload it to PyPI and provide some extra
   metadata PyPI requires. The steps are:
     * Create an account on PyPI (just once).
     * Register your package.
     * Upload your package.

Create an Account
   You can create an account on the [195]PyPI website. Then create a .pypirc file in your home
   directory:
[distutils]
index-servers=pypi

[pypi]
repository = https://pypi.python.org/pypi
username = the_gigi

   For testing purposes, you can add a "pypitest" index server to your .pypirc file:
[distutils]
index-servers=
    pypi
    pypitest

[pypitest]
repository = https://testpypi.python.org/pypi
username = the_gigi

[pypi]
repository = https://pypi.python.org/pypi
username = the_gigi

Register Your Package
   If this is the first release of your package, you need to register it with PyPI. Use the register
   command of setup.py. It will ask you for your password. Note that I point it to the test repository
   here:
$ python setup.py register -r pypitest
running register
running egg_info
writing pathology.egg-info/PKG-INFO
writing dependency_links to pathology.egg-info/dependency_links.txt
writing top-level names to pathology.egg-info/top_level.txt
reading manifest file 'pathology.egg-info/SOURCES.txt'
writing manifest file 'pathology.egg-info/SOURCES.txt'
running check
Password:
Registering pathology to https://testpypi.python.org/pypi
Server response (200): OK

Upload Your Package
   Now that the package is registered, we can upload it. I recommend using [196]twine, which is more
   secure. Install it as usual using pip install twine. Then upload your package using twine and provide
   your password (redacted below):
$ twine upload -r pypitest -p <redacted> dist/*
Uploading distributions to https://testpypi.python.org/pypi
Uploading pathology-0.1-py3-none-any.whl
[================================] 5679/5679 - 00:00:02
Uploading pathology-0.1.tar.gz
[================================] 4185/4185 - 00:00:01

   For a deeper dive into the topic of distributing your packages, check out [197]How to Share Your
   Python Packages.

Conclusion
   In this tutorial, we went through the fully fledged process of writing a Python library, packaging
   it, and distributing it through PyPI. At this point, you should have all the tools to write and share
   your libraries with the world.


---
