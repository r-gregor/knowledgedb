filename: python_howto-send-email_multif_20160202.txt
http://naelshiab.com/tutorial-send-email-python/

Tutorial: How to send
an email with Python

   January 26, 2015

   gmail
   To code a script to send emails could be very useful for reporters. We could use it to create
   personalized alerts about any topic we want or to monitor our running scripts at a distance.

   Note: To send yourself an email with a Python script, you need minimal knowledge of programming. I
   made [14]this tutorial for people willing to learn. Once done with the tutorial, you should be able
   to use the code I wrote below!

#I Personalized alerts
   By sending an email to yourself with the conditions of your choice, as coded in your script, you can
   create completely customized alerts.

   You want to closely monitor an elected representative? Code a script that will check his Twitter and
   Facebook accounts every 10 minutes. If something new has been posted, an email will be automatically
   sent to you!

   Your program could check three times a day all the transcript files of all the meetings he is
   supposed to attend. He said something? Tada! Your script could copy-paste his interventions in an
   email that you’ll receive a few seconds later!

   Isn’t that great? Google Alerts are a joke compared to this!

#II Monitor you scripts at a distance
   Another interesting use: to indicate when your scripts are done or when they stopped for an
   unexpected reason.

   Some scripts can run for a very long time… If you are a web scraping addict, you know what I am
   talking about. If there is a lot of data to extract, your scripts will give your grey hair!

   I remember a scraper I coded for one of my class, for my master’s degree. The goal was to extract all
   the data from the pro-active disclosure section of [15]Public Works and Government Services Canada.
   Thousands of contracts, all on different webpages…! On top of that, I was regularly disconnected from
   their server. It took me days!

   But when you are a reporter always running here and there, it’s impossible for you to stay close to
   your computer and check your beloved scripts! Hopefully, email updates could avoid you a lot of
   stress.

#III For a basic email

   [ EDIT: Gmail made some security change change recently. You now have [16]to allow “less secure apps”
   on your account. Otherwise, you won’t be able to connect to it with your python script. ]

   There’s a native library in Python to send emails: [17]smtplib. No need to install external
   librairies!

   To send a basic email (without subject line), with a Gmail address, the code is fairly simple:

<code>
   import smtplib

   server = smtplib.SMTP('smtp.gmail.com', 587)
   server.starttls()
   server.login("YOUR EMAIL ADDRESS", "YOUR PASSWORD")

   msg = "YOUR MESSAGE!"
   server.sendmail("YOUR EMAIL ADDRESS", "THE EMAIL ADDRESS TO SEND TO", msg)
   server.quit()
</code>

   On line 2, it’s the parameters for the Gmail server. First, the server location (or its ip address),
   then the port to use. If you have an email address from another service, like Yahoo for example, you
   have to find the corresponding information.

   On line 4, there’s a security function, needed to connect to the Gmail server. It will protect your
   password.

   Dont forget to indicate your email address and your password on line 5.

   The msg variable will contain your message and the last ligne will send it!

#IV For a more elaborate email
   [ EDIT: Don’t forget [18]to allow “less secure apps” on your Gmail account. ]

   If you want to automatically send an email to the police for an interview each time there’s a press
   release regarding drug trafficking, you need to send more professional looking emails!

   With the code below, you will send a clean email, with a sender, a receiver and a subject line.

   To do this, you need two more modules: [19]email.MIMEMultipart et email.MIMEText. They are part of
   the basic Python librairies. No need to install them.

<code>
   import smtplib
   from email.MIMEMultipart import MIMEMultipart
   from email.MIMEText import MIMEText


   fromaddr = "YOUR ADDRESS"
   toaddr = "ADDRESS YOU WANT TO SEND TO"
   msg = MIMEMultipart()
   msg['From'] = fromaddr
   msg['To'] = toaddr
   msg['Subject'] = "SUBJECT OF THE MAIL"

   body = "YOUR MESSAGE HERE"
   msg.attach(MIMEText(body, 'plain'))

   server = smtplib.SMTP('smtp.gmail.com', 587)
   server.starttls()
   server.login(fromaddr, "YOUR PASSWORD")
   text = msg.as_string()
   server.sendmail(fromaddr, toaddr, text)
   server.quit()
</code>

   Again, don’t forget to change the following lines:
     * Line 6 with your email address
     * Line 6 with the receiver’s email address
     * Line 11 with the email subject
     * Line 13 with your message
     * Line 18 with your password

#V To send an email with attachment
   [ EDIT: [20]Allow “less secure apps” on your Gmail account before running your script. ]

   To have files attached to an email requires a more complicated code. While doing some research, I
   noticed almost everybody has a slightly different method to do this (my sources are all at the end of
   this article).

   I tried to keep the code as simple as possible. However, many modules are still needed, as you can
   see below.

   In summary, the essential step is to convert the file into a [21]Base64 before sending it. My code
   works for text files, pdf files, images, audio files and video files!

 <code>
   import smtplib
   from email.MIMEMultipart import MIMEMultipart
   from email.MIMEText import MIMEText
   from email.MIMEBase import MIMEBase
   from email import encoders

   fromaddr = "YOUR EMAIL"
   toaddr = "EMAIL ADDRESS YOU SEND TO"

   msg = MIMEMultipart()

   msg['From'] = fromaddr
   msg['To'] = toaddr
   msg['Subject'] = "SUBJECT OF THE EMAIL"

   body = "TEXT YOU WANT TO SEND"

   msg.attach(MIMEText(body, 'plain'))

   filename = "NAME OF THE FILE WITH ITS EXTENSION"
   attachment = open("PATH OF THE FILE", "rb")

   part = MIMEBase('application', 'octet-stream')
   part.set_payload((attachment).read())
   encoders.encode_base64(part)
   part.add_header('Content-Disposition', "attachment; filename= %s" % filename)

   msg.attach(part)

   server = smtplib.SMTP('smtp.gmail.com', 587)
   server.starttls()
   server.login(fromaddr, "YOUR PASSWORD")
   text = msg.as_string()
   server.sendmail(fromaddr, toaddr, text)
   server.quit()
</code>

   On top of all the authentification needed, this time you also need to indicate:
     * The name of the file on line 21,
     * The path to the file on line 22.

   It’s done! You have everything you need to add email sending to your scripts!

   How did I learn to send emails with Python? By reading all  of these really good articles:

   – https://docs.python.org/2/library/smtplib.html
   – http://www.tutorialspoint.com/python/python_sending_email.htm
   – http://en.wikibooks.org/wiki/Python_Programming/Email
   – http://www.pythonforbeginners.com/code-snippets-source-code/using-python-to-send-email
   – https://docs.python.org/2/library/email.mime.html
   – https://docs.python.org/2/library/email-examples.html
   – https://docs.python.org/2/library/email.html
   – http://www.blog.pythonlibrary.org/2013/06/26/python-102-how-to-send-an-email-using-smtplib-email/
   – http://www.smipple.net/snippet/Jimmyromanticde/gmail.py



---
https://docs.python.org/2/library/email.mime.html

18.1.4. email.mime: Creating email and MIME objects from scratch
Ordinarily, you get a message object structure by passing a file or some text to a parser, which parses
the text and returns the root message object. However you can also build a complete message structure
from scratch, or even individual Message objects by hand. In fact, you can also take an existing
structure and add new Message objects, move them around, etc. This makes a very convenient interface
for slicing-and-dicing MIME messages.

You can create a new object structure by creating Message instances, adding attachments and all the
appropriate headers manually. For MIME messages though, the email package provides some convenient
subclasses to make things easier.

Here are the classes:

class email.mime.base.MIMEBase(_maintype, _subtype, **_params)
Module: email.mime.base

This is the base class for all the MIME-specific subclasses of Message. Ordinarily you won’t create
instances specifically of MIMEBase, although you could. MIMEBase is provided primarily as a convenient
base class for more specific MIME-aware subclasses.

_maintype is the Content-Type major type (e.g. text or image), and _subtype is the Content-Type
minor type (e.g. plain or gif). _params is a parameter key/value dictionary and is passed directly to
Message.add_header.

The MIMEBase class always adds a Content-Type header (based on _maintype, _subtype, and _params), and
a MIME-Version header (always set to 1.0).

class email.mime.nonmultipart.MIMENonMultipart
Module: email.mime.nonmultipart

A subclass of MIMEBase, this is an intermediate base class for MIME messages that are not multipart. The
primary purpose of this class is to prevent the use of the attach() method, which only makes sense for
multipart messages. If attach() is called, a MultipartConversionError exception is raised.

New in version 2.2.2.

class email.mime.multipart.MIMEMultipart([_subtype[, boundary[, _subparts[, _params]]]])
Module: email.mime.multipart

A subclass of MIMEBase, this is an intermediate base class for MIME messages that are multipart. Optional
_subtype defaults to mixed, but can be used to specify the subtype of the message. A Content-Type header
of multipart/_subtype will be added to the message object. A MIME-Version header will also be added.

Optional boundary is the multipart boundary string. When None (the default), the boundary is calculated
when needed (for example, when the message is serialized).

_subparts is a sequence of initial subparts for the payload. It must be possible to convert this sequence
to a list. You can always attach new subparts to the message by using the Message.attach method.

Additional parameters for the Content-Type header are taken from the keyword arguments, or passed into
the _params argument, which is a keyword dictionary.

New in version 2.2.2.

class email.mime.application.MIMEApplication(_data[, _subtype[, _encoder[, **_params]]])
Module: email.mime.application

A subclass of MIMENonMultipart, the MIMEApplication class is used to represent MIME message objects of
major type application. _data is a string containing the raw byte data. Optional _subtype specifies the
MIME subtype and defaults to octet-stream.

Optional _encoder is a callable (i.e. function) which will perform the actual encoding of the data
for transport. This callable takes one argument, which is the MIMEApplication instance. It should
use get_payload() and set_payload() to change the payload to encoded form. It should also add any
Content-Transfer-Encoding or other headers to the message object as necessary. The default encoding is
base64. See the email.encoders module for a list of the built-in encoders.

_params are passed straight through to the base class constructor.

New in version 2.5.

class email.mime.audio.MIMEAudio(_audiodata[, _subtype[, _encoder[, **_params]]])
Module: email.mime.audio

A subclass of MIMENonMultipart, the MIMEAudio class is used to create MIME message objects of major
type audio. _audiodata is a string containing the raw audio data. If this data can be decoded by the
standard Python module sndhdr, then the subtype will be automatically included in the Content-Type
header. Otherwise you can explicitly specify the audio subtype via the _subtype parameter. If the minor
type could not be guessed and _subtype was not given, then TypeError is raised.

Optional _encoder is a callable (i.e. function) which will perform the actual encoding of the audio data for
transport. This callable takes one argument, which is the MIMEAudio instance. It should use get_payload()
and set_payload() to change the payload to encoded form. It should also add any Content-Transfer-Encoding
or other headers to the message object as necessary. The default encoding is base64. See the email.encoders
module for a list of the built-in encoders.

_params are passed straight through to the base class constructor.

class email.mime.image.MIMEImage(_imagedata[, _subtype[, _encoder[, **_params]]])
Module: email.mime.image

A subclass of MIMENonMultipart, the MIMEImage class is used to create MIME message objects of major
type image. _imagedata is a string containing the raw image data. If this data can be decoded by the
standard Python module imghdr, then the subtype will be automatically included in the Content-Type
header. Otherwise you can explicitly specify the image subtype via the _subtype parameter. If the minor
type could not be guessed and _subtype was not given, then TypeError is raised.

Optional _encoder is a callable (i.e. function) which will perform the actual encoding of the image data for
transport. This callable takes one argument, which is the MIMEImage instance. It should use get_payload()
and set_payload() to change the payload to encoded form. It should also add any Content-Transfer-Encoding
or other headers to the message object as necessary. The default encoding is base64. See the email.encoders
module for a list of the built-in encoders.

_params are passed straight through to the MIMEBase constructor.

class email.mime.message.MIMEMessage(_msg[, _subtype])
Module: email.mime.message

A subclass of MIMENonMultipart, the MIMEMessage class is used to create MIME objects of main type
message. _msg is used as the payload, and must be an instance of class Message (or a subclass thereof),
otherwise a TypeError is raised.

Optional _subtype sets the subtype of the message; it defaults to rfc822.

class email.mime.text.MIMEText(_text[, _subtype[, _charset]])
Module: email.mime.text

A subclass of MIMENonMultipart, the MIMEText class is used to create MIME objects of major type text. _text
is the string for the payload. _subtype is the minor type and defaults to plain. _charset is the character
set of the text and is passed as a parameter to the MIMENonMultipart constructor; it defaults to us-ascii. If
_text is unicode, it is encoded using the output_charset of _charset, otherwise it is used as-is.

Changed in version 2.4: The previously deprecated _encoding argument has been removed. Content Transfer
Encoding now happens implicitly based on the _charset argument.

Unless the _charset parameter is explicitly set to None, the MIMEText object created will have both a
Content-Type header with a charset parameter, and a Content-Transfer-Endcoding header. This means that
a subsequent set_payload call will not result in an encoded payload, even if a charset is passed in
the set_payload command. You can “reset” this behavior by deleting the Content-Transfer-Encoding
header, after which a set_payload call will automatically encode the new payload (and add a new
Content-Transfer-Encoding header).



---
https://en.wikipedia.org/wiki/MIME

MIME
From Wikipedia, the free encyclopedia
This article is about an extension of email protocol. For the World Wide Web content type system,
see Media type. For mime as an art form, see Mime artist. For the British engineering society, see
Institution of Mechanical Engineers.
Internet protocol suite
Application layer
BGP DHCP DNS FTP HTTP IMAP LDAP MGCP NNTP NTP POP ONC/RPC RTP RTSP RIP SIP SMTP SNMP SSH Telnet TLS/SSL
XMPP more...
Transport layer
TCP UDP DCCP SCTP RSVP more...
Internet layer
IP IPv4 IPv6 ICMP ICMPv6 ECN IGMP IPsec more...
Link layer
ARP NDP OSPF Tunnels L2TP PPP MAC Ethernet DSL ISDN FDDI more...
v t e
Multipurpose Internet Mail Extensions (MIME) is an Internet standard that extends the format of email
to support:

Text in character sets other than ASCII
Non-text attachments: audio, video, images, application programs etc.
Message bodies with multiple parts
Header information in non-ASCII character sets
Virtually all human-written Internet email and a fairly large proportion of automated email is transmitted
via SMTP in MIME format.[citation needed]

MIME is specified in six linked RFC memoranda: RFC 2045, RFC 2046, RFC 2047, RFC 4288, RFC 4289 and RFC
2049; with the integration with SMTP email specified in detail in RFC 1521 and RFC 1522.

Although MIME was designed mainly for SMTP, the content types defined by MIME standards are also of
importance outside of email, such as in communication protocols such as HTTP for the World Wide Web. Servers
insert the MIME header at the beginning of any Web transmission. Clients use this content type or media
type header to select an appropriate "player" application for the type of data the header indicates. Some
of these players are built into the Web client or browser (for example, almost all browsers come with GIF
and JPEG image players as well as the ability to handle HTML files); other players may need to be downloaded.

MIME headers[edit]

MIME-Version[edit]
The presence of this header indicates the message is MIME-formatted. The value is typically "1.0" so
this header appears as

MIME-Version: 1.0
According to MIME co-creator Nathaniel Borenstein, the intention was to allow MIME to change, to advance
to version 2.0 and so forth, but this decision led to the opposite outcome, making it nearly impossible
to create a new version of the standard.

"We did not adequately specify how to handle a future MIME version," Borenstein said. "So if you write
something that knows 1.0, what should you do if you encounter 2.0 or 1.1? I sort of thought it was
obvious but it turned out everyone implemented that in different ways. And the result is that it would
be just about impossible for the Internet to ever define a 2.0 or a 1.1."[1]

Content-Type[edit]
This header indicates the media type of the message content, consisting of a type and subtype, for example

Content-Type: text/plain
Through the use of the multipart type, MIME allows mail messages to have parts arranged in a tree
structure where the leaf nodes are any non-multipart content type and the non-leaf nodes are any of a
variety of multipart types. This mechanism supports:

simple text messages using text/plain (the default value for "Content-Type: ")
text plus attachments (multipart/mixed with a text/plain part and other non-text parts). A MIME message
including an attached file generally indicates the file's original name with the "Content-disposition:"
header, so the type of file is indicated both by the MIME content-type and the (usually OS-specific)
filename extension
reply with original attached (multipart/mixed with a text/plain part and the original message as a
message/rfc822 part)
alternative content, such as a message sent in both plain text and another format such as HTML
(multipart/alternative with the same content in text/plain and text/html forms)
image, audio, video and application (for example, image/jpeg, audio/mp3, video/mp4, and application/msword
and so on) many other message constructs

Content-Disposition[edit]
The original MIME specifications only described the structure of mail messages. They did not address the
issue of presentation styles. The content-disposition header field was added in RFC 2183 to specify the
presentation style. A MIME part can have:

an inline content-disposition, which means that it should be automatically displayed when the message
is displayed, or
an attachment content-disposition, in which case it is not displayed automatically and requires some
form of action from the user to open it.
In addition to the presentation style, the content-disposition header also provides fields for specifying
the name of the file, the creation date and modification date, which can be used by the reader's mail
user agent to store the attachment.

The following example is taken from RFC 2183, where the header is defined

Content-Disposition: attachment; filename=genome.jpeg;
  modification-date="Wed, 12 Feb 1997 16:29:51 -0500";
The filename may be encoded as defined by RFC 2231.

As of 2010, a good majority of mail user agents do not follow this prescription fully. The widely used
Mozilla Thunderbird mail client makes its own decisions about which MIME parts should be automatically
displayed, ignoring the content-disposition headers in the messages. Thunderbird prior to version 3 also
sends out newly composed messages with inline content-disposition for all MIME parts. Most users are
unaware of how to set the content-disposition to attachment.[2] Many mail user agents also send messages
with the file name in the name parameter of the content-type header instead of the filename parameter
of the content-disposition header. This practice is discouraged – the file name should be specified
either through just the filename parameter, or through both the filename and the name parameters.[3]

In HTTP, the Content-Disposition: attachment response header is usually used to hint to the client to
present the response body as a downloadable file. Typically, when receiving such a response, a Web browser
will prompt the user to save its content as a file instead of displaying it as a page in a browser window,
with the filename parameter suggesting the default file name (this is useful for dynamically generated
content, where deriving the filename from the URL may be meaningless or confusing to the user).

Content-Transfer-Encoding[edit]
In June 1992, MIME (RFC 1341, since made obsolete by RFC 2045) defined a set of methods for representing
binary data in formats other than ASCII text format. The content-transfer-encoding: MIME header has
2-sided significance:

It indicates whether or not a binary-to-text encoding scheme has been used on top of the original encoding
as specified within the Content-Type header:
If such a binary-to-text encoding method has been used, it states which one.
If not, it provides a descriptive label for the format of content, with respect to the presence of 8-bit
or binary content.
The RFC and the IANA's list of transfer encodings define the values shown below, which are not case
sensitive. Note that '7bit', '8bit', and 'binary' mean that no binary-to-text encoding on top of the
original encoding was used. In these cases, the header is actually redundant for the email client to decode
the message body, but it may still be useful as an indicator of what type of object is being sent. Values
'quoted-printable' and 'base64' tell the email client that a binary-to-text encoding scheme was used and
that appropriate initial decoding is necessary before the message can be read with its original encoding
(e.g. UTF-8).

Suitable for use with normal SMTP:
7bit – up to 998 octets per line of the code range 1..127 with CR and LF (codes 13 and 10 respectively)
only allowed to appear as part of a CRLF line ending. This is the default value.
quoted-printable – used to encode arbitrary octet sequences into a form that satisfies the rules of
7bit. Designed to be efficient and mostly human readable when used for text data consisting primarily
of US-ASCII characters but also containing a small proportion of bytes with values outside that range.
base64 – used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. Designed
to be efficient for non-text 8 bit and binary data. Sometimes used for text data that frequently uses
non-US-ASCII characters.
Suitable for use with SMTP servers that support the 8BITMIME SMTP extension (RFC 6152):
8bit – up to 998 octets per line with CR and LF (codes 13 and 10 respectively) only allowed to appear
as part of a CRLF line ending.
Suitable for use with SMTP servers that support the BINARYMIME SMTP extension (RFC 3030):
binary – any sequence of octets.
There is no encoding defined which is explicitly designed for sending arbitrary binary data through SMTP
transports with the 8BITMIME extension. Thus, if BINARYMIME isn't supported, base64 or quoted-printable
(with their associated inefficiency) are sometimes still useful. This restriction does not apply to
other uses of MIME such as Web Services with MIME attachments or MTOM.

Encoded-Word[edit]
Since RFC 2822, conforming message header names and values should be ASCII characters; values that contain
non-ASCII data should use the MIME encoded-word syntax (RFC 2047) instead of a literal string. This
syntax uses a string of ASCII characters indicating both the original character encoding (the "charset")
and the content-transfer-encoding used to map the bytes of the charset into ASCII characters.

The form is: "=?charset?encoding?encoded text?=".

charset may be any character set registered with IANA. Typically it would be the same charset as the
message body.
encoding can be either "Q" denoting Q-encoding that is similar to the quoted-printable encoding, or "B"
denoting base64 encoding.
encoded text is the Q-encoded or base64-encoded text.
An encoded-word may not be more than 75 characters long, including charset, encoding, encoded text, and
delimiters. If it is desirable to encode more text than will fit in an encoded-word of 75 characters,
multiple encoded-words (separated by CRLF SPACE) may be used.
Difference between Q-encoding and quoted-printable[edit]
The ASCII codes for the question mark ("?") and equals sign ("=") may not be represented directly as
they are used to delimit the encoded-word. The ASCII code for space may not be represented directly
because it could cause older parsers to split up the encoded word undesirably. To make the encoding
smaller and easier to read the underscore is used to represent the ASCII code for space creating the
side effect that underscore cannot be represented directly. Use of encoded words in certain parts of
headers imposes further restrictions on which characters may be represented directly.

For example,

Subject: =?iso-8859-1?Q?=A1Hola,_se=F1or!?=

is interpreted as "Subject: ¡Hola, señor!".

The encoded-word format is not used for the names of the headers (for example Subject). These header
names are always in English in the raw message. When viewing a message with a non-English email client,
the header names are usually translated by the client.

Multipart messages[edit]
A MIME multipart message contains a boundary in the "Content-Type: " header; this boundary, which must
not occur in any of the parts, is placed between the parts, and at the beginning and end of the body of
the message, as follows:

MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=frontier

This is a message with multiple parts in MIME format.
--frontier
Content-Type: text/plain

This is the body of the message.
--frontier
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64

PGh0bWw+CiAgPGhlYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
--frontier--
Each part consists of its own content header (zero or more Content- header fields) and a body. Multipart
content can be nested. The content-transfer-encoding of a multipart type must always be "7bit", "8bit"
or "binary" to avoid the complications that would be posed by multiple levels of decoding. The multipart
block as a whole does not have a charset; non-ASCII characters in the part headers are handled by the
Encoded-Word system, and the part bodies can have charsets specified if appropriate for their content-type.

Notes:

Before the first boundary is an area that is ignored by MIME-compliant clients. This area is generally
used to put a message to users of old non-MIME clients.
It is up to the sending mail client to choose a boundary string that doesn't clash with the body
text. Typically this is done by inserting a long random string.
The last boundary must have two hyphens at the end.
Multipart subtypes[edit]
The MIME standard defines various multipart-message subtypes, which specify the nature of the message
parts and their relationship to one another. The subtype is specified in the "Content-Type" header
of the overall message. For example, a multipart MIME message using the digest subtype would have its
Content-Type set as "multipart/digest".

The RFC initially defined 4 subtypes: mixed, digest, alternative and parallel. A minimally compliant
application must support mixed and digest; other subtypes are optional. Applications must treat
unrecognized subtypes as "multipart/mixed". Additional subtypes, such as signed and form-data, have
since been separately defined in other RFCs.

The following is a list of the most commonly used subtypes; it is not intended to be a comprehensive list.

Mixed[edit]
Multipart/mixed is used for sending files with different "Content-Type" headers inline (or as
attachments). If sending pictures or other easily readable files, most mail clients will display them
inline (unless otherwise specified with the "Content-disposition" header). Otherwise it will offer them
as attachments. The default content-type for each part is "text/plain".

Defined in RFC 2046, Section 5.1.3

Digest[edit]
Multipart/digest is a simple way to send multiple text messages. The default content-type for each part is
"message/rfc822".

Defined in RFC 2046, Section 5.1.5

Message[edit]
A message/rfc822 part contains an email message, including any headers. This is used for digests as well
as for email forwarding.

Defined in RFC 2046.

Alternative[edit]
The multipart/alternative subtype indicates that each part is an "alternative" version of the same (or
similar) content, each in a different format denoted by its "Content-Type" header. The order of the parts
is significant. RFC1341 states that: In general, user agents that compose multipart/alternative entities
should place the body parts in increasing order of preference, that is, with the preferred format last..[4]

Systems can then choose the "best" representation they are capable of processing; in general, this will
be the last part that the system can understand, although other factors may affect this.

Since a client is unlikely to want to send a version that is less faithful than the plain text version,
this structure places the plain text version (if present) first. This makes life easier for users of
clients that do not understand multipart messages.

Most commonly, multipart/alternative is used for email with two parts, one plain text (text/plain) and
one HTML (text/html). The plain text part provides backwards compatibility while the HTML part allows
use of formatting and hyperlinks. Most email clients offer a user option to prefer plain text over HTML;
this is an example of how local factors may affect how an application chooses which "best" part of the
message to display.

While it is intended that each part of the message represent the same content, the standard does not
require this to be enforced in any way. At one time, anti-spam filters would only examine the text/plain
part of a message,[citation needed] because it is easier to parse than the text/html part. But spammers
eventually took advantage of this, creating messages with an innocuous-looking text/plain part and
advertising in the text/html part. Anti-spam software eventually caught up on this trick, penalizing
messages with very different text in a multipart/alternative message.[citation needed]

Defined in RFC 2046, Section 5.1.4

Related[edit]
A multipart/related is used to indicate that each message part is a component of an aggregate whole. It is
for compound objects consisting of several inter-related components - proper display cannot be achieved
by individually displaying the constituent parts. The message consists of a root part (by default, the
first) which reference other parts inline, which may in turn reference other parts. Message parts are
commonly referenced by the "Content-ID" part header. The syntax of a reference is unspecified and is
instead dictated by the encoding or protocol used in the part.

One common usage of this subtype is to send a web page complete with images in a single message. The
root part would contain the HTML document, and use image tags to reference images stored in the latter parts.

Defined in RFC 2387

Report[edit]
Multipart/report is a message type that contains data formatted for a mail server to read. It is split
between a text/plain (or some other content/type easily readable) and a message/delivery-status, which
contains the data formatted for the mail server to read.

Defined in RFC 6522

Signed[edit]
A multipart/signed message is used to attach a digital signature to a message. It has exactly two body
parts, a body part and a signature part. The whole of the body part, including mime headers, is used to
create the signature part. Many signature types are possible, like "application/pgp-signature" (RFC 3156)
and "application/pkcs7-signature" (S/MIME).

Defined in RFC 1847, Section 2.1

Encrypted[edit]
A multipart/encrypted message has two parts. The first part has control information that is needed
to decrypt the application/octet-stream second part. Similar to signed messages, there are different
implementations which are identified by their separate content types for the control part. The most
common types are "application/pgp-encrypted" (RFC 3156) and "application/pkcs7-mime" (S/MIME).

Defined in RFC 1847, Section 2.2

Form-Data[edit]
As its name implies, multipart/form-data is used to express values submitted through a form. Originally
defined as part of HTML 4.0, it is most commonly used for submitting files via HTTP.

Defined in RFC 2388

Mixed-Replace[edit]
The content type multipart/x-mixed-replace was developed as part of a technology to emulate server push
and streaming over HTTP.

All parts of a mixed-replace message have the same semantic meaning. However, each part invalidates -
"replaces" - the previous parts as soon as it is received completely. Clients should process the individual
parts as soon as they arrive and should not wait for the whole message to finish.

Originally developed by Netscape,[5] it is still supported by Mozilla, Firefox, Chrome,[6] Safari, and
Opera, but traditionally ignored by Microsoft. It is commonly used in IP cameras as the MIME type for
MJPEG streams.[7]

Byteranges[edit]
The multipart/byterange is used to represent noncontiguous byte ranges of a single message. It is used
by HTTP when a server returns multiple byte ranges and is defined in RFC 2616.

See also[edit]
8BITMIME
Unicode and email
Binary-to-text encoding
Direct Internet Message Encapsulation (DIME)– a now superseded Microsoft-proposed protocol intended
as a streamlined MIME, primarily for use in web services.
Extended SMTP (ESMTP)
Mailcap
mime.types
Object Linking and Embedding (OLE)
S/MIME
SOAP with Attachments
Uuencoding
VPIM
References[edit]
Jump up ^ "History of MIME". networkworld.com.
Jump up ^ Giles Turnbull (2005-12-14). "Forcing Thunderbird to treat outgoing attachments properly". O'Reilly
mac devcenter. Retrieved 2010-04-01.
Jump up ^ Ned Freed (2008-06-21). "name and filename parameters". Retrieved 2008-06-23.
Jump up ^ "RFC1341 Section 7.2 The Multipart Content-Type". Retrieved 2014-07-15.
Jump up ^ "An Exploration of Dynamic Documents". Netscape. Archived from the original on 1998-12-03.
Jump up ^ "Chromium Issue 5786: Streaming jpeg (multipart/x-mixed-replace) does not play". Chome issue
tracker. Google. Archived from the original on 2010-05-17.
Jump up ^ "WebCam Monitor setup documentation". DeskShare. Archived from the original on 2010-05-17.




******
