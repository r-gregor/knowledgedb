filename: python_rsync-progress-bar-01_20171207.txt
http://www.pythonexample.com/code/python-rsync-progress/

Python Rsync Progress

---
Get total rsync progress using Python
aerickson/rsync_with_progress.py ( python)
# from https://libbits.wordpress.com/2011/04/09/get-total-rsync-progress-using-python/
<code>
import subprocess
import re
import sys

print('Dry run:')
cmd = 'rsync -az --stats --dry-run ' + sys.argv[1] + ' ' + sys.argv[2]
proc = subprocess.Popen(cmd,
  shell=True,
  stdin=subprocess.PIPE,
  stdout=subprocess.PIPE,
  )
remainder = proc.communicate()[0]
mn = re.findall(r'Number of files: (\d+)', remainder)
total_files = int(mn[0])
print('Number of files: ' + str(total_files))

print('Real rsync:')
cmd = 'rsync -avz  --progress ' + sys.argv[1] + ' ' + sys.argv[2]
proc = subprocess.Popen(cmd,
  shell=True,
  stdin=subprocess.PIPE,
  stdout=subprocess.PIPE,
)
while True:
  output = proc.stdout.readline()
  if 'to-check' in output:
    m = re.findall(r'to-check=(\d+)/(\d+)', output)
    progress = (100 * (int(m[0][1]) - int(m[0][0]))) / total_files
    sys.stdout.write('\rDone: ' + str(progress) + '%')
    sys.stdout.flush()
    if int(m[0][0]) == 0:
      break

print('\rFinished')
</code>

---
eashman/rsyncprogress.py ( python)
# from https://libbits.wordpress.com/2011/04/09/get-total-rsync-progress-using-python/
<code>
"""
Progress bar for rsync
========================

Shows file progress and total progress as a progress bar.

Usage
---------
Run rsync with -P and pipe into this program. Example::

        rsync -P -avz [email protected]:/onefolder otherfolder/ | python rsyncprogress.py

It will show something like this::

        65%|30652/117251|################         |ETA:  0:04:20|File:100%|Illustris-3/...68/gas2_subhalo_5885
.hdf5|0:00:00|156.48kB/s

                                                                       ^ File progress
                                                                             ^ File name
       ^ ETA  ^ Speed
                          ^ Overall progress bar   ^ and ETA
                   ^ total number of files
               ^ files to be checked
        ^ Overall progress

You need the progressbar package installed (see PyPI).

License
-----------
Copyright (c) 2015 Johannes Buchner

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated d
ocumentation files (the "Software"), to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions
of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALI
NGS IN THE SOFTWARE.
"""

import progressbar
import sys

def read_stdin():
        line = ''
        while sys.stdin:
                try:
                        c = sys.stdin.read(1)
                except IOError as e:
                        print e
                        continue
                if c == '\r':
                        # line is being updated
                        yield line
                        line = ''
                elif c == '\n':
                        # line is done
                        yield line
                        line = ''
                elif c == '':
                        break
                else:
                        line += c

first_update = None
widgets = [progressbar.Percentage(), None, progressbar.Bar(), progressbar.ETA(), None]
pbar = None

for line in read_stdin():
        parts = line.split()
        if len(parts) == 6 and parts[1].endswith('%') and parts[-1].startswith('to-check='):
                # file progress -P
                file_progress = parts[1]
                file_speed = parts[2]
                file_eta = parts[3]
                istr, ntotalstr = parts[-1][len('to-check='):-1].split('/')
                ntotal = int(ntotalstr)
                i = int(istr)
                j = ntotal - i
                total_progress = j * 100. / int(ntotal)
                widgets[1] = '|%s/%s' % (i, ntotal)
                widgets[-1] = '|File:%s|%s|%s|%s' % (file_progress, short_file_name, file_eta, file_speed.rjust(10))
                if pbar is None:
                        first_update = j
                        pbar = progressbar.ProgressBar(widgets=widgets,
                                maxval=ntotal - first_update).start()
                pbar.maxval = ntotal - first_update
                pbar.update(j - first_update)

                #sys.stderr.write('Total:%.1f%%|File:%s|%s|%s|%s|\r' % (total_progress, file_progress,
                #       short_file_name, file_eta, file_speed))
                #sys.stderr.flush()
        elif not line.startswith(' '):
                # total progress
                file_name = line
                if len(parts) == 6: print parts[1].endswith('%'), parts[-1].startswith('to-check='),
                if len(file_name) > 40:
                        short_file_name = file_name[:12] + '...' + file_name[-(28-3):]
                else:
                        short_file_name = file_name
pbar.finish()
</code>

---
gdvickery/Python CLI (Command Line) Progress Bar ( Python)
<code>
import sys
import time
import math

# Output example: [=======   ] 75%

# width defines bar width
# percent defines current percentage
def progress(width, percent):
    marks = math.floor(width * (percent / 100.0))
    spaces = math.floor(width - marks)

    loader = '[' + ('=' * int(marks)) + (' ' * int(spaces)) + ']'

    sys.stdout.write("%s %d%%\r" % (loader, percent))
    if percent >= 100:
        sys.stdout.write("\n")
    sys.stdout.flush()
</code>

# Simulate doing something...
for i in xrange(100):
    progress(50, (i + 1)) # +1 because xrange is only 99
    time.sleep(0.1) # Slow it down for demo

   This is a function that will show a progress bar of the given percentage. Useful when performing time
   consuming tasks.

---
seebk/rsync_backup.py ( python)
<code>
#!/usr/bin/python3
#######################################################
# Python rsync Backup script
# Sebastian Kraft, 24.06.2013
#
#######################################################

#-----------------------------------------------------
# Config

# Source directories
DIRECTORY_LIST = (
    "/home/kraft/Bilder",
    "/home/kraft/Dokumente",
    "/home/kraft/Projekte/",
    "/home/kraft/Videos/",
    "/home/kraft/Musik/"
)

# Target directory to store the backups
TARGET_DIRECTORY = "/media/kraft/fantec_ext4/Kraft_Backup/"

# Some settings
WRITE_LOGFILE         = True         # write a logfile to TARGET_DIRECTORY

# TODO
#ALLOW_EMPTY_BACKUPS   = TRUE        # perform backup even if there are no changes detected by rsync
#CHECK_BACKUPS         = True        # check file consistency after every backup run
#------------------------------------------------------

#######################################################

#------------------------------------------------------
# Some functions


def ask_ok(prompt, retries=4, complaint='Please type yes or no...'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'Y', 'yes', 'Yes'):
            return True
        if ok in ('n', 'N', 'no', 'No'):
            return False
        print(complaint)


def print2log(s, filehandle=0):
    global WRITE_LOGFILE
    sys.stdout.buffer.write(bytes(s, "utf-8"))
    sys.stdout.flush()
    # '\r' has no effect for file write
    if (WRITE_LOGFILE==True) and filehandle and (s.find('\r')==-1):
        filehandle.write(bytes(s, "utf-8"))

#------------------------------------------------------
# Main program

import time
import subprocess
import os
import sys
import re

# check if target directory is mounted
if not os.path.exists(TARGET_DIRECTORY):
    print("\nERROR: Target directory \n>> "+TARGET_DIRECTORY+" <<\nis not available! If it's located on an external or network drive check if it is correctly mounted in the expected place.\n\n")
    sys.exit()

# prepare logfile
if WRITE_LOGFILE:
    logFile = open(os.path.join(TARGET_DIRECTORY, 'rsync_' + time.strftime( "%Y-%m-%dT%H:%M:%S") + '.log'), 'wb')
else:
    logFile = 0

numBackupItems = len(DIRECTORY_LIST)
currBackupItem = 0

# iterate over directories
for backupDir in DIRECTORY_LIST:

    currBackupItem = currBackupItem + 1

    countStr = "("+str(currBackupItem)+"/"+str(numBackupItems)+")"

    print2log("\n-----------------------------------------------------------\n", logFile)
    print2log("Backing up " + backupDir + " " + countStr +"\n", logFile)
    print2log("-----------------------------------------------------------\n", logFile)

    # check if source directory exists
    if not os.path.exists(backupDir):
        print2log("ERROR: Source directory does not exist! Skipping...\n", logFile)
        input("Press any key to proceed with next backup item...")
        continue

    timestamp = time.strftime( "%Y-%m-%dT%H:%M:%S")
    current_backup_target = os.path.join(TARGET_DIRECTORY, os.path.basename(os.path.normpath(backupDir)))
    previous_backup_link = ""

    # check for previous backups
    prevBackupsFound = False
    if os.path.exists(current_backup_target):
        dirListing = os.listdir(current_backup_target)
        dirListing = [name for name in os.listdir(current_backup_target) if os.path.isdir(os.path.join(current_backup_target,name))]
        # match directory names of type 2013-06-24T18:44:31
        rex = re.compile('[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9:]{8}$')
        dirListing = [x for x in dirListing if rex.match(x)]
        numOldBackups = len(dirListing)
        if numOldBackups>0:
            #dirListing.sort(key=lambda s: os.path.getmtime(os.path.join(current_backup_target, s)))
            dirListing.sort()
            dirListing.reverse()
            previous_backup_link = os.path.join(current_backup_target, dirListing[0])
            print2log("Previous backup will be used as hard link reference: "+previous_backup_link+"\n", logFile)
            previous_backup_link = '--link-dest="' + previous_backup_link +'" '
            prevBackupsFound = True

    # if no old backups are found, ask to create a new one
    if not prevBackupsFound:
        print2log("WARNING: No previous data for incremental backups were found!\n", logFile)
        if ask_ok("Should a complete backup be performed? (y/n)"):
            if not os.path.exists(current_backup_target):
                os.mkdir(current_backup_target)
        else:
            # continue with next backup item
            continue

    # assemble rsync commandline and run it
    rsynccmd  = 'rsync -aP ' + previous_backup_link + ' ' + backupDir + ' ' + os.path.join(current_backup_target,timestamp+"_tmp")
    print2log("+" + countStr + "+ " + rsynccmd + "\n\n", logFile)
    rsyncproc = subprocess.Popen(rsynccmd,
                                       shell=True,
                                       stdin=subprocess.PIPE,
                                       stdout=subprocess.PIPE,
    )

    # read rsync output and print to console
    while True:
        next_line = rsyncproc.stdout.readline().decode("utf-8")
        if not next_line:
            break
        print2log("+" + countStr + "+ " + next_line, logFile)

    # wait until process is really terminated
    exitcode = rsyncproc.wait()
    # check exit code
    if exitcode==0:
        os.rename(os.path.join(current_backup_target,timestamp+"_tmp"), os.path.join(current_backup_target,timestamp))
        print2log("done \n\n", logFile)
    else:
        print2log("\nWARNING: looks like some error occured :( \n\n", logFile)
        break

# close logfile
if (WRITE_LOGFILE==True) and logFile:
    logFile.close()
</code>

---
wenxingxing/rsync (python)
<code>
#!/usr/bin/env python3

# do rsync on file change
# usage: ./rsync [53][email protected]:<path>
import os
import sys
import argparse
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

CMD_RSYNC = None

class MyHandler(FileSystemEventHandler):
    def __init__(self):
        super(MyHandler, self).__init__()
        self.change_cnt = 0

    def on_modified(self, event):
        global change_cnt
        self.change_cnt = self.change_cnt + 1
        print('%dth time update.' % self.change_cnt)
        os.system(CMD_RSYNC)

def usage():
    print('Usage:', sys.argv[0], 'localpath [54][email protected]:<path>')

def main():
    global CMD_RSYNC
    if len(sys.argv) != 3:
        usage()
    else:
        CMD_RSYNC = 'rsync -avz %s %s' % (sys.argv[1], sys.argv[2])
        print(CMD_RSYNC)

        event_handler = MyHandler()
        observer = Observer()
        observer.schedule(event_handler, path=sys.argv[1], recursive=True)
        observer.start()
        observer.join()



if __name__ == '__main__':
    main()
</code>


---
micw/gist:37d55a21a2253d3cce1d (python)

<code>
#!/usr/bin/python

import fcntl
import time
import sys
import os
import yaml
import subprocess

basedir=os.path.dirname(os.path.realpath(__file__))

# lockfile - ensure that we do not run more than one instance
f = open (basedir+'/backup_rsync_push.lock', 'w')
try: fcntl.lockf (f, fcntl.LOCK_EX | fcntl.LOCK_NB)
except:
        sys.stderr.write ('[%s] Script already running.\n' % time.strftime ('%c') )
        sys.exit (-1)

# read config
stream = open(basedir+'/backup_rsync_push.conf', 'r')
conf=yaml.load(stream)
stream.close()

# backup server to use
server=conf['server']

# loop over all volumes
for volume in conf['volumes']:
        # volume requires properties 'name' and 'path'
        volname=volume['name']
        sys.stderr.write ('[%s] (%s) starting backup\n' % (time.strftime ('%c'),volname) )

        volpath=volume['path']
        if not volpath.endswith("/"):
                volpath+="/"

        # if volume.readyfile_check!=false check the presence of the file .ready_for_backup in the backup source directory.
        # this is enabled by default to check if the expected content is there (rather than overwrite existing backups with an empty folder or wrong data)
        if not ('readyfile_check' in volume) or volume['readyfile_check']:
                if not os.path.exists(volpath+".ready_for_backup"):
                        sys.stderr.write ('[%s] (%s) testfile ".ready_for_backup" does not exist in "%s" - skipping this backup.\n' % (time.strftime ('%c'),volname,volpath) )
                        continue
                # if volume.readyfile_max_age is set to a certain number of minutes, backup will be skipped if the file .ready_for_backup is older
                # this is useful if something like database dumps must be completed before we run the backups
                if 'readyfile_max_age' in volume and volume['readyfile_max_age']>0:
                        maxage=volume['readyfile_max_age']
                        age=(time.time() - os.path.getmtime(volpath+".ready_for_backup")) / 60
                        if age > maxage:
                                sys.stderr.write ('[%s] (%s) testfile ".ready_for_backup" is %d minutes old wich is more than the allowed %d minutes - skipping this backup.\n' % (time.strftime ('%c'),volname,age,maxage))
                                continue

        # build rsync command
        cmd=["/usr/bin/nice","-n","19","/usr/bin/ionice","-c","3"]

        maxDuration=0
        # restrict backup to max duration minutes
        if 'max_duration' in volume and volume['max_duration']>0:
                maxDuration=volume['max_duration']
                cmd.append("/usr/bin/timeout")
                cmd.append("%dm" % maxDuration)

        cmd.append("/usr/bin/rsync")

        # various options
        cmd.append("-avr")
        cmd.append("--numeric-ids")
        cmd.append("--delete-during")
        cmd.append("--acls")
        cmd.append("--xattrs")
        cmd.append("--sparse")

        # one exclude option for each excluded folder/file
        if 'exclude' in volume:
                for exl in volume['exclude']:
                        cmd.append("--exclude")
                        cmd.append(exl)

        # source
        cmd.append(volpath)
        # destination
        cmd.append("[64][email protected]%s:%s" % (server,volname))

        # ensure that we use our own key for backup, not the one passed via ssh agent by the current user
        myenv=os.environ.copy();
        myenv['SSH_AUTH_SOCK']=""

        rsyncExitValue=-1

        # execute the rsync command
        try:
                p=subprocess.Popen(cmd,env=myenv)
                p.wait()
                rsyncExitValue=p.returncode
        except KeyboardInterrupt:
                rsyncExitValue=20
                pass
        finally:
                try:
                        p.terminate()
                        time.sleep(1)
                        p.kill()
                except ProcessLookupError:
                        pass # Process might already be terminated

        if maxDuration>0 and rsyncExitValue==124:
                sys.stderr.write ('[%s] (%s) rsync does not finish within %d minutes - this backup was canceled.\n' % (time.strftime ('%c'),volname,maxDuration) )
                continue

        # rsync exit code 0 - everything was ok
        # rsync exit code 24 - everything was ok but some files changed during sync
        if rsyncExitValue!=0 and rsyncExitValue!=24:
                sys.stderr.write ('[%s] (%s) rsync exited with code %d - this backup is failed.\n' % (time.strftime ('%c'),volname,rsyncExitValue) )
                continue

        # everything is done. now tell the remote server that the backup is finished
        sys.stderr.write ('[%s] (%s) backup ok - tell the server that we are done.\n' % (time.strftime ('%c'),volname) )
        cmd=["/usr/bin/ssh"]
        # destination
        cmd.append("[65][email protected]%s" % (server))
        cmd.append("FINISH_BACKUP")
        cmd.append(volname)
        subprocess.call(cmd,env=myenv)
</code>


---
TimSC/pysync.py (python)

<code>
#!/usr/bin/env python
import subprocess
import fcntl
import os

if __name__=="__main__":

        lockFina = "docslock"
        fullLockFina = os.path.join(os.path.dirname(os.path.realpath(__file__)), lockFina)

        if not os.path.exists(fullLockFina):
                fi = open(fullLockFina, "w")
        else:
                fi = open(fullLockFina, "r")

        #Try to get exclusive lock, quit if this fails
        #This stops multiple instances of rsync running at the same time
        fcntl.flock(fi, fcntl.LOCK_EX | fcntl.LOCK_NB)

        # https://stackoverflow.com/a/18482169/4288232
        subprocess.call(["rsync", "-avz", "-delete", "-e", "ssh", "/home/user/Documents/", "[email protected]:/path/to/backup"])
</code>


---
wllhf/progress.py (python)

<code>
import sys
import time

BAR_SIZE = 40


def time_string(time):
    dd = int(time / (3600*24))
    hh = int((time - dd) / 3600)
    mm = int((time - dd - hh) / 60)
    ss = int(time % 60)

    return '{0:0>2}:{1:0>2}:{2:0>2}:{3:0>2}'.format(dd, hh, mm, ss)


class ProgressBar(object):
    """ """

    def __init__(self, title):
        self.title = title
        self.time_start = -1

    def start(self):
        self.time_start = time.time()
        sys.stdout.write(self.title + ": [" + "-"*BAR_SIZE + "]" +
                         " time remaining est.: dd:hh:mm:ss")
        sys.stdout.flush()

    def update(self, new):
        time_str = time_string((1-new)*(time.time() - self.time_start)/new)
        new = int(new * BAR_SIZE)
        sys.stdout.write("\r" + self.title + ": [" + "#"*new + "-"*(BAR_SIZE-new) + "]" +
                         " time remaining est.: " + time_str)
        sys.stdout.flush()

    def end(self):
        time_str = time_string(time.time() - self.time_start)
        sys.stdout.write("\r" + self.title + ": [" + "#"*BAR_SIZE + "]" +
                         " total                " + time_str + "\n")
        sys.stdout.flush()


if __name__ == '__main__':
    bar = ProgressBar("blabla")
    bar.start()
    time.sleep(3)
    bar.update(0.25)
    time.sleep(3)
    bar.update(0.5)
    time.sleep(3)
    bar.update(0.75)
    time.sleep(3)
    bar.end()
</code>

