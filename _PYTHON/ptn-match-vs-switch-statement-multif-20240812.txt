filename: ptn_match-vs-switch-statement-multif_20240812.txt
https://ioflood.com/blog/python-switch-case-how-to-use-a-switch-statement-in-python/

Python Switch Case | Using Switch Statements in Python
06 Jun 2024

   Proper usage of the switch-case structure in Python programming is imperative while managing systems
   at IOFLOOD, facilitating efficient conditional branching and code organization. In our
   experience, switch-case structures offer a concise and readable way to handle multiple conditions,
   enhancing code clarity and maintainability. Today's article explores what a switch-case structure is
   in Python, providing examples and explanations to empower our customers with valuable scripting
   techniques for their cloud server hostings.

   In this blog post, we'll dive deep into these alternatives, explaining how you can implement switch
   case structures in Python using various methods.

   So, fasten your seatbelts, and let's embark on this coding journey!

TL;DR What is a Switch Case Structure?
     In programming, a switch case structure is a type of control statement that allows a variable to
     be tested for equality against a list of values. Each of these values is referred to as a case,
     and the variable that is being switched on is checked for each case.

   It's akin to a more efficient version of an if-elif-else structure. Rather than evaluating each
   condition sequentially until a true condition is found, a switch case leaps directly to the branch
   corresponding to the 'switched-on' value. It's like a multi-destination train where each stop
   represents a case, and the train (program) directly goes to the stop (case) that matches the
   passenger's ticket (input value).

Python Switch Case Statement Alternatives
   Now, here's the twist: Python, unlike many other programming languages, doesn't have a built-in
   switch case structure. You might wonder, 'Why not?' The philosophy of Python revolves around
   simplicity and readability, and the creators of Python believed that if-elif-else statements were
   more aligned with this philosophy.

   While if-elif-else statements can certainly serve the purpose, there are scenarios where a switch
   case structure can be a more efficient and elegant solution. This is especially true when dealing
   with a large number of conditions. In such cases, if-elif-else statements can become unwieldy and
   hard to maintain.

   This is where the flexibility of Python comes into play. Python offers several alternatives to
   implement the functionality of a switch case structure.

Python's 'Match Case': A Game Changer
   With Python 3.10, a new feature was introduced that could potentially revolutionize how we handle
   condition checking in Python: the match case statement. This new construct bears some resemblance to
   a switch case structure, but it's far more powerful and flexible.

How 'Match Case' Exceeds Traditional Switch Cases
   The match case statement in Python is not just a simple switch case structure. It's a comprehensive
   pattern matching mechanism that can match patterns of different shapes, destructure data, and
   even check for specific properties. This makes it a more versatile and potent tool than traditional
   switch case structures.

A Practical Example of Using 'Match Case'
   Here's another example of using match case in Python:
def process_data(data):
	match data:
		case ('info', message):
			print(f'Info: {message}')
		case _:
			print('Unknown data')

process_data(('info', 'All is well'))  # Output: Info: All is well
process_data(('error', 'Something went wrong'))  # Output: Unknown data

   To better understand how the match case statement works in Python, let's consider the following
   example:
def process_data(data):
	match data:
		case ('error', message):
			print(f'Error: {message}')
		case ('warning', message):
			print(f'Warning: {message}')
		case _:
			print('Unknown data')

process_data(('error', 'Something went wrong'))  # Output: Error: Something went wrong
process_data(('info', 'All is well'))  # Output: Unknown data

   In this example, the process_data function receives a tuple data and uses a match case statement to
   check the first element of the tuple. If it's 'error' or 'warning', it prints an appropriate message.
   If it's anything else, it prints 'Unknown data'. This shows how match case can be used to handle
   various scenarios in a straightforward and efficient manner.

The Power and Simplicity of 'Match Case'
   The match case statement in Python is a powerful tool that marries the efficiency of a switch case
   structure with the versatility of pattern matching. It's also easy to use and understand, making it
   an excellent addition to any Python programmer's toolkit.

'Match Case': An Effective Alternative to Traditional Switch Cases
   In conclusion, Python's match case statement is a powerful and user-friendly alternative to
   traditional switch case structures. It's a testament to Python's flexibility and innovation, and it's
   another reason why Python is such a fantastic language for both novices and seasoned programmers
   alike.

Using If/Elif Statements as an Alternative
   As mentioned before, the Python "native" alternative to a switch case statement is if/elif.

   Here's an example of using if-elif-else statements as a switch case alternative:
def switch_case_if(value):
	if value == 'case1':
		return 'This is case 1'
	elif value == 'case2':
		return 'This is case 2'
	elif value == 'case3':
		return 'This is case 3'
	else:
		return 'This is the default case'

print(switch_case_if('case1'))      # Output: This is case 1
print(switch_case_if('case4'))      # Output: This is the default case

   The most straightforward alternative to a switch case is to use if-elif-else statements. This is a
   simple and readable solution, but as mentioned before, it can become cumbersome when dealing with a
   large number of conditions.

Dictionaries as Switch Case Structures
   Python's dictionaries are versatile and potent data structures. They map keys to values, and this
   feature can be harnessed to implement a switch case structure. Instead of cases, we have keys, and
   instead of switching, we retrieve the value associated with a specific key.

   Let's illustrate this with an example:
def switch_case_dict(value):
	return {
		'case1': 'This is case 1',
		'case2': 'This is case 2',
		'case3': 'This is case 3'
	}.get(value, 'This is the default case')

print(switch_case_dict('case1'))  # Output: This is case 1
print(switch_case_dict('case4'))  # Output: This is the default case

   In this example, we define a function switch_case_dict that accepts a value as an argument. Inside
   the function, we create a dictionary where each key-value pair represents a case. The get() method
   retrieves the value associated with the given value. If the value isn't found in the dictionary, the
   get() method returns a default value, which in this case is 'This is the default case'.

Advantages of Dictionaries in Switch Case Structures
   Using dictionaries as switch case structures comes with several benefits. First, it's a neat and
   elegant solution that is easy to read and understand. Second, it's highly efficient, as retrieving a
   value from a dictionary is a constant time operation, regardless of the dictionary's size. This can
   lead to significant performance improvements when dealing with a large number of cases.

Using Getattr for Switch Case Structures
   Another robust way to implement a switch case structure in Python is by using the getattr
   function within classes. The getattr function allows you to retrieve the value of a named attribute
   of an object. By defining methods in a class that correspond to different cases, you can use
   getattr to call the appropriate method based on the 'switched-on' value.

   Here's an illustrative example:
class SwitchCaseClass:
	def case1(self):
		return 'This is case 1'

	def case2(self):
		return 'This is case 2'

	def case3(self):
		return 'This is case 3'

	def default(self):
		return 'This is the default case'


def switch_case_getattr(value):
	switcher = SwitchCaseClass()
	return getattr(switcher, value, switcher.default)()

print(switch_case_getattr('case1'))  # Output: This is case 1
print(switch_case_getattr('case4'))  # Output: This is the default case

   In this example, we define a class SwitchCaseClass with methods that correspond to different cases.
   We then define a function switch_case_getattr that uses getattr to call the appropriate method of
   SwitchCaseClass based on the value given. If the value does not correspond to any method, getattr
   calls a default method.

   Take advantage of these insights and make strides in mastering the intricate art of Python control
   structures and statements.

Wrapping Up: The Power of Python's Flexibility
   Throughout this post, we've embarked on a comprehensive journey exploring switch case structures in
   Python. While Python may not come with a built-in switch case structure like some other languages, it
   certainly does not leave us in the lurch. Python offers a plethora of powerful alternatives that can
   help us achieve the same functionality, and often with added benefits.

   We delved into how we can use if-elif-else statements as a straightforward alternative to switch case
   structures. We also discovered how to leverage Python's dictionaries and the getattr function to
   implement efficient and elegant switch case structures. These methods not only enhance the
   readability and maintainability of our code, but they can also improve its performance.

   Furthermore, we got a glimpse of Python's match case statement, a powerful new feature introduced in
   Python 3.10. This versatile tool takes condition checking in Python to a whole new level,
   offering a robust pattern matching mechanism that outperforms traditional switch case structures.

   In conclusion, Python's flexibility and innovation shine through in its approach to switch case
   structures. Whether you're a beginner or an experienced programmer, understanding these alternatives
   can significantly enhance your coding skills and open up new possibilities for writing efficient,
   readable, and maintainable Python code.



---
https://techytales.medium.com/pythons-switch-statement-a-beginner-s-guide-4aaffef29cb5

Python's Alternative for Switch Statement: A Beginner's Guide for match case statement
Jun 21, 2023

   Python is a constantly evolving language, and with the release of Python 3.10, a new feature was
   introduced: the match case statement. This powerful tool allows you to control the flow of your
   programs by executing certain parts of code if conditions (or cases) are met.

   If you're familiar with other programming languages like C, you may recognize the match case
   statement as being similar to a switch statement. However, the match case statement in Python is even
   more powerful and allows for more complicated pattern matching.

   In this article, I'll introduce you to the basics of match case statements in Python and show you how
   to use them in your own programs.

What is a Match Case Statement?
   A match case statement is a new feature introduced in Python 3.10 that allows you to more easily
   control the flow of your programs by executing certain parts of code if conditions (or cases) are
   met. It is also known as structural pattern matching.

   Here's an example of a match case statement in Python:
command = 'Hello, World!'
match command:
	case 'Hello, World!':
		print('Hello to you too!')
	case 'Goodbye, World!':
		print('See you later')
	case other:
		print('No match found')

   In this example, we define a variable command and use the match keyword to match it to the cases
   defined after each case keyword. The first case matches the value of command, so the output will be
   Hello to you too!.

The Syntax of Match Case Statements
   The basic syntax of a match case statement in Python is as follows:
match expression:
	case pattern1:
		# code block 1
	case pattern2:
		# code block 2
	...
	case patternN:
		# code block N

   The match keyword is followed by an expression that evaluates to a value. This value is then matched
   against the patterns defined after each case keyword. You can add any number of cases to the match
   case statement. You can have as many cases as you need to cover all the possible values or patterns
   you want to match against. If the value of the expression matches one of the patterns, the
   corresponding code block is executed. If none of the patterns match, then final case statement
   executes by default. Remember to always include a default case to handle values that do not match any
   of the specified cases.

   Here's an example that shows how to use a match case statement to check if a number is even or odd:
fruit = input("Enter A Fruit: ")
match fruit:
	case "apple":
		print("fruit is apple.")
	case "banana":
		print("fruit is banana.")
	case "orange":
		print("fruit is orange.")
	case _:
		print("Fruit is not apple, banana, or orange.")

   The output of the above program will be like this:
Enter A Fruit: apple
fruit is apple.

   The code allows a user to input a fruit of their choice. The input function input("Enter A Fruit: ")
   prompts the user to enter a fruit, and the user's input is stored in the variable fruit.

   The match statement is used to match the value of fruit against different cases and execute the
   corresponding block of code based on the match.
	 * case "apple": checks if the value of fruit is equal to "apple". If it matches, the code inside
	   this case block executes, which in this case, is print("fruit is apple."). It will display the
	   message "fruit is apple."
	 * case "banana": checks if the value of fruit is equal to "banana". If it matches, the code inside
	   this case block executes, which is print("fruit is banana."). It will display the message "fruit
	   is banana."
	 * case "orange": checks if the value of fruit is equal to "orange". If it matches, the code inside
	   this case block executes, which is print("fruit is orange."). It will display the message "fruit
	   is orange."
	 * case _:, the underscore _ acts as a placeholder for the default case, which matches any value
	   that didn't match the previous cases. In this case, if the value of fruit does not match "apple",
	   "banana", or "orange", the code inside this case block executes, which is print("Fruit is not
	   apple, banana, or orange."). It will display the message "Fruit is not apple, banana, or orange."

   It's important to note that patterns can be more than just simple values. You can also use more
   complex patterns like sequences, mappings, class instances, and more. Here's an example that shows
   how to use a sequence pattern to extract values from a tuple:
point = (2, 3)
match point:
	case (0, 0):
		print('Origin')
	case (0, y):
		print(f'Y={y}')
	case (x, 0):
		print(f'X={x}')
	case (x, y):
		print(f'X={x}, Y={y}')
	case _:
		raise ValueError('Not a point')
X=2, Y=3

   In this example, we define a variable point that contains a tuple with two values. We then use a
   sequence pattern in each case statement to extract the values from the tuple and assign them to
   variables.

   The first case statement uses a sequence pattern (0, 0) to check if both values in the tuple are 0.
   If this pattern matches, the output will be Origin.

   The second and third case statements use sequence patterns (0, y) and (x, 0) to check if one of the
   values in the tuple is 0. If one of these patterns matches, the output will be either Y=3 or X=2,
   depending on which value is 0.

   The fourth case statement uses a sequence pattern (x, y) to extract both values from the tuple and
   assign them to variables. If this pattern matches, the output will be X=2, Y=3.

   The last case statement uses the wildcard pattern _ to catch any values that don't match any of the
   previous patterns. If this pattern matches, a ValueError is raised.

Patterns
   The patterns in a match-case statement can be any valid Python expression. However, there are some
   special patterns that are commonly used.
	 * Literal patterns: Literal patterns match literal values. For example, the pattern 1 matches the
	   value 1.
	 * Wildcard patterns: Wildcard patterns match any value. The pattern _ is a wildcard pattern.
	 * Sequence patterns: Sequence patterns match sequences of values. For example, the pattern [1, 2,
	   3] matches the list [1, 2, 3].
	 * Dictionary patterns: Dictionary patterns match dictionaries. For example, the pattern {'a': 1,
	   'b': 2} matches the dictionary {'a': 1, 'b': 2}.

How it works
   When a match-case statement is executed, the expression is evaluated. The patterns are then matched
   against the expression in order. If a pattern matches the expression, the corresponding code block is
   executed and the match-case statement is terminated. If none of the patterns match the expression,
   the code_default block of code is executed.

Implementation
   To implement a match-case statement, you can use the following steps:
	1. Define the match-case statement.
	2. Define the patterns.
	3. Define the code blocks.
	4. Execute the match-case statement.

   Here's an example that shows how to implement a match-case statement:
def match_case(value):
	"""Matches a value to a case statement.
Args:
		value: The value to match.
	Returns:
		The result of the match.
	"""
	match value:
		case 1:
			return "One"
		case 2:
			return "Two"
		case 3:
			return "Three"
		case _:
			return "Unknown"
if __name__ == "__main__":
	print(match_case(1))
	print(match_case(2))
	print(match_case(3))
	print(match_case(4))

   This code defines a function called match_case that takes a value as input and returns a string. The
   function uses a match-case statement to match the value against four different patterns. If one of
   the patterns matches the value, the corresponding code block is executed and the result of the match
   is returned.

   The last four lines of code call the match_case function with four different values and print the
   results to the console.

   The output of this above code is as follows:
One
Two
Three
Unknown

Advantages and Use Cases
   Match case statements are a powerful tool for controlling the flow of your programs. They allow you
   to easily execute certain parts of code if conditions are met, without having to write long and
   complex if-else statements.

   Match case statements are also more readable and easier to understand than if-else statements, making
   your code easier to maintain and debug.

   Here are some advantages and use cases of match case statements:
	1. Simplify complex branching logic: Match case statements provide a concise and expressive way to
	   handle multiple conditions and outcomes in a structured manner.
	2. Improved code readability: Match case statements make the code more readable and
	   self-explanatory, especially when dealing with a large number of conditions or pattern matching.
	3. Error handling: Match case statements can be combined with exception handling to gracefully
	   handle unexpected cases or raise custom exceptions.
	4. Pattern matching flexibility: Match case statements allow you to use various patterns such as
	   literals, wildcards, sequences, and dictionaries, enabling you to handle a wide range of
	   scenarios effectively.

Conclusion
   Match case statements are a powerful new feature introduced in Python 3.10. They allow you to easily
   control the flow of your programs by executing certain parts of code if conditions are met.

   In this article, I introduced you to the basics of match case statements in Python and showed you how
   to use them in your own programs. I hope that this information will help you write more readable and
   maintainable code.

   If you found this article helpful, please consider clapping 👏 or sharing it with your friends and
   colleagues. Your support encourages us to create more content to help you on your Python programming
   journey.



---
https://www.datacamp.com/tutorial/python-switch-case?dc_referrer=https%3A%2F%2Fwww.google.com%2F

Python Switch Case Statement: A Beginner's Guide
Jan 2024

Python, unlike some other programming languages, did not include a traditional switch case statement until
version 3.10. In this tutorial, we'll explore how Python's switch case equivalent works and how it can be
implemented using Python's structural pattern matching feature.

Understanding Traditional Switch Case Statements
Before Python 3.10, Python developers had to use multiple if-elif-else statements or dictionaries to
simulate switch case functionality. Here's a basic example using if-elif-else:

day = input("Enter the day of the week: ").capitalize()

if day == "Saturday" or day == "Sunday":
	print(f"{day} is a weekend.")
elif day in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]:
	print(f"{day} is a weekday.")
else:
	print("That's not a valid day of the week.")

Saturday is a weekend.

Introducing Match and Case in Python 3.10
With Python 3.10, the match statement and case keywords were introduced, providing a more elegant solution
similar to traditional switch case statements in other languages.

Understanding the Basic Syntax
Let's consider a scenario where we want to categorize days of the week into weekend or weekday categories,
and also identify a speci:fic day. Here's how we can use the match statement:

day = input("Enter the day of the week: ").capitalize()

match day:
	case "Saturday" | "Sunday":
		print(f"{day} is a weekend.")
	case "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday":
		print(f"{day} is a weekday.")
	case _:
		print("That's not a valid day of the week.")

Monday is a weekday.

User Input and capitalize() Method: We start by taking the user's input for the day of the week and use the
capitalize() method to format it properly (first letter uppercase, others lowercase).
Using the match Statement: We then use match to evaluate the day variable.
Pattern Matching with case:
    The first case checks if the input is either "Saturday" or "Sunday". The symbol “|” also known as bitwise
    OR operator is used for matching any one of multiple patterns. If the input is either of these, it prints
    that the day is a weekend.
    The second case covers all the weekdays by checking against each of them. If the input matches any weekda
    , it prints that the day is a weekday.
The Fallback Case (_): The last case acts as a default (`else` statement), catching any input that doesn't
match the known days, indicating an invalid input.
No break Statements: Notice that we don't need to use break after each case. Python automatically exits the
match statement after a successful match.

The match-case syntax is more readable and concise compared to a series of if-elif-else statements.
Advanced Use Cases of Match and Case in Python

Data science applications
Python's match-case statement can be highly useful in data preprocessing tasks in data science.
Preprocessing often involves categorizing data into different groups based on specific criteria.

For example, in a dataset of animals, you might want to categorize them based on their class like mammals,
birds, reptiles, etc. Here's a simplified example:

animal = "Eagle"
match animal:
	case "Eagle" | "Parrot":
		print("Bird")
	case "Lion" | "Tiger":
		print("Mammal")
	case "Python" | "Crocodile":
		print("Reptile")
	case _:
		print("Unknown Class")

Bird

This approach simplifies complex if-else logic and makes the code more readable and maintainable, especially
when dealing with large datasets with multiple categories.

Machine learning scenarios
In machine learning, handling different types of data inputs is crucial. The match-case structure can be
employed for feature extraction or model inference. For example, in a machine learning model that predicts
weather conditions, match-case can be used to categorize temperature ranges into 'Cold', 'Warm', 'Hot',
which can then be used as input features for the model.

Python Switch Case Common Pitfalls and Best Practices

Debugging tips
A common mistake when using match-case in Python is forgetting to include the underscore (_) for the default
case, akin to the 'else' in traditional if-else statements. This can lead to unexpected behaviors if none of
the specific cases are matched. Always include a default case to handle unexpected or miscellaneous values.

Performance considerations
While the match-case statement is a powerful tool, its impact on the performance of Python code,
particularly in large-scale applications, should be considered. In scenarios with a large number of cases,
or complex pattern matching, performance can potentially be impacted. Profiling and testing your code for
performance in real-world scenarios is crucial to understand and mitigate any potential performance issues.

Python Match-Case Versus Traditional Switch-Case

Comparative analysis
Python's match-case differs significantly from traditional switch-case statements found in languages like
Java or C++. In Java, for example, the switch statement is limited to matching only scalar values (like
integers and enum types), whereas Python's match-case offers a much more flexible pattern matching capability,
allowing for matching complex data types, such as sequences and class instances. This makes Python's
implementation more powerful but also requires a deeper understanding of pattern matching concepts.

Transitioning guide
For programmers familiar with traditional switch-case statements in languages like C++ or Java,
transitioning to Python's match-case requires a shift in thinking from simple value matching to pattern
matching.

It's important to understand that Python's match-case is more than just a switch-case; it's a versatile tool
for deconstructing data types and extracting information from complex structures. Practicing with different
data types and patterns is key to mastering its use.

Conclusion
Python's introduction of the match and case statements in version 3.10 provides a much-awaited feature for
developers familiar with switch case statements in other languages. It offers a clean and concise way to
handle multiple conditions, improving code readability and maintainability.

You can read more about Python Functions in our full tutorial and explore this and other concepts in our
Intermediate Python course.


---
https://learnpython.com/blog/python-match-case-statement/

How to Use a match case Statement in Python 3.10
 9th May 2022

   The Python programming language is under constant development, with new features and functionality
   added with every update. Python 3.10 was released in mid-2021 and comes with structural pattern
   matching, also known as a match case statement. This is Python 3.10's most important new feature; the
   new functionality allows you to more easily control the flow of your programs by executing certain
   parts of code if conditions (or cases) are met.

   In this article, we'll tell you everything you need to know about the match case statement in Python,
   which will allow you to have fine-grained control over how your programs execute.

A Word About Python Versions
   Before we get started, let's first address Python versions and basic Python knowledge.

   If you're running an older version of Python, we'd like to encourage you to upgrade to Python 3.10 to
   get the most out of this article. This will allow you to use the code snippets here and be able to
   modify them to suit your own projects.

   Check out the official Python downloads page for access to the most recent versions. If you want
   more detailed information on match case statements, there are three new Python Enhancement Proposals
   (PEPs). A good place to start is PEP 636, which is a tutorial for pattern matching. If you want
   to get deep into the weeds, PEP 634 covers the specification and PEP 635 describes the
   motivation and rationale for this new feature.

   For those of you who are new to Python, we have two articles explaining some important terms we'll be
   using in this article. Check out part 1 here, and part 2 here.  We also have interactive
   courses to help accelerate your learning. Python Basics is a good starting point, and
   Built-in Algorithms in Python will teach you the tools to write optimized applications in no
   time.

   Okay, now let's dig into the Python match case statement.

The match case Statement in Python
   A basic implementation of match case statements looks a lot like an if statement in Python. If you
   need a refresher, we have an article on checking multiple conditions in Python with an if
   statement.

   For those of you who have some background in other languages like Java or C, match case may look like
   a switch statement. Switch statements are functionally similar to if-else statements, but they
   require less code when defining the cases.

   The match case statement in Python is more powerful and allows for more complicated pattern matching.
   Let's start by looking at a basic example to demonstrate the syntax:
>>> command = 'Hello, World!'
>>> match command:
...		case 'Hello, World!':
...			print('Hello to you too!')
...		case 'Goodbye, World!':
...			print('See you later')
...		case other:
...			print('No match found')

Hello to you too!

   Here we define a variable command and use the match keyword to match it to the cases defined after
   each case keyword.  As a side note, match and case are better described as "soft" keywords, meaning
   they only work as keywords in a match case statement.  You can keep using "match" or "case" as a
   variable name in other parts of your program.  The case other is equivalent to else in an
   if-elif-else statement and can be more simply written as case _.

   We're using the print() function here to simply print text to the screen. But any other commands or
   function calls can go here to be executed if the case is matched.  We'll see some more detailed
   examples below. If you want to learn more about the print() function, take a look at this
   article.

Why Use a match case Statement?
   The example above can just as easily be implemented with an if-elif-else statement. In this section,
   we'll see two more examples of how using match case can simplify your flow control statements, making
   them more readable and less prone to errors.

   Say we want to write a script to handle a large number of files. We can write the following function:
>>> def file_handler_v1(command):
...		match command.split():
...			case ['show']:
...				print('List all files and directories: ')
...				# code to list files
...			case ['remove', *files]:
...				print('Removing files: {}'.format(files))
...				# code to remove files
...			case _:
...				print('Command not recognized')

   The input is again a string which gets split at white space using command.split(). This returns a
   list of strings. (By the way, if you are wondering what the difference between lists and arrays is,
   we explain it in this article.) The first case is matched when the value  of command is 'show',
   for which the split() method returns the list ['show']. Then code to list all files in a particular
   directory gets executed. Here we just have the code to be executed indicated by comments; in reality,
   you could use the os module to implement the required functionality.

   The second case is more interesting. Here's an example:
>>> file_handler_v1('remove file1.txt file2.jpg file3.pdf')
Removing files: ['file1.txt', 'file2.jpg', 'file3.pdf']

   The first part of the argument 'remove' is matched after splitting. Using the starred expression in
   the case definition captures any number of optional arguments which follow (similar to *args); the
   files variable gets defined as a list containing all the files to be removed. If you try implementing
   this with an if-elif-else statement, you'll use more code to achieve the same result. It will also
   not be as readable as using a match case statement.

   The next level of complexity involves using an or operator (|) and putting an if statement inside the
   case definition. Take a look at the following function, paying particular attention to the second and
   third cases:
>>> def file_handler_v2(command):
...		match command.split():
...			case ['show']:
...				print('List all files and directories: ')
...				# code to list files
...			case ['remove' | 'delete', *files] if '--ask' in files:
...				del_files = [f for f in files if len(f.split('.'))>1]
...				print('Please confirm: Removing files: {}'.format(del_files))
...				# code to accept user input, then remove files
...			case ['remove' | 'delete', *files]:
...				print('Removing files: {}'.format(files))
...				# code to remove files
...			case _:
...				print('Command not recognized')

   The second and third cases now match for either "remove" or "delete" in the input command.
   Additionally, the second case has an if statement that matches only when the optional flag --ask is
   in the input. Below this, you could implement code to accept user input, then delete the files if the
   command is confirmed. Notice we had to select all the files to delete by using a list comprehension,
   which is a compact way of writing a for loop. Take a look at this article for more information on
   for loops in Python.

   The third case in the above example is matched when the optional flag is not in the input command.
   Let's see two examples of this function in action:
>>> file_handler_v2('remove --ask file1.txt file2.jpg file3.pdf')
Please confirm: Removing files: ['file1.txt', 'file2.jpg', 'file3.pdf']

>>> file_handler_v2('delete file1.txt file2.jpg file3.pdf')
Removing files: ['file1.txt', 'file2.jpg', 'file3.pdf']

Final Thoughts on match case Statements in Python
   In this article, we've introduced structural pattern matching in Python with the match case
   statement. We showed how it can provide an advantage over an if-elif-else statement in terms of the
   amount of code needed and the readability. There's even more this new feature can do that we didn't
   touch on here - you can provide an object as an input (instead of the strings we used) and do pattern
   matching on the attributes of the object. Pretty cool stuff.

   A word of caution: for more complex statements like the final example above, the order in which you
   have the cases changes the behavior of the program. You might be familiar with this from writing
   if-elif-else statements. To demonstrate this problem, take the final example from above and swap the
   positions of the second and third cases. You'll find the --ask flag is never matched. So, make sure
   you put a bit of thought into how you structure the case statements. You could even incorporate some
   of the other flow control statements into your code. Check out this article which shows how to
   use break, continue, and pass to control loops in Python.

   Strictly speaking, match case doesn't add new functionality to Python. However, it does vastly
   simplify complex control statements. Feel free to take what you've learnt here and apply to your own
   projects. Try to re-write some of your if-elif-else statements with a match case statement to
   convince yourself of its usefulness. Happy coding!



---

