filename: ptn_list-set-and-dictionary-comprehensions_20190326.txt
https://mypythonlessons.blogspot.com/2019/03/list-set-and-dictionary-comprehensions.html

List, Set and Dictionary Comprehensions in Python
March 23, 2019

   In this post, we will discuss the three Python comprehensions, i.e., list, set and dictionary
   comprehensions, with examples.

Introduction
   Python comprehensions are essentially syntactic sugar used to create sequences from other sequences.
   They are commonly used to:
    1. create new sequences which are obtained by applying some operation on elements of a sequence.
    2. create a subsequence containing elements of a sequence which satisfy certain conditions.

   List comprehensions were introduced in Python 2.0. Later in Python 3, set and dictionary
   comprehensions were added. Here, we will discuss these comprehensions with examples.

Advantages:
    1. Concise
       They need fewer lines of code than a for-loop with or without conditions.
    2. More readable
       If you understand comprehensions, it is more readable. Also, this depends. Sometimes, it is
       better to go for a traditional for-loop if the conditions are too complicated.
    3. Faster
       Memory is pre-allocated, instead of performing an append every time.
    4. More Pythonic

List Comprehensions
   List comprehension provides a concise way to create a new list from an iterable.
   List comprehensions are created using enclosing square brackets []. Syntactically, it has an
   expression on elements from the original sequence, followed by zero or more for and if statements.
   The following code snippet shows examples for list comprehensions.
<code>
# 1. Create a list of numbers using list comprehension.
numbers = [number for number in range(10)]
print(numbers) # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# 2. List comprehension wth an expression.
# Create a list of squares of numbers in a range.
squares = [number ** 2 for number in range(10)]
print(squares) # Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# 3. List comprehension with an if condition.
# Create a list of even numbers in a range.
even_numbers = [number for number in range(10) if number % 2 == 0]
print(even_numbers) # Output: [0, 2, 4, 6, 8]

# 4. List comprehension with an if-else condition.
# Create a list of squares of all odd numbers and 
# cubes of all even numbers in a range.
power_numbers = [number ** 2 if number % 2 == 1
                 else number ** 3 for number in range(10)]
print(power_numbers) # Output: [0, 1, 8, 9, 64, 25, 216, 49, 512, 81]

# 5. List comprehension with an if-else-if ladder.
# Create a new list where we replace all multiples of 2 by 'two',
# all multiples of 3(which are not multiples of 2) by 'three',
# and leave the rest as it is.
modified_numbers = ['two' if number % 2 == 0
                    else 'three' if number % 3 == 0
                    else number for number in range(10)]
print(modified_numbers) # Output: ['two', 1, 'two', 'three', 'two', 5, 'two', 7, 'two', 'three']

# 6. Using methods with list comprehension.
# Here we use the built-in method 'str' as the expression applied,
# but we can apply any user defined functions as well.
numbers = [str(number) for number in range(10)]
print(numbers) # Output: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

# 7. List comprehension with nested-if conditions.
# Create a list with all mulitples of 5 if they are in another list.
filtered_list = [number for number in range(50)
                 if number % 5 == 0
                 if number in range(30, 100)]
print(filtered_list) # Output: [30, 35, 40, 45]

# 8. List comprehension equivalent for nested for-loops.
# List comprehension to create a list of (substring, string) tuples from two lists.
# First is a list substrings and the second is a list of strings to be parsed.
substrings_list = ["an", "the"]
strings_list = ["an apple", "the tree", "all trees", "an apple in the tree"]
tuple_list = [(substring, string)
              for string in strings_list
              for substring in substrings_list
              if substring in string]
print(tuple_list) # Output: [('an', 'an apple'), ('the', 'the tree'), ('an', 'an apple in the tree'), ('the', 'an apple in the tree')]

# 9. List comprehension to flatten nested-lists.
# Flatten a matrix.
matrix = [[1,2,3], [4,5,6], [7,8,9]]
flattened_list = [number for each_list in matrix for number in each_list]
print(flattened_list) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 10. Nested list comprehension.
# Add two matrices using nested list comprehension.
matrix_1 = [[1,1,1], [2,2,2], [3,3,3]]
matrix_2 = [[4,4,4], [5,5,5], [6,6,6]]
matrix_sum = [[matrix_1[row][column] + matrix_2[row][column]
               for column in range(len(matrix[0]))]
              for row in range(len(matrix_1))]
print(matrix_sum) # Output: [[5, 5, 5], [7, 7, 7], [9, 9, 9]]
</code>

   If you are having difficulty with understanding any of the examples, then Python List
   Comprehension: Explained with Examples will be a good reference. There, I explain list comprehensions
   with 10 examples of increasing complexity. I have used similar or the same examples as those present
   here. Each example shows how to implement something using a for-loop and then how to re-write it
   using list comprehensions. The list comprehension syntax for each conversion and a screen recording
   for how it is done is also included in there.

Set Comprehensions
   Similar to list comprehensions, set comprehensions are used to create sets from an iterable.
   Syntactically, the only difference is that curly braces are used instead of square brackets.
   All examples from list comprehension are applicable here, the only difference is that you need to
   replace the enclosing '[]' with '{}' to get a set comprehension.
   The following code snippet shows examples for set comprehensions and how it differs from list
   comprehension.
<code>
# 1. Create a set of numbers in a range.
numbers = {number for number in range(10)} # Output: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

# 2. List versus set comprehension illustrated.
# Create a new list where we replace all multiples of 2 by 'two',
# all multiples of 3(which are not multiples of 2) by 'three',
# and leave the rest as it is.
modified_numbers_list = ['two' if number % 2 == 0
                          else 'three' if number % 3 == 0
                          else number for number in range(10)]
print(modified_numbers_list) # Output: ['two', 1, 'two', 'three', 'two', 5, 'two', 7, 'two', 'three']
# Doing the same with set comprehension.
modified_numbers_set = {'two' if number % 2 == 0
                         else 'three' if number % 3 == 0
                         else number for number in range(10)}
print(modified_numbers_set) # Output: {1, 5, 7, 'three', 'two'}
</code>

Dictionary Comprehensions
   Dictionary comprehensions are used to create dictionaries from arbitrary key and value expressions.
   Similar to set comprehensions, curly braces are used in this case as well. The only difference from
   set comprehensions is that, instead of providing a single expression, we provide two expressions, one
   for the key and one for the value separated by a colon(:). All examples from list comprehension can
   be extended to dictionary comprehensions as well.
   The following code snippet shows examples for dictionary comprehensions and how it differs from list
   and set comprehensions.
<code>
# 1. Create a dictionary of numbers mapped to their squares.
number_squares_map = {number: number ** 2 for number in range(2, 6)}
print(number_squares_map) # Output: {2: 4, 3: 9, 4: 16, 5: 25}

### 2. List versus set versus dictionary comprehension illustrated.
# Create a new list where we replace all multiples of 2 by 2,
# all multiples of 3(which are not multiples of 2) by 3,
# and leave the rest as it is.
modified_numbers_list = [2 if number % 2 == 0
                          else 3 if number % 3 == 0
                          else number for number in range(10)]
print(modified_numbers_list) # Output: [2, 1, 2, 3, 2, 5, 2, 7, 2, 3]

# Doing the same with set comprehension.
modified_numbers_set = {2 if number % 2 == 0
                         else 3 if number % 3 == 0
                         else number for number in range(10)}
print(modified_numbers_set) # Output: {1, 2, 3, 5, 7}

# Doing the same with dictionary comprehension, all elements are mapped to their squares.
modified_numbers_dict = {(2 if number % 2 == 0
                         else 3 if number % 3 == 0
                         else number): number ** 2  for number in range(10)}
print(modified_numbers_dict) # Output: {2: 64, 1: 1, 3: 81, 5: 25, 7: 49}
# Note the values for keys 2 and 3.
# 2 maps to 64, i.e., 8 ** 2 since 8 is the last multiple of 2 ('number') added to dictionary,
# similarly, 3 maps to 81, i.e., 9 ** 2.
</code>


---
