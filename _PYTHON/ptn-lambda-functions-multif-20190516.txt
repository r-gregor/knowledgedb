filename: ptn_lambda-functions_multif_20190516.txt
https://www.python-course.eu/lambda.php

Lambda, filter, reduce and map

  Lambda Operator

   Some like it, others hate it and many are afraid of the lambda operator. We are confident that you
   will like it, when you have finished with this chapter of our tutorial. If not, you can learn all
   about "[57]List Comprehensions", Guido van Rossums preferred way to do it, because he doesn't like
   Lambda, map, filter and reduce either.
   The lambda operator or lambda function is a way to create small anonymous functions, i.e. functions
   without a name. These functions are throw-away functions, i.e. they are just needed where they have
   been created. Lambda functions are mainly used in combination with the functions filter(), map() and
   reduce(). The lambda feature was added to Python due to the demand from Lisp programmers.
   The general syntax of a lambda function is quite simple:
   lambda argument_list: expression
   
   The argument list consists of a comma separated list of arguments and the expression is an arithmetic
   expression using these arguments. You can assign the function to a variable to give it a name.
   The following example of a lambda function returns the sum of its two arguments:
>>> f = lambda x, y : x + y
>>> f(1,1)
2

  The map() Function
   The advantage of the lambda operator can be seen when it is used in combination with the map()
   function.
   map() is a function with two arguments:
r = map(func, seq)

   The first argument func is the name of a function and the second a sequence (e.g. a list) seq. map()
   applies the function func to all the elements of the sequence seq. It returns a new list with the
   elements changed by func
def fahrenheit(T):
    return ((float(9)/5)*T + 32)
def celsius(T):
    return (float(5)/9)*(T-32)
temp = (36.5, 37, 37.5,39)

F = map(fahrenheit, temp)
C = map(celsius, F)

   In the example above we haven't used lambda. By using lambda, we wouldn't have had to define and name
   the functions fahrenheit() and celsius(). You can see this in the following interactive session:
>>> Celsius = [39.2, 36.5, 37.3, 37.8]
>>> Fahrenheit = map(lambda x: (float(9)/5)*x + 32, Celsius)
>>> print Fahrenheit
[102.56, 97.700000000000003, 99.140000000000001, 100.03999999999999]
>>> C = map(lambda x: (float(5)/9)*(x-32), Fahrenheit)
>>> print C
[39.200000000000003, 36.5, 37.300000000000004, 37.799999999999997]
>>>

   map() can be applied to more than one list. The lists have to have the same length. map() will apply
   its lambda function to the elements of the argument lists, i.e. it first applies to the elements with
   the 0th index, then to the elements with the 1st index until the n-th index is reached:
>>> a = [1,2,3,4]
>>> b = [17,12,11,10]
>>> c = [-1,-4,5,9]
>>> map(lambda x,y:x+y, a,b)
[18, 14, 14, 14]
>>> map(lambda x,y,z:x+y+z, a,b,c)
[17, 10, 19, 23]
>>> map(lambda x,y,z:x+y-z, a,b,c)
[19, 18, 9, 5]

   We can see in the example above that the parameter x gets its values from the list a, while y gets
   its values from b and z from list c.

  Filtering
   The function filter(function, list) offers an elegant way to filter out all the elements of a list,
   for which the function function returns True.
   The function filter(f,l) needs a function f as its first argument. f returns a Boolean value, i.e.
   either True or False. This function will be applied to every element of the list l. Only if f returns
   True will the element of the list be included in the result list.
>>> fib = [0,1,1,2,3,5,8,13,21,34,55]
>>> result = filter(lambda x: x % 2, fib)
>>> print result
[1, 1, 3, 5, 13, 21, 55]
>>> result = filter(lambda x: x % 2 == 0, fib)
>>> print result
[0, 2, 8, 34]
>>>

  Reducing a List
   The function reduce(func, seq) continually applies the function func() to the sequence seq. It
   returns a single value.
   If seq = [ s[1], s[2], s[3], ... , s[n] ], calling reduce(func, seq) works like this:
     * At first the first two elements of seq will be applied to func, i.e. func(s[1],s[2]) The list on
       which reduce() works looks now like this: [ func(s[1], s[2]), s[3], ... , s[n] ]
     * In the next step func will be applied on the previous result and the third element of the list,
       i.e. func(func(s[1], s[2]),s[3])
       The list looks like this now: [ func(func(s[1], s[2]),s[3]), ... , s[n] ]
     * Continue like this until just one element is left and return this element as the result of
       reduce()

   We illustrate this process in the following example:
>>> reduce(lambda x,y: x+y, [47,11,42,13])
113

   The following diagram shows the intermediate steps of the calculation:
   Veranschulichung von Reduce

  Examples of reduce()
   Determining the maximum of a list of numerical values by using reduce:
>>> f = lambda a,b: a if (a > b) else b
>>> reduce(f, [47,11,42,102,13])
102
>>>

   Calculating the sum of the numbers from 1 to 100:
>>> reduce(lambda x, y: x+y, range(1,101))
5050


---
https://www.listendata.com/2019/04/python-lambda-function.html

Python Lambda Function with Examples

   This article covers detailed explanation of lambda function of Python. You will learn how to use it
   in some of the common scenarios with examples.
   Table of Contents

Introduction : Lambda Function
   In non-technical language, lambda is an alternative way of defining function. You can define function
   inline using lambda. It means you can apply a function to some data in one line of python code and
   then join the result. It is called anonymous function as the function can be defined without a name.

Syntax of Lambda Function
     lambda arguments: expression

   Lambda function can have more than one argument but expression cannot be more than 1. The expression
   is evaluated and returned.
   Example
addition = lambda x,y: x + y
addition(2,3) returns 5

   In the above python code, x,y are the arguments and x + y is the expression that gets evaluated and
   returned.

Difference between Lambda and Def Function

   By using both lambda and def, you can create your own user-defined function in python.
def square(x):
     return x**2

square(2) returns 4

square = lambda x:x**2

square(2) returns 4

   There are some difference between them as listed below.
   1. lambda is a keyword that returns a function object and does not create a 'name'. Whereas def
   creates name in the local namespace
   2. lambda functions are good for situations where you want to minimize lines of code as you can
   create function in one line of python code. It is not possible using def
   3. lambda functions are somewhat less readable for most Python users.
   4. lambda functions can only be used once, unless assigned to a variable name.

Lambda Function : Examples
   In this section of tutorial, we will see various practical examples of lambda functions. Let's create
   a pandas data frame for illustration purpose.
import pandas as pd
np.random.seed(12)
df = pd.DataFrame(np.random.randn(5, 3), index=list('abcde'), columns=list('XYZ'))

          X         Y         Z
a  0.472986 -0.681426  0.242439
b -1.700736  0.753143 -1.534721
c  0.005127 -0.120228 -0.806982
d  2.871819 -0.597823  0.472457
e  1.095956 -1.215169  1.342356

   Example 1 : Add 2 to each value of Data Frame
def add2(x):
     return x+2
df.apply(add2)

df.apply(lambda x: x+2)

   Using apply( ) function, you can apply function to pandas dataframe. Both lambda and def returns the
   same output but lambda function can be defined inline within apply( ) function.
          X         Y         Z
a  2.472986  1.318574  2.242439
b  0.299264  2.753143  0.465279
c  2.005127  1.879772  1.193018
d  4.871819  1.402177  2.472457
e  3.095956  0.784831  3.342356

   Example 2 : Create function that returns result of number raised to power
def power(x,n):
     return x**n
df.apply(power, n=3)

df.apply(lambda x : x**3)

              X         Y         Z
a  1.058143e-01 -0.316414  0.014250
b -4.919381e+00  0.427201 -3.614836
c  1.347751e-07 -0.001738 -0.525523
d  2.368489e+01 -0.213657  0.105460
e  1.316375e+00 -1.794361  2.418820

   Example 3 : Conditional Statement (IF-ELSE)
   Suppose you want to create a new variable which is missing or blank if value of an existing variable
   is less than 90. Else copy the same value of existing variable. Let's create a dummy data frame
   called sample which contains only 1 variable named var1. Condition : If var1 is less than 90,
   function should return missing else value of var1.
import numpy as np
sample = pd.DataFrame({'var1':[10,100,40] })

sample['newvar1'] = sample.apply(lambda x: np.nan if x['var1'] < 90 else x['var1'], axis=1)

   How to read the above lambda function

     x: value_if_condition_true if logical_condition else value_if_condition_false

   axis=1 tells python to apply function to each row of a particular column. By default, it is 0 which
   means apply function to each column of a row.
   There is one more way to write the above function without specifying axis option. It will be applied
   to series sample['var1']
sample['newvar1'] = sample['var1'].apply(lambda x: np.nan if x < 90 else x)

   The same function can also be written using def. See the code below.
def miss(x):
    if x["var1"] < 90:
        return np.nan
    else:
        return x["var1"]

sample['newvar1'] = sample.apply(miss, axis=1)

   var1  newvar1
0    10      NaN
1   100    100.0
2    40      NaN

   Example 4 : Multiple or Nested IF-ELSE Statement
   Suppose you want to create a flag wherein it is yes when value of a variable is greater than or equal
   to 1 but less than or equal to 5. Else it is no if value is equal to 7. Otherwise missing.
mydf = pd.DataFrame({'Names': np.arange(1,10,2)})
mydf["flag"] = mydf["Names"].apply(lambda x: "yes" if x>=1 and x<=5 else "no" if x==7 else np.nan)

   Names flag
0      1  yes
1      3  yes
2      5  yes
3      7   no
4      9  NaN

   Lambda functions are used along with built-in functions like filter(), map().

map() function
   map functions executes the function object (i.e. lambda or def) for each element and returns a list
   of the elements modified by the function object. In the code below, we are multiplying each element
   by 2.
mylist = [1, 2, 3, 4]
map(lambda x : x*2, mylist)

   It returns map object. You cannot see the returned values directly. To view the result, you need to
   wrap it in list( )
list(map(lambda x : x*2, mylist))
Output : [2, 4, 6, 8]

filter() function
   It returns the items where function is true. If none of the element meets condition, it will return
   nothing. In the code below, we are checking if value is greater than 2.
list(filter(lambda x : x > 2 , mylist))
Output : [3, 4]


---
