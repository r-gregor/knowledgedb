https://docs.python.org/2/library/smtplib.html

20.12. smtplib — SMTP protocol client
Source code: Lib/smtplib.py

The smtplib module defines an SMTP client session object that can be used to send mail to any Internet
machine with an SMTP or ESMTP listener daemon. For details of SMTP and ESMTP operation, consult RFC 821
(Simple Mail Transfer Protocol) and RFC 1869 (SMTP Service Extensions).

class smtplib.SMTP([host[, port[, local_hostname[, timeout]]]])
A SMTP instance encapsulates an SMTP connection. It has methods that support a full repertoire of SMTP
and ESMTP operations. If the optional host and port parameters are given, the SMTP connect() method is
called with those parameters during initialization. If specified, local_hostname is used as the FQDN of the
local host in the HELO/EHLO command. Otherwise, the local hostname is found using socket.getfqdn(). If the
connect() call returns anything other than a success code, an SMTPConnectError is raised. The optional
timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if
not specified, the global default timeout setting will be used). If the timeout expires, socket.timeout
is raised.

For normal use, you should only require the initialization/connect, sendmail(), and quit() methods. An
example is included below.

Changed in version 2.6: timeout was added.

class smtplib.SMTP_SSL([host[, port[, local_hostname[, keyfile[, certfile[, timeout]]]]]])
A SMTP_SSL instance behaves exactly the same as instances of SMTP. SMTP_SSL should be used for situations
where SSL is required from the beginning of the connection and using starttls() is not appropriate. If
host is not specified, the local host is used. If port is omitted, the standard SMTP-over-SSL port
(465) is used. local_hostname has the same meaning as it does for the SMTP class. keyfile and certfile
are also optional, and can contain a PEM formatted private key and certificate chain file for the SSL
connection. The optional timeout parameter specifies a timeout in seconds for blocking operations like
the connection attempt (if not specified, the global default timeout setting will be used). If the
timeout expires, socket.timeout is raised.

New in version 2.6.

class smtplib.LMTP([host[, port[, local_hostname]]])
The LMTP protocol, which is very similar to ESMTP, is heavily based on the standard SMTP client. It’s
common to use Unix sockets for LMTP, so our connect() method must support that as well as a regular
host:port server. local_hostname has the same meaning as it does for the SMTP class. To specify a Unix
socket, you must use an absolute path for host, starting with a ‘/’.

Authentication is supported, using the regular SMTP mechanism. When using a Unix socket, LMTP generally
don’t support or require any authentication, but your mileage might vary.

New in version 2.6.

A nice selection of exceptions is defined as well:

exception smtplib.SMTPException
The base exception class for all the other exceptions provided by this module.

exception smtplib.SMTPServerDisconnected
This exception is raised when the server unexpectedly disconnects, or when an attempt is made to use
the SMTP instance before connecting it to a server.

exception smtplib.SMTPResponseException
Base class for all exceptions that include an SMTP error code. These exceptions are generated in some
instances when the SMTP server returns an error code. The error code is stored in the smtp_code attribute
of the error, and the smtp_error attribute is set to the error message.

exception smtplib.SMTPSenderRefused
Sender address refused. In addition to the attributes set by on all SMTPResponseException exceptions,
this sets ‘sender’ to the string that the SMTP server refused.

exception smtplib.SMTPRecipientsRefused
All recipient addresses refused. The errors for each recipient are accessible through the attribute
recipients, which is a dictionary of exactly the same sort as SMTP.sendmail() returns.

exception smtplib.SMTPDataError
The SMTP server refused to accept the message data.

exception smtplib.SMTPConnectError
Error occurred during establishment of a connection with the server.

exception smtplib.SMTPHeloError
The server refused our HELO message.

exception smtplib.SMTPAuthenticationError
SMTP authentication went wrong. Most probably the server didn’t accept the username/password combination
provided.

See also
RFC 821 - Simple Mail Transfer Protocol
Protocol definition for SMTP. This document covers the model, operating procedure, and protocol details
for SMTP.

RFC 1869 - SMTP Service Extensions
Definition of the ESMTP extensions for SMTP. This describes a framework for extending SMTP with new commands,
supporting dynamic discovery of the commands provided by the server, and defines a few additional commands.

20.12.1. SMTP Objects
An SMTP instance has the following methods:

SMTP.set_debuglevel(level)
Set the debug output level. A true value for level results in debug messages for connection and for all
messages sent to and received from the server.

SMTP.docmd(cmd[, argstring])
Send a command cmd to the server. The optional argument argstring is simply concatenated to the command,
separated by a space.

This returns a 2-tuple composed of a numeric response code and the actual response line (multiline
responses are joined into one long line.)

In normal operation it should not be necessary to call this method explicitly. It is used to implement
other methods and may be useful for testing private extensions.

If the connection to the server is lost while waiting for the reply, SMTPServerDisconnected will be raised.

SMTP.connect([host[, port]])
Connect to a host on a given port. The defaults are to connect to the local host at the standard SMTP
port (25). If the hostname ends with a colon (':') followed by a number, that suffix will be stripped
off and the number interpreted as the port number to use. This method is automatically invoked by the
constructor if a host is specified during instantiation. Returns a 2-tuple of the response code and
message sent by the server in its connection response.

SMTP.helo([hostname])
Identify yourself to the SMTP server using HELO. The hostname argument defaults to the fully qualified
domain name of the local host. The message returned by the server is stored as the helo_resp attribute
of the object.

In normal operation it should not be necessary to call this method explicitly. It will be implicitly
called by the sendmail() when necessary.

SMTP.ehlo([hostname])
Identify yourself to an ESMTP server using EHLO. The hostname argument defaults to the fully qualified domain
name of the local host. Examine the response for ESMTP option and store them for use by has_extn(). Also
sets several informational attributes: the message returned by the server is stored as the ehlo_resp
attribute, does_esmtp is set to true or false depending on whether the server supports ESMTP, and
esmtp_features will be a dictionary containing the names of the SMTP service extensions this server
supports, and their parameters (if any).

Unless you wish to use has_extn() before sending mail, it should not be necessary to call this method
explicitly. It will be implicitly called by sendmail() when necessary.

SMTP.ehlo_or_helo_if_needed()
This method call ehlo() and or helo() if there has been no previous EHLO or HELO command this session. It
tries ESMTP EHLO first.

SMTPHeloError
The server didn’t reply properly to the HELO greeting.
New in version 2.6.

SMTP.has_extn(name)
Return True if name is in the set of SMTP service extensions returned by the server, False otherwise. Case
is ignored.

SMTP.verify(address)
Check the validity of an address on this server using SMTP VRFY. Returns a tuple consisting of code 250
and a full RFC 822 address (including human name) if the user address is valid. Otherwise returns an
SMTP error code of 400 or greater and an error string.

Note Many sites disable SMTP VRFY in order to foil spammers.
SMTP.login(user, password)
Log in on an SMTP server that requires authentication. The arguments are the username and the password
to authenticate with. If there has been no previous EHLO or HELO command this session, this method tries
ESMTP EHLO first. This method will return normally if the authentication was successful, or may raise
the following exceptions:

SMTPHeloError
The server didn’t reply properly to the HELO greeting.
SMTPAuthenticationError
The server didn’t accept the username/password combination.
SMTPException
No suitable authentication method was found.
SMTP.starttls([keyfile[, certfile]])
Put the SMTP connection in TLS (Transport Layer Security) mode. All SMTP commands that follow will be
encrypted. You should then call ehlo() again.

If keyfile and certfile are provided, these are passed to the socket module’s ssl() function.

If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first.

Changed in version 2.6.

SMTPHeloError
The server didn’t reply properly to the HELO greeting.

SMTPException
The server does not support the STARTTLS extension.
Changed in version 2.6.

RuntimeError
SSL/TLS support is not available to your Python interpreter.
SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options])
Send mail. The required arguments are an RFC 822 from-address string, a list of RFC 822 to-address strings
(a bare string will be treated as a list with 1 address), and a message string. The caller may pass a
list of ESMTP options (such as 8bitmime) to be used in MAIL FROM commands as mail_options. ESMTP options
(such as DSN commands) that should be used with all RCPT commands can be passed as rcpt_options. (If
you need to use different ESMTP options to different recipients you have to use the low-level methods
such as mail(), rcpt() and data() to send the message.)

Note The from_addr and to_addrs parameters are used to construct the message envelope used by the
transport agents. The SMTP does not modify the message headers in any way.
If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first. If
the server does ESMTP, message size and each of the specified options will be passed to it (if the option
is in the feature set the server advertises). If EHLO fails, HELO will be tried and ESMTP options suppressed.

This method will return normally if the mail is accepted for at least one recipient. Otherwise it will
raise an exception. That is, if this method does not raise an exception, then someone should get your
mail. If this method does not raise an exception, it returns a dictionary, with one entry for each
recipient that was refused. Each entry contains a tuple of the SMTP error code and the accompanying
error message sent by the server.

This method may raise the following exceptions:

SMTPRecipientsRefused
All recipients were refused. Nobody got the mail. The recipients attribute of the exception object is
a dictionary with information about the refused recipients (like the one returned when at least one
recipient was accepted).

SMTPHeloError
The server didn’t reply properly to the HELO greeting.

SMTPSenderRefused
The server didn’t accept the from_addr.

SMTPDataError
The server replied with an unexpected error code (other than a refusal of a recipient).
Unless otherwise noted, the connection will be open even after an exception is raised.

SMTP.quit()
Terminate the SMTP session and close the connection. Return the result of the SMTP QUIT command.

Changed in version 2.6: Return a value.

Low-level methods corresponding to the standard SMTP/ESMTP commands HELP, RSET, NOOP, MAIL, RCPT, and
DATA are also supported. Normally these do not need to be called directly, so they are not documented
here. For details, consult the module code.

20.12.2. SMTP Example
This example prompts the user for addresses needed in the message envelope (‘To’ and ‘From’
addresses), and the message to be delivered. Note that the headers to be included with the message must
be included in the message as entered; this example doesn’t do any processing of the RFC 822 headers. In
particular, the ‘To’ and ‘From’ addresses must be included in the message headers explicitly.

<code>
import smtplib

def prompt(prompt):
    return raw_input(prompt).strip()

fromaddr = prompt("From: ")
toaddrs  = prompt("To: ").split()
print "Enter message, end with ^D (Unix) or ^Z (Windows):"

# Add the From: and To: headers at the start!
msg = ("From: %s\r\nTo: %s\r\n\r\n"
       % (fromaddr, ", ".join(toaddrs)))
while 1:
    try:
        line = raw_input()
    except EOFError:
        break
    if not line:
        break
    msg = msg + line

print "Message length is " + repr(len(msg))

server = smtplib.SMTP('localhost')
server.set_debuglevel(1)
server.sendmail(fromaddr, toaddrs, msg)
server.quit()
Note In general, you will want to use the email package’s features to construct an email message,
which you can then convert to a string and send via sendmail(); see email: Examples.
</code>


---
https://docs.python.org/2/library/email-examples.html#email-examples

18.1.11. email: Examples
Here are a few examples of how to use the email package to read, write, and send simple email messages,
as well as more complex MIME messages.

First, let’s see how to create and send a simple text message:

# Import smtplib for the actual sending function
import smtplib

# Import the email modules we'll need
from email.mime.text import MIMEText

# Open a plain text file for reading.  For this example, assume that
# the text file contains only ASCII characters.
fp = open(textfile, 'rb')
# Create a text/plain message
msg = MIMEText(fp.read())
fp.close()

# me == the sender's email address
# you == the recipient's email address
msg['Subject'] = 'The contents of %s' % textfile
msg['From'] = me
msg['To'] = you

# Send the message via our own SMTP server, but don't include the
# envelope header.
s = smtplib.SMTP('localhost')
s.sendmail(me, [you], msg.as_string())
s.quit()

And parsing RFC822 headers can easily be done by the parse(filename) or parsestr(message_as_string)
methods of the Parser() class:

# Import the email modules we'll need
from email.parser import Parser

#  If the e-mail headers are in a file, uncomment this line:
#headers = Parser().parse(open(messagefile, 'r'))

#  Or for parsing headers in a string, use:
headers = Parser().parsestr('From: <user@example.com>\n'
        'To: <someone_else@example.com>\n'
        'Subject: Test message\n'
        '\n'
        'Body would go here\n')

#  Now the header items can be accessed as a dictionary:
print 'To: %s' % headers['to']
print 'From: %s' % headers['from']
print 'Subject: %s' % headers['subject']

Here’s an example of how to send a MIME message containing a bunch of family pictures that may be
residing in a directory:

<code>
# Import smtplib for the actual sending function
import smtplib

# Here are the email package modules we'll need
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart

COMMASPACE = ', '

# Create the container (outer) email message.
msg = MIMEMultipart()
msg['Subject'] = 'Our family reunion'
# me == the sender's email address
# family = the list of all recipients' email addresses
msg['From'] = me
msg['To'] = COMMASPACE.join(family)
msg.preamble = 'Our family reunion'

# Assume we know that the image files are all in PNG format
for file in pngfiles:
    # Open the files in binary mode.  Let the MIMEImage class automatically
    # guess the specific image type.
    fp = open(file, 'rb')
    img = MIMEImage(fp.read())
    fp.close()
    msg.attach(img)

# Send the email via our own SMTP server.
s = smtplib.SMTP('localhost')
s.sendmail(me, family, msg.as_string())
s.quit()
</code>


Here’s an example of how to send the entire contents of a directory as an email message: [1]

<code>
#!/usr/bin/env python

"""Send the contents of a directory as a MIME message."""

import os
import sys
import smtplib
# For guessing MIME type based on file name extension
import mimetypes

from optparse import OptionParser

from email import encoders
from email.message import Message
from email.mime.audio import MIMEAudio
from email.mime.base import MIMEBase
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

COMMASPACE = ', '


def main():
    parser = OptionParser(usage="""\
Send the contents of a directory as a MIME message.

Usage: %prog [options]

Unless the -o option is given, the email is sent by forwarding to your local
SMTP server, which then does the normal delivery process.  Your local machine
must be running an SMTP server.
""")
    parser.add_option('-d', '--directory',
                      type='string', action='store',
                      help="""Mail the contents of the specified directory,
                      otherwise use the current directory.  Only the regular
                      files in the directory are sent, and we don't recurse to
                      subdirectories.""")
    parser.add_option('-o', '--output',
                      type='string', action='store', metavar='FILE',
                      help="""Print the composed message to FILE instead of
                      sending the message to the SMTP server.""")
    parser.add_option('-s', '--sender',
                      type='string', action='store', metavar='SENDER',
                      help='The value of the From: header (required)')
    parser.add_option('-r', '--recipient',
                      type='string', action='append', metavar='RECIPIENT',
                      default=[], dest='recipients',
                      help='A To: header value (at least one required)')
    opts, args = parser.parse_args()
    if not opts.sender or not opts.recipients:
        parser.print_help()
        sys.exit(1)
    directory = opts.directory
    if not directory:
        directory = '.'
    # Create the enclosing (outer) message
    outer = MIMEMultipart()
    outer['Subject'] = 'Contents of directory %s' % os.path.abspath(directory)
    outer['To'] = COMMASPACE.join(opts.recipients)
    outer['From'] = opts.sender
    outer.preamble = 'You will not see this in a MIME-aware mail reader.\n'

    for filename in os.listdir(directory):
        path = os.path.join(directory, filename)
        if not os.path.isfile(path):
            continue
        # Guess the content type based on the file's extension.  Encoding
        # will be ignored, although we should check for simple things like
        # gzip'd or compressed files.
        ctype, encoding = mimetypes.guess_type(path)
        if ctype is None or encoding is not None:
            # No guess could be made, or the file is encoded (compressed), so
            # use a generic bag-of-bits type.
            ctype = 'application/octet-stream'
        maintype, subtype = ctype.split('/', 1)
        if maintype == 'text':
            fp = open(path)
            # Note: we should handle calculating the charset
            msg = MIMEText(fp.read(), _subtype=subtype)
            fp.close()
        elif maintype == 'image':
            fp = open(path, 'rb')
            msg = MIMEImage(fp.read(), _subtype=subtype)
            fp.close()
        elif maintype == 'audio':
            fp = open(path, 'rb')
            msg = MIMEAudio(fp.read(), _subtype=subtype)
            fp.close()
        else:
            fp = open(path, 'rb')
            msg = MIMEBase(maintype, subtype)
            msg.set_payload(fp.read())
            fp.close()
            # Encode the payload using Base64
            encoders.encode_base64(msg)
        # Set the filename parameter
        msg.add_header('Content-Disposition', 'attachment', filename=filename)
        outer.attach(msg)
    # Now send or store the message
    composed = outer.as_string()
    if opts.output:
        fp = open(opts.output, 'w')
        fp.write(composed)
        fp.close()
    else:
        s = smtplib.SMTP('localhost')
        s.sendmail(opts.sender, opts.recipients, composed)
        s.quit()


if __name__ == '__main__':
    main()
</code>

    
Here’s an example of how to unpack a MIME message like the one above, into a directory of files:

<code>
#!/usr/bin/env python

"""Unpack a MIME message into a directory of files."""

import os
import sys
import email
import errno
import mimetypes

from optparse import OptionParser

<code>
def main():
    parser = OptionParser(usage="""\
Unpack a MIME message into a directory of files.

Usage: %prog [options] msgfile
""")
    parser.add_option('-d', '--directory',
                      type='string', action='store',
                      help="""Unpack the MIME message into the named
                      directory, which will be created if it doesn't already
                      exist.""")
    opts, args = parser.parse_args()
    if not opts.directory:
        parser.print_help()
        sys.exit(1)

    try:
        msgfile = args[0]
    except IndexError:
        parser.print_help()
        sys.exit(1)

    try:
        os.mkdir(opts.directory)
    except OSError as e:
        # Ignore directory exists error
        if e.errno != errno.EEXIST:
            raise

    fp = open(msgfile)
    msg = email.message_from_file(fp)
    fp.close()

    counter = 1
    for part in msg.walk():
        # multipart/* are just containers
        if part.get_content_maintype() == 'multipart':
            continue
        # Applications should really sanitize the given filename so that an
        # email message can't be used to overwrite important files
        filename = part.get_filename()
        if not filename:
            ext = mimetypes.guess_extension(part.get_content_type())
            if not ext:
                # Use a generic bag-of-bits extension
                ext = '.bin'
            filename = 'part-%03d%s' % (counter, ext)
        counter += 1
        fp = open(os.path.join(opts.directory, filename), 'wb')
        fp.write(part.get_payload(decode=True))
        fp.close()


if __name__ == '__main__':
    main()
</code>    
  
  
Here’s an example of how to create an HTML message with an alternative plain text version: [2]

<code>
#!/usr/bin/env python

import smtplib

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# me == my email address
# you == recipient's email address
me = "my@email.com"
you = "your@email.com"

# Create message container - the correct MIME type is multipart/alternative.
msg = MIMEMultipart('alternative')
msg['Subject'] = "Link"
msg['From'] = me
msg['To'] = you

# Create the body of the message (a plain-text and an HTML version).
text = "Hi!\nHow are you?\nHere is the link you wanted:\nhttps://www.python.org"
html = """\
<html>
  <head></head>
  <body>
    <p>Hi!<br>
       How are you?<br>
       Here is the <a href="https://www.python.org">link</a> you wanted.
    </p>
  </body>
</html>
"""

# Record the MIME types of both parts - text/plain and text/html.
part1 = MIMEText(text, 'plain')
part2 = MIMEText(html, 'html')

# Attach parts into message container.
# According to RFC 2046, the last part of a multipart message, in this case
# the HTML message, is best and preferred.
msg.attach(part1)
msg.attach(part2)

# Send the message via local SMTP server.
s = smtplib.SMTP('localhost')
# sendmail function takes 3 arguments: sender's address, recipient's address
# and message to send - here it is sent as one string.
s.sendmail(me, you, msg.as_string())
s.quit()
</code>

