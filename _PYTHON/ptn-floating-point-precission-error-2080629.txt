In Python, why does 8.5 - 8.4 give 0.099999999999999964?
Saer Gardum
Saer Gardum
Updated Mon · Upvoted by Ian Hoffman, Computer Science major at Cornell University - I do a lot of
personal projects
Oh yes, you’ve just encountered one of the oldest headaches in computer programming, and yet, still
troubling us, occasionally.

Not only in Python, but in almost every language. You may sometimes hear it called “Floating point
precision error”…

And the expected outcome, 0.1, is one of the best examples of it occurring.

The reason for this is very similar to the one that we cannot depict the exact value of 1/3 with a
decimal number of a finite number of digits. We could write 0.333333…. which, would imply a digit *
value sum, such as:

3 * 1/10 + 3 * 1/100 + 3 * 1/1000 + 3 * 1/10000 ….

but, no matter how many 3s we use, no matter how close we get, we will still be missing something.

Now, as you may already know, numbers in computers are stored in a binary representation of a finite
number of digits. That means, among other things, that as we proceed in digits from left to right, each
one’s value is divided by 2 (whereas in decimal the value becomes 10 times smaller, thus divided by 10,
as seen in the 1/3 example).

Therefore, the first digit after the “point” has a value of 1/2, the second, 1/4, the third 1/8 and
so on… (I believe that you get the picture). A number can, once again, be expressed as a sum of these
digit * value products. But this time, each digit’s value can be multiplier by 1 or 0, which makes it
quite easier for us.

Given this, let’s try to make 0.1 as a sum of this type. We can do that by gradually subtracting from
0.1 these negative powers of 2, with the hope that we reach zero (getting below zero is not allowed,
though). That would be:

0*1/2 + 0*1/4 + 0*1/8 + 1*1/16 + 1*1/32 + 0*1/64 + 0*1/128 + 1*1/256 + 1*1/512 …

which, as you may have already figured, corresponds to the binary number: 0.000110011…

If you proceed with divisions, you ‘ll see a repeating pattern (0011), which never ends. That’s why
these numbers are often called periodical.

In python, as in many other languages, standard, so called single-precision, floating point numbers are
by default 32 bits, so 0.1 would be expressed as:

0 01111011 10011001100110011001101

corresponding to: 0.000110011001100110011001101

The third, long part of the representation is the number, aka “mantissa” (where you’ll notice the
first “1” is missing, implied, to save 1 precious bit. It’s a convention to start the number from
the first non-zero bit, so that we can omit it and the exponent takes care of this).

The rest are the sign (first 1 bit = 0, meaning ‘+’) and the “biased-127” exponent (8-bits =
123, where 123 - 127 = -4, meaning moving the point 4 places to the right).

When these 32 bits of standard floating point representation, are turned back to decimal, so that we, humans,
can understand what we see (at least partially), the result is precisely what you see: 0.099999999999999964

So, the question is, “is there a way to express the decimal 0.1 as a binary number with a finite number
of digits”?

And the answer would be “no, unfortunately not, but we can get really, really close”.

How can we, at least partially, avoid this when printing numbers?

Using formating, ie, for 3 decimal digits:

either “%.3f” % 0.1

or “{:.3f}”.format(0.1)

OTAH, when using the number in calculations (without even rounding it), its precision is usually good
for most applications.

EDIT: Python also uses some “magic”, so that it “remembers” the original decimal representation
of a number. Therefore, 0.1, if directly assigned (or printed) would be displayed properly. This is not
true, though, if it is the outcome of an operation (such as your example) and despite the fact that the
participating numbers both have 1 decimal digit. In this case, “round” function could take advantage
of Python’s magic and take care of this, too.

i.e. round(8.5 - 8.4, 3) would also display the desired result: 0.1. (and perhaps even better than .3f,
sparing us of the trailing zeros)

It’s interesting to note that the floating point representation of the outcome would remain the same
in this example (still periodical), since the number’s value does not really change (as it would,
i.e., in a call like round(0.59, 1) ).

It’s just that we give python a hint for displaying it properly.

EDIT: as comments have noted, and as in Jarred Allen’s answer, there are plenty other ways to deal
with this problem using some great python libraries for arithmetic.

---
