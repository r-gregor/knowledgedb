filename: ptn_essential-free--maths-tools_20180626.txt
https://www.linuxlinks.com/essential-free-python-maths-tools/

Essential Free Python Maths Tools
June 24, 2018

   Python is a very popular general purpose programming language — with good reason. It’s object
   oriented, semantically structured, extremely versatile, and well supported. Scientists favour Python
   because it’s easy to use and learn, offers a good set of built-in features, and is highly extensible.
   Python’s readability makes it an excellent first programming language.

   The Python Standard Library (PSL) is the the standard library that’s distributed with Python. The
   library comes with, among other things, modules that carry out many mathematical operations.

   The math module is one of the core modules in PSL which performs mathematical operations. The module
   gives access to the underlying C library functions for floating point math.

   It offers number-theoretic and representation functions, power and logarithmic functions,
   trigonometric functions, angular conversion, hyperbolic functions, special functions, and constants.
   Here’s a quick example:

   PSL also provides other mathematics functions:
     * cmath – provides access to mathematical functions for complex numbers.
     * decimal – provides support for fast correctly-rounded decimal floating point arithmetic.
     * fractions – provides support for rational number arithmetic.
     * random – implements pseudo-random number generators for various distributions.
     * statistics – provides functions for calculating mathematical statistics of numeric data. The
       statistics module is a relatively late addition; it was added in Python 3.4.
     * numbers – numeric abstract base classes.

   Here’s the statistics module performing some simple statistical averaging (mean, mode, and median
   respectively).

   But PSL is literally the tip of the iceberg. Python has thousands of components available ranging
   from individual programs and modules to packages and entire application development frameworks. We’ve
   covered some of these components in [35]earlier Python articles. Some of the software will be of
   interest to mathematicians particularly my article on [36]Python Visualization Packages. Software
   like [37]matplotlib, [38]seaborn, [39]pandas, and [40]Bokeh are some of my go-to libraries.

   I want to share some great libraries and tools that are useful for mathematicians working with
   Python. All of the 8 software receive my strongest recommendation. They expand immensely on the
   mathematics functionality provided by the Python Standard Library. They are all released under an
   open source license.

   Python Mathematics Tools:
   NumPy            Core package for scientific computing with Python
   SageMath         Computer algebra system
   SymPy            Library for symbolic mathematics
   SciPy            Ecosystem for mathematics, science, and engineering.
   mpmath           Library for arbitrary-precision floating-point arithmetic
   patsy            Package for describing statistical models and for building design matrices
   statsmodels      Statistical modeling and econometrics
   ADiPy            Automatic differentiation library

   [ https://www.linuxlinks.com/numpy-core-package-scientific-computing-python/                             ]
   [ https://www.linuxlinks.com/sage/                                                                       ]
   [ https://www.linuxlinks.com/sympy-python-library-for-symbolic-mathematics/                              ]
   [ https://www.linuxlinks.com/scipy-scientific-computing-tools-for-python/                                ]
   [ https://www.linuxlinks.com/mpmath-python-library-for-arbitrary-precision-floating-point-arithmetic/    ]
   [ https://www.linuxlinks.com/patsy-python-package-for-statistical-data-transformations/                  ]
   [ https://www.linuxlinks.com/statsmodels-statistical-modeling-econometrics-python/                       ]
   [ https://www.linuxlinks.com/adipy-automatic-differentiation-library/                                    ]

---
https://linuxhint.com/10_best_math_libraries_python/

10 Best Math Libraries for Python

Many times, when you write programs you need to use special functions that others have used before you. When
this happens, open source comes to the rescue and gives you a library that covers that need. Python calls
theirs modules, to use modules you need to import them.Modules for mathematics are especially useful when
you have the theory ready but need to use standard math for your particular problem.  The Mathematics
module in the Python standard library has many features. It is useful to check if you can solve your
problem easily with these functions. If you need to know what functions exist you need to go through
the list. However, first realize that the module implements all the C standard functions.
The simplest use of Python for math is as a calculator. To do this, start Python on the terminal and
use the print function.

The simple math is available without even activating the math module but beyond addition, subtraction,
division and multiplication you need to import the math module. To make the code short, import as
‘m’. Now you put m and a dot in front of any functions you use. This works the same for all modules
in Python. If you want to use complex numbers, use the cmath module.

For functions beyond that, below are some libraries specialized for certain needs.

1. The NumPy libraries handles the mathematical functions for arrays. Creating arrays of any type is possible
and optimizing in memory is also supported. The N-dimensional array is fully covered. Functions that
the library handles includes iteration, Fourier Transfom, linear algebra and financial functions. This
library also implements a C-API so you can use the speed of C without translating your entire project.

2. SciPy is a collection of science related software, with mathematical tasks at the center. If you need
to calculate anything, this is a good place to start. The collection includes integration, optimization
and sparse eigenvalues.

3. Scikit-image is a great resource for manipulating and analysing images. The library has features for
detecting lines, edges and features. It also has restoration features, for when you have images with
defects on them. There are also many analysis tools available.

4. Scikit-learn is useful for getting machine learning code together. It contains modules for classification,
regression, clustering and more. The web page is full of useful examples so you can easily get started.

5. Pandas is your goto resource for big data sets to do your data science on. Pandas supports data analysis
and modeling and does it with simple and clear code. Many functions are translatable from R, so you can
prototype with Pandas.

6. Statsmodels covers your needs for statistical models. This library handles many similar things like
Panda but can also import Sata files and handle time series analysis. There is a sandbox included where
you can experiment with different statistical models. That particular code is not tested yet but maybe
it is close enough for you to finish the job.

7. Matplotlib: For plotting your graphs, includes animated plots.
The earlier libraries are great for the mathematics but they have deliberately stayed away from
plotting. Instead they let libraries like matplotlib handle these
This has made matplotlib extensive and it also has many supporting software that covers mapping, plotting
and electronic circuit design.

8. Gnuplot.py is an interface package to the popular gnuplot program. It has an object oriented design so
you can add your own extensions.

9. Patsy describes statistical models in all its forms. It also has many functions that are common in R
but with small differences, like how to denote exponentiation. Patsy will build matrices using formulas,
very similar to the way it is done in S and R.

10. Sympy: When you want to print your mathematical formulas you use this library. It also has the capability
to evaluate expressions. It is very useful for creating formulas in your LaTeX documents. You can even
run Sympy live in your browser to test it out.

Now that you have learned what projects to use for mathematics you will soon be short on processing
power. To remedy that situation parallel execution is the most common solution. There are several Python
libraries for this purpose.

The mpi4py library provides bindings to the standard Message Passing Interface. You need to download a
standard parallel library like mpich or openmpi. Both are available in the standard repositories.

The other library is parallel python or pp. Parallel Python creates a server and many clients that take
jobs from your server. This project does not implement a standard, instead you use the server and client
from this same package on all your machines. This is simpler in some ways but it requires more when your
project becomes big and you need other people to lend you processing power.

These libraries are all good in their own right but make sure to pick the correct one for your needs.
The choice is not irreversible but will require quite a lot of work later in a project. Your source code
will need to be changed to use a new library and new faults will occur so choose wisely.

If you want to do your calculations interactively, install and use Ipython as this is an enhanced version
of the command line version of Python. Also, if you have not already, consider using Jupyter. It provides
you with notebook, documents and a code console on the same workspace.

The framework acts as an IDE but is aimed more at exploring the problems and the software you are
developing than traditional IDEs.

---
