filename: ptn_working-with-pdfs_20190617.txt
https://stackabuse.com/working-with-pdfs-in-python-reading-and-splitting-pages/


Working with PDFs in Python: Reading and Splitting Pages
April 24, 2019

The PDF Document Format
   Today, the Portable Document Format (PDF) belongs to the most commonly used data formats. In 1990,
   the structure of a PDF document was defined by Adobe. The idea behind the PDF format is that
   transmitted data/documents look exactly the same for both parties that are involved in the
   communication process - the creator, author or sender, and the receiver. PDF is the successor of the
   PostScript format, and standardized as ISO 32000-2:2017.

Processing PDF Documents
   For Linux there are mighty command line tools available such as pdftk and pdfgrep. As a
   developer there is a huge excitement building your own software that is based on Python and uses PDF
   libraries that are freely available.

   This article is the beginning of a little series, and will cover these helpful Python libraries. In
   Part One we will focus on the manipulation of existing PDFs. You will learn how to read and extract
   the content (both text and images), rotate single pages, and split documents into its individual
   pages. Part Two will cover adding a watermark based on overlays. Part Three will exclusively focus on
   writing/creating PDFs, and will also include both deleting and re-combining single pages into a new
   document.

Tools and Libraries
   The range of available solutions for Python-related PDF tools, modules, and libraries is a bit
   confusing, and it takes a moment to figure out what is what, and which projects are maintained
   continuously. Based on our research these are the candidates that are up-to-date:
     * PyPDF2: A Python library to extract document information and content, split documents
       page-by-page, merge documents, crop pages, and add watermarks. PyPDF2 supports both unencrypted
       and encrypted documents.
     * PDFMiner: Is written entirely in Python, and works well for Python 2.4. For Python 3, use the
       cloned package PDFMiner.six. Both packages allow you to parse, analyze, and convert PDF
       documents. This includes the support for PDF 1.7 as well as CJK languages (Chinese, Japanese, and
       Korean), and various font types (Type1, TrueType, Type3, and CID).
     * PDFQuery: It describes itself as "a fast and friendly PDF scraping library" which is
       implemented as a wrapper around PDFMiner, lxml, and pyquery. Its design aim is "to
       reliably extract data from sets of PDFs with as little code as possible."
     * tabula-py: It is a simple Python wrapper of tabula-java, which can read tables from PDFs
       and convert them into Pandas DataFrames. It also enables you to convert a PDF file into a
       CSV/TSV/JSON file.
     * pdflib for Python: An extension of the Poppler Library that offers Python bindings for
       it. It allows you to parse, analyze, and convert PDF documents. Not to be confused with its
       commercial pendant that has the same name.
     * PyFPDF: A library for PDF document generation under Python. Ported from the FPDF PHP
       library, a well-known PDFlib-extension replacement with many examples, scripts, and derivatives.
     * PDFTables: A commercial service that offers extraction from tables that comes as a PDF
       document. Offers an API so that PDFTables can be used as SAAS.
     * PyX - the Python graphics package: PyX is a Python package for the creation of PostScript,
       PDF, and SVG files. It combines an abstraction of the PostScript drawing model with a TeX/LaTeX
       interface. Complex tasks like creating 2D and 3D plots in publication-ready quality are built out
       of these primitives.
     * ReportLab: An ambitious, industrial-strength library largely focused on precise creation of
       PDF documents. Available freely as an Open Source version as well as a commercial, enhanced
       version named ReportLab PLUS.
     * PyMuPDF (aka "fitz"): Python bindings for MuPDF, which is a lightweight PDF and XPS viewer.
       The library can access files in PDF, XPS, OpenXPS, epub, comic and fiction book formats, and it
       is known for its top performance and high rendering quality.
     * pdfrw: A pure Python-based PDF parser to read and write PDF. It faithfully reproduces vector
       formats without rasterization. In conjunction with ReportLab, it helps to re-use portions of
       existing PDFs in new PDFs created with ReportLab.

   Library          Used for
   PyPDF2           Reading
   PyMuPDF          Reading
   pdflib           Reading
   PDFTables        Reading
   tabula-py        Reading
   PDFMiner.six     Reading
   PDFQuery         Reading
   pdfrw            Reading, Writing/Creating
   Reportlab        Writing/Creating
   PyX              Writing/Creating
   PyFPDF           Writing/Creating

   Below we will focus on PyPDF2 and PyMuPDF, and explain how to extract text and images in the easiest
   way possible. In order to understand the usage of PyPDF2 a combination of the official documentation
   and a lot of examples that are available from other resources helped. In contrast, the official
   PyMuPDF documentation is much clearer, and considerably faster using the library.

Extracting Text with PyPDF2
   PyPDF2 can be installed as a regular software package, or using pip3 (for Python3). The tests here
   are based on the package for the upcoming Debian GNU/Linux release 10 "Buster". The name of the
   Debian package is python3-pypdf2.

   Listing 1 imports the PdfFileReader class, first. Next, using this class, it opens the document, and
   extracts the document information using the getDocumentInfo() method, the number of pages using
   getDocumentInfo(), and the content of the first page.

   Please note that PyPDF2 starts counting the pages with 0, and that's why the call pdf.getPage(0)
   retrieves the first page of the document. Eventually, the extracted information is printed to stdout.

   Listing 1: Extracting the document information and content.
#!/usr/bin/python

from PyPDF2 import PdfFileReader

pdf_document = "example.pdf"
with open(pdf_document, "rb") as filehandle:
    pdf = PdfFileReader(filehandle)
    info = pdf.getDocumentInfo()
    pages = pdf.getNumPages()

    print (info)
    print ("number of pages: %i" % pages)

    page1 = pdf.getPage(0)
    print(page1)
    print(page1.extractText())

   Fig. 1: Extracted text from a PDF file using PyPDF2
   Fig. 1: Extracted text from a PDF file using PyPDF2

   As shown in Figure 1 above, the extracted text is printed on a continuing basis. There are no
   paragraphs, or sentence separations. As stated in the PyPDF2 documentation, all text data is returned
   in the order they are provided in the content stream of the page, and relying on it may lead to some
   surprises. This mainly depends on the internal structure of the PDF document, and how the stream of
   PDF instructions was produced by the PDF writer process.

Extracting Text with PyMuPDF
   PyMuPDF is available from the PyPi website, and you install the package with the following command in
   a terminal:
$ pip3 install PyMuPDF

   Displaying document information, printing the number of pages, and extracting the text of a PDF
   document is done in a similar way as with PyPDF2 (see Listing 2). The module to be imported is named
   fitz, and goes back to the previous name of PyMuPDF.

   Listing 2: Extracting content from a PDF document using PyMuPDF.
#!/usr/bin/python

import fitz

pdf_document = "example.pdf"
doc = fitz.open(pdf_document):
print ("number of pages: %i" % doc.pageCount)
print(doc.metadata)

page1 = doc.loadPage(0)
page1text = page1.getText("text")
print(page1text)

   The nice thing about PyMuPDF is that it keeps the original document structure intact - entire
   paragraphs with linebreaks are kept as they are in the PDF document (see Figure 2).

   Fig. 2: Extracted text data
   Fig. 2: Extracted text data

Extracting Images from PDFs with PyMuPDF
   PyMuPDF simplifies extracting images from PDF documents using the method getPageImageList(). Listing
   3 is based on an example from the PyMuPDF wiki page, and extracts and saves all the images from the
   PDF as PNG files on a page-by-page basis. If an image has a CMYK colorspace, it will be converted to
   RGB, first.

   Listing 3: Extracting images.
#!/usr/bin/python

import fitz

pdf_document = fitz.open("file.pdf")
for current_page in range(len(pdf_document)):
    for image in pdf_document.getPageImageList(current_page):
        xref = image[0]
        pix = fitz.Pixmap(pdf_document, xref)
        if pix.n < 5:        # this is GRAY or RGB
            pix.writePNG("page%s-%s.png" % (current_page, xref))
        else:                # CMYK: convert to RGB first
            pix1 = fitz.Pixmap(fitz.csRGB, pix)
            pix1.writePNG("page%s-%s.png" % (current_page, xref))
            pix1 = None
        pix = None

   Running this Python script on a 400 page PDF, it extracted 117 images in less than 3 seconds, which
   is amazing. The individual images are stored in PNG format. In order to keep the original image
   format and size, instead of converting to PNG, have a look at extended versions of the scripts in the
   PyMuPDF wiki.

   Fig. 3: Extracted images
   Fig. 3: Extracted images

Splitting PDFs into Pages with PyPDF2
   For this example, both the PdfFileReader and the PdfFileWriter classes first need to be imported.
   Then we open the PDF file, create a reader object, and loop over all the pages using the reader
   object's getNumPages method.

   Inside of the for loop, we create a new instance of PdfFileWriter, which does not contain any pages,
   yet. We then add the current page to our writer object using the pdfWriter.addPage() method. This
   method accepts a page object, which we get using the PdfFileReader.getPage() method.

   The next step is to create a unique filename, which we do by using the original file name plus the
   word "page", plus the page number. We add 1 to the current page number because PyPDF2 counts the page
   numbers starting at zero.

   Finally, we open the new file name in "write binary" mode (mode wb), and use the write() method of
   the pdfWriter class to save the extracted page to disk.

   Listing 4: Splitting a PDF into single pages.
#!/usr/bin/python

from PyPDF2 import PdfFileReader, PdfFileWriter

pdf_document = "example.pdf"
pdf = PdfFileReader(pdf_document)

for page in range(pdf.getNumPages()):
    pdf_writer = PdfFileWriter
    current_page = pdf.getPage(page)
    pdf_writer.addPage(current_page)

    outputFilename = "example-page-{}.pdf".format(page + 1)
    with open(outputFilename, "wb") as out:
        pdf_writer.write(out)

        print("created", outputFilename)

   Fig. 4: Splitting a PDF
   Fig. 4: Splitting a PDF

Find All Pages Containing Text
   This use case is quite a practical one, and works similar to pdfgrep. Using PyMuPDF the script
   returns all the page numbers that contain the given search string. The pages are loaded one after the
   next, and with the help of the searchFor() method all the occurences of the search string are
   detected. In case of a match an according message is printed on stdout.

   Listing 5: Search for a given text.
#!/usr/bin/python

import fitz

filename = "example.pdf"
search_term = "invoice"
pdf_document = fitz.open(filename):

for current_page in range(len(pdf_document)):
    page = pdf_document.loadPage(current_page)
    if page.searchFor(search_term):
        print("%s found on page %i" % (search_term, current_page))

   Figure 5 below shows the search result for the term "Debian GNU/Linux" in a 400-page book.

   Fig. 5: Searching a PDF document
   Fig. 5: Searching a PDF document

Conclusion
   The methods shown here are quite powerful. With a comparably small number of lines of code a result
   is easily obtained. More use-cases are examined in Part Two (coming soon!) that covers adding a
   watermark to a PDF.
  
  
---
https://stackabuse.com/working-with-pdfs-in-python-adding-images-and-watermarks/

Working with PDFs in Python: Adding Images and Watermarks
May 14, 2019

Introduction
   Today, a world without the Portable Document Format (PDF) seems to be unthinkable. It has become one
   of the most commonly used data formats ever. Up to PDF version 1.4, displaying a PDF document in an
   according PDF viewer works fine. Unfortunately, the features from the newer PDF revisions, such as
   forms, are tricky to implement, and still require further work to be fully functional in the tools.
   Using various Python libraries you can create your own application in an comparable easy way.

   This article is part two of a little series on PDFs with Python. In part one we already gave you
   an introduction into reading PDF documents using Python, and started with a summary of the various
   Python libraries. An introduction followed that showed how to manipulate existing PDFs, and how to
   read and extract the content - both the text and images. Furthermore, we showed you how to split
   documents into its single pages.

   In this article you will learn how add images to your PDF in the form of watermarks, stamps, and
   barcodes. For example this is quite helpful in order to stamp or mark documents that are intended to
   be read by a specific audience, only, or have a draft quality, or to simply add a barcode for
   identification purposes.

Adding a Watermark via Command Line with pdftk
   In order to add a watermark to an existing PDF on a Unix/Linux command-line we can use pdftk. The
   name abbreviates "PDF Toolkit", and describes itself as "a simple tool for doing everyday things with
   PDF documents". pdftk has been ported to Java, and made available as an according package for
   Debian GNU/Linux.

   In order for this to work you need to have a background image available that comes with the word
   "DRAFT" on a transparent layer, which you can apply to an existing single-page PDF as follows:
$ pdftk input.pdf background background.pdf output output.pdf

   The pdftk tool takes in the PDF file input.pdf, merges it with background.pdf, and outputs the result
   to the file output.pdf. Figure 1 shows the output of this action.

   Adding a watermark to an existing PDF

   For more complex actions, like stamping a document with different stamps per page, have a look at the
   description at the PDF Labs project page. We also show the stamping use-case in this article
   below, although our example uses the library pdfrw instead of pdftk.

Adding a Watermark with PyPDF2
   The PyPDF library provides a method called mergepage() that accepts another PDF to be used as a
   watermark or stamp.

   In the example below we start with reading the first page of the original PDF document and the
   watermark. To read the file we use the PdfFileReader() class. As a second step we merge the two pages
   by using the mergepage() method. Finally, we will write the output to the output file. This is done
   in three steps - creating an object based on the PdfFileWriter() class, adding the merged page to
   this object using the addPage() method, and writing the new content to the output page using the
   write() method.

   Adding a watermark to an existing PDF using PyPDF
# !/usr/bin/python
# Adding a watermark to a single-page PDF

import PyPDF2

input_file = "example.pdf"
output_file = "example-drafted.pdf"
watermark_file = "draft.pdf"

with open(input_file, "rb") as filehandle_input:
    # read content of the original file
    pdf = PyPDF2.PdfFileReader(filehandle_input)

    with open(watermark_file, "rb") as filehandle_watermark:
        # read content of the watermark
        watermark = PyPDF2.PdfFileReader(filehandle_watermark)

        # get first page of the original PDF
        first_page = pdf.getPage(0)

        # get first page of the watermark PDF
        first_page_watermark = watermark.getPage(0)

        # merge the two pages
        first_page.mergePage(first_page_watermark)

        # create a pdf writer object for the output file
        pdf_writer = PyPDF2.PdfFileWriter()

        # add page
        pdf_writer.addPage(first_page)

        with open(output_file, "wb") as filehandle_output:
            # write the watermarked file to the new file
            pdf_writer.write(filehandle_output)

Adding an Image with PyMuPDF
   PyMuPDF are the Python bindings for MuPDF, which is a lightweight PDF and XPS viewer. In your
   Python script the module that needs to be imported is named fitz, and this name goes back to the
   previous name of PyMuPDF.

   For this section we are going to show how to add an image by using a barcode as an example since this
   is a pretty common task. Although the same steps can be applied to adding any kind of image to a PDF.

   In order to decorate a PDF document with a barcode we simply add an image as another PDF layer at the
   desired position. As for image formats, PyMuPDF accepts PNG or JPEG, but not SVG.

   The position of the image is defined as a rectangle using the method fitz.Rect() that requires two
   pairs of coordinates - (x1,y1) and (x2,y2). PyMuPDF interprets the upper-left corner of the page as
   (0,0).

   Having opened the input file and extracted the first page from it, the image containing the barcode
   is added using the method insertImage(). This method requires two parameters - the position delivered
   via imageRectangle, and the name of the image file to be inserted. Using the save() method the
   modified PDF is stored to disk. Figure 2 shows the barcode after it was added to the example PDF.

   Adding a barcode to an existing PDF using PyMuPDF
# !/usr/bin/python

import fitz

input_file = "example.pdf"
output_file = "example-with-barcode.pdf"
barcode_file = "barcode.png"

# define the position (upper-right corner)
image_rectangle = fitz.Rect(450,20,550,120)

# retrieve the first page of the PDF
file_handle = fitz.open(input_file)
first_page = file_handle[0]

# add the image
first_page.insertImage(image_rectangle, fileName=barcode_file)

file_handle.save(output_file)

Adding Stamps with pdfrw
   pdfrw is a pure Python-based PDF parser to read and write PDF documents. It faithfully reproduces
   vector formats without rasterization. For Debian GNU/Linux, the package repository contains releases
   for both Python 2 and 3.

   The following example will demonstrate how to add a barcode or watermark to an existing PDF that
   contains multiple pages. From the pdfrw package it is sufficient that you import the three classes
   PdfReader, PdfWriter, and PageMerge. Next, you establish the according reader and writer objects to
   access the contents of both the PDF, and the watermark. For each page in the original document you
   continue creating a PageMerge object to which you add the watermark, and which is rendered using the
   render() method. Finally, you write the modified pages to the output file. Figure 3 shows the
   modified document next to the code that made the addition possible.

   Adding a watermark to an existing PDF using pdfrw
# !/usr/bin/python
# Adding a watermark to a multi-page PDF

from pdfrw import PdfReader, PdfWriter, PageMerge

input_file = "example.pdf"
output_file = "example-drafted.pdf"
watermark_file = "barcode.pdf"

# define the reader and writer objects
reader_input = PdfReader(input_file)
writer_output = PdfWriter()
watermark_input = PdfReader(watermark_file)
watermark = watermark_input.pages[0]

# go through the pages one after the next
for current_page in range(len(reader_input.pages)):
    merger = PageMerge(reader_input.pages[current_page])
    merger.add(watermark).render()

# write the modified content to disk
writer_output.write(output_file, reader_input)

Conclusion
   Adding images, watermarks, or stamps to a PDF file is quite simple. With a few lines of code this
   complex-sounding task is solved within minutes. No matter which of the given libraries you choose it
   works very well.

   Part three of this series will exclusively focus on writing/creating PDFs, and will also include both
   deleting and re-combining single pages into a new document.


---
https://stackabuse.com/working-with-pdfs-in-python-inserting-deleting-and-reordering-pages/

Working with PDFs in Python: Inserting, Deleting, and Reordering Pages
June 05, 2019

Introduction
   This article is part three of a little series on working with PDFs in Python. In the previous
   articles we gave an introduction into reading PDF documents using Python. So far you have learned how
   to manipulate existing PDFs, and to read and extract the content - both text and images. Furthermore,
   we have discussed splitting documents into its single pages, as well as adding watermarks and
   barcodes.

   Now in this article we will go one step further and demonstrate how to rearrange a PDF document in a
   few different ways.
     * Deleting Pages with pdfrw
     * Deleting Pages with PyMuPDF
     * Inserting Pages with PyMuPDF
     * Splitting Even and Odd Pages with PyPDF2

Deleting Pages with pdfrw
   Deleting individual pages from a PDF file is as simple as the following:
     * Read a PDF as an input file
     * Write selected pages to a new PDF as an output file

   The following example removes the first two pages from a PDF document. Using the pdfrw library,
   the file is read with the help of the PdfReader() class first. Except for both the first and second
   page, each page is added to the output file using the addpage() method, and then written to disk
   eventually.

   Figure 1 shows the output when executing the code on a four-page PDF file.
# !/usr/bin/python
# Remove the first two pages (cover sheet) from the PDF

from pdfrw import PdfReader, PdfWriter

input_file = "example.pdf"
output_file = "example-updated.pdf"

# Define the reader and writer objects
reader_input = PdfReader(input_file)
writer_output = PdfWriter()

# Go through the pages one after the next
for current_page in range(len(reader_input.pages)):
    if current_page > 1:
        writer_output.addpage(reader_input.pages[current_page])
        print("adding page %i" % (current_page + 1))

# Write the modified content to disk
writer_output.write(output_file)

   Delete the first two pages from a PDF

Deleting Pages with PyMuPDF
   The PyMuPDF library comes with quite a few sophisticated methods that simplify deleting pages
   from a PDF file. It allows you to specify either a single page (using the deletePage() method), or a
   range of page numbers (using the deletePageRange() method), or a list with the page numbers (using
   the select() method).

   The following example will demonstrate how to use a list in order to select the pages to keep from
   the original document. Be aware that the pages that are not specified will not be part of the output
   document. In our case the output document contains the first, second, and fourth pages only.
# !/usr/bin/python

# Recall that PyMuPDF is imported as fitz
import fitz

input_file = "example.pdf"
output_file = "example-rearranged.pdf"

# Define the pages to keep - 1, 2 and 4
file_handle = fitz.open(input_file)
pages_list = [0,1,3]

# Select the pages and save the output
file_handle.select(pages_list)
file_handle.save(output_file)

Inserting Pages with PyMuPDF

   The PyMuPDF library allows you to insert pages as well. It provides the methods newPage() for adding
   completely blank pages, and insertPage() in order to add an existing page. The next example shows how
   to add a page from a different PDF document at the end of another one.
# !/usr/bin/python

# Recall that PyMuPDF is imported as fitz
import fitz

original_pdf_path = "example.pdf"
extra_page_path = "extra-page.pdf"
output_file_path = "example-extended.pdf"

original_pdf = fitz.open(original_pdf_path)
extra_page = fitz.open(extra_page_path)

original_pdf.insertPDF(extra_page)
original_pdf.save(output_file_path)

Splitting Even and Odd Pages with PyPDF2
   The following example uses PyPDF2 and does this by taking a file, separating it into its even and
   odd pages, saving the even pages in the file even.pdf, and the odd pages in odd.pdf.

   This Python script starts with the definition of two output files, even.pdf and odd.pdf, as well as
   their corresponding writer objects pdf_writer_even and pdf_writer_odd. Next, in a for-loop the script
   goes through the entire PDF file, and reads one page after the other. Pages with even page numbers
   are added to the stream pdf_writer_even using addPage(), and odd numbers are added to the stream
   pdf_writer_odd. At the end the two streams are saved to disk in separate files, as defined before.
#!/usr/bin/python3

from PyPDF2 import PdfFileReader, PdfFileWriter

pdf_document = "example.pdf"
pdf = PdfFileReader(pdf_document)

# Output files for new PDFs
output_filename_even = "even.pdf"
output_filename_odd = "odd.pdf"

pdf_writer_even = PdfFileWriter()
pdf_writer_odd = PdfFileWriter()

# Get reach page and add it to corresponding
# output file based on page number
for page in range(pdf.getNumPages()):
    current_page = pdf.getPage(page)
    if page % 2 == 0:
        pdf_writer_odd.addPage(current_page)
    else:
        pdf_writer_even.addPage(current_page)

# Write the data to disk
with open(output_filename_even, "wb") as out:
     pdf_writer_even.write(out)
     print("created", output_filename_even)

# Write the data to disk
with open(output_filename_odd, "wb") as out:
     pdf_writer_odd.write(out)
     print("created", output_filename_odd)

Conclusion
   Re-writing and re-arranging the structure of a PDF is fairly easy with the libraries pdfrw, PyMuPDF,
   and PyPDF2. With just a few lines of Python code you can delete pages, separate them, and add new
   content.


---
