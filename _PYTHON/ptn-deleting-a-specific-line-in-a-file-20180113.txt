filename: python_deleting-a-specific-line-in-a-file_20180113.txt
https://stackoverflow.com/questions/4710067/deleting-a-specific-line-in-a-file-python

Deleting a specific line in a file (python)

   Lets say I have a text file full of nicknames, how can I delete a specific nickname from that file?

***
   Assuming your file is in the format of one nickname per line, use this.

   First, open the file:
f = open("yourfile.txt","r")

   Next, get all your lines from the file:
lines = f.readlines()

   Now you can close the file:
f.close()

   And reopen it in write mode:
f = open("yourfile.txt","w")

   Then, write your lines back, except the line you want to delete. You might want to change the "\n" to
   whatever line ending your file uses.
for line in lines:
  if line!="nickname_to_delete"+"\n":
    f.write(line)

   At the end, close the file again.
f.close()

***
     why do we have to open and close it twice? – [43]Ooker Jun 25 '14 at 13:48

***
     @Ooker: You have to open the file twice (and close it in between) because in the first mode it is
     "read-only" because you are just reading in the current lines in the file. You then close it and
     re-open it in "write mode", where the file is writable and you replace the contents of the file sans
     the line you wanted to remove. – [44]Devin Jul 1 '14 at 16:19

***
   Solution to this problem with only a single open:
f = open("target.txt","r+")
d = f.readlines()
f.seek(0)
for i in d:
    if i != "line you want to remove...":
        f.write(i)
f.truncate()
f.close()

   This solution opens the file in r/w mode ("r+") and makes use of seek to reset the f-pointer then
   truncate to remove everything after the last write.

***
   The best and fastest option, rather than storing everything in a list and re-opening the file to
   write it, is in my opinion to re-write the file elsewhere.
with open("yourfile.txt","r") as input:
    with open("newfile.txt","wb") as output:
        for line in input:
            if line!="nickname_to_delete"+"\n":
                output.write(line)

   That's it! In one loop and one only you can do the same thing. It will be much faster.

***
     actually, you can write ''for line in inputfile'' or ''for line in inputfile.readlines()'', it does
     the same thing on my side (Python 2.7)

***
     os.replace (new in python v 3.3) is more cross-platform than a system call to mv.

***
   The issue with reading lines in first pass and making changes (deleting specific lines) in the second
   pass is that if you file sizes are huge, you will run out of RAM. Instead, a better approach is to
   read lines, one by one, and write them into a separate file, eliminating the ones you don't need. I
   have run this approach with files as big as 12-50 GB, and the RAM usage remains almost constant. Only
   CPU cycles show processing in progress.

***
   This is a "fork" based the solution present by @Lother here, which I believe that should be
   considered the right answer.

   For a file with a content like this:
$ cat file.txt
1: october rust
2: november rain
3: december snow

   This fork from Lother's solution works fine:
#!/usr/bin/python3.4

with open("file.txt","r+") as f:
    new_f = f.readlines()
    f.seek(0)
    for line in new_f:
        if "snow" not in line:
            f.write(line)
    f.truncate()

   The main improvement are the usage of with open, which discard the usage of f.close() and also the
   way that the script evaluates if a line contains the string.

***
   Not a good solve if u put a whole file to memory, i know nowadays everyone have tons of memory, but
   consider if the file is several GB of logs or something.

   Better way copy it line by line to a new file, than delete the first or something like that

***
   I think if you read the file into a list, then do the you can iterate over the list to look for the
   nickname you want to get rid of. You can do it much efficiently without creating additional files,
   but you'll have to write the result back to the source file.

   Here's how I might do this:
import, os, csv # and other imports you need
nicknames_to_delete = ['Nick', 'Stephen', 'Mark']

   I'm assuming nicknames.csv contains data like:
Nick
Maria
James
Chris
Mario
Stephen
Isabella
Ahmed
Julia
Mark
...

   Then load the file into the list:
 nicknames = None
 with open("nicknames.csv") as sourceFile:
     nicknames = sourceFile.read().splitlines()

   Next, iterate over to list to match your inputs to delete:
for nick in nicknames_to_delete:
     try:
         if nick in nicknames:
             nicknames.pop(nicknames.index(nick))
         else:
             print(nick + " is not found in the file")
     except ValueError:
         pass

   Lastly, write the result back to file:
with open("nicknames.csv", "a") as nicknamesFile:
    nicknamesFile.seek(0)
    nicknamesFile.truncate()
    nicknamesWriter = csv.writer(nicknamesFile)
    for name in nicknames:
        nicknamesWriter.writeRow([str(name)])
nicknamesFile.close()

***
   I liked the fileinput approach as explained in this answer: Deleting a line from a text file
   (python)

   Say for example I have a file which has empty lines in it and I want to remove empty lines, here's
   how I solved it:
import fileinput
import sys
for line_number, line in enumerate(fileinput.input('file1.txt', inplace=1)):
    if len(line) > 1:
            sys.stdout.write(line)

     Note: The empty lines in my case had length 1

***
   Probably, you already got a correct answer, but here is mine. Instead of using a list to collect
   unfiltered data (what readlines() method does), I use two files. One is for hold a main data, and the
   second is for filtering the data when you delete a specific string. Here is a code:
main_file = open('data_base.txt').read()    # your main dataBase file
filter_file = open('filter_base.txt', 'w')
filter_file.write(main_file)
filter_file.close()
main_file = open('data_base.txt', 'w')
for line in open('filter_base'):
    if 'your data to delete' not in line:    # remove a specific string
        main_file.write(line)                # put all strings back to your db except deleted
    else: pass
main_file.close()

   Hope you will find this useful! :)

***
   Save the file lines in a list, then remove of the list the line you want to delete and write the
   remain lines to a new file
with open("file_name.txt", "r") as f:
    lines = f.readlines()
    lines.remove("Line you want to delete\n")
    with open("new_file.txt", "w") as new_f:
        for line in lines:
            new_f.write(line)
