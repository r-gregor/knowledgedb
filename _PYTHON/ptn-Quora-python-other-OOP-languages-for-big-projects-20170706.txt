filename: quora_python_other-OOP-languages-for-big-projects_20170706.txt
https://www.quora.com/Why-is-Python-often-dropped-in-favour-of-other-OOP-languages-for-big-projects

   Why is Python often dropped in favour of other OOP languages for big projects?

   Python is often compared to other interpreted languages such as
     * Java;
     * JavaScript;
     * Perl;
     * Tcl;
     * Smalltalk;
     * Comparisons to C++, Common Lisp and Scheme can also be enlightening.

   I will try briefly compare Python to each of these languages. These comparisons concentrate on
   language issues only.

   Java
     * Python programs are generally expected to run slower than Java programs, but they also take much
       less time to develop.
     * Python programs are typically 3-5 times shorter than equivalent Java programs. This difference
       can be attributed to Python's built-in high-level data types and its dynamic typing.

   For example:
   A Python programmer wastes no time declaring the types of arguments or variables, and Python's
   powerful polymorphic list and dictionary types, for which rich syntactic support is built straight
   into the language, find a use in almost every Python program.
     * Because of the run-time typing, Python's run time must work harder than Java's.

   For example:
   When evaluating the expression a+b, it must first inspect the objects a and b to find out their type,
   which is not known at compile time. It then invokes the appropriate addition operation, which may be
   an overloaded user-defined method.
     * Java, on the other hand, can perform an efficient integer or floating point addition, but
       requires variable declarations for a and b, and does not allow overloading of the + operator for
       instances of user-defined classes.

     * For these reasons, Python - is much better suited as a "glue" language;
     * Java = is better characterized as a low-level implementation language.

   In fact, the two together make an excellent combination.
     * Components can be developed in Java and combined to form applications in Python;
     * Python can also be used to prototype components until their design can be "hardened" in a Java
       implementation. To support this type of development, a Python implementation written in Java is
       under development, which allows calling Python code from Java and vice versa. In this
       implementation, Python source code is translated to Java byte code (with help from a run-time
       library to support Python's dynamic semantics).

   Javascript
     * Python's "object-based" subset is roughly equivalent to JavaScript.
     * Like JavaScript (and unlike Java), Python supports a programming style that uses simple functions
       and variables without engaging in class definitions.
     * However, for JavaScript, that's all there is. Python, on the other hand, supports writing much
       larger programs and better code reuse through a true object-oriented programming style, where
       classes and inheritance play an important role.

   Perl
     * Python and Perl come from a similar background (Unix scripting, which both have long outgrown),
       and sport many similar features, but have a different philosophy.
     * Perl emphasizes support for common application-oriented tasks, e.g. by having built-in regular
       expressions, file scanning and report generating features.
     * Python emphasizes support for common programming methodologies such as data structure design and
       object-oriented programming, and encourages programmers to write readable (and thus maintainable)
       code by providing an elegant but not overly cryptic notation.
     * As a consequence, Python comes close to Perl but rarely beats it in its original application
       domain; however Python has an applicability well beyond Perl's niche.

   Tcl
     * Like Python, Tcl is usable as an application extension language, as well as a stand-alone
       programming language. However, Tcl, which traditionally stores all data as strings, is weak on
       data structures, and executes typical code much slower than Python.
     * Tcl also lacks features needed for writing large programs, such as modular namespaces. Thus,
       while a "typical" large application using Tcl usually contains Tcl extensions written in C or C++
       that are specific to that application, an equivalent Python application can often be written in
       "pure Python".
     * Of course, pure Python development is much quicker than having to write and debug a C or C++
       component. It has been said that Tcl's one redeeming quality is the Tk toolkit. Python has
       adopted an interface to Tk as its standard GUI component library.
     * Tcl 8.0 addresses the speed issuse by providing a bytecode compiler with limited data type
       support, and adds namespaces. However, it is still a much more cumbersome programming language.

   Smalltalk
     * Perhaps the biggest difference between Python and Smalltalk is Python's more "mainstream" syntax,
       which gives it a leg up on programmer training.
     * Like Smalltalk, Python has dynamic typing and binding, and everything in Python is an object.
       However, Python distinguishes built-in object types from user-defined classes, and currently
       doesn't allow inheritance from built-in types.
     * Smalltalk's standard library of collection data types is more refined, while Python's library has
       more facilities for dealing with Internet and WWW realities such as email, HTML and FTP.
     * Python has a different philosophy regarding the development environment and distribution of code.
       Where Smalltalk traditionally has a monolithic "system image" which comprises both the
       environment and the user's program, Python stores both standard modules and user modules in
       individual files which can easily be rearranged or distributed outside the system.
     * One consequence is that there is more than one option for attaching a Graphical User Interface
       (GUI) to a Python program, since the GUI is not built into the system.

   C++
     * Almost everything said for Java also applies for C++, just more so: where Python code is
       typically 3-5 times shorter than equivalent Java code, it is often 5-10 times shorter than
       equivalent C++ code!
     * Anecdotal evidence suggests that one Python programmer can finish in two months what two C++
       programmers can't complete in a year. Python shines as a glue language, used to combine
       components written in C++.

   Common Lisp and Scheme
     * These languages are close to Python in their dynamic semantics, but so different in their
       approach to syntax that a comparison becomes almost a religious argument: is Lisp's lack of
       syntax an advantage or a disadvantage?
     * It should be noted that Python has introspective capabilities similar to those of Lisp, and
       Python programs can construct and execute program fragments on the fly.
     * Usually, real-world properties are decisive: Common Lisp is big (in every sense), and the Scheme
       world is fragmented between many incompatible versions, where Python has a single, free, compact
       implementation.

***
   Python is a pretty good language. It might be a better fit for some projects and not a perfect for
   others. Depending on the needs of your specific project. Remember, there is no one perfect language
   or framework out there. Many factors play role when making such choice.

   Off the top of my head I can name a few reasons why some may consider other languages for large scale
   projects.
     * Python 2 vs Python 3. (new version is not backwards compatible but many still use v2 due to
       libraries they use are only compatible with this version). So, basically a lot of developers are
       stuck with v2 for awhile.
     * It’s whitespace sensitive (Whitespace is used to denote blocks). Most languages are not, and it
       may be uncomfortable to switch back and forth if using other languages in other projects.
     * It’s not statically typed. For large scale projects it could be problematic to have runtime
       errors in production.
     * Threading support is not as performant as other languages. There are few libraries that can help.
     * Performance. It’s a big one - Python is slow (one of the slowest). [26]C++ vs. Python vs. PHP vs.
       Java vs. Others performance benchmark (2016 Q3)
     * Doesn’t scale well for CPU intensive work.
     * Other less prominent issues that some people don’t like and others are ok with. Any language will
       have things that people will complain about.

   If you need to build crud app - [27]Django is an excellent framework with a lot of stuff built in. If
   you’re working on [28]machine learning or data analytics project - [29]Python is the right choice.

***
   At my organization, we have a moderate size application written in Java. Despite the language's
   audacious verbosity, strict OOP paradigm, static typing, and well thought out frameworks, the code is
   still a mess by my standards. There are probably many reasons for that including inadequate levels of
   HR, high dependence on student workers, too many ill-defined requirements, and a lack of a seasoned
   lead developer dedicated to the project. Now, think of using a more “relaxed” language for this
   project like python that supports multiple paradigms, dynamic typing, is not verbose, and has less
   mature frameworks. The likely outcome is an even worse codebase with the added bonus of performance
   issues.

   The reasoning is simple: Java makes a mediocre programmer out of any monkey because of the
   aforementioned qualities. Most problems have been solved for you right out of the box; just buy a
   sever with a lot of memory. The only thing you need to do is write bad code and it'll still work
   okay. The code's maintainability is still easier than that of python's. So, you tell me why any
   company would opt to choose the alternative. It's unlikely that you have a ton of money and always
   hire the best developers with strict code/quality reviews.

   With a language like python, you must deal with the C implementation's single process single core
   limit; hence, a scale out architecture is needed. You're already dealing with an order of magnitude
   of increased difficulty in application development. You can no longer hire monkeys to bash on
   keyboards. And even if you hire talent, the weak typing will mean that your developers need to be
   disciplined; that's unlikely to always be the case.

   Some people say that's why Java is the best choice. I’d say that's why Java is the easy choice. The
   reality is, various languages are well suited for web development in an ideal world but the world
   isn't very ideal.

***
   There are many reasons. One of my personal pet peeves is that whitespace determines blocks. And it
   messes up when you mix spaces and tabs. These mean that formatting can mess up stuff, and you have no
   way of reformatting if whitespace is lost…. EVER!

   Another reason is that it has no strong typing. This can be a benefit with quick mockups where you
   just want to show something functional, but it is a pain in huge projects. For example, when trying
   to determine what type a function returns, you MUST look at its implementation (ignoring
   documentation here, plus, sometimes documentation is wrong). And what if that function calls other
   functions. What are their return types? This is awful when maintaining code or writing code that you
   haven’t looked at for a while. This also means that there is no possibility of autocomplete except in
   some special cases, such as literals.

   EDIT: One last tiny thing. The Global Interpreter Lock. This means there is absolutely no way to do
   threading in a single Python process, because the Python interpreter will only ever read one
   instruction at a time. That alone can be a deal-breaker for many projects.
   832 Views · [38]10 Upvotes
   View More Answers
