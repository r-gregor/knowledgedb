filename: python_argparse-option-for-passing-a-list-as-option_20171026.txt
https://stackoverflow.com/questions/15753701/argparse-option-for-passing-a-list-as-option

argparse option for passing a list as option


   I am trying to pass a list as an argument to a command line program. Is there an [27]argparse option
   to pass a list as option?
  parser.add_argument('-l', '--list',
                      type=list, action='store',
                      dest='list',
                      help='<Required> Set flag',
                      required=True)

   Script is called like below
python test.py -l "265340 268738 270774 270817"

***
   Use the nargs option or the 'append' setting of the action option (depending on how you want the user
   interface to behave).

   nargs
parser.add_argument('-l','--list', nargs='+', help='<Required> Set flag', required=True)
# Use like:
# python arg.py -l 1234 2345 3456 4567

   nargs='+' takes 1 or more arguments, nargs='*' takes zero or more.

   append
parser.add_argument('-l','--list', action='append', help='<Required> Set flag', required=True)
# Use like:
# python arg.py -l 1234 -l 2345 -l 3456 -l 4567

   With append you provide the option multiple times to build up the list.

   Don't use type=list!!! - There is probably no situation where you would want to use type=list with
   argparse. Ever.
 
   Let's take a look in more detail at some of the different ways one might try to do this, and the end
   result.
import argparse

parser = argparse.ArgumentParser()

# By default it will fail with multiple arguments.
parser.add_argument('--default')

# Telling the type to be a list will also fail for multiple arguments,
# but give incorrect results for a single argument.
parser.add_argument('--list-type', type=list)

# This will allow you to provide multiple arguments, but you will get
# a list of lists which is not desired.
parser.add_argument('--list-type-nargs', type=list, nargs='+')

# This is the correct way to handle accepting multiple arguments.
# '+' == 1 or more.
# '*' == 0 or more.
# '?' == 0 or 1.
# An int is an explicit number of arguments to accept.
parser.add_argument('--nargs', nargs='+')

# To make the input integers
parser.add_argument('--nargs-int-type', nargs='+', type=int)

# An alternate way to accept multiple inputs, but you must
# provide the flag once per input. Of course, you can use
# type=int here if you want.
parser.add_argument('--append-action', action='append')

# To show the results of the given option to screen.
for _, value in parser.parse_args()._get_kwargs():
    if value is not None:
        print(value)

   Here is the output you can expect:
$ python arg.py --default 1234 2345 3456 4567
...
arg.py: error: unrecognized arguments: 2345 3456 4567

$ python arg.py --list-type 1234 2345 3456 4567
...
arg.py: error: unrecognized arguments: 2345 3456 4567

$ # Quotes won't help here...
$ python arg.py --list-type "1234 2345 3456 4567"
['1', '2', '3', '4', ' ', '2', '3', '4', '5', ' ', '3', '4', '5', '6', ' ', '4', '5', '6', '7']

$ python arg.py --list-type-nargs 1234 2345 3456 4567
[['1', '2', '3', '4'], ['2', '3', '4', '5'], ['3', '4', '5', '6'], ['4', '5', '6', '7']]

$ python arg.py --nargs 1234 2345 3456 4567
['1234', '2345', '3456', '4567']

$ python arg.py --nargs-int-type 1234 2345 3456 4567
[1234, 2345, 3456, 4567]

$ # Negative numbers are handled perfectly fine out of the box.
$ python arg.py --nargs-int-type -1234 2345 -3456 4567
[-1234, 2345, -3456, 4567]

$ python arg.py --append-action 1234 --append-action 2345 --append-action 3456 --append-action 4567
['1234', '2345', '3456', '4567']

   Takeaways:
     * Use nargs or action='append'
          + nargs can be more straightforward from a user perspective, but it can be unintuitive if
            there are positional arguments because argparse can't tell what should be a positional
            argument and what belongs to the nargs; if you have positional arguments then
            action='append' may end up being a better choice.
          + The above is only true if nargs is given '*', '+', or '?'. If you provide an integer number
            (such as 4) then there will be no problem mixing options with nargs and positional arguments
            because argparse will know exactly how many values to expect for the option.
     * Don't use quotes on the command line^1
     * Don't use type=list, as it will return a list of lists
          + This happens because under the hood argparse uses the value of type to coerce each
            individual given argument you your chosen type, not the aggregate of all arguments.
          + You can use type=int (or whatever) to get a list of ints (or whatever)
     ________________________________________________________________________________________________

   ^1: I don't mean in general.. I mean using quotes to pass a list to argparse is not what you want.

***
     What about a list of strings? This turns multiple string arguments ("wassup", "something", and
     "else")into a list of lists that looks like this: [['w', 'a', 's', 's', 'u', 'p'], ['s', 'o', 'm',
     'e', 't', 'h', 'i', 'n', 'g'], ['e', 'l', 's', 'e']] – [42]rd108 Sep 3 '13 at 20:04

***
     @rd108 No it doesn't. As shown, this add_argument method interprets everything as strings, including
     the numbers. You must be adding something extra to be getting these lists of lists. I just copied and
     pasted what I posted and did not get the lists of lists. How are you calling add_argument?
     – [43]SethMMorton Sep 3 '13 at 20:16

***
     @rd108 I see, I bet that you are using the type=list option. Don't use that. That turns a string into
     a list, and hence the lists of lists. – [44]SethMMorton Sep 3 '13 at 20:34

***
     @Dror All input is assumed to be strings unless you set the type parameter to some other object. By
     default this method returns a list of strings. – [45]SethMMorton Oct 30 '14 at 13:55

***
     I feel like I answered the same question twice in these comments... – [46]SethMMorton Oct 31 '14 at

***
   I prefer passing a delimited string which I parse later in the script. The reasons for this are; the
   list can be of any type int or str, and sometimes using nargs I run into problems if there are
   multiple optional arguments and positional arguments.
parser = ArgumentParser()
parser.add_argument('-l', '--list', help='delimited list input', type=str)
args = parser.parse_args()
my_list = [int(item) for item in args.list.split(',')]

   Then,
python test.py -l "265340,268738,270774,270817" [other arguments]

   or,
python test.py -l 265340,268738,270774,270817 [other arguments]

   will work fine. The delimiter can be a space, too, which would though enforce quotes around the
   argument value like in the example in the question.

***
     You can set the type argument to lambda s: [int(time) for item in s.split(',')] instead of
     post-processing args.list. – [53]chepner Jul 21 '14 at 14:03

***
     @chepner,yes you're absolutely right and it would be more pythonic - just a small typo: int(time)
     should be int(item). My example was a simplified version of what I typically do, where I check many
     other things rather than a simple processing. But to simply answer the question, I too find your way
     more elegant.. – [54]dojuba Jul 22 '14 at 14:27
   add a comment |
   up vote 6 down vote

   Additionally to [55]nargs, you might want to use [56]choices if you know the list in advance:
>>> parser = argparse.ArgumentParser(prog='game.py')
>>> parser.add_argument('move', choices=['rock', 'paper', 'scissors'])
>>> parser.parse_args(['rock'])
Namespace(move='rock')
>>> parser.parse_args(['fire'])
usage: game.py [-h] {rock,paper,scissors}
game.py: error: argument move: invalid choice: 'fire' (choose from 'rock',
'paper', 'scissors')

***
   If you are intending to make a single switch take multiple parameters, then you use nargs='+'. If
   your example '-l' is actually taking integers:
a = argparse.ArgumentParser()
a.add_argument(
    '-l', '--list',  # either of this switches
    nargs='+',       # one or more parameters to this switch
    type=int,        # /parameters/ are ints
    dest='list',     # store in 'list'.
    default=[],      # since we're not specifying required.
)

print a.parse_args("-l 123 234 345 456".split(' '))
print a.parse_args("-l 123 -l=234 -l345 --list 456".split(' '))

   Produces
Namespace(list=[123, 234, 345, 456])
Namespace(list=[456])  # Attention!

   If you specify the same argument multiple times, the default action ('store') replaces the existing
   data.

   The alternative is to use the append action:
a = argparse.ArgumentParser()
a.add_argument(
    '-l', '--list',  # either of this switches
    type=int,        # /parameters/ are ints
    dest='list',     # store in 'list'.
    default=[],      # since we're not specifying required.
    action='append', # add to the list instead of replacing it
)

print a.parse_args("-l 123 -l=234 -l345 --list 456".split(' '))

   Which produces
Namespace(list=[123, 234, 345, 456])

   Or you can write a custom handler/action to parse comma-separated values so that you could do
-l 123,234,345 -l 456

***
   Using nargs parameter in argparse's add_argument method

   I use nargs='' as an add_argument parameter. I specifically used nargs='' to the option to pick
   defaults if I am not passing any explicit arguments

   Including a code snippet as example:

   Example: temp_args1.py

   Please Note: The below sample code is written in python3. By changing the print statement format, can
   run in python2
    #!/usr/local/bin/python3.6

    from argparse import ArgumentParser

    description = 'testing for passing multiple arguments and to get list of args'
    parser = ArgumentParser(description=description)
    parser.add_argument('-i', '--item', action='store', dest='alist',
                        type=str, nargs='*', default=['item1', 'item2', 'item3'],
                        help="Examples: -i item1 item2, -i item3")
    opts = parser.parse_args()

    print("List of items: {}".format(opts.alist))

   Note: I am collecting multiple string arguments that gets stored in the list - opts.alist If you want
   list of integers, change the type parameter on parser.add_argument to int

   Execution Result:
    python3.6 temp_agrs1.py -i item5 item6 item7
    List of items: ['item5', 'item6', 'item7']

    python3.6 temp_agrs1.py -i item10
    List of items: ['item10']

    python3.6 temp_agrs1.py
    List of items: ['item1', 'item2', 'item3']

