filename: ptn_float-function_20190808.txt
https://www.techbeamers.com/python-float-function/

Python Float()

   This tutorial explains Python float() method that takes a number or string and returns a
   floating-point value. If it is not able to convert string to float, then it raises the ValueError.
   Let's try to understand how to use it with the help of simple examples.

   1. float() syntax
   2. float() with +ve numbers
   3. float() with -ve numbers
   4. float() with strings of numbers
   5. float() with invalid inputs

   Let's now go through each of the section one by one.

Python float() with Examples
   Float() is a built-in Python function that converts a number or a string to a float value and returns
   the result. If it fails for any invalid input, then an appropriate exception occurs.

   Let's now see the details and check out how can we use it.

float() Syntax
   The basic syntax to use Python float() is as follows:
float([ number or string])

Parameters
   First, the parameter is optional. If you don't pass a value, then it returns 0.0. Also, the valid
   argument can only be a number or a string containing some numeric value.

   You might know that Python support complex numbers such as 1+2j. But you can't pass it to the float()
   function. However, you can give both +ve and -ve numeric values.

   Also, if you supply a string with a number with leading or trailing spaces, then it ignores the
   spaces and returns a float value.

Return Values
   The float() function returns a floating-point value equivalent to the number passed as is or in the
   form of a string.

Errors
   It raises the following exceptions when it receives invalid input data.

   ValueError - When you pass a wrong argument such as a string that doesn't contain a number

   TypeError - When you pass a type argument that it doesn't allow such as a complex number or NoneType

float() Examples
   Here, we are using float() to address different use cases. Hope, these should help you this function
   from all corners.

1- float() function with +ve number values

   In this example, we'll pass +ve values in the float() call. So, it will simply convert them to an
   equivalent floating-point number.
"""
Desc:
Python example to demonstrate float() function
"""

# Test Input
testInput = [0, 1, 10000, 0.0, 1.1001, 1.000000000000001, 1.0000000000000001, 1.0000]

for eachItem in testInput:
   print("float({}) = {}".format(eachItem, float(eachItem)))

   After executing the snippet shown above, you see the following result:
float(0) = 0.0
float(1) = 1.0
float(10000) = 10000.0
float(0.0) = 0.0
float(1.1001) = 1.1001
float(1.000000000000001) = 1.000000000000001
float(1.0) = 1.0
float(1.0) = 1.0
float(1.0) = 1.0

   You can see that the number 1.0000000000000001 got truncated to 1.0. It's none other than the Python
   which is doing this. If you store it to a variable, then even it reduces to 1.0.

2- float() function with -ve numbers
   This time, we'll execute float() on a group of -ve values. We've stored all test numbers in a list to
   run our tests.
"""
Desc:
Python example to demonstrate float() function on -ve numbers
"""

# Test Input
testInput = [-1, -10000, -0.0, -1.1001, -1.000000000000001, -1.0000000000000001, -1.0000]

for eachItem in testInput:
   print("float({}) = {}".format(eachItem, float(eachItem)))

   This code would give you the following result:
   [INS: :INS]
float(-1) = -1.0
float(-10000) = -10000.0
float(-0.0) = -0.0
float(-1.1001) = -1.1001
float(-1.000000000000001) = -1.000000000000001
float(-1.0) = -1.0
float(-1.0) = -1.0

3- float() function with a string containing numbers
   When you pass a number in string format (in quotes), then float() converts the value to float type
   and returns the result.

   For testing this, we've taken a list of strings containing both +ve and -ve numbers.
"""
Desc:
Python example to demonstrate float() function on strings
"""

# Test Input
testInput = ["-1", "-10000", "0.0", "1.1001", "1.000000000000001", "-1.0000000000000001", " 1.0000 "]

for eachItem in testInput:
   print("float({}) = {}".format(eachItem, float(eachItem)))

   After running this code, you would get the following output:
float('-1') = -1.0
float('-10000') = -10000.0
float('0.0') = 0.0
float('1.1001') = 1.1001
float('1.000000000000001') = 1.000000000000001
float('-1.0000000000000001') = -1.0
float(' 1.0000 ') = 1.0

   You can now go through the result and understand our test input list included multiple values. And
   the float() function successfully returned the correct float values for each of them. Also, it
   ignored the leading and trailing spaces as given in the last element of the list.

   Python float() function also accepts words like NaN, Infinity, inf (in lower and upper cases). Let's
   check this fact with an example.
"""
Desc:
Python float() exmaple for NaN, Infinity, inf
"""

# Test Input
testInput = ["nan", "NaN", "inf", "InF", "InFiNiTy", "infinity"]

# Let's test float()
for eachItem in testInput:
   if isinstance(eachItem, str):
      print("float('{}') = {}".format(eachItem, float(eachItem)))
   else:
      print("float({}) = {}".format(eachItem, float(eachItem)))

   After running the given code, the output is:
float('nan') = nan
float('NaN') = nan
float('inf') = inf
float('InF') = inf
float('InFiNiTy') = inf
float('infinity') = inf

float() function with invalid inputs
   Finally, we'll test the float() function by passing some invalid input values. And hopefully, we'll
   try to cover all the errors or exception it can throw.

   Let's see how does float() operate with the wrong parameters.
"""
Desc:
Python float() exmaple for invalid input values
"""

# Test Input with all possible invalid values
testInput = [None, "Python", "0,1", "0 1", 1+2j]

# We'll use exception handling to continue even if some error occurs
for eachItem in testInput:
   try:
      if isinstance(eachItem, str):
         print("float('{}') = {}".format(eachItem, float(eachItem)))
      else:
         print("float({}) = {}".format(eachItem, float(eachItem)))
   except Exception as ex:
      print("float({}) = {}".format(eachItem, ex))

# Also, check for 1/0
try:
  print("float(1/0) = {}".format(float(1/0)))
except Exception as ex:
  print("float(1/0) = {}".format(ex))

   Since this program raises exceptions for every invalid input, hence we used Python try-except block
   to catch and print errors. After running the given snippet, you see the following output:
float(None) = float() argument must be a string or a number, not 'NoneType'
float(Python) = could not convert string to float: 'Python'
float(0,1) = could not convert string to float: '0,1'
float(0 1) = could not convert string to float: '0 1'
float((1+2j)) = can't convert complex to float
float(1/0) = division by zero

   We hope that after wrapping up this tutorial, you should feel comfortable in using the Python float()
   method. However, you may practice more with examples to gain confidence.


---
