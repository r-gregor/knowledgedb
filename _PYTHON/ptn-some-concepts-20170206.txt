filename: python_some-concepts_20170206.txt
https://www.quora.com/What-are-some-Python-concepts-I-must-know

What are some Python concepts I must know?

   I have learned about basic Python (lists, dictionaries, functions) and am fairly confident in my
   abilities with them. I need to know where to go next. Can you please list the most important skills I
   ought to research to get a better knowledge. Please give a long list (preferably 10 items or more).

   Variable names are not containers for values. They are pointers to values that live elsewhere.

   Python’s benefit is it’s easy to read, but that only counts if you’re doing things the way Python
   programmers do things. So, read what Python programmers write. Go on Github and read the source for
   Requests, Django, etc.

   If you’re using large arrays or doing any number crunching, use Numpy. And really learn it too
   because it’s awesome.

   Learn to make tests if you’re making any kind of serious application. The time taken to write tests
   will save you time in the end, always does.

   Learn about classes and objects. Also, I see a lot of people using OOP when it’s not needed. Don’t be
   worried about making a simple, proceedural script if that’s the easiest thing for someone else to
   understand.

   Everything you write, you should be thinking about how easy it can be understood in future, by you or
   someone else.

***
    Object Oriented Programming
    1. In Python pretty much everything is an object. Function is an object, class is an object (try
       googling “Python metaclass”), operator (+, -, ==) is an object, module is an object… and of
       course any data type is an object as well. It takes a while to adapt if you come from C++ or
       Java, which claim they’re OOP languages, but they are OOP only to some extent

     Decorators
    1. They’re useful and you start seeing them quite often once you start working on someone else’s
       code, so familiarize yourself with a concept of higher order functions (functions that use other
       functions as parameters and return functions as results)

     Multiple inheritance
    1. It’s a very powerful tool, one that requires care when you start using it. It’s best used either
       as a way to apply mixin to some other class (google it) or as a way to declare that class X
       implements interfaces A and B. In such case do your best to ensure that A and B do not implement
       methods themselves, but only declare their signatures. In Python, where interfaces (Abstract Base
       Classes) are classes, it’s easy to mix interface with implementation which causes more pain than
       gain in the long run.

     Iterators
     List, dict and set comprehension expressions

     Generators
    1. These beasts are lazy functions - semantically they produce a serie of results (like - list of
       values), but they produce results one at a time. So you call a function and you have a generator
       object. You call it’s ‘next()’ method and it produces result. You call ‘next()’ again - and you
       get another result… and you can repeat it until next() raises StopIteration exception.

***
   Python has some neat features you don’t need every day but are still occasionally useful.
    1. Nested functions (closures):
   Example:
def a(b):
   def c(d):
       return b+d
   return c

   A will return a function that adds B to it’s argument. Very useful to pass to functions like map() or
   filter().

   2. Decorators
   Example:
def decorator(f):
    def b(*args):
        print ("calling "+f.__name__)
        return f()
    return b

@decorator
def func(a, b):
    return a*b

   The decorator means that the func=decorator(func). In this case, decorator is a closure that prints
   “calling func” before every call to func. You could, for example, have a profiling decorator that
   measures the time between the start and end of your function. There are also built in decorators like
   the attribute function to make something like a C# get {}.

   3. Iterator comprehension:
(i**2 for i in range(2, 24, 2) if str(i)[0]!='1')

   Very usefull features. You can replace complicated loops and lists with neat, compact statements, and
   it’s also much faster than loops or list comprehension because the values are not stored but rather
   calculated when you need them. If you break out of a loop using a iterator, the rest of the iterator
   will not be stored or calculated.

   4. __name__
class MyProgram(object):
    def __init__(self):
        pass #you should only set variables,
             #not anything error prone here
    def run(self):
        pass #main program logic
    def cleanup(self):
        pass #your cleanup code here

if __name__=="__main__":
    try:
        prog=MyProgram()
        prog.run()
    finally:
        prog.cleanup()

   The __name__==”__main__” makes the code not execute when the file is imported from another script. In
   this way, if you want to use some of the class code from another project, just import it. You won’t
   have to worry about side effects.

   Putting logic in a class has many benefits even for small projects. Keeping local data strictly
   separate from global data means you have less variable names to worry about. You can easily make
   functions without having to worry about how data will be passed back and forth.

   5. Lambda
filter(lambda x: str(x)[0] in ('1','3'), range(0,99))

   define a quick, inline function. Similar to the => in C#.

   6. Looping over files
file=open("checksums")
checksums={i.split("\t")[0]: i.split("\t")[1] for i in file}
f.close()

   I just read a csv file into my dictionary in 3 lines, and it isn’t even unreadable. This is why I
   love python.

   7. Tuples
g=(1,2,2312,"blo")

   A tuple is basically a immutable, yet much better version of a list. It’s much faster, saves a lot of
   memory, you can’t change it by accident, and it’s hash-able so it can be used as a dictionary key.

   8. Useful builtin modules:
import itertools #stuff like Cartesian product and permutation

import functools 	#lots of decorators, for example a decorator that stores the last output in a cage
			and uses it again if possible
import sys, os 		#do system level stuff
import subprocess, multithreading, multiprocessing 
			various multithreading strategies
import curses 		#mess with the terminal
import tkinter 		#make fancy GUIs
import pickle 		#serialize objects
import urllib, ftplib, httplib, poplib
			#communicate with the internet
import md5, zlib, gzip, csv, xml, json
			#common file formats

   9. Useful third party modules:
import twisted 		#asyncronious network programming
import pygame 		#graphics programming
import crypto 		#user friendly cryptography
import httplib2 	#more standards-compliant http
import numpy 		#advanced math and statistics
import django 		#python HTTP server framework
