filename: What-are-some-interesting-things-to-do-with-Python_20170201.txt
https://www.quora.com/What-are-some-interesting-things-to-do-with-Python

What are some interesting things to do with Python?

   I just learnt Python from Codecademy and now I want to make some interesting stuff that takes me
   deeper into the language.

   I want to make something related to Big data or machine learning.

   I already know PHP and C++ and don't want to make the same old patterns, file read write and
   monotonous stuff that is made by people as projects everywhere!
   UpdateCancel

Answer Wiki
   Personally I think, you get a lot of choices.
   Since you are Python beginner, the small project may bring more benefits to you.
   For web crawler:
   Currently, the data analysis is very hot, so you can write some crawler to  get the data from pure
   html not api to practice your Python skill. You can also use some library like "BeautifulSoup"
   [16]Beautiful Soup Documentation to help yourself.
   For Web development:
   You can have a try on some python web frameworks, like Django, Flask, Web2py, Pylons, Zope2, Giotto,
   CubicWeb...... to build some websites to make a practice.
   For Data Structure or Classic Algorithms:
   You can implement some famous and useful Data Structure in Python, something like "SegmentTree",
   "Red-Black Tree", "Trie", "SuffixTree", "IntervalTree"......, and make the Python Egg, and release it
   to PyPI to make it can be used by all Python programmers around the world.
   For Plugin:
   You can build some SublimeText Plugins in Python, something like PHP-Auto-Dollar-Sign..., and release
   to world to benefit all SublimeText users around the world.
   For Library:
   You can create some wrappers for some API, something like, you can develop a Python OAuth library(A
   lot of OAuth libs now), or develop a wrapper for Facebook Graph API, or a wrapper for Locu API......
   Again, make the Python Egg, and release it to PyPI to benefit all Python users.
   For Data Science:
   If you have some knowledge on machine learning and artificial neural network, you can implement some
   algorithms to build your own Python machine learning library.
   For Networking:
   You can use Python to implement some protocols, something like, SMTP, FTP, HTTP (you can also build
   your own HTTP Web Server or load balancer).
   For Cryptology:
   You can implement some encrypt and decrypt library, something like, RSA, RC4, DES......
   Or you can also write some script to break some cipher...
   For Computer Vision:
   You can have a try on "OpenCV for Python" library to build some tinny computer vision system,
   something like face detection.
   For AI:
   You can implement some AI algorithms to build your own game, something like, you can implement
   Alpha-Beta Pruning Search for Tic-Tac-Toe.
   For Game:
   You can build your own Game Bot manually.
   Addition:
   I don't know your knowledge set. But you can use anything in your knowledge set to build some
   interesting thing by Python or other languages. For example: If you are very familiar with US
   Children Stories, you can collect a lot stories, and use machine learning knowledge and NLP to build
   a system to analyze the pattern or mode of these stories, to find something interesting.
   139.8k Views · [17]View Upvotes

Related Questions[18]More Answers Below
   First a joke! My girlfriend broke up with me, because she wrote elaborate code in C over 15 days, for
   a problem that I could solve using Python with code in about 60 mins, with merely 100 lines of code
   :)

   There is some serious work that can be done with Python. In reality the biggest regret of my life is
   ~ Why did I not start using Python about 5 years earlier? I could have been earning at least ~ 50 %
   more than what I earn today.

   Once I got my hands on Python I used it to the best of my capabilities, and I am learning so much
   everyday. The learning curve has been amazing! In fact every hour you spend with Python, you would
   learn a lot and you would get significant improvements very quickly compared to some other
   programming languages.

   Check out some of the best answers on what people are doing all over the world using Python. This is
   straight from Quora, and I occasionally visit this question just to see new additions. [27]What are
   the best Python scripts you've ever written?. A lot of people from all over the world have given
   their Python programs which you should be able to download and use easily.

   My biggest recommendation to anyone and everyone usually is to start learning programming, that too
   with Python.

   One more time ~ If you made zero resolutions for the new year, make this one resolution. “I will
   learn Python this year.” Period.

   Here is what is amazing about Python in my opinion:
     * It is a very light, and an extremely logical language.
     * The Anaconda suite has provided some amazing capabilities for various OSes.
     * Of all the programming languages I have ever used, it has the cleanest and simplest syntax, as if
       it was written for the beauty of the syntax.
     * It has an enormous library and packages maintained by a very large community. These include
       Pandas, NumPy, SciPy and so on. These libraries carry millions of lines of codes, which you can
       simply borrow and use. So you would be building on the top of some of the world’s best
       programmers.
     * There are just too many Python enthusiasts all over the world, so no matter where you are, you
       would have no trouble in finding someone who knows more than you. Stack Overflow now overflows
       with Python support.
     * Implementing machine learning algorithms is much simpler because many of them are available as
       packages and pretty much very minimal programming has to be done to get up and running.
     * There are libraries available for web development. I usually don’t do web development, but some
       of my friends do, and they love it.
     * One can process human readable language with packages such as NLTK. And you can be up and running
       in very little time. Think for example about this project ~ You have data given by Amazon on how
       much people like Apple phones and all that carries human text. You can create beautiful word
       clouds in very little time.
     * The speed is really good. For all practical purposes, I always weigh the amount of time needed to
       code something, and the speed, and I always end up picking Python over C. In fact, in last ~ 2 to
       3 years, I have pretty much moved everything to Python.

       
    1. Now, I do admit that I did PhD in molecular simulations, and if I chose Python to do molecular
       simulations, probably that would not have worked.
    2. C/C++/Fortran are hardcore scientific computing languages, and Python cannot really come close to
       them when the things we want to solve are fluid simulations, molecular simulations, and
       aerodynamic simulations.
    3. Some of my friends who work in options trading world tell me that their language of use is C++.
       C++ is object oriented, and lightening quick when it comes to speed. Coding is certainly much
       heavier, but folks in those businesses have to do with speed over functionality, because they are
       all competing for money.

     * People working in industries like Intel, Exxon, BP, all kinds of FMCG industries, and industries
       like Nike, Adidas, and so on, can benefit the most from Python. I am more specifically talking
       about non-software folks, who have not exactly learned the computer science fundamentals, and
       cannot really spend 4–6 year of their lives learning programming languages and software
       development.

    1. Python will take 2–3 months only for you to make a significant improvement.

     * I have friends who are biologists who were able to learn Python for their practical purposes and
       could derive a large value out of it in very little time spent.
     * Check out what one can do with just one to two lines of code in Python: This answer of mine had
       gotten a ton of hits when I published it. I was actually shocked that it got so many upvotes.
       [28]Rohit Malshe's answer to What are some of the greatest Python one liners?

   What have I not liked about Python? (Some people’s opinions may differ)
   Perhaps the only thing I want to point out is that if someone wanted to develop GUIs, their GUIs may
   not look as good as some of those developed in Visual Studio. I have personally liked Visual Studio
   GUIs better, but I may be wrong. Libraries like PyQT, Tkinter, etc. are available. I have just stayed
   away from them.

   Some Java programmers, or C# enthusiasts will never have any trouble whatsoever when they would want
   to program GUIs, but Python people will not shine here so easily.

   For anyone with just an year of experience in Python, one can make significant achievements.
   Data analysis:
    1. One can create all sorts of data reports by getting data from various sources. Usually in
       industry setting, SQL becomes an important part, but Python lets one run SQL very easily.
    2. I highly recommend the readers of this answer to also learn SQL if they need it, and learn it
       systematically. Their data science skills will take a step jump. [29]Rohit Malshe's answer to Why
       is Python considered a good language for AI and Machine Learning?
    3. One can then use iPython notebooks, that look very pretty for presenting lots of data, plots, and
       so on, and things can be automated to run on a daily basis.
    4. This is an enormous and vast field. One can do all sorts of statistical analysis, and compete
       with someone using JMP, R, SAS and so on.
    5. I answered some time back, if Python is better than R. And I have to tell you that I use Python
       although I know how to use R. [30]Rohit Malshe's answer to Is Python better than R?
    6. Python programmers will usually have an edge over all of the above.
    7. Read my answer on data science world: [31]Rohit Malshe's answer to How can I become a data
       scientist?
    8. Machine learning in itself is a vast field, but using Python’s pre-existing packages such as
       Sci-kit learn, one can become a machine learning engineer in very little time. At least you can
       easily begin working with datasets on Kaggle, and derive value out of it.
    9. Checkout out the type of plots one can easily make using the Seaborn library in Python.

    Same way, making correlations plots is easy too:

   Or this:
    Automating boring stuff:
    1. One can use PyAutoGUI module to automate a large number of screen tasks.
    2. This is extremely simple to use, and one can learn this in just 3 to 4 hours and can build
       substantial automation in their work.
    3. To learn this, Google ~ Automate boring stuff with Python.

     Web development:
    1. In addition to this, one can create and maintain websites ~ for which they would have to learn
       Django and other frameworks, but the basics remain the same.
    2. This is an elaborate field and would take some time to be good at it, but there is just no limit
       to what you cannot do.
    3. [32]25 of the Most Popular Python and Django Websites: You would be amazed to see the websites
       people have designed using Python.

     Web scraping and API usage:
    1. Imagine this project: Download S&P500, Nasdaq, volatility, interest rates, and so on ~ data from
       federal reserve bank, Yahoo or Google Finance, and derive value and conclusions out of it. Python
       will crack this in no time. There are APIs available for this and some already existing packages
       that you only have to import to start doing this.
    2. To develop a program that can plot S&P500, and every possible index from Federal reserve bank
       website, it took me merely 2 to 3 hours.

     Constantly updating schedules:
    1. By using Raspberry Pi, one can automate things like ~ “Constantly show me the timings of upcoming
       buses, or trains”. So if you have a screen, a Raspberry Pi, and some Python programming skills,
       you can build an automatic schedule display in no time, and at a very low price.
    2. A friend of mine who lives in Chicago travels to most places by some or the other public
       transport, and he has reverse engineered the code to tell him when to make a move from his home
       to catch the bus. Sure, this can be done easily by a cell phone app, but why not do it yourself
       for the fun and love of it.

     Robotics:
    1. One can control robotics using Raspberry Pi, and Python programming.
    2. This science is also quite elaborate, but once you know how to use a Raspberry Pi, it is not
       tremendously hard.

     Game development:
    1. Probably I am not the best person to comment on this, but a lot of programmers use Python for
       game development. Python is quick enough, and fast to code for such purposes.

     GUI development:
    1. I have to say, there may be better programming languages for this. Microsoft support for many
       other programming languages has been better than that for Python.
    2. My wish will come true, when Python and Visual Basic are combined one day to be fully integrated.
       Then one can enjoy the graphics of visual basic, and programming capabilities of Python.

     AI type of solutions:
    1. You can use Python’s libraries to talk to the computer, and get some enhancements from some of
       the other already existing software that does this task. The backend can then be built in Python.
    2. Check out this answer on how you can talk to your computer: [33]Rohit Malshe's answer to What
       should I do after reading "Building Machine Learning Systems With Python" if I want to be able to
       make a system that can speak like a person?

     Image processing:
    1. My job requires image processing, and some scientific computing such as calculating Fourier
       transforms, and deriving conclusions out of them. This can be done by Python programming easily
       enough compared to some other programming languages. Probably some people who have used MATLAB
       would be delighted to know that Python can crack this problem easily enough.

     Automating emails and reports:
    1. One can setup automatic reports to send you information on one or the other thing. Imagine this ~
       What are the prices of 100 stocks at the open ~ send mails to you on this on a daily basis ~
       Python will achieve this very easily.
    2. Download reports from your organizations SQL server, process everything according to a particular
       sequence and logic and send you a report every morning ~ Python will achieve it a day or less.

     Machine learning:
    1. Today I wrote about how can one go about learning machine learning. Some readers may find this
       helpful, hence I am somewhat interlinking my answers. [34]Rohit Malshe's answer to How do I learn
       machine learning?

     Now the biggest question: How do I learn all this?
     I would recommend following pathway, which somewhat worked for me, although I keep jumping to and
     fro these days wherever I get stuck:
    1. First things first: Installation: I suggest beginners to use ~ Installation from [35]Download
       Anaconda Now!. I started with Python 2.7, and I am happy with it. I have used Python 3.5 too, but
       then I kept coming back to 2.7. I think it is the most supported branch, and it works for all
       practical purposes.
    2. Where to program: To program, one can use Spyder, or Jupyter notebooks. Complex programming
       platforms exist such as those given in the below:
    3. Where to program: Sublime Text: [36]Sublime Text - Download,
    4. Where to program: Atom: [37]A hackable text editor for the 21st Century. This was somewhat harder
       because it doesn’t really allow installing themes and packages so easily. I actually stopped
       using it. It did have some amazing features though ~ For example ‘code complete’.
    5. Where to program: Pycharm: [38]PyCharm. As you grow in Python programming as profession, move on
       to using PyCharm. That is what most hardcore programmers use. But the licence for this can be
       costly.

     Now the basic learning:
    1. Which website to go to: Go to [39]Python Programming Tutorials and learn the basics. The
       programmer is very nice and teaches everything in a very simple way. My idea about learning
       anything and everything is to get the basics out of the way, and this website will achieve the
       purpose.
    2. Which website to go to: The second source should be: Learn Python The Hard Way: [40]Learn Python
       the Hard Way. I spend a decent amount of time on this, though I moved on to next thing whenever I
       thought I had gotten a reasonable solution.
    3. Which website to go to: Similarly there are other programmers: Such as [41]Python for Developers.
    4. Which website to go to: One really good source I found is ~ [42]Automate the Boring Stuff with
       Python. You would find detailed answers to a lot of questions on this website/book, and you
       should be able to get some good value out of it.
    5. Which website to not go to: I would actually recommend that people stay away from Udemy, and
       Coursera, because they can confuse themselves initially. It is not that those courses are not
       good, but my opinion is that they aren’t made to be interesting and practical.
    6. Which website to go to: A few of data-scientists I know suggested Google’s Python class:
       [43]Google's Python Class | Python Education
        | Google Developers. I spent some time here as well, but I felt like I knew a few things
       already, so I quickly moved on.
    7. How to go about loading up packages: Packages can be loaded up from here:
       [44]vinta/awesome-python
    8. What packages to learn: Quickly as you have learned the basics, dive into learning the packages,
       and begin with Pandas, NumPy, SciPy, Matplotlib, Seaborn, and Scikit Learn.
    9. What packages to learn: Learn pandas from here: [45]10 Minutes to pandas, and detailed synopsis
       from [46]http://pandas.pydata.org/pandas-..., or [47]pandas: powerful Python data analysis
       toolkit
   10. What packages to learn: Learn machine learning from here: [48]scikit-learn: machine learning in
       Python
   11. How to learn from others: Follow other people and how they write codes on Kaggle: [49]Your Home
       for Data Science
   12. For plotting, follow this website: [50]Seaborn: statistical data visualization
   13. How to learn from others: Get inspiration from how to come up with beautiful notebooks from here:
       [51]Notebook Gallery
   14. Is there one resource for everything I need to know? You can probably make this your homepage or
       something: [52]vinta/awesome-python. It gives a long curated list of Python packages that can
       keep someone busy for several months.
   15. How can I program for GUI development: WxGlade seems to be one of the best resources.
       [53]FrontPage - wxPyWiki
   16. Kivy [54]Kivy: Cross-platform Python Framework for NUI also seems to be a very nice GUI
       development tool.

   If I get some more comments on this answer, I will surely add more. I am going to take this answer to
   greater heights and keep adding more to it as I get some comments and more inspiration. For now, I
   should put my pen down, but before that, I wanted to make this answer inspirational too, so here is
   some.

   And since I said inspiration, why not from Steve Jobs and Elon Musk?

   “I observed something fairly early on at Apple, which I didn’t know how to explain then, but have
   thought a lot about it since. Most things in life have a dynamic range in which average to best is at
   most 2:1. For example if you go to New York City and get an average taxi cab driver versus the best
   taxi cab driver, you’ll probably get to your destination with the best taxi driver 30% faster. And an
   automobile; What’s the difference between the average car and the best? Maybe 20% ? The best CD
   player versus the average CD player? Maybe 20% ? So 2:1 is a big dynamic range for most things in
   life. Now, in software, and it used to be the case in hardware, the difference between the average
   software developer and the best is 50:1; Maybe even 100:1. Very few things in life are like this, but
   what I was lucky enough to spend my life doing, which is software, is like this. So I’ve built a lot
   of my success on finding these truly gifted people, and not settling for ‘B’ and ‘C’ players, but
   really going for the ‘A’ players. And I found something… I found that when you get enough ‘A’ players
   together; when you go through the incredible work to find these ‘A’ players, they really like working
   with each other. Because most have never had the chance to do that before. And they don’t work with
   ‘B’ and ‘C’ players, so it’s self policing. They only want to hire ‘A’ players. So you build these
   pockets of ‘A’ players and it just propagates.”

   Elon Musk: Movement of molecules is expensive, but that of electrons is cheap. If one can optimize
   the movement of molecules by movement of electrons, they can be orders of magnitude better.

   Read this analysis at: [55]Rohit Malshe's answer to Is Elon Musk the next Steve Jobs?

   Function decorators are particularly neat in Python. They allow you to enhance the functionality of
   existing functions.

   Let me demonstrate with a simple example of calculating the factorial of a number recursively:
def factorial(n):
   if n == 0:
      return 1
   return n * factorial(n - 1)

   One way to speed up this function is to use [60]Memoization. Using decorators, this can be easily
   achieved:
def memoize(f):
   cache = {}

   def inner(n):
      if n not in cache:
         cache[n] = f(n)
      return cache[n]

   return inner

@memoize
def factorial(n):
   if n == 0:
      return 1
   return n * factorial(n - 1)

   One call to factorial results in the cache building up for all numbers < n. Next time you invoke
   factorial for a number < n, the result is not computed but fetched from the cache. This makes it easy
   to separate out the cache maintaining logic from the function being decorated.

   @memoize is syntactic sugar for:
factorial = memoize(factorial)

   To make the memoize function more general (the way I use it often):
def memoize(f):
    cache = {}

    def inner(*args, **kwargs):
        if args not in cache:
            cache[args] = f(*args, **kwargs)
        return cache[args]

    inner.__name__ = 'memoized_' + f.__name__
    return inner

   This makes it possible to use it for functions with different number and types of arguments. The
   arguments that should be the cache key must be passed positionally (normally) while the others should
   be named arguments. Any mutable objects should also be passed as named arguments because Python
   doesn't allow mutable dictionary keys. To illustrate with an example:
@memoize
def find_path(source, graph=graph, path=[]):
...

   Here, graph and path are passed as named arguments.

   The line below renames the "name" attribute of the function with the name of the actual function
   being decorated. This is helpful for debugging because the value of __name__ is printed in a stack
   trace. There is actually a library function (functools.wraps) that does this.
inner.__name__ = 'memoized_' + f.__name__

   This is just one example of how function decorators in Python can be used. Another quick example for
   the web developers:
@requires_login
def home_page():
...

   This way you can separate the logic for user authentication from the view rendering functions.

   Pretty neat!

References

   Visible links
   1. https://www.quora.com/opensearch/description.xml
   2. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python?page_id=2
   3. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
   4. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
   5. https://www.quora.com/
   6. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
   7. https://www.quora.com/topic/Interestingness
   8. https://www.quora.com/topic/Learning-Python
   9. https://www.quora.com/topic/Python-programming-language-1
  10. https://www.quora.com/topic/Learning-to-Program
  11. https://www.quora.com/topic/Programming-Languages
  12. https://www.quora.com/topic/Computer-Programming
  13. https://www.quora.com/profile/Zhaonan-Li-2
  14. https://www.quora.com/profile/Zhaonan-Li-2
  15. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python/answer/Zhaonan-Li-2
  16. http://www.crummy.com/software/BeautifulSoup/bs4/doc/
  17. https://www.quora.com/api/mobile_expanded_voter_list?type=answer&key=zXpg3RkCYWP
  18. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python#MoreAnswers
  19. https://www.quora.com/What-are-all-the-things-will-I-be-able-to-do-after-I-learn-Python
  20. https://www.quora.com/Some-cool-things-about-Python-that-everyone-must-know
  21. https://www.quora.com/Which-server-side-programming-language-is-the-best-for-a-starting-programmer-Perl-PHP-Python-Ruby-JavaScript-Node-Scala-Java-Go-ASP-NET-or-ColdFusion
  22. https://www.quora.com/What-are-some-things-that-Java-can-do-that-Python-and-Node-js-cannot
  23. https://www.quora.com/What-are-some-cool-things-to-do-with-Python
  24. https://www.quora.com/profile/Rohit-Malshe
  25. https://www.quora.com/profile/Rohit-Malshe
  26. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python/answer/Rohit-Malshe
  27. https://www.quora.com/What-are-the-best-Python-scripts-youve-ever-written
  28. https://www.quora.com/What-are-some-of-the-greatest-Python-one-liners/answer/Rohit-Malshe
  29. https://www.quora.com/Why-is-Python-considered-a-good-language-for-AI-and-Machine-Learning/answer/Rohit-Malshe
  30. https://www.quora.com/Is-Python-better-than-R/answer/Rohit-Malshe
  31. https://www.quora.com/How-can-I-become-a-data-scientist-1/answer/Rohit-Malshe
  32. https://www.shuup.com/en/blog/25-of-the-most-popular-python-and-django-websites/
  33. https://www.quora.com/What-should-I-do-after-reading-Building-Machine-Learning-Systems-With-Python-if-I-want-to-be-able-to-make-a-system-that-can-speak-like-a-person/answer/Rohit-Malshe
  34. https://www.quora.com/How-do-I-learn-machine-learning-1/answer/Rohit-Malshe
  35. https://www.continuum.io/downloads
  36. https://www.sublimetext.com/3
  37. https://atom.io/
  38. https://www.jetbrains.com/pycharm/
  39. http://pythonprogramming.net/
  40. https://learnpythonthehardway.org/book/
  41. http://ricardoduarte.github.io/python-for-developers/
  42. https://automatetheboringstuff.com/
  43. https://developers.google.com/edu/python/
  44. https://github.com/vinta/awesome-python
  45. http://pandas.pydata.org/pandas-docs/stable/10min.html
  46. http://pandas.pydata.org/pandas-docs/stable/pandas.pdf
  47. http://pandas.pydata.org/pandas-docs/stable/index.html
  48. http://scikit-learn.org/stable/
  49. https://www.kaggle.com/
  50. http://seaborn.pydata.org/
  51. http://nb.bianp.net/sort/views/
  52. https://github.com/vinta/awesome-python
  53. https://wiki.wxpython.org/FrontPage
  54. https://kivy.org/#home
  55. https://www.quora.com/Is-Elon-Musk-the-next-Steve-Jobs/answer/Rohit-Malshe
  56. https://www.quora.com/api/mobile_expanded_voter_list?type=answer&key=IsmwkHZvVgW
  57. https://www.quora.com/profile/Farhan-Khan-8
  58. https://www.quora.com/profile/Farhan-Khan-8
  59. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python/answer/Farhan-Khan-8
  60. https://en.wikipedia.org/wiki/Memoization
  61. https://www.quora.com/api/mobile_expanded_voter_list?type=answer&key=4GV4uWWJUYm
  62. https://www.quora.com/profile/Giacomo-Sorbi
  63. https://www.quora.com/profile/Giacomo-Sorbi
  64. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python/answer/Giacomo-Sorbi
  65. http://www.codewars.com/r/Nd_E0g
  66. http://www.codewars.com/users/leaderboard
  67. https://www.quora.com/api/mobile_expanded_voter_list?type=answer&key=3clOvGwZIC2
  68. https://www.quora.com/profile/Martin-Raag
  69. https://www.quora.com/profile/Martin-Raag
  70. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python/answer/Martin-Raag
  71. http://docs.python.org/2/library/basehttpserver.html#module-BaseHTTPServer
  72. http://docs.python.org/3/library/http.server.html#module-http.server
  73. http://flask.pocoo.org/
  74. http://flask.pocoo.org/docs/becomingbig/
  75. http://www.tornadoweb.org/
  76. http://webpy.org/
  77. https://www.quora.com/api/mobile_expanded_voter_list?type=answer&key=aIAcmdTSGXi
  78. https://www.quora.com/What-interesting-projects-can-I-take-on-to-learn-Python-not-super-advanced
  79. https://www.quora.com/How-do-I-get-interested-in-programming-in-Python-if-I-find-the-experience-dull-boring-tedious-and-hard
  80. https://www.quora.com/I-am-a-R-user-and-interested-in-learning-Python-How-can-I-learn-Python-How-do-I-set-up-the-machine-for-the-first-time
  81. https://www.quora.com/unanswered/I-want-to-build-a-chat-application-in-python-I-have-the-basics-of-python-What-else-i-have-to-learn-specially-things-related-to-networking
  82. https://www.quora.com/Which-are-the-things-that-Python-can-do-but-Perl-cannot
  83. https://www.quora.com/Is-Python-good-for-automating-things-in-Windows-What-can-you-do-with-it
  84. https://www.quora.com/unanswered/I-am-new-to-programming-but-I-find-Python-boring-I-find-Ruby-Java-and-C++-much-more-interesting-Should-I-ditch-python-and-learn-a-new-language
  85. https://www.quora.com/Can-you-build-the-same-things-in-PyQt-Python-as-you-can-in-Qt-C++
  86. https://www.quora.com/What-interesting-things-can-I-make-using-C++
  87. https://www.quora.com/Is-Python-Shell-another-way-of-saying-Python-Interpreter-or-is-it-a-different-thing
  88. https://www.quora.com/What-role-would-Python-as-a-programming-language-play-in-the-Internet-of-Things-IoT-paradigm
  89. https://www.quora.com/Why-this-python-code-is-printing-such-a-weird-thing
  90. https://www.quora.com/How-long-does-it-take-for-a-newbie-to-learn-Python
  91. https://www.quora.com/What-are-some-things-that-R-can-do-that-Python-cannot
  92. https://www.quora.com/What-are-some-super-cool-things-that-I-can-program-in-Python
  93. https://www.quora.com/What-are-all-the-things-will-I-be-able-to-do-after-I-learn-Python
  94. https://www.quora.com/Some-cool-things-about-Python-that-everyone-must-know
  95. https://www.quora.com/Which-server-side-programming-language-is-the-best-for-a-starting-programmer-Perl-PHP-Python-Ruby-JavaScript-Node-Scala-Java-Go-ASP-NET-or-ColdFusion
  96. https://www.quora.com/What-are-some-things-that-Java-can-do-that-Python-and-Node-js-cannot
  97. https://www.quora.com/What-are-some-cool-things-to-do-with-Python
  98. https://www.quora.com/What-interesting-projects-can-I-take-on-to-learn-Python-not-super-advanced
  99. https://www.quora.com/How-do-I-get-interested-in-programming-in-Python-if-I-find-the-experience-dull-boring-tedious-and-hard
 100. https://www.quora.com/I-am-a-R-user-and-interested-in-learning-Python-How-can-I-learn-Python-How-do-I-set-up-the-machine-for-the-first-time
 101. https://www.quora.com/unanswered/I-want-to-build-a-chat-application-in-python-I-have-the-basics-of-python-What-else-i-have-to-learn-specially-things-related-to-networking
 102. https://www.quora.com/Which-are-the-things-that-Python-can-do-but-Perl-cannot
 103. https://www.quora.com/
 104. https://www.quora.com/sitemap
 105. https://www.quora.com/sitemap/alphabetical_topics/0
 106. https://www.quora.com/sitemap/alphabetical_topics/a
 107. https://www.quora.com/sitemap/alphabetical_topics/b
 108. https://www.quora.com/sitemap/alphabetical_topics/c
 109. https://www.quora.com/sitemap/alphabetical_topics/d
 110. https://www.quora.com/sitemap/alphabetical_topics/e
 111. https://www.quora.com/sitemap/alphabetical_topics/f
 112. https://www.quora.com/sitemap/alphabetical_topics/g
 113. https://www.quora.com/sitemap/alphabetical_topics/h
 114. https://www.quora.com/sitemap/alphabetical_topics/i
 115. https://www.quora.com/sitemap/alphabetical_topics/j
 116. https://www.quora.com/sitemap/alphabetical_topics/k
 117. https://www.quora.com/sitemap/alphabetical_topics/l
 118. https://www.quora.com/sitemap/alphabetical_topics/m
 119. https://www.quora.com/sitemap/alphabetical_topics/n
 120. https://www.quora.com/sitemap/alphabetical_topics/o
 121. https://www.quora.com/sitemap/alphabetical_topics/p
 122. https://www.quora.com/sitemap/alphabetical_topics/q
 123. https://www.quora.com/sitemap/alphabetical_topics/r
 124. https://www.quora.com/sitemap/alphabetical_topics/s
 125. https://www.quora.com/sitemap/alphabetical_topics/t
 126. https://www.quora.com/sitemap/alphabetical_topics/u
 127. https://www.quora.com/sitemap/alphabetical_topics/v
 128. https://www.quora.com/sitemap/alphabetical_topics/w
 129. https://www.quora.com/sitemap/alphabetical_topics/x
 130. https://www.quora.com/sitemap/alphabetical_topics/y
 131. https://www.quora.com/sitemap/alphabetical_topics/z
 132. https://www.quora.com/about
 133. https://www.quora.com/careers
 134. https://www.quora.com/about/privacy
 135. https://www.quora.com/about/tos
 136. https://www.quora.com/contact

   Hidden links:
 137. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
 138. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
 139. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
 140. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
 141. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
 142. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python
 143. https://www.quora.com/What-are-some-interesting-things-to-do-with-Python


---

