filename: python_using-absolute-unix-paths-in-windows_20151006.txt
http://stackoverflow.com/questions/13162372/using-absolute-unix-paths-in-windows-with-python

Using absolute unix paths in windows with python

I'm creating an application that stores blob files into the hard drive, but this script must run in both
linux and windows, the issue is that i want to give it an absolute path from the filesystem root and
not one relative to the project files, this because im using git and dont want to deal with excluding
all these files from syncing.

So i would like to have something like this:

path = '/var/lib/blob_files/'
file = open(path+'myfile.blob', 'w')
and get a file in unix at:

/var/lib/blob_files/myfile.blob
and in windows at:

C:\var\lib\blob_files\myfile.blob
it could also be relative to the user home folder (/home/user in unix and C:/Users/User in windows)
but i guess the problem is very similar.

How can i achieve this? is there any library or function that can help me transparently to convert this
paths without having to ask in what plataform is the scrip running all the time?

Of my two options, absolute from root or relative from home folder, which one do you recomend to use?

Thanks in advance for any advice on this

python windows unix path cross-platform

***
possible duplicate of Platform-independent file paths? –  dm03514 Oct 31 '12 at 16:20

***
Not a duplicate. Come on guys, give new people a break. –  Chris Dutrow Oct 31 '12 at 16:56

***
I'm not sure why you think you need an absolute path "because im using git and dont want to deal with
excluding all these files". How does that follow? At any rate, it seems like home-relative makes more sense
here, because Windows users won't have a directory called C:\var\lib`, so creating C:\var\lib\blob_files`
will be weird, but creating the Windows equivalent of ~/.blob_files is perfectly reasonable. –  abarnert

***
Use os.path.abspath(), and also os.path.expanduser() for files relative to the user's home directory:

print os.path.abspath("/var/lib/blob_files/myfile.blob")
>>> C:\var\lib\blob_files\myfile.blob

print os.path.abspath(os.path.expanduser("~/blob_files/myfile.blob"))
>>> C:\Users\jerry\blob_files\myfile.blob
These will "do the right thing" for both Windows and POSIX paths.

expanduser() won't change the path if it doesn't have a ~ in it, so you can safely use it with all
paths. Thus, you can easily write a wrapper function:

import os
def fixpath(path):
    return os.path.abspath(os.path.expanduser(path))
Note that the drive letter used will be the drive specified by the current working directory of the Python
process, usually the directory your script is in (if launching from Windows Explorer, and assuming your
script doesn't change it). If you want to force it to always be C: you can do something like this:

import os
def fixpath(path):
    path = os.path.normpath(os.path.expanduser(path))
    if path.startswith("\\"): return "C:" + path
    return path

***
thank you so much this is exactly what i was looking for –  jeruki Oct 31 '12 at 16:38

***
You don't need abspath here; you need normpath. It's true that abspath implicitly calls normpath,
but you should call the right function for the job, not one that happens to work by accident. Also,
is this actually going to be on C:, or on the current drive? (And which one is appropriate for the OP's
use?) –  abarnert Oct 31 '12 at 18:20

***
I chose abspath() intentionally since normpath() doesn't add the drive letter to the returned path. It
was hardly an accident. The drive letter will be the one on the current directory where the Python script
lives (I'll update my answer accordingly). –	kindall Oct 31 '12 at 18:47
