filename: python_algorithm_maximum-repeating-element-in-an-array_20171017.txt
https://www.quora.com/What-is-the-best-algorithm-to-find-the-maximum-repeating-element-in-an-array

   What is the best algorithm to find the maximum repeating element in an array?

Amarnath Cherukuri, Mobile SW Developer
Answered Jan 30, 2014
In my assumption:

I/P array = {1,2,1,5,1,3,4,3,1,5};

So the O/P should be:
Num : 1, No.of times : 4.

Here is the code snippet.
=============================================
count = 0, curr_cnt = 1, freq_num = 0, key = 0;
for(i = 0; i < n-1; i++)
{
    key = a[i];
    for(j =i+1; j < n; j++)
    {
        if(key == a[j] && freq_num != key)
        {
            curr_cnt++;
        }
    }
    if(count < curr_cnt)
    {
        count = curr_cnt;
        curr_cnt = 1;
        freq_num = key;
    }
}
printf("Num = %d and times = %d", freq_num, count);

=============================================

***
Answered Jan 5, 2016
Please make good algorithm with this support. I think you get a complete idea.
#include <stdio.h>

#define SIZE 13

int boyerMoore(int arr[]) {
    int current_candidate = arr[0], counter = 0, i;
    for (i = 0; i < SIZE; ++i) {
        if (current_candidate == arr[i]) {
            ++counter;
            printf("candidate: %i, counter: %i\n",current_candidate,counter);
        } else if (counter == 0) {
            current_candidate = arr[i];
            ++counter;
            printf("candidate: %i, counter: %i\n",current_candidate,counter);
        } else {
            --counter;
            printf("candidate: %i, counter: %i\n",current_candidate,counter);
        }
    }
    return current_candidate;
}

int main() {
    int numbers[SIZE] = {5,5,5,3,3,1,1,3,3,3,1,3,3};
    printf("majority: %i\n", boyerMoore(numbers));
    return 0;
}


***
Asif Q, Software Developer
Answered Aug 28
// Not claiming this to be best
//However, in terms of time complexity it works at O(N), which is //best possible for this problem
//
 
public class H1 {
 
    public int findHighestRepeatingElement(int[] A) {
 
        int highestRepeatingElement = -1;
        int maxFrequency = -1;
        Map<Integer, Integer> freqMap = new HashMap<Integer, Integer>();
 
        for (int i = 0; i < A.length; i++) {
 
            if (freqMap.containsKey(A[i])) {
                freqMap.put(A[i], 1 + freqMap.get(A[i]));
            } else {
                freqMap.put(A[i], 1);
            }
            if (maxFrequency < freqMap.get(A[i])) {
                maxFrequency = freqMap.get(A[i]);
                highestRepeatingElement = A[i];
            }
        }
        System.out.println("frequency table: " + freqMap);
        return highestRepeatingElement;
    }
 
    @Test    public void test1() {
        H1 h = new H1();
        System.out.println(h.findHighestRepeatingElement(
                new int[]{3, 4, 5, 6, 7, 2, 2, 2, 3}));
 
    }
 
 
}

***
Dmytro Manannykov
Dmytro Manannykov, Senior BI Engineer at Amazon (2016-present)
Answered Aug 28

def findMaxRepeating(inList):
    print "Source list: %s" % inList 
    if inList:
        inList.sort()
        cntMap = {}
        for n in inList:
            if n in cntMap:
                cntMap[n] += 1
            else:
                cntMap[n] = 1
        lst = sorted(cntMap, key=cntMap.get, reverse = True)
        lstDbl = []
        for v in cntMap:
            if cntMap[v] == cntMap[lst[0]]:
                lstDbl.append(v)
        if len(lstDbl) > 1:   
            retStr = "More than one element with max appearence: %s (%s times)" % (lstDbl, cntMap[lst[0]])
        else:
            retStr = "Max repeating number: %s (%s times)" % (lst[0], cntMap[lst[0]])      
    else:
        retStr = "List is empty"
        
    return retStr
                 
print findMaxRepeating([1,2,3,4,5,6,7,8,9,1]) # --> "Max repeating number: 1 (2 times)"
print findMaxRepeating([9,8,7,6,5,7,4,3,2,1,7]) # --> "Max repeating number: 7 (3 times)"
print findMaxRepeating([])                    # --> "List is empty" 
print findMaxRepeating([4,5,6,7,7,8,9,9]) # --> "More than one element with max appearence: [7,9] (2 times)"
print findMaxRepeating([3,3,5,6]) # --> "Max repeating number: 3 (2 times)"
print findMaxRepeating([8,2,3,4,6,5,6,7,8,1,8,6]) # --> "More than one element with max appearence: [6,8] (3 times)" 
