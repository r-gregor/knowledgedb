https://opensource.com/article/20/4/package-python-applications-linux

How to package Python applications for Linux

Learn how to use dh_virtualenv to make your Python applications installable as .deb packages.

   One way to make Python applications installable on Debian-based operating systems (such as
   Debian or Elementary OS) is by using the dh_virtualenv tool. It builds a .deb
   package that wraps a Python virtual environment around an application and deploys it upon
   installing.

   In this article, I will explain how to use it with the example of building a package
   containing the HTTPie tool to test HTTP APIs from the command line without having to
   activate a virtual environment.

Packaging with dh_virtualenv
   First, you need to install the tools that dh_virtualenv needs. dh_virtualenv's
   documentation provides all of the installation options. On my Debian-based system, I
   entered:
apt-get install dh-virtualenv devscripts

   While the devscripts package is not required, it will simplify doing the subsequent
   operations.

   Now, create a directory to keep the sources. Since this is a local, unofficial, packaging
   of HTTPie, I called it myhttp. Next, let's create some files inside myhttp to
   provide metadata to the Debian build system.

   First, create the debian/control file:

   Source: myhttp
   Section: python
   Priority: extra
   Maintainer: Jan Doe <jandoe@example.org>
   Build-Depends: debhelper (>= 9), python3.7, dh-virtualenv (>= 0.8)
   Standards-Version: 3.9.5
   Package: myhttp
   Architecture: any
   Pre-Depends: dpkg (>= 1.16.1), python3.7, ${misc:Pre-Depends}
   Depends: ${misc:Depends}
   Description: http client
    Useful for doing stuff

   So what is all this information about? As the Debian documentation puts it:

     "Lines 1–7 are the control information for the source package. Lines 9–13 are the
     control information for the binary package."

   Here's my take:
     * the section value is mostly meaningless for our case, but needs to be there. It's
       meaningful to provide information to the guided UI installer, which is not relevant for
       this package.
     * The extra Priority value is the right priority for 3rd party packages like this one.
     * It is highly recommended to put real contact details in the Maintainer field. It does
       not have to be your personal e-mail, though -- "Infrastructure Team
       <infra-team-list@company.example.com>", for example, if the package is maintained
       by the team and you would like issues to be sent to the team's mail alias.
     * The build-depends field indicates that you need debhelper, python, and dh-virtualenv to
       build the package: the package build process will make sure those dependencies are
       installed at package build time.
     * The standards version is mostly for human consumption. It indicates which guide you are
       following. This guide is based on the official documentation of dh-virtualenv, which is
       based on the 3.9.5 guide from Debian. It is almost always the best choice to name the
       binary package and the source package the same.
     * The Architecture field should be Any because a virtual environment might include some
       architecture-specific files: otherwise, the field would be better chosen as all.
     * Keep the pre-depends list as-is: pre-depends is a pretty strict form of dependencies,
       and it is rare that you need anything more than the minimum suggested here. The
       dependencies are usually calculated accurately by the build system, so there is no
       reason to specify them manually.
     * If your package is mostly for internal use, then the Description might only specify
       minimal information and a link to the company wiki; otherwise, more details might be
       useful.

   Then create the debian/compat file, which exists mostly for historical purposes:
$ echo "9" > debian/compat

   Next, create the changelog to tell package users what has changed since the last release.
   The easiest way is to use dch --create to create a template and then fill in the values.

   Filled in, it looks like:

   myhttp (2.0.0-1) stable; urgency=medium
     * Initial release.
    -- Jan Doe <jandoe@example.org>  Fri, 27 Mar 2020 01:09:22 +0000

   Now you need to tell the tool to install HTTPie, but which version?

   Create a requirements.in file that has loose versions:
httpie

   In general, the loose requirements file will only contain direct dependencies of your
   project and will specify minimum versions if needed. It is not always necessary to specify
   the minimum versions: the tools are usually biased towards tightening the dependencies
   towards "latest version possible". In the case where your Debian package corresponds to one
   internal Python package, a common case in internal applications, the loose requirements
   file will look similar: just one line with the name of the package.

   Then use pip-compile (which is available by installing the PyPI package pip-tools):
$ pip-compile requirements.in > requirements.txt

   This will produce a strict dependency file called requirements.txt:

   #
   # This file is autogenerated by pip-compile
   # To update, run:
   #
   #    pip-compile requirements.in
   #
   certifi==2019.11.28       # via requests
   chardet==3.0.4            # via requests
   httpie==2.0.0             # via -r requirements.in
   idna==2.9                 # via requests
   pygments==2.6.1           # via httpie
   requests==2.23.0          # via httpie
   urllib3==1.25.8           # via requests

   Finally, write a debian/rules file for creating the package. Since dh_virtualenv does all
   the hard work, the rules file is simple:

   #!/usr/bin/make -f
   %:
           dh $@ --with python-virtualenv --python /usr/bin/python3.7

   Be sure to specify the Python interpreter. By default, it will use the interpreter in
   /usr/bin/python, which is Python 2, but you should use a supported version of Python.

   The writing is finished; all that's left is to build the package:
$ debuild -b -us -uc

   This will produce a file in the parent directory with a name like myhttp_2.0.0-1_amd64.deb.
   This file can be installed on any compatible operating system.

   In general, it's best to build Debian packages that are intended for a specific platform,
   such as Debian 10.0, on the same platform.

   You can store this Debian package in a repository and install it on all relevant systems
   with, for example, Ansible.

Conclusion
   Packaging applications for Debian-based operating systems is a multi-step process. Using
   dh_virtualenv will make the process straightforward.


---
https://marthall.github.io/blog/how-to-package-a-python-app/

How to package a python application to make it pip-installable

   Python scripts are usable for a lot of stuff, i.e. fetching tha latest posts from /r/python
   or counting the total number of lines in your project folder. However, remembering where a
   script is placed and having to type python dest/to/script/myscript.py every time can be a
   lot of pain. Of course, you can make an alias so you only have to type myscript to run it,
   but it would be much nicer to make the script available from any computer, any place, and
   in addition possibly helping others with the same problem.

   It only takes three simple steps to make you python app pip-installable.
    1. Write your script or application
    2. Add a setup script
    3. Upload to PyPI

   After this, you and anyone else can install it by typing:
pip install my_awesome_script

Write your script
   The script can really simple or big and advanced. We'll cover the most basic example
1 #!/usr/bin/env python
2 print "Hello World"

   You can name the script anything, but this name will be the name you'll be typing every
   time, so make sure it's not to difficult. We'll name our script helloworld.

Add a setup script
   The setup.py file is is the centre of building, distributing and installing modules using
   the Distutils.
1 from setuptools import setup
2
3 setup(
4     name='my-awesome-helloworld-script',    # This is the name of your PyPI-package.
5     version='0.1',                          # Update the version number for new releases
6     scripts=['helloworld']                  # The name of your scipt, and also the command you'll
be using for calling it
7 )

   Optional: We can now package the script using python setup.py sdist. This will create a
   dist folder containing all your distributions. After unpacking the distribution file, you
   can simply install it using sudo python setup.py install.

Upload to PyPI
   First, you need to register the package on PyPi. This is simply done by typing python
   setup.py register. If you haven't registered a package from this computer before, you'll be
   prompted with this message:
$ python setup.py register
running register
We need to know who you are, so please choose either:
1. use your existing login,
2. register as a new user,
3. have the server generate a new password for you (and email it to you), or
4. quit
Your selection [default 1]:
...

   Once this is done, register will ask you if you want to save your login information in the
   .pypirc file. By default, this will store the login name and the password. The next step is
   to upload your package. Just type python setup.py sdist upload, and the package is now
   available on PyPI! You can save a few keystrokes by doing it all in one command: python
   setup.py register sdist upload.

Install using pip
   Finally, you can now install you package with pip install my-awesome-helloworld-script. You
   probably want to sudo that line. You can now run the script with:
$ helloworld
Hello world!

What's next?

   All code from this guide can be found [https://gist.github.com/marthall/8122805]here. For more advanced
   programs and packages, I recommend [http://www.scotttorborg.com/python-packaging/]this guide by
   Scott Torborg.
   (already in ptn_python-project-freezing-multif_20180912.txt)


---
https://stackoverflow.com/questions/2933/create-a-directly-executable-cross-platform-gui-app-using-python
Create a directly-executable cross-platform GUI app using Python

   Python works on multiple platforms and can be used for desktop and web applications, thus I
   conclude that there is some way to compile it into an executable for Mac, Windows and
   Linux.

   The problem being I have no idea where to start or how to write a GUI with it, can anybody
   shed some light on this and point me in the right direction please?
***
   First you will need some GUI library with Python bindings and then (if you want) some
   program that will convert your python scripts into standalone executables.

   Cross-platform GUI libraries with Python bindings (Windows, Linux, Mac)

   Of course, there are many, but the most popular that I've seen in wild are:
     * Tkinter - based on Tk GUI toolkit (de-facto standard GUI library for python,
       free for commercial projects)
     * WxPython - based on WxWidgets (popular, free for commercial projects)
     * Qt using the PyQt bindings or Qt for Python. The former is not free for
       commercial projects. The latter is less mature, but can be used for free.

   Complete list is at http://wiki.python.org/moin/GuiProgramming

   Single executable (all platforms)
     * PyInstaller - the most active(Could also be used with PyQt)
     * fbs - if you chose Qt above

   Single executable (Windows)
     * py2exe - used to be the most popular

   Single executable (Linux)
     * Freeze - works the same way like py2exe but targets Linux platform

   Single executable (Mac)
     * py2app - again, works like py2exe but targets Mac OS

***
       Talk about pyinstaller for windows, instead of py2exe.

***
   Another system (not mentioned in the accepted answer yet) is PyInstaller, which worked for
   a PyQt project of mine when py2exe would not. I found it easier to use.

   http://www.pyinstaller.org/

***
   Pyinstaller is based on Gordon McMillan's Python Installer. Which is no longer available.

***
       And more than 3 years after this was answer was written, pyinstaller STILL does not
       support Python 3, nor is it listed in the roadmap of future releases. I mean, is AIX
       and Solaris support really more useful than Python 3?

***
       It supports Python 2.7 and Python 3.3, 3.4 and 3.5 now.

***
       And 3.6 too now.

***
   An alternative tool to py2exe is bbfreeze which generates executables for windows and
   linux. It's newer than py2exe and handles eggs quite well. I've found it magically works
   better without configuration for a wide variety of applications.

***
   There's also PyGTK, which is basically a Python wrapper for the Gnome Toolkit. I've
   found it easier to wrap my mind around than Tkinter, coming from pretty much no knowledge
   of GUI programming previously. It works pretty well and has some good tutorials.
   Unfortunately there isn't an installer for Python 2.6 for Windows yet, and may not be for a
   while.

***
   Since python is installed on nearly every non-Windows OS by default now, the only thing you
   really need to make sure of is that all of the non-standard libraries you use are
   installed.

   Having said that, it is possible to build executables that include the python interpreter,
   and any libraries you use. This is likely to create a large executable, however.

   MacOS X even includes support in the Xcode IDE for creating full standalone GUI apps. These
   can be run by any user running OS X.

***
   For the GUI itself:

   PyQT is pretty much the reference.

   Another way to develop a rapid user interface is to write a web app, have it run locally
   and display the app in the browser.

   Plus, if you go for the Tkinter option suggested by lubos hasko you may want to try
   portablepy to have your app run on Windows environment without Python.

***
   I'm not sure that this is the best way to do it, but when I'm deploying Ruby GUI apps (not
   Python, but has the same "problem" as far as .exe's are concerned) on Windows, I just write
   a short launcher in C# that calls on my main script. It compiles to an executable, and I
   then have an application executable.

***
# I'd use tkinter for python 3

import tkinter

tk = tkinter.Tk()
tk.geometry("400x300+500+300")
l = Label(tk,text="")
l.pack()
e = Entry(tk)
e.pack()

def click():
    e['text'] = 'You clicked the button'

b = Button(tk,text="Click me",command=click)
b.pack()

tk.mainloop()

# After this I would you py2exe
# search for the use of this module on stakoverflow
# otherwise I could edit this to let you know how to do it

py2exe
   Then you should use py2exe, for example, to bring in one folder all the files needed to run
   the app, even if the user has not python on his pc (I am talking of windows... for the
   apple os there is no need of an executable file, I think, as it come with python in it
   without any need of installing it.

Create this file

   1) Create a setup.py
from distutils.core import setup
import py2exe

setup(console=['l4h.py'])

save it in a folder

   2) Put your program in the same folder of setup.py put in this folder the program you want
   to make it distribuitable: es: l4h.py

ps: change the name of the file (from l4h to anything you want, that is an example)

   3) Run cmd from that folder (on the folder, right click + shift and choose start cmd here)
   4) write in cmd:>python setup.py py2exe
   5) in the dist folder there are all the files you need
   6) you can zip it and distribute it

Pyinstaller

Install it from cmd
     pip install pyinstaller

Run it from the cmd from the folder where the file is
     pyinstaller file.py

***
   PySimpleGUI wraps tkinter and works on Python 3 and 2.7. It also runs on Qt, WxPython and
   in a web browser, using the same source code for all platforms.

   You can make custom GUIs that utilize all of the same widgets that you find in tkinter
   (sliders, checkboxes, radio buttons, ...). The code tends to be very compact and readable.
#!/usr/bin/env python
import sys
if sys.version_info[0] >= 3:
    import PySimpleGUI as sg
else:
    import PySimpleGUI27 as sg

layout = [[ sg.Text('My Window') ],
          [ sg.Button('OK')]]

window = sg.Window('My window').Layout(layout)
button, value = window.Read()

   As explained in the PySimpleGUI Documentation, to build the .EXE file you run:
     pyinstaller -wF MyGUIProgram.py

***
   You don't need to compile python for Mac/Windows/Linux. It is an interpreted language, so
   you simply need to have the Python interpreter installed on the system of your choice (it
   is available for all three platforms).

   As for a GUI library that works cross platform, Python's Tk/Tcl widget library works
   very well, and I believe is sufficiently cross platform.

   Tkinter is the python interface to Tk/Tcl

   From the python project webpage:
     Tkinter is not the only GuiProgramming toolkit for Python. It is however the most
     commonly used one, and almost the only one that is portable between Unix, Mac and
     Windows

***
       So how would you make an installation package to deploy on systems of people who just
       want a 1-step install (e.g. double-click on a single installation package in Windows)?

     * For that there are a few approaches I know of: you would likely write an installer in
       batch script or compiled for the target system which would drop the needed files
       someplace and install the needed libraries and runtimes in the process.

       Installing Python as part of your own install would be a little fiddly, because you
       would have to deal with the possibility of the wrong version of Python already being
       installed. You'd have to install side by side, such that your application could access
       the newly-installed version of Python, but any existing applications continued to use
       the old version of Python. (ie without messing up things like the .py file association
       or the PATH)
     * More likely your installer would check for the existence of the right version of
       Python, and if it found it, use that, otherwise install python as a part of the install
       process.
     * Right - but that second option 'otherwise install python as a part of the install
       process', is exactly what I'm talking about. That would be fiddly, for the reasons I
       gave.

***
   You can use appJar for basic GUI development.
from appJar import gui

num=1

def myfcn(btnName):
    global num
    num +=1
    win.setLabel("mylabel", num)

win = gui('Test')

win.addButtons(["Set"],  [myfcn])
win.addLabel("mylabel", "Press the Button")

win.go()

   GUI when running

   See documentation at appJar site.

   Installation is made with pip install appjar from command line.

***
     !!! KIVY !!!

   I was amazed seeing that no one mentioned Kivy!!!

   I have once done a project using Tkinter, although they do advocate that it has improved a
   lot, it still gives me a feel of windows 98, so I switched to Kivy.

   I have been following a [https://www.youtube.com/playlist?list=PLzMcBGfZo4-kSJVMyYeOQ8CXJ3z1k7gHn]tutorial
   series if it helps...

   Just to give an idea of how kivy looks, see this (The project I am working on):

   [https://i.stack.imgur.com/IMl67.png]The Project that I am working on

   And I have been working on it for barely a week now ! The benefits for Kivy you ask? Check
   [https://www.reddit.com/r/kivy/comments/4omhca/what_exactly_are_the_benefits_of_kivy/]this

   The reason why I chose this is, its look and that it can be used in mobile as well.


---
