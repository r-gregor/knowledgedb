filename: python_map-filter-reduce_20171023.txt
http://book.pythontips.com/en/latest/map_filter.html

4. Map, Filter and Reduce

   These are three functions which facilitate a functional approach to programming. We will discuss them
   one by one and understand their use cases.

4.1. Map
   Map applies a function to all the items in an input_list. Here is the blueprint:

   Blueprint
map(function_to_apply, list_of_inputs)

   Most of the times we want to pass all the list elements to a function one-by-one and then collect the
   output. For instance:
items = [1, 2, 3, 4, 5]
squared = []
for i in items:
    squared.append(i**2)

   Map allows us to implement this in a much simpler and nicer way. Here you go:
items = [1, 2, 3, 4, 5]
squared = list(map(lambda x: x**2, items))

   Most of the times we use lambdas with map so I did the same. Instead of a list of inputs we can even
   have a list of functions!
def multiply(x):
    return (x*x)
def add(x):
    return (x+x)

funcs = [multiply, add]
for i in range(5):
    value = list(map(lambda x: x(i), funcs))
    print(value)

# Output:
# [0, 0]
# [1, 2]
# [4, 4]
# [9, 6]
# [16, 8]

4.2. Filter
   As the name suggests, filter creates a list of elements for which a function returns true. Here is a
   short and concise example:
number_list = range(-5, 5)
less_than_zero = list(filter(lambda x: x < 0, number_list))
print(less_than_zero)

# Output: [-5, -4, -3, -2, -1]

   The filter resembles a for loop but it is a builtin function and faster.

   Note: If map & filter do not appear beautiful to you then you can read about list/dict/tuple
   comprehensions.

4.3. Reduce
   Reduce is a really useful function for performing some computation on a list and returning the
   result. It applies a rolling computation to sequential pairs of values in a list. For example, if you
   wanted to compute the product of a list of integers.

   So the normal way you might go about doing this task in python is using a basic for loop:
product = 1
list = [1, 2, 3, 4]
for num in list:
    product = product * num

# product = 24

   Now letâ€™s try it with reduce:
from functools import reduce
product = reduce((lambda x, y: x * y), [1, 2, 3, 4])

# Output: 24


***
15. Comprehensions

Comprehensions are a feature of Python which I would really miss if I ever have to leave it. Comprehensions
are constructs that allow sequences to be built from other sequences. Three types of comprehensions are
supported in both Python 2 and Python 3:

list comprehensions
dictionary comprehensions
set comprehensions
We will discuss them one by one. Once you get the hang of using list comprehensions then you can use any of
them easily.

15.1. list comprehensions
List comprehensions provide a short and concise way to create lists. It consists of square brackets containing
an expression followed by a for clause, then zero or more for or if clauses. The expressions can be anything,
meaning you can put in all kinds of objects in lists. The result would be a new list made after the evaluation
of the expression in context of the if and for clauses.

Blueprint

variable = [out_exp for out_exp in input_list if out_exp == 2]
Here is a short example:

multiples = [i for i in range(30) if i % 3 == 0]
print(multiples)
# Output: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27]
This can be really useful to make lists quickly. It is even preferred by some instead of the filter function.
List comprehensions really shine when you want to supply a list to a method or function to make a new list by
appending to it in each iteration of the for loop. For instance you would usually do something like this:

squared = []
for x in range(10):
    squared.append(x**2)
You can simplify it using list comprehensions. For example:

squared = [x**2 for x in range(10)]
15.2. dict comprehensions
They are used in a similar way. Here is an example which I found recently:

mcase = {'a': 10, 'b': 34, 'A': 7, 'Z': 3}

mcase_frequency = {
    k.lower(): mcase.get(k.lower(), 0) + mcase.get(k.upper(), 0)
    for k in mcase.keys()
}

# mcase_frequency == {'a': 17, 'z': 3, 'b': 34}
In the above example we are combining the values of keys which are same but in different typecase.
I personally do not use dict comprehensions a lot. You can also quickly switch keys and values of a dictionary:

{v: k for k, v in some_dict.items()}
15.3. set comprehensions
They are also similar to list comprehensions. The only difference is that they use braces {}.
Here is an example:

squared = {x**2 for x in [1, 1, 2]}
print(squared)
# Output: {1, 4}