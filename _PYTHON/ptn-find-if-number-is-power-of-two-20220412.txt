filename: ptn_find-if-number-is-power-of-two_20220412.txt
https://www.sanfoundry.com/python-program-find-whether-number-power-two/

Python Program to Find Whether a Number is a Power of Two

   This is a Python program to find whether a number is a power of two.
   Problem Description

   A number is given. The problem is to determine whether the number is a power of two.
   Problem Solution

   1. The function is_power_of_two is defined.
   2. It takes a number n as argument and returns True if the number is a power of two.
   3. If n is not positive, False is returned.
   4. If n is positive, then n & (n - 1) is calculated.
   5. The above expression equals n with its rightmost set bit cleared. That is, the rightmost 1 in the
      binary representation of n is made 0.
   6. All powers of two have only one set bit in their binary representation and all numbers with only
      one set bit is a power of two.
   7. Thus n & (n - 1) will equal zero iff n is a power of two.
   8. This is used to determine if n is a power of two if n is positive.

   Program/Source Code
   Here is the source code of a Python program to find whether a number is a power of two. The program
   output is shown below.

def is_power_of_two(n):
	"""Return True if n is a power of two."""
	if n <= 0:
		return False
	else:
		return n & (n - 1) == 0

n = int(input('Enter a number: '))

if is_power_of_two(n):
	print('{} is a power of two.'.format(n))
else:
	print('{} is not a power of two.'.format(n))

   Program Explanation

   1. The user is prompted to enter a number.
   2. is_power_of_two is called on the number.
   3. If the return value is True, the number is a power of two.

Case 1:
Enter a number: 5
5 is not a power of two.

Case 2:
Enter a number: 0
0 is not a power of two.

Case 3:
Enter a number: 8
8 is a power of two.


---
https://www.geeksforgeeks.org/python-program-to-find-whether-a-no-is-power-of-two/

Python Program to find whether a no is power of two
06 Jan, 2022

   Given a positive integer, write a function to find if it is a power of two or not.
   Examples :

Input : n = 4
Output : Yes
2^2 = 4

Input : n = 7
Output : No

Input : n = 32
Output : Yes
2^5 = 32

   1. A simple method for this is to simply take the log of the number on base 2 and if you get an
   integer then number is power of 2.

<code>
# Python3 Program to find
# whether a no is
# power of two
import math

# Function to check
# Log base 2
def Log2(x):
	return (math.log10(x) / math.log10(2));

# Function to check
# if x is power of 2
def isPowerOfTwo(n):
	return (math.ceil(Log2(n)) == math.floor(Log2(n)));

# Driver Code
if(isPowerOfTwo(31)):
	print("Yes");
else:
	print("No");

if(isPowerOfTwo(64)):
	print("Yes");
else:
	print("No");
</code>

   Output:
No
Yes

   Time Complexity: O(log[2]n)
   Auxiliary Space: O(1)

   2. Another solution is to keep dividing the number by two, i.e, do n = n/2 iteratively. In any
   iteration, if n % 2 becomes non-zero and n is not 1 then n is not a power of 2. If n becomes 1 then it
   is a power of 2.

<code>
# Python program to check if given
# number is power of 2 or not

# Function to check if x is power of 2
def isPowerOfTwo(n):
	if (n == 0):
		return False
	while (n != 1):
			if (n % 2 != 0):
				return False
			n = n // 2
	return True

# Driver code
if(isPowerOfTwo(31)):
	print('Yes')
else:
	print('No')
if(isPowerOfTwo(64)):
	print('Yes')
else:
	print('No')
</code>

   Output:
No
Yes

   3. All power of two numbers have only one bit set. So count the no. of set bits and if you get 1 then
   number is a power of 2. Please see [https://www.geeksforgeeks.org/count-set-bits-in-an-integer/]Count set
   bits in an integer for counting set bits.
   4. If we subtract a power of 2 numbers by 1 then all unset bits after the only set bit become set;
   and the set bit become unset.
   For example for 4 ( 100) and 16(10000), we get following after subtracting 1
   3 -> 011
   15 -> 01111
   So, if a number n is a power of 2 then bitwise & of n and n-1 will be zero. We can say n is a power
   of 2 or not based on value of n&(n-1). The expression n&(n-1) will not work when n is 0. To handle
   this case also, our expression will become n& (!n&(n-1)) (thanks to
   [https://www.geeksforgeeks.org/program-to-find-whether-a-no-is-power-of-two/Mohammad] for adding
   this case).
   Below is the implementation of this method.

<code>
# Python program to check if given
# number is power of 2 or not

# Function to check if x is power of 2
def isPowerOfTwo (x):

	# First x in the below expression
	# is for the case when x is 0
	return (x and (not(x & (x - 1))) )

# Driver code
if(isPowerOfTwo(31)):
	print('Yes')
else:
	print('No')

if(isPowerOfTwo(64)):
	print('Yes')
else:
	print('No')
</code>

   Output:
No
Yes

   Please refer complete article on
   [https://www.geeksforgeeks.org/program-to-find-whether-a-no-is-power-of-two/]Program to find whether a no
   is power of two for more details!


---

