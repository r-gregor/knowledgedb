filename: python_inheritance-versus-composition-multif_20171102.txt
https://stackoverflow.com/questions/20847727/python-inheritance-versus-composition
Python: Inheritance versus Composition

   I am working with two classes in Python, one of which should be allowed to have any number objects
   from another class as children while keeping an inventory of these children as an attribute.
   Inheritance seemed like the obvious choice for this parent<>child situation but instead what I have
   arrived at is an example of composition. Here is the simplified code:
class Parent():

    def __init__(self,firstname,lastname):
        self.firstname = firstname
        self.lastname = lastname
        self.kids = []

    def havechild(self,firstname):
        print self.firstname,"is having a child"
        self.kids.append(Child(self,firstname))

class Child(Parent):

    def __init__(self,parent,firstname):
        self.parent = parent
        self.firstname = firstname
        self.lastname = parent.lastname

***
   No, you did it the right way. It would be bad to introduce a coupling between objects via inheritance
   just to share methods between them unless you wanted them to have an "is a" and even then, you might
   want to go the "mixin" route instead.

***
   Inheritance is for "is-a" relationships. Is a child a parent? Not necessarily. Composition is for
   "has-a" relationships. A child has a parent (and a parent has a child). You would use inheritance if
   you had a person class, then a child is a person, so child would inherit from person.

***
   If you needed the two classes to share some common methods then you could always subclass both from a
   Person class.

***
   "Parent" or "Child" are accidental properties that "People" happen to sometimes have or not. So in
   case of this nomenclature you should have only one class - Person with its kids array empty or not.

***
   You might want inheritence if you want your children to be able to havechild(...). – [37]Robert

***
   It is definitely not good to inherint Child from Parent or Parent from Child.

   The correct way to do it is to make a base class, let's say Person and inherit both Child and Parent
   from it. An advantage of doing this is to remove code repetition, at the moment you have only
   firstname / lastname fields copied into both objects, but you may have more data or additional
   methods, like get_name() to work with this data.

   Here is an example:
class Person(object):

    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname

    def get_name(self):
        return '%s %s' % (self.firstname, self.lastname)


class Parent(Person):

    def __init__(self, firstname, lastname):
        super(Parent, self).__init__(firstname, lastname)
        self.kids = []

    def havechild(self, firstname):
        print self.firstname, "is having a child"
        self.kids.append(Child(self, firstname))


class Child(Person):

    def __init__(self, parent, firstname):
        super(Parent, self).__init__(firstname, parent.lastname)
        self.parent = parent

   Another way of doing this is to do it without inheritance, but only have one Person object (vs Parent
   and Child). The feature of tracking family status and parents / children can be moved into another
   object.

   An advantage of this approach is that you follow the [42]single responsibility principle and keep
   objects simple, each object does only one thing.

   Here is an example:
from collections import defaultdict

class Person(object):

    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname

    def get_name(self):
        return '%s %s' % (self.firstname, self.lastname)


class FamilyRegistry(object):

    def __init__(self):
        self.kids = defaultdict(list)

    def register_birth(self, parent, child_name):
        print parent.firstname, "is having a child"
        child = Person(child_name, parent.lastname)
        self.kids[parent.lastname].append(child)
        return child

    def print_children(self, person):
        children = self.kids[person.lastname]
        if len(children) == 0:
            print '%s has no children' % person.get_name()
            return
        for child in children:
            print child.get_name()

   It works like this:
joe = Person('Joe', 'Black')
jill = Person('Jill', 'White')
registry = FamilyRegistry()
registry.register_birth(joe, 'Joe Junior') # Joe is having a child
registry.register_birth(joe, 'Tina')       # Joe is having a child
registry.print_children(joe)               # Joe Junior Black
                                           # Tina Black
registry.print_children(jill)              # Jill White has no children


***
   First off, I think you are confusing things. As you yourself mention inheritance is used in a class
   that wants to inherit the nature of the parent class and then modify that behavior and extend it.

   In your example Child inherits two things from Parent. The constructor __init__ and havechild. You
   are overriding the constructor and the havechild method shouldn't work, since there is no kids member
   list to append the new child to. Also it appears that you are not intending to have the children have
   children.

   That being said it seems you may actually want to ask a different question, such as Composition vs
   Aggregation. There is such a design choice as Inheritance vs Composition which actually may be
   particularly interesting for Python, but it mainly asks whether you want to reuse code by copying the
   behavior of a standalone parent class (inheritance) or you want to separate different class behavior
   granules (for lack of better word) and then create classes which are compositions of these granules.


---
https://codefellows.github.io/sea-python-401d4/lectures/inheritance_v_composition.html

Python Classes: Inheritance v. Composition
In this lesson we will talk about how to build classes based on existing classes. There are two approaches to
doing this, inheritance and composition. Each has its strengths and weaknesses. We’ll look at each here.

Inheritance
In object-oriented programming (OOP), inheritance is a way to reuse code of existing objects. It’s good when
you want to establish a subtype from an existing object. Objects are defined by classes, classes can inherit
attributes and behavior from pre-existing classes. The resulting classes are known as derived classes or
subclasses.

A subclass “inherits” all the attributes (methods, etc) of the parent class. We can create new attributes or
methods to add to the behavior of the parent We can change (“override”) some or all of the attributes or
methods to change the behavior. We can also extend the behavior of the parent by using the original methods
and adding a bit more.

We indicate that a new class should inherit from an existing class by placing the name of the existing class
in the list of base classes. The class(es) named in the list of base classes must be in the current namespace
when the class statement is evaluated. For compatibility across Python 2 and 3, any new classes we create wil
always inherit from at least object. This basic class sits at the top of the Python data model,
and is in the __builtin__ namespace.

This is a pseudocode model for the simplest subclass in Python:

class Subclass(Superclass):
    pass
Subclass now has exactly the same behavior as Superclass

When we put object in the base class list, it means we are inheriting from object – getting the core
functionality of all objects.
Overriding attributes
One of the core purposes of a subclass is to change the behavior of the parent class in some useful way. We
call this overriding the inherited behavior. Overriding attributes of a parent class in Python is as simple as
creating a new attribute with the same name:

class Circle(object):
    color = "red"

class NewCircle(Circle):
    color = "blue"

nc = NewCircle
print(nc.color)
blue
Any instances of the new class will have the blue color. Instances of the original class will have
the red color.

Overriding methods
Overriding methods works in exactly the same way (remember, a method is an attribute in python).

class Circle(object):
...
    def grow(self, factor=2):
        """grows the circle's diameter by factor"""
        self.diameter = self.diameter * factor
...

class NewCircle(Circle):
...
    def grow(self, factor=2):
        """grows the area by factor..."""
        self.diameter = self.diameter * math.sqrt(2)
Instances of the new circle class will have the new behavior for the grow method. Instances of the existing
class will continue to have the old behavior.

When overriding behavior for a subclass, remember that in good OO programming a subclass should be
substantially similar to its parents. If you have a system which uses the parent class, you should be able to
use the subclass in all the same places, and in all the same ways. This is known as the “Liskov Substitution
Principle”. The authors of Think Python put it this way:

whenever you override a method, the interface of the new method should be
the same as the old.  It should take the same parameters, return the same
type, and obey the same preconditions and postconditions.

If you obey this rule, you will find that any function designed to work
with an instance of a superclass, like a Deck, will also work with
instances of subclasses like a Hand or PokerHand.  If you violate this
rule, your code will collapse like (sorry) a house of cards.

-- [ThinkPython 18.10]
Extending Methods
Wanting or needing to override __init__ is very common. After all, we are trying to modify how the parent
class works. However, we often also want to do some or all of the things that the parent class does
with __init__. We really want to extend the functionality of the parent class __init__. Think “do everything
my parent does, plus this other stuff”.

class Circle(object):
    color = "red"
    def __init__(self, diameter):
        self.diameter = diameter
...
class CircleR(Circle):
    def __init__(self, radius):
        diameter = radius*2
        Circle.__init__(self, diameter)
You can do the same thing with the any methods of the parent class. There isn’t anything special
about the __init__ method (except that it is called automatically).

class Circle(object):
...
    def get_area(self, diameter):
        return math.pi * (diameter/2.0)**2


class CircleR2(Circle):
...
    def get_area(self):
        return Circle.get_area(self, self.radius*2)
Attribute resolution order
We have discussed how Python looks up attributes of a class instance. It starts in the namespace of the
instance, and then looks in the namespace of the class. What happens when your class is a subclass? If the
name is not found in the namespace of our instance, or in the class, then the search continues in the parent
class, and so on.

Is it an instance attribute?
Is it a class attribute?
Is it a superclass attribute?
Is it a super-superclass attribute?
...
The process of looking up attributes of a class in an inheritance hierarchy seems relatively straightforward.
But Python also supports multiple inheritance (two or more names in the base class list). What happens then?

In Python 2.3 a new algorithm was added to Python to clarify this question. The clearest documentation of it
can be found in the release notes for 2.3 and in a blog post on the History of Python blog.

For our purposes, it is enough to say that if you have any questions, you can use the Class.mro() method of
any new-style class to get the ordered list of its parent classes:

In [37]: class A(object): x = 'A'
   ....:
In [38]: class B(object): x = 'B'
   ....:
In [39]: class C(A): pass
   ....:
In [40]: class D(C, B): pass
   ....:
In [41]: D.mro()
Out[41]: [__main__.D, __main__.C, __main__.A, __main__.B, object]
In [42]: D.x
Out[42]: 'A'
In [43]: class E(B, C): pass
   ....:
In [44]: E.mro()
Out[44]: [__main__.E, __main__.B, __main__.C, __main__.A, object]
In [45]: E.x
Out[45]: 'B'
The acronym MRO stands for Method Resolution Order. Clearly, though, it applies to all attributes of a class,
not just to methods.

One final note, regarding the use of object in the base class list for a class. In Python 2, this is the way
that we distinguish new-style classes from old-style classes. Old-style classes had a different way of dealing
with attribute resolution. It faired poorly when used with multiple inheritance. New-style classes did better
with this, especially after Python 2.3 But old-style classes were still around.

In Python 3, there is no such thing as old-style classes. All classes inherit from object whether specified or
not. We provide the object base class to maintain compatibility between Python 2 and Python 3.

When to Subclass
Remember that we have stated previously that inheritance should be used primarily to promote code re-use. It’s
really meant to be used when the thing you want to build is a variation on the parent class.

If you want to be able to use your new class in all the places and in all the ways that you can use the parent,
then it should inherit from the parent. But this is not the only possible choice.

Composition
Let’s imagine that we have a class that needs to accumulate an arbitrary number of objects. A list can do that,
so we should subclass list, right?

The thing is, that in addition to being able to accumulate objects, lists support a number of other operations.
We can iterate over the objects they contain. We can sort and reverse them.

Does our new class need to do all those things? If the answer is no, then our new class might be better served
by containing a list, rather than inheriting from it.

Composition is another Object Oriented programming approach. We use it when we want to use some aspect of
another class without promising all of the features of that other class.

Think about our example. Maybe accumulating objects is all we want this new class to do. No other
functionality from a list is required. We can build our class to contain a list:

In [46]: class Accumulator(object):
   ....:     def __init__(self):
   ....:         self._container = []
   ....:     def accumulate(self, obj):
   ....:         self._container.append(obj)
   ....:     def stuff(self):
   ....:         return self._container[:]
   ....:
Now, we can build an instance of our Accumulator class and start accumulating stuff:

In [47]: junk_drawer = Accumulator()
In [48]: junk_drawer.accumulate('spatula')
In [49]: junk_drawer.accumulate('cork screw')
In [50]: junk_drawer.accumulate('old rubber band')
And every so often, we can even ask to see what’s in the junk drawer (though like any good junk drawer you
can’t actually take anything out):

In [51]: junk_drawer.stuff()
Out[51]: ['spatula', 'cork screw', 'old rubber band']

In [52]: junk_drawer.stuff().pop()
Out[52]: 'old rubber band'

In [53]: junk_drawer.stuff()
Out[53]: ['spatula', 'cork screw', 'old rubber band']
Type-Based Dispatch
One final word for this lesson about classes. We’ll occasionally see code that looks like this:

if isinstance(other, SomeClass):
    Do_something_with_other
else:
    Do_something_else
In general, it’s usually better to use “duck typing” (polymorphism). After all, if other has the right methods
or attributes, then why would we care if it is an instance of SomeClass? But when it’s called for, you can use
isinstance, or its cousin issubclass:

In [54]: isinstance(junk_drawer, Accumulator)
Out[54]: True

In [55]: isinstance(junk_drawer, object)
Out[55]: True

In [56]: issubclass(Accumulator, object)
Out[56]: True

In [57]: issubclass(object, Accumulator)
Out[57]: False
Wrap Up
In this lecture we learned about subclassing and composition, two approaches to OO programming. We learned how
to make a subclass in Python. We learned about the method resolution order and how attributes are looked up
when inheritance is in play. We also learned about the difference between old- and new-style classes and how
to maintain compatibility in Python 3. Finally, we learned how to use composition to gain access to some of
the powers of another class without needing to inherit it all.

As you work on your Data Structures assignments, consider how these new tools can help you.


---
https://www.eschipul.com/2012/05/in-python-does-favor-composition-over-inheritance-really-apply-at-all/

In Python, does “favor composition over inheritance” – really apply at all?

   Googling best practices for classes in Python for a Django
   project I kept coming across the phrase “favor composition over
   inheritance” and the Strategy Design Pattern. First let me quote
   wikipedia on composition over inheritance:

     Composition over inheritance in object-oriented
     programming is a technique by which classes may achieve polymorphic
     behavior and code reuse by containing other classes which
     implement the desired functionality instead of
     through inheritance.

   The Strategy Design Pattern is idea is to decouple as much as
   possible to maximize code use. It looks kinda like this code from
   S-Lott on Stack Overflow on Strategy:
class AUsefulThing( object ):
    def __init__( self, aStrategicAlternative ):
        self.howToDoX = aStrategicAlternative
    def doX( self, someArg ):
        self.howToDoX.theAPImethod( someArg, self )

class StrategicAlternative( object ):
    pass

class AlternativeOne( StrategicAlternative ):
    def theAPIMethod( self, someArg, theUsefulThing ):
        pass # an implementation

class AlternativeTwo( StrategicAlternative ):
    def theAPImethod( self, someArg, theUsefulThing ):
        pass # another implementation

   Now you can do things like this.
t = AUsefulThing( AlternativeOne() )
t.doX( arg )

   S-Lott then provides another Python example pattern that replicates the
   above with a bit less code.

   This had me scratching my head. Not at the example and the helpful
   response, but at the question itself. Why are we creating functions,
   then assigning a variable to a class and passing the function in as a
   parameter? Barooo?

   Then on the same stack overflow post there was a follow up response
   from Christian Groleau as follows:

   This pattern is practically non-existent in languages that support
   first class functions. You may want to consider taking advantage of
   this feature in Python:
def strategy_add(a, b):
    return a + b

def strategy_minus(a, b):
    return a - b

solver = strategy_add
print solver(1, 2)
solver = strategy_minus
print solver(2, 1)

   “This approach is very clean and simple.”

   I agree with him. I have made the mistake, granted it was out of
   desperation, of putting a literal in a public property in a class
   called “objecttype”. This let me pass the object to a function and make
   decisions on what to do next. Pseudo vbscript-ish code example:
function generate_invoice(object, d)
    select case(object.objecttype)
        case "jobs"
        #do job invoice stuff
    case "resumes"
        #do resume stuff here
    case else

   Ok, so it’s not quite as bad as concatenating a string of vbscript and
   calling the exec(str) method. But it ain’t pretty either. But both got
   the job done. And in the case of my fake function above, that sure
   looks like the composition pattern to me. Maybe not exactly, but it’s
   close. Functions taking classes as parameters and then calling methods
   within the class in the name of portability. And to reduce code in the
   classes themselves of course.

   I like Christian’s example above a LOT better. Which makes sense
   because Python has, as noted by bitwise, both First Class Functions
   and allows for Meta-programming. “Python is not java without the
   compile” indeed. First Class Functions and Meta Programming used in
   combination obviate the need for the Strategy design pattern in Python
   IMHO (see caveats below). And for further support I found this:

   From pycon 2009 – Joe Gregorio – The (lack of) design patterns in
   Python

   "Yes, design patterns are good, but they're also a sign of weakness
   in a language."

   The patterns are built in [to Python]. No one talks about the
   structured programming pattern, or the object-oriented
   pattern, or the function pattern anymore.


   Conclusions:
    1. look to features before patterns
    2. reduce patterns -> shorter code
    3. needed patterns -> language feature

   I’m still a Python newb, but definitely not a programming newb. And
   So far it looks like you can inherit meta classes with properties to
   your hearts content to DRY. Yet still, make a thoughtful decision
   when it comes to how you should implement methods/functions in base
   classes. Sometimes perhaps a function is better than inheriting a
   method. Just stop and think. Odds are our fear of inheritance is a
   learned behavior from being burned by java or another similar
   lower-level language. I think I need to get over that.

   And be thankful that most design patterns are already built into
   Python. Less code is better.

   In closing, and I forget the post I read it on, but just because
   programming can do ORM (object relational mapping) does NOT mean that a
   database can. In fact it can’t. And a database deals with the
   multi-stand-alone class issue by creating a bunch of tables in Django.
   And one programming matra that I am 100% sure is true is “JOINS are
   EXPENSIVE.”

   Django responds to inherited meta classes by keeping all of the fields
   in one table, not 20. And perhaps this is me just trying to get over my
   fear of multi-inheritance and break years of practice. To take
   advantage of Python being “First Class Everything”. To write code that
   is Better, faster, stronger than before.

   
---