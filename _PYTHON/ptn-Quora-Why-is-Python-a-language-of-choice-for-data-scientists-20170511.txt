filename: Quora_Why-is-Python-a-language-of-choice-for-data-scientists_20170511.txt
https://www.quora.com/Why-is-Python-a-language-of-choice-for-data-scientists

   Why is Python a language of choice for data scientists?

   It seems that most coders working with data typically are good with Python. Why is this ?


***
Jeff Hammerbacher, Professor at Hammer Lab, founder at Cloudera, investor at Techammer
Answered Aug 29, 2012

   Python is an interpreted, dynamically-typed language with a precise and efficient syntax. Python has
   a good REPL and new modules can be explored from the REPL with dir() and docstrings. That's one
   reason to prefer Python over C, C++, or Java.
   The Python community invested in the mid-1990s in Numeric, an "extension to Python to support numeric
   analysis as naturally as [M]atlab does" [1]. Numeric later evolved into NumPy [2]. Several years
   later, the plotting functionality from Matlab was ported to Python with matplotlib [3]. Libraries for
   scientific computing were built around NumPy and matplotlib and bundled into the SciPy package [4],
   which was commercially supported by Enthought [5]. Python's support for Matlab-like array
   manipulation and plotting is a major reason to prefer it over Perl and Ruby.
   Today, the most popular alternatives to Python for data scientists are R, Matlab/Octave, and
   Mathematica/Sage. In addition to the work mentioned above to port features from Matlab into Python,
   recent work has ported several popular features from R and Mathematica into Python.
   From R, the data frame and associated manipulations (from the plyr and reshape packages) have been
   implemented by the pandas library [6]. The scikit-learn project [7] presents a common interface to
   many machine learning algorithms, similar to the caret package in R.
   From Mathematica/Sage, the concept of a "notebook" has been implemented with IPython notebooks [8].
   From my personal perspective, Python is still lacking in a few important areas.
    1. The first is the more cumbersome syntax for array manipulations and formula specification in
       Python. The Matlab/Octave syntax for array manipulation is still preferred (that's why it's used
       in the Stanford ML class, for example), and the R syntax for formula specification is quite nice.
    2. The second is a Python equivalent to ggplot2 for static graphics and D3 for interactive graphics.
       The matplotlib library is hard to install, hard to use, and does not facilitate building
       interactive graphics for the web.
    3. The third is the scalability of NumPy and pandas when working with large data sets. The company
       Continuum [9] is working to address this problem, but they're a long way from producing something
       coherent and usable.
    4. The fourth is the lack of an embedded, declarative language for data manipulation, similar to the
       LINQ project. Pandas is useful as a low-level data manipulation toolkit, but tracking down the
       custom Pandas syntax for complex operations can be frustrating.
    5. The fifth is an IDE for data scientists of similar quality to R Studio.

   [1] [17]http://hugunin.net/story_of_jyth...
   [2] [18]http://numpy.scipy.org/
   [3] [19]http://matplotlib.sourceforge.net/
   [4] [20]http://www.scipy.org/
   [5] [21]http://www.enthought.com/
   [6] [22]http://pandas.pydata.org
   [7] [23]http://scikit-learn.org
   [8] [24]http://blog.fperez.org/2012/01/i...
   [9] [25]http://continuum.io/

***
Wes McKinney, Data tool maker

   I will echo many of [39]Jeff Hammerbacher's sentiments regarding the Python ecosystem. Python's
   popularity for data science is largely due to the strength of its core libraries (NumPy, SciPy,
   pandas, matplotlib, IPython), high productivity for prototyping and building small and reusable
   systems, and its strength as a general purpose programming language. Since data scientists are also
   often involved with wiring together network applications, programming for the web, scripting and
   automating data processing jobs and other processes, and lots of ad hoc data munging (the kind of
   stuff people loved using Perl for in the 90s), it's very desirable to be able to do all these things,
   in addition to the actual analysis and modeling, in a single language. Python also excels as a glue
   language for applications written in C, C++, and Fortran, especially using the excellent Cython [5]
   project. Typically only a small part of an application you build will be slow (call it a 90/10 or
   95/5 rule); by using Python you can build a program very quickly, profile and identify bottlenecks,
   then optimize by using better array programming techniques or, if necessary, reimplementing the
   bottlenecks in Cython or C/Fortran.
   I was initially drawn to Python for data analysis applications from the quant finance side: I liked
   R's data analysis and data manipulation features but found it to be a wonky, idiosyncratic language
   and poorly adapted for general purpose system development, many kinds of data munging, and in many
   cases working with large data sets (many core data algorithms in R, such as merge/join operations,
   are poorly implemented). I started on the pandas project [1] in April 2008 and embarked on much more
   serious development to turn it into the premier "small data" tool for Python around May 2011 and
   continuing into the present. I also decided it was high time there was a book geared toward data
   analysis in Python and found the time to write one [2].
   As Jeff said, Python has some shortcomings to address. The "scalability problem" for large data sets
   is perhaps the most serious one, and solving it in a future-proof way will be very difficult and
   capital-intensive. With the patsy project [3] integrated with statsmodels [4], statistical models can
   be specified and fit in a manner that will be more comfortable and convenient, especially for
   experienced R users. statsmodels is still a small project in terms of developers and is desperately
   in need of more help if Python is to become a viable alternative to R for statistics and
   econometrics.
   Criticisms of the current state of the Python stack aside, there has been extraordinary progress in
   the data tooling and supporting tools (like the IPython project) over the last 2 years. I suspect
   that this trend will continue for some time to come, especially with the appearance of commercial
   forces committed to driving forward the open source stack.
   [1] [40]http://pandas.pydata.org
   [2] [41]http://shop.oreilly.com/product/...
   [3] [42]http://pypi.python.org/pypi/patsy/
   [4] [43]http://statsmodels.sourceforge.net
   [5] [44]http://cython.org/

***
Nir Kaldero, Director of Science, Head of Data Science Experts (gX)

   Python is really a great tool, and there are several reasons why Data Scientists like python. Data
   scientists need to use data visualizations to clearly communicate outputs and predictions to
   stakeholders at any level of a business. This is the real value a great data scientist can provide –
   without this, it’s a zero-sum game.
   Therefore, we choose Python not only because of its computational intensity - we also choose Python
   because it’s a common programing language that can be found across different teams in the
   organization. Hence, Python has become a programing language that links between different units
   across the business and a direct channel for data sharing and processing language.

   Why Do Data Scientists Love Coding in Python?
     * Large community = Documentation =  Brainpower -  with Python, you can find a large (and still
       growing!) active community.  At the end of the day, if you get lost you can rely on a this large
       community of experts to help you find a proper solution for coding problems (even niche ones) and
       answers to questions related to Data Science and Data Analysis.

     The internet connects us - but community is what keeps us together.

     * Growing Data Analytics Libraries - With Python, you can find a large variety of Data
       Analytics/Data Science Libraries (as others have mentioned here: NumPy, SciPy, StatsModels,
       Scikit-Learn, Pandas, etc.) - which are exponentially growing over time. Constraints (in
       optimization methods/functions) that were missing a year ago are no longer an issue, and you can
       find a proper robust solution that works reliably.
     * IPython-Notebook -  This is just a GREAT tool. You can run multiple lines/blocks of code in
       different cells, you can play with them, move them up or down, and you can even get your results
       appear just underneath the cell. It really is like the magical organizer that Data Scientists
       (and people who run code and want to iterate) have always dreamed of.  You can also write R, SQL,
       Scala, and other languages in IPython-Notebook which makes the work-flow much easier and
       efficient.
     * Python is easy to learn - Python's main advantage is that anyone can learn it quickly and easily.
       The language was designed to be simple and "sugar-lite".
     * Scalability - Relative to other language/Packages for Data Science (as MatLab, Stata, R) Python
       is much faster. It’s true that Java and Scala are much faster than Python (x3), but with Anaconda
       ([51]Continuum Analytics) Python has caught up to speed!
       As a Data Scientist, I prefer to run my code and get my output in Python relative to the
       traditional languages that are computationally slower. As always, there are trade-offs.
     * Visualization / Graphics - Python is not as good as R (yet), but we’ll see more and more cool
       APIs (e.g., [52]Plotly) and Data Visualization libraries that make the partial advantage of R
       insignificant compared to Python. You can do really cool stuff with Python.

     * Govern by a “Dictator” - Python was originally created by Guido Van Rossum in the 1990s, who
       currently holds the title of Benevolent Dictator For Life (BDFL). The presence of a BDFL means
       that Python has a unified design philosophy. This design philosophy emphasizes readability and
       ease of use, and is codified in PEP8 (the Python style guide) and PEP20 (the Zen of Python).

   The Industry Role in When Choosing a Programing Language:
   It’s true that Data Scientists prefer (or are more likely to use) Python. But at the end of the day,
   the industry plays a much bigger role in Python’s popularity than it’s computational abilities. As I
   like to describe it, Data Scientists are price takers, and the Industry is the price setter.
     * (1- Data Science Team) =  Other Teams: It's true that Python is very common across most of the
       Data Science teams in different companies. But we never work alone. You’re likely to find someone
       who is familiar with Python across marketing, operations, sales, and other parts of a business.
       Since we need to deliver outcomes (predictions, etc.) to other stakeholders - we prefer to use a
       language that is more likely to be found among these teams. Python is a great way to share
       projects with other teams.
     * Standardization - Needless to say, it’s helpful to have a unified language that can be used
       across an entire organization. Making sure everyone works on the same platform increases
       efficiency drastically.
     * Simply a Trend - Technology is constantly evolving. The Python is just another industry trend
       that might stick around for a while. Or it might be completely replaced by something else in the
       future. Currently, Python plays a major role, so that’s why data scientists use it extensively.

   To sum up, Python has very strong computational capabilities for the Data Science workflow, and it’s
   much faster and easier to start using relative to other packages available. The likelihood of finding
   someone on another team in your organization who knows Python gives it it’s biggest advantage.
   Remember, a good Data Scientist can run code and get an output.  A Great Data Scientist is able to
   artistically communicate his results and collaborate with every single part of a business (across
   Marketing, Ops, C-level, and Board Members).
   I’m part of the faculty here at GalvanizeU, and one of our biggest goals is to make sure students
   know how to work across all parts of a business effectively. Students can Learn through immersive
   programs as well as an Accredited Master Degree in Data Science, Grow and level-up their skills
   through workshops, and Connect through our amazing community that we’ve built. I’m happy to answer
   any other questions people have about Python, data science, and education. :)
   Best,
   Nir Kaldero

***
Yassine Alouini, I have written data science pipelines using Python libraries

   For the following reasons:
     * Easy to use. The syntax is user friendly, consistent and elegant. What else?
     * Multi-paradigm. You can write object-oriented and functional code.
     * A plethora of packages. Numpy, pandas, scikit-learn, flask... You name it and chances are you
       will find a package for it.
     * Interactiveness. Thanks to iPython and Jupyter notebooks. Yeah!
     * A strong community.
     * Scripting powers. Dealing with thousands of files, scrapping websites, requesting different
       APIs...


***
Yilun (Tom) Zhang, Active Python User

   I will add more information about programming languages and tools including MATLAB.

   To start with, "Hello world" in:

   Python (v2.x):
print "Hello, world!"

   R:
cat("Hello, world!")

   Julia:
println("Hello, World!")

   Lua/Torch:
print("Hello World")

   Java:
public class HelloWorld {
    public static void main(String[] args) {
                System.out.println("Hello, world!");
        }
}

   C++:
#include <iostream>
int main(){
        std::cout << "Hello, world!\n";
}

   C:
#include <stdio.h>
int main(void){
        printf("Hello, world!\n");
}

   JS:
//myfile.js
console.log("Hello, World!");

***command line***
node myfile.js

   MySQL:
DELIMITER $$CREATE FUNCTION hello_world()
RETURNS TEXT COMMENT 'Hello World'
BEGIN
RETURN 'Hello World';
END;
$$
DELIMITER ;
        SELECT hello_world();

        
   UPDATE:
   I was trying to be humorous, but it seems like it didn't really work out, so I will update with more
   opinions from me.

   The above example shows that in general, Python and R can accomplish similar tasks with much less
   code than others, which is one of the reason I think many data scientists use them.

   Other aspects are:

   Powerful statistical and numerical packages
     * NumPy and pandas ([69]Python Data Analysis Library) allow you to read/manipulate data efficiently
       and easily.
     * Matplotlib allows you to create useful and powerful data visualizations. I have also listed more
       data visualization packages in Python: [70]Yilun (Tom) Zhang's answer to What's some good python
       data visualization website?
     * Scikit-learn allows you to train and apply machine learning algorithms to your data and make
       predictions. Also PyBrain ([71]PyBrain) and Tensorflow ([72]https://www.tensorflow.org/versi...)
       for some neural network and
     * Cython allows you to convert your code and run them in C environment to largely reduce the
       runtime and improve your model performance.
     * PyMySQL allows you to easily connect to MySQL database, execute queries and extract data.
     * BeautifulSoup to easily read in XML and HTML type data which is quite common nowadays.
     * iPython notebook for interactive programming as in R.
     ________________________________________________________________________________________________

   Python vs. R
   I personally use both R and Python and here are some of my thoughts about these two languages:
     * In terms of simplicity, I think they are similar. The codes are short and easy to read.
     * Depends on the project, if the data is gathered and cleaned in the form that is ready to
       analysis, R is easier. If some data cleaning process is required, I will go for Python.
     * R has more third-party packages that are really useful in data manipulation. You can do a lot of
       things in just one line. Example packages are dplyr, reshape(2), etc. [73]Introduction to dplyr.
     * R also has powerful plotting packages (ggplot2) and it is sometimes even used by Python
       programmers ([74]ggplot | Home)
     * R has packages like knitr, shiny to visualize the whole project (make a report, presentation or
       even an online web application). [75]Shiny and [76]knitr: Elegant, flexible and fast dynamic
       report generation with R. Python has Django: [77]The Web framework for perfectionists with
       deadlines and Flask: [78]Flask (A Python Microframework) for creating web applications. In my
       opinion, Python is doing a better job and R here, and it is much easier to integrate with other
       applications like Hadoop-HDFS, Spark (spark now supports R in version 1.4), Apache Kafka
       ([79]Apache Kafka), etc. to create better data pipelines.
     * R has powerful machine learning algorithm packages (too many to list), lots of them are built for
       specific type of problems, so it is very easy to find the right one for your project.
     * Python is faster than R in executing scripts (even much faster with the use of Cython), though
       Julia is the best among the three.
     ________________________________________________________________________________________________

   Python vs. Julia
   Julia ([80]The Julia Language) is another new programming language getting more and more popular
   among data people. It is a lot similar to Python, but it is still in its early stage.
     * In the link above, there is a table showing the runtime of various functions (i.e. fib,
       parse_int, quicksort, etc.) in difference programming languages with C as a benchmark. Comparing
       the runtime in Julia vs. in Python and R, we can see that Julia is a lot faster than both Python
       and R.
     * It doen't have enough scientific packages as Python or R for high performance statistical
       analysis, but you can still use those packages from Julia (and many have already been wrapped).
     ________________________________________________________________________________________________

   Lua/Torch:
   Torch is a open source machine learning library and a script language based on the Lua programing
   language. It provides mainly deep learning algorithms (neural network). It uses an extremely fast
   scripting language LuaJIT and an underlying C implementation to improve runtime. I personally haven't
   used this programming language (my friend has), and it would be a good idea to google for more
   information.
     ________________________________________________________________________________________________

   Java:
   I'm actually not a Java user so I cannot comment too much about it. Here is some popular libraries:
   [81]Java Machine Learning - Machine Learning Mastery. In my opinion, the biggest reason for people to
   use Java is the speed and scalability with big data.
     ________________________________________________________________________________________________

   Hmm, it seems like R is also a great choice, aha, so I will go for Python and R for data scientists!
   Update: Julia is also a trend!

   The question being asked was "Why is Python a language of choice for data scientists?", so, fair
   enough. :)
