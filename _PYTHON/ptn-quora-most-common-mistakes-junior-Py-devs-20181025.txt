filename: ptn_quora_most-common-mistakes-junior-Py-devs_20181025.txt
https://www.quora.com/What-are-the-most-common-mistakes-junior-Python-developers-make

What are the most common mistakes junior Python developers make?

   P != NP

   You know this, don’t you? Right… Everyone nows that. Its Pythonic vs. NonPythonic code.

   I think this is very similar in other languages, when you come to a new language, you are using stuff
   that was common in your previous language. I mean, not the
   computer-science-programming-software-design part, but the conventions and usage of what language is
   giving you.

   The question was about junior Python devs, not junior devs, so there you go, a few things that I
   noticed when it is clear that someone has just started using python.
    1. Do not use proper data structures. Especially, dicts. But also sets or OrderedDicts

# they do this
if a == 'count_in_this_way':
        result = count_in_this_way()
elif a == 'that_way':
        result = that_way()
elif a == 'another_way':
        result = another_way():
else:
    result = standard_way()


# instead of this
ways_to_count = {
        'count_in_this_way': count_in_this_way,
        'that_way': that_way,
        'another_way': another_way
}
result = ways_to_count.get(a, standard_way)()
###################################################

# they do this
common = []
for a in foo:
    if a in bar:
                common.append(a)


# instead of this
foo = [1, 2, 3]
bar = [2, 4, 5]
common = set(foo) & set(bar)

   2. Do not use generators.
# they do this

existing_account_ids = [1, 2, 3, 4, 5, 6]
for a in request.foo:
        if a in existing_accounts:
                obj = Account(a)
                do_something(obj)


# instead of this

def existing(a):
        if a in existing_accounts:
                yield Account(a)

for a in existing_accounts(foo):
        do_something(a)

   3. Do not know how iterator works.
# they do this
for i in range(len(container)):
        process(container[i])

# instead of this
for element in container:
        process(element)

   4. They do not use built-ins. I noticed - enumerate, any, all.
# they do this
counter = 0
for el in stuff:
        do_something(el)
    print(f'Im at {counter} element!')
    counter += 1

# instead of this
for i, el in enumerate(stuff):
        do_something(el)
        print(f'Im at {i} element!')

#######################################################################

# they do this
all_has_something = True
for el in array:
        if not el_has(el):
                all_has_something = False
                break

if all_has_something:
        do_something_for_all(array)

# instead of this
if all([el_has(el) for el in array]):
        do_something_for_all(array)

   5. They write no docstrings.

   6. They write docstrings everywhere.

   7. They use CamelCase instead of snake_case.

   I got P != NP from guy named Raymond Hettinger. Absolutely recommend watching [14]this to see how
   pythonic code should look like. Btw he is python core developer and super fun.

   Thanks for reading. And thanks for the comments, I learned something and updated answers with other
   examples!

***
   I can think of a few :

   Thinking in terms of C for loop:

   So doing this :
for index in range(len(my_container)):
    print(my_container[index])

   rather than this :
for item in my_container:
        print(item)

   or this :
for index, item in enumerate(my_container):
        print(index, item)

   Forgetting that the console and scripts behave differently.

   The console will always print the return value of a function
>>> def func():
...    return 3
3

   But use the same function in a script and you don’t automatically get the output

   Not using inbuilt types

   For instance :
def find_overlap(container1, container2):
    overlap = []
        for item in container1:
        if item in container2:
            overlap.append(item)
    return overlap

   Instead of :
def find_overlap(container1, container2):
        return set(container1).intersection(container2)

   Forgetting that range doesn’t include the last value :
>>> for i in range(0,10):
...     print i
0
1
2
3
4
5
6
7
8
9

   Bitten by floating point rounding

   There is a ‘good’ reason why :
>>> a = 0
>>> for i in range(0,10):
...     a = a + 0.1
...
>>> a
0.9999999999999999

   and it isn’t a bug in Python.

   Thinking Python is purely interpreted

   I have seen a few new developers using very short function names and identifiers, in the belief that
   since Python is interpreted, if the names are short that Python will have to spend less time parsing
   and comparing those names and execution will be quicker.


---
