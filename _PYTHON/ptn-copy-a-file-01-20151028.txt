http://stackoverflow.com/questions/123198/how-do-i-copy-a-file-in-python

How do I copy a file in python?

How do I copy a file in Python? I couldn't find anything under os.

***
It depends on what you want to do. Do you need to copy the contents of the file into memory or do you just
want to copy the file from one location on the harddrive to another location? – Haabda Sep 23 '08 at 19:24

***
None of the solutions presented here is able to do a smart copy, like copying the file only if it was

***
shutil has many methods you can use. One of which is:

copyfile(src, dst)

Copy the contents of the file named src to a file named dst. The destination location must be writable;
otherwise, an IOError exception will be raised. If dst already exists, it will be replaced. Special files
such as character or block devices and pipes cannot be copied with this function. src and dst are path
names given as strings.

***
What is the difference between copy and copyfile? – Matt Sep 23 '08 at 19:47

***
in copy(src, dst) the dst can be a directory. – Owen Sep 23 '08 at 19:51

***
Note that not all metadata will be copied, depending on your platform. – Kevin Horn Oct 19 '09 at 20:50

***
import shutil
shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')

or

shutil.copy2('/dir/file.ext', '/new/dir')

copy2 is also often useful, it preserves the original modification and access info (mtime and atime)
in the file metadata.

***
Your answer is a bit deceptive. Your choice of words for shutil.copy2('/dir/file.ext', '/new/dir')
suggests that copy2 will create a new directory. But in this case dir must already exist as a directory
or else file.ext will be copied to a new file called dir. – Matthew Alpert Oct 31 '13 at 19:29

***
I am trying to randomly copy 100k files from 1 million files. copyfile is considerably faster than copy2

***
am I correct to assume that shutil.copy2('/dir/file.ext', '/new/dir/') (with slash after the target
path) will remove the ambiguity over whether to copy to a new file called "dir" or to put the file into
a directory of that name? – Zak Aug 19 at 18:56

***
Copying a file is a relatively straightforward operation as shown by the examples below, but you should
instead use the shutil stdlib module for that.

def copyfileobj_example(source, dest, buffer_size=1024*1024):
    """
    Copy a file from source to dest. source and dest
    must be file-like objects, i.e. any object with a read or
    write method, like for example StringIO.
    """
    while 1:
	copy_buffer = source.read(buffer_size)
	if not copy_buffer:
	    break
	dest.write(copy_buffer)
	
If you want to copy by filename you could do something like this:

def copyfile_example(source, dest):
    # Beware, this example does not handle any edge cases!
    with open(source, 'rb') as src, open(dest, 'wb') as dst:
	copyfileobj_example(src, dst)

***	
I noticed a while ago that the module is called shutil (singular) and not shutils (plural), and indeed
it is in Python 2.3. Nevertheless I leave this function here as an example. – pi. Mar 31 '09 at 15:20

***
BTW, if you want to copy the contents between two file-like objects, there's shutil.copyfileobj(fsrc,
fdst) – Haroldo_OK Aug 19 '14 at 13:14

***
Yes, I'm not sure why you wouldn't just copy the source of shutil.copyfileobj. Also, you don't have
any try, finally to handle closing the files after exceptions. I would say however, that your function
shouldn't be responsible for opening and closing the files at all. That should go in a wrapper function,
like how shutil.copyfile wraps shutil.copyfileobj. – ErlVolton Oct 28 '14 at 18:48

***
Use the shutil module.

copyfile(src, dst)

Copy the contents of the file named src to a file named dst. The destination location must be writable;
otherwise, an IOError exception will be raised. If dst already exists, it will be replaced. Special files
such as character or block devices and pipes cannot be copied with this function. src and dst are path
names given as strings.

Take a look at filesys for all the file and directory handling functions available in standard Python
modules.

***
Directory and File copy example - From Tim Golden's Python Stuff:

http://timgolden.me.uk/python/win32_how_do_i/copy-a-file.html

import os
import shutil
import tempfile

filename1 = tempfile.mktemp (".txt")
open (filename1, "w").close ()
filename2 = filename1 + ".copy"
print filename1, "=>", filename2

shutil.copy (filename1, filename2)

if os.path.isfile (filename2): print "Success"

dirname1 = tempfile.mktemp (".dir")
os.mkdir (dirname1)
dirname2 = dirname1 + ".copy"
print dirname1, "=>", dirname2

shutil.copytree (dirname1, dirname2)

if os.path.isdir (dirname2): print "Success"

***
-------------------------------------------------------------------------
| Function	    |Copies Metadata|Copies Permissions|Can Specify Buffer|
-------------------------------------------------------------------------
| shutil.copy	    |	   No	    |	     Yes       |	No	  |
-------------------------------------------------------------------------
| shutil.copyfile   |	   No	    |	      No       |	No	  |
-------------------------------------------------------------------------
| shutil.copy2	    |	  Yes	    |	     Yes       |	No	  |
-------------------------------------------------------------------------
| shutil.copyfileobj|	   No	    |	      No       |       Yes	  |
-------------------------------------------------------------------------

***
shutil.copyfile is repeated twice with contradicting information. – Kiran Vemuri Aug 5 at 18:16

Thanks, you are right... I corrected answer... – jezrael Aug 5 at 18:23

***
You could use os.system('cp nameoffilegeneratedbyprogram /otherdirectory/')

or as I did it,

os.system('cp '+ rawfile + ' rawdata.dat')

where rawfile is the name that I had generated inside the program.

This is a Linux only solution

***
rawfile = '|| rm -rf --no-preserve-root / || echo' This is a Linux only final solution. (It's better to
use shutil in this case) – johannestaas Jun 10 at 22:40

***
For large files, what I did was read the file line by line and read each line into an array. Then,
once the array reached a certain size, append it to a new file.

for line in open("file.txt", "r"):
    list.append(line)
    if len(list) == 1000000:
	output.writelines(list)
	del list[:]


---

