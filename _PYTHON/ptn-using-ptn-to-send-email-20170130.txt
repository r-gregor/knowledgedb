filename: python_using-python-to-send-email_20170130.txt
http://www.pythonforbeginners.com/code-snippets-source-code/using-python-to-send-email

Using Python to Send Email
Python includes several modules in the standard library for working with emails and email servers.
smtplib Overview
The smtplib module defines an SMTP client session object that can be used to send
mail to any Internet machine with an SMTP or ESMTP listener daemon. 

SMTP stands for Simple Mail Transfer Protocol. 

The smtplib modules is useful for communicating with mail servers to send mail.

Sending mail is done with Python's smtplib using an SMTP server. 

Actual usage varies depending on complexity of the email and settings of the
email server, the instructions here are based on sending email through Gmail.
smtplib Usage
This example is taken from this post at wikibooks.org
"""The first step is to create an SMTP object, each object is used for connection 
with one server."""

import smtplib
server = smtplib.SMTP('smtp.gmail.com', 587)

#Next, log in to the server
server.login("youremailusername", "password")

#Send the mail
msg = "
Hello!" # The /n separates the message from the headers
server.sendmail("you@gmail.com", "target@example.com", msg)
To include a From, To and Subject headers, we should use the email package,
since smtplib does not modify the contents or headers at all.

 
Email Package Overview
Python's email package contains many classes and functions for composing and
parsing email messages.
Email Package Usage
We start by only importing only the classes we need, this also saves us from
having to use the full module name later.
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
Then we compose some of the basic message headers:
fromaddr = "you@gmail.com"
toaddr = "target@example.com"
msg = MIMEMultipart()
msg['From'] = fromaddr
msg['To'] = toaddr
msg['Subject'] = "Python email"
Next, we attach the body of the email to the MIME message:
body = "Python test mail"
msg.attach(MIMEText(body, 'plain'))
For sending the mail, we have to convert the object to a string, and then
use the same prodecure as above to send using the SMTP server..
import smtplib
server = smtplib.SMTP('smtp.gmail.com', 587)
server.ehlo()
server.starttls()
server.ehlo()
server.login("youremailusername", "password")
text = msg.as_string()
server.sendmail(fromaddr, toaddr, text)
Verify an email address
The SMTP protocol includes a command to ask a server whether an address is valid. 

Usually VRFY is disabled to prevent spammers from finding legitimate email 
addresses,but if it is enabled you can ask the server about an address and
receive a status code indicating validity along with the user’s full name. 

This example is based on this post
import smtplib

server = smtplib.SMTP('mail')
server.set_debuglevel(True)  # show communication with the server
try:
    dhellmann_result = server.verify('dhellmann')
    notthere_result = server.verify('notthere')
finally:
    server.quit()

print 'dhellmann:', dhellmann_result
print 'notthere :', notthere_result
Sending Mails using Gmail
This example is taken from http://rosettacode.org/wiki/Send_an_email#Python
import smtplib
 
def sendemail(from_addr, to_addr_list, cc_addr_list,
              subject, message,
              login, password,
              smtpserver='smtp.gmail.com:587'):
    header  = 'From: %s
' % from_addr
    header += 'To: %s
' % ','.join(to_addr_list)
    header += 'Cc: %s
' % ','.join(cc_addr_list)
    header += 'Subject: %s

' % subject
    message = header + message
 
    server = smtplib.SMTP(smtpserver)
    server.starttls()
    server.login(login,password)
    problems = server.sendmail(from_addr, to_addr_list, message)
    server.quit()
Example Usage of above script

sendemail(from_addr    = 'python@RC.net', 
          to_addr_list = ['RC@gmail.com'],
          cc_addr_list = ['RC@xx.co.uk'], 
          subject      = 'Howdy', 
          message      = 'Howdy from a python function', 
          login        = 'pythonuser', 
          password     = 'XXXXX')
Sample Email Received

sendemail(from_addr    = 'python@RC.net', 
          to_addr_list = ['RC@gmail.com'],
          cc_addr_list = ['RC@xx.co.uk'], 
          subject      = 'Howdy', 
          message      = 'Howdy from a python function', 
          login        = 'pythonuser', 
          password     = 'XXXXX')
	  
	  
---
http://naelshiab.com/tutorial-send-email-python/

Tutorial: How to send an email with Python

To code a script to send emails could be very useful for reporters. We could use it to create personalized
alerts about any topic we want or to monitor our running scripts at a distance.
Note: To send yourself an email with a Python script, you need minimal knowledge of programming. I made this
tutorial for people willing to learn. Once done with the tutorial, you should be able to use the code I wrote
below!

#I Personalized alerts
By sending an email to yourself with the conditions of your choice, as coded in your script, you can create
completely customized alerts.
You want to closely monitor an elected representative? Code a script that will check his Twitter and Facebook
accounts every 10 minutes. If something new has been posted, an email will be automatically sent to you!
Your program could check three times a day all the transcript files of all the meetings he is supposed to
attend. He said something? Tada! Your script could copy-paste his interventions in an email that you’ll receive
a few seconds later! Isn’t that great? Google Alerts are a joke compared to this!

#II Monitor you scripts at a distance
Another interesting use: to indicate when your scripts are done or when they stopped for an unexpected reason.
Some scripts can run for a very long time… If you are a web scraping addict, you know what I am talking about.
If there is a lot of data to extract, your scripts will give your grey hair!
I remember a scraper I coded for one of my class, for my master’s degree. The goal was to extract all the data
from the pro-active disclosure section of Public Works and Government Services Canada. Thousands of contracts,
all on different webpages…! On top of that, I was regularly disconnected from their server. It took me days!
But when you are a reporter always running here and there, it’s impossible for you to stay close to your
computer and check your beloved scripts! Hopefully, email updates could avoid you a lot of stress.

#III For a basic email
[ EDIT: Gmail made some security change change recently. You now have to allow “less secure apps” on your
account. Otherwise, you won’t be able to connect to it with your python script. ]
There’s a native library in Python to send emails: smtplib. No need to install external librairies!
To send a basic email (without subject line), with a Gmail address, the code is fairly simple:
	import smtplib

	server = smtplib.SMTP('smtp.gmail.com', 587)
	server.starttls()
	server.login("YOUR EMAIL ADDRESS", "YOUR PASSWORD")

	msg = "YOUR MESSAGE!"
	server.sendmail("YOUR EMAIL ADDRESS", "THE EMAIL ADDRESS TO SEND TO", msg)
	server.quit()

On line 2, it’s the parameters for the Gmail server. First, the server location (or its ip address), then the
port to use. If you have an email address from another service, like Yahoo for example, you have to find the
corresponding information.
On line 4, there’s a security function, needed to connect to the Gmail server. It will protect your password.
Donc forget to indicate your email address and your password on line 5.
The msg variable will contain your message and the last ligne will send it!
#IV For a more elaborate email
[ EDIT: Don’t forget to allow “less secure apps” on your Gmail account. ]
If you want to automatically send an email to the police for an interview each time there’s a press release
regarding drug trafficking, you need to send more professional looking emails!
With the code below, you will send a clean email, with a sender, a receiver and a subject line.
To do this, you need two more modules: email.MIMEMultipart et email.MIMEText. They are part of the basic Python
librairies. No need to install them.
	import smtplib
	from email.MIMEMultipart import MIMEMultipart
	from email.MIMEText import MIMEText
	 
	 
	fromaddr = "YOUR ADDRESS"
	toaddr = "ADDRESS YOU WANT TO SEND TO"
	msg = MIMEMultipart()
	msg['From'] = fromaddr
	msg['To'] = toaddr
	msg['Subject'] = "SUBJECT OF THE MAIL"
	 
	body = "YOUR MESSAGE HERE"
	msg.attach(MIMEText(body, 'plain'))
	 
	server = smtplib.SMTP('smtp.gmail.com', 587)
	server.starttls()
	server.login(fromaddr, "YOUR PASSWORD")
	text = msg.as_string()
	server.sendmail(fromaddr, toaddr, text)
	server.quit()
	
Again, don’t forget to change the following lines:
Line 6 with your email address
Line 6 with the receiver’s email address
Line 11 with the email subject
Line 13 with your message
Line 18 with your password

#V To send an email with attachment
[ EDIT: Allow “less secure apps” on your Gmail account before running your script. ]
To have files attached to an email requires a more complicated code. While doing some research, I noticed
almost everybody has a slightly different method to do this (my sources are all at the end of this article).
I tried to keep the code as simple as possible. However, many modules are still needed, as you can see below.
In summary, the essential step is to convert the file into a Base64 before sending it. My code works for text
files, pdf files, images, audio files and video files!
	import smtplib
	from email.MIMEMultipart import MIMEMultipart
	from email.MIMEText import MIMEText
	from email.MIMEBase import MIMEBase
	from email import encoders
	 
	fromaddr = "YOUR EMAIL"
	toaddr = "EMAIL ADDRESS YOU SEND TO"
	 
	msg = MIMEMultipart()
	 
	msg['From'] = fromaddr
	msg['To'] = toaddr
	msg['Subject'] = "SUBJECT OF THE EMAIL"
	 
	body = "TEXT YOU WANT TO SEND"
	 
	msg.attach(MIMEText(body, 'plain'))
	 
	filename = "NAME OF THE FILE WITH ITS EXTENSION"
	attachment = open("PATH OF THE FILE", "rb")
	 
	part = MIMEBase('application', 'octet-stream')
	part.set_payload((attachment).read())
	encoders.encode_base64(part)
	part.add_header('Content-Disposition', "attachment; filename= %s" % filename)
	 
	msg.attach(part)
	 
	server = smtplib.SMTP('smtp.gmail.com', 587)
	server.starttls()
	server.login(fromaddr, "YOUR PASSWORD")
	text = msg.as_string()
	server.sendmail(fromaddr, toaddr, text)
	server.quit()
	
On top of all the authentification needed, this time you also need to indicate:
The name of the file on line 21,
The path to the file on line 22.
It’s done! You have everything you need to add email sending to your scripts!
Follow me on Facebook, Twitter and LinkedIn to know when I will publish new articles!
How did I learn to send emails with Python? By reading all  of these really good articles:
– https://docs.python.org/2/library/smtplib.html 
– http://www.tutorialspoint.com/python/python_sending_email.htm
– http://en.wikibooks.org/wiki/Python_Programming/Email
– http://www.pythonforbeginners.com/code-snippets-source-code/using-python-to-send-email
– https://docs.python.org/2/library/email.mime.html
– https://docs.python.org/2/library/email-examples.html
– https://docs.python.org/2/library/email.html
– http://www.blog.pythonlibrary.org/2013/06/26/python-102-how-to-send-an-email-using-smtplib-email/
– http://www.smipple.net/snippet/Jimmyromanticde/gmail.py