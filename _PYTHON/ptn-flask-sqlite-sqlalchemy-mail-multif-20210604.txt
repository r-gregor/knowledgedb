filename: ptn_flask-sqlite-sqlalchemy_mail-multif_20210604.txt
https://pythonbasics.org/flask-sqlite/

Flask SQLite database

   Python has built-in support for SQLite. The SQlite3 module comes with the Python release. In this
   article you will learn ho
   w the Flask application interacts with SQLite.

   SQLite is a relational database system that uses the SQL query language to interact with the
   database. Each database can have tables and each table can have records.

   Related course: [5]Python Flask: Create Web Apps with Flask

Create database and table
   The SQLite database storse all data in a single file. You can create an SQLite database from Python
   code. The program creates a SQLite database 'database.db ' where the student tables are created.
<code>
import sqlite3

conn = sqlite3.connect('database.db')
print "Opened database successfully";
conn.execute('CREATE TABLE students (name TEXT, addr TEXT, city TEXT, pin TEXT)')
print "Table created successfully";
conn.close()
</code>


Views
   Our Flask application has three View functions.

Submit form
   The first new_student() function is bound to a URL rule ('/enternew').It presents an HTML file that
   contains a student information form.
<code>
@app.route('/enternew')
def new_student():
	return render_template('student.html')
</code>


   The file student.html:
<html>
	<body>

	<form action = "{{ url_for('addrec') }}" method = "POST">
		<h3>Student Information</h3>
		Name<br>
		<input type = "text" name = "nm" /></br>

		Address<br>
		<textarea name = "add" ></textarea><br>

		City<br>
		<input type = "text" name = "city" /><br>

		PINCODE<br>
		<input type = "text" name = "pin" /><br>
		<input type = "submit" value = "submit" /><br>
	  </form>
	</body>
</html>


Add record
   As can be seen, the form data is published to the '/addrec' URL of the binding addrec () function.

   The addrec () function retrieves the form's data through the POST method and inserts the student
   table.The message corresponding to the success or error in the insert operation will be rendered as
   'result.html'.
<code>
@app.route('/addrec',methods = ['POST', 'GET'])
def addrec():
	if request.method == 'POST':
		try:
			nm = request.form['nm']
			addr = request.form['add']
			city = request.form['city']
			pin = request.form['pin']

			with sql.connect("database.db") as con:
				cur = con.cursor()
				cur.execute("INSERT INTO students (name,addr,city,pin)
					VALUES (?,?,?,?)",(nm,addr,city,pin) )

				con.commit()
				msg = "Record successfully added"
		except:
			con.rollback()
			msg = "error in insert operation"

		finally:
			return render_template("result.html",msg = msg)
			con.close()
</code>

   The HTML script for result.html contains an escape statement , which displays the result of the
   Insert operation.
<!doctype html>
<html>
	<body>

		result of addition : {{ msg }}
		<h2><a href = "\">go back to home page</a></h2>

	</body>
</html>


List items
   The application contains another list () function represented by the '/list' URL.It populates'rows'
   as a Multidict object that contains all records in the student table.This object is passed to the
   list.html template.
<code>
@app.route('/list')
def list():
	con = sql.connect("database.db")
	con.row_factory = sql.Row

	cur = con.cursor()
	cur.execute("select * from students")

	rows = cur.fetchall();
	return render_template("list.html",rows = rows)
</code>

The file list.html contains:

<!doctype html>
<html>
	<body>

		<table border = 1>
			<thead>
				<td>Name</td>
				<td>Address>/td<
				<td>city</td>
				<td>Pincode</td>
			</thead>

			{% for row in rows %}
				<tr>
					<td>{{row["name"]}}</td>
					<td>{{row["addr"]}}</td>
					<td> {{ row["city"]}}</td>
					<td>{{row['pin']}}</td>
				</tr>
			{% endfor %}
		</table>
	<a href = "/">Go back to home page</a>

	</body>
</html>

   Finally, the '/' URL rule renders 'home.html', which is the entry point of the application.
<code>
@app.route('/')
def home():
	return render_template('home.html')
</code>


SQLite Example
   The following is the complete code for the Flask-SQLite application.

<code>
from flask import Flask, render_template, request
import sqlite3 as sql

app = Flask(__name__)

@app.route('/')
def home():
	return render_template('home.html')

@app.route('/enternew')
def new_student():
	return render_template('student.html')

@app.route('/addrec',methods = ['POST', 'GET'])
def addrec():
	if request.method == 'POST':
		try:
			nm = request.form['nm']
			addr = request.form['add']
			city = request.form['city']
			pin = request.form['pin']

			with sql.connect("database.db") as con:
				cur = con.cursor()
				cur.execute("INSERT INTO students (name,addr,city,pin) VALUES (?,?,?,?)",(nm,addr,city,pin) )
				con.commit()
				msg = "Record successfully added"

		except:
			con.rollback()
			msg = "error in insert operation"

		finally:
			return render_template("result.html",msg = msg)
			con.close()

@app.route('/list')
def list():
	con = sql.connect("database.db")
	con.row_factory = sql.Row
	cur = con.cursor()
	cur.execute("select * from students")
	rows = cur.fetchall();
	return render_template("list.html",rows = rows)

if __name__ == '__main__':
   app.run(debug = True)
</code>



---
https://pythonbasics.org/flask-sqlalchemy/

Flask SQLAlchemy (with Examples)

   Using raw SQL in the Flask Web application to perform CRUD operations on the database can be
   cumbersome.

   Instead, SQLAlchemy, the Python Toolkit is a powerful OR Mapper, which provides application
   developers with the full functionality and flexibility of SQL.

   Flask-SQLAlchemy is a Flask extension that adds support for SQLAlchemy to the Flask application.

   Related course: [5]Python Flask: Create Web Apps with Flask

What is ORM?
   ORM is short for Object Relation Mapping (sometimes Object Relationship Mapping).
	 * Most programming language platforms are object-oriented.
	 * the data in the RDBMS server is stored in tables.

   Object-relational mapping is a technique that maps object parameters to the structure of a layer
   RDBMS table. The ORM API provides a way to perform CRUD operations without writing raw SQL
   statements.

Flask SQLAlchemy

Setup
   In this section, we will study the ORM technology of Flask-SQLAlchemy and build a small web
   application.

   Step 1 - Install the Flask-SQLAlchemy extension.
$> pip install flask-sqlalchemy

   Step 2 - You need to import the SQLAlchemy class from this module.
from flask_sqlalchemy import SQLAlchemy

   Step 3 - Now create a Flask application object and set the URI for the database to use.
app = Flask (__name__)
app.config [始SQLALCHEMY_DATABASE_URI始] = 始sqlite:///students.sqlite3始

   Step 4 - then use the application object as a parameter to create an object of class SQLAlchemy.The
   object contains an auxiliary function for the ORM operation.It also provides a parent Model class
   that uses it to declare a user-defined model.In the code snippet below, the studients model is
   created.
<code>
db = SQLAlchemy(app)

class students(db.Model):
	id = db.Column('student_id', db.Integer, primary_key = True)
	name = db.Column(db.String(100))
	city = db.Column(db.String(50))
	addr = db.Column(db.String(200))
	pin = db.Column(db.String(10))

	def __init__(self, name, city, addr,pin):
		self.name = name
		self.city = city
		self.addr = addr
		self.pin = pin
</code>


   Step 5 - To create/use the database mentioned in the URI, run the create_all() method.
db.create_all()

CRUD
   SQLAlchemy's Session object manages all persistence operations for ORM objects.

   The following session method performs CRUD operations:
# Inserts records into a mapping table
db.session.add (model object)

# delete records from a table
db.session.delete (model object)

# retrieves all records (corresponding to SELECT queries) from the table.
model.query.all ()

   You can apply filters to the retrieved record set by using the filter attribute.For example, to
   retrieve records for city = 'Tokyo' in student tables, use the following statement:
students.query.filter_by(city = 'Tokyo').all()

   With so many backgrounds, now we will provide a view function for our application to add student
   data.

Views

Show all
   The entry point of the application is the show_all () function that is bound to the ' /' URL.The
   record set of the student table is sent as a parameter to the HTML template.The server-side code in
   the template renders the record as an HTML table.
<code>
@app.route('/')
def show_all():
	return render_template('show_all.html', students = students.query.all() )
</code>

   The HTML script for the template ('show_all.html ') is as follows:

<!DOCTYPE html>
<html lang = "en">
	<head></head>
	<body>

		<h3>
			<a href = "{{ url_for('show_all') }}">Comments - Flask SQLAlchemy example</a>
		</h3>

		<hr/>
		{%- for message in get_flashed_messages() %}
			{{ message }}
		{%- endfor %}

		<h3>Students (<a href = "{{ url_for('new') }}">Add Student</a>)</h3>

		<table>
			<thead>
				<tr>
					<th>Name</th>
					<th>City</th>
					<th>Address</th>
					<th>Pin</th>
				</tr>
			</thead>

			<tbody>
				{% for student in students %}
					<tr>
						<td>{{ student.name }}</td>
						<td>{{ student.city }}</td>
						<td>{{ student.addr }}</td>
						<td>{{ student.pin }}</td>
					</tr>
				{% endfor %}
			</tbody>
		</table>

	</body>
</html>

New record
   The web page contains a hyperlink to the '/new' URL mapping new () function.When clicked, the Student
   Information form opens. Data is published to the same URL in the POST method.

   The view new.html contains:

<!DOCTYPE html>
<html>
   <body>

		<h3>Students - Flask SQLAlchemy example</h3>
		<hr/>

		{%- for category, message in get_flashed_messages(with_categories = true) %}
			<div class = "alert alert-danger">
				{{ message }}
			</div>
		{%- endfor %}

		<form action = "{{ request.path }}" method = "post">
			<label for = "name">Name</label><br>
			<input type = "text" name = "name" placeholder = "Name" /><br>
			<label for = "email">City</label><br>
			<input type = "text" name = "city" placeholder = "city" /><br>
			<label for = "addr">addr</label><br>
			<textarea name = "addr" placeholder = "addr"></textarea><br>
			<label for = "PIN">City</label><br>
			<input type = "text" name = "pin" placeholder = "pin" /><br>
			<input type = "submit" value = "Submit" />
		</form>

	<body>
</html>

POST
   When the http method is detected as POST, the form data is added to the student table, and the
   application is returned to the home page of the display adding data.
<code>
@app.route('/new', methods = ['GET', 'POST'])
def new():
	if request.method == 'POST':
		if not request.form['name'] or not request.form['city'] or not request.form['addr']:
			flash('Please enter all the fields', 'error')
		else:
			student = students(request.form['name'], request.form['city'], request.form['addr'], request.form['pin'])
			db.session.add(student)
			db.session.commit()
			flash('Record was successfully added')
			return redirect(url_for('show_all'))

	return render_template('new.html')
</code>


SQLAlchemy Example
   The complete code for the application (app.py) is given below.
<code>
from flask import Flask, request, flash, url_for, redirect, render_template
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.sqlite3'
app.config['SECRET_KEY'] = "random string"
db = SQLAlchemy(app)

class students(db.Model):
	id = db.Column('student_id', db.Integer, primary_key = True)
	name = db.Column(db.String(100))
	city = db.Column(db.String(50))
	addr = db.Column(db.String(200))
	pin = db.Column(db.String(10))

	def __init__(self, name, city, addr,pin):
		self.name = name
		self.city = city
		self.addr = addr
		self.pin = pin

	@app.route('/')
	def show_all():
		return render_template('show_all.html', students = students.query.all() )

	@app.route('/new', methods = ['GET', 'POST'])
	def new():
		if request.method == 'POST':
			if not request.form['name'] or not request.form['city'] or not request.form['addr']:
				flash('Please enter all the fields', 'error')
			else:
				student = students(request.form['name'], request.form['city'], request.form['addr'], request.form['pin'])
				db.session.add(student)
				db.session.commit()
				flash('Record was successfully added')
				return redirect(url_for('show_all'))

		return render_template('new.html')

if __name__ == '__main__':
	db.create_all()
	app.run(debug = True)
</code>


---
https://pythonbasics.org/flask-mail/

Send an E-mail with Python Flask

   Web-based applications typically require the ability to send mail to the user/client. Flask doesn't
   have an out of the box solution to send mail.

   Instead, the Flask-Mail extension makes it easy to establish a simple interface with any email
   server.

   Email generally uses two protocols, one for sending mails (smtp) and one for receiving mail (pop3).
   This article is about sending mails.

   Related course: [5]Python Flask: Create Web Apps with Flask

Introduction
   First, the Flask-Mail extension should be installed with the help of the pip utility.
$> pip install Flask-Mail

   You then need to configure the Flask-Mail by setting the values for the following application
   parameters.
	 * MAIL_SERVER
	 * MAIL_USE_TLS
	 * MAIL_USE_SSL
	 * MAIL_DEBUG
	 * MAIL_USERNAME
	 * MAIL_PASSWORD
	 * MAIL_DEFAULT_SENDER
	 * MAIL_MAX_EMAILS
	 * MAIL_SUPPRESS_SEND
	 * MAIL_ASCII_ATTACHMENTS

   The flask-mail module contains definitions of the following important classes.

   The Mail class manages email messaging requirements.The class constructor takes the form of:
flask-mail.Mail(app = None)

   Mail class methods include: send(), connect() and send_message().

   The Message class encapsulated an email.The Message class constructor has several parameters:

flask-mail.Message(subject, recipients, body, html, sender, cc, bcc, reply-to, date, charset,\
extra_headers, mail_options, rcpt_options)

   Message class method attach () - Add attachment for mail.This method takes the following parameters:
	 * filename : The name of the file
	 * content_type : MIME type
	 * data - file data

   You can use add_recipient() to add another recipient to the message.

Mail config and functions
   In the example below, the SMTP server for the Google gmail service is used as the MAIL_SERVER for the
   Flask-Mail configuration.

   Step 1: Import the Mail and Message classes from the flask-mail module in the code.
from flask_mail import Mail, Message

   Step 2: Configure server parameters
app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USERNAME'] = '[6][email protected]'
app.config['MAIL_PASSWORD'] = '*****'
app.config['MAIL_USE_TLS'] = False
app.config['MAIL_USE_SSL'] = True

   Step 3: Create an instance of the Mail class.
mail = Mail(app)

   Step 4: The Message object is set in a Python function that is mapped by the URL rule ('/').
<code>
@app.route("/")
def index():
	msg = Message('Hello', sender = '[7][email protected]', recipients = ['[8][email protected]'])
	msg.body = "This is the email body"
	mail.send(msg)
	return "Sent"
</code>


Flask mail example
   The entire code is as follows.Run the following script in the Python shell and access
   localhost:5000/.
<code>
from flask import Flask
from flask_mail import Mail, Message

app = Flask(__name__)
mail= Mail(app)
app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USERNAME'] = '[9][email protected]'
app.config['MAIL_PASSWORD'] = '*****'
app.config['MAIL_USE_TLS'] = False
app.config['MAIL_USE_SSL'] = True
mail = Mail(app)

@app.route("/")
def index():
	msg = Message('Hello', sender = '[10][email protected]', recipients = ['[11][email protected]'])
	msg.body = "Hello Flask message sent from Flask-Mail"
	mail.send(msg)
	return "Sent"

if __name__ == '__main__':
	app.run(debug = True)
</code>

   Note that security in the Gmail service can prevent this login attempt. If you use gmail smtp server,
   you might have to reduce the security level.


---
