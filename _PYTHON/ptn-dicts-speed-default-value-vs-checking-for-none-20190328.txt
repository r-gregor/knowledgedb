filename: ptd_dicts_speed-default-value-vs-checking-for-none_20190328.txt
http://pythonwise.blogspot.com/2019/03/speed-default-value-vs-checking-for-none.html
Speed: Default value vs checking for None
March 20, 2019

   Python's dict has a get method. It'll either return an existing value for a given key or return a
   default value if the key is not in the dict. It's very tempting to write code like val = d.get(key,
   Object()), however you need to think about the performance implications. Since function arguments are
   evaluated before calling the function, this means the a new Object will be created regardless if it's
   in the dict or not. Let's see this affects performance.
   
   
default_vs_none.py
<code>

from dataclasses import dataclass

@dataclass
class Location:
    x: int
    y: int

def get_default(locs, name):
    return locs.get(name, Location(0, 0))


def get_none(locs, name):
    return locs.get(name) or Location(0, 0)
</code>
    
   get_default will create new Point every time and get_none will create only if there's no such object,
   it works since or evaluate it's arguments lazily and will stop once the first one is True.
   
   First we'll try with a missing key:
   In [1]: %run default_vs_none.py
   In [2]: locations = {}  # name -> Location
   In [3]: %timeit get_default(locations, 'carmen')
   384 ns ± 2.56 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
   In [4]: %timeit get_none(locations, 'carmen')
   394 ns ± 1.61 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
   
   Not so much difference. However if the key exists:
   In [5]: locations['carmen'] = Location(7, 3)
   In [6]: %timeit get_default(locations, 'carmen')
   377 ns ± 1.84 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
   In [7]: %timeit get_none(locations, 'carmen')
   135 ns ± 0.108 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
   We get much faster results.


---
