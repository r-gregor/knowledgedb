filename: debian12-install-plotly-20250423.txt
https://idroot.us/install-plotly-debian-12/

How To Install Plotly on Debian 12

   Data visualization transforms raw numbers into meaningful insights. Plotly stands out as a powerful
   interactive visualization library that helps analysts, scientists, and developers create compelling
   data stories. For Debian 12 users, installing and configuring Plotly requires specific steps to
   ensure optimal performance. This guide provides a detailed walkthrough of the entire process, from
   preparation to advanced configuration, helping you create stunning visualizations on your Debian
   system.

Understanding Plotly and Its Requirements
   Plotly is an open-source graphing library that creates interactive, browser-based visualizations.
   Unlike traditional static visualization tools, Plotly enables users to hover over data points, zoom
   into specific regions, and interact with the data in multiple ways. The library supports numerous
   chart types, including scatter plots, line charts, bar graphs, pie charts, heatmaps, geographic maps,
   and 3D visualizations.

   The Python implementation (plotly.py) builds on the JavaScript plotly.js library, which itself
   extends D3.js and stack.gl. This architecture enables high-performance visualizations that work
   seamlessly across platforms.

   System Requirements for Debian 12:
     * Python 3.6 or newer (Debian 12 ships with Python 3.11)
     * Pip package manager
     * Development libraries for certain features
     * 4GB RAM minimum (8GB recommended for larger datasets)
     * Modern web browser for rendering visualizations

   Plotly leverages your system's resources, especially when handling large datasets or creating complex
   visualizations. A multi-core processor with sufficient RAM will ensure smooth performance when
   generating intricate charts or analyzing substantial data collections.

Preparing Your Debian 12 System
   Before installing Plotly, you need to prepare your Debian 12 environment with the necessary tools and
   dependencies. A clean, up-to-date system provides the foundation for a successful installation.

   Start by updating your system packages:
$> sudo apt update
$> sudo apt upgrade -y

   Next, install essential Python development tools:
$> sudo apt install python3-dev python3-pip python3-venv build-essential -y

   Creating a virtual environment is highly recommended as it isolates your Plotly installation from
   other Python projects, preventing potential package conflicts:
$> mkdir -p ~/data_projects
$> cd ~/data_projects
$> python3 -m venv plotly_env
$> source plotly_env/bin/activate

   Once activated, your terminal prompt should change to indicate the active virtual environment. This
   isolation ensures that dependencies installed for Plotly won't interfere with other Python
   applications on your system.

   Upgrade pip within your virtual environment to ensure you have the latest version:
$> pip install --upgrade pip

   With these preparations complete, your Debian 12 system is ready for Plotly installation.

Basic Installation Methods for Plotly
   There are two primary methods for installing Plotly on Debian 12: using pip (Python's package
   installer) or conda (if you're working within the Anaconda ecosystem). Most Debian users will prefer
   the pip method.

Installing with pip
   With your virtual environment activated, install Plotly using pip:
$> pip install plotly

   This command installs the latest stable version of Plotly. If you need a specific version for
   compatibility reasons, specify it like this:
$> pip install plotly==5.14.1

   To verify your installation, run a quick check:
$> python -c "import plotly; print(plotly.__version__)"

   The command should display the installed Plotly version without errors.

Installing with conda
   If you prefer the Anaconda ecosystem, first install Miniconda on your Debian 12 system:
$> wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
$> bash Miniconda3-latest-Linux-x86_64.sh

   After installation and setup, create a dedicated environment and install Plotly:
$> conda create -n plotly_env python=3.11
$> conda activate plotly_env
$> conda install -c plotly plotly

   The conda approach is particularly useful if you're working with scientific computing packages, as
   Anaconda optimizes many libraries for performance.

Installing Essential Dependencies
   While the basic Plotly installation includes core functionality, several additional dependencies
   enhance its capabilities on Debian 12.

   Start by installing system-level dependencies that support various Plotly features:
$> sudo apt install libssl-dev libcurl4-openssl-dev -y
$> sudo apt install libxml2-dev libxslt1-dev -y
$> sudo apt install zlib1g-dev libbz2-dev liblzma-dev -y

   These libraries support secure connections, data fetching, and handling various data formats, which
   Plotly uses behind the scenes.

   Now install Python packages commonly used with Plotly:
$> pip install numpy pandas scipy statsmodels

   These data manipulation and analysis libraries integrate seamlessly with Plotly, making it easier to
   prepare and visualize your data.

   For better performance with large datasets, consider installing:
$> pip install pyarrow

   PyArrow improves memory usage and processing speed when working with large tables or dataframes that
   you plan to visualize with Plotly.

Jupyter Notebook Integration
   One of Plotly's strengths is its excellent integration with Jupyter notebooks, allowing for
   interactive visualizations directly within your analysis workflow. Setting up this integration
   requires a few additional steps.

   First, install Jupyter Notebook or JupyterLab:
$> pip install notebook jupyterlab

   Then, install the necessary widget extensions:
$> pip install ipywidgets
$> jupyter nbextension enable --py widgetsnbextension

   For JupyterLab users, install the plotly extension:
$> pip install "jupyterlab>=3" "ipywidgets>=7.6"

   Start Jupyter with:
$> jupyter notebook
# or
$> jupyter lab

   Test your setup with a simple visualization:
import plotly.graph_objects as go
fig = go.Figure(data=go.Scatter(x=[1, 2, 3, 4], y=[10, 11, 12, 13]))
fig.show()

   If the visualization doesn't appear, check for common issues:
     * Ensure all extensions are properly installed
     * Verify that JavaScript is enabled in your browser
     * Try restarting the Jupyter kernel
     * Check that you're using a modern browser (Chrome or Firefox recommended)

Installing Plotly Express
   Plotly Express is a high-level wrapper that simplifies creating common visualizations. While it's
   included in the main Plotly package from version 4.0 onwards, installing it with all its dependencies
   ensures you have access to its full functionality:
$> pip install "plotly[express]"

   This installs Plotly Express along with additional dependencies like pandas and statsmodels that
   enhance its capabilities.

   Test your Plotly Express installation with:
import plotly.express as px
df = px.data.gapminder()
fig = px.scatter(df.query("year==2007"), x="gdpPercap", y="lifeExp",
                 size="pop", color="continent", hover_name="country",
                 log_x=True, size_max=60)
fig.show()

   Plotly Express significantly reduces the code needed for complex visualizations. It's particularly
   powerful for exploratory data analysis, allowing you to quickly iterate through different
   visualization types to find the most insightful representation of your data.

Static Image Export Capabilities
   While Plotly excels at interactive visualizations, you may sometimes need static images for reports
   or publications. Setting up image export capabilities in Debian 12 requires additional components.

   The recommended approach uses Kaleido, a cross-platform library that renders Plotly visualizations as
   static images:
$> pip install kaleido

   Test the image export functionality:
import plotly.graph_objects as go
fig = go.Figure(data=go.Scatter(x=[1, 2, 3, 4], y=[10, 11, 12, 13]))
fig.write_image("figure.png")

   This should create a PNG file in your current directory. Plotly supports various formats:
fig.write_image("figure.svg")  # For vector graphics
fig.write_image("figure.pdf")  # For documents
fig.write_image("figure.jpg")  # For web use

   For higher resolution images, use the scale parameter:
fig.write_image("high_res_figure.png", scale=2)  # Double resolution

   On headless servers (without a display), you might need additional packages:
$> sudo apt install -y xvfb libgtk2.0-0 libgconf-2-4

   These tools create a virtual frame buffer that Kaleido can use to render visualizations without a
   physical display.

Extended Geo Visualization Support
   Plotly offers powerful geographic visualization capabilities, but they require additional packages on
   Debian 12:
$> pip install "plotly[geo]"
$> pip install geopandas pyshp

   These packages enable choropleth maps, scatter plots on maps, and other geospatial visualizations.

   Test geographic visualization capabilities with:
import plotly.express as px
df = px.data.gapminder().query("year==2007")
fig = px.choropleth(df, locations="iso_alpha",
                    color="lifeExp",
                    hover_name="country",
                    color_continuous_scale=px.colors.sequential.Plasma)
fig.show()

   For more detailed maps, you might need additional shape files:
$> mkdir -p ~/geodata
$> cd ~/geodata
$> wget https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip
$> unzip ne_110m_admin_0_countries.zip

   Geographic visualizations can be resource-intensive. If you experience performance issues, consider
   using simplified geometries or filtering your data to include only relevant regions.

Troubleshooting Common Installation Issues
   Despite careful installation, you might encounter issues with Plotly on Debian 12. Here are solutions
   to common problems:

Module Not Found Errors
   If Python can't find Plotly after installation:
# Check if you're in the correct virtual environment
$> which python
$> pip list | grep plotly

# Try reinstalling
$> pip uninstall plotly -y
$> pip install plotly

SSL Certificate Errors
   If you encounter SSL errors when fetching data:
$> sudo apt install ca-certificates -y
$> sudo update-ca-certificates

   You might also need to reinstall requests:
$> pip uninstall requests -y
$> pip install requests

Permission Issues
   Never use sudo pip install as this can cause permission conflicts. Instead:
# If not using a virtual environment
$> pip install --user plotly

# Fix permissions if needed
$> sudo chown -R $USER:$USER ~/.cache/pip

Display Issues in Jupyter
   If visualizations don't appear in Jupyter:
import plotly.io as pio
# Try different renderers
pio.renderers.default = 'notebook'
# or
pio.renderers.default = 'browser'

Memory Errors with Large Datasets
   For large visualizations that cause memory errors:
     * Reduce dataset size through sampling or aggregation
     * Increase swap space temporarily:

$> sudo fallocate -l 4G /swapfile
$> sudo chmod 600 /swapfile
$> sudo mkswap /swapfile
$> sudo swapon /swapfile

   These troubleshooting tips address the most common issues encountered when working with Plotly on
   Debian 12.

Configuring Plotly for Dash Applications
   Dash is a Python framework for building web applications with Plotly visualizations. Setting up Dash
   on Debian 12 extends Plotly's capabilities to interactive dashboards:
$> pip install dash dash-bootstrap-components

   Create a simple Dash application (save as app.py):
import dash
from dash import dcc, html
import plotly.express as px

app = dash.Dash(__name__)

df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")

app.layout = html.Div([
    html.H1("Dash with Plotly Example"),
    dcc.Graph(id="example-graph", figure=fig)
])

if __name__ == "__main__":
	app.run_server(debug=True)

   Run your application:
$> python app.py

   Access the dashboard at http://127.0.0.1:8050/ in your browser.

   For production deployment on Debian, install Gunicorn:
$> pip install gunicorn

   And run your application with:
$> gunicorn app:server -b 0.0.0.0:8050

   Dash turns your Plotly visualizations into full-fledged web applications with minimal additional
   code, making it perfect for creating interactive dashboards that users can access through a web
   browser.

Advanced Installation Options
   For specialized use cases, Plotly offers several advanced installation options on Debian 12:

Development Versions
   To install the latest development version directly from GitHub:
$> pip install git+https://github.com/plotly/plotly.py.git

   This gives you access to the newest features before they're officially released, though stability may
   vary.

Offline Installation
   For systems without internet access:
# On a system with internet:
$> pip download plotly -d ./plotly_pkg

# Transfer files to offline system and install:
$> pip install --no-index --find-links=./plotly_pkg plotly

Docker Containers
   For complete isolation, create a Dockerfile:
FROM debian:12

RUN apt-get update && apt-get install -y \
    python3 python3-pip \
    libssl-dev libcurl4-openssl-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

COPY . .
CMD ["python3", "app.py"]

   With requirements.txt containing:
plotly==5.14.1
pandas
dash

   Build and run:
$> docker build -t plotly-app .
$> docker run -p 8050:8050 plotly-app

   Docker provides complete isolation and reproducibility, particularly useful for deployment across
   different environments.

Verifying and Testing Your Installation
   After installation, thoroughly test your Plotly setup with a comprehensive verification script:
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import pandas as pd

# Test basic plotting
x = np.linspace(0, 10, 100)
y = np.sin(x)
fig1 = go.Figure(data=go.Scatter(x=x, y=y, mode='lines'))
fig1.update_layout(title="Basic Line Plot")
fig1.write_html("test_basic.html")

# Test Plotly Express
df = px.data.gapminder().query("continent=='Europe'")
fig2 = px.line(df, x="year", y="lifeExp", color="country")
fig2.update_layout(title="Life Expectancy in Europe")
fig2.write_html("test_express.html")

# Test 3D plotting
z_data = np.random.rand(20, 20)
fig3 = go.Figure(data=go.Surface(z=z_data))
fig3.update_layout(title="3D Surface Plot")
fig3.write_html("test_3d.html")

# Test static image export
fig1.write_image("test_export.png")

print("All tests completed successfully!")

   Run this script and check that all output files are created correctly:
$> python test_plotly.py
$> ls -la test_*.html test_export.png

   Open the HTML files in your browser to verify interactivity. If all visualizations render correctly
   and the script completes without errors, your Plotly installation is working properly.

Maintenance and Updates
$> Keeping your Plotly installation up-to-date ensures access to new features and bug fixes:
pip install --upgrade plotly

   To update all related packages:
$> pip install --upgrade "plotly[all]"

   When updating, check the changelog for breaking changes that might affect your existing
   visualizations. Major version updates (e.g., 4.x to 5.x) often introduce API changes that require
   code adjustments.

   For critical projects, consider using a requirements file with pinned versions:
plotly==5.14.1
kaleido==0.2.1
pandas==2.0.1

   This ensures consistent behavior across different environments and makes it easy to reproduce your
   setup if needed.

   Congratulations! You have successfully installed Plotly. Thanks for using this tutorial for
   installing the Plotly on Debian 12 "Bookworm" system. For additional or useful information, we
   recommend you check the official Plotly website.


---

