filename: qemu-install-on-linux-multif-20251015.txt
https://kskroyal.com/how-to-install-qemu-kvm-on-linux/

How to Install QEMU KVM on Linux: Step-by-Step Guide
October 25, 2024

   If you're interested in running virtual machines on Linux with near-native performance, QEMU KVM is a
   powerful tool to achieve this. In this guide, we'll cover the essential steps to properly install
   QEMU KVM, a Type 1 hypervisor that interacts directly with your machine's hardware. Follow this guide
   to optimize your Linux system for virtual machines with KVM.

Verify CPU Virtualization Support
   To run virtual machines on Linux with KVM, your CPU must support hardware virtualization. Here's how
   to check:

   Check Virtualization Capabilities
   Run the following command to verify your CPU's support:
$> lscpu | grep -i Virtualization
     * If your CPU supports virtualization, you'll see VT-x for Intel CPUs or AMD-V for AMD processors.
     * If nothing appears, hardware virtualization may need to be enabled in your BIOS settings.

Ensure Kernel KVM Module Support
   Next, make sure your Linux kernel includes KVM modules. The command differs depending on your
   distribution:

   Arch Linux:
$> zgrep CONFIG_KVM /proc/config.gz

   Other Linux Distributions:
$> CONFIG_KVM /boot/config-$(uname -r)

Update Your System
   It's best to start with a fully updated system.
     * For Arch Linux Users: sudo pacman -Syu
     * Install Yay for AUR Packages (Arch Only)
       If you're using Arch Linux, you'll need Yay to install additional packages. Run these commands in
       order.
     * sudo pacman -S --needed base-devel git
     * git clone https://aur.archlinux.org/yay.git
     * cd yay
     * makepkg -si

Install QEMU, KVM, and Dependencies
   Once Yay is set up, install the QEMU/KVM suite along with Libvirt, Virt-Manager, and other necessary
   packages.
     * On Arch Linux:
$> sudo pacman -S qemu-full qemu-img libvirt virt-install virt-manager virt-viewer edk2-ovmf swtpm \
                  guestfs-tools libosinfo

     * Install TuneD for Performance Optimization (Only ARCH)
       TuneD is a system tuning service useful for optimizing KVM. Install it with: yay -S tuned

     * On Debian or Ubuntu:
$> sudo apt install qemu-system-x86 libvirt-daemon-system virtinst virt-manager virt-viewer ovmf swtpm \
                    qemu-utils guestfs-tools libosinfo-bin tuned

     * Fedora:
$> sudo dnf install qemu-kvm libvirt virt-install virt-manager virt-viewer edk2-ovmf swtpm qemu-img \
                    guestfs-tools libosinfo tuned

Enable and Start Libvirt Daemon
   Libvirt is essential for managing virtual machines. Enable and start the libvirt service:
$> sudo systemctl enable libvirtd.service
$> sudo systemctl start libvirtd.service

Optimize Host Performance with TuneD
   To maximize KVM's efficiency, TuneD provides pre-configured profiles for different workloads.
    1. Enable TuneD: sudo systemctl enable --now tuned
    2. Check Current Profile: tuned-adm active
    3. By default, it may show as balanced. To improve VM performance, switch to
       the virtual-host profile:
    4. List Available Profiles: tuned-adm list
    5. Set the Virtual Host Profile: sudo tuned-adm profile virtual-host
    6. Restart the System

Configure Network Bridge
   By default, virtual machines are connected to a NAT network. You may need to manually activate this
   network.
     * Check Network Status:
$> sudo virsh net-list --all

     * Start and Enable Autostart for Default Network:
$> sudo virsh net-start default
$> sudo virsh net-autostart default

Conclusion
   Congratulations! You have successfully installed and configured QEMU KVM on Linux. You can now create
   virtual machines with Virt-Manager and experience nearly native performance.


---
https://wiki.debian.org/QEMU

QEMU

   QEMU is a fast processor emulator using dynamic translation to achieve good emulation speed. It
   is a free open-source alternative to VMware.

   As QEMU requires no host kernel patches to run, it is very safe and easy to use.

Operation
   QEMU has two operating modes:
     * Full system emulation. In this mode, QEMU emulates a full system (for example a PC), including a
       processor and various peripherals. It can be used to launch different Operating Systems without
       rebooting the PC or to debug system code.
     * User mode emulation (Linux host only). In this mode, QEMU can launch Linux processes compiled for
       one CPU on another CPU. For example, it can be used to launch Wine or to ease
       cross-compilation and cross-debugging.

   Furthermore, there are two options for running QEMU:
-----------------------------------------------------------------------------------------------------
                 Pros                              Cons
-----------------------------------------------------------------------------------------------------
QEMU (plain)     Doesn't require a kernel module   Not as fast as the others
QEMU / kvm       Fastest                           Requires the kvm module
                                                   + x86 and ARM CPU w/ virtualization extensions
                                                   + granting the user R/W access to /dev/kvm
-----------------------------------------------------------------------------------------------------

Installation
   The QEMU emulator is packaged as per-CPU-type packages:
$> sudo apt install qemu-utils qemu-system-x86 qemu-system-gui

Usage
Setting up a stable system
   Debian developer Aurelien Jarno maintains a list of ready-to-use Debian stable QEMU images at
   http://people.debian.org/~aurel32/qemu (but as of 2020-07-22, there is no update since 2015).

Setting up a testing/unstable system
   QEMU is especially handy to set up an emulated testing/unstable system when working on the Debian
   installer itself or on the boot system, or when trying some experimental features without impact on
   the productive system. A sid system can be set up with the following steps:

     * Create the hard disk image with:
$> qemu-img create debian.img 2G

       If you're installing a desktop environment, you'll need more than 2G.
       https://www.debian.org/releases/stable/amd64/apds02.en.html
       or with the qcow2 disk image format if you want to use QEMU's own "Copy On Write" image format:
$> qemu-img create -f qcow2 debian.qcow 2G

     * Download a current boot image, e.g. the businesscard image at
       http://cdimage.debian.org/cdimage/daily-builds/daily/arch-latest/amd64/iso-cd/
$> wget  https://cdimage.debian.org/cdimage/daily-builds/daily/arch-latest/amd64/iso-cd/debian-testing-amd64-netinst.iso

     * Boot the image with:
$ qemu-system-x86_64 -hda debian.img -cdrom debian-testing-amd64-netinst.iso -boot d -m 512

     * If you have KVM, you can use it by including the option -enable-kvm.
     * When the usual debian boot screen appears, boot into "expert" mode.
     * Install the system as usual; to set up a sid system choose "unstable" when being asked by the
       installer.

   After the installation is done, the system can be booted with:
$> qemu-system-x86_64 -hda debian.img -m 512

Backing up the disk image
   The disk image "debian.img" is a sparse file. After installing a Debian base system, it fits on a
   CD-ROM even without compression:
$> tar c --sparse -f backup.tar debian.img

   This creates a tar file of about 320M (supposed that the image contains a 1.9GB ext3 root
   filesystem and a 250MB swap partition). After unpacking with tar xf, the sparse file is restored and
   can be booted immediately.

   Better still, convert from a sparse file into the qemu's own "Copy On Write" image. This conversion
   will save the same space and still be runnable:
$> qemu-img convert -c debian.img -O qcow debian_recompressed.img

   If the guest system's image is still larger than reasonable, then open up the Guest system and run
   "dd if=/dev/zero of=/tmp/junk ; sync ; rm /tmp/junk". That will push out deleted file scraps,
   recompression should work then.

Networking

Guests on NATed internal network
   By default, QEMU invokes the -nic and -user options to add a single network adapter to the guest and
   provide NATed external Internet access. The host and guest will not see each other.

Host and guests on same network
   To create a bridge between host and guests, do the following (tested on DebianSqueeze). Please
   note that all these changes must be done on the host system.
    1. Install bridge-utils.
    2. Edit /etc/network/interfaces:
         a. Remove the 'auto' line and change the 'method' of your physical, wired network adapters from
            'auto' to 'manual':
#auto eth0
iface eth0 inet manual

         b. Add a stanza for the bridge:
auto br0
iface br0 inet dhcp
   pre-up ip tuntap add dev tap0 mode tap user <username>
   pre-up ip link set tap0 up
   bridge_ports all tap0
   bridge_stp off
   bridge_maxwait 0
   bridge_fd      0
   post-down ip link set tap0 down
   post-down ip tuntap del dev tap0 mode tap

       Explanation: this stanza auto loads a bridge and configures it using DHCP. A tap device is
       created owned by <username> and is brought up; please note that <username> is the username on the
       host system. On the 'bridge_ports' line, 'all' adds all physical interfaces to the bridge;
       virtual interfaces have to be listed explicitly. The three other bridge directives will speed up
       the activating of the bridge. See bridge-utils-interfaces(5) - note that the man page warns
       against adding wireless adapters to the bridge (see also BridgeNetworkConnections).

    3. Launch QEMU:
$> $> qemu-system-x86_64 -hda imagefile.img -net nic -net tap,ifname=tap0,script=no,downscript=no
          + ifname=tap0 - the tap name here corresponds with the name in the bridge stanza above.
          + script=no,downscript=no disable the scripts /etc/qemu-ifup and /etc/qemu-ifdown as they are
            not needed.

       The guest virtual network adapters will be configured by the /etc/network/interfaces file in the
       guest file system. DHCP will work so this is simplest way to go.

    4. To run additional guests, duplicate the lines in the bridge stanza for tap1, tap2 as needed and
       change the ifname argument in the command line. If you run more guests from the same image file,
       udev will rename the interface to avoid duplication (e.g. eth0 => eth1), so add extra interface
       stanzas in the guest interfaces file to configure these.

QEMU networking with VDE
   Virtual Distributed Ethernet (VDE) provides is a virtual switch that can connect multiple virtual
   machines together, both local and remote. With VDE it is possible to create a virtual network of QEMU
   machines running on one or more real computers.
    1. Install vde2 and uml-utilities (for tunctl).
    2. Add users which will be running VM's to the vde2-net group.
    3. Add to /etc/network/interfaces:
auto mytap
iface mytap inet static
    address 10.0.3.1
    netmask 255.255.255.0
    vde2-switch -t mytap

    4. If automatic configuration of guest network interfaces is desired, install a DHCP server such as
       dnsmasq as well. Configure it to assign addresses only on the TAP interface (e.g. 'mytap' in
       the above example). If you use dhcpd, make sure mytap is added to /etc/default/dhcp3-server and
       the INTERFACES directive. anm

    5. Either reboot or run the following:
# modprobe tun
# ifup mytap
# /etc/init.d/dnsmasq restart #if used
$> newgrp vde2-net #run as user starting Qemu VM's

    6. Finally, start the VM:
$> qemu-system-x86_64 -net nic -net vde,sock=/var/run/vde2/mytap.ctl debianimage.img

       If running more than one VM, you need to provide a unique MAC address:
$> qemu-system-x86_64 -net nic,macaddr=52:54:00:12:01:00 -net vde,sock=/var/run/vde2/mytap.ctl debianimage.img
       (in DebianLenny, vdeqemu was needed for running qemu with VDE, but recent versions of qemu
       has vde enabled already.) If copying a MAC address from an existing interface, make it unique by
       altering any of the last 6 digits at the end. The first 6 designate the card manufacturer and so
       should not be made up. If running kvm instead of QEMU, the command name is 'vdekvm'.

    7. QEMU VM's networked under VDE are not automatically NATed as they are under QEMU's default User
       Mode networking. For guest external network access you must enable NAT/Masquerading via iptables.
       An iptables rules-building program such as shorewall makes this easier. You may also use
       NAT/Masquerade script from tldp

   More info on VDE:
     * [http://sourceforge.net/forum/forum.php?forum_id=330526]VDE Forum
     * [http://wiki.virtualsquare.org/]VDE wiki

Other

Mounting QEMU images
   <!> Never mount a QEMU image while QEMU is using it, or you are likely to corrupt the filesystem(s)
   within.

raw
   Linux and other Unix-like hosts can mount images created with the raw format type using a loopback
   device. From a root login (or using sudo), mount a loopback with an offset of 32,256:
#> mount -o loop,offset=32256 /path/to/image.img /mnt/mountpoint

   For example, to copy some files across to a FreeDOS hard drive image:
#> mkdir -p /mnt/freedos
#> mount -o loopback,offset=32256 freedos-c.img /mnt/freedos
#> cp oldgames /mnt/freedos
#> umount /mnt/freedos

   Note: if you have an image without partitions you should omit the ,offset=32256 part. This is for
   instance the case if you want to mount linux-0.2.img (which can be found at the QEMU web site at the
   time of writing).

qcow2
   You will need a 2.6.26 kernel or newer, so Lenny will do. Load the ndb module:
#> modprobe nbd max_part=8

   If you leave off the max_part attribute, partitions are not supported and you'll be able to access
   the disk, but not have device nodes for any of the partitions.

   Assuming your qcow2 image filename is imagename.qcow, run:
#> kvm-nbd --connect=/dev/nbd0 imagename.qcow

   Now you can check the partition table with:
#> fdisk -l /dev/nbd0

   and mount, e.g., the first partition on /mnt with:
#> mount /dev/nbd0p1 /mnt


---
https://linuxconfig.org/setting-up-virtual-machines-with-qemu-kvm-and-virt-manager-on-debian-ubuntu

Setting Up Virtual Machines with QEMU, KVM, and Virt-Manager on Debian/Ubuntu
16 February 2024

Virtualization technology has become an indispensable tool in software development, testing, and deployment.
It allows you to run multiple virtual machines (VMs) on a single physical machine, each with its own isolated
operating system and resources. This tutorial focuses on setting up a virtualization environment on Debian or
Ubuntu Linux using QEMU, KVM (Kernel-based Virtual Machine), and Virt-Manager.

Step-by-Step Guide to Virtualization with QEMU, KVM, and Virt-Manager
Before diving into the steps, it’s important to understand the roles of QEMU, KVM, and Virt-Manager. QEMU is
an open-source machine emulator and virtualizer that allows you to run operating systems and software designed
for a different architecture. KVM is a virtualization module in the Linux kernel that allows the kernel to
function as a hypervisor. Lastly, Virt-Manager is a graphical interface for managing virtual machines
through libvirt.

Update Your System: Ensure that your Debian or Ubuntu system is up-to-date to avoid any compatibility
issues during the installation of virtualization tools. Run the following commands in a terminal:
$> sudo apt update
$> sudo apt upgrade

This step updates the list of available packages and their versions and then installs the newest versions of
the packages currently installed on your system.  Install QEMU and Virt-Manager: Install QEMU, KVM, and
Virt-Manager to set up your virtualization environment. These tools will allow you to create and manage
virtual machines with ease. Execute the following command:
$> sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager

This command installs all necessary packages, including QEMU for emulation, KVM for hardware acceleration,
libvirt daemon for managing VMs, libvirt clients for command-line interaction, bridge-utils for network
bridging, and Virt-Manager for graphical management.  Add Your User to Necessary Groups: To manage virtual
machines without root privileges, add your user to the ‘libvirt’ and ‘kvm’ groups by running:
$> sudo adduser $USER libvirt
$> sudo adduser $USER kvm

Log out and back in for the group changes to take effect. This step is crucial for enabling non-privileged
access to VM management functionalities.  Verify Installation: Check that the libvirt service is running with:
$> sudo systemctl status libvirtd

If it’s not running, start and enable it at boot with:
$> sudo systemctl start libvirtd
$> sudo systemctl enable libvirtd

This step ensures that the libvirt daemon is active and set to start automatically on boot, which is necessary
for managing virtual machines.  Launch Virt-Manager: Open Virt-Manager either from your applications menu or
by executing the following command in a terminal:
$> virt-manager

Virt-Manager provides a user-friendly graphical interface for creating, configuring, and managing virtual
machines. It simplifies the process of VM management, making it accessible even to those new to
virtualization.  Create a New Virtual Machine: In Virt-Manager, click on the “Create a new virtual machine”
button. Follow the wizard to select the installation method (ISO image, network installation, or importing
existing disk), allocate resources (CPU, memory, disk space), and complete the setup by installing the
operating system.  Using Your Virtual Machine: Once the operating system installation is complete, you can
start, stop, pause, and configure your virtual machine settings through Virt-Manager. Additionally, you can
connect to the VM’s console to interact with it directly.

Advanced Tips and Tricks for Virtualization with QEMU, KVM, and Virt-Manager
After setting up your virtualization environment with QEMU, KVM, and Virt-Manager, there are several advanced
features and best practices you can employ to enhance your virtual machine management and performance. Here
are some tips and tricks to help you get the most out of your virtualized setup.

Utilizing QEMU Guest Agent
The QEMU Guest Agent facilitates improved communication between the host and the guest VMs, enabling
functionalities such as file transfers, graceful shutdowns, and system information queries. To take advantage
of these features, install the guest agent in your VMs:
$> sudo apt install qemu-guest-agent

Once installed, make sure the guest agent service is enabled and running within your VMs for enhanced
performance and management capabilities.

Mastering Snapshots
Snapshots are a powerful feature that allows you to save the state of a VM at any given point in time. This is
incredibly useful for testing software or updates without risking your primary system state. To create a
snapshot in Virt-Manager, select your VM, click on the “Snapshots” section, and then “Take Snapshot”. Always
ensure you have enough disk space available before taking snapshots to avoid performance degradation.

Keyboard Shortcuts and Sending Keys
Virt-Manager provides keyboard shortcuts for common actions such as sending the ‘Ctrl+Alt+Delete’ command to a
VM. This can be done through the VM’s menu in Virt-Manager. Familiarizing yourself with these shortcuts can
significantly streamline your workflow.

Attaching USB Devices
To attach USB devices directly to a VM, go to the VM’s hardware details in Virt-Manager, add a USB host
device, and select the device you wish to attach. This is particularly useful for software testing on
different operating systems or accessing data stored on external drives directly within your VM.

Command-Line Administration
While Virt-Manager provides a user-friendly GUI for managing VMs, knowing how to perform tasks from the
command line can be invaluable, especially for remote administration or scripting. Here are some basic
commands:

    List all running VMs:
$> sudo virsh list --all

    Start a VM:
$> sudo virsh start vm_name

    Shutdown a VM:
$> sudo virsh shutdown vm_name

    Get VM information:
$> sudo virsh dominfo vm_name

These commands offer a glimpse into the powerful administration capabilities available directly from the
command line.

Networking Tips
Networking in virtualized environments can be complex. Using Virt-Manager, you can easily set up different
types of network connections for your VMs, such as NAT (Network Address Translation) for isolated networks or
bridged connections for full network integration. Experiment with different setups to find what best suits
your needs.

Performance Optimization
Lastly, to ensure optimal performance of your VMs, consider allocating resources (CPU and memory) based on the
workload. Overprovisioning can lead to system instability and underperformance. Additionally, using Virtio
drivers for disk and network interfaces can significantly improve the performance of Linux guests.

By leveraging these advanced features and tips, you can maximize the efficiency and productivity of your
virtualization environment on Debian or Ubuntu systems, making it a powerful asset for development, testing,
or any other use case.

Conclusion
By following these steps, you have successfully set up a virtualization environment on your Debian or Ubuntu
system using QEMU, KVM, and Virt-Manager. Virtualization offers a flexible and efficient solution for running
multiple operating systems and applications on a single hardware platform, enhancing your development,
testing, and deployment workflows. With Virt-Manager, managing your virtual machines becomes a straightforward
process, allowing you to focus on your projects rather than the complexities of virtualization technology.

Frequently Asked Questions (FAQs) on Virtualization with QEMU, KVM, and Virt-Manager
1. Can I run Windows VMs on Linux using QEMU and KVM?
    Yes, you can run Windows as a virtual machine on Linux using QEMU and KVM, with Virt-Manager facilitating
    the setup and management process.

2. How do I enable hardware acceleration for VMs?
    Hardware acceleration is automatically enabled when you use KVM as your hypervisor. Ensure your CPU
    supports virtualization extensions (VT-x for Intel and AMD-V for AMD processors) and that they are enabled
    in the BIOS.

3. Can I migrate a VM from one host to another with Virt-Manager?
    Yes, Virt-Manager supports migrating VMs from one host to another, provided both hosts are configured with
    compatible virtualization technologies and network settings.

4. How do I backup a virtual machine?
    You can backup a VM by creating a snapshot or exporting the VM to an image file using Virt-Manager or the
    virsh command-line tool.

5. Is it possible to automate VM creation with scripts?
    Yes, you can automate VM creation using virsh commands in scripts or by using libvirt’s API for more
    complex automation tasks.

6. How can I improve the graphical performance of VMs?
    To improve graphical performance, use Virtio drivers for the video and display settings and consider
    allocating more video memory to the VM.

7. Can I use Virt-Manager on a headless server?
    Yes, you can use Virt-Manager on a headless server by connecting to it remotely via SSH with X11
    forwarding or by using a web-based solution like Kimchi.

8. How do I resize a VM’s disk space?
    You can resize a VM’s disk space by first enlarging the disk image file with qemu-img and then resizing
    the filesystem within the VM.

9. Can I restrict network access for a VM?
    Yes, you can configure network filters with libvirt to restrict network access for a VM, or use network
    isolation techniques such as creating a VLAN.

10. How do I clone a VM?
    You can clone a VM using Virt-Manager’s clone feature or by manually copying the disk image and creating a
    new VM with the same configuration.

11. What is the best way to share files between host and VM?
    The best way to share files between host and VM is through shared folders using Virt-Manager or by setting
    up a network share.

12. Can I run a 64-bit VM on a 32-bit host?
    No, running a 64-bit VM requires a 64-bit processor and a 64-bit host operating system.

13. How can I access a VM’s console remotely?
    You can access a VM’s console remotely using Virt-Manager connected via SSH or by using remote desktop
    protocols like VNC or SPICE.

14. Is it possible to limit a VM’s CPU usage?
    Yes, you can limit a VM’s CPU usage by setting CPU limits in the VM’s configuration settings in
    Virt-Manager or via the virsh command-line tool.

15. How do I install drivers for Windows VMs?
    For Windows VMs, you can install drivers from the Virtio driver ISO provided by the Fedora Project to
    improve performance for disk and network operations.

16. Can I convert a physical machine to a virtual machine?
    Yes, you can convert a physical machine to a VM using tools like virt-p2v, which creates an image of the
    physical machine that can be run as a VM.


---

