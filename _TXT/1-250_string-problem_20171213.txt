filename: 1-250_string-problem_20171213.txt
https://www.quora.com/Heres-a-string-with-numbers-from-1-250-in-random-order-but-its-missing-one-number-How-will-you-find-the-missed-number-1

   Here's a string with numbers from 1-250 in random order, but it's missing one number. How will you
   find the missed number?

***
The string was given in the comments:

24917718421554902231163513596243123645286110143782201682354121946247140167117133198144281773713723224833567751
7513821213812018915616178169180422057425055702049257200441752021649520319463179155401482271358391661117611818
1761991852462261121478719643191224712292313285231602286724282211822110723647121682447518115023912171291821491
9109237986523315321472151252221704941901462161021611829718320610062163276169197915821314172240136228321719208
3414111920188116842613237131811954516213053245241210105361242183110491312860155099247920710123810311423018722
89102126931061741129193139134341491423011512712511380881921451541731651085920912215220148

With this hint:
Its length is 640, composed of 45 0's, 155 1's, 106 2's, 55 3's, 55 4's, 46 5's, 43 6's, 45 7's, 45 8's, and
45 9's.

The quickest and easiest way to find the missing letter is to notice differences in the number counts.
Here are some observations that can be made:
- There are 9+90*2+151*3=642 digits from 1 to 250, but the string only has 640 digits. Thus, the missing number
  has 2 digits

- The numbers are from 1 to 250, meaning that it must be identical for digits between 6 and 9. However, we’re
  given that there are 43 6’s, and 45 of the other numbers.

Combining these 2 facts, the missing number is 66.

***
Here is the full string 1 1 to 250 250 in order:

12345678910111213141516171819202122232425262728293031323334353
63738394041424344454647484950515253545556575859606162636465666
76869707172737475767778798081828384858687888990919293949596979
89910010110210310410510610710810911011111211311411511611711811
91201211221231241251261271281291301311321331341351361371381391
40141142143144145146147148149150151152153154155156157158159160
16116216316416516616716816917017117217317417517617717817918018
11821831841851861871881891901911921931941951961971981992002012
02203204205206207208209210211212213214215216217218219220221222
22322422522622722822923023123223323423523623723823924024124224
3244245246247248249250 3244245246247248249250

It has: 45 zeros, 155 ones, 106 twos, 55 threes, 55 fours, 46 fives, 45 sixes, 45 sevens, 45 eights and
45 nines.

Now to your string:

24917718421554902231163513596243123645286110143782201682354121
94624714016711713319814428177371372322483356775157513821213812
01891561617816918042205742505570204925720044175202164952031946 
31791554014822713583916611176118186176199185246226112147871964
31912247122923132852316022867242822118221107236471216824475181
15023912171291821491591092379865233153214721512522217049419014
62161021611829718320610062163276169197915821314172240136228321
71920823414111920188116842613237131811954516213053245241210105
36124218311049131286015509924792071012381031142301872258910212 
69310617411291931391343414914230115127125113808819214515417316
51085920912215220148 51085920912215220148

It has: 45 zeros, 155 ones, 106 twos, 55 threes, 55 fours, 46 fives, 43 sixes, 45 sevens, 45 eights and
45 nines.

Two sixes are missing, so it is missing 66 66. But I couldn’t order the rest of the string:
Does it start with 249 249 and 1 1 or 24 24 and 91 91? Are numbers split up or not? It would a wild guess.
Also if it weren’t all identical digits that were missing than I could only find it if go through the numbers
and just hope that 1 1 digits numbers are together and the numbers are are not split. Than we could scan the
string and look for the first appearance of the 2 2 possibilities appearing the other one is missing.

Of course all of this wouldn’t be possible without a PC so here the counting function (Python):
1 def amounts(li):
2     dic={}
3     for l in li:
4         if l in dic.keys():
5             dic[l]+=1
6         else:
7             dic[l]=1
8     return dic


To generate the full ordered string just use:
1oneTo250o="".join([str(i) for i in range(1, 251)])

Update I started counting from 0. I have corrected that, now I start counting from 1.

***

In[3]:= dataset = 
 Interpreter[DelimitedSequence["Integer"]][
 "2491771842155490223116351359624312364528611014378220168235412194624\
7140167117133198144281773713723224833567751575138212138120189156161781\
6918042205742505570204925720044175202164952031946317915540148227135839\
1661117611818617619918524622611214787196431912247122923132852316022867\
2428221182211072364712168244751811502391217129182149159109237986523315\
3214721512522217049419014621610216118297183206100621632761691979158213\
1417224013622832171920823414111920188116842613237131811954516213053245\
2412101053612421831104913128601550992479207101238103114230187225891021\
2693106174112919313913434149142301151271251138088192145154173165108592\
0912215220148"]

Count the number of each digit
In[50]:= Flatten[Table[DigitCount[dataset, 10, i], {i, 0, 9}]]
Out[50]= {45, 155, 106, 55, 55, 46, 43, 45, 45, 45}

Create a similar integer list 1-250:
In[53]:= comparisonset = Flatten[IntegerDigits[Table[i, {i, 1, 250}]]]
Out[53]= {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, \
 ... 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 6, 2, 4, 7, 2, 4, 8, 2, 4, 9, 2, 5,0}

And count the digits
In[49]:= Table[
 DigitCount[FromDigits[comparisonsetdigits], 10, i], {i, 0, 9}]
Out[49]= {45, 155, 106, 55, 55, 46, 45, 45, 45, 45}

Compare the frequency tables:
Constructed set: Out[50]= {45, 155, 106, 55, 55, 46, 43, 45, 45, 45}
1-250 set Out[49]= {45, 155, 106, 55, 55, 46, 45, 45, 45, 45}
Digits {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

The constructed set is missing two '6' so the single missing number is 66.

Brute force

***
Run .sort() on the string.
Sully out how many occurences of each numeral happens in the set, ranging from 1–250.

By virtue of deduction of which numerals are missing, i can deduct down to a range of wether it’s in the range
of 1–9, 10–99, 100–250.

The problem occurs, in terms of mirror pairs, akin to 14 contra 41.
But if we break down the amount of occurences in terms of each respective mirror pair, we can then run a regex
on the ORIGINAL string.

We can deduct how many times, said number, SHOULD occur, in thoose matchings.. (There ought to be a max roof,
in terms of Max probability in terms of Number complexity contra Chanse to occur)

If that specific numeral, that we run against, occurs too little to be statistically true that it would be
derivating from the P norm..

We’d have to run comparative analysis of the outcome of the frequency and derivative nature of the P numeral,
for both numbers. (both of the mirror numbers)

It would, statistically, be that number, that derived the most.

Although, we could run the simulation until it just happens to be 100% certain, or close to.

ASSUMING, that the randomness, does not apply, to the idea of, say, 250 being represented by 025 (which it
cannot, that would break the rules of numeral representation to begin with..)


***
Assuming that the numbers are ( 1,2,3,•••••, 250 ) put in some random order with one number missing , I would
calculate the sum of the arithmetic sequence , then add the string of numbers , subtract the sum of the random
numbers from the sum of the arithmetic sequence and the result would be the missing number.
