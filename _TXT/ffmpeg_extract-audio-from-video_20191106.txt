filename: ffmpeg_extract-audio-from-video_20191106.txt
https://www.linuxuprising.com/2019/11/ffmpeg-extract-audio-from-video-in.html

FFmpeg: Extract Audio From Video In Original Format Or Converting It To MP3 Or Ogg Vorbis

   This article explains how to use [20]FFmpeg to extract the audio stream from a video, either without
   re-encoding (keeping the original format), or converting the resulting audio file to CBR (constant
   bitrate) or VBR (variable bitrate) MP3 or Ogg Vorbis.
   To use the FFmpeg examples / commands below, you'll need to have FFmpeg installed on your system.
   Optionally also install libmp3lame for converting to mp3, and libvorbis for converting the extracted
   audio to Ogg Vorbis.
   To extract the audio from a video, and keep the original audio format, the first thing you'll want to
   do is check what's the original audio format so you know what file extension to use, by using ffprobe
   (part of the FFmpeg package):
ffprobe myvideo.mp4

   Replace myvideo.mp4 with the video filename (and path if the video is not in the current folder).
   Near the end of this command's output you should see the audio stream, e.g.:
...............
Duration: 00:04:19.47, start: 0.000000, bitrate: 1261 kb/s
Stream #0:0: Video: h264 (Main), yuv420p(tv, bt709, progressive), 1280x720 [SAR 1:1 DAR 16:9], 25 fps, 25 tbr,
 1k tbn, 50 tbc (default)
Metadata:
HANDLER_NAME : VideoHandler
DURATION : 00:04:19.440000000
Stream #0:1(eng): Audio: vorbis, 44100 Hz, stereo, fltp (default)
Metadata:
DURATION : 00:04:19.467000000

   Now that you know the original audio format, extract the audio from the video without re-encoding it
   using:
ffmpeg -i myvideo.mp4 -vn -acodec copy audio.ogg

   Replace myvideo.mp4 with the video filename/path, and audio.ogg with the name you want to use for the
   audio output filename, and the extension.
   In this command, -i is used to specify the path and filename of the input video, -vn skips the
   inclusion of the video stream, while -acodec copy is for copying the original audio (without
   re-encoding).
   Extract only a portion of the audio from a video, using the same audio format used by the original
   source:
ffmpeg -i myvideo.mp4 -ss 00:00:00 -t 00:00:00.0 -vn -acodec copy audio.ogg

   -ss is the start of the extracted audio timestamp, and -t is the audio duration.
   For example, to extract 30 seconds of audio starting 2 minutes into the video, and use the same audio
   codec as the original source:
ffmpeg -i myvideo.mp4 -ss 00:02:00 -t 00:00:30.0 -vn -acodec copy audio.ogg

   Since mp3 can't contain a video stream, to extract audio from video and covert it to mp3 it's enough
   to use (skip adding -vn):
ffmpeg -i myvideo.mp4 audio.mp3

   FFmpeg normally audo-detects the output format from the extension you enter for the output files, so
   specifying the format/codec is not needed in most cases. But if you do want to specify the codec, add
   -codec:a libmp3lame to convert to mp3:
ffmpeg -i myvideo.mp4 -codec:a libmp3lame audio.mp3

   Extract audio from video, converting the extracted audio to mp3, and specifying a constant audio
   bitrate (CBR) quality:
ffmpeg -i myvideo.mp4 -b:a BITRATE audio.mp3

   Replace BITRATE with these available CBR options: 8k, 16k, 24k, 32k, 40k, 48k, 64k, 80k, 96k, 112k,
   128k, 160k, 192k, 224k, 256k, or 320k.
   Extract audio from video, converting the audio to mp3 with variable bitrate encoding:
ffmpeg -i myvideo.mp4 -codec:a libmp3lame -q:a QUALITY audio.mp3

   Specify the QUALITY in the 0-9 range, where 0 is best, 9 is worst, and 4 is the default value. A
   table presenting each FFmpeg VBR option is [22]available here.
   Extract audio from a video, using Ogg as the resulting container (it should auto-detect Vorbis as the
   audio format), with variable bitrate (VBR):
ffmpeg -i myvideo.mp4 -vn -q:a QUALITY audio.ogg

   The QUALITY range is -1.0 to 10.0, with 10.0 being the highest quality, and 3 being default (with a
   target of 112kbps). [**1][https://trac.ffmpeg.org/wiki/Encode/MP3]See this page for details on setting
   the Ogg Vorbis VBR quality. In the rare case in which FFmpeg fails to auto-detect the codec, specify
   libvorbis using -codec:a, like this:
ffmpeg -i myvideo.mp4 -vn -codec:a libvorbis -q:a QUALITY audio.ogg

   In some cases you may want to batch convert multiple videos to audio. Check out this example of batch
   processing (adapt this to your exact needs) in which all mp4 videos in the current folder are
   converted to mp3 with a variable bitrate profile value of 3, with the file name the same as the
   original video but with mp3 as the file extension:
for i in *.mp4; do ffmpeg -i "$i" -codec:a libmp3lame -q:a 3 "${i%.*}.mp3"; done


---
[**1]
https://trac.ffmpeg.org/wiki/Encode/MP3

FFmpeg MP3 Encoding Guide
This page describes how to use the external libmp3lame encoding library within
ffmpeg to create MP3 audio files (ffmpeg has no native MP3 encoder). See also
other codecs you could use, and FFmpeg AAC Encoding Guide if you want AAC
instead, and the ​official documentation.

VBR Encoding
Example to encode VBR MP3 audio with ffmpeg using the libmp3lame library:

ffmpeg -i input.wav -codec:a libmp3lame -qscale:a 2 output.mp3

Control quality with -qscale:a (or the alias -q:a). Values are encoder
specific, so for libmp3lame the range is 0-9 where a lower value is a higher
quality. 0-3 will normally produce transparent results, 4 (default) should be
close to perceptual transparency, and 6 produces an "acceptable" quality. The
option -qscale:a is mapped to the -V option in the standalone lame command-line
interface tool.

--------------------------------------------------------------------------------------------------------------
                             LAME Bitrate Overview
--------------------------------------------------------------------------------------------------------------
lame option Average kbit/s  Bitrate range kbit/s        ffmpeg      option
--------------------------------------------------------------------------------------------------------------
-b 320      320             320 CBR (non VBR) example   -b:a 320k   (NB this is 32KB/s, or its max)
-V 0        245             220-260                     -q:a 0      (NB this is VBR from 22 to 26 KB/s)
-V 1        225             190-250                     -q:a 1
-V 2        190             170-210                     -q:a 2
-V 3        175             150-195                     -q:a 3
-V 4        165             140-185                     -q:a 4
-V 5        130             120-150                     -q:a 5
-V 6        115             100-130                     -q:a 6
-V 7        100             80-120                      -q:a 7
-V 8        85              70-105                      -q:a 8
-V 9        65              45-85                       -q:a 9
--------------------------------------------------------------------------------------------------------------

In our example above, we selected -qscale:a 2, meaning we used LAME's option -V
2, which gives us a VBR MP3 audio stream with an average stereo bitrate of
170-210 kBit/s.

CBR Encoding
If you need constant bitrate (CBR) MP3 audio, you need to use the -b:a option
instead of -qscale:a. Here you can specify the number of bits per second, for
example -b:a 256k if you want 256 Kbit/s (25.6 KB/s) audio. Available options
are: 8, 16, 24, 32, 40, 48, 64, 80, 96, 112, 128, 160, 192, 224, 256, or 320
(add a k after each to get that rate). So to get the highest quality setting
use -b:a 320k (but see note below).

Note: Using -b:a 320k is generally considered wasteful because:

  * -q:a 0 – -q:a 3 will normally produce transparent results.
  * MP3 is lossy anyway, so if you really want the highest quality use a
    lossless format such as FLAC.

See ​Hydrogen Audio: Recommended LAME Encoder Settings for more info.

ABR Encoding
ABR is something of a mixture between VBR and CBR, see the ​official
documentation for details on use.

Troubleshooting
Sometimes the output will consist of fewer bits per second than requested:

  * With CBR it could be due to the chosen value being in-between allowable
    settings (it defaults down to the next lower acceptable bitrate).
  * With VBR it could be due to the input already in being a lower bitrate than
    requested, in which case, it basically just re-encodes it at the bitrate of
    the input.
  * Or possibly that the input was CBR, and the VBR aspect is able to reduce
    bitrate by a considerable amount.

Also see
  * ​FFmpeg Codecs Documentation for libmp3lame
  * ​Hydrogen Audio: Recommended LAME Encoder Settings


---
