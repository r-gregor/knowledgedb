filename: fastest-algorithm-to-find-the-largest-number-in-an-unsorted-array_20190103.txt
https://www.quora.com/What-is-the-fastest-algorithm-to-find-the-largest-number-in-an-unsorted-array

What is the fastest algorithm to find the largest number in an unsorted array?

I have considered your question carefully, and I have labored over the past 14 years to give you this answer:
<code>
 include <iostream>
 include <vector>
 include <limits>
 
 sing namespace std;
 ypedef double number_t;
 ypedef std::vector< number_t > array_t;
 
 umber_t find_smallest( const array_t &arr )
 {
     // Base case: with two numbers, compare the numbers and
     // return the smallest
     if (arr.size() == 2)
     {
         if (arr[0] < arr[1])
             return arr[0];
         else
             return arr[1];
             
         // If we have gotten to this point, the comparison is
         // neither true nor false
         abort();
     }
     
     // Recursive case: must handle arrays of greater sizes.
     // In this case, we create n new arrays, with one item
     // removed from each array. We then call this function
     // recursively, while keeping track of the smallest item
     // seen so far.
     number_t smallest = numeric_limits< number_t >::max();
     for (int i = 0; i < arr.size(); i++ )
     {
         array_t smaller_arr = arr;
         smaller_arr.erase( smaller_arr.begin() + i );
         number_t maybe_smallest;
         maybe_smallest = find_smallest( smaller_arr );
         if (maybe_smallest < smallest)
             smallest = maybe_smallest;
     }
     
     return smallest;
 }
  
 int main()
 {
     array_t my_array = 
                { 9.1f, 37.2f, 10302.34f, 0.3333332f, 
                 -4.0f, 6.0f };
     cout << find_smallest( my_array ) << endl;
 	// holy shit, it actually worked
     return 0;
 }
</code>


This algorithm uses the “divide and surrender” technique.

Because the problem of finding the smallest number in an array is hard, this algorithm breaks up the problem
into smaller, stupider sub-problems.

In the case where the length of an array is two, we just compare the items and return the smallest.

But if the length of the array is more than two, we create n n sub-arrays of length n−1 n−1, where we remove
each item in turn from the old array, to make n n new arrays, and then we run the algorithm recursively on
those new arrays.

If the array is length 0 or 1, we crash, as that is ridiculous and can never happen in real life.

This solution is has a time complexity of O(n!), which makes it the fastest possible algorithm for
finding the smallest number in an array.

Finding the largest item in an array is impossible, so don’t even try it.

EDIT: Saer Gardum points out that if you don’t require the answer to be absolutely correct 100% of the time,
you can choose a random element of the array and return it. Gardum refers to this as the “mad max” algorithm
and it runs in O(1) time, which is faster than laboriously checking every element of the array. Mad max
has a 1n  1n probability of returning the correct answer, which may be sufficient for some applications.

---

