filename: howto_copy-folder-structure-sans-files_20161020.txt
http://stackoverflow.com/questions/4073969/copy-folder-structure-sans-files-from-one-location-to-another

[31]Copy folder structure (sans files) from one location to another

   I want to create a clone of the structure of our multi-terabyte file server. I know that cp --parents
   can move a file and it's parent structure, but is there any way to copy the directory structure
   intact?

8 Answers 8

***
   You could do something like:
find . -type d >dirs.txt

   to create the list of directories, then
xargs mkdir -p <dirs.txt

***
   This solutions won't work if you have spaces in your directory names. – [47]Jealie Mar 11 '15 at

***   
Change the commands to
	find . -type d -print0 >dirs.txt and xargs -0 mkdir -p <dirs.txt.
This will cause both commands to use nulls as separators instead of whitespace. – user1207177 Apr 3 '15 at 1:37
  	 	
xargs can exceed the maximum command length of the system when you start dealing with orders of hundreds or
thousands, so use this with caution. (Find the command length limit with getconf ARG_MAX.) With a lot of
directories, you may have to write a script to loop through the output instead. – palswim Oct 13 '15 at 21:26
  	 	
Note that the order of -type d and -print0 is important! – Simon Oct 27 '15 at 19:37

***
cd /path/to/directories &&
find . -type d -exec mkdir -p -- /path/to/backup/{} \;

***
   What does the -- mkdir's option? – [59]Bruce_Warrior Aug 8 at 8:58

***
   -- is a standard GNU utility option terminator. It means "hey mkdir, any argument after this, it's
   not a flag, so treat it as a file argument, even if it starts with a '-' character."

***   
   I dunno if you are looking for a solution on Linux. If so, you can try this:
$ mkdir destdir
$ cd sourcedir
$ find . -type d | cpio -pdvm destdir

***
   cpio doesn't seem to work for me, at least with the parameters you specified. – [66]r00fus Nov 8 '10
   at 23:02

***
   The following solution worked well for me in various environments:
sourceDir="some/directory"
targetDir="any/other/directory"

find "$sourceDir" -type d | sed -e "s?$sourceDir?$targetDir?" | xargs mkdir -p

***
   This works:
find ./<SOURCE_DIR>/ -type d | sed 's/\.\/<SOURCE_DIR>//g' | xargs -I {} mkdir -p <DEST_DIR>/{}

   Just replace and .

***   
   Substitute target_dir and source_dir with the appropriate values:
cd target_dir && (cd source_dir; find . -type d ! -name .) | xargs -i mkdir -p "{}"


***
   If you can get access from a Windows machine, you can use xcopy with /T and /E to copy just the
   folder structure (the /E includes empty folders)

   [80]http://ss64.com/nt/xcopy.html

***   
   This one uses rsync to recreate the directory structure but without the files.
   [81]http://psung.blogspot.com/2008/05/copying-directory-trees-with-rsync.html

	Copying directory trees with rsync
	You can use cp -a to copy directory trees, but rsync can do the same and give you more flexibility.
	rsync supports a syntax for filter rules which specify which files and directories should and should
	not be copied.

	Examples
	Copy only the directory structure without copying any files:
	$ rsync -a -f"+ */" -f"- *" source/ destination/

	The two -f arguments mean, respectively, "copy all directories" and then "do not copy anything else".

	Copy only directories and Python files:
	$ rsync -a -f"+ */" -f"+ *.py" -f"- *" source/ destination/

	This is really handy for replicating the general directory structure but only copying a subset of
	the files. Copy everything but exclude .git directories:
	$ rsync -a -f"- .git/" -f"+ *" source/ destination/

	Conclusion
	Of course, rsync also works great for copying files between machines, and it knows better than to
	transfer files that already exist on the destination. I use something similar to the above to do
	backups, copying my homedir but excluding stuff like caches that are not even worth copying.
	
***
   Thank you, the rsync method worked perfectly fine for me. It's compatible with spaces in directory
   names as well. – [88]Glutanimate Dec 7 '12 at 0:40

***
   This copy the directories and files attributes, but not the files data:
cp -R --attributes-only SOURCE DEST

   Then you can delete the files attributes if you are not interested in them:
find DEST -type f -exec rm {} \;


---
