filename: automount-ext-USB-HDD-multif_20201027.txt
https://forum.manjaro.org/t/root-tip-use-systemd-to-mount-any-device/1185

Use systemd to mount ANY device
5 October 2020

Disk device recognition
   Manjaro uses udev (see Arch Wiki) to load devices at boot time. The loading of devices is
   arbitrary and therefore you cannot predict which device will be available at a given path.

   But static device names do exist and you can assign specific locations to your device and thus
   ensure e.g. scripts will work as expected.

What to learn
    1. Overview of system mount units
    2. Structure and Content of a mount unit
    3. Mount at boot (immediate mount)
    4. Mount at demand (mount on first access)
    5. Conclusion

1. What is systemd mount units
   The systemd manual has the following somewhat contradicting statement

     Mount units may either be configured via unit files, or via /etc/fstab (see fstab(5) for
     details). Mounts listed in /etc/fstab will be converted into native units dynamically at boot and
     when the configuration of the system manager is reloaded. In general, configuring mount points
     through /etc/fstab is the preferred approach. See systemd-fstab-generator(8) for details about
     the conversion.- system.d.mount.5.html#FSTAB (Emphasized by me)

Logic
   As mounts listed in fstab will be converted into native units dynamically at boot - logically we
   create the units ahead so the system don't have to bother with converting fstab - the contradiction
   in above statement is fstab is the preferred approach.

   What? Why would would it be preferable to use a configuration which must be parsed and converted when
   you can create native units?

   I recommend mount units because
     * They are easy to create
     * They provide clear logic of
          + What
          + Where
          + When
          + Why
          + How
     * Simple auto mount defines

   Auto mounting a device using systemd is a simple secure approach. For one - you don't have to edit
   your fstab - the slightest error in fstab can render your system unbootable.

   This article will use an USB device which may or may not be available at boot time and when you plug
   it you want it to be mounted on a special path - it could be dedicated backup disk.

   The basics of this guide can also be used to mount any extra devices available in your system, or
   remote shares e.g. WEBDAV, SMB, FTP and NFS. You can find link to a topic containing sample mount
   units at the end of this article.

2. Structure and Content of a mount unit

   There is no rules as to where you can mount the device. Just remember a few things
     * Structure
     * Recognizable
     * Don't use /run is a volatile structure recreated at boot
     * Don't use /mnt it's primary use is temporary mount

   By structure I mean organizing a directory tree - I usually recommend create a data folder on root
   and populate the tree with your devices and locations like below.

   By recognizable I mean naming your mount point with a logical description of the content - but don't
   use dashes anywhere in the mount point - see explanation below. If you really need a double word in
   your data tree - use a low dash ( _ ). You should also avoid local accented characters (e.g. danish æ
   ø å Æ Ø Å)

   Immediate branches are your devices - and network share mounts in a branch named for the type of
   fileservice e.g. NFS and SMB.

$> tree /data -L 2
/data
+-- backup
+-- build
+-- nfs
|   +-- data
|   +-- music
|   +-- photo
|   +-- video
|   +-- web
+-- private
+-- projects
+-- smb
|   +-- web
+-- virtualbox

   Naming the mount units uses a mandatory convention.

   Lets say you have a disk for backup and the disk mounts to /data/backup then the filename becomes.
     * data-backup.mount

   :exclamation: Dashes in the file name represents the directory separator - so don't use dashes
   anywhere in the mount point.

   Create a file as root
$> sudo touch /etc/systemd/system/data-backup.mount

   Open the file with your favorite CLI editor or a gvfs compliant editor (xed or gedit)
$> xed admin:/etc/systemd/system/data-backup.mount

Template
   Insert the following template into the file - and modify the description - continuing our backup disk

[Unit]
Description=Mount Backup disk (/data/backup)

[Mount]
What=
Where=
#Type=
#Options=
#TimeoutSec=seconds

[Install]
WantedBy=multi-user.target

Mount
   The section [Mount] is the same data as you see in your fstab - except the What which must the full
   path to the device. The nature of systemd makes it impossible to rely on the traditional path
   /dev/sda1 - luckily there is other options
     * /dev/disk/by-uuid/
     * /dev/disk/by-label/

What
   To get the device uuid you can use lsblk command and the -no UUID or -no LABEL to retrieve the
   identification you need for the mount. (substitute sdy1 with your actual device and partition). If
   you choose to use LABEL you must ensure you have different labels for all filesystems.
$ lsblk -no UUID /dev/sdy1
67f922cd-a61f-4d5e-84c0-ac8335a7ce67

   Then insert the UUID into the file
What=/dev/disk/by-uuid/67f922cd-a61f-4d5e-84c0-ac8335a7ce67

Where
   Next type in the path where you want the device mounted. Normally we would create the path beforehand
   as this is required for fstab - but not with systemd. If the path do not exist it will be created.

   :information_source: default permissions is 755 owned by root

   If your actual device is an existing device and the owner:group UID:GID do not match your device will
   be mounted read-only.
Where=/data/backup

   Caveat using dashes in a folder-name
   Don't use a dash - in your path because a dash refer to a new branch on the folder tree and this will
   break the naming of the mount/automount file
     * Invalid /data/home-backup
     * Valid /data/home_backup
     * Valid /data/home\x2dbackup

   To get the correct name for your mount/automount filename when you use dashes in your folder-naming
$ systemd-escape -p --suffix=mount "/data/home-backup"
data/home\x2dbackup.mount

Type
   The Type is optional for disk devices - but from the viewpoint - the more information we provide -
   less work for the system.

   You can retrieve the file system the same way as the UUID.
$ lsblk -no FSTYPE /dev/sdy1
ext4

Type=ext4

   Other types like NFS, SMB and FTP requires Type to be set.

Options
   The Options is optional for disk devices.

   As with fstab it takes a comma separated list of options for the filesystem mounted.

   Other types like NFS, SMB and FTP requires Options to be set.
Options=defaults,rw,noatime

   Save the file

3. Mount on boot
   This works just like your fstab - if the device is not available - the system will use the default 90
   seconds for the device to be available. The behavior can be changed by setting TimeoutSec= to a value
   matching the device actual mount time or use an additional automount unit.

   First reload the systemd daemon
$> sudo systemctl daemon-reload

   Note the state of the mount
$> systemctl show -p ActiveState -p SubState --value data-backup.mount

   Mount the device
$> sudo systemctl start data-backup.mount

   Now you can verify the service
$> systemctl show -p ActiveState -p SubState --value data-backup.mount

   Note that the folder was created by systemd - list the content of the mount
   :information_source: note permissions changed to partition content
$> ls -la /data/backup

   If the device is an internal device always available you can enable the mount and your device will be
   mounted during boot.
$> sudo systemctl enable data-backup.mount

   If - on the other hand - this is an USB device - which is not available at boot time - do not enable
   the mount unit but proceed to create an .automount unit for your USB device.

Check permissions
   If this is a newly formatted device or a reused device - it is wise to check the permissions. If you
   get issues with the device being mounted read-only - depending on filesystem - it may be due to the
   permissions stored on the device.

   If the device is using a Linux file system you can change permissions when it is mounted. To change
   the permissions on your games partition mounted at /data/games
$> sudo chmod ugo+rw /data/games -R

   If your device is a shared device dual booting Windows and Linux and formatted using NTFS and it
   mounts read-only - reboot your system into Windows and disable features like Fastboot, hibernation,
   sleep and hybrid sleep as these will taint the filesystem and cause Linux to mount it read-only.

4. Mount on demand
   An automount unit is a special unit which takes care of activating the corresponding mount unit when
   the mount path is accessed. The difference for mount and automount is when it is mounted.

   To demonstrate the automount - first unmount the data-mount
$> sudo systemctl stop data-backup.mount

   Verify the content of the mount point - it should now be empty.
$> ls -la /data/backup

   Now we proceed to create an automount for the mount. Create a file - it must be named using the same
   rule as the mount but with the extension of .automount
$> sudo touch /etc/systemd/system/data-backup.automount

   :information_source: the automount service will fail if the device path is mounted

Automount define
   Edit the file and insert the following content and save it.
[Unit]
Description=Automount backup partition
ConditionPathExists=/data/backup

[Automount]
Where=/data/backup
TimeoutIdleSec=10

[Install]
WantedBy=multi-user.target

Test automount
   Now enable and start the automount for data-backup
$> sudo systemctl enable --now data-backup.automount

   You know you unmounted the device - don't mount it - just access the /data/backup folder from
   terminal or a file manager - you will find systemd mounts it behind the scenes.

5. Conclusion
   This approach is a safer way than editing your fstab. Worst case the device is not mounted - if you
   make a mistake in fstab - the system breaks.

   You can mount all kind of devices - NFS, SMB, FTP, WEBDAV, SFTP, SSH - using this recipe. Sample
   files for different kind of mounts can be found in
   [https://forum.manjaro.org/t/howto-systemd-mount-unit-samples/1191]this topic.



---
https://www.techrepublic.com/article/how-to-properly-automount-a-drive-in-ubuntu-linux/

How to properly automount a drive in Ubuntu Linux
September 10, 2019

   Need to create a proper fstab entry to automatically mount a drive in Linux? Find out how here.

   If you have servers or desktops, running Ubuntu Linux (or a derivative), you might find yourself
   needing to add extra drives for storage, backups, or any number of reasons. Sure you could plug that
   drive in, open your file manager, and click to mount it. But what if you're dealing with a headless
   server or just wanted to make sure that disk was always mounted at boot (without your interaction)?

   Fortunately that's a fairly simple task to undertake. But to do it properly requires a few extra
   steps you might not know about. I'm going to show you the proper way to set up the automounting of a
   drive in Linux-specifically, Pop!_OS 19.04 (a derivative of Ubuntu Desktop).

What you need
   To make this work, you'll need the following:
     * An instance of Ubuntu Server (or a derivative).
     * An attached hard-drive to mount.
     * A user account with sudo privileges.

   With those things at the ready, let's get to work.

Locate the partition to mount
   The first thing to be done is to locate the partition you want to mount. In this case, we'll be
   working with an entire drive. To do this, open a terminal window and issue the command:
$> sudo fdisk -l

   You should see a complete listing of all the attached drives to the system (Figure A).
   Figure A: Some of the drives attached to a Linux system.

   Let's say we figured out the disk we want to mount is on /dev/sdj. With that bit of information in
   hand, we're ready to continue on.

Locate the UUID
   Next we need to find the UUID (Universal Unique Identifier) of the drive. To do that, issue the
   command:
$> sudo blkid

   This will display every UUID associated with every storage device attached to your machine (Figure B).
   Figure B: The UUID of the drive on /dev/sdj:
        ...
        /dev/sdj1: LABEL="Elements" UUID=14D82C1908F81E" TYPE="ntfs" PARTUUID="00061f34-01"
        ...

   We now have our drive name and UUID. With this information we can create an automount entry in fstab.

Create a mount point
   Before we add the entry to fstab, we must first create a mount point for the drive. The mount point
   is the directory where users will access the data on the drive (as they can't access /dev/sdj
   itself). So let's create a directory called data with the command:
$> sudo mkdir /data

   You'll want to also change the group ownership of that directory, so that users can access it. For
   this, you might create a group called data and then add users to the new group. This could be done
   with the commands:
$> sudo groupadd data
$> sudo usermod -aG data USERNAME (Where USERNAME is the name of the user to be added)

   After you've done that, you could then change the ownership of the mountpoint with the command:
$> sudo chown -R :data /data

The automount entry
   In order to create the automount entry, issue the command:
$> sudo nano /etc/fstab

   At the bottom of that file, we'll add an entry that contains the information we've discovered. The
   entry will look like this:
UUID=14D82C19D82BF81E /data    auto nosuid,nodev,nofail,x-gvfs-show 0 0

   Breaking that line down, we have:
     * UUID=14D82C19D82BF81E - is the UUID of the drive. You don't have to use the UUID here. You could
       just use /dev/sdj, but it's always safer to use the UUID as that will never change (whereas the
       device name could).
     * /data - is the mount point for the device.
     * auto - automatically mounts the partition at boot
     * nosuid - specifies that the filesystem cannot contain set userid files. This prevents root
       escalation and other security issues.
     * nodev - specifies that the filesystem cannot contain special devices (to prevent access to random
       device hardware).
     * nofail - removes the errorcheck.
     * x-gvfs-show - show the mount option in the file manager. If this is on a GUI-less server, this
       option won't be necessary.
     * 0 - determines which filesystems need to be dumped (0 is the default).
     * 0 - determine the order in which filesystem checks are done at boot time (0 is the default).

   Save and close the file.

Testing the entry
   Before you reboot the machine, you need to test your new fstab entry. To do this, issue the command:
$> sudo mount -a

   If you see no errors, the fstab entry is correct and you're safe to reboot.

   Congratulations, you've just created a proper fstab entry for your connected drive. Your drive will
   automatically mount every time the machine boots.


---
https://linuxconfig.org/automatically-mount-usb-external-drive-with-autofs

Automatically mount USB external drive with autofs
21 August 2018

   Question:
   My Debian (up to date) system will automount USB pen drives on the fly, but not a 1 Tb external USB
   drive (Iomega), which will mount but it has to be attached before booting. How to I change the
   behaviour for the Iomega usb large drive so I can mount it after the system is up? Thanks.

   Answer:
   If your 1 Tb external USB drive mounts when it is attached before booting you may have a line in your
   /etc/fstab configuration file which mounts it during the boot time. If this is the case and you plug
   in your external USB drive after the boot, execute as a root user:
$> mount -a

   This will mount all devices which are not currently mounted, including your Iomega USB drive.

   However, this may not be the most reliable solution since the base device file name for your drive
   can be different every time you plugin your USB disk. Since you have already mentioned that you are
   using other USB pen drives, your base device file name for your Iomega USB disk can be anything like:
   /dev/sdb1, /dev/sdd1 or /dev/sdXn .

   I have exactly the same problem with my external WD USB drive as it mounts automatically in Fedora
   but not in Debian. Therefore, I recommend use autofs. autofs is very simple a neat solution. It takes
   little bit of configuration but its worth it !

Make USB device base name permanent
   To avoid any confusion whether base name for your USB block device is /dev/sdb1, /dev/sdd1 or
   /dev/sdXn we make it permanently /dev/Iomega anytime you plug it in. This can be done with help of
   udev device manager. You should have udev already installed on your system, otherwise install it
   with:
$> apt-get install udev

   Next, search for a current base name of your external USB disk using fdisk command:
$> fdisk -l

   This will return something like this:

   OUTPUT:
Disk /dev/sdc: 2000.3 GB, 2000396746752 bytes
255 heads, 63 sectors/track, 243201 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x001425a0

   Device   Boot      Start         End      Blocks   Id  System
/dev/sdc1                 1      243201  1953512001    b  W95 FAT32

   Where the base name for your external USB device is /dev/sdc. Next, use udevinfo command with
   /dev/sdc as an argument to get model attribute:
$> udevinfo -a -p /sys/block/sdc/ | grep model
    ATTRS{model}=="Ext HDD 1021    "

   Now, that we have model attribute, we can add it to /etc/udev/rules.d/custom.rules by following line:
SUBSYSTEM=="scsi", ATTRS{model}=="Ext HDD 1021    ", SYMLINK+="Iomega%n"

   At this point all we need to do is restart udev device manager:

# /etc/init.d/udev restart
Stopping the hotplug events dispatcher: udevd.
Starting the hotplug events dispatcher: udevd.

   Plug in external USB and your new base name is:
$> ls -l /dev/Iomega*
lrwxrwxrwx 1 root root  3 2011-02-23 12:36 /dev/Iomega -> sdc
lrwxrwxrwx 1 root root 12 2011-02-23 12:36 /dev/Iomega0 -> bsg/14:0:0:0
lrwxrwxrwx 1 root root  4 2011-02-23 12:36 /dev/Iomega1 -> sdc1
lrwxrwxrwx 1 root root  3 2011-02-23 12:36 /dev/Iomega3 -> sg3

   Please note that /dev/Iomega1 points to a /dev/sdc1, which is exactly the partition we are interested
   in and we use it next to configure autofs.

Setting up autofs
   First we need to install autofs:
$> apt-get install autofs

   Configuring autofs is rather simple task. All we need to do is to edit two simple files.

   Let's start with master file by appending a following line:
/media/   /etc/auto.ext-usb --timeout=10,defaults,user,exec,uid=1000

   Next, edit /etc/auto.ext-usb file which we included in a master configuration file configuration:
Iomega            -fstype=auto           :/dev/Iomega1

   Restart autofs:
$> /etc/init.d/autofs restart

Testing autofs configuration
   We are done! Every time you now plug in your external Iomega USB drive aufosf will add your device to
   a list of Active Mount Points. Plugin your external USB drive now and execute:
/etc/init.d/autofs status

   OUTPUT:
Configured Mount Points:
------------------------
/usr/sbin/automount --timeout=10 /media file /etc/auto.ext-usb ,defaults,user,exec,uid=1000

Active Mount Points:
--------------------
/usr/sbin/automount --pid-file=/var/run/autofs/_media.pid --timeout=10\
/media file /etc/auto.ext-usb ,defaults,user,exec,uid=1000

   and
$> mount

   OUTPUT:
automount(pid7124) on /media type autofs (rw,fd=4,pgrp=7124,minproto=2,maxproto=4)

   Please note, although our drive is now listed as an active mount point the disk is not mounted yet!
   autofs only waits for user to access specified mount point directory and once that happens it will
   mount the filesystem.

   Example:
$> cd /media/
$> ls
$> cd Iomega
$> ls
lost.dir  music  picture  ps3  video mystuff
$> cd ..
$> ls
Iomega

   From the output above you can see that Iomega directory was created only when I tried to access it.
   Every time you now plug in you USB external disk you can instantly access it via some sort of Desktop
   or Bookmark shortcut. I hope this helps !


---
https://confluence.jaytaala.com/display/TKB/Mount+drive+in+linux+and+set+auto-mount+at+boot

Mount drive in linux and set auto-mount at boot
Mar 18, 2018

   Guide to mount a drive in linux (deb/ubuntu) and set to auto-mount at boot.

Mount drive
   Make a folder (will be mount point)
$> sudo mkdir /media/data
$> sudo mount /dev/sdb1 /media/data

   Now you can access the drive at /media/data.

Auto-mount at boot
   We want the drive to auto-mount at boot.  This usually means editing /etc/fstab.

   Firstly, it's always best to use the drives UUID.  To find the drive's UUID do
$> ls -al /dev/disk/by-uuid/

   Copy the resultant UUID (for your disk) and then open fstab for editing:
$> sudo nano /etc/fstab

   You want to add an entry for the UUID and mount point.  Below is an example of an fstab file with an
   entry added for the mount above:
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system>                                 <mount point>   <type>      <options>           <dump>  <pass>
# / was on /dev/sdb1 during installation    
UUID=63a46dce-b895-4c1f-9034-b1104694a956       /               ext4        errors=remount-ro   0       1
# swap was on /dev/sdb5 during installation 
UUID=b9b9ee49-c69c-475b-894b-1279d44034ae       none            swap        sw                  0       0
# data drive    
UUID=19fa40a3-fd17-412f-9063-a29ca0e75f93       /media/data     ext4        defaults            0       0

   Note: the entry added is the last line.

Test fstab
   We always want to test the fstab before rebooting (an incorrect fstab can render a disk unbootable).
   To test do:
$> sudo mount -a

   If nothing is returned (e.g. no errors) then you should be good to go.

Unmounting drive with umount
   You can unmount drives using umount.  For example, to unmount the data drive above mount
   at /media/data you would do:
$> sudo umount /media/data


---
https://www.linuxbabe.com/desktop-linux/how-to-automount-file-systems-on-linux

How To Automount File Systems on Linux
January 13, 2020

   Today I'm going to show you how to automatically mount a drive at boot time in Linux. My laptop have
   one SSD and one mechanical drive. I install operating systems on SSD and store files on mechanical
   drive. So often times I need to mount the mechanical drive in file manager manually to access my mp3
   and video files. Mounting drive manually is just a waste of time. So I'm going to show you an easy
   way to automount drive in Linux.

Step 1: Get the Name, UUID and File System Type
   Open your terminal, run the following command to see the name of your drive, its UUID(Universal
   Unique Identifier) and file system type.
$> sudo blkid

   In the output of this command, the first column is the name of your drives. The second column is the
   label of the drive (if you set a label for it) and the third column is the UUID of your drives.

   First you need to know the name of the drive that is going to be automatically mounted. For example,
   the name of the drive that is going to be automatically mounted on my computer is /dev/sdb9.

   Then you need to know it's UUID and file system type. As you can see the UUID of /dev/sdb9 is
   eb67c479-962f-4bcc-b3fe-cefaf908f01e and the file system of /dev/sdb9 is ext4 which is the standard
   file system in Linux.

Step 2: Make a Mount Point For Your Drive
   We are going to make a mount point under /mnt directory. Enter the following command,
$> sudo mkdir /mnt/<name-of-the-drive>

   For example, I issued the following command:
$> sudo mkdir /mnt/sdb9

Step 3: Edit /etc/fstab File
   Run the following command to edit the /etc/fstab file. Nano is a command line editor on Linux.
$> sudo nano /etc/fstab

   We need to append one line of code at the end of the file. The format of this line of code is as
   follows:
UUID=<uuid-of-your-drive>  <mount-point>  <file-system-type>  <mount-option>  <dump>  <pass>

   Note that you need to separate these items with Tab key. For example, I added the following line to
   the end of /etc/fstab.
UUID=eb67c479-962f-4bcc-b3fe-cefaf908f01e  /mnt/sdb9  ext4  defaults  0  2

   If you want to automount a NTFS file system, here is an example.
UUID=<uuid-of-ntfs-file-system>   /mnt/ntfs   ntfs   defaults  0  2

   Save and close the file. Then reboot your system to see the if it works. So that's how you automount
   a file system in Linux.

Some Explanation
   For swap partitions, the mount point field should be specified as none.

   The defaults mount option will give users read and write access to the file system.

   The value of dump field is usually zero.

   The pass field is used by the fsck program to determine the order in which filesystem checks are done
   at reboot time. As you can see in this file, the value of the pass field for the root file system is
   1. Swap partitions do not need to be checked and the value for them is zero. All other file systems
   should have a value of 2. So I set the pass value as 2 for my drive.


---
https://esite.ch/2014/04/mounting-external-usb-drives-automatically-to-its-label/

Mounting external usb drives automatically to its label
April 11, 2014

   I am maintaining a file server running Ubuntu 12.04 in my company and was faced with the problem how
   to backup my system easily and on a low cost. As we have a huge amount of data and a rather slow
   internet connection I have made the decision to backup onto external hard drives which we will rotate
   frequently. In the end USB drives are still the cheapest option to backup your data... ;).

   This blog post is though not about backing up your data but rather how to mount a USB drive
   automatically when connected to a server and access it with its label. This helped me to have a
   specific mount point for backup hard discs but won't interfere if anyone else needs to connect
   another USB drive to the server. I am sure you might have different use cases for such feature as
   well. I have tested following configuration on a Ubuntu Server 12.04 but it should run on other
   Debian based operating systems as well.

   OK this said let's get started with the configuration then.

   While I was looking for a tool to automatically mount my usb drives I found usbmount which was
   very simple and pretty much worked out of the box.

   You can install it with the following command:
$> apt-get install usbmount

   After usbmount is installed you can simply connect your usb drive to your server and usbmount will
   automatically mount it to /media/usb0. When an additional drive is connected it will be mounted to
   /media/usb1 and so on.

   That's a good start... but there is a draw back that every drive connected to the server will be
   mounted to /media/usb0 so we cannot really distinguish the different drives from each other. But
   usbmount has a feature for this that it creates a symlink for each drive in the folder
   /var/run/usbmount.

   Such symlink can look like the following:
   lrwxrwxrwx 1 root root 11 Apr 11 10:53 SAMSUNG_HM160HI_1 -> /media/usb0

   The name of the symlink is built by using the vendor, model and partition number. So accessing the
   hard disc you simply access it using this symlink. This is great when you want to identify a specific
   hard disc. There is still one problem with it though when I want a group of hard disc to be accessed
   the same way I cannot really use this symlink.

   So my idea was why not using the volume label and when I format hard drives I simply give all those
   drives the same volume label.

   This can be done for instance with following format command using ext4 as an example (of course you
   can change ext4 to whatever file system you need):
$> mkfs.ext4 -L VOLUMENAME /dev/sdb1

   Unfortunately usbmount doesn't create any symlink of drives by its volume label. I therefore created
   following script to do this:

<code>
#!/bin/sh
# This script creates the volume label symlink in /var/run/usbmount.
# Copyright (C) 2014 Oliver Sauder
#
# This file is free software; the copyright holder gives unlimited
# permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#
set -e

# Exit if device or mountpoint is empty.
test -z "$UM_DEVICE" && test -z "$UM_MOUNTPOINT" && exit 0

# get volume label name
label=`blkid -s LABEL -o value $UM_DEVICE`

# If the symlink does not yet exist, create it.
test -z $label || test -e "/var/run/usbmount/$label" || ln -sf "$UM_MOUNTPOINT" "/var/run/usbmount/$label"

exit 0
</code>

   This script you have to save to /etc/usbmount/mount.d/01_create_label_symlink and do not forget to
   add executable rights to it (chmod +x /etc/usbmount/mount.d/01_create_label_symlink). usbmount will
   run this script whenever a hard disc is connected.

   Beside creating this symlink we also have to make sure that the symlink will be removed when the hard
   disc is disconnected. usbmount already has a script which removes symlink from /var/run/usbmount but
   we have to adjust it as it only removes the first link and not all. We can simply open the file
   /etc/usbmount/umount.d/00_remove_model_symlink and remove the break statement in line 19.

   The script will then look like the following:

<code>
#!/bin/sh
# This script removes the model name symlink in /var/run/usbmount.
# Copyright (C) 2005 Martin Dickopp
#
# This file is free software; the copyright holder gives unlimited
# permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#
set -e

ls /var/run/usbmount | while read name; do
    if test "`readlink "/var/run/usbmount/$name" || :`" = "$UM_MOUNTPOINT"; then
        rm -f "/var/run/usbmount/$name"
    fi
done

exit 0
</code>

   So now when we connected a hard disc to the server there will be a symlink created
   /var/run/usbmount/VOLUMENAME and such path we can then use to point to for backups or whatever other
   use case you have.

   Hope this was helpful. While working with usbmount I have found some more articles which might be
   helpful for you e.g. when you have issues with permissions or want to use ntfs as a file
   system.


---
https://unix.stackexchange.com/questions/60431/fixed-mount-point-of-external-usb-hdd

Fixed mount point of external usb hdd

   I'm doing a backup script and need to have a fixed mount point for an external usb drive. If it is
   the first usb connected it will mount in /media/usb0/, however if it is the second, third... it will
   mount in /media/LABEL_OF_THE_DISK/. The same apply for sdX. If it is the first will be sdc1 (I have
   two disks already), but if it is the second will be sdd, third sde....

   The hdd is disconnected and only will be connected when is the backup time (once a week)

   I may look where is it mounted and pass a parameter to the script as "actual_mount_point", but I'd
   like to connect the hdd, run the script and backup done, without need be writing anything.

   So the question is: Is it possible to have a fixed mount point for an external drive?

***
   You could also write a udev-rule, which allows you to point what to do when disk connected:
$> cat /etc/udev/rules.d/99-usb-mount.rules
SUBSYSTEM=="usb", ACTION=="add", ENV{ID_SERIAL_SHORT}=="XXXXXXXXXX", RUN+="/path/to/script1.sh"
SUBSYSTEM=="usb", ACTION=="remove", ENV{ID_SERIAL_SHORT}=="XXXXXXXXXX", RUN+="/path/to/script2.sh"

   You can automate backup on disk connection, for example

***
    * Do I have to create such file? Because I only have 70-persistent-cd and 70-persisten-net rules
      files. Also the XXXXXXXXXX what represents? The UUID?

***
   you can add an entry to /etc/fstab

   get the uuid of your device with blkid (locate/print block device attributes) and make an entry in
   fstab (hold static informations about filesystem) with that, e.g.
   UUID=645a3aa3-09a3-4e9d-bc69-0a5466684137 /media/usb-data/ ext4 defaults 1 1

   see "man fstab" for more details

***
   Ok! I found out where was the problem. I had in the fstab this line:
/dev/sdc1 /media/usb0 auto rw,user,noauto 0 0

   So when I connected the first USB, it always was mounted in /media/usb0. However now I removed that
   line, and doesn't matter when I connect the usb, it always is mounting in /media/LABEL


---
https://ubuntuforums.org/showthread.php?t=1432413

Thread: Permanently mount external hard-drive
March 18th, 2010

    Permanently mount external hard-drive

    Hi all

    I've recently started using a 500gb external hard drive for music and backups. It is always plugged
    into the computer but doesn't always mount at boot-up and I have to dis-connect and re-connect the USB
    cable. The desktop icon then appears.

    The fact that it's mount point changes also means I can't share the Music folder on the external hard
    drive via Samba (WinXP machines say they can't access the folder) and also Songbird 'loses' the tracks.

    How do I permanently mount the external hard drive? I assume it will mean some editing of the fstab
    file? Unfortunately, I've got no idea of what I should enter on there.

    The external hard drive volume is called 'Music and BackUps' - Gparted screengrab attached.

    Any help is appreciated as always,

***
    Re: Permanently mount external hard-drive

    Hi,

    If you manually mount your external drive then open a terminal and type: df you should see a line with
    your external drive device and it's mount point.

    eg: /dev/ad0s1a 1.9G 255M 1.5G 14% /media/CEYEG363

    You can then take that information and create a new entry in your fstab file. First of all you want to
    create a mount point (sudo mkdir /external) and then open the fstab file (sudo nano -w /etc/fstab).

    Add this to the bottom of the file:
    /dev/yourdevicehere!! /external ext3 rw 0 0

    You'll want to change the device to match the one you saw when you used the df command and make sure
    you use the correct filesystem, I've used ext3 in this example although your drive may use something
    different (ext4,fat32,ntfs).

    After you've saved the file in nano you can manually mount the drive using your new fstab entry to
    ensure it works:
$> sudo mount /external

    If you get no errors from this command and you can see your files in /external everything worked fine
    and in the future this will be automatically mounted. 

***
    Re: Permanently mount external hard-drive

    A simple solution (according to the screenshot you posted).

    1. Make a folder, called, for example /media/external:
$> sudo mkdir /media/external

    2. Make yourself the owner of this folder:
$> sudo chown -R $(id -u):$(id -u) /media/external

    3. Add a line to your /etc/fstab like the following:
 /dev/sdb1 /media/external ntfs rw,nosuid,nodev,default_permissions 0 0


    A more complicated, but also more correct way is to use
$> sudo blkid

    command that outputs UUIDs for all partitions. Then in your fstab file you can refer to a partition by its
    unique ID. For example:

    UUID=f1ff7651-b02f-4d05-907a-fe4990fd3d14 /media/external ntfs rw,nosuid,nodev,default_permissions 0 0

***
    Re: Permanently mount external hard-drive

    Thanks both for your replies but I'm afraid I'm more confused than before.

    The output from df is

    Code:

    /dev/sdf1  488384032 106303400 382080632  22% /media/Music and BackUps

    When mounted the hard-drive appears in /media and I want to keep it's volume name of 'Music and BackUps',
    so I don't quite understand why I've got to create a new folder called /external.

    But assuming I do that, is this the line to add to fstab -

    /dev/Music and BackUps/external ntfs rw 0 0

    Apologies if I seem dumb but this all seems rather complicated just to keep an external hard drive
    connected. I had to re-connect it again this morning.

    Thanks for any help

***
    Re: Permanently mount external hard-drive

    The correct syntax if you're going to use a label is different from what you've got.

    STEP 1: Create a mount point for your partition to live in

    Open Terminal, Type:
$> sudo mkdir /media/external

    STEP 2: Alter the fstab entry from this:
    /dev/Music and BackUps/external ntfs rw 0 0
    
    To this:

    LABEL=Music\040and\040BackUps /media/external ntfs defaults,nls=utf8,umask=000,uid=1000    0    0

    The "\040" is how linux handles spaces in this situation. Linux hates spaces.
    umask=000 will allow everyone to read and write to that partition
    uid=1000 will make you the owner. To make sure that's the right number for you type: id in a terminal.

    I'm making you the owner so that you can use Nautilus-share to share the drive with others on your network.

    Step 3: Mount it

    Open Terminal, Type:
$> sudo mount -a

    Note: In dealing with external drives it's best not to use /dev/sdxy. Should you remove the drive and
    insert another one it too will will be sdxy but this time it might be a FAT32 or ext3 formatted drive
    and your fstab entry would be wrong. Also, and this is a big one, that fstab entry I recommended will
    work only if the drive is on before you boot as you stated in your original post. 

***
    Re: Permanently mount external hard-drive

    Open Terminal, Type:
$> sudo umount /media/"Music and Backups"

    If that doesn't work: reboot

    If you still have multiple entries, post your fstab so we can see what needs to be deleted:

    Open Terminal, Type:
$> cat /etc/fstab

    EDIT: In looking at your output just post the fstab. I think you have multiple entries in there for the
    same partition.

    /media/external is not a shortcut. It is the mount point for the device.


---
