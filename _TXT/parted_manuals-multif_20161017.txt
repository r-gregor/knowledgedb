filename: /c/Users/gregor.redelonghi/Dropbox/ODPRTO/_TXT/parted_manuals-multif_20161017.txt
https://www.gnu.org/software/parted/manual/parted.html

                                            Parted User's Manual

GNU Parted User Manual
Copyright (C) 1999-2014 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free
Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of the license is
included in the section entitled 'GNU Free Documentation License'.

This file documents the use of GNU Parted, a program for creating and manipulating partition tables.

This document applies roughly to version 3.2 of GNU Parted.

The original version was written by Andrew Clausen in text format. Richard M. Kreuter translated it into
Texinfo format in 2002, to be heavily edited by Leslie P. Polzer in 2006.

Short Table of Contents
  * 1 Introduction
  * 2 Using Parted
  * 3 Related information
  * Appendix A Copying This Manual
  * Appendix B This manual's history
  * Index

- Introduction:           Overview
- Using Parted:           Partitioning a Hard Drive
- Related information:    Further reading on related topics
- Copying This Manual:    How to make copies of this manual
- History:                This manual's history
- Concept index:          Concept index
-------------------------------------------------------------------------------------------------------------

1 Introduction

- Overview:               GNU Parted and prerequisite knowledge
- Software Required:      GNU Parted's software dependencies
- Supported Platforms:    Where you can use GNU Parted
- License:                What you may and may not do with GNU Parted
- Compiling:              How to build GNU Parted
-------------------------------------------------------------------------------------------------------------

1.1 Overview of GNU Parted
GNU Parted is a program for creating and manipulating partition tables.

This documentation is written with the assumption that the reader has some understanding of partitioning and
file systems.

GNU Parted was designed to minimize the chance of data loss. For example, it was designed to avoid data loss
during interruptions (like power failure) and performs many safety checks. However, there could be bugs in
GNU Parted, so you should back up your important files before running Parted.

The GNU Parted homepage is http://www.gnu.org/software/parted. The library and frontend themselves can be
downloaded from ftp://ftp.gnu.org/gnu/parted. You can also find a listing of mailing lists, notes for
contributing and more useful information on the web site.

Please send bug reports to bug-parted@gnu.org. When sending bug reports, please include the version of GNU
Parted. Please include the output from these commands (for disk /dev/hda):

# parted /dev/hda print unit s print unit chs print

Feel free to ask for help on this list ' just check that your question isn't answered here first. If you
don't understand the documentation, please tell us, so we can explain it better. General philosophy is: if
you need to ask for help, then something needs to be fixed so you (and others) don't need to ask for help.

Also, we'd love to hear your ideas :-)

-------------------------------------------------------------------------------------------------------------

1.2 Software Required for the use of Parted
If you're installing or compiling Parted yourself, you'll need to have some other programs installed. If you
are compiling Parted, you will need both the normal and devel packages of these programs installed:

  * libuuid, part of the e2fsprogs package. If you don't have this, you can get it from:

    http://web.mit.edu/tytso/www/linux/e2fsprogs.html

    If you want to compile Parted and e2fsprogs, note that you will need to make install and make
    install-libs e2fsprogs.

  * GNU Readline (optional), available from

    ftp://ftp.gnu.org/gnu/readline

    If you are compiling Parted, and you don't have readline, you can disable Parted's readline support with
    the --disable-readline option for configure.

  * GNU gettext (or compatible software) for compilation, if internationalisation support is desired.

    ftp://ftp.gnu.org/gnu/gettext

  * libreiserfs, if you want reiserfs support:

    http://reiserfs.osdn.org.ua

    Note that parted will automatically detect libreiserfs at runtime, and enable reiserfs support.
    libreiserfs is new, and hasn't been widely tested yet.

-------------------------------------------------------------------------------------------------------------

1.3 Platforms on which GNU Parted runs
Hopefully, this list will grow a lot. If you do not have one of these platforms, then you can use a rescue
disk and a static binary of GNU Parted.

GNU/Linux

    Linux versions 2.0 and up, on Alpha, x86 PCs, PC98, Macintosh PowerPC, Sun hardware.

GNU/Hurd

-------------------------------------------------------------------------------------------------------------
N
1.4 Terms of distribution for GNU Parted
GNU Parted is free software, covered by the GNU General Public License Version 2. This should have been
included with the Parted distribution, in the COPYING file. If not, write to the Free Software Foundation,
Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

Libparted is considered part of GNU Parted. It is covered by the GNU General Public License. It is NOT
released under the GNU Lesser General Public License (LGPL).

-------------------------------------------------------------------------------------------------------------

1.5 Building GNU Parted
If you want to compile GNU Parted, this is generally done with:

$ ./configure
$ make

However, there are a few options for configure:

--without-readline
    turns off use of readline. This is useful for making rescue disks, etc., where few libraries are
    available.
    
--disable-debug
    don't include assertions

--disable-dynamic-loading
    disables dynamic loading of some libraries (only libreiserfs for now, although we hope to expand this).
    Dynamic loading is useful because it allows you to reuse libparted shared libraries even when you don't
    know if some libraries will be available. It has a small overhead (mainly linking with libdl), so it may
    be useful to disable it on bootdisks if you don't need the flexibility.

--disable-nls
    turns off native language support. This is useful for use with old versions of glibc, or a trimmed down
    version of glibc suitable for rescue disks.

--disable-shared
    turns off shared libraries. This may be necessary for use with old versions of GNU libc, if you get a
    compile error about a 'spilled register'. Also useful for boot/rescue disks.

--enable-discover-only
    support only reading/probing (reduces size considerably)

--enable-mtrace
    enable malloc() debugging

--enable-read-only
    disable writing (for debugging)

1.5.1 Introduction
If you want to run GNU Parted on a machine without GNU/Linux installed, or you want to modify a root or boot
partition, use GParted Live: http://gparted.sourceforge.net/livecd.php.

-------------------------------------------------------------------------------------------------------------

2 Using Parted
- Partitioning:            Disk partitioning in context
- Running Parted:          Partitioning with Parted
- Invoking Parted:         Parted's invocation options and commands
- Command explanations:    Full explanation of parted's commands
-------------------------------------------------------------------------------------------------------------

2.1 Introduction to Partitioning
Unfortunately, partitioning your disk is rather complicated. This is because there are interactions between
many different systems that need to be taken into consideration.

This manual used to introduce the reader to these systems and their working. This content has moved to the
GNU Storage Guide.

-------------------------------------------------------------------------------------------------------------

2.2 Using GNU Parted
Parted has two modes: command line and interactive. Parted should always be started with:
	# parted device

where device is the hard disk device to edit. (If you're lazy and omit the DEVICE argument, Parted will
attempt to guess which device you want.)

In command line mode, this is followed by one or more commands. For example:
	# parted /dev/sda mklabel gpt mkpart P1 ext3 1MiB 8MiB

Options (like --help) can only be specified on the command line.

In interactive mode, commands are entered one at a time at a prompt, and modify the disk immediately. For
example:
	(parted) mklabel gpt
	(parted) mkpart P1 ext3 1MiB 8MiB

Unambiguous abbreviations are allowed. For example, you can type 'p' instead of 'print', and 'u' instead of
'units'. Commands can be typed either in English, or your native language (if your language has been
translated). This may create ambiguities. Commands are case-insensitive.

Numbers indicating partition locations can be whole numbers or decimals. The suffix selects the unit, which
may be one of those described in unit, except CHS and compact. If no suffix is given, then the default unit
is assumed. Negative numbers count back from the end of the disk, with '-1s' indicating the sector at the end
of the disk. Parted will compute sensible ranges for the locations you specify (e.g. a range of +/- 500 MB
when you specify the location in 'G'). Use the sector unit 's' to specify exact locations. With parted-2.4
and newer, IEC binary units like 'MiB', 'GiB', 'TiB', etc., specify exact locations as well. See IEC binary
units.

If you don't give a parameter to a command, Parted will prompt you for it. For example:
	(parted) mklabel
	New disk label type? gpt

Parted will always warn you before doing something that is potentially dangerous, unless the command is one
of those that is inherently dangerous (viz., rm, mklabel and mkpart). Since many partitioning systems have
complicated constraints, Parted will usually do something slightly different to what you asked. (For example,
create a partition starting at 10.352Mb, not 10.4Mb) If the calculated values differ too much, Parted will
ask you for confirmation.

-------------------------------------------------------------------------------------------------------------

2.3 Command Line Options
When invoked from the command line, Parted supports the following syntax:
	# parted [option] device [command [argument]]

Available options and commands follow. For detailed explanations of the use of Parted commands, see Command
explanations. Options begin with a hyphen, commands do not:

Options:
'-h'
'--help'
    display a help message

'-s'
'--script'
    never prompt the user

'-a alignment-type'
'--align alignment-type'
    Set alignment for newly created partitions, valid alignment types are: none, cylinder, minimal and
    optimal.

'-v'
'--version'
    display the version

-------------------------------------------------------------------------------------------------------------

2.4 Parted Session Commands

GNU Parted provides the following commands:
- align-check:    
- disk_set:       
- help:           
- mklabel:        
- mkpart:         
- name:           
- print:          
- quit:           
- rescue:         
- resizepart:     
- rm:             
- select:         
- set:            
- unit:           

Note that after version 2.4, the following commands were removed: check, cp, mkfs, mkpartfs, move, resize.

-------------------------------------------------------------------------------------------------------------

2.4.1 align-check
Command: align-check align-type n

    Determine whether the starting sector of partition n meets the disk's selected alignment criteria.
    align-type must be 'minimal', 'optimal' or an abbreviation. When in script mode, if the partition does
    not meet the alignment requirement, exit with status 1; otherwise (including on older kernels for which
    alignment data is not available), continue processing any remaining commands. Without --script, print
    either 'N aligned' or 'N not aligned'.

    Example:
	    (parted) align-check minimal 1
	    1 aligned

-------------------------------------------------------------------------------------------------------------

2.4.2 disk_set
Command: disk_set flag state

    Changes a flag on the disk. A flag can be either 'on' or 'off'. Some or all of these flags will be
    available, depending on what disk label you are using:

    'pmbr_boot'
        (GPT) - this flag enables the boot flag on the GPT's protective MBR partition.

    The disk's flags are displayed by the print command on the "Disk Flags:" line. They are also output as
    the last field of the disk information in machine mode.
	(parted) disk_set pmbr_boot on
	Set the PMBR's boot flag.

-------------------------------------------------------------------------------------------------------------

2.4.3 help
Command: help [command]

    Prints general help, or help on command.

    Example:
	(parted) help mklabel

    Print help for the mklabel command.

-------------------------------------------------------------------------------------------------------------

2.4.4 mklabel
Command: mklabel label-type
    Creates a new disk label, of type label-type. The new disk label will have no partitions. This command
    (normally) won't technically destroy your data, but it will make it basically unusable, and you will need
    to use the rescue command (see Related information) to recover any partitions. Parted works on all
    partition tables. ^1

    label-type must be one of these supported disk labels:
      + bsd
      + loop (raw disk access)
      + gpt
      + mac
      + msdos
      + pc98
      + sun

    Example:
	(parted) mklabel msdos

    Create an MS-DOS disk label. This is still the most common disk label for PCs.

-------------------------------------------------------------------------------------------------------------

2.4.5 mkpart
Command: mkpart [part-type fs-type name] start end

    Creates a new partition, without creating a new file system on that partition. This is useful for
    creating partitions for file systems (or LVM, etc.) that Parted doesn't support. You may specify a file
    system type, to set the appropriate partition code in the partition table for the new partition. fs-type
    is required for data partitions (i.e., non-extended partitions). start and end are the offset from the
    beginning of the disk, that is, the 'distance' from the start of the disk.

    part-type is one of 'primary', 'extended' or 'logical', and may be specified only with 'msdos' or 'dvh'
    partition tables. A name must be specified for a 'gpt' partition table. Neither part-type nor name may be
    used with a 'sun' partition table.

    fs-type must be one of these supported file systems:
      + ext2
      + fat16, fat32
      + hfs, hfs+, hfsx
      + linux-swap
      + NTFS
      + reiserfs
      + ufs
      + btrfs

    For example, the following creates a logical partition that will contain an ext2 file system. The
    partition will start at the beginning of the disk, and end 692.1 megabytes into the disk.
	(parted) mkpart logical 0.0 692.1

    Now, we will show how to partition a low-end flash device ('low-end', as of 2011/2012). For such devices,
    you should use 4MiB-aligned partitions^2. This command creates a tiny place-holder partition at the
    beginning, and then uses all remaining space to create the partition you'll actually use:
	    $ parted -s /dev/sdX -- mklabel msdos \
		mkpart primary fat32 64s 4MiB \
		mkpart primary fat32 4MiB -1s

    Note the use of '--', to prevent the following '-1s' last-sector indicator from being interpreted as an
    invalid command-line option. The above creates two empty partitions. The first is unaligned and tiny,
    with length less than 4MiB. The second partition starts precisely at the 4MiB mark and extends to the end
    of the device.

    The next step is typically to create a file system in the second partition:
	$ mkfs.vfat /dev/sdX2

-------------------------------------------------------------------------------------------------------------

2.4.6 name
Command: name number name
    Sets the name for the partition number (GPT, Mac, MIPS and PC98 only). The name can be placed in quotes.

    Example:
	(parted) name 2 'Secret Documents'

    Set the name of partition 2 to 'Secret Documents'.

-------------------------------------------------------------------------------------------------------------

2.4.7 print
Command: print [number]

    Displays the partition table on the device parted is editing, or detailed information about a particular
    partition.

    Example:
	    (parted) print
	    Disk geometry for /dev/hda: 0.000-2445.679 megabytes
	    Disk label type: msdos
	    Minor    Start       End     Type      Filesystem  Flags
	    1          0.031    945.000  primary   fat32       boot, lba
	    2        945.000   2358.562  primary   ext2
	    3       2358.562   2445.187  primary   linux-swap
	    (parted) print 1
	    Minor: 1
	    Flags: boot, lba
	    File System: fat32
	    Size:            945.000Mb (0%)
	    Minimum size:     84.361Mb (0%)
	    Maximum size:   2445.679Mb (100%)

-------------------------------------------------------------------------------------------------------------

2.4.8 quit
Command: quit
    Quits Parted.

    It is only after Parted exits that the Linux kernel knows about the changes Parted has made to the disks.
    However, the changes caused by typing your commands will probably be made to the disk immediately after
    typing a command. However, the operating system's cache and the disk's hardware cache may delay this.

-------------------------------------------------------------------------------------------------------------

2.4.9 rescue
Command: rescue start end

    Rescue a lost partition that used to be located approximately between start and end. If such a partition
    is found, Parted will ask you if you want to create a partition for it. This is useful if you accidently
    deleted a partition with parted's rm command, for example.

    Example:
	    (parted) print

	    Disk geometry for /dev/hdc: 0.000-8063.507 megabytes
	    Disk label type: msdos
	    Minor    Start       End     Type      Filesystem  Flags
	    1          0.031   8056.032  primary   ext3

	    (parted) rm
	    Partition number? 1
	    (parted) print

	    Disk geometry for /dev/hdc: 0.000-8063.507 megabytes
	    Disk label type: msdos
	    Minor    Start       End     Type      Filesystem  Flags

    OUCH! We deleted our ext3 partition!!! Parted comes to the rescue...
	    (parted) rescue
	    Start? 0
	    End? 8056
	    Information: A ext3 primary partition was found at 0.031MB ->
	    8056.030MB.  Do you want to add it to the partition table?
	    Yes/No/Cancel? y
	    (parted) print
		
	    Disk geometry for /dev/hdc: 0.000-8063.507 megabytes
	    Disk label type: msdos
	    Minor    Start       End     Type      Filesystem  Flags
	    1          0.031   8056.032  primary   ext3

    It's back! :)

-------------------------------------------------------------------------------------------------------------

2.4.10 resizepart
Command: resizepart number end

    Moves the end position of partition number. Note that this does not modify any filesystem present in the
    partition. If you wish to do this, you will need to use external tools, such as resize2fs.

    When growing a partition you will want to grow the filesystem afterwards, but when shrinking, you need to
    shrink the filesystem before the partition.

-------------------------------------------------------------------------------------------------------------

2.4.11 rm
Command: rm number

    Removes the partition with number number. If you accidently delete a partition with this command, use
    mkpart to recover it. Also, you can use the gpart program (see Related information) to recover damaged
    disk labels.

    Note for msdos disk labels: if you delete a logical partition, all logical partitions with a larger
    partition number will be renumbered. For example, if you delete a logical partition with a partition
    number of 6, then logical partitions that were number 7, 8 and 9 would be renumbered to 6, 7 and 8
    respectively. This means, for example, that you have to update /etc/fstab on GNU/Linux systems.

    Example:
	(parted) rm 3

    Remove partition 3.

-------------------------------------------------------------------------------------------------------------

2.4.12 select
Command: select device

    Selects the device, device, for Parted to edit. The device can be a Linux hard disk device, a partition,
    a software RAID device or LVM logical volume.

    Example:
	(parted) select /dev/hdb

    Select /dev/hdb (the slave device on the first ide controller on Linux) as the device to edit.

-------------------------------------------------------------------------------------------------------------

2.4.13 set
Command: set number flag state

    Changes a flag on the partition with number number. A flag can be either 'on' or 'off'. Some or all of
    these flags will be available, depending on what disk label you are using:

    'bios_grub'
        (GPT) - Enable this to record that the selected partition is a GRUB BIOS partition.

    'legacy_boot'
        (GPT) - this flag is used to tell special purpose software that the GPT partition may be bootable.

    'boot'
        (Mac, MS-DOS, PC98) - should be enabled if you want to boot off the partition. The semantics vary
        between disk labels. For MS-DOS disk labels, only one partition can be bootable. If you are
        installing LILO on a partition that partition must be bootable. For PC98 disk labels, all ext2
        partitions must be bootable (this is enforced by Parted).

    'msftdata'
        (GPT) - This flag identifies partitions that contain Microsoft filesystems (NTFS or FAT). It may
        optionally be set on Linux filesystems to mimic the type of configuration created by parted 3.0 and
        earlier, in which a separate Linux filesystem type code was not available on GPT disks. This flag can
        only be removed within parted by replacing it with a competing flag, such as boot or msftres.

    'msftres'
        (GPT) - This flag identifies a "Microsoft Reserved" partition, which is used by Windows on GPT disks.
        Note that this flag should not normally be set on Windows filesystem partitions (those that contain
        NTFS or FAT filesystems).

    'irst'
        (MS-DOS, GPT) - this flag identifies an Intel Rapid Start Technology partition.

    'esp'
        (MS-DOS, GPT) - this flag identifies a UEFI System Partition. On GPT it is an alias for boot.

    'lba'
        (MS-DOS) - this flag can be enabled to tell MS DOS, MS Windows 9x and MS Windows ME based operating
        systems to use Linear (LBA) mode.

    'root'
        (Mac) - this flag should be enabled if the partition is the root device to be used by Linux.

    'swap'
        (Mac) - this flag should be enabled if the partition is the swap device to be used by Linux.

    'hidden'
        (MS-DOS, PC98) - this flag can be enabled to hide partitions from Microsoft operating systems.

    'raid'
        (MS-DOS) - this flag can be enabled to tell linux the partition is a software RAID partition.

    'LVM'
        (MS-DOS) - this flag can be enabled to tell linux the partition is a physical volume.

    'PALO'
        (MS-DOS) - this flag can be enabled so that the partition can be used by the Linux/PA-RISC boot
        loader, palo.

    'PREP'
        (MS-DOS, GPT) - this flag can be enabled so that the partition can be used as a PReP boot partition
        on PowerPC PReP or IBM RS6K/CHRP hardware.

    'DIAG'
        (MS-DOS) - Enable this to indicate that a partition can be used as a diagnostics / recovery
        partition.

    The print command displays all enabled flags for each partition.

    Example:
	(parted) set 1 boot on

    Set the 'boot' flag on partition 1.

-------------------------------------------------------------------------------------------------------------

2.4.14 unit
Command: unit unit

    Selects the current default unit that Parted will use to display locations and capacities on the disk and
    to interpret those given by the user if they are not suffixed by an unit.

    unit may be one of:

    's'
        sector (n bytes depending on the sector size, often 512)

    'B'
        byte

    'KiB'

        kibibyte (1024 bytes)

    'MiB'
        mebibyte (1048576 bytes)

    'GiB'
        gibibyte (1073741824 bytes)

    'TiB'
        tebibyte (1099511627776 bytes)

    'kB'
        kilobyte (1000 bytes)

    'MB'
        megabyte (1000000 bytes)

    'GB'
        gigabyte (1000000000 bytes)

    'TB'
        terabyte (1000000000000 bytes)

    '%'
        percentage of the device (between 0 and 100)

    'cyl'
        cylinders (related to the BIOS CHS geometry)

    'chs'
        cylinders, heads, sectors addressing (related to the BIOS CHS geometry)

    'compact'
        This is a special unit that defaults to megabytes for input, and picks a unit that gives a compact
        human readable representation for output.

    The default unit apply only for the output and when no unit is specified after an input number. Input
    numbers can be followed by an unit (without any space or other character between them), in which case
    this unit apply instead of the default unit for this particular number, but CHS and cylinder units are
    not supported as a suffix. If no suffix is given, then the default unit is assumed. Parted will compute
    sensible ranges for the locations you specify (e.g., a range of +/- 500 MB when you specify the location
    in 'G', and a range of +/- 500 KB when you specify the location in 'M') and will select the nearest
    location in this range from the one you wrote that satisfies constraints from both the operation, the
    filesystem being worked on, the disk label, other partitions and so on. Use the sector unit 's' to
    specify exact locations (if they do not satisfy all constraints, Parted will ask you for the nearest
    solution). Note that negative numbers count back from the end of the disk, with '-1s' pointing to the
    last sector of the disk.

    Note that as of parted-2.4, when you specify start and/or end values using IEC binary units like 'MiB',
    'GiB', 'TiB', etc., parted treats those values as exact, and equivalent to the same number specified in
    bytes (i.e., with the 'B' suffix), in that it provides no 'helpful' range of sloppiness. Contrast that
    with a partition start request of '4GB', which may actually resolve to some sector up to 500MB before or
    after that point. Thus, when creating a partition, you should prefer to specify units of bytes ('B'),
    sectors ('s'), or IEC binary units like 'MiB', but not 'MB', 'GB', etc.

    Example:
	    (parted) unit compact
	    (parted) print
	    Disk geometry for /dev/hda: 0kB - 123GB
	    Disk label type: msdos
	    Number  Start   End     Size    Type      File system  Flags
	    1       32kB    1078MB  1077MB  primary   reiserfs     boot
	    2       1078MB  2155MB  1078MB  primary   linux-swap
	    3       2155MB  123GB   121GB   extended
	    5       2155MB  7452MB  5297MB  logical   reiserfs

	    (parted) unit chs print
	    Disk geometry for /dev/hda: 0,0,0 - 14946,225,62
	    BIOS cylinder,head,sector geometry: 14946,255,63.  Each cylinder
	    is 8225kB.
	    Disk label type: msdos
	    Number  Start       End         Type      File system  Flags
	    1       0,1,0       130,254,62  primary   reiserfs     boot
	    2       131,0,0     261,254,62  primary   linux-swap
	    3       262,0,0     14945,254,62 extended
	    5       262,2,0     905,254,62  logical   reiserfs

	    (parted) unit mb print
	    Disk geometry for /dev/hda: 0MB - 122942MB
	    Disk label type: msdos
	    Number  Start   End     Size    Type      File system  Flags
	    1       0MB     1078MB  1077MB  primary   reiserfs     boot
	    2       1078MB  2155MB  1078MB  primary   linux-swap
	    3       2155MB  122935MB 120780MB extended
	    5       2155MB  7452MB  5297MB  logical   reiserfs

-------------------------------------------------------------------------------------------------------------

3 Related information
If you want to find out more information, please see the GNU Parted web site.

These files in the Parted distribution contain further information:

  * ABOUT-NLS - information about using Native Language Support, and the Free Translation Project.
  * AUTHORS - who wrote what.
  * ChangeLog - record of changes made to Parted.
  * COPYING - the GNU General Public License, the terms under which GNU Parted may be distributed.
  * COPYING.DOC - the GNU Free Documentation Licence, the term under which Parted's documentation may be
    distributed.
  * INSTALL ? how to compile and install Parted, and most other free software

-------------------------------------------------------------------------------------------------------------


---
http://www.thegeekstuff.com/2011/09/parted-command-examples/

9 Linux Parted Command Examples ? mkpart, mkpartfs, resize partitions

by Balakrishnan Mariyappan on September 28, 2011

[hard-disk]Parted is a GNU utility, which is used to manipulate the hard disk partitions.

Using parted, you can add, delete, and edit partitions and the file systems located on those partitions. You
can also clone partitions.

This article explains 9 practical parted command examples.

Warning: Parted utility manipulates the hard disk partition table and saves the changes immediately. So, don 
  t delete, modify, add, or do anything to your partition, if you don   t know what you are doing. You will
lose your data! There is no undo button for your rescue!

1. Select the hard disk to be parted
When you execute parted command without any argument, by default it selects the first hard disk drive that is
available on your system.

In the following example, it picked /dev/sda automatically as it is the first hard drive in this system.
	# parted
	GNU Parted 2.3
	Using /dev/sda
	Welcome to GNU Parted! Type 'help' to view a list of commands.
	(parted)

To choose a different hard disk, use the select command as shown below.
	(parted) select /dev/sdb

It will throw the following error message when it doesn't find the given hard disk name.
	Error: Error opening /dev/sdb: No medium found
	Retry/Cancel? y

2. Display all Partitions Using print
Using the print command, you can view all the available partitions in the selected hard disk. The print
command also displays hard disk properties such as model, size, sector size and partition table as shown
below.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   269GB   2682MB  logical   ext4
	 7      269GB   270GB   524MB   logical   ext4
	 8      270GB   366GB   96.8GB  logical                   lvm
	 6      366GB   370GB   3999MB  logical   linux-swap(v1)
	 9      370GB   500GB   130GB   logical   ext4

3. Create Primary Partition in Selected HDD Using mkpart
mkpart command is used to create either primary or logical partition with the START and END disk locations.
The below example creates partition with size around 15GB. The START and END points passed to the mkpart
command are in the units of MBs.
	(parted) mkpart primary 106 16179

You can also enable boot option on a partition as shown below. Linux reserves 1-4 or 1-3 partition number for
primary partition and the extended partition starts from number 5.
	(parted) set 1 boot on

4. Create Logical Partition in Selected HDD Using mkpart
Use mkpart command to create a new partition of a specific size. This will create the partition of a specific
type such as primary, logical or extended without creating the file system.

Before creating the partition, execute a print command to view the current layout.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical   ext2

Use mkpart to create a new logical partition with 127GB size as shown below.
	(parted) mkpart logical 372737 500000

Execute the print command to view the new layout as shown below.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical   ext2
	 9      373GB   500GB   127GB   logical

	(parted)

5. Create a File System on Partition Using mkfs
If you use fdisk command to partition your hard disk, you need to exit the fdisk utility, and use the mkfs
external program to create a file system on the partition.

However using parted utility, you can also create filesystem. Use the parted's mkfs command to create a file
system on a partition. You should be careful while doing this, as all the existing data in the partition will
be lost during the file system creation. The supported filesystems in parted are ext2, mips, fat16, fat32,
linux-swap, reiserfs (if libreiserfs is installed).

Let us change the file system of partition number 8 (that is shown in the print output below) from ext4 to
ext2 file system.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical   ext4
	 9      364GB   500GB   136GB   logical   ext4

As shown below, use the mkfs command to change the file system type of partition number 8. mkfs command will
prompt you for partition number and file system type.
	(parted) mkfs
	WARNING: you are attempting to use parted to operate on (mkfs) a file system.
	parted's file system manipulation code is not as robust as what you'll find in
	dedicated, file-system-specific packages like e2fsprogs.  We recommend
	you use parted only to manipulate partition tables, whenever possible.
	Support for performing most operations on most types of file systems
	will be removed in an upcoming release.
	Warning: The existing file system will be destroyed and all data on the
	partition will be lost. Do you want to continue?
	Yes/No? y
	Partition number? 8
	File system type?  [ext2]? ext2

Execute the print command again, to verify that the file system type for partition number 8 was changed to
ex2.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical   ext2
	 9      364GB   500GB   136GB   logical   ext4

	(parted)

6. Create Partition and Filesystem together Using mkpartfs
Using mkpartfs parted command, you can also create a partitions with a specific filesystem. This is similar
to mkpart, but with the additional feature of creating file system on a partition.

Before mkpartfs following is the layout of the partitions.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical

In the following example, mkpartfs will create a new fat32 partition of size 127GB.
	(parted) mkpartfs logical fat32 372737 500000
	WARNING: you are attempting to use parted to operate on (mkpartfs) a file system.
	parted's file system manipulation code is not as robust as what you'll find in
	dedicated, file-system-specific packages like e2fsprogs.  We recommend
	you use parted only to manipulate partition tables, whenever possible.
	Support for performing most operations on most types of file systems
	will be removed in an upcoming release.

As you see below, the partition number 9 is successfully created.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical
	 9      373GB   500GB   127GB   logical   fat32           lba

	(parted)

7. Resize Partition from One Size to Another Using resize
Using resize parted command, you can increase or decrease the partition size of a partition as shown in the
example below.
	(parted) resize 9
	WARNING: you are attempting to use parted to operate on (resize) a file system.
	parted's file system manipulation code is not as robust as what you'll find in
	dedicated, file-system-specific packages like e2fsprogs.  We recommend
	you use parted only to manipulate partition tables, whenever possible.
	Support for performing most operations on most types of file systems
	will be removed in an upcoming release.
	Start?  [373GB]? 373GB
	End?  [500GB]? 450GB

As shown above, parted command will always warn whenever you are attempting to do something dangerous (i.e :
rm, resize, mkfs).

The size of partition 9 is actually reduced from 127GB to 77GB. Verify that the partition is resized properly
using the print command as shown below.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical
	 9      373GB   450GB   77.3GB  logical   fat32           lba

Parted allows you to type unambiguous abbreviation for commands like 'p' for print, 'sel' for select,etc.

8. Copy Data from One Partition to Another Using cp
The entire data from one partition can be copied to another partition using the cp command. You should also
remember that the content of the destination will be deleted before copy starts. Make sure that the
destination partition has enough size to hold the data from the source partition.

Using the 'p' command (print) to display the current partition layout.
	(parted) p
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   234GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical   ext2
	 9      373GB   450GB   77.3GB  logical   fat32           lba
	10      461GB   500GB   39.2GB  logical   ext2

It is recommended to unmount both source and destination partition before doing copy. In this example we are
going to copy the content from partition 8 to partition 10.

The following shows the content of the corresponding partitions before copy.
	# mount /dev/sda8 /mnt
	# cd /mnt
	# ls -l
	total 52
	-rw-r--r-- 1 root root     0 2011-09-26 22:52 part8
	-rw-r--r-- 1 root root    20 2011-09-26 22:52 test.txt

	# umount /mnt
	# mount /dev/sda10 /mnt
	# cd /mnt
	# ls -l
	total 48
	-rw-r--r-- 1 root root     0 2011-09-26 22:52 part10

Use the parted cp command to copy partition 8 to partition 10 as shown below.
	(parted) cp 8 10
	WARNING: you are attempting to use parted to operate on (cp) a file system.
	parted's file system manipulation code is not as robust as what you'll find in
	dedicated, file-system-specific packages like e2fsprogs.  We recommend
	you use parted only to manipulate partition tables, whenever possible.
	Support for performing most operations on most types of file systems
	will be removed in an upcoming release.
	growing file system... 95%      (time left 00:38)error: block relocator should have relocated 517

The following shows the content of the partition 10 after the copy. As you see below, the content of
partition 8 is copied over (overwritten) to the partition 10.
	# mount /dev/sda10 /mnt
	# cd /mnt
	# ls -l
	total 52
	-rw-r--r-- 1 root root     0 2011-09-26 22:52 part8
	-rw-r--r-- 1 root root    20 2011-09-26 22:52 test.txt

Note: When you copy across partitions of different filesystem(for example src : ext2 and dst : ext4), the
destination partition's file system is actually converted to the file system of source partition (i.e : ext2).

9. Remove Partition from a Selected Hard Disk Uusing rm
To delete an unwanted or unused partition, use the parted rm command and specify the partition number as
shown below.
	(parted) rm
	Partition number? 9
	(parted)

After the above rm command, the partition number 9 deleted, and the print command will show you the list of
available partitions in /dev/sda disk as shown below.
	(parted) print
	Model: ATA WDC WD5000BPVT-7 (scsi)
	Disk /dev/sda: 500GB
	Sector size (logical/physical): 512B/4096B
	Partition Table: msdos

	Number  Start   End     Size    Type      File system     Flags
	 1      1049kB  106MB   105MB   primary   fat16           diag
	 2      106MB   15.8GB  15.7GB  primary   ntfs            boot
	 3      15.8GB  266GB   251GB   primary   ntfs
	 4      266GB   500GB   23GB   extended
	 5      266GB   316GB   50.0GB  logical   ext4
	 6      316GB   324GB   7999MB  logical   linux-swap(v1)
	 7      324GB   344GB   20.0GB  logical   ext4
	 8      344GB   364GB   20.0GB  logical   ext2


	 
---
https://wiki.archlinux.org/index.php/GNU_Parted

GNU Parted

From ArchWiki

Installation
Install the parted package. For a graphical interface, install the gparted package, the graphical frontend to
parted.

Usage
Parted has two modes: command line and interactive. Parted should always be started with:
	# parted device

where device is the hard disk device to edit (for example /dev/sda). If you omit the device argument, parted
will attempt to guess which device you want.

Command line mode
In command line mode, this is followed by one or more commands. For example:
	# parted /dev/sda mklabel gpt mkpart P1 ext3 1MiB 8MiB

Note: Options (like --help) can only be specified on the command line.

Interactive mode
Interactive mode simplifies the partitioning process and reduces unnecessary repetition by automatically
applying all partitioning commands to the specified device.

In order to start operating on a device, execute:
	# parted /dev/sdx

You will notice that the command-line prompt changes from a hash (#) to (parted): this also means that the
new prompt is not a command to be manually entered when running the commands in the examples.

To see a list of the available commands, enter:
	(parted) help

When finished, or if wishing to implement a partition table or scheme for another device, exit from parted
with:
	(parted) quit

After exiting, the command-line prompt will change back to #.

If you do not give a parameter to a command, Parted will prompt you for it. For example:
	(parted) mklabel
	New disk label type? gpt

Rounding
Since many partitioning systems have complicated constraints, Parted will usually do something slightly
different to what you asked. (For example, create a partition starting at 10.352Mb, not 10.4Mb) If the
calculated values differ too much, Parted will ask you for confirmation. If you know exactly what you want,
or to see exactly what Parted is doing, it helps to specify partition endpoints in sectors (with the "s"
suffix) and give the "unit s" command so that the partition endpoints are displayed in sectors.

As of parted-2.4, when you specify start and/or end values using IEC binary units like 'MiB', 'GiB', 'TiB',
etc., parted treats those values as exact, and equivalent to the same number specified in bytes (i.e., with
the 'B' suffix), in that it provides no 'helpful' range of sloppiness. Contrast that with a partition start
request of '4GB', which may actually resolve to some sector up to 500MB before or after that point. Thus,
when creating a partition, you should prefer to specify units of bytes ('B'), sectors ('s'), or IEC binary
units like 'MiB', but not 'MB', 'GB', etc.

Partitioning
Create new partition table

You need to (re)create the partition table of a device when it has never been partitioned before, or when you
want to change the type of its partition table. Recreating the partition table of a device is also useful
when the partition scheme needs to be restructured from scratch.

Open each device whose partition table must be (re)created with:
	# parted /dev/sdx

To then create a new MBR/msdos partition table for BIOS systems, use the following command:
	(parted) mklabel msdos

To create a new GPT partition table for UEFI systems instead, use:
	(parted) mklabel gpt

Partition schemes
Notes: duplicates much content (Discuss in Talk:GNU Parted#)
You can decide the number and size of the partitions the devices should be split into, and which directories
will be used to mount the partitions in the installed system (also known as mount points). The mapping from
partitions to directories is the partition scheme, which must comply with the following requirements:

  * At least a partition for the / (root) directory must be created.
  * When using a UEFI motherboard, one EFI System Partition must be created

In the examples below it is assumed that a new and contiguous partitioning scheme is applied to a single
device. Some optional partitions will also be created for the /boot and /home directories: see also Arch
filesystem hierarchy for an explanation of the purpose of the various directories; if separate partitions for
directories like /boot or /home are not created, these will simply be contained in the / partition. Also the
creation of an optional partiton for swap space will be illustrated.

If not already open in a parted interactive session, open each device to be partitioned with:
	# parted /dev/sdx

The following command will be used to create partitions:
	(parted) mkpart part-type fs-type start end

  * part-type is one of primary, extended or logical, and is meaningful only for MBR partition tables.
  * fs-type is an identifier chosen among those listed by entering help mkpart as the closest match to the
    file system that you will use. The mkpart command does not actually create the file system: the fs-type
    parameter will simply be used by parted to set a 1-byte code that is used by boot loaders to "preview"
    what kind of data is found in the partition, and act accordingly if necessary. See also Wikipedia:Disk
    partitioning#PC partition types.

    Tip: Most Linux native file systems map to the same partition code (0x83), so it is perfectly safe to
    e.g. use ext2 for an ext4-formatted partition.

  * start is the beginning of the partition from the start of the device. It consists of a number followed by
    a unit, for example 1M means start at 1MiB.
  * end is the end of the partition from the start of the device (not from the start value). It has the same
    syntax as start, for example 100% means end at the end of the device (use all the remaining space).

Warning: It is important that the partitions do not overlap each other: if you do not want to leave unused
space in the device, make sure that each partition starts where the previous one ends.
Note: parted may issue a warning like:

Warning: The resulting partition is not properly aligned for best performance.
Ignore/Cancel?

In this case, read Partitioning#Partition alignment and follow #Alignment to fix it.

The following command will be used to flag the partition that contains the /boot directory as bootable:
	(parted) set partition boot on

  * partition is the number of the partition to be flagged (see the output of the print command).

UEFI/GPT examples
In every instance, a special bootable EFI System Partition is required.

If creating a new EFI System Partition, use the following commands (the recommended size is 512MiB):
	(parted) mkpart ESP fat32 1MiB 513MiB
	(parted) set 1 boot on

The remaining partition scheme is entirely up to you. For one other partition using 100% of remaining space:
	(parted) mkpart primary ext4 513MiB 100%

For separate / (20GiB) and /home (all remaining space) partitions:
	(parted) mkpart primary ext4 513MiB 20.5GiB
	(parted) mkpart primary ext4 20.5GiB 100%

And for separate / (20GiB), swap (4GiB), and /home (all remaining space) partitions:
	(parted) mkpart primary ext4 513MiB 20.5GiB
	(parted) mkpart primary linux-swap 20.5GiB 24.5GiB
	(parted) mkpart primary ext4 24.5GiB 100%

BIOS/MBR examples
For a minimum single primary partition using all available disk space, the following command would be used:
	(parted) mkpart primary ext4 1MiB 100%
	(parted) set 1 boot on

In the following instance, a 20GiB / partition will be created, followed by a /home partition using all the
remaining space:
	(parted) mkpart primary ext4 1MiB 20GiB
	(parted) set 1 boot on
	(parted) mkpart primary ext4 20GiB 100%

In the final example below, separate /boot (100MiB), / (20GiB), swap (4GiB), and /home (all remaining space)
partitions will be created:
	(parted) mkpart primary ext3 1MiB 100MiB
	(parted) set 1 boot on
	(parted) mkpart primary ext3 100MiB 20GiB
	(parted) mkpart primary linux-swap 20GiB 24GiB
	(parted) mkpart primary ext3 24GiB 100%

Resizing Partitions
Warning: Partitions that are being resized must be unmounted and not in use. If it cannot be done (e.g. the
partition that mounts to /), use a live media/rescue system.
Note:
  * You can only move the end of the partition with parted.
  * As of parted v4.2 resizepart may need the use of #Interactive mode.[1]
  * These instructions apply to partitions that have ext2, ext3 or ext4 filesystems.

If you are growing a partition, you have to first resize the partition and then resize the filesystem on it,
while for shrinking the filesystem must be resized before the partition to avoid data loss.

Growing partitions
To grow a partition (in parted interactive mode):
	(parted) resizepart number end

Where number is the number of the partition you are growing, and end is the new end of the partition (which
needs to be larger than the old end).

Then, to grow the filesystem on the partition:
	# resize2fs /dev/sdaX size

Where sdaX stands for the partition you are growing, and size is the new size of the partition.

Shrinking partitions
To shrink the filesystem on the partition:
	# resize2fs /dev/sdaX size

Where sdaX stands for the partition you are shrinking, and size is the new size of the partition.

Then shrink the partition (in parted interactive mode):
	(parted) resizepart number end

Where number is the number of the partition you are shrinking, and end is the new end of the partition (which
needs to be smaller than the old end).

When done, use the resizepart command from util-linux to tell the kernel about the new size:
	# resizepart device number size

Where device is the device that holds the partition, number is the number of the partition and size is the
new size of the partition.

Warnings
Parted will always warn you before doing something that is potentially dangerous, unless the command is one
of those that is inherently dangerous (viz., rm, mklabel and mkpart).

Alignment
When creating a partition, parted might warn about improper partition alignment but does not hint about
proper alignment. For example:
	(parted) mkpart primary fat16 0 32M
	Warning: The resulting partition is not properly aligned for best performance.
	Ignore/Cancel?

The warning means the partition start is not aligned. Enter "Ignore" to go ahead anyway, print the partition
table in sectors to see where it starts, and remove/recreate the partition with the start sector rounded up
to increasing powers of 2 until the warning stops. As one example, on a flash drive with 512B sectors, Parted
wanted partitions to start on sectors that were a multiple of 2048, which is 1 MiB alignment.

If you want parted to attempt to calculate the correct alignment for you, specify the start position as 0%
instead of some concrete value. To make one large ext4 partition, your command would look like this:
	(parted) mkpart primary ext4 0% 100%

Tips and tricks
Dual booting with Windows XP

If you have a Windows XP partition that you would like to move from drive-to-drive that also happens to be
your boot partition, you can do so easily with GParted and keep Windows happy simply by deleting the
following registry key PRIOR to the partition move:
	HKEY_LOCAL_MACHINE\SYSTEM\MountedDevices

Reference to this little gem here.

Fixing messed-up partition order
Notes: Merge note to fdisk? Cf. http://serverfault.com/questions/36038/
reread-partition-table-without-rebooting (Discuss in Talk:GNU Parted#)

See Fdisk#Sort_partitions.
Note: You must run partprobe as root or reboot the system in order for the kernel to read the new partition
table!

Check alignment
On an already partitioned disk, you can use parted to verify the alignment of a partition on a device. For
instance, to verify alignment of partition 1 on /dev/sda:
	# parted /dev/sda
	(parted) align-check optimal 1
	1 aligned

See also

  * GNU parted - Parted User's Manual
  * How to align partitions for best performance using parted
  * Resize an ext3/ext4 partition
  * Official GParted forums

Retrieved from "https://wiki.archlinux.org/index.php?title=GNU_Parted&oldid=453955"
