filename: howto_progress-of-running-cp_20160622.txt
http://unix.stackexchange.com/questions/66795/how-to-check-progress-of-running-cp

[29]How to check progress of running cp?

   Is it possible to check the progress of running cp process? Some processes respond to various KILL
   signals so that you can check what is their status. I know that I can run cp with parameter -v but
   what if forgot to do that, cp is running for a very long time and I want to know which file is being
   copied, or how many were already copied.

***   
11 Answers 11

***
   Yes, by running stat on target file and local file, and get a file size,

   i.e stat -c "%s" /bin/ls

   And you get the percentage of data copied by comparing the two value, that's it

   In a very basic implementation that will look like this:
<code>
	function cpstat()
	{
	  local pid="${1:-$(pgrep -xn cp)}" src dst
	  [[ "$pid" ]] || return
	  while [[ -f "/proc/$pid/fd/3" ]]; do
	    read src dst < <(stat -L --printf '%s ' "/proc/$pid/fd/"{3,4})
	    (( src )) || break
	    printf 'cp %d%%\r' $((dst*100/src))
	    sleep 1
	  done
	  echo
	}
</code>

***
   On recent versions of Mac OS X you can just hit CTRL+T to see progress. From the [51]OSX 10.6 man
   page for cp(1):
 "If cp receives a SIGINFO (see the status argument for stty(1)) signal,
 the current input and output file and the percentage complete will be
 written to the standard output."

   Hitting CTRL+T is equivalent to signaling the current process with SIGINFO on BSD-ish machines,
   including OSX.

   This works for [52]dd(1) as well.

***
   I don't think Linux has this SIGINFO mechanism, and don't see anything in the [53]GNU man page for
   cp(1) about signals that can be used to report progress.

***   
   When you're copying a lot of files, du -s /path/to/destination or find /path/to/destination | wc -l
   gives you an idea of how much has already been done.

   You can find out which file is being copied with lsof -p1234 where 1234 is the process ID of cp.
   Under many systems, pgrep -x cp reports the process IDs of all running processes named cp. This may
   not be very useful as the order in which the files inside a given directory are copied is essentially
   unpredictable (in a large directory under Linux, ls --sort=none will tell you; with a directory tree,
   try find).

   lsof -p1234 also tells you how many bytes cp has already read and written for the current file, in
   the OFFSET column.

   Under Linux, there are IO usage statistics in /proc/$pid/io (again, use the PID of the cp process for
   $pidf). The rchar value is the total number of bytes that the process has read, and wchar is the
   number of bytes that the process has written. This includes not only data in files but also metadata
   in directories. You can compare that figure with the approximate figure obtained with du
   /path/to/source (which only counts file data). read_bytes and write_bytes only include what has been
   read or written from storage, i.e. it excludes terminal diagnostics and data already in cache or
   still in buffers.

***
   for real time: watch lsof -p1234 – [62]mchid Oct 31 '14 at 14:09

***   
   Or all in one go: watch lsof -p`pgrep -x cp` – [63]Mike Nov 10 '14 at 21:11

***   
   One of my favorite tricks for this (under Linux) is to find out the PID of the cp process (using ps |
   grep cp or similar), and then to look in /proc/$PID/fd/ and /proc/$PID/fdinfo/.
	$ cp -r y z
	^Z
	$ ls -l /proc/8614/fd
	lrwx------ 1 jander jander 64 Aug  2 15:21 0 -> /dev/pts/4
	lrwx------ 1 jander jander 64 Aug  2 15:21 1 -> /dev/pts/4
	lrwx------ 1 jander jander 64 Aug  2 15:20 2 -> /dev/pts/4
	lr-x------ 1 jander jander 64 Aug  2 15:21 3 -> /home/jander/y/foo.tgz
	l-wx------ 1 jander jander 64 Aug  2 15:21 4 -> /home/jander/z/foo.tgz

   This will show you what files the process has open. If you want to see how far into the file the
   process is...
	$ cat /proc/8614/fdinfo/3
	pos:    105381888
	flags:  0500000

   the pos parameter is the position of the read (or write) pointer, in bytes.

***   
   A relatively new tool that does exactly that is [67]cv (coreutils viewer).

   What it is?

     This tool can be described as a Tiny Dirty Linux Only* C command that looks for coreutils basic
     commands (cp, mv, dd, tar, gzip/gunzip, cat, ...) currently running on your system and displays
     the percentage of copied data

   How it does it?

     It simply scans /proc for interesting commands, and then use fd/ and fdinfo/ directories to find
     opened files and seek position, and reports status for the biggest file.

***     
   This util is now called progress: [71]github.com/Xfennec/progress – [72]Taavi Ilves Oct 4 '15 at

***   
   There are a few things you can do. You could attach strace to it to see what it's doing (output may
   be copious!):
	strace -p [pid of cp]

   or you could get lsof to tell you which files it currently has open:
	lsof -p [pid of cp]

   If you're running a big recursive cp, you could use pwdx to get the current working directory, which
   may give you some idea of how it's doing:
	pwdx [pid of cp]

***
   What you can do is check the files at destination.

   If your cp commands is something like cp -a <my_source> <my_dest_folder> I would check which files
   are already copied in <my_dest_folder> and each file size, so I can see the progress. If the
   <my_source> is a bit complex (several layers of directories) then a small script would be able to
   check the status. Although such a script could consume a bit of I/O that would then not be used by
   the cp process.

***   
   This tool is a Linux utility command that looks for coreutils basic commands (cp, mv, dd, tar,
   gzip/gunzip, cat, etc.) currently running on your system and displays the percentage of copied data:

***
   While the OP has specifically mentioned the ability to see how the "cp" command is progressing, it
   must be said that other utilities are better for this particular issue.

   For example:
	rsync -avP FROM TO

   will show the progress of copying the FROM file/folder to the TO file/FOLDER.

	# rsync -avP Video.mp4  /run/media/user1/3.8G/

	sending incremental file list
	Video.mp4
	    565,170,046 100%   51.23MB/s    0:00:10 (xfr#1, to-chk=0/1)

	sent 565,308,115 bytes  received 134 bytes  5,210,214.28 bytes/sec
	total size is 565,170,046  speedup is 1.00
     ________________________________________________________________________________________________

   And rsync will tell you how much it's copied (and the transfer rate) along the way. It works for
   single files or folder both on the same machine or across the network.

***
   You may also use [90]pipeviewer.
	for f in *; do
	  pv $f > destination/$f
	done

***
   You can send a signal to the process:
kill -SIGUSR1 pid

   It is even more useful to create a script that polls until you press Ctrl-C or the process finished:
	while [ : ] ; do kill -SIGUSR1 $1 && sleep 1m || exit ; done

   Works for dd. Doesn't work for cp. Maybe you have to use another signal. I once tried SIGINFO, but it
   doesn't seem to exist any more on the Intel platform.

   
   
---
http://unix.stackexchange.com/questions/65077/is-it-possible-to-see-cp-speed-and-percent-copied

[29]Is it possible to see cp speed and percent copied?

***
   You could use rsync instead of cp. It has a --progress option. – [37]frostschutz Feb 17 '13 at 14:15

***
   Using rsync with --progress just made me figure out what is happening. It gets stuck when it reaches
   the 100%, and then last a couple of minutes in end up. I think is the same that is happening with
   nautilus. Anyway that is another question already, so the best answer for this question is the rsync
   --progress, it shows size, %, speed and elapsed time. – [39]Ayozint Feb 17 '13 at 15:16

   I have a question about the rsync --progress. Assume that I have the directory A with files a and b
   and the empty directory B, when I copy A to B it shows the progress of each file, i.e. the progress
   of a and the progress of b. Is there any way to show the overall progress? – [40]Ayozint Feb 17 '13
   at 15:33

   one problem with rsync is that it runs slower than a pure copy. On my big server, the difference is
   60MB/s and 300MB/s respectively. – [41]pdwalker Nov 15 '14 at 17:37

***   
   If you allow other tools than cp it's surely possible. For a single file you can use pv. It's a small
   tool providing nice statistics.
	pv inputfile > outputfile

   If you have multiple files or directories you can use tar:
	tar c sourceDirectory | pv | tar x -C destinationDirectory

   You can wrap it in a shell function. It's less to type and you get semantics close to the ones of cp.
   Here's a very simple (and not error-proof!) function:
	cpstat () {
	  tar c "$1" | pv | tar x -C "$2"
	}

   Note that some versions of tar don't support the abovementioned syntax (e.g. Solaris tar) and you
   have to use the following variant:
	cpstat () {
	  tar cf - "$1" | pv | (cd "$2";tar xf -)
	}

   You call it like this
	cpstat sourceDirectory destinationDirectory

   You can enhance it further, so that pv provides an estimation of the remaining time.

   Another solution (as frostschutz mentioned in a comment) is to use rsync with the --progress option:
	rsync --progress -a sourceDirectory destinationDirectory

***
   This will give you transfer speed, but not ETA, because pv doesn't know how much data will come
   through the pipe. You can specify this using -s. E.g. first do du -sh sourceDirectory to get a
   (rough) idea, and then pass it to pv, like this: pv -s 100m. – [51]Jan Fabry May 11 '14 at 15:25

***   
   --info=progress2 gives you directory level progress statistics. – [52]AlexLordThorsen Dec 5 '14 at

   Rsync has a flag called progress2 which shows the overall %.

   rsync --info=progress2 source dest

***
   --info=progress2 still hasn't made it into a default repository and here it is 2015. Seems like a
   good idea. – [59]Lonniebiz Apr 1 '15 at 8:27

***
   --info=progress2 finally included on version 3.1.0 protocol version 31. Maybe you could edit your
   answer, yzT. – [60]Sopalajo de Arrierez May 9 '15 at 21:14

***
   nice but last 5 times longer than cp – [61]xamiro Dec 7 '15 at 19:27

***   
   rsync works the best for showing the progress during the copying progress.

   ex:
	rsync -avh --progress sourceDirectory destinationDirectory

 ***
   As explained in other answers, cp doesn't provide that functionality. However, [67]progress (formerly
   called cv) is a small tool which is very helpful in providing this missing feature.

     This tool can be described as a Tiny Dirty Linux Only* C command that looks for coreutils basic
     commands (cp, mv, dd, tar, gzip/gunzip, cat, ...) currently running on your system and displays
     the percentage of copied data.

   I've been using it for the past few months and it's solid.

***
   Scenario: We have a very large directory-structure we want to copy, so we issue the command cp -R
   sourcedir destdir in one terminal window.

   Open another terminal window or push the process to the background (Ctrl+Z,bg<CR>), then let's make a
   progress indicator the ghetto way:

   We first get the total size of the directory structure we want to copy, you do this with:
	du -sh /path/sourcedirectory/

   Convert the result to gigabytes (G), then substitute the n for the result you got in the variable
   sourcesize. Once you've inserted the sourcesize and destdir (destination directory), run the command
   below.
while true; do sourcesize=n destdir=/path/destinationdirectory/ copyprogress="$(export | du -sh $destdir | \
awk '{print $1}' | sed 's/[^0-9.]*//g' )" ; echo "scale=3 ; $copyprogress / $sourcesize * 100" | bc | \
xargs echo -n ; echo % completed ; sleep 10 ; done

   This will print the progress every 10 seconds with messages like:
	0.100% completed
	0.200% completed
	0.300% completed
	... etc

   I'm aware that this solution did not address the speed of copying, but it would be possible to add
   that by by expanding the commands above, possibly making it into a bash script so it would be easier
   to read. For instance by checking how much data is copied pr. n time unit, the speed should be
   trivial to calculate and display.

***   
   This is actually perfect for my use case, so thanks for posting it! I want to know about the progress
   of copying a huge directory with thousands of files, not just one file, so the other solutions don't
   really help me. – [78]Ibrahim Apr 10 '15 at 18:09

***
   To improve on Marco's answer, today I wrote this version of cpstat, so you can copy many directories
   and use the last parameter as the destination path. Note that if you use a relative deep path as
   source, you can, thanks to tar, automatically create the same dependent directory tree.
	function cpstat () {

	    tar -cf - "${@: 1: $#-1}" |
	    pv -s "$( du -cs -BK --apparent-size "${@: 1: $#-1}" |
		      tail -n 1 |
		      cut -d "$(echo -e "\t")" -f 1)" |
	    ( cd "${@: $#}"; tar -xf - )

	;}

***
   You could [85]background the cp and list the size while waiting for cp to finish.

***
   This tool is a Linux utility command that looks for coreutils basic commands (cp, mv, dd, tar,
   gzip/gunzip, cat, etc.) currently running on your system and displays the percentage of copied data:

***
   Another simple solution is to just [97]watch the output folder as follows:
	watch -n 10 --differences du -sk --apparent-size <WATCHED_FOLDER>

   This handy utility will run du and highlight the differences.

   One other potential solution would be to write a simple script that loops, calling du and spitting
   out a rough estimate of the throughput.

***
   I found this to use, worked great:
	sudo watch lsof -p`pgrep -x cp`

	
---	