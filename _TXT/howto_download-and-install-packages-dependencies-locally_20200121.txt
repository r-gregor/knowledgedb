filename: howto_download-and-install-packages-dependencies-locally_20200121.txt
https://www.ostechnix.com/download-packages-dependencies-locally-ubuntu/

Download Packages With Dependencies Locally In Ubuntu
January 13, 2020

   A while ago, we discussed how to Install Softwares offline in Ubuntu. In that guide, we explained
   how can you download packages in an Internet-enabled system, and install them offline in another
   system that has slow or no Internet connection. In this tutorial, we will see how to download
   packages with dependencies locally in Ubuntu and its derivatives.

   Using this method, we can download a .DEB package along with all required dependencies without
   actually installing it. This way we can download packages from one system and install them later in
   the same system itself or any other system that has no Internet connection. We can also download
   packages for different architecture systems. For example, it is possible to download the 32 bit
   packages from a 64 bit system and vice versa. Alright, without further ado, let us get started, shall
   we?

Download Packages With Dependencies Locally In Ubuntu
   We can do this in two methods. I tested this guide on Ubuntu 16.04 and 18.04 LTS desktop editions. I
   worked just fine.

Method 1:
   This is the simplest and straight-forward method than all other other methods given below.

   To download a package with all dependencies, without installing them, just run:
$> sudo apt-get install --download-only <package_name>

   For instance, let us download the Vim package with all required dependencies, without installing
   them, using command:
$> sudo apt-get install --download-only vim

   Sample output:
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
ctags vim-doc vim-scripts
The following NEW packages will be installed:
vim
0 upgraded, 1 newly installed, 0 to remove and 82 not upgraded.
Need to get 1,152 kB of archives.
After this operation, 2,852 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 vim amd64 2:8.0.1453-1ubuntu1.1 [1,152 kB]
Fetched 1,152 kB in 3s (372 kB/s)
Download complete and in download only mode

   As you see in the above output, we have downloaded Vim package will all dependencies, but didn't
   actually install it.

   All downloaded files will be saved in /var/cache/apt/archives directory.

   Just copy the entire cache folder on any USB or transfer them via network to a system that you wanted
   to install the packages in it.

   To install the downloaded packages, go to the cache folder and install them as shown below.
$> sudo dpkg -i *

   See? It is easier than you ever thought, isn't? Yes it is!

   However, this method only works if the system that you use to download the packages do not have the
   main package or its dependencies installed locally.

   In such cases, use "apt-rdepends" to get all packages. If apt-rdepends is not installed yet, install
   it using command:
$> sudo apt install apt-rdepends

   And then download the main package (i.e. Vim in our case) along with all dependencies using command:
$> apt download $(apt-rdepends vim | grep -v "^ ")

   This command will recursively download all required packages.

   Just in case if you encountered with an error like below:
E: Can't select candidate version from package debconf-2.0 as it has no candidate

   Try this command instead:
$> apt-get download $(apt-rdepends vim | grep -v "^ " | sed 's/debconf-2.0/debconf/g')

   This command will download Vim with all needed packages and save them in the current working
   directory.

   To install all downloaded packages, run:
$> sudo dpkg -i *

Method 2:
   First, download the dependencies of the package you wanted to download.

   To display list of all dependencies of a package, for example Python, run:
$> sudo apt-cache depends python

   Sample output:
python
PreDepends: python-minimal
Depends: python2.7
Depends: libpython-stdlib
Conflicts: <python-central>
Breaks: update-manager-core
Suggests: python-doc
Suggests: python-tk
Replaces: python-dev

   Let us download python package with its dependencies to our local disk.

   To do so, first create a directory to save the packages.
$> mkdir python

   Go to the directory:
$> cd python

   And then run:
$> for i in $(apt-cache depends python | grep -E 'Depends|Recommends|Suggests' | cut -d ':' -f 2,3 | \
sed -e s/'<'/''/ -e s/'>'/''/); do sudo apt-get download $i 2>>errors.txt; done

   The above command will download Python package along with all required dependencies and saves them in
   the current working directory. This command will also save any errors in the errors.txt file.

   Let us view the downloaded files using 'ls' command:
$> ls

   Sample output:
errors.txt
libpython-stdlib_2.7.11-1_amd64.deb
python2.7_2.7.11-7ubuntu1_amd64.deb
python-doc_2.7.11-1_all.deb
python-minimal_2.7.11-1_amd64.deb
python-tk_2.7.11-2_amd64.deb

   As you see in the above output, python package with all its dependencies has been downloaded.

   Just copy them to your USB drive and install the python packages on any offline system as shown
   below.

   Mount the USB drive, go to the location where you have mounted the drive, and run the following
   command to install Python.
$> sudo dpkg -i *

Download packages with dependencies locally for a specific architecture
   You might notice that the above command has downloaded the 64 bit packages. It is because I am
   downloading them from 64 bit Ubuntu system. What if you want to download packages for 32 bit arch
   systems? It's also possible.

   First, enable the architecture you want in your Ubuntu system using command:
$> sudo dpkg --add-architecture i386

   If you don't add the architecture, you will get the following error message when try to download the
   packages.
E: No packages found

   After enabling the Architecture of your choice, run the following command to download specific
   architecture related packages.
$> for i in $(apt-cache depends python:i386 | grep -E 'Depends|Recommends|Suggests' | cut -d ':' -f 2,3 | \
sed -e s/'<'/''/ -e s/'>'/''/); do sudo apt-get download $i 2>>errors.txt; done

   As you see in the above output, I have added the architecture 'i386' with 'apt-cache' command.

   Sample output:
Get:1 http://in.archive.ubuntu.com/ubuntu xenial/main i386 python-minimal i386 2.7.11-1 [28.2 kB]
Fetched 28.2 kB in 1s (25.8 kB/s)
Get:1 http://in.archive.ubuntu.com/ubuntu xenial/main i386 python2.7 i386 2.7.11-7ubuntu1 [220 kB]
Fetched 220 kB in 1s (116 kB/s)
Get:1 http://in.archive.ubuntu.com/ubuntu xenial/main i386 libpython-stdlib i386 2.7.11-1 [7,664 B]
Fetched 7,664 B in 0s (13.3 kB/s)
Get:1 http://in.archive.ubuntu.com/ubuntu xenial/main i386 python-tk i386 2.7.11-2 [28.0 kB]
Fetched 28.0 kB in 1s (24.8 kB/s)

   Let us check the downloaded packages.
$> ls

   Sample output:
errors.txt
libpython-stdlib_2.7.11-1_i386.deb
python2.7_2.7.11-7ubuntu1_i386.deb
python-minimal_2.7.11-1_i386.deb
python-tk_2.7.11-2_i386.deb

   See? The above command downloaded 32 bit packages only.

   You know now how to download packages with dependencies in Ubuntu systems. This method is same for
   all DEB-based systems. Hope this helps.


---
