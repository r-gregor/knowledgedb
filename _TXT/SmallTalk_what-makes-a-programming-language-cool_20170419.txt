filename: SmallTalk_what-makes-a-programming-language-cool_20170419.txt
https://hackernoon.com/what-makes-a-programming-language-cool-f40401f0f929

What makes a programming language “cool?”

   There are many programming languages today vying for your consideration, especially the “hot” (or
   “cool!”) new languages like Ceylon, Crystal, Dart, Elixir, Elm, Go, Haxe, Julia, Kotlin, Rust, Swift,
   TypeScript. And new ones seem to be popping up every month!

   Even some of the not-so-new languages are grabbing attention, languages like Clojure, Erlang, F#,
   Haskell, Lua, OCaml, Scala. Some of these languages are decades old!

   So it got me wondering: What makes a programming language, regardless of age, trendy and exciting?
   Why does 27-year-old Haskell still get tongues wagging? How can 31-year-old Erlang instill passion
   after all these years? What’s with the love for 24-year-old Lua? F# is still talked about fondly,
   even though it has 12 years of history behind it.

   Of course, one of the main reasons is the growing interest in functional programming over the past
   several years. Thus, people are examining all of their functional options, including languages that
   predate Java, which often gets unfairly labelled as old and senescent.

   Erlang is notable for OTP (Open Telecom Platform) and its Erlang runtime system (BEAM), which makes
   Erlang remarkable for writing distributed, fault-tolerant applications.

   Clojure capitalizes on the power and elegance of Lisp. Lua is popular in the game industry as an
   embeddable language. Kotlin and Scala attempt to improve on Java, the most popular programming
   language on the planet.

   Dart and Elm offer alternatives to widely despised JavaScript. Rust promises memory safety. Julia is
   a technological tour de force.

   So it would seem that these languages are trendy for various reasons. Except for functional
   programming, there really isn’t a pattern. Even 7-year-old Go has risen to the top of the language
   charts by virtue of being simple and minimalist, without any language design innovation whatsoever!

   Then how do we explain the fact that Smalltalk gets so little attention today? It has everything
   going for it…
    1. Smalltalk is one of the smallest, simplest, and most elegant programming languages ever created.
       Its entire syntax can fit on the back of a postcard! This makes Smalltalk very, very easy to
       learn. And because of this, Smalltalk presents extremely low, if not nonexistent, cognitive
       friction while coding. You don’t have to give the language a second thought; you just focus on
       the problem at hand.
    2. Smalltalk has a wonderful “live coding and debugging” IDE/runtime environment that makes
       programming exceedingly quick and productive. You can make live changes to a running program and
       immediately see the results. This almost completely eliminates the edit-compile-test-debug cycle
       that hampers nearly all other programming languages. And it’s wonderfully easy to use. There is
       nothing else quite like it in the modern programming world.
    3. [14]Smalltalk is one of the most productive programming languages. More than twice as productive
       as Python and Ruby. More than 3X as productive as JavaScript!
    4. Despite its relative obscurity, Smalltalk is an eminently practical industrial language! It’s
       been used commercially for over three decades. Its well-known users include the likes of
       JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina,
       [15]Orient Overseas Container Lines, Siemens AG, and so on. Check out [16]ALLSTOCKER and [17]ATMs
       in Moscow streets.
    5. Smalltalk is scalable. In the early 2000s, the U.S. joint military used Smalltalk to write a
       million-line battle simulation program called JWARS. It actually outperformed a similar
       simulation called STORM written in C++ by the U.S. Air Force.
    6. [18]Smalltalk has a rich heritage. It was the first programming language to popularize OOP, and
       it remains the finest example of an OOP language (which is why it spawned a whole generation of
       OOP languages like Java, Python, PHP, Ruby, Perl, Objective-C, CLOS, Dart, Scala, Groovy, etc.).
       Smalltalk is OOP done right.
    7. Smalltalk continues to be actively developed, especially through the [19]Pharo project and
       [20]Inria. And through [21]Amber for the web and [22]Redline for the JVM. Smalltalk has been
       modernized for the Twenty-First Century.
    8. By the way, Smalltalk also has first-class functions and closures, so it’s good for functional
       programming, too!

   Smalltalk is extremely versatile (being a general-purpose programming language and all):
     * Smalltalk is good for data science and numerical computing, thanks to [23]PolyMath and
       [24]Roassal
     * Smalltalk is good for Internet of Things (example, [25]Pharo Pi)
     * Smalltalk is good for [26]ERP (enterprise resource planning)
     * Smalltalk is good for [27]machine learning
     * Smalltalk is good for [28]natural language processing
     * Smalltalk is good for [29]virtual reality (example, [30]3D Immersive Collaboration)
     * Smalltalk can even be used to [31]script the Unreal game engine
     * Smalltalk is being used to [32]fight Ebola!
     * Smalltalk is used in [33]wide-scale data visualization for medicines in 16 countries
     * Smalltalk can be used to [34]write cross-platform mobile apps (2% in JS, 98% in Smalltalk!)
     * [35]Smalltalk is good for server-side web development, thanks to the Seaside web framework

   And I’ve just barely scratched the surface!

   Smalltalk deserves a place among the “hot” (or “cool!”) new languages like Elixir, Elm, Go, Julia,
   Kotlin, Rust. After all, Pharo is only 9 years old.


---
https://www.quora.com/What-is-a-list-of-programming-languages-ordered-from-easiest-to-hardest-to-learn

What is a list of programming languages ordered from easiest to hardest to learn?

Practical languages:
1.  Forth – A stack-based language whose only operations are pushing and popping elements onto and off the stack.
	If a language can be simpler and easier, then I don’t know what it is.
2.  Smalltalk – It virtually has no syntax! Smalltalk syntax can fit on the back of a postcard. See What makes
	a programming language “cool?” – Hacker Noon.
3.  Scheme – The simplest of the Lisps, it’s very clean and elegant. The syntax takes a bit of getting used to
	(all those damn parentheses!), but it’s not inherently difficult.
4.  Go – It was designed to be small, simple, and minimalist so that it can be really, really easy to learn. At
	the same time, features like goroutines and interfaces make it enormously powerful.
5.  Python – Easy enough to learn for non-technical types like data scientists, machine learning researchers,
	and those in the financial industry.
6.  PHP – Easy enough to learn, but man, what a mess!
7.  C – Pretty simple language, sort of a portable assembler.
8.  Java – Yeah, it’s verbose, but it’s not that hard to learn.
9.  C# – Java on steroids.
10. Ruby – Easy enough to get started, but it can get tough really quick.
11. Perl – Known as a “write only” language.
12. JavaScript – This abortion of a language is a digital minefield for beginners.
13. Haskell – The best and hardest way to learn functional programming. (Scheme is easier.)
14. Swift – Big and complex. It’s a lot like Scala. (See Scala.)
15. Scala – It’s not quite a write-only language, but it’s uncomfortably close.
16. C++ – The biggest and most complex programming language on the planet. Is it any wonder that it’s the
	hardest to learn?

I don’t do impractical languages like Brainfuck, Logo, and Whitespace.
