filename: howto_create-img-of-HDD-without-free-space_20160211.txt
http://stackoverflow.com/questions/19355036/how-to-create-an-img-image-of-a-disc-sd-card-without-including-free-space

How to create an .IMG image of a disc (sd card) without including free space?

   In linux we can do dd
# dd if=/dev/sdb of=bckup.img

   but if the disk is of 32GB with only 4GB is used; the 32GB image file is a waste of space. Is there
   anyway or any tool to create images with valid data only?

   what concerns most is time taken to write 32GB of image file to sd card rather the size itself.

***
   Pretty good and simple way to deal with this is simply pipe it via gzip, something like this:
# dd if=/dev/sdb | gzip > backup.img.gz

   This way your image will be compressed and most likely unused space will be squeezed to almost
   nothing.

   You would use this to restore such image back:
# cat backup.img.gz | gunzip | dd of=/dev/sdb

   One note: if you had a lot of files which were recently deleted, image size may be still large
   (deleting file does not necessarily zeroes underlying sectors). You can wipe free space by creating
   and immediately deleting large file containing zeros:
# cd /media/flashdrive
# dd if=/dev/zero of=bigfile bs=1M     # let it run and quit by disk full error
# rm bigfile

***
   I want to avoid this time consuming zero making process – [45]neckTwi Oct 14 '13 at 7:39

***   
   Well, you can simply tar cvfz mybackup.tar.gz /media/flashdrive. It will capture everything except
   for bootable USB drives they will lose bootable status – [46]mvp Oct 14 '13 at 7:41

***   
   Yes, tar would lose MBR, and you will need to use [47]boot-repair to make drive bootable again. But,
   other than that, tar should preserve everything and OS should be fully usable (but be sure to run tar
   as root!). – [48]mvp Oct 14 '13 at 7:52

***
   The best thing to do is

   1.Copy all the files from all partitions using
mkdir myimage
mkdir myimage/partition1
mkdir myimage/partition2
sudo cp -Rrf --preserve=all /media/mount_point_partition1/* myimage/partition1/
sudo cp -Rrf --preserve=all /media/mount_point_partition2/* myimage/partition2/

   2.Extract MBR using following command
sudo dd if=/dev/sdX of=myimage/mbr.img bs=446 count=1

   replace /dev/sdX with corresponding device.

   3.Partition the destination disk into partitions with sizes greater than copied data and should be of
   same format and same flags using gparted. Please google how to partition a disk.

   4.Now mount the freshly formatted and partitioned disk. Mostly you need to just connect the disk to
   system and you can find the mounted partitions in /media folder.

   5.Now copy the previously copied data to destination partitions using following commands
sudo cp -Rrf --preserve=all myimage/partition1/* /media/mount_point_partition1/
sudo cp -Rrf --preserve=all myimage/partition2/* /media/mount_point_partition2/

   6.Now copy back MBR using
sudo dd if=myimage/mbr.img of=/dev/sdX bs=446 count=1

   Now njoy Ur new disk!

***
   You may already know what size image you want to create. If not, you can get a good idea from df:
df -H --total /

   Substitute / with a space-separated list of all the mount points relating to the disk partitions.

   A more accurate way might be to use fdisk or your preferred partition editor and get busy with a
   calculator.
$ fdisk -l /dev/mmcblk0

Disk /dev/mmcblk0: 7.4 GiB, 7948206080 bytes, 15523840 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00057540

Device         Boot  Start     End Sectors  Size Id Type
/dev/mmcblk0p1        2048  186367  184320   90M  c W95 FAT32 (LBA)
/dev/mmcblk0p2      186368 3667967 3481600  1.7G  5 Extended
/dev/mmcblk0p5      188416 3667967 3479552  1.7G 83 Linux

   Total used space in bytes = end sector of last partition X sector size (here that's 3667967 x 512).

   Total used space in GB = total used space in bytes / 1024^3 (here that's 1.749023 GB).

   If you decide, for example, that your image should be exactly 2 GB, the following command will do
   that:
dd if=/dev/mmcblk0 of=/path/to/pi_updated.img bs=1M count=2048

   The resulting image will also include the random noise beyond the greatest extent of the last
   partition.

   Don't forget to sudo the above commands if your account doesn't already have sufficient privileges.

   For my purposes, I don't need an image that is perfectly trimmed down to the last bit of data so when
   the real size is 1.75 GB then a 2 GB image is near enough for me. This cuts out the other 6 GB (or 30
   GB or whatever the device has spare) of unused space that would otherwise be in the image.

   I have seen advice in many places that dd should not be performed on a mounted partition and I
   followed that because it seems intuitively correct; it does seem rather like trying to sketch
   yourself making a sketch in a mirror with the sketch you're making also visible in the sketch. It's a
   bit sketchy.

---
