filename: /c/Users/gregor.redelonghi/Dropbox/ODPRTO/_TXT/zip-and-7zip-tutorial-multif_20170109.txt
https://www.howtoforge.com/tutorial/how-to-install-and-use-7zip-file-archiver-on-ubuntu-linux/

How to install and use 7zip file archiver on Ubuntu Linux

On this page

   If you are a Microsoft Windows user, and your work involves sending/receiving large files over
   network, there's quite a possibility that you'd have at-least heard of (if not used) the 7zip tool.
   For those who aren't aware, 7zip is an award-winning, open-source file archiver that is claimed to
   have "a high compression ratio."

   Aside from 7z, the tool supports several other formats. For example, you can use it to package and
   extract the following type of files: 7z, XZ, BZIP2, GZIP, TAR, ZIP, and WIM. However, that's not it,
   as the 7zip tool can also be used to unpackage several other file types, including AR, ARJ, CAB, CHM,
   CPIO, CramFS, DMG, EXT, FAT, GPT, HFS, IHEX, ISO, LZH, LZMA, MBR, MSI, NSIS, NTFS, QCOW2, RAR, RPM,
   SquashFS, UDF, UEFI, VDI, VHD, VMDK, WIM, XAR and Z.

   "Compression ratio in the new 7z format is 30-50% better than ratio in ZIP format," the tool's
   official documentation says. Following are some of the other features of 7zip that the official
   website lists:
     * For ZIP and GZIP formats, 7-Zip provides a compression ratio that is 2-10 % better than the ratio
       provided by PKZip and WinZip
     * Strong AES-256 encryption in 7z and ZIP formats
     * Self-extracting capability for 7z format
     * Integration with Windows Shell
     * Powerful File Manager
     * Powerful command line version
     * Plugin for FAR Manager
     * Localizations for 87 languages

   In case you're wondering which awards 7zip has won, from the tool's Wikipedia page:  In 2007,
   SourceForge.net granted it community choice awards for "Technical Design" and for "Best Project". In
   2013, 7-Zip received Tom's Hardware Elite award due to superiority in speed and compression ratio.

   Enough reasons to learn how to use it, right? But, is it available on Linux? Well, yes - there is a
   port of the command line version to Linux/Unix, and it's dubbed p7zip.

   In this article, we'll discuss how to install and use p7zip in Linux. Please note that all the
   instructions and commands mentioned in this tutorial have been tested on Ubuntu 16.04 LTS.

Download and Installation of 7zip
   You can easily download and install the p7zip tool in Ubuntu using the following commands:

   sudo apt-get install p7zip-full

   sudo apt-get install p7zip-rar

7zip Usage
   The p7zip package installs a command line utility named 7z. Following is its syntax:

   7z [adeltux] [-] [SWITCH] <ARCHIVE_NAME> <ARGUMENTS>...

   If that seems a bit complex, don't worry, because we'll explain 7z's usage in baby steps.

   To begin with, let's understand how we can create a .7z archive using this command. For this, suppose
   there's a directory named files which contains four files:

   List the files

   Now, the task is to package all these 4 files in a .7z file, say files.7z.  So to do this, enter the
   files directory on the command line, and execute the following command:

   $ 7z a files.7z *

   The following screenshot shows the command in action:

   Pack files with 7zip
   After the above command is run successfully, a file named files.7z will be created in your current
   working directory.

   Show files
   Now, suppose you accidentally/intentionally delete the four files present in the files directory:

   Remove the unpacked files
   And want to retrieve them by extracting the .7z archive file we just created. This can be done using
   the 'e' command line option in the following way:

   7z e files.7z

   Extract a 7zip archive
   That was the basics of archiving and extracting using the 7z tool. Now suppose, the requirement is to
   create a .zip file. This can be easily done using the following command:

   7z a [zipfile-name] [files-to-be-zipped]

   For example:

   Create a zip file with 7zip
   The 7zip tool also allows you to easily update an archive file after its creation. For example,
   suppose you've created an archive and then realized that something more needs to be added to it, then
   instead of deleting the old archive and creating a new one, you can simply update it with the new
   stuff that you want to add.

   For example, suppose the files directory now contains a total of 5 text files, and I want to add the
   file5 to the files.7z archive as well. Then I can do that using the 'u' option in the 7z command.
   Here's the command in action:

   Update 7zip archive
   One way to confirm that the updated archive now contains a total of five files is to manually check
   the updated archive by double clicking on it. But if you want to do this through the command line,
   then you can use the 'l' option provided by the 7z command.

     List files from 7zip archive
   So as you can see in the screenshot above, the 7z command confirmed that the files.7z archive has
   been updated with the new text file.

   Moving on, should you want to delete something from an archive created by 7z, you can do that as
   well. In this case, the command line option to be used is 'd'. The overall syntax of the command,
   however, remains the same.

   7z d [archive-name] [file-to-be-deleted]
   Keep in mind that you'll have to add a '-r' switch to the above command in case the file in question
   resides inside a sub-directory that has been archived, although for some reason, the official 7z
   documentation discourages users from using this switch (I tested it several times, and it works for
   me as expected).

   Following is some important information that the creators of 7z utility want you to keep in mind:
DO NOT USE the 7-zip format for backup purpose on Linux/Unix because :
- 7-zip does not store the owner/group of the file.
On Linux/Unix, in order to backup directories you must use tar :
- to backup a directory  : tar cf -  directory  |  7za  a  -si  directory.tar.7z
- to restore your backup : 7za x -so directory.tar.7z | tar xf -
If  you  want  to send files and directories (not the owner of file) to others Unix/MacOS/Windows users, you c
an use the 7-zip format.
example : 7za a directory.7z  directory
Do not use "-r" because this flag does not do what you think.
Do not use directory/* because of ".*" files (example  :  "directory/*" does not match "directory/.profile")

   For more information on 7z, head to the command's man page.

Conclusion
   As you'd have observed over the course of this tutorial, 7zip is a really capable archiving tool.
   It's incarnation on Linux - p7zip - is not only easy to install but fairly easy to use as well. A lot
   of documentation is available in the form of man page, [30]FAQ and support pages on the tool's
   official website, as well as information on its Sourceforge listing. If you're impressed with
   7zip, do give it a try.



---
https://linux.die.net/man/1/7z

7z(1) - Linux man page

Name

   7z - A file archiver with highest compression ratio

Synopsis

   7z [adeltux] [-] [SWITCH] <ARCHIVE_NAME> <ARGUMENTS>...

Description

   [INS: :INS]
   7-Zip is a file archiver with the highest compression ratio. The program supports 7z (that implements
   LZMA compression algorithm), ZIP, CAB, ARJ, GZIP, BZIP2, TAR, CPIO, RPM and DEB formats. Compression
   ratio in the new 7z format is 30-50% better than ratio in ZIP format.
   7z uses plugins to handle archives.

Function Letters

   a
          Add
   d
          Delete
   e
          Extract
   l
          List
   t
          Test
   u
          Update
   x
          eXtract with full paths

Switches

   -ai[r[-|0]]{@listfile|!wildcard}
          Include archives
   -ax[r[-|0]]{@listfile|!wildcard}
          eXclude archives
   -bd
          Disable percentage indicator
   -i[r[-|0]]{@listfile|!wildcard}
          Include filenames
   -l
          don't store symlinks; store the files/directories they point to (CAUTION : the scanning stage
          can never end because of recursive symlinks like 'ln -s .. ldir')
   -m{Parameters}
   -mhe=on|off
          7z format only : enables or disables archive header encryption (Default : off)
   -o{Directory}
          Set Output directory
   -p{Password}
          Set Password
   -r[-|0]
          Recurse subdirectories (CAUTION: this flag does not do what you think, avoid using it)
   -sfx[{name}]
          Create SFX archive
   -si
          Read data from StdIn (eg: tar cf - directory | 7z a -si directory.tar.7z)
   -so
          Write data to StdOut (eg: % echo foo | 7z a dummy -tgzip -si -so > /dev/null)
   -slt
          Sets technical mode for l (list) command
   -t{Type}
          Type of archive (7z, zip, gzip, bzip2 or tar. 7z format is default)
   -v{Size}[b|k|m|g]
          Create volumes
   -u[-][p#][q#][r#][x#][y#][z#][!newArchiveName]
          Update options
   -w[path]
          Set Working directory
   -x[r[-|0]]]{@listfile|!wildcard}
          Exclude filenames
   -y
          Assume Yes on all queries

Diagnostics

   7-Zip returns the following exit codes:

   0
          Normal (no errors or warnings detected)
   1
          Warning (Non fatal error(s)). For example, some files cannot be read during compressing. So
          they were not compressed
   2
          Fatal error
   7
          Bad command line parameters
   8
          Not enough memory for operation
   255
          User stopped the process with control-C (or similar)

Backup and limitations

   DO NOT USE the 7-zip format for backup purpose on Linux/Unix because : - 7-zip does not store the
   owner/group of the file.

   On Linux/Unix, in order to backup directories you must use tar : - to backup a directory : tar cf -
   directory | 7za a -si directory.tar.7z
   - to restore your backup : 7za x -so directory.tar.7z | tar xf -

   If you want to send files and directories (not the owner of file) to others Unix/MacOS/Windows users,
   you can use the 7-zip format.

   example : 7za a directory.7z directory

   Do not use "-r" because this flag does not do what you think.

   Do not use directory/* because of ".*" files (example : "directory/*" does not match
   "directory/.profile")

Example 1

   7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on archive.7z dir1
          adds all files from directory "dir1" to archive archive.7z using "ultra settings"
   -t7z
          7z archive
   -m0=lzma
          lzma method
   -mx=9
          level of compression = 9 (Ultra)
   -mfb=64
          number of fast bytes for LZMA = 64
   -md=32m
          dictionary size = 32 megabytes
   -ms=on
          solid archive = on

Example 2

   7z a -sfx archive.exe dir1
          add all files from directory "dir1" to SFX archive archive.exe (Remark : SFX archive MUST end
          with ".exe")

Example 3

   7z a -mhe=on -pmy_password archive.7z a_directory
          add all files from directory "a_directory" to the archive "archive.7z" (with data and header
          archive encryption on)

See Also

   7za(1), 7zr(1), [3]bzip2(1), [4]gzip(1), [5]zip(1)



---
https://www.ibm.com/developerworks/community/blogs/6e6f6d1b-95c3-46df-8a26-b7efd8ee4b57/entry/how_to_use_7zip_on_linux_command_line144?lang=en

How to use 7zip on Linux command Line

   7zip is award winning open source file archiver. Besides operating on the 7z format, it supports many
   other popular archive formats and can seamlessly work on them. The 7zip project was started in 1999
   by a Russian freelance programmer who is the developer and maintainer of this project. 7zip
   claims to have the highest compression ratio. As an end user, I have personally used 7zip many times
   and found it better than many other fellow archivers especially when compressing files into a 7z
   format. Its a great tool to have in your kitty so I decided to write a basic tutorial on how to use
   7zip through Linux command line.

   7zip is distributed under LGPL license as a free software to use. The version available for Linux is
   known as p7zip package. I am using Linux mint so the installation part of this tutorial would be most
   suited for Linux mint, Ubuntu and other debain Linux distributions while the examples are universal
   for any Linux distribution.

How to install p7zip package
   When I started exploring 7zip package on my Linux mint machine, soon I found that its not currently
   installed. So I decided to install it. The first command that I used to install this package was :

$ sudo apt-get install p7zip
[sudo] password for himanshu:
Reading package lists... Done
Building dependency tree
Reading state information... Done
p7zip is already the newest version.
0 upgraded, 0 newly installed, 0 to remove and 50 not upgraded.


   The output pointed that p7zip is already installed. Then I researched and bit and found that to
   install 7z archiver as a command line utility, I need to install the p7zip-full package. So I tried
   to install this package :

$ sudo apt-get install p7zip-full
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  p7zip-rar
The following NEW packages will be installed:
  p7zip-full
0 upgraded, 1 newly installed, 0 to remove and 50 not upgraded.
Need to get 1,419kB of archives.
After this operation, 3,662kB of additional disk space will be used.
WARNING: The following packages cannot be authenticated!
  p7zip-full
Authentication warning overridden.
Get:1 http://archive.ubuntu.com/ubuntu/ lucid/universe p7zip-full 9.04~dfsg.1-1 [1,419kB]
Fetched 1,419kB in 29s (48.0kB/s)

Selecting previously deselected package p7zip-full.
(Reading database ... 133376 files and directories currently installed.)
Unpacking p7zip-full (from .../p7zip-full_9.04~dfsg.1-1_amd64.deb) ...
Processing triggers for man-db ...
Setting up p7zip-full (9.04~dfsg.1-1) ...


   After both p7zip and p7zip-full are installed, you will see the following three command line
   utilities installed in your Linux box :
     * 7z
     * 7za
     * 7zr

   From p7zip wiki :

     The package includes three binaries, /usr/bin/7z, /usr/bin/7za, and /usr/bin/7zr. Their manpages
     explain the differences:
     7z uses plugins to handle archives.
     7za is a stand-alone executable. 7za handles fewer archive formats than 7z, but does not need any
     others.
     7zr is a stand-alone executable. 7zr handles fewer archive formats than 7z, but does not need any
     others. 7zr is a "light-version" of 7za that only handles 7z archives.

   One thing that was different at my end was that the utility 7zr was installed as part of p7zip
   package while the other two were installed as part of p7zip-full package. I still don't know the
   reason behind this.
   Anyway, now all the three utilities were present and this can be confirmed by the 'whereis' command.
$ whereis 7z
7z: /usr/bin/7z /usr/share/man/man1/7z.1.gz
$ whereis 7za
7za: /usr/bin/7za /usr/share/man/man1/7za.1.gz
$ whereis 7zr
7zr: /usr/bin/7zr /usr/share/man/man1/7zr.1.gz


   This was all about installation. Now lets try to explore the 7z utility. As we know that the 7z
   utility is the main utility, so we will discuss only 7z here.
   The syntax of 7z utility is :
7z [adeltux] [-] [SWITCH]  ...

7z command line examples
   In all the examples below, I'll use the following files :

$ ls
abc.txt  basic  bufferoverflow.c

   In the above output, 'basic' is a directory while the other two are files.

1. Create an archive
   This can be done by using the function letter 'a'.
   Here is a small example :
$ 7z a basic.7z basic

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)
Scanning

Creating archive basic.7z

Compressing  basic/helloworld.c
Compressing  basic/helloworld.o
Compressing  basic/helloworld.i
Compressing  basic/helloworld.s
Compressing  basic/helloworld

Everything is Ok

$ ls
abc.txt  basic  basic.7z  bufferoverflow.c

   So we can see that, using 7z an archive basic.7z was created for the directory 'basic'.

2. Extract an archive
   This can be done using the function letter 'e'.
   Lets extract the archive created in the previous example :
$ 7z e basic.7z

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Processing archive: basic.7z

Extracting  basic/helloworld.c
Extracting  basic/helloworld.o
Extracting  basic/helloworld.i
Extracting  basic/helloworld.s
Extracting  basic/helloworld
Extracting  basic

Everything is Ok

Folders: 1
Files: 5
Size:       27541
Compressed: 5805

$ ls
abc.txt  basic  basic.7z  bufferoverflow.c  helloworld  helloworld.c  helloworld.i  helloworld.o  helloworld.s
$

   So we see that basic.7z was extracted and all the files were extracted into the same folder. The
   files extracted are shown in bold in the output above.

3. List archive details
   This can be done by using the function letter 'l'.
   Here is an example :
$ 7z l basic.7z

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Listing archive: basic.7z

----
Path = basic.7z
Type = 7z
Method = LZMA BCJ
Solid = +
Blocks = 2
Physical Size = 5805
Headers Size = 232

   Date      Time    Attr         Size   Compressed  Name
------------------- ----- ------------ ------------  ------------------------
2012-09-09 16:47:17 ....A          192         3600  basic/helloworld.c
2012-09-09 16:47:17 ....A         1568               basic/helloworld.o
2012-09-09 16:47:17 ....A        16700               basic/helloworld.i
2012-09-09 16:47:17 ....A          577               basic/helloworld.s
2012-09-09 16:47:17 ....A         8504         1973  basic/helloworld
2012-09-09 16:47:17 D....            0            0  basic
------------------- ----- ------------ ------------  ------------------------
                                 27541         5573  5 files, 1 folders

   So we see that the details of the archive basic.7z were listed in the output.

4. Test integrity of the archive
   This can be done using the function letter 't'.
   Here is an example :
$ 7z t basic.7z basic

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Processing archive: basic.7z

Testing     basic/helloworld.c
Testing     basic/helloworld.o
Testing     basic/helloworld.i
Testing     basic/helloworld.s
Testing     basic/helloworld
Testing     basic

Everything is Ok

Folders: 1
Files: 5
Size:       27541
Compressed: 17566

   So we see that integrity check was done.

5. Update an existing archive
   This can be done using the function letter 'u'.
   Here is an example :
$ 7z u basic.7z basic

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Scanning

Updating archive basic.7z

Everything is Ok

   So we see that the output says that archive is already up to date. Lets now introduce a new file into
   the directory 'basic' and again the run the update command :
$ cp bufferoverflow.c basic/
$ ls basic/
bufferoverflow.c  helloworld  helloworld.c  helloworld.i  helloworld.o  helloworld.s
$ 7z u basic.7z basic

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Scanning

Updating archive basic.7z

Compressing  basic/bufferoverflow.c

Everything is Ok

$

   So firstly the file bufferoverflow.c was copied to directory 'basic' and then the update command was
   run again. It can be seen in the output that the archive was updated by compressing this new file and
   adding it to the archive.

6. Delete a file from the archive
   This can be done using the function letter 'd' along with the switch -r. This switch tells the 7zip
   utility to traverse the subdirectories.
   Here is an example :
$ 7z l basic.7z

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Listing archive: basic.7z

----
Path = basic.7z
Type = 7z
Method = LZMA BCJ
Solid = +
Blocks = 3
Physical Size = 6154
Headers Size = 269

   Date      Time    Attr         Size   Compressed  Name
------------------- ----- ------------ ------------  ------------------------
2012-09-09 16:47:17 ....A          192         3600  basic/helloworld.c
2012-09-09 16:47:17 ....A         1568               basic/helloworld.o
2012-09-09 16:47:17 ....A        16700               basic/helloworld.i
2012-09-09 16:47:17 ....A          577               basic/helloworld.s
2012-09-09 17:33:51 ....A          634          312  basic/bufferoverflow.c
2012-09-09 16:47:17 ....A         8504         1973  basic/helloworld
2012-09-09 17:33:34 D....            0            0  basic
------------------- ----- ------------ ------------  ------------------------
                                 28175         5885  6 files, 1 folders

$ 7z d basic.7z helloworld -r

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Updating archive basic.7z

Everything is Ok

$ 7z l basic.7z

7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_IN,Utf16=on,HugeFiles=on,2 CPUs)

Listing archive: basic.7z

----
Path = basic.7z
Type = 7z
Method = LZMA
Solid = +
Blocks = 2
Physical Size = 4165
Headers Size = 253

   Date      Time    Attr         Size   Compressed  Name
------------------- ----- ------------ ------------  ------------------------
2012-09-09 16:47:17 ....A          192         3600  basic/helloworld.c
2012-09-09 16:47:17 ....A         1568               basic/helloworld.o
2012-09-09 16:47:17 ....A        16700               basic/helloworld.i
2012-09-09 16:47:17 ....A          577               basic/helloworld.s
2012-09-09 17:33:51 ....A          634          312  basic/bufferoverflow.c
2012-09-09 17:33:34 D....            0            0  basic
------------------- ----- ------------ ------------  ------------------------
                                 19671         3912  5 files, 1 folders
$


   First we checked the files in the archive, next we tried to delete the 'helloworld' executable. Again
   when the entries in the archive were listed, no trace of 'helloworld' was found. So we can say that
   this file was successfully deleted from the archive.
   NOTE : Besides function letters that we used in the examples above, there are numerous switches also
   that we can use with this utility. For information on switches, you should go to the man page of 7z
   utility.
   An example, from the man page that describes the use of switches :
$7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on archive.7z dir1

adds all files from directory "dir1" to archive archive.7z using "ultra settings"

       -t7z   7z archive

       -m0=lzma
              lzma method

       -mx=9  level of compression = 9 (Ultra)

       -mfb=64
              number of fast bytes for LZMA = 64

       -md=32m
              dictionary size = 32 megabytes

       -ms=on solid archive = on

   So we see that switches can be used to customize the settings.

Some important points
   The following section from the man page is worth mentioning here :

   DO NOT USE the 7-zip format for backup purpose on Linux/Unix because :
   - 7-zip does not store the owner/group of the file.
   On Linux/Unix, in order to backup directories you must use tar :
   - to backup a directory :
   tar cf - directory | 7za a -si directory.tar.7z
   - to restore your backup :
   7za x -so directory.tar.7z | tar xf
   - If you want to send files and directories (not the owner of file) to others Unix/MacOS/Windows
   users, you can use the 7-zip format.
   example : 7za a directory.7z directory
   Do not use "-r" because this flag does not do what you think.
   Do not use directory/* because of ".*" files (example : "directory/*" does not match "directory/.prof
   ile")


---
https://www.lifewire.com/practical-examples-of-the-zip-command-2201158

Practical Examples Of The Zip Command
   Updated October 19, 2016

Introduction
   There are a number of different ways to compress files using the Linux command line. In this guide
   you will find practical examples showing how to use the zip command to compact and organize files
   within your file system.

   Common uses for zip files include the need to save space and for[48] copying a large number of files
   from one place to another.

   If you have 10 files which are all 100 megabytes in size and you need to transfer them to an ftp
   site, then depending on your upload speed this could take a considerable amount of time.

   If you compress all 10 files into a single zip archive and the compression reduces the file size to
   50 megabytes per file, then you only have to transfer half a gigabyte of data instead of the full
   gigabyte required to send an uncompressed file.

How To Create An Archive Of All the Files In A Folder
   To start with here is a simple command showing how to create an archive of all the files in the
   current folder.

   Imagine you had a folder of songs with the following MP3 files in it:

   CAPTION: AC/DC Highway To Hell

   Night Prowler.mp3
   Love hungry man.mp3
   Get It Hot.mp3
   Walk all over you.mp3
   Highway to hell.mp3
   If you want blood you got it.mp3
   Show down in flames.mp3
   Touch too much.mp3
   Beating around the bush.mp3
   Girls Got Rhythm.mp3


   To create an archive called ACDC_Highway_To_Hell.zip enter the following command:

     zip ACDC_Highway_To_Hell *

   Text will scroll up the screen showing the files as they are being added.

   Type ls -lt *.zip and you will see that the archive has been created.

How To Include Hidden Files In An Archive
   The previous command is fine for archiving all of the files in a folder but it only includes files
   that aren't hidden.

   But it's not always so simple. Imagine you wanted to zip up your home folder so that you can back it
   up to a USB drive or external hard drive.

   Running the command ls -lt will show a number of folders including Pictures, Templates, Music,
   Public etc.

   Now run the command ls -a. You will now see folders such as .gnome and .config which will also need
   to be included in a zip file. Your .bashrc file is also a hidden file.

   To compress all the files in a folder including the hidden files run the following command:

     zip home * .*

   This will create a file called home.zip with all the files within the home folder. (You must be in
   the home folder for this to work). The problem with this command is that it only includes the files
   in the home folder and not the folders, which brings us to the next example.

How To Archive All Files And Sub Folders In A Zip File
   To include all of the files and subfolders within an archive run the following command:

     zip -r home .

How To Add New Files To An Existing Zipped Archive
   If you want to add new files to an existing archive or update the files in an archive, simply use the
   same name for the archive file when running the zip command.

   For instance, imagine you had a music folder with four albums in it and you created an archive called
   music.zip to keep as a backup. Now imagine one week later you had downloaded two new albums.

   To add the new albums to the zip file, simply run the same zip command as you did the previous week.

   For example to create the original music archive run the following code:

     zip -r music /home/yourname/music/

   To add new files to the archive run the same command again.

   If the zip file had a list of files in it and one of the files on the disk had changed then the
   amended file will be updated within the zip file.

   You can also supply the -u command to update a zip file which does pretty much the same thing as the
   standard zip command but if the zip file doesn't already exist a warning message is displayed. This
   helps if you know you are supposed to be updating a file and accidentally enter the wrong zip file
   name.

How To Update The Existing Files In An Zipped Archive
   If you have a zip file that is supposed to contain the same file names every time and you want to
   update that file with any changes that have been made to those files then the -f switch helps you do
   this.

   For example imagine you had a zip file with the following files:
   /home/yourname/documents/file1
   /home/yourname/documents/file2
   /home/yourname/documents/file3
   /home/yourname/documents/file4
   /home/yourname/documents/file5
   /home/yourname/documents/file6


   Now imagine that during the week you added 2 new files and amended 2 files so that the folder
   /home/yourname/documents now looks like this:
   /home/yourname/documents/file1
   /home/yourname/documents/file2
   /home/yourname/documents/file3
   /home/yourname/documents/file4 (updated)
   /home/yourname/documents/file5 (updated)
   /home/yourname/documents/file6
   /home/yourname/documents/file7
   /home/yourname/documents/file8


   When you run the following command the zip file will contain the updated files (file4 and file5) but
   file7 and file8 will not be added.

     zip zipfilename -f -r /home/yourname/documents

How To Delete Files From An Zipped Archive
   So you created a massive zip file with hundreds of files and now realize that there are about four or
   five files within the zip file that you don't need to be there. Without having to zip up all those
   files again you can just run the zip command with the -d switch as follows:

     zip zipfilename -d "name of file in archive"

   For example, if you had a file in the archive with the name home/documents/test.txt you would delete
   it with this command:

     zip zipfilename -d home/documents/test.txt

How To Copy Files From One Zip File To Another
   If you have files in one zip file and you want to copy them to another zip file without extracting
   them first and re-zipping them, use the -u switch.

   If you realize that you have a zip file called "variousmusic.zip" with music from various artists one
   of which is AC/DC. you can copy the AC/DC songs out of the variousmusic.zip file into your ACDC.zip
   file using the following command:

     zip variousmusic.zip -U --out ACDC.zip "Back_In_Black.mp3"

   The above command copies the file "back in black" from variousmusic.zip to ACDC.zip. If the zip file
   you are copying to doesn't exist it will be created.

How To Use Pattern Matching And Piping To Create An Archive
   The next switch is a really useful one as it lets you use the output of other commands to insert
   files into your zip file. For instance, imagine you want to create a file called lovesongs.zip which
   contains every song which has the word love in the title.

   To find the files with love in the title you can use the following command:

     find /home/yourname/Music -name *love*

   The above command isn't 100% perfect because it picks up words like "clover" as well, but you get the
   idea. To add all the returned results from the above command to a zip file called lovesongs.zip
   simply run this command:

     find /home/yourname/Music -name *love* | zip lovesongs.zip -@

How To Create A Split Archive
   If you are backing up your computer but the only media you have available for backing up to is a
   set of blank DVDs, then you have a choice. You can keep zipping up files until the zip file is 4.8
   gigabytes (well just under) and burn the DVD, or you can create something called a [57]split
   archive which keeps creating a new archive in a set after it has reached the limit that you specify.

   For example:

     zip mymusic.zip -r /home/myfolder/Music -s 670m


How To Customise Progress Report Of Zipping Process
   There are various ways to customize the output that appears whilst zipping is in progress.

   The switches available are as follows:
     * -db = displays how many bytes have been zipped and how many are left to go
     * -dc = displays a count of files zipped and how many are left to go
     * -dd = displays dots for every 10 megabytes of file that has zipped
     * -ds = sets how often dots appear (ie 10m, 1g, 100k)
     * -du = displays the uncompressed size of each file

   For example:

     zip myzipfilename.zip -dc -r /home/music

How To Fix A Zip File
   If you have a zip archive which is broken, you can try and fix it using the -F command and if that
   fails the -FF command.

   This is useful if you have created a split archive using the -s switch and you have lost one of the
   archive files.

   For example, try this one first:

     zip -F myfilename.zip --out myfixedfilename.zip

   and then

     zip -FF myfilename.zip --out myfixedfilename.zip

How To Encrypt An Archive
   If you have sensitive information that you want to store in a zip file use the -e command to encrypt
   it. You will be asked to enter a password and to repeat the password.

   For example:

     zip myfilename.zip -r /home/wikileaks -e


How To Show What Will Be Zipped
   If you know you are going to be creating a large archive, make sure that the correct files are going
   to be added to the zip file you can see the expected results of a zip command by specifying the -sf
   switch.

   For example:

     zip myfilename.zip -r /home/music/ -sf

How To Test An Archive
   After backing up files to a zip file, it is tempting to save disk space by deleting the original
   files. Before you do that, it's a good idea to test the zip file works properly.

   You can use the -T switch to test that the zip file is valid.

   For example:

     zip myfilename.zip -T

   Output from this command when an archive is invalid may be something like:
     * zip warning: missing end signature--probably not a zip file

   Remember you can try the -F command to fix broken zip files.

   It is worth noting that the -T can produce false positives in that it says a zip file is corrupt even
   though when you open it you can extract all the files.

How To Exclude Files
   Sometimes you will want to exclude certain files from a zip file. For example if you have[58] copied
   the files from your phone or digital camera you will have a mixture of videos and images. You might
   wish to zip up the photos to photos.zip and videos to videos.zip.

   Here is one way to exclude the videos when creating photos.zip

     zip photos.zip -r /home/photos/ -x *.mp4

How To Specify Compression Level
   When you compress files into a zip file it works out whether you compress the file or just store it.
   mp3 files, for example, are already compressed so there is little point in compressing them
   further and thus they are usually just stored as is within a zip file.

   You can, however, specify a compression level between 0 and 9 which compresses a file further. This
   takes longer to do but can make significant space savings.

     zip myfiles.zip -r /home -5


---
https://www.cyberciti.biz/faq/zipping-linux-directories/

Zipping A Directory In Linux Terminal

   by Vivek Gite
   on October 31, 2007 last updated September 12, 2012
 
   How do I zip files in Linux so that I cam email them to my friend? How do I zip files on server using
   the shell prompt?
   zip is a compression and file packaging utility for Unix, Linux, VMS, MSDOS, OS/2, Windows NT, Minix,
   Atari and Macintosh, Amiga and Acorn RISC and many other operating systems.
   This utility is installed by default on most Linux computers and servers. The program is useful for
   packaging a set of files for distribution; for archiving files; and for saving disk space by
   temporarily compressing unused files or directories.

Syntax

   zip’s syntax is:
zip file.zip file1 file2
zip file.zip dir1
zip -option file.zip dir1

   zip file.zip file1 file2 zip file.zip dir1 zip -option file.zip dir1

   To zip directory called pics in your home directory (/home/you/pics), type the following command:
   $ zip -r myvacationpics.zip /home/you/pics/
   or
   $ zip -r myvacationpics /home/you/pics/
   The -r option recurse into directories (all files and directories inside pics) to produced zip file
   called myvacationpics.zip. You can travel the directory structure recursively starting at the current
   directory. In this example, all the files matching *.c in the tree starting at the current directory
   are stored into a zip archive named mycode.zip.
   zip -R mycode.zip "*.c"

   zip -R mycode.zip "*.c"

   Please note that *.c will match file.c, dir1/file.c and dir1/dir2/.c and so on.


---
https://www.cyberciti.biz/faq/linux-unix-extracting-specific-files/

Tar Extract a Single File(s) From a Large Tarball

   by Vivek Gite
   on December 5, 2008 last updated December 6, 2008

   Q. I’ve couple of large tarballs such as www.tar and images.tar. Is it possible to extract a single
   file or a list of files from a large tarball such as images.tar instead of extracting the entire
   tarball? How do I extract specific files under Linux / UNIX operating systems?

   A. GNU tar can be used to extract a single or more files from a tarball. To extract specific archive
   members, give their exact member names as arguments, as printed by -t option.

Extracting Specific Files
   Extract a file called etc/default/sysstat from config.tar.gz tarball:
   $ tar -ztvf config.tar.gz
   $ tar -zxvf config.tar.gz etc/default/sysstat
   $ tar -xvf {tarball.tar} {path/to/file}
   Some people prefers following syntax:
   tar --extract --file={tarball.tar} {file}
   Extract a directory called css from cbz.tar:
   $ tar --extract --file=cbz.tar css

Wildcard based extracting
   You can also extract those files that match a specific globbing pattern (wildcards). For example, to
   extract from cbz.tar all files that begin with pic, no matter their directory prefix, you could type:
   $ tar -xf cbz.tar --wildcards --no-anchored 'pic*'
   To extract all php files, enter:
   $ tar -xf cbz.tar --wildcards --no-anchored '*.php'

   Where,
     * -x: instructs tar to extract files.
     * -f: specifies filename / tarball name.
     * -v: Verbose (show progress while extracting files).
     * -j : filter archive through bzip2, use to decompress .bz2 files.
     * -z: filter archive through gzip, use to decompress .gz files.
     * –wildcards: instructs tar to treat command line arguments as globbing patterns.
     * –no-anchored: informs it that the patterns apply to member names after any / delimiter.

Further readings:
     * GNU tar man page


---
http://unix.stackexchange.com/questions/220586/extract-a-single-file-from-a-zip-file-only-knowing-the-extension

Extract a single file from a zip file only knowing the extension

   My first part of the requirement:

   I would like to extract a single file from ex1234.zip. The structure and contents of ex1234.zip:
ex1234 (directory)
    directory1
    ex1234 (directory)
    directory2
    ex1234.csv

   I want to be able to extract only ex1234.csv file but will not know the name.

   Second part is to able to do this for all exXXXX.zip that sit in the same directory.
ex1234.zip
ex3245.zip
ex8829.zip
exXXXX.zip…

   Output will be:
ex1234.csv
ex3245.csv
ex8829.csv
exXXXX.csv

   Real sample:
$ less CW2178470.zip
Archive:  CW2178470.zip
Zip file size: 26108 bytes, number of entries: 26
-rw----     2.0 fat      108 bl defN 15-Aug-04 09:37 CW2178470/CW2178470.csv
-rw----     2.0 fat     1363 bl defN 15-Aug-04 09:37 CW2178470/config/BusinessContactApprovers.csv
-rw----     2.0 fat      158 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/announcements.xml
-rw----     2.0 fat     1037 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/Plan/plan.xml
-rw----     2.0 fat      141 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/Plan/tasks.xml
-rw----     2.0 fat     2408 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/FI_Doc208411460_doc.xml
-rw----     2.0 fat      215 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/MessageBoard/nb_27482kst.26ihyzj_.htm
-rw----     2.0 fat     2364 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/MessageBoard/messageboard.xml
-rw----     2.0 fat     1250 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/team.xml
-rw----     2.0 fat    22016 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/Doc208411460.doc
-rw----     2.0 fat     9973 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/audithistory.xml
-rw----     2.0 fat     6731 bl defN 15-Aug-04 09:37 CW2178470/CW2178470/ws.xml
-rw----     2.0 fat      308 bl defN 15-Aug-04 09:37 CW2178470/xsd/WSFolder.xsd
-rw----     2.0 fat     4897 bl defN 15-Aug-04 09:37 CW2178470/xsd/Task.xsd
-rw----     2.0 fat      770 bl defN 15-Aug-04 09:37 CW2178470/xsd/ContractWorkspace.xsd
-rw----     2.0 fat     4754 bl defN 15-Aug-04 09:37 CW2178470/xsd/AuditHistory.xsd
-rw----     2.0 fat    25564 bl defN 15-Aug-04 09:37 CW2178470/xsd/CommonTypes.xsd
-rw----     2.0 fat     5657 bl defN 15-Aug-04 09:37 CW2178470/xsd/MessageBoard.xsd
-rw----     2.0 fat     2471 bl defN 15-Aug-04 09:37 CW2178470/xsd/Plan.xsd
-rw----     2.0 fat      337 bl defN 15-Aug-04 09:37 CW2178470/xsd/InternalContractWorkspace.xsd
-rw----     2.0 fat     1045 bl defN 15-Aug-04 09:37 CW2178470/xsd/SalesContractRequest.xsd
-rw----     2.0 fat     3133 bl defN 15-Aug-04 09:37 CW2178470/xsd/FolderItem.xsd
-rw----     2.0 fat      906 bl defN 15-Aug-04 09:37 CW2178470/xsd/ContractRequest.xsd
-rw----     2.0 fat     8973 bl defN 15-Aug-04 09:37 CW2178470/xsd/WorkspaceTypes.xsd
-rw----     2.0 fat     4645 bl defN 15-Aug-04 09:37 CW2178470/xsd/Team.xsd
-rw----     2.0 fat      781 bl defN 15-Aug-04 09:37 CW2178470/xsd/SalesContractWorkspace.xsd
26 files, 112005 bytes uncompressed, 21940 bytes compressed:  80.4%
(END)

***
   Can you do a less ex1234.zip and paste the exact output ? – neuron Aug 6 '15 at 16:32

   Was a bit lengthy but I added a real sample to the post that wouldn't fit here. – Pheanouk Pel
   Aug 6 '15 at 16:52

   Does the csv file name always match the zip file name? – Sobrique Aug 7 '15 at 11:44

   You'd have to write a script(let) that lists the contents of the zipfile, single out the exact file
   you want, and then extract just that one. Do it by hand, unless this is a routine task. If it is, use
   your favorite scripting language to cobble something together. – vonbrand Aug 7 '15 at 11:46
   add a comment |

***
   You could use unzip like this:
unzip -j file[.zip] [file] [-x xfile]

   where -j means junk paths, file[.zip] is your archive name, [file] is the archive member to be
   processed and [-x xfile] is the list of archive members to be excluded from processing. All these
   options are described in detail in the man page.
   So in your case, running for example:
unzip -j ex1234.zip '*/*.csv' -x '*/*/*'

   will extract in the current directory all files matching *.csv from depth level 2 in the ex1234.zip
   archive (excluding archive members from depth level 3 and below as '*/*/*' means paths that match at
   least two /).

   Now, to process all the archives in the current directory you could run:
for zipfile in *.zip; do unzip -j "$zipfile" '*/*.csv' -x '*/*/*'; done

   which extracts the .csv file from each archive in the current directory (that's why -j is needed).
   In your particular case, there's no .csv on level 1 depth so you could also run:
for zipfile in *.zip; do unzip -j "$zipfile" '*.csv' -x '*/*/*'; done

   which should yield the same result.
   To dry-run and see which files will be extracted (their archive paths) without actually extracting
   them, replace -j with -qql:
for zipfile in *.zip; do unzip -qql "$zipfile" '*/*.csv' -x '*/*/*'; done
     ________________________________________________________________________________________________

   As a side note, the -j option could be omitted iff the .csv files to be extracted were on depth level
   1 (i.e. no parent dir); in that case you could simply run:
for zipfile in *.zip; do unzip "$zipfile" '*.csv' -x '*/*'; done

***
   Tried with unzip provided by Debian:

   UnZip 6.00 of 20 April 2009, by Debian. Original by Info-ZIP.
for file in ex*.zip
do
  unzip -j $file '*.csv'
done

***
   This is a very good answer but is it possible to only limit to ex1234 directory (very first
   directory) because I do not want other CSV files that may exist in other folders. – Pheanouk Pel

***
   Use a FUSE-based filesystem to access the zip file as a directory tree. Mount each zip file, then
   access it with normal method (shell wildcards, cp command, etc.).

   With fuse-zip:
mkdir mnt
for z in *.zip; do
  fuse-zip -- "$z" mnt
  set mnt/*.csv
  if [ $# -gt 1 ]; then
    echo "Skipping $z because it contains multiple .csv files"
  elif ! [ -e "$1" ]; then
    echo "Skipping $z because it does not contain a .csv file"
  else
    cp -- "$1" "${z%.zip}.csv"
  fi
  fusermount -u mnt
done

   You can do the same with archivemount instead of fuse-zip.

   There's also AVFS which works differently: it creates a view of the whole filesystem under
   ~/.avfs; in this view, if you have an archive file /path/to/foo.zip, you can access it as a directory
   under the name ~/.avfs/path/to/foo.zip#.
mountavfs
cd "$HOME/.avfs$PWD"
for z in *.zip; do
  set -- "$z#/"*.csv
  if [ $# -gt 1 ]; then
    echo "Skipping $z because it contains multiple .csv files"
  elif ! [ -e "$1" ]; then
    echo "Skipping $z because it does not contain a .csv file"
  else
    cp "$1" "${z%.zip}.csv"
  fi
done

   If you use a shell with arrays and with a way to get an empty list when a wildcard doesn't match, you
   can get a slightly more readable script. For example, in ksh93, with fuse-zip:
#!/bin/ksh
mkdir mnt
for z in *.zip; do
  fuse-zip -- "$z" mnt
  csv=(~(N)"$z/"*.csv)
  if ((${#csv[@]} > 1)); then
    echo "Skipping $z because it contains multiple .csv files"
  elif ((${#csv[@]} == 0)); then
    echo "Skipping $z because it does not contain a .csv file"
  else
    cp -- "$1" "${z%.zip}.csv"
  fi
  fusermount -u mnt
done

   In zsh, use csv=($z/*.csv(N)). In bash, use csv=($z/*.csv) but first run shopt -s nullglob.

***
   Very thorough answer unfortunately our environment doesn't have either tools (fuse, AVFS) nor do I
   have authority over it. Thank you. – Pheanouk Pel Aug 7 '15 at 15:54
   add a comment |
   up vote 0 down vote

   You suggest that all the names have to match:
     * The ZIP filename
     * The directory name inside the ZIP file
     * The CSV file inside the directory

   In that case, try:
for zipfile in ./*.zip; do
    base="$(basename "$zipfile" .zip)"
    unzip "$zipfile" "$base/$base.csv"
done

***
   On the assumption that all the files match this pattern - from CW2178470.zip you need to always
   extract CW2178470/CW2178470.csv

   This is relatively easy:
for i in ./*.zip
do
   SERIAL=$(echo "$i" | sed -e 's,^.*/,,' -e 's,.zip$,,' )
   unzip "$i" "${SERIAL}/${SERIAL}.csv"
done


---
