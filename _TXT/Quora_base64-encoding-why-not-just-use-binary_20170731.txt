filename: Quora_base64-encoding-why-not-just-use-binary_20170731.txt
https://www.quora.com/What-is-the-purpose-of-base64-encoding-why-not-just-use-binary

   What is the purpose of base64 encoding, why not just use binary?

   The idea behind Base64 is very simple.

   Consider sending a message in binary. This transmission can be considered as composed by 8 bit
   characters so it is base256: each byte is a symbol from 0 to 255.

   The problem with this coding is that it cannot be attached to emails and similar channels as some
   characters have special meaning.

   Therefore instead of using 8 bit digits, the Base64 code uses 6 bit words, i.e. 64 combinations, but
   maps these 64 digits to ASCII characters from ‘A’ (meaning 0) to ‘/’ meaning 63.

   The advantage is that to use only legal ASCII characters, that are perfectly compatible with any
   channel, but to minimize the waste. In fact on 7 bit per byte channels, only one bit is lost, on 8
   bit per byte only two bits are lost.

   Example
   Suppose we want to code Base64 a 16 bit word, in hex 0xAB34.

   First of all let us transform this in binary: 0xA = 1010, 0xB= 1011, 0x3=0011 0x4=0100 so this number
   is 1010_1011_0011_0100.

   Now reorganize these bits in 6 bits chunks, starting from the MSB (Most Significant Bit, the leftmost
   bit): you get 101010_110011_010000 (I have left aligned the last digit, so I had to add two 0 bits to
   the right).

   Each of these 6 bit digits have the following decimal representation
101010 = 42
110011 = 51
010000 = 16

   To get the Base64 code, we must use the aforementioned table so
42->q
52->z
16->Q

   therefore the aforementioned hex word is transformed into the Base64 string “qzQ”.

   ***
   The “why” is simply because some forms of communication uses special meanings for certain characters.
   So sending binary means the communication method could interpret it wrongly.

   E.g. if any byte value of the binary sent over email reads the same as end-of-line markers (LineFeed
   0x0A or CariageReturn 0x0D) these could break the email itself. Actually email is an extreme case,
   it’s because messages are supposed to work no matter what’s on the sender’s side or the receiver. And
   since no-one can specify what “has” to be there, these are restricted to stuff which forms a lowest
   common denominator. E.g. some systems may even use an entirely different character encoding scheme,
   they may swap the bits around (little/big endian), they may use less or more bits per character, they
   may throw away the most significant bit, etc. etc. etc. Thus email (in particular the SMTP protocol
   for sending messages) uses a very restricted set of allowed character values, one defining factor is
   that all email is sent in 7-bit ASCII, meaning there is no means to send an unsigned byte value
   larger than 127 (even if discarding the problems with special case characters).

   There’s some other transport protocols with similar restrictions. E.g. the HTML in a web page and the
   HTTP protocol also doesn’t like raw binary data - it interferes similarly with the control signals.
   Others where this also caused issues is in stuff like NNTP (news bulletin message sharing). In
   effect, whenever two or more computers need to transfer data between one another, there is some sort
   of protocol stating how this data needs to be formatted. If the computers are near exact replicas,
   the protocol can be simplified to near direct binary (just packaged into chunks with control
   signals). But if there’s no restrictions on the type receiving or sending, then the protocol becomes
   much more complicated and restrictive.

   Therefore encodings have been designed which only make use of characters which do not have special
   meanings. Some early forms of this include UUEncode. Though base64 does pretty much the same thing.
   Other newer means of doing similar tends towards MIME encoding schemes - usually these are defined
   for the specific data types involved. But all of their principles are the same: try to steer clear of
   using values which could be interpreted as some special token.

***   
   Well yes, it is just binary. The problem is that sometimes you want to send arbitrary binary data,
   but you’re limited to a channel that only accepts a limited set of characters (typically unicode
   text).

   When data is represented as text, a very common system is ASCII, which looks at each byte
   individually. The problem is that there are [30]unprintable characters, such as 0 (null terminator in
   many systems), tab, vertical tab, newline, etc. base64 takes the binary data and converts it, as the
   name implies, into a base 64 representation - every 6 bits are turned into two printable characters.
   It also pads it at the end with one or more = if its size is not a multiple of 6 bits.

   It is mostly used for compressed and/or encrypted data.

   For example, in the [31]Off-the-record system, which encrypts instant messaging communication, base64
   is used to safely encode encrypted replies and control messages, so that it can be used on top of any
   chatting system, such as Facebook Messenger or Google Chat.

***   
   It converts binary to something which can be represented as a text string. There are lots of
   scenarios where this makes it much easier to transmit or save than if the information remained in a
   pure binary format. Using it does not require paying a huge price in terms of storage efficiency.
   Read more about it: Base64 - Wikipedia

---
https://en.wikipedia.org/wiki/Base64

Base64

   From Wikipedia, the free encyclopedia

   Base64 is a group of similar [11]binary-to-text encoding schemes that represent binary data in an
   ASCII string format by translating it into a [14]radix-64 representation. The term Base64
   originates from a specific [15]MIME content transfer encoding.

   Each base64 digit represents exactly 6 bits of data.

Design
   The particular set of 64 characters chosen to represent the 64 place-values for the base varies
   between implementations. The general strategy is to choose 64 characters that are both members of a
   subset common to most encodings, and also [40]printable. This combination leaves the data unlikely to
   be modified in transit through information systems, such as email, that were traditionally not
   [41]8-bit clean.^[42][1] For example, MIME's Base64 implementation uses A–Z, a–z, and 0–9 for the
   first 62 values. Other variations share this property but differ in the symbols chosen for the last
   two values; an example is [43]UTF-7.

   The earliest instances of this type of encoding were created for dialup communication between systems
   running the same [44]OS — e.g., [45]uuencode for [46]UNIX, [47]BinHex for the [48]TRS-80 (later
   adapted for the [49]Macintosh) — and could therefore make more assumptions about what characters were
   safe to use. For instance, uuencode uses uppercase letters, digits, and many punctuation characters,
   but no lowercase.

Examples
   A quote from Thomas Hobbes' Leviathan (be aware of spaces between lines):
Man is distinguished, not only by his reason, but by this singular passion from
other animals, which is a lust of the mind, that by a perseverance of delight
in the continued and indefatigable generation of knowledge, exceeds the short
vehemence of any carnal pleasure.

   is represented as a byte sequence of 8-bit-padded ASCII characters encoded in MIME's Base64
   scheme as follows:
TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz
IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg
dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu
dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo
ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=

   In the above quote, the encoded value of Man is TWFu. Encoded in ASCII, the characters M, a, and n
   are stored as the bytes 77, 97, and 110, which are the 8-bit binary values 01001101, 01100001, and
   01101110. These three values are joined together into a 24-bit string, producing
   010011010110000101101110. Groups of 6 bits (6 bits have a maximum of 2^6 = 64 different binary
   values) are [59]converted into individual numbers from left to right (in this case, there are four
   numbers in a 24-bit string), which are then converted into their corresponding Base64 character
   values.
   source ASCII (if <128) M                a                n
       source octets      77 (0x4d)        97 (0x61)        110 (0x6e)
        Bit pattern       0 1 0 0 1 1 0 1  0 1 1 0 0 0 0 1  0 1 1 0 1 1 1 0
           Index          19          22           5            46
       Base64-encoded     T           W            F            u
       encoded octets     84 (0x54)   87 (0x57)    70 (0x46)    117 (0x75)

   As this example illustrates, Base64 encoding converts three [60]octets into four encoded characters.

   The Base64 index table:
   Value Char   Value Char   Value Char   Value Char
   0     A      16    Q      32    g      48    w
   1     B      17    R      33    h      49    x
   2     C      18    S      34    i      50    y
   3     D      19    T      35    j      51    z
   4     E      20    U      36    k      52    0
   5     F      21    V      37    l      53    1
   6     G      22    W      38    m      54    2
   7     H      23    X      39    n      55    3
   8     I      24    Y      40    o      56    4
   9     J      25    Z      41    p      57    5
   10    K      26    a      42    q      58    6
   11    L      27    b      43    r      59    7
   12    M      28    c      44    s      60    8
   13    N      29    d      45    t      61    9
   14    O      30    e      46    u      62    +
   15    P      31    f      47    v      63    /

   When the number of bytes to encode is not divisible by three (that is, if there are only one or two
   bytes of input for the last 24-bit block), then the following action is performed:

   Add extra bytes with value zero so there are three bytes, and perform the conversion to base64.

   If there is only one significant input byte (e.g., 'M'), all 8 bits will be captured in the first two
   base64 digits (12 bits).
    Text content  M
       ASCII      77 (0x4d)        0 (0x00)        0 (0x00)
    Bit pattern   0 1 0 0 1 1 0 1  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
       Index      19          16           0           0
   Base64-encoded T           Q            =           =

   If there are two significant input bytes (e.g., 'Ma'), all 16 bits will be captured in the first
   three base64 digits (18 bits). '=' characters might be added to make the last block contain four
   base64 characters.
    Text content  M                a
       ASCII      77 (0x4d)        97 (0x61)        0 (0x00)
    Bit pattern   0 1 0 0 1 1 0 1  0 1 1 0 0 0 0 1  0 0 0 0 0 0 0 0
       Index      19          22           4            0
   Base64-encoded T           W            E            =

   As illustrated in the first table above, when the last input group contains only one octet, the four
   [61]least significant bits of the last content-bearing 6-bit block will turn out to be zero:
    Bit pattern   0 1 0 0 0 0
       Index      16
   Base64-encoded Q

   And when the last input group contains two octets, the two least significant bits of the last
   content-bearing 6-bit block will turn out to be zero:
    Bit pattern   0 0 0 1 0 0
       Index      4
   Base64-encoded E

Output padding
   The final '==' sequence indicates that the last group contained only one byte, and '=' indicates that
   it contained two bytes. The example below illustrates how truncating the input of the above quote
   changes the output padding:
   Length        Input         Length            Output            Padding
   20     any carnal pleasure. 28     YW55IGNhcm5hbCBwbGVhc3VyZS4= 1
   19     any carnal pleasure  28     YW55IGNhcm5hbCBwbGVhc3VyZQ== 2
   18     any carnal pleasur   24     YW55IGNhcm5hbCBwbGVhc3Vy     0
   17     any carnal pleasu    24     YW55IGNhcm5hbCBwbGVhc3U=     1
   16     any carnal pleas     24     YW55IGNhcm5hbCBwbGVhcw==     2

   The same characters will be encoded differently depending on their position within the three-octet
   group which is encoded to produce the four characters. For example:
     Input      Output
   pleasure. cGxlYXN1cmUu
   leasure.  bGVhc3VyZS4=
   easure.   ZWFzdXJlLg==
   asure.    YXN1cmUu
   sure.     c3VyZS4=

   The ratio of output bytes to input bytes is 4:3 (33% overhead). Specifically, given an input of n
   bytes, the output will be
   [MATH: <semantics> <mrow class="MJX-TeXAtom-ORD"> <mstyle displaystyle="true" scriptlevel="0">
   <mn>4</mn> <mo fence="false" stretchy="false">⌈</mo> <mi>n</mi> <mrow class="MJX-TeXAtom-ORD">
   <mo>/</mo> </mrow> <mn>3</mn> <mo fence="false" stretchy="false">⌉</mo> </mstyle> </mrow> <annotation
   encoding="application/x-tex">{\displaystyle 4\lceil n/3\rceil }</annotation> </semantics> :MATH]
   4 \lceil n/3 \rceil bytes long, including padding characters.

   In theory, the padding character is not needed for decoding, since the number of missing bytes can be
   calculated from the number of Base64 digits. In some implementations, the padding character is
   mandatory, while for others it is not used. One case in which padding characters are required is
   concatenating multiple Base64 encoded files.

   Decoding Base64 with padding
   When decoding Base64 text, four characters are typically converted back to three bytes. The only
   exceptions are when padding characters exist. A single '=' indicates that the four characters will
   decode to only two bytes, while '==' indicates that the four characters will decode to only a single
   byte. For example:
           Encoded          Padding  Length      Decoded
   YW55IGNhcm5hbCBwbGVhcw== two '='s 1      any carnal pleas
   YW55IGNhcm5hbCBwbGVhc3U= one '='  2      any carnal pleasu
   YW55IGNhcm5hbCBwbGVhc3Vy no '='s  3      any carnal pleasur

   Decoding Base64 without padding
   Without padding, after normal decoding of four characters to three bytes over and over again, less
   than four encoded characters may remain. In this situation only two or three characters shall remain.
   A single remaining encoded character is not possible (because a single base 64 character only
   contains 6 bits, and 8 bits are required to create a byte, so a minimum of 2 base 64 characters are
   required : the first character contributes 6 bits, and the second character contributes its first 2
   bits) . For example:
   Length         Encoded          Length      Decoded
   2      YW55IGNhcm5hbCBwbGVhcw   1      any carnal pleas
   3      YW55IGNhcm5hbCBwbGVhc3U  2      any carnal pleasu
   4      YW55IGNhcm5hbCBwbGVhc3Vy 3      any carnal pleasur

Sample Implementation in Java
   This implementation is designed to illustrate the mechanics of Base64 encoding and decoding, not
   necessarily for memory or time efficiency.

   Please note that Java 8 has [64]introduced java.util.Base64.
    private static final String CODES = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    private static byte[] base64Decode(String input)    {
        if (input.length() % 4 == 0)    {
            byte decoded[] = new byte[((input.length() * 3) / 4) - (input.indexOf('=') > 0 ? (input.length() -
 input.indexOf('=')) : 0)];
            char[] inChars = input.toCharArray();
            int j = 0;
            int b[] = new int[4];
            for (int i = 0; i < inChars.length; i += 4)     {
                // This could be made faster (but more complicated) by precomputing these index locations.
                b[0] = CODES.indexOf(inChars[i]);
                b[1] = CODES.indexOf(inChars[i + 1]);
                b[2] = CODES.indexOf(inChars[i + 2]);
                b[3] = CODES.indexOf(inChars[i + 3]);
                decoded[j++] = (byte) ((b[0] << 2) | (b[1] >> 4));
                if (b[2] < 64)      {
                    decoded[j++] = (byte) ((b[1] << 4) | (b[2] >> 2));
                    if (b[3] < 64)  {
                        decoded[j++] = (byte) ((b[2] << 6) | b[3]);
                    }
                }
            }
            return decoded;
        } else {
            throw new IllegalArgumentException("Invalid base64 input");
        }
    }

    private static String base64Encode(byte[] in)       {
        StringBuilder out = new StringBuilder((in.length * 4) / 3);
        int b;
        for (int i = 0; i < in.length; i += 3)  {
            b = (in[i] & 0xFC) >> 2;
            out.append(CODES.charAt(b));
            b = (in[i] & 0x03) << 4;
            if (i + 1 < in.length)      {
                b |= (in[i + 1] & 0xF0) >> 4;
                out.append(CODES.charAt(b));
                b = (in[i + 1] & 0x0F) << 2;
                if (i + 2 < in.length)  {
                    b |= (in[i + 2] & 0xC0) >> 6;
                    out.append(CODES.charAt(b));
                    b = in[i + 2] & 0x3F;
                    out.append(CODES.charAt(b));
                } else  {
                    out.append(CODES.charAt(b));
                    out.append('=');
                }
            } else      {
                out.append(CODES.charAt(b));
                out.append("==");
            }
        }

        return out.toString();
    }

C encoder efficiency considerations
   As an example of a small naive program stub to improve time performance (but not space), consider
   these quasi C code base64 functions, Byte3toChar4(), to do the basic intrinsic encoding.
char base64set[]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
                 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
                 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
                 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" ;

  // repeating the base64 characters in the index array avoids the  077 &  operations

char* Byte3toChar4(unsigned char ra[3]){
static char ar[4] = { base64set[       ra[0] >> 2                           ] ,
                      base64set[       ra[0] << 4 | ra[1] >> 4              ] ,
                      base64set[                    ra[1] << 2 | ra[2] >> 6 ] ,
                      base64set[                                 ra[2]      ] };
return (char *)ar;}

  // replaces the traditional rudimentary approach, though it only uses base64set[0..63]

char* Byte3toChar4(unsigned char ra[3]){
static char ar[4] = { base64set[       ra[0] >> 2                           ] ,
                      base64set[ 077 & ra[0] << 4 | ra[1] >> 4              ] ,
                      base64set[ 077 &              ra[1] << 2 | ra[2] >> 6 ] ,
                      base64set[ 077 &                           ra[2]      ] };
return (char *)ar;}

   Both functions take advantage of array indexing operations ( {,,,} and base64set[] and ra[] ) which
   are often more efficient in machine hardware architectures than programmed result concatenation
   calculations. Judicious use of the capability in C to do coercive casting (such as char[3] and
   char[4] with uint32_t), and using operations that are type consistent, can provide more dramatic
   enhanced performance.

   Arguably, the algorithm's efficiency of exposé for human comprehension rivals machine performance
   concerns.

   The semiotics of the algorithm's coding is a direct reflection of the paradigm used to manipulate
   and position the base64 encoded bits. In particular, the distinct symmetry of the octal "077 &" bit
   selector repetition and its elimination in the time efficient version is made visually acute. As a
   case in point, any corruption or typographical error becomes trivial to identify.

   This paradigm is an artifact of the 1970's and was used very effectively for such problems. The
   rendering of this algorithm in C emphasizes its historic and archaic origins.

   The veracity of the above can be confirmed with an obtuse and perverse space consuming scURIple. (A
   scURIple is a URI program script using a scheme such as
   data:text/html,<html><script>...</script></html>. These are known as scriptlets or bookmarklets when
   javascript: is used as the scheme or protocol.)
javascript:
ra64="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" ;
ra64+=ra64;  ra64+=ra64;  ra64+=ra64; ra64+=ra64;  ra64+=ra64;  ra64+=ra64;
function encode3as4of64(ra){
  return [
    ra64 [ ra.charCodeAt(0) >> 2                                                 ],
    ra64 [ ra.charCodeAt(0) << 4 | ra.charCodeAt(1) >> 4                         ],
    ra64 [                         ra.charCodeAt(1) << 2 | ra.charCodeAt(2) >> 6 ],
    ra64 [                                                 ra.charCodeAt(2)      ] ] };
"Empirically confirm 'TWFu' encodes 'Man': " + encode3as4of64("Man").join("") ;

   A few other encodings to consider:
encode3as4of64("\000\000\000").join("") +"\n"+
encode3as4of64("\x00\x00\x00").join("") +"\n"+

encode3as4of64("\377\377\377").join("") +"\n"+
encode3as4of64("\xff\xff\xff").join("") +"\n"+

encode3as4of64("\252\252\252").join("") +"\n"+
encode3as4of64("\xaa\xaa\xaa").join("") +"\n"+

encode3as4of64("\x55\x55\x55").join("") +"\n"+
encode3as4of64("UUU")         .join("") +"\n"

Implementations and history ...

