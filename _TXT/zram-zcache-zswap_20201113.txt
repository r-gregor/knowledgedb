filename: zram-zcache-zswap_20201113.txt
https://www.maketecheasier.com/zram-zcache-zswap/

Zram, Zcache, and Zswap: Which One Is the Best For You?
Aug 25, 2020

   If you're using Linux, you can multiply your available RAM without having to buy new memory modules.
   Zram, zswap, and zcache allow you to compress your PC RAM's contents, practically expanding it. But
   which one should you use? Which one's better? Read on to find out.

The Benefits of RAM Compression
   If you saw a presentation about the next-gen consoles by Sony and Microsoft, you might have noticed
   that both companies made a big fuss over how fast their storage is. There's a reason for all that:
   storage is the most impactful bottleneck even on the latest high-end PCs.
   Zram Zcache Zswap Hdd Zram Zcache Zswap Hdd

   The ultimate goal of the solutions we see here is to minimize the amount of data exchanged between
   our computer's RAM and its slower storage systems. This is important to keep in mind because, as
   we'll see, it's their differentiating factor.

ZRam
   Zram is the most straightforward RAM compression solution in Linux today. Formerly known as
   compcache, it takes advantage of Linux's support for multiple swap devices by creating an extra one
   (or more) in the computer's RAM.

   Zram works by creating a hierarchy of three storage spaces. It creates a new compressed swap volume
   in the RAM, that is - hierarchically - placed between the RAM and storage devices. Then, when RAM is
   filled with data, it moves the excess to the compressed swap. When that, too, is filled up, zram
   starts moving data to the swap partition in the storage drive.

   This new swap device is assigned a higher priority than the ones that reside in the PC's slower
   actual storage, to be used before them. It also relies on one out of multiple compression algorithms,
   like LZ4 or LZO, to cram as much data as possible in this swap device.
   Zram Zcache Zswap Lz4 Zram Zcache Zswap Lz4

   Modern processors have reached a point where they can compress and decompress data stored in RAM
   quicker than it could be written to or read from an SSD or HDD drive, with a negligible impact on the
   computer's performance.

   It's worth noting that zram works on its own, with no need for other swap devices. So, you can, for
   example, use it in embedded systems or live CDs, since it doesn't have to be backed by actual
   storage.

ZSwap
   Zswap is more complicated than zram. It improves the relation between our computer's RAM and its
   slower storage devices by adding smart compression where they intersect.
   Zram Zcache Zswap Zswap Zram Zcache Zswap Zswap

   With zswap, the compressed RAM and the swap volumes that already exist in a computer's storage
   devices are treated as nodes in an intelligent storage system. Zswap takes up, too, a part of a
   computer's RAM but doesn't blindly move everything that doesn't fit in the rest of the RAM then try
   to compress it. Instead, it first compresses everything that doesn't fit in the actual RAM. If the
   data is compressed, zswap stores it in RAM. If it isn't, it stores it to the existing swap.

   This way, zswap takes better advantage of the available RAM and swap space since it won't, for
   example, hog the RAM it uses with incompressible data.

   Since it relies on the existing swap, zswap is better for Linux installations on every PC, especially
   those with less than 4GBs of RAM.

Zcache
   Zcache works in tandem with the tmem ("Transcendent Memory") system to offer the Linux kernel a more
   versatile way of storing data not currently in use.

   Zcache adds an extra transparent layer of memory management on the kernel that compresses any data
   that isn't currently in use. Unlike having to manage every single byte of data, with zcache, the
   Linux kernel can store whole pages of data into "pools" through tmem's interface. The zcache backend
   then compresses these groups of data.

   Like zswap, zcache keeps only compressed data in RAM and pushes uncompressed pages to the actual
   swap, thus making the best use of both.

Which One Is Better?
   In theory, zcache offers the best of the solutions. However, that doesn't mean it is the way to go as
   practicality also matters. Despite its advanced features, zcache is widely unsupported. Its
   development has stagnated, and it was removed from the Linux kernel on version 3.11. To use it today,
   you will have to jump through hoops, and the result would probably not be much better than if you
   used zswap.

   On the other hand, zram is more restricted because it isn't much more than a virtual volume stored in
   RAM and used as swap space. It can help with systems strapped for RAM but works by basically blindly
   taking things from point A and moving them to point B ad then point C without caring for what they
   actually are.

   This makes zswap the better choice for most Linux users, no matter their distribution. To see how you
   can take advantage of it, check out [**1]our guide on zswap.


---
[**1]
https://www.maketecheasier.com/use-zswap-improve-old-linux-performance/

Use Zswap to Improve Performance on Linux PC with Low Amounts of RAM
Nov 21, 2018

   Let's face it, some of us don't upgrade that often. Or, at least, as Linux users, we like to
   re-purpose our older laptops/computers. A lot of distributions run comfortably on systems with
   low amounts of RAM (Random Access Memory). Browsers, however, are not that forgiving, requiring more
   and more memory as the Internet evolves.

   While a system with the LXDE desktop environment on it may take as little as 150MB of RAM after it
   boots up, Chromium, Chrome or Firefox will quickly eat up hundreds of megabytes and even multiple
   gigabytes of RAM as we open a few tabs.

   And that's when it happens! Hard-disk starts to make that grinding sound. Music starts to stutter.
   When we switch to another application, it takes tens of seconds until it appears on the screen. Even
   the mouse cursor may begin to lag. This is the effect of disk thrashing.

What Is Disk Thrashing?
   First, we need to understand swap. When we run out of free RAM, application data that the
   operating system didn't access in a long time gets moved to the swap area. This is often on a
   physical storage device. By doing this, the operating system can free up some memory space that a
   program needs now. This way, a tab in our browser that we didn't access in the last hour may be
   swapped to the hard disk. Now the GIMP image editor can run. When we close it and switch back to that
   old tab, the operating system swaps it back to memory (reads it from disk and copies it back to
   random access memory).

   This mechanism works well when swapping small amounts of data. But when, let's say, only 2GB of RAM
   is available and all the programs we have open need 4GB, the operating system has to swap constantly.
   Moving data from memory to disk, from disk to memory, and back again, constantly, is very slow,
   especially with harddisks. In such a situation, the storage device is unable to fulfill requests fast
   enough. Long story short, when disk thrashing occurs, things get very slow.

SSD Drives Are Great for Swap
   There's a myth still circulating on the Internet: "Never set up swap on SSD. It will kill your
   device!" That was true a few years ago, but not anymore. In fact, setting up swap on an SSD drive
   leads to great results. If the computer includes an SSD device that has good random read/write
   performance (at least 300MB), set up a swap partition on it and ignore the rest of this article. When
   the operating system has to swap 1GB of data, it will take less than five seconds, while on a hard
   disk it would take more than a minute.

How to Significantly Reduce Disk Thrashing on Linux
   Fortunately, most of the data stored in RAM is very compressible. This means that if we take 200MB of
   data stored in memory and compress it, we can reduce the size to 100MB. Consequently, it means that
   the system will have to write much less data to disk when swapping.

   Imagine that instead of waiting thirty seconds to switch to a program you have to wait fifteen. It's
   a palpable improvement. But, in fact, the speed-up is much more significant (may have to wait less
   than ten seconds) because the tool we will use is more sophisticated than that. It intelligently
   sends to disk only the bits and pieces that cannot be compressed, keeping the rest in a reserved
   portion of memory. If you want to read more about its internals, check out the official Linux
   kernel page about zswap.

   A simple version of the benefits we get by using zswap is that instead of horrible slowdowns when we
   run out of memory, we get tolerable, mild slowdowns that last for seconds instead of tens of seconds
   or even minutes.

How to Enable zswap On Debian-Based Distributions (Ubuntu, Linux Mint, etc.)
   Open a terminal application and run this command to edit the Grub bootloader template configuration
   file:
sudoedit /etc/default/grub

   With your cursor keys, navigate to the line that begins with "GRUB_CMDLINE_LINUX_DEFAULT". Within the
   quotes, add the following text:
zswap.enabled=1

   For example, a line that was GRUB_CMDLINE_LINUX_DEFAULT="quiet splash" becomes
   GRUB_CMDLINE_LINUX_DEFAULT="quiet splash zswap.enabled=1".

   To save the file, press Ctrl + X, followed by "y," and then Enter.

   Generate the new Grub configuration files according to the template we previously edited:
sudo update-grub

   Reboot and the zswap module will be enabled automatically.

How to Enable zswap on Fedora and OpenSUSE
   The procedure here is similar to the one in the previous section but with a few twists. Edit the Grub
   template configuration file.
sudoedit /etc/default/grub

   Add zswap.enabled=1 within the quotes, on the line that starts with GRUB_CMDLINE_LINUX.

   Press Ctrl + X, followed by "y," and then Enter to save the file.

   Depending on whether your computer boots from a BIOS or UEFI system, the Grub configuration file is
   generated in a different path. To find where it currently resides, enter the following command:
sudo find /boot/ -name grub.cfg

   Use the path that is output here in the next command. For example, in our case the path found was
   "/boot/grub2/grub.cfg," so we'll add it at the end of the next command after "-o":
sudo grub2-mkconfig -o /boot/grub2/grub.cfg

   Reboot the computer. After you reboot, check if the module is active:
cat /sys/module/zswap/parameters/enabled

   If the output is "Y," then the module is working correctly.

How to Enable zswap on Arch Linux

   Install the systemd-swap package:
sudo pacman -Sy systemd-swap

   Make this package work its magic at boot time:
sudo systemctl enable systemd-swap

   Start it now, without rebooting:
sudo systemctl start systemd-swap

   To check if everything worked as expected, verify if the zswap module is enabled:
cat /sys/module/zswap/parameters/enabled

   If the output is "Y," it means the module is active.

How to Enable zswap on Different Distributions
   Generally speaking, enabling zswap at boot time is as easy as adding zswap.enabled=1 to your kernel
   parameters. Most distributions use Grub2 as a bootloader by default. If you are using a different
   bootloader, find the configuration file where it stores the kernel parameters to pass at boot time
   and add zswap.enabled=1 as an additional parameter.

   Another parameter you can play with to find if it improves performance for your specific use case, is
   zswap.max_pool_percent=20. You can adjust it by changing the number at the end: for
   example, zswap.max_pool_percent=50.

   Add it to the same kernel parameters where you add zswap.enabled=1. It's recommended you don't go
   above 50% since more than that can have detrimental effects on systems with low amounts of RAM.

Conclusion

   If you frequently ran out of RAM on your old system and experienced the annoying effects of disk
   thrashing, you'll immediately notice and appreciate the difference from now on. Instead of horrible
   slowdowns, you'll experience mild, temporary lag that lasts for a few seconds (instead of minutes)
   when the operating system has to swap a lot of data to disk. You'll be able to continue work in
   situations where before you couldn't use your computer at all during the time it swapped.
   Alexandru Andrei


---
