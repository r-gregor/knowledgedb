filename: number-of-bits-in-a-decimal-integer_20170606.txt
http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/

Number of Bits in a Decimal Integer
December 13th, 2012

   Every integer has an equivalent representation in decimal and binary. Except for 0 and 1, the binary
   representation of an integer has more digits than its decimal counterpart. To find the number of
   binary digits (bits) corresponding to any given decimal integer, you could convert the decimal number
   to binary and count the bits. For example, the two-digit decimal integer 29 converts to the
   five-digit binary integer 11101. But there’s a way to compute the number of bits directly, without
   the conversion.

   Sometimes you want to know, not how many bits are required for a specific integer, but how many are
   required for a d-digit integer — a range of integers. A range of integers has a range of bit counts.
   For example, four-digit decimal integers require between 10 and 14 bits. For any d-digit range, you
   might want to know its minimum, maximum, or average number of bits. Those values can be computed
   directly as well.

   In this article, I will show you those calculations. I will be discussing pure binary and decimal,
   not computer encodings like two’s complement, fixed-point, floating-point, or BCD. All of the
   discussion assumes positive integers, although it applies to negative integers if you temporarily
   ignore their minus signs. 0 is a special case not covered by the formulas, but obviously it has only
   1 bit.

   (I use the terms decimal integer and binary integer when I really mean “an integer expressed in
   decimal numerals” and “an integer expressed in binary numerals”. An integer is an integer,
   independent of its base.)

Number of Bits in a Specific Decimal Integer

   A positive integer n has b bits when 2^b-1 ≤ n ≤ 2^b – 1. For example:
     * 29 has 5 bits because 16 ≤ 29 ≤ 31, or 2^4 ≤ 29 ≤ 2^5 – 1
     * 123 has 7 bits because 64 ≤ 123 ≤ 127, or 2^6 ≤ 123 ≤ 2^7 – 1
     * 967 has 10 bits because 512 ≤ 967 ≤ 1023, or 2^9 ≤ 967 ≤ 2^10 – 1

   For larger numbers, you could consult a table of powers of two to find the consecutive powers
   that contain your number.

   To see why this works, think of the binary representations of the integers 2^4 through 2^5 – 1, for
   example. They are 10000 through 11111, all possible 5-bit values.

Using Logarithms

   The above method can be stated another way: the number of bits is the exponent of the smallest power
   of two greater than your number. You can state that mathematically as:

   b[spec] = └log[2](n)┘ + 1
   

   That formula has three parts:
     * log[2](n) means the logarithm in base 2 of n, which is the exponent to which 2 is raised to get
       n. For example, log[2](123) ≈ 6.9425145. The presence of a fractional part means n is between
       powers of two.
     * └x┘ is the floor of x, which is the integer part of x. For example, └6.9425145┘ = 6. You can
       think of └log[2](n)┘ as the exponent of the highest power of two in the binary representation of
       n.
     * + 1 takes the exponent to the next higher power of two. You can think of this step as accounting
       for the 2^0th place of your binary number, which then gives you its total number of bits. For our
       example, that’s 6 + 1 = 7.

   You might be tempted to use the ceiling function — ┌x┐, which is the smallest integer greater
   than or equal to x — to compute the number of bits as such:

   b[spec] = ┌log[2](n)┐

   However, this fails when n is a power of two.

Number of Bits in a d-Digit Decimal Integer

   A positive integer n has d decimal digits when 10^d-1 ≤ n ≤ 10^d – 1. How many bits do numbers in
   this range require? It varies. For example, consider four-digit decimal integers. Using the above
   formula you’ll see that the smallest four-digit number, 1000, requires 10 bits, and the largest
   four-digit number, 9999, requires 14 bits. The number of bits varies between those extremes. For
   example, 1344 requires 11 bits, 2527 requires 12 bits, and 5019 requires 13 bits. Why does this
   occur? Because that [26]single power of ten range spans all or part of five consecutive power-of-two
   ranges. Here’s how the examples look from that viewpoint:
     * 1000 has 10 bits because 512 ≤ 1000 ≤ 1023, or 2^9 ≤ 1000 ≤ 2^10 – 1
     * 1344 has 11 bits because 1024 ≤ 1344 ≤ 2047, or 2^10 ≤ 1344 ≤ 2^11 – 1
     * 2527 has 12 bits because 2048 ≤ 2527 ≤ 4095, or 2^11 ≤ 2527 ≤ 2^12 – 1
     * 5019 has 13 bits because 4096 ≤ 5019 ≤ 8191, or 2^12 ≤ 5019 ≤ 2^13 – 1
     * 9999 has 14 bits because 8192 ≤ 9999 ≤ 16383, or 2^13 ≤ 9999 ≤ 2^14 – 1

   This diagram shows the ranges:
   Number of Bits In Four-Digit Decimal Integers Number of Bits In Four-Digit Decimal Integers

Minimum Number of Bits in a d-Digit Integer

   The minimum number of bits required for a d-digit integer is computed simply by using the specific
   number formula on the minimum d-digit value:

   b[min] = ⌊log[2](10^d-1)⌋ + 1

   We can make this a more efficient computation by using the [27]logarithmic identity log[a](x^y) =
   y·log[a](x):

   b[min] = ⌊log[2](10^d-1)⌋ + 1 = ⌊(d-1)·log[2](10)⌋ + 1

   In this form, we take the logarithm of a small constant instead of a large variable.

   Since we are dealing with powers of ten we can use the ceiling function here (as long as d > 1);
   [28]there is no positive power of ten that is also a power of two. Here’s the equivalent formula:

   b[min] = ⌈log[2](10^d-1)⌉ = ⌈(d-1)·log[2](10)⌉104560

Maximum Number of Bits in a d-Digit Integer

   The maximum number of bits required for a d-digit integer is computed simply by using the specific
   number formula on the maximum d-digit value:

   b[max] = ⌊log[2](10^d – 1)⌋ + 1

   We can’t make the same simplification as for the minimum value, at least not on the face of it. But
   notice that ⌊log[2](10^d – 1)⌋ = ⌊log[2](10^d)⌋, since a power of ten and that power of ten minus one
   are both in the same power of two range. (A power of ten minus one cannot be a power of two — it’s
   odd). This allows us to use this more computationally efficient formula to the same effect:

   b[max] = ⌊log[2](10^d)⌋ + 1 = ⌊d·log[2](10)⌋ + 1

   And again, for d > 1, we can use the ceiling function instead:

   b[max] = ⌈d·log[2](10)⌉

Average Number of Bits in a d-Digit Integer

   The average number of bits required for a d-digit integer is the total number of bits required to
   represent all d-digit integers divided by the number of d-digit integers. For our example, the
   average is

   b[avg] = (24·10 + 1024·11 + 2048·12 + 4096·13 + 1808·14)/9000 ≈ 12.74

Computing The Formulas

   Of the above formulas, these two — in these forms — are the most commonly used:
     * b[spec] = ⌊log[2](n)⌋ + 1
     * b[max] = ⌈d·log[2](10)⌉

   How do you compute them?

   First we have to figure out how to take the base-2 logarithm of a number. Many programming
   environments do not have a base-2 logarithm function. You can deal with that by doing a [29]change of
   base:

   log[2](n) = log[a](n)/log[a](2)

   ‘a’ could represent any base; for example, base e, the natural logarithm. For simplicity, I’ll drop
   the ‘a’ and refer to the logarithm function generically as log(n):

   log[2](n) = log(n)/log(2)

Computing b[spec]

   Let’s restate the formula in the form you would most likely enter it in a computer:
b[spec] = floor(log(n)/log(2)) + 1

   For example, the decimal integer 1,997,443,410 has floor(log(1997443410)/log(2)) + 1 = 31 bits.

   You have to be careful when computing logarithms; [30]floating-point inaccuracies could cause an
   incorrect result, particularly at power-of-two boundaries.

   (If you are using a language like C you could avoid change of base — and improve performance and
   accuracy — by computing the floor of the base-2 logarithm using “[31]Bit Twiddling Hacks”.)

   For very large numbers, you’ll need arbitrary-precision arithmetic. I use [32]PARI/GP, for example.

Computing b[max]

   Let’s restate the formula for computer evaluation:
b[max] = ceil(d*(log(10)/log(2)))

   (The parentheses around the division are unnecessary; I just like thinking of log(10)/log(2) as a
   separate constant.)

   log(10)/log(2), to 17 digits, is 3.3219280948873623. People commonly round this to 3.32, leading to
   this simple formula:

   b[max] = ceil(d*3.32)

   For example, a 16-digit decimal integer requires up to ceil(16*3.32) = 54 bits.

   You have to be careful with this though; for example, ceil(25*3.32) = 83 (since 25*3.32 = 83), but
   25-digit integers require 84 bits. You need to specify the constant with more precision to get the
   correct result. (Here’s [33]one place where this error is made.)
   Dingbat

Related

     * [34]Number of Decimal Digits In a Binary Fraction

   [INS: :INS]
   [35]RSS feed icon
   [36]Get articles by RSS[37] (What Is RSS?)
   [38]RSS e-mail icon
   [39]Get articles by e-mail
   Categories [40]Binary numbersTags [41]Binary integers, [42]Code, [43]Convert to binary,
   [44]Floating-point

13 comments

    1. Willie says:
       [45]January 23, 2014 at 3:22 am
       [46]http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/
       Number of Bits in a Specific Decimal Integer
       A positive integer n has b bits when 2b-1 ≤ n ≤ 2b – 1. For example:
       29 has 5 bits because 16 ≤ 29 ≤ 31, or 2^4 ≤ 29 ≤ 2^5 – 1
       I think there is something wrong with the counting of bits on your site.
       Yes, I agreed that 29 is between 2^4 and 2^5 – 1, however 2^5 should be 6 bits instead of 5 bits.
       2^5 2^4 2^3 2^2 2^1 2^0
       6 5 4 3 2 1 bits
    2. [47]Rick Regan says:
       [48]January 23, 2014 at 10:20 am
       @Willie,
       Yes, 2^5 is 6 bits and my formula gives that. Can you show me specifically what you calculated?
    3. Roy says:
       [49]April 7, 2014 at 1:35 pm
       Nice,I like it. Sometimes blogs are better than books!
       I heard in class that an integer of size n takes O(log n) bits. Why is that? Shouldn’t this be
       (floor(log n) + 1) bits ? Some people just say ‘an integer is represented in a computer by log n
       bits.’ Why is that ?
    4. [50]Rick Regan says:
       [51]April 7, 2014 at 3:44 pm
       @Roy,
       Thanks for the feedback.
       “Big O” notation just gives you the overall trend of a particular function, not its exact value.
       The “floor” and “+1” parts are insignificant in that regard. When people just say ‘is represented
       in a computer by log n bits’ they are implicitly using order notation.
       (BTW, I assume you meant “an integer n” and not “an integer of size n”.)
    5. [52]b_rad says:
       [53]April 30, 2014 at 11:41 pm
       If you’re tempted to use the ceiling function the right way to calculate the number of bits
       needed to represent a positive integer n, use it like this:
       bspec = ⌈log2(n+1)⌉
    6. [54]Rick Regan says:
       [55]May 2, 2014 at 11:29 am
       @b_rad,
       Yes, you are correct. That is used commonly too. It’s easy to show why it works, but I don’t
       think it is as intuitive (changing the argument to log() vs. changing the result of log()).
    7. P.Preethi says:
       [56]June 19, 2014 at 6:34 am
       Nice post
    8. [57]Wasim Thabraze says:
       [58]November 5, 2014 at 9:05 am
       Thanks Rick! That was an amazing post. 🙂
    9. [59]Aravind says:
       [60]December 21, 2015 at 4:45 pm
       Thank you for your information sir. Can I know the formula for calculating the number of digits
       for n-bits? Could you mail me if possible.
       Thank you sir.
   10. [61]Rick Regan says:
       [62]December 21, 2015 at 9:17 pm
       @Aravind,
       Check out the companion article:
       [63]http://www.exploringbinary.com/number-of-decimal-digits-in-a-binary-integer/ .
   11. Vachaspati Pandey says:
       [64]April 18, 2016 at 8:21 pm
       Sir,
       It was a very informative post. I came across it through google search for minimum bits required
       for representing a decimal fraction. I am still searching for the answer. Any suggestion please.
   12. [65]Rick Regan says:
       [66]April 18, 2016 at 8:27 pm
       @Vachaspati,
       Please explain what you are looking for (an example would help).
   13. Carrie says:
       [67]September 21, 2016 at 1:53 pm
       Homework stinks 🙁 Thx for the help! c:

Leave a Reply [68]Cancel reply

   Your email address will not be published. Required fields are marked *

   Comment
   _____________________________________________
   _____________________________________________
   _____________________________________________
   _____________________________________________
   _____________________________________________
   _____________________________________________
   _____________________________________________
   _____________________________________________

   Name * ______________________________

   Email * ______________________________

   Website ______________________________

   Post Comment

   (Cookies must be enabled to leave a comment...it reduces spam.)

Post navigation

   [69]Previous Previous post: Special Case Laws of Exponents for Powers of Two
   [70]Next Next post: Ratio of Bits to Decimal Digits
   [INS: :INS]

Subscribe

   [71]RSS feed icon
   [72]Get articles by RSS[73] (What Is RSS?)
   [74]RSS e-mail icon
   [75]Get articles by e-mail

Featured Articles

     * [76]How I Taught My Mother Binary Numbers
       Fathers, sons, daughters, brothers, sisters, aunts, and uncles should read this too.
     * [77]How I Taught Third Graders Binary Numbers
       Middle-schoolers, high-schoolers, and college grads might learn something too.
     * [78]Why 0.1 Does Not Exist In Floating-Point
       It may look like 0.1, but it's not.
     * [79]Visualizing Consecutive Binary Integers
       Binary numbers in black and white.
     * [80]What a Binary Counter Looks and Sounds Like
       See and hear the symmetry in binary counting.

Articles by Tag

   [81]Algebra [82]Binary-coded decimal [83]Binary arithmetic [84]Binary integers [85]Bug [86]C [87]Code
   [88]Convert to binary [89]Convert to decimal [90]Convert to hexadecimal [91]Decimals [92]Education
   [93]Exponents [94]Floating-point [95]Fractions [96]Geekware [97]Geometric series [98]Java
   [99]JavaScript [100]Modular arithmetic [101]Pascal's triangle [102]PHP [103]Pop culture [104]Proof
   [105]Python

Articles by Year

     * [106]2016
     * [107]2015
     * [108]2014
     * [109]2013
     * [110]2012
     * [111]2011
     * [112]2010
     * [113]2009
     * [114]2008

Latest Articles

     * [115]Maximum Number of Decimal Digits In Binary Floating-Point Numbers
     * [116]Number of Decimal Digits In a Binary Fraction
     * [117]Exploring Binary Is Now Mobile-Friendly
     * [118]17 Digits Gets You There, Once You’ve Found Your Way
     * [119]Decimal Precision of Binary Floating-Point Numbers

   Copyright © 2008-2017 Exploring Binary

   [120]Privacy policy

   Powered by WordPress

   css.php

References

   1. http://feeds.exploringbinary.com/exploringbinary
   2. http://www.exploringbinary.com/feed/
   3. http://www.exploringbinary.com/comments/feed/
   4. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/feed/
   5. http://www.exploringbinary.com/special-case-laws-of-exponents-for-powers-of-two/
   6. http://www.exploringbinary.com/ratio-of-bits-to-decimal-digits/
   7. http://www.exploringbinary.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.exploringbinary.com%2Fnumber-of-bits-in-a-decimal-integer%2F
   8. http://www.exploringbinary.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.exploringbinary.com%2Fnumber-of-bits-in-a-decimal-integer%2F&format=xml
   9. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#content
  10. http://www.exploringbinary.com/
  11. http://www.exploringbinary.com/
  12. http://www.exploringbinary.com/converters-and-calculators/
  13. http://www.exploringbinary.com/twos-complement-converter/
  14. http://www.exploringbinary.com/binary-calculator/
  15. http://www.exploringbinary.com/binary-converter/
  16. http://www.exploringbinary.com/floating-point-converter/
  17. http://www.exploringbinary.com/base-converter/
  18. http://www.exploringbinary.com/topics/
  19. http://www.exploringbinary.com/sitemap/
  20. http://www.exploringbinary.com/about/
  21. http://www.exploringbinary.com/contact/
  22. http://www.exploringbinary.com/about/
  23. http://www.exploringbinary.com/a-table-of-nonnegative-powers-of-two/
  24. http://en.wikipedia.org/wiki/Floor_and_ceiling_functions
  25. http://en.wikipedia.org/wiki/Floor_and_ceiling_functions
  26. http://www.exploringbinary.com/how-the-positive-powers-of-ten-and-two-are-interleaved/
  27. http://en.wikipedia.org/wiki/List_of_logarithmic_identities#Using_simpler_operations
  28. http://www.exploringbinary.com/how-the-positive-powers-of-ten-and-two-are-interleaved/
  29. http://en.wikipedia.org/wiki/Logarithm#Change_of_base
  30. http://www.exploringbinary.com/ten-ways-to-check-if-an-integer-is-a-power-of-two-in-c/#beware-of-logarithms
  31. http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious
  32. http://www.exploringbinary.com/exploring-binary-numbers-with-parigp-calculator/
  33. http://www.ibm.com/developerworks/forums/thread.jspa?threadID=465250
  34. http://www.exploringbinary.com/number-of-decimal-digits-in-a-binary-fraction/
  35. http://feeds.exploringbinary.com/exploringbinary
  36. http://feeds.exploringbinary.com/exploringbinary
  37. http://www.exploringbinary.com/what-is-rss/
  38. http://feedburner.google.com/fb/a/mailverify?uri=ExploringBinary&loc=en_US
  39. http://feedburner.google.com/fb/a/mailverify?uri=ExploringBinary&loc=en_US
  40. http://www.exploringbinary.com/category/binary-numbers/
  41. http://www.exploringbinary.com/tag/binary-integers/
  42. http://www.exploringbinary.com/tag/code/
  43. http://www.exploringbinary.com/tag/convert-to-binary/
  44. http://www.exploringbinary.com/tag/floating-point/
  45. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-7567
  46. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/
  47. http://www.exploringbinary.com/
  48. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-7568
  49. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-7634
  50. http://www.exploringbinary.com/
  51. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-7635
  52. http://Sure/
  53. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-7649
  54. http://www.exploringbinary.com/
  55. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-7652
  56. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-7697
  57. http://www.thabraze.in/
  58. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-8624
  59. http://exploringbinary.com/
  60. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-9533
  61. http://www.exploringbinary.com/
  62. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-9534
  63. http://www.exploringbinary.com/number-of-decimal-digits-in-a-binary-integer/
  64. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-9629
  65. http://www.exploringbinary.com/
  66. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-9630
  67. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#comment-9989
  68. http://www.exploringbinary.com/number-of-bits-in-a-decimal-integer/#respond
  69. http://www.exploringbinary.com/special-case-laws-of-exponents-for-powers-of-two/
  70. http://www.exploringbinary.com/ratio-of-bits-to-decimal-digits/
  71. http://feeds.exploringbinary.com/exploringbinary
  72. http://feeds.exploringbinary.com/exploringbinary
  73. http://www.exploringbinary.com/what-is-rss/
  74. http://feedburner.google.com/fb/a/mailverify?uri=ExploringBinary&loc=en_US
  75. http://feedburner.google.com/fb/a/mailverify?uri=ExploringBinary&loc=en_US
  76. http://www.exploringbinary.com/how-i-taught-my-mother-binary-numbers/
  77. http://www.exploringbinary.com/how-i-taught-third-graders-binary-numbers/
  78. http://www.exploringbinary.com/why-0-point-1-does-not-exist-in-floating-point/
  79. http://www.exploringbinary.com/visualizing-consecutive-binary-integers/
  80. http://www.exploringbinary.com/what-a-binary-counter-looks-and-sounds-like/
  81. http://www.exploringbinary.com/tag/algebra/
  82. http://www.exploringbinary.com/tag/binary-coded-decimal/
  83. http://www.exploringbinary.com/tag/binary-arithmetic/
  84. http://www.exploringbinary.com/tag/binary-integers/
  85. http://www.exploringbinary.com/tag/bug/
  86. http://www.exploringbinary.com/tag/c/
  87. http://www.exploringbinary.com/tag/code/
  88. http://www.exploringbinary.com/tag/convert-to-binary/
  89. http://www.exploringbinary.com/tag/convert-to-decimal/
  90. http://www.exploringbinary.com/tag/convert-to-hexadecimal/
  91. http://www.exploringbinary.com/tag/decimals/
  92. http://www.exploringbinary.com/tag/education/
  93. http://www.exploringbinary.com/tag/exponents/
  94. http://www.exploringbinary.com/tag/floating-point/
  95. http://www.exploringbinary.com/tag/fractions/
  96. http://www.exploringbinary.com/tag/geekware/
  97. http://www.exploringbinary.com/tag/geometric-series/
  98. http://www.exploringbinary.com/tag/java/
  99. http://www.exploringbinary.com/tag/javascript/
 100. http://www.exploringbinary.com/tag/modular-arithmetic/
 101. http://www.exploringbinary.com/tag/pascals-triangle/
 102. http://www.exploringbinary.com/tag/php/
 103. http://www.exploringbinary.com/tag/pop-culture/
 104. http://www.exploringbinary.com/tag/proof/
 105. http://www.exploringbinary.com/tag/python/
 106. http://www.exploringbinary.com/2016/
 107. http://www.exploringbinary.com/2015/
 108. http://www.exploringbinary.com/2014/
 109. http://www.exploringbinary.com/2013/
 110. http://www.exploringbinary.com/2012/
 111. http://www.exploringbinary.com/2011/
 112. http://www.exploringbinary.com/2010/
 113. http://www.exploringbinary.com/2009/
 114. http://www.exploringbinary.com/2008/
 115. http://www.exploringbinary.com/maximum-number-of-decimal-digits-in-binary-floating-point-numbers/
 116. http://www.exploringbinary.com/number-of-decimal-digits-in-a-binary-fraction/
 117. http://www.exploringbinary.com/exploring-binary-is-now-mobile-friendly/
 118. http://www.exploringbinary.com/17-digits-gets-you-there-once-youve-found-your-way/
 119. http://www.exploringbinary.com/decimal-precision-of-binary-floating-point-numbers/
 120. http://www.exploringbinary.com/privacy-policy/


---

