filename: binary_How-many-numbers-can-be-represented-in-1-byte_20170601.txt
https://www.quora.com/How-many-numbers-can-be-represented-in-1-byte

   How many numbers can be represented in 1 byte?

   I keep thinking if 1 byte is 8bits and a bit is either 0 or 1 then is it 8 slots for each bit.

   _   _   _   _   _   _   _   _
   2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 = 256

   So 256 possibly numbers can be represented in 1 byte is this correct? What does 255 mean because I've
   heard that also references in relation to this

***
   Since it's an A2A, I'll try to add something.

   Yes, there are eight digits. Yes there are 256 unique values. Left to right, those digits are worth
   these amounts:

   128 | 64 | 32 | 16 | 8 | 4 | 2 | 1

   To work out the value of a binary number, just look at each slot that contains a 1 and add the
   matching place value to the total. So 10000001 would be 128 + 1, which is 129.

   The largest representable value is 11111111, which is 128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 255.

   The 256/255 difference is because you have to count "0" as one of the values. Or as Phil Karlton put
   it: "There are two hard things in computer science: cache invalidation, naming things, and off-by-one
   errors."

***
   That is correct.

   You'll often hear about 255, because it's 0 - 255, not 1 - 256.

   You can represent 256 possible numbers, but if one of those numbers is 0 not 1, then the maximum
   number goes from 256 down to 255.

***
   Actually you are correct, because you can represent 2^8 (256) values.

   Anyway, the actual values depend on the numeric type you want to represent in that byte.

   If you are representing unsigned numbers, you can represent all values in this range: [0; 255].

   If you are representing signed numbers (that is the default in a lot of programming languages), you
   can represent all values in this range: [-128; 127].

***
   Historically, a byte is not always 8-bit, but nowadays it is de-facto.

   An 8-bit byte can store 256 possible different values, which a common representation is as an
   unsigned value from 0 to 255 (it is 1 to 255 and 0, in case you don't know how to count)

   With that practice, then 255 is the maximum value that you can represent with an unsigned 8-bit byte,
   which is 11111111 in base 2 and FF in base 16.

   If you ever work with computer graphics, you will find that FF or 255 is the maximum value of R, G
   and B component when you need to composite a custom colour. It is because they are 8-bit unsigned
   value.

   Because the value 255 is all-bit-set in its binary form, this number sometimes useful in bit
   manipulation, such as bit flipping using XOR.

***
   I got a second a2a; I passed earlier because the other answers are correct. There are 256 possible
   values, and they are used to represent the numbers 0-255. So 255 is the highest number that can be
   represented in a byte.
