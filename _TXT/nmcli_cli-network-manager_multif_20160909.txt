https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/\
	sec-Using_the_NetworkManager_Command_Line_Tool_nmcli.html

2.3. USING THE NETWORKMANAGER COMMAND LINE TOOL, NMCLI

The command‐line tool nmcli can be used by both users and scripts for controlling NetworkManager. The
basic format of a command is as follows:
nmcli OPTIONS OBJECT { COMMAND | help }
where OBJECT can be one of general, networking, radio, connection, or device. The most used options are:
-t, --terse for use in scripts, the -p, --pretty option for users, and the -h, --help option. Command
completion has been implemented for nmcli, so remember to press Tab whenever you are unsure of the
command options available. See the nmcli(1) man page for a complete list of the options and commands.
The nmcli tool has some built-in context-sensitive help. For example, issue the following two commands
and notice the difference:
~]$ nmcli help
Usage: nmcli [OPTIONS] OBJECT { COMMAND | help }

OPTIONS
  -t[erse]				     terse output
  -p[retty]				     pretty output
  -m[ode] tabular|multiline		     output mode
  -f[ields] <field1,field2,...>|all|common   specify fields to output
  -e[scape] yes|no			     escape columns separators in values
  -n[ocheck]				     don't check nmcli and NetworkManager versions
  -a[sk]				     ask for missing parameters
  -w[ait] <seconds>			     set timeout waiting for finishing operations
  -v[ersion]				     show program version
  -h[elp]				     print this help

OBJECT
  g[eneral]	  NetworkManager's general status and operations
  n[etworking]	  overall networking control
  r[adio]	  NetworkManager radio switches
  c[onnection]	  NetworkManager's connections
  d[evice]	  devices managed by NetworkManager
  
~]$ nmcli general help
Usage: nmcli general { COMMAND | help }

  COMMAND := { status | hostname | permissions | logging }

  status

  hostname [<hostname>]

  permissions

  logging [level <log level>] [domains <log domains>]
In the second example above the help is related to the object general.
The nmcli-examples(5) man page has many useful examples. A brief selection is shown here:
To show the overall status of NetworkManager:
	nmcli general status
	
To control NetworkManager logging:
	nmcli general logging
	
To show all connections:
	nmcli connection show
	
To show only currently active connections, add the -a, --active option as follows:
	nmcli connection show --active
	
To show devices recognized by NetworkManager and their state:
	nmcli device status

Commands can be shortened and some options omitted. For example the command:
	nmcli connection modify id 'MyCafe' 802-11-wireless.mtu 1350
	
Can be reduced to the following command:
	nmcli con mod MyCafe 802-11-wireless.mtu 1350
	
The id option can be omitted because the connection ID (name) is unambiguous for nmcli in this case. As
you become familiar with the commands, further abbreviations can be made. For example:
	nmcli connection add type ethernet
	
can be reduced to:
	nmcli c a type eth
	
NOTE
Remember to use tab completion when in doubt.

Starting and Stopping an Interface Using nmcli
The nmcli tool can be used to start and stop any network interface, including masters. For example:
	nmcli con up id bond0
	nmcli con up id port0
	nmcli dev disconnect bond0
	nmcli dev disconnect ens3
	
NOTE
It is recommended to use nmcli dev disconnect iface-name rather than nmcli con down id id-string because
disconnection places the interface into a “manual” mode, in which no automatic connection will be
started until the user tells NetworkManager to start a connection or until an external event like a
carrier change, hibernate, or sleep, occurs.

The nmcli Interactive Connection Editor
The nmcli tool has an interactive connection editor. To use it, enter the following command:
	~]$ nmcli con edit
	
You will be prompted to enter a valid connection type from the list displayed. After entering a connection
type you will be placed at the nmcli prompt. If you are familiar with the connection types you can add a
valid connection type option to the nmcli con edit command and be taken straight to the nmcli prompt. The
format is as follows for editing an existing connection profile:
	nmcli con edit [id | uuid | path] ID
	
For adding and editing a new connection profile, the following format applies:
	nmcli con edit [type new-connection-type] [con-name new-connection-name]
	
Type help at the nmcli prompt to see a list of valid commands. Use the describe command to get a
description of settings and their properties. The format is as follows:
	describe setting.property
	
For example:
	nmcli> describe team.config
	
2.3.1. Understanding the nmcli Options
Many of the nmcli commands are self-explanatory, however a few command options are worth a moments study:
type — The connection type.
Allowed values are: adsl, bond, bond-slave, bridge, bridge-slave, bluetooth, cdma, ethernet, gsm,
infiniband, olpc-mesh, team, team-slave, vlan, wifi, wimax.
Each connection type has type-specific command options. Press Tab to see a list of them or see the
TYPE_SPECIFIC_OPTIONS list in the nmcli(1) man page. The type option is applicable after the following:
	nmcli connection add and nmcli connection edit.
	
con-name — The name assigned to a connection profile.
If you do not specify a connection name, one will be generated as follows:
	type-ifname[-number]
	
The connection name is the name of a connection profile and should not be confused with the interface
name that denotes a device (wlan0, ens3, em1, and so on). Users can however name the connections after
interfaces, but they are not the same thing. There can be multiple connection profiles available for a
device. This is particularly useful for mobile devices or when switching a network cable back and forth
between different devices. Rather than edit the configuration, create different profiles and apply them
to the interface as needed. The id option also refers to the connection profile name.
id — An identification string assigned by the user to a connection profile.
The ID can be used in nmcli connection commands to identify a connection. The NAME field in the output always
denotes the connection ID (name). It refers to the same connection profile name that the con-name does.
uuid — A unique identification string assigned by the system to a connection profile.
The UUID can be used in nmcli connection commands to identify a connection.

2.3.2. Connecting to a Network Using nmcli
To list the currently available network connections, issue a command as follows:
	~]$ nmcli con show
	NAME		  UUID					TYPE		DEVICE
	Auto Ethernet	  9b7f2511-5432-40ae-b091-af2457dfd988	802-3-ethernet	--
	ens3		  fb157a65-ad32-47ed-858c-102a48e064a2	802-3-ethernet	ens3
	MyWiFi		  91451385-4eb8-4080-8b82-720aab8328dd	802-11-wireless wlan0
	
Note that the NAME field in the output always denotes the connection ID (name). It is not the interface
name even though it might look the same. In the second connection shown above, ens3 in the NAME field is
the connection ID given by the user to the profile applied to the interface ens3. In the last connection
shown, the user has assigned the connection ID MyWiFi to the interface wlan0.
Adding an Ethernet connection means creating a configuration profile which is then assigned to a
device. Before creating a new profile, review the available devices as follows:
	~]$ nmcli dev status
	DEVICE	TYPE	  STATE		CONNECTION
	ens3	ethernet  disconnected	--
	ens9	ethernet  disconnected	--
	lo	loopback  unmanaged	--
	
Adding a Dynamic Ethernet Connection
To add an Ethernet configuration profile with dynamic IP configuration, allowing DHCP to assign the
network configuration, a command in the following format can be used:
	nmcli connection add type ethernet con-name connection-name ifname interface-name
	
For example, to create a dynamic connection profile named my-office, issue a command as follows:
	~]$ nmcli con add type ethernet con-name my-office ifname ens3
	Connection 'my-office' (fb157a65-ad32-47ed-858c-102a48e064a2) successfully added.

NetworkManager will set its internal parameter connection.autoconnect to yes. NetworkManager will also write
out settings to /etc/sysconfig/network-scripts/ifcfg-my-office where the ONBOOT directive will be set to yes.
Note that manual changes to the ifcfg file will not be noticed by NetworkManager until the interface is
next brought up. See Section 1.9, “Network Configuration Using sysconfig Files” for more information
on using configuration files.
To bring up the Ethernet connection, issue a command as follows:
	~]$ nmcli con up my-office
	
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/5)
Review the status of the devices and connections:
	~]$ nmcli device status
	DEVICE	TYPE	  STATE		CONNECTION
	ens3	ethernet  connected	my-office
	ens9	ethernet  disconnected	--
	lo	loopback  unmanaged	--
	
To change the host name sent by a host to a DHCP server, modify the dhcp-hostname property as follows:
	~]$ nmcli con modify my-office my-office ipv4.dhcp-hostname host-name ipv6.dhcp-hostname host-name
	
To change the IPv4 client ID sent by a host to a DHCP server, modify the dhcp-client-id property as follows:
	~]$ nmcli con modify my-office my-office ipv4.dhcp-client-id client-ID-string
	
There is no dhcp-client-id property for IPv6, dhclient creates an identifier for IPv6. See the dhclient(8)
man page for details.
To ignore the DNS servers sent to a host by a DHCP server, modify the ignore-auto-dns property as follows:
	~]$ nmcli con modify my-office my-office ipv4.ignore-auto-dns yes ipv6.ignore-auto-dns yes
	
See the nm-settings(5) man page for more information on properties and their settings.

Example 2.1. Configuring a Dynamic Ethernet Connection Using the Interactive Editor
To configure a dynamic Ethernet connection using the interactive editor, issue commands as follows:
	~]$ nmcli con edit type ethernet con-name ens3

	===| nmcli interactive connection editor |===

	Adding a new '802-3-ethernet' connection
	
	Type 'help' or '?' for available commands.
	Type 'describe [<setting>.<prop>]' for detailed property description.

You may edit the following settings: connection, 802-3-ethernet (ethernet), 802-1x, ipv4, ipv6, dcb
	nmcli> describe ipv4.method

	=== [method] ===

	[NM property description]
	
IPv4 configuration method.  If 'auto' is specified then the appropriate automatic method (DHCP, PPP, etc)
is used for the interface and most other properties can be left unset.	If 'link-local' is specified,
then a link-local address in the 169.254/16 range will be assigned to the interface.  If 'manual' is
specified, static IP addressing is used and at least one IP address must be given in the 'addresses'
property.  If 'shared' is specified (indicating that this connection will provide network access to
other computers) then the interface is assigned an address in the 10.42.x.1/24 range and a DHCP and
forwarding DNS server are started, and the interface is NAT-ed to the current default network connection.
'disabled' means IPv4 will not be used on this connection.  This property must be set.
	nmcli> set ipv4.method auto
	nmcli> save
	Saving the connection with 'autoconnect=yes'. That might result in an immediate activation of the
	connection.
	Do you still want to save? [yes] yes
	Connection 'ens3' (090b61f7-540f-4dd6-bf1f-a905831fc287) successfully saved.
	nmcli> quit
	~]$
	
The default action is to save the connection profile as persistent. If required, the profile can be held
in memory only, until the next restart, by means of the save temporary command.

Adding a Static Ethernet Connection
To add an Ethernet connection with static IPv4 configuration, a command in the following format can be used:
nmcli connection add type ethernet con-name connection-name ifname interface-name ip4 address gw4 address
IPv6 address and gateway information can be added using the ip6 and gw6 options.
For example, a command to create a static Ethernet connection with only IPv4 address and gateway is
as follows:
	~]$ nmcli con add type ethernet con-name test-lab ifname ens9 ip4 10.10.10.10/24 \
		gw4 10.10.10.254
Optionally, at the same time specify IPv6 address and gateway for the device as follows:
	~]$ nmcli con add type ethernet con-name test-lab ifname ens9 ip4 10.10.10.10/24 \
		gw4 10.10.10.254 ip6 abbe::cafe gw6 2001:db8::1
	Connection 'test-lab' (05abfd5e-324e-4461-844e-8501ba704773) successfully added.
	
NetworkManager will set its internal parameter ipv4.method to manual and connection.autoconnect to
yes. NetworkManager will also write out settings to /etc/sysconfig/network-scripts/ifcfg-my-office where
the corresponding BOOTPROTO will be set to none and ONBOOT will be set to yes.
Note that manual changes to the ifcfg file will not be noticed by NetworkManager until the interface is
next brought up. See Section 1.9, “Network Configuration Using sysconfig Files” for more information
on using configuration files.
To set two IPv4 DNS server addresses:
	~]$ nmcli con mod test-lab ipv4.dns "8.8.8.8 8.8.4.4"
	
Note that this will replace any previously set DNS servers. To set two IPv6 DNS server addresses:
	~]$ nmcli con mod test-lab ipv6.dns "2001:4860:4860::8888 2001:4860:4860::8844"
	
Note that this will replace any previously set DNS servers. Alternatively, to add additional DNS servers
to any previously set, use the + prefix as follows:
	~]$ nmcli con mod test-lab +ipv4.dns "8.8.8.8 8.8.4.4"
	~]$ nmcli con mod test-lab +ipv6.dns "2001:4860:4860::8888 2001:4860:4860::8844"
	
To bring up the new Ethernet connection, issue a command as follows:
	~]$ nmcli con up test-lab ifname ens9
	
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)
Review the status of the devices and connections:
	~]$ nmcli device status
	DEVICE	TYPE	  STATE      CONNECTION
	ens3	ethernet  connected  my-office
	ens9	ethernet  connected  test-lab
	lo	loopback  unmanaged  --
	
To view detailed information about the newly configured connection, issue a command as follows:
	~]$ nmcli -p con show test-lab
	===============================================================================
			     Connection profile details (test-lab)
	===============================================================================
	connection.id:				test-lab
	connection.uuid:			05abfd5e-324e-4461-844e-8501ba704773
	connection.interface-name:		ens9
	connection.type:			802-3-ethernet
	connection.autoconnect:			yes
	connection.timestamp:			1410428968
	connection.read-only:			no
	connection.permissions:
	connection.zone:			--
	connection.master:			--
	connection.slave-type:			--
	connection.secondaries:
	connection.gateway-ping-timeout:	0
	[output truncated]
	
The use of the -p, --pretty option adds a title banner and section breaks to the output.

Example 2.2. Configuring a Static Ethernet Connection Using the Interactive Editor
To configure a static Ethernet connection using the interactive editor, issue commands as follows:
	~]$ nmcli con edit type ethernet con-name ens3

	===| nmcli interactive connection editor |===

	Adding a new '802-3-ethernet' connection

	Type 'help' or '?' for available commands.
	Type 'describe [>setting<.>prop<]' for detailed property description.

You may edit the following settings: connection, 802-3-ethernet (ethernet), 802-1x, ipv4, ipv6, dcb
	nmcli> set ipv4.addresses 192.168.122.88/24
	Do you also want to set 'ipv4.method' to 'manual'? [yes]: yes
	nmcli>
	nmcli> save temporary
	Saving the connection with 'autoconnect=yes'. That might result in an immediate activation of the connection.
	Do you still want to save? [yes] no
	nmcli> save
	Saving the connection with 'autoconnect=yes'. That might result in an immediate activation of the connection.
	Do you still want to save? [yes] yes
	Connection 'ens3' (704a5666-8cbd-4d89-b5f9-fa65a3dbc916) successfully saved.
	nmcli> quit
	~]$
	
The default action is to save the connection profile as persistent. If required, the profile can be held
in memory only, until the next restart, by means of the save temporary command.

Locking a Profile to a Specific Device
To lock a profile to a specific interface device, the commands used in the examples above include the
interface name. For example:
	nmcli connection add type ethernet con-name connection-name ifname interface-name
	
To make a profile usable for all compatible Ethernet interfaces, issue a command as follows:
	nmcli connection add type ethernet con-name connection-name ifname "*"
	
Note that you have to use the ifname argument even if you do not want to set a specific interface. Use
the wildcard character * to specify that the profile can be used with any compatible device.
To lock a profile to a specific MAC address, use a command in the following format:
	nmcli connection add type ethernet con-name "connection-name" ifname "*" mac 00:00:5E:00:53:00

Adding a Wi-Fi Connection
To view the available Wi-Fi access points, issue a command as follows:
	~]$ nmcli dev wifi list
	  SSID		  MODE	CHAN  RATE     SIGNAL  BARS  SECURITY
	  FedoraTest	 Infra	11    54 MB/s  98      ▂▄▆█  WPA1
	  Red Hat Guest  Infra	6     54 MB/s  97      ▂▄▆█  WPA2
	  Red Hat	 Infra	6     54 MB/s  77      ▂▄▆_  WPA2 802.1X
	* Red Hat	 Infra	40    54 MB/s  66      ▂▄▆_  WPA2 802.1X
	  VoIP		 Infra	1     54 MB/s  32      ▂▄__  WEP
	  MyCafe	 Infra	11    54 MB/s  39      ▂▄__  WPA2
	  
To create a Wi-Fi connection profile with static IP configuration, but allowing automatic DNS address
assignment, issue a command as follows:
	~]$ nmcli con add con-name MyCafe ifname wlan0 type wifi ssid MyCafe \
		ip4 192.168.100.101/24 gw4 192.168.100.1

		To set a WPA2 password, for example “caffeine”, issue commands as follows:
	~]$ nmcli con modify MyCafe wifi-sec.key-mgmt wpa-psk
	~]$ nmcli con modify MyCafe wifi-sec.psk caffeine

See the Red Hat Enterprise Linux 7 Security Guide for information on password security.
To change Wi-Fi state, issue a command in the following format:
	~]$ nmcli radio wifi [on | off ]
	
Changing a Specific Property
To check a specific property, for example mtu, issue a command as follows:
	~]$ nmcli connection show id 'MyCafe' | grep mtu
	802-11-wireless.mtu:			 auto
	
To change the property of a setting, issue a command as follows:
	~]$ nmcli connection modify id 'MyCafe' 802-11-wireless.mtu 1350
	
To verify the change, issue a command as follows:
	~]$ nmcli connection show id 'MyCafe' | grep mtu
	802-11-wireless.mtu:			 1350
	
Note that NetworkManager refers to parameters such as 802-3-ethernet and 802-11-wireless as the setting,
and mtu as a property of the setting. See the nm-settings(5) man page for more information on properties
and their settings.

2.3.3. Configuring Static Routes Using nmcli
To configure static routes using the nmcli tool, the command line or the interactive editor mode can be used.

Example 2.3. Configuring Static Routes Using nmcli
To configure a static route for an existing Ethernet connection using the command line, enter a command
as follows:
	~]# nmcli connection modify eth0 +ipv4.routes "192.168.122.0/24 10.10.10.1"
	
This will direct traffic for the 192.168.122.0/24 subnet to the gateway at 10.10.10.1

Example 2.4. Configuring Static Routes Using nmcli Editor
To configure a static route for an Ethernet connection using the interactive editor, issue commands
as follows:
	~]$ nmcli con edit type ethernet con-name ens3

	===| nmcli interactive connection editor |===

	Adding a new '802-3-ethernet' connection

	Type 'help' or '?' for available commands.
	Type 'describe [>setting<.>prop<]' for detailed property description.

	You may edit the following settings: connection, 802-3-ethernet (ethernet), 802-1x, ipv4, ipv6, dcb
	nmcli> set ipv4.routes 192.168.122.0/24 10.10.10.1
	nmcli>
	nmcli> save persistent
	Saving the connection with 'autoconnect=yes'. That might result in an immediate activation of the\
		connection.
	Do you still want to save? [yes] yes
	Connection 'ens3' (704a5666-8cbd-4d89-b5f9-fa65a3dbc916) successfully saved.
	nmcli> quit
	~]$


---
http://www.tecmint.com/configure-network-connections-using-nmcli-tool-in-linux/

How to Configure and Manage Network Connections Using ‘nmcli’ Tool

As a Linux administrator you’ve got various tools to use in order to configure your network connections,
such as: nmtui, your NetworkManager with GNOME graphical user interface and of course nmcli (network
manager command line tool).

Configure Network Ethernet Connection Using nmcli Tool
I have seen many administrators using nmtui for simplicity. However using nmcli saves your time, gives
you confidence, can use it in scripts and it’s the first tool to use in order to troubleshoot your
Linux server networking and bring back rapidly its functionality.

Seeing many comments asking help about nmcli, I decided to write this article. Of course you should always
read carefully man pages (its the No1 help for you). My aim is to save your time and show you some hints.

The syntax of nmcli is:
	# nmcli [OPTIONS] OBJECT {COMMAND | help}

Where OBJECT is one of: general, networking, radio, connection, device, agent.
A good starting point would be to check our devices:
	# nmcli dev status
	DEVICE	    TYPE      STATE	    CONNECTION
	docker0     bridge    connected     docker0
	virbr0	    bridge    connected     virbr0
	enp0s3	    ethernet  connected     enp0s3
	virbr0-nic  ethernet  disconnected  --
	lo	    loopback  unmanaged     --
	
As we can see in the first column is a list of our network devices. We have one network cards with name
enp0s3. In your machine you could see other names.

Naming depends on the type of the network card (if it is onboard, pci card , etc). In the last column
we see our configuration files which is used by our devices in order to connect to the network.

It is simple to understand that our devices by themselves can do nothing. They need us to make a
configuration file to tell them how to achieve network connectivity. We call these files also as
“connection profiles”. We find them in /etc/sysconfig/network-scripts directory.

	# cd /etc/sysconfig/network-scripts/
	# ls
	Sample Output

	ifcfg-enp0s3  ifdown-isdn      ifup	     ifup-plip	    ifup-tunnel
	ifcfg-lo      ifdown-post      ifup-aliases  ifup-plusb     ifup-wireless
	ifdown	      ifdown-ppp       ifup-bnep     ifup-post	    init.ipv6-global
	ifdown-bnep   ifdown-routes    ifup-eth      ifup-ppp	    network-functions
	ifdown-eth    ifdown-sit       ifup-ib	     ifup-routes    network-functions-ipv6
	ifdown-ib     ifdown-Team      ifup-ippp     ifup-sit
	ifdown-ippp   ifdown-TeamPort  ifup-ipv6     ifup-Team
	ifdown-ipv6   ifdown-tunnel    ifup-isdn     ifup-TeamPort
	
As you can see here the files with name starting with ifcfg- (interface configuration) are connection
profiles. When we create a new connection or modify an existing one with nmcli or nmtui, the results
are saved here as connection profiles.

Ι ‘ll show you two of them from my machine, one with a dhcp configuration and one with static ip.
	# cat ifcfg-static1
	# cat ifcfg-Myoffice1

Check Network Configuration
We realize that some properties have different values and some others don’t exist if it isn’t
necessary. Let’s have a quick look to most important of them.

TYPE, we have ethernet type here. We could have wifi, team, bond and others.
DEVICE, the name of the network device which is associated with this profile.
BOOTPROTO, if it has value “dhcp” then our connection profile takes dynamic IP from dhcp server,
if it has value “none” then it takes no dynamic IP and probably whe assign a static IP.
IPADDR, is the static IP we assign to our profile.
PREFIX, the subnet mask. A value of 24 means 255.255.255.0. You can understand better the subnet mask
if you write down its binary format. For example values of 16, 24, 26 means that the first 16, 24 or
26 bits respectively are 1 and the rest 0, defining exactly what the network address is and what is the
range of ip which can be assigned.
GATEWAY, the gateway IP.
DNS1, DNS2, two dns servers we want to use.
ONBOOT, if it has value “yes” it means, that on boot our computer will read this profile and try to
assign it to its device.
Now, let’s move on and check our connections:
	# nmcli con show
	Show Active Network Connections
	Show Active Network Connections
	
The last column of devices helps us understand which connection is “UP” and running and which is
not. In the above image you can see the two connections which are active: Myoffice1 and enp0s8.

Hint: If you want to see only the active connections, type:
	# nmcli con show -a
	
Hint: You can use the auto-complete hitting Tab when you use nmcli, but is better to use minimal format
of the command. Thus, the following commands are equal:
	# nmcli connection show
	# nmcli con show
	# nmcli c s
	
If I check the ip addresses of my devices:
	# ip a
	
Check Server IP Address
I see that my device enp0s3 took the 192.168.1.6 IP from dhcp server, because the connection profile
Myoffice1 which is up has a dhcp configuration. If I bring “up” my connection profile with name
static1 then my device will take the static IP 192.168.1.40 as it is defined in the connection profile.
	# nmcli con down Myoffice1 ; nmcli con up static1
	# nmcli con show
	
Let’s see the IP address again:
	# ip a
	
Check Network Static IP Address
We can make our first connection profile. The minimum properties we must define are type, ifname and
con-name:
type – for the type of connection.
ifname – for the device name which is assigned our connection.
con-name – for the connection name.

Let’s make a new ethernet connection with name Myhome1, assigned to device enp0s3:
	# nmcli con add type ethernet con-name Myhome1 ifname enp0s3
	
Check its configuration:
	# cat ifcfg-Myhome1
	
Create New Network Connection
As you can see it has BOOTPROTO=dhcp, because we didn’t give any static ip address.

Hint: We can modify any connection with the “nmcli con mod“ command. However if you modify a dhcp
connection and change it to static don’t forget to change its “ipv4.method” from “auto” to
“manual”. Otherwise you will end up with two IP addresses: one from dhcp server and the static one.

Let’s make a new Ethernet connection profile with name static2, which will be assigned to device enp0s3,
with static IP 192.168.1.50, subnet mask 255.255.255.0=24 and gateway 192.168.1.1.
	# nmcli con add type ethernet con-name static2 ifname enp0s3 ip4 192.168.1.50/24 gw4 192.168.1.1
	
Check its configuration:
	# cat ifcfg-static2
	
Create New Ethernet Connection
Let’s modify the last connection profile and add two dns servers.
	# nmcli con mod static2 ipv4.dns “8.8.8.8 8.8.4.4”
	
Hint: There is something here you must pay attention: the properties for IP address and gateway have
different names when you add and when you modify a connection. When you add connections you use “ip4”
and “gw4”, while when you modify them you use “ipv4” and “gwv4”.

Now let’s bring up this connection profile:
	# nmcli con down static1 ; nmcli con up static2
	
As you can see, the device enp0s3 has now IP address 192.168.1.50.
	# ip a
	
Verify IP Address of New Network Connection
Hint: There are a lot of properties you can modify. If you don’t remember them by heart you can help
yourself by typing “nmcli con show” and after that the connection name:
	# nmcli con show static2
	
Verify IP Address of New Network Connection
You can modify all these properties written in lowercase.

For example: when you bring down a connection profile, the NetworkManager searches for another connection
profile and brings it up automatically. (I leave it as exercise to check it). If you don’t want your
connection profile to autoconnect:
	# nmcli con mod static2 connection.autoconnect no
	
The last exercise is very usefull: you made a connection profile but you want it to be used by specific
users. It’s good to classify your users!

We let only user stella to use this profile:
	# nmcli con mod static2 connection.permissions stella
	
Hint: If you want to give permissions to more than one users, you must type user:user1,user2 without
blank space between them:
	# nmcli con mod static2 connection.permissions user:stella,john
	
Allow Network Connections to Users
If you login as another user you can’t bring “up” this connection profile:
	# nmcli con show
	# nmcli con up static2
	# ls /etc/sysconfig/network-scripts
	
Enable Network Connection
An error message says that connection ‘static2’ does not exist, even if we see that it exists. That’s
because current user has no permissions to bring up this connection.

Conclusion: don’t hesitate to use nmcli. It’s easy and helpful.


---
https://www.mankier.com/7/nmcli-examples

nmcli-examples man page

nmcli-examples — usage examples of nmcli

Synopsis

nmcli [OPTIONS...]

Description

nmcli is a command-line client for NetworkManager. It allows controlling NetworkManager and reporting
its status. For more information please refer to nmcli(1) manual page.

The purpose of this manual page is to provide you with various examples and usage scenarios of nmcli.

Examples
Example 1. Listing available Wi-Fi APs

	$ nmcli device wifi list
	*  SSID		      MODE    CHAN  RATE       SIGNAL  BARS  SECURITY
	   netdatacomm_local  Infra   6     54 Mbit/s  37      ▂▄__  WEP
	*  F1		      Infra   11    54 Mbit/s  98      ▂▄▆█  WPA1
	   LoremCorp	      Infra   1     54 Mbit/s  62      ▂▄▆_  WPA2 802.1X
	   Internet	      Infra   6     54 Mbit/s  29      ▂___  WPA1
	   HPB110a.F2672A     Ad-Hoc  6     54 Mbit/s  22      ▂___  --
	   Jozinet	      Infra   1     54 Mbit/s  19      ▂___  WEP
	   VOIP		      Infra   1     54 Mbit/s  20      ▂___  WEP
	   MARTINA	      Infra   4     54 Mbit/s  32      ▂▄__  WPA2
	   N24PU1	      Infra   7     11 Mbit/s  22      ▂___  --
	   alfa		      Infra   1     54 Mbit/s  67      ▂▄▆_  WPA2
	   bertnet	      Infra   5     54 Mbit/s  20      ▂___  WPA1 WPA2
	   
This command shows how to list available Wi-Fi networks (APs). You can also use --fields option for
displaying different columns. nmcli -f all dev wifi list will show all of them.

Example 2. Showing general information and properties for a Wi-Fi interface
	$ nmcli -p -f general,wifi-properties device show wlan0
	===========================================================================
				Device details (wlan0)
	===========================================================================
	GENERAL.DEVICE:		  wlan0
	GENERAL.TYPE:		  wifi
	GENERAL.VENDOR:		  Intel Corporation
	GENERAL.PRODUCT:	  PRO/Wireless 5100 AGN [Shiloh] Network Connection
	GENERAL.DRIVER:		  iwlwifi
	GENERAL.DRIVER-VERSION:   3.8.13-100.fc17.x86_64
	GENERAL.FIRMWARE-VERSION: 8.83.5.1 build 33692
	GENERAL.HWADDR:		  00:1E:65:37:A1:D3
	GENERAL.MTU:		  1500
	GENERAL.STATE:		  100 (connected)
	GENERAL.REASON:		  0 (No reason given)
	GENERAL.UDI:		  /sys/devices/pci0000:00/0000:00:1c.1/net/wlan0
	GENERAL.IP-IFACE:	  wlan0
	GENERAL.IS-SOFTWARE:	  no
	GENERAL.NM-MANAGED:	  yes
	GENERAL.AUTOCONNECT:	  yes
	GENERAL.FIRMWARE-MISSING: no
	GENERAL.CONNECTION:	  My Alfa WiFi
	GENERAL.CON-UUID:	  85194f4c-d496-4eec-bae0-d880b4cbcf26
	GENERAL.CON-PATH:	  /org/freedesktop/NetworkManager/ActiveConnection/
	10
	---------------------------------------------------------------------------
	WIFI-PROPERTIES.WEP:	  yes
	WIFI-PROPERTIES.WPA:	  yes
	WIFI-PROPERTIES.WPA2:	  yes
	WIFI-PROPERTIES.TKIP:	  yes
	WIFI-PROPERTIES.CCMP:	  yes
	WIFI-PROPERTIES.AP:	  no
	WIFI-PROPERTIES.ADHOC:	  yes
	---------------------------------------------------------------------------
	
This command shows information about a Wi-Fi device.

Example 3. Listing NetworkManager polkit permissions
	$ nmcli general permissions
	PERMISSION						  VALUE
	org.freedesktop.NetworkManager.enable-disable-network	  yes
	org.freedesktop.NetworkManager.enable-disable-wifi	  yes
	org.freedesktop.NetworkManager.enable-disable-wwan	  yes
	org.freedesktop.NetworkManager.enable-disable-wimax	  yes
	org.freedesktop.NetworkManager.sleep-wake		  no
	org.freedesktop.NetworkManager.network-control		  yes
	org.freedesktop.NetworkManager.wifi.share.protected	  yes
	org.freedesktop.NetworkManager.wifi.share.open		  yes
	org.freedesktop.NetworkManager.settings.modify.system	  yes
	org.freedesktop.NetworkManager.settings.modify.own	  yes
	org.freedesktop.NetworkManager.settings.modify.hostname   auth
	org.freedesktop.NetworkManager.settings.modify.global-dns auth
	org.freedesktop.NetworkManager.reload			  auth
	
This command shows configured polkit permissions for various NetworkManager operations. These
permissions or actions (using polkit language) are configured by a system administrator
and are not meant to be changed by users. The usual place for the polkit configuration
is /usr/share/polkit-1/actions/org.freedesktop.NetworkManager.policy. pkaction command can display
description for polkit actions.
	pkaction --action-id org.freedesktop.NetworkManager.network-control --verbose

More information about polkit can be found at http://www.freedesktop.org/wiki/Softwar….

Example 4. Listing NetworkManager log level and domains
	$ nmcli general logging
	LEVEL  DOMAINS
	INFO   PLATFORM,RFKILL,ETHER,WIFI,BT,MB,DHCP4,DHCP6,PPP,WIFI_SCAN,IP4,IP6,A
	UTOIP4,DNS,VPN,SHARING,SUPPLICANT,AGENTS,SETTINGS,SUSPEND,CORE,DEVICE,OLPC,
	WIMAX,INFINIBAND,FIREWALL,ADSL,BOND,VLAN,BRIDGE,DBUS_PROPS,TEAM,CONCHECK,DC
	B,DISPATCH
	
This command shows current NetworkManager logging status.

Example 5. Changing NetworkManager logging
	$ nmcli g log level DEBUG domains CORE,ETHER,IP
	$ nmcli g log level INFO domains DEFAULT
	
The first command makes NetworkManager log in DEBUG level, and only for CORE, ETHER and IP domains. The
second command restores the default logging state. Please refer to the NetworkManager.conf(5) manual
page for available logging levels and domains.

Example 6. Adding a bonding master and two slave connection profiles
	$ nmcli con add type bond ifname mybond0 mode active-backup
	$ nmcli con add type ethernet ifname eth1 master mybond0
	$ nmcli con add type ethernet ifname eth2 master mybond0
	
This example demonstrates adding a bond master connection and two slaves. The first command adds a
master bond connection, naming the bonding interface mybond0 and using active-backup mode. The next
two commands add slaves connections, both enslaved to mybond0. The first slave will be bound to eth1
interface, the second to eth2.

Example 7. Adding a team master and two slave connection profiles
	$ nmcli con add type team con-name Team1 ifname Team1 config team1-master-json.conf
	$ nmcli con add type ethernet con-name Team1-slave1 ifname em1 master Team1
	$ nmcli con add type ethernet con-name Team1-slave2 ifname em2 master Team1
	
This example demonstrates adding a team master connection profile and two slaves. It is very similar
to the bonding example. The first command adds a master team profile, naming the team interface
and the profile Team1. The team configuration for the master is read from team1-master-json.conf
file. Later, you can change the configuration with modify command (nmcli con modify Team1 team.config
team1-master-another-json.conf). The last two commands add slaves profiles, both enslaved to Team1. The
first slave will be bound to em1 interface, the second to em2. The slaves don't specify config and thus
teamd will use its default configuration. You will activate the whole setup by activating both slaves:
	$ nmcli con up Team1-slave1
	$ nmcli con up Team1-slave2
	
By default, the created profiles are marked for auto-activation. But if another connection has been
activated on the device, the new profile won't activate automatically and you need to activate it manually.

Example 8. Adding a bridge and two slave profiles
	$ nmcli con add type bridge con-name TowerBridge ifname TowerBridge
	$ nmcli con add type ethernet con-name br-slave-1 ifname ens3 master TowerBridge
	$ nmcli con add type ethernet con-name br-slave-2 ifname ens4 master TowerBridge
	$ nmcli con modify TowerBridge bridge.stp no
	
This example demonstrates adding a bridge master connection and two slaves. The first command adds a master
bridge connection, naming the bridge interface and the profile as TowerBridge. The next two commands add
slaves profiles, both will be enslaved to TowerBridge. The first slave will be tied to ens3 interface,
the second to ens4. The last command will disable 802.1D STP for the TowerBridge profile.

Example 9. Adding an ethernet connection profile with manual IP configuration
	$ nmcli con add con-name my-con-em1 ifname em1 type ethernet \
	  ip4 192.168.100.100/24 gw4 192.168.100.1 ip4 1.2.3.4 ip6 abbe::cafe
	$ nmcli con mod my-con-em1 ipv4.dns "8.8.8.8 8.8.4.4"
	$ nmcli con mod my-con-em1 +ipv4.dns 1.2.3.4
	$ nmcli con mod my-con-em1 ipv6.dns "2001:4860:4860::8888 2001:4860:4860::8844"
	$ nmcli -p con show my-con-em1
	
The first command adds an Ethernet connection profile named my-con-em1 that is bound to interface name
em1. The profile is configured with static IP addresses. Three addresses are added, two IPv4 addresses and
one IPv6. The first IP 192.168.100.100 has a prefix of 24 (netmask equivalent of 255.255.255.0). Gateway
entry will become the default route if this profile is activated on em1 interface (and there is no connection
with higher priority). The next two addresses do not specify a prefix, so a default prefix will be used,
i.e. 32 for IPv4 and 128 for IPv6. The second, third and fourth commands modify DNS parameters of the new
connection profile. The last con show command displays the profile so that all parameters can be reviewed.

Example 10. Escaping colon characters in tabular mode
	$ nmcli -t -f general -e yes -m tab dev show eth0
	GENERAL:eth0:ethernet:Intel Corporation:82567LM Gigabit Network Connection:
	e1000e:2.1.4-k:1.8-3:00\:22\:68\:15\:29\:21:1500:100 (connected):0 (No reas
	on given):/sys/devices/pci0000\:00/0000\:00\:19.0/net/eth0:eth0:yes:yes:no:
	ethernet-13:89cbcbc6-dc85-456c-9c8b-bd828fee3917:/org/freedesktop/NetworkMa
	nager/ActiveConnection/9
	
This example shows escaping colon characters in tabular mode. It may be useful for script processing,
because ':' is used as a field separator.

Example 11. nmcli usage in a NetworkManager dispatcher script to make Ethernet and Wi-Fi mutually exclusive
	#!/bin/bash
	export LC_ALL=C

	enable_disable_wifi ()
	{
	    result=$(nmcli dev | grep "ethernet" | grep -w "connected")
	    if [ -n "$result" ]; then
		nmcli radio wifi off
	    else
		nmcli radio wifi on
	    fi
	}

	if [ "$2" = "up" ]; then
	    enable_disable_wifi
	fi

	if [ "$2" = "down" ]; then
	    enable_disable_wifi
	fi
	
This dispatcher script makes Wi-Fi mutually exclusive with wired networking. When a wired interface is
connected, Wi-Fi will be set to airplane mode (rfkilled). When the wired interface is disconnected,
Wi-Fi will be turned back on. Name this script e.g. 70-wifi-wired-exclusive.sh and put it into
/etc/NetworkManager/dispatcher.d/ directory. See NetworkManager(8) manual page for more information
about NetworkManager dispatcher scripts.

Example sessions of interactive connection editor

Example 12. Adding an ethernet connection profile in interactive editor (a)
$ nmcli connection edit type ethernet

===| nmcli interactive connection editor |===

Adding a new '802-3-ethernet' connection

Type 'help' or '?' for available commands.
Type 'describe [<setting>.<prop>]' for detailed property description.

You may edit the following settings: connection, 802-3-ethernet (ethernet),
802-1x, ipv4, ipv6, dcb
	nmcli> print
	===========================================================================
				  Connection details
	===========================================================================
	connection.id:			    ethernet-4
	connection.uuid:		    de89cdeb-a3e1-4d53-8fa0-c22546c775f4
	connection.interface-name:	    --
	connection.type:		    802-3-ethernet
	connection.autoconnect:		    yes
	connection.autoconnect-priority:    0
	connection.timestamp:		    0
	connection.read-only:		    no
	connection.permissions:
	connection.zone:		    --
	connection.master:		    --
	connection.slave-type:		    --
	connection.secondaries:
	connection.gateway-ping-timeout:    0
	---------------------------------------------------------------------------
	802-3-ethernet.port:		    --
	802-3-ethernet.speed:		    0
	802-3-ethernet.duplex:		    --
	802-3-ethernet.auto-negotiate:	    yes
	802-3-ethernet.mac-address:	    --
	802-3-ethernet.cloned-mac-address:  --
	802-3-ethernet.mac-address-blacklist:
	802-3-ethernet.mtu:		    auto
	802-3-ethernet.s390-subchannels:
	802-3-ethernet.s390-nettype:	    --
	802-3-ethernet.s390-options:
	---------------------------------------------------------------------------
	ipv4.method:			    auto
	ipv4.dns:
	ipv4.dns-search:
	ipv4.addresses:
	ipv4.gateway:			    --
	ipv4.routes:
	ipv4.route-metric:		    -1
	ipv4.ignore-auto-routes:	    no
	ipv4.ignore-auto-dns:		    no
	ipv4.dhcp-client-id:		    --
	ipv4.dhcp-send-hostname:	    yes
	ipv4.dhcp-hostname:		    --
	ipv4.never-default:		    no
	ipv4.may-fail:			    yes
	---------------------------------------------------------------------------
	ipv6.method:			    auto
	ipv6.dns:
	ipv6.dns-search:
	ipv6.addresses:
	ipv6.gateway:			    --
	ipv6.routes:
	ipv6.route-metric:		    -1
	ipv6.ignore-auto-routes:	    no
	ipv6.ignore-auto-dns:		    no
	ipv6.never-default:		    no
	ipv6.may-fail:			    yes
	ipv6.ip6-privacy:		    -1 (unknown)
	ipv6.dhcp-hostname:		    --
	---------------------------------------------------------------------------
	
	nmcli> goto ethernet
	You may edit the following properties: port, speed, duplex, auto-negotiate,
	 mac-address, cloned-mac-address, mac-address-blacklist, mtu, s390-subchann
	els, s390-nettype, s390-options
	nmcli 802-3-ethernet> set mtu 1492
	nmcli 802-3-ethernet> b
	nmcli> goto ipv4.addresses
	nmcli ipv4.addresses> desc

	=== [addresses] ===
	[NM property description]
	Array of IP addresses.

	[nmcli specific description]
	Enter a list of IPv4 addresses formatted as:
	  ip[/prefix], ip[/prefix],...
	Missing prefix is regarded as prefix of 32.

	Example: 192.168.1.5/24, 10.0.0.11/24

	nmcli ipv4.addresses> set 192.168.1.100/24
	Do you also want to set 'ipv4.method' to 'manual'? [yes]: yes
	nmcli ipv4.addresses>
	nmcli ipv4.addresses> print
	addresses: 192.168.1.100/24
	nmcli ipv4.addresses> back
	nmcli ipv4> b
	nmcli> set ipv4.gateway 192.168.1.1
	nmcli> verify
	Verify connection: OK
	nmcli> print
	===========================================================================
				  Connection details
	===========================================================================
	connection.id:			    ethernet-4
	connection.uuid:		    de89cdeb-a3e1-4d53-8fa0-c22546c775f4
	connection.interface-name:	    --
	connection.type:		    802-3-ethernet
	connection.autoconnect:		    yes
	connection.autoconnect-priority:    0
	connection.timestamp:		    0
	connection.read-only:		    no
	connection.permissions:
	connection.zone:		    --
	connection.master:		    --
	connection.slave-type:		    --
	connection.secondaries:
	connection.gateway-ping-timeout:    0
	---------------------------------------------------------------------------
	802-3-ethernet.port:		    --
	802-3-ethernet.speed:		    0
	802-3-ethernet.duplex:		    --
	802-3-ethernet.auto-negotiate:	    yes
	802-3-ethernet.mac-address:	    --
	802-3-ethernet.cloned-mac-address:  --
	802-3-ethernet.mac-address-blacklist:
	802-3-ethernet.mtu:		    1492
	802-3-ethernet.s390-subchannels:
	802-3-ethernet.s390-nettype:	    --
	802-3-ethernet.s390-options:
	---------------------------------------------------------------------------
	ipv4.method:			    manual
	ipv4.dns:
	ipv4.dns-search:
	ipv4.addresses:			    192.168.1.100/24
	ipv4.gateway:			    192.168.1.1
	ipv4.routes:
	ipv4.route-metric:		    -1
	ipv4.ignore-auto-routes:	    no
	ipv4.ignore-auto-dns:		    no
	ipv4.dhcp-client-id:		    --
	ipv4.dhcp-send-hostname:	    yes
	ipv4.dhcp-hostname:		    --
	ipv4.never-default:		    no
	ipv4.may-fail:			    yes
	---------------------------------------------------------------------------
	ipv6.method:			    auto
	ipv6.dns:
	ipv6.dns-search:
	ipv6.addresses:
	ipv6.routes:
	ipv6.route-metric:		    -1
	ipv6.ignore-auto-routes:	    no
	ipv6.ignore-auto-dns:		    no
	ipv6.never-default:		    no
	ipv6.may-fail:			    yes
	ipv6.ip6-privacy:		    -1 (unknown)
	ipv6.dhcp-hostname:		    --
	---------------------------------------------------------------------------
	nmcli> set ipv4.dns 8.8.8.8 8.8.4.4
	nmcli> print
	===========================================================================
				  Connection details
	===========================================================================
	connection.id:			    ethernet-4
	connection.uuid:		    de89cdeb-a3e1-4d53-8fa0-c22546c775f4
	connection.interface-name:	    --
	connection.type:		    802-3-ethernet
	connection.autoconnect:		    yes
	connection.autoconnect-priority:    0
	connection.timestamp:		    0
	connection.read-only:		    no
	connection.permissions:
	connection.zone:		    --
	connection.master:		    --
	connection.slave-type:		    --
	connection.secondaries:
	connection.gateway-ping-timeout:    0
	---------------------------------------------------------------------------
	802-3-ethernet.port:		    --
	802-3-ethernet.speed:		    0
	802-3-ethernet.duplex:		    --
	802-3-ethernet.auto-negotiate:	    yes
	802-3-ethernet.mac-address:	    --
	802-3-ethernet.cloned-mac-address:  --
	802-3-ethernet.mac-address-blacklist:
	802-3-ethernet.mtu:		    1492
	802-3-ethernet.s390-subchannels:
	802-3-ethernet.s390-nettype:	    --
	802-3-ethernet.s390-options:
	---------------------------------------------------------------------------
	ipv4.method:			    manual
	ipv4.dns:			    8.8.8.8,8.8.4.4
	ipv4.dns-search:
	ipv4.addresses:			    192.168.1.100/24
	ipv4.gateway:			    192.168.1.1
	ipv4.routes:
	ipv4.route-metric:		    -1
	ipv4.ignore-auto-routes:	    no
	ipv4.ignore-auto-dns:		    no
	ipv4.dhcp-client-id:		    --
	ipv4.dhcp-send-hostname:	    yes
	ipv4.dhcp-hostname:		    --
	ipv4.never-default:		    no
	ipv4.may-fail:			    yes
	---------------------------------------------------------------------------
	ipv6.method:			    auto
	ipv6.dns:
	ipv6.dns-search:
	ipv6.addresses:
	ipv6.gateway:			    --
	ipv6.routes:
	ipv6.route-metric:		    -1
	ipv6.ignore-auto-routes:	    no
	ipv6.ignore-auto-dns:		    no
	ipv6.never-default:		    no
	ipv6.may-fail:			    yes
	ipv6.ip6-privacy:		    -1 (unknown)
	ipv6.dhcp-hostname:		    --
	---------------------------------------------------------------------------
	nmcli> verify
	Verify connection: OK
	
	nmcli> save
	Connection 'ethernet-4' (de89cdeb-a3e1-4d53-8fa0-c22546c775f4) successfully
	 saved.
	 
	nmcli> quit
	
Example session in the nmcli interactive connection editor. The scenario creates an Ethernet connection
profile with static addressing (IPs and DNS).

See Also

nmcli(1), NetworkManager(8), NetworkManager.conf(5), nm-settings(5), nm-online(1), nm-applet(1),
nm-connection-editor(1)

Referenced By

NetworkManager(8), NetworkManager.conf(5), nmcli(1), nm-settings(5), nm-settings-ifcfg-rh(5),
nm-settings-keyfile(5), nm-system-settings.conf(5).

Explore man page connections for nmcli-examples(7).

NetworkManager 1.4.0 Examples


---
https://www.unixmen.com/basics-networkmanager-command-line-tool-nmcli/

Basics Of NetworkManager Command Line Tool, Nmcli

Introduction
In this tutorial, we will discuss NetworkManager command line tool, aka nmcli, in CentOS / RHEL 7. Users
who are using ifconfig should avoid this command in Centos 7.

Lets configure some networking settings with nmcli utility. To get all address information of all interfaces
connected with System
	[root@localhost ~]# ip addr show
	
Sample Output:
	1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
	 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
	 inet 127.0.0.1/8 scope host lo
	 valid_lft forever preferred_lft forever
	 inet6 ::1/128 scope host
	 valid_lft forever preferred_lft forever
	2: eno16777736: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
	 link/ether 00:0c:29:67:2f:4c brd ff:ff:ff:ff:ff:ff
	 inet 192.168.1.51/24 brd 192.168.1.255 scope global eno16777736
	 valid_lft forever preferred_lft forever
	 inet6 fe80::20c:29ff:fe67:2f4c/64 scope link
	 valid_lft forever preferred_lft forever
	 
To retrieve packets statistics related with connected interfaces
	[root@localhost ~]# ip -s link show eno16777736
Sample Output:
	unxmen_(011)

Get routing configuration
[root@localhost ~]# ip route
Sample Output:
	default via 192.168.1.1 dev eno16777736 proto static metric 100
	192.168.1.0/24 dev eno16777736 proto kernel scope link src 192.168.1.51 metric 100
	
Analyze path for some host/website
	[root@localhost ~]# tracepath unixmen.com
Output will be just like traceroute but in more managed form.
	unxmen_0121

nmcli utility
Nmcli is a very rich and flexible command line utility. some of the terms used in nmcli are:
Device – A network interface being used.
Connection – A set of configuration settings, for a single device you can have multiple connections,
you can switch between connections.
Find out how many connections are available for how many devices
	[root@localhost ~]# nmcli connection show
	unxmen_(013)

Get details of a specific connection
	[root@localhost ~]# nmcli connection show eno1
Sample output:
	unxmen_(014)

Get the Network device status
	[root@localhost ~]# nmcli device status
	 DEVICE		      TYPE		STATE	       CONNECTION
	eno16777736	       ethernet      connected		    eno1
	lo		       loopback      unmanaged		     --
	
Create a new connection with “dhcp”
	[root@localhost ~]# nmcli connection add con-name "dhcp" type ethernet ifname eno16777736
	
Where,
Connection add – To add new connection
con-name – connection name
type – type of device
ifname – interface name

This command will add connection with dhcp protocol.
Sample output:
	Connection 'dhcp' (163a6822-cd50-4d23-bb42-8b774aeab9cb) successfully added.

Instead of assigning an IP via dhcp, you can add ip address as “static”
	[root@localhost ~]# nmcli connection add con-name "static" ifname eno16777736 autoconnect no type\
		ethernet ip4 192.168.1.240 gw4 192.168.1.1
Sample Output:
	Connection 'static' (8e69d847-03d7-47c7-8623-bb112f5cc842) successfully added.
	
Update connection:
	[root@localhost ~]# nmcli connection up eno1
	
Again Check, whether ip address is changed or not.
	[root@localhost ~]# ip addr show
	unxmen_(015)

Add DNS settings to Static connections.
	[root@localhost ~]# nmcli connection modify "static" ipv4.dns 202.131.124.4
	
Add additional DNS value.
	[root@localhost ~]# nmcli connection modify "static" +ipv4.dns 8.8.8.8
	
Note: For additional entries + symbol will be used and +ipv4.dns will be used instead on ip4.dns

Put an additional ip address:
	[root@localhost ~]# nmcli connection modify "static" +ipv4.addresses 192.168.200.1/24
	
Refresh settings using command:
	[root@localhost ~]# nmcli connection up eno1
	unxmen_(016)

You will see, setting are effective now. That’s it.


---
http://linoxide.com/linux-command/nmcli-tool-red-hat-centos-7/

How to Manage Network using nmcli Tool in RedHat / CentOS 7.x

A new feature of Red Hat Enterprise Linux 7 and CentOS 7 is that the default networking service is provided
by NetworkManager, a dynamic network control and configuration daemon that attempts to keep network
devices and connections up and active when they are available while still supporting the traditional ifcfg
type configuration files. NetworkManager can be used with the following types of connections: Ethernet,
VLANs, Bridges, Bonds, Teams, Wi-Fi, mobile broadband (such as cellular 3G), and IP-over-InfiniBand. For
these connection types, NetworkManager can configure network aliases, IP addresses, static routes,
DNS information, and VPN connections, as well as many connection-specific parameters.

The NetworkManager can be controlled with the command-line tool, nmcli.

General nmcli usage
The general syntax for nmcli is:
	# nmcli [ OPTIONS ] OBJECT { COMMAND | help }

One cool thing is that you can use the TAB key to complete actions when you write the command so if at
any time you forget the syntax you can just press TAB to see a list of available options.
	nmcli tab

Some examples of general nmcli usage:
	# nmcli general status

Will display the overall status of NetworkManager.

	# nmcli connection show

Will display all connections.

	# nmcli connection show -a

Will display only the active connections.

	# nmcli device status

Will display a list of devices recognized by NetworkManager and their current state.

nmcli general
1) Starting / stopping network interfaces
You can use the nmcli tool to start or stop network interfaces from the command line, this is the
equivalent of up/down in ifconfig.
To stop an interface use the following syntax:
	# nmcli device disconnect eno16777736

To start it you can use this syntax:
	# nmcli device connect eno16777736

2) Adding an ethernet connection with static IP
To add a new ethernet connection with a static IP address you can use the following command:
	# nmcli connection add type ethernet con-name NAME_OF_CONNECTION ifname interface-name ip4 IP_ADDRESS\
		gw4 GW_ADDRESS

replacing the NAME_OF_CONNECTION with the name you wish to apply to the new connection, the IP_ADDRESS
with the IP address you wish to use and the GW_ADDRESS with the gateway address you use (if you don't
use a gateway you can omit this last part).

	# nmcli connection add type ethernet con-name NEW ifname eno16777736 ip4 192.168.1.141 gw4 192.168.1.1

To set the DNS servers for this connection you can use the following command:
	# nmcli connection modify NEW ipv4.dns "8.8.8.8 8.8.4.4"

To bring up the new Ethernet connection, issue a command as follows:
	# nmcli connection up NEW ifname eno16777736

To view detailed information about the newly configured connection, issue a command as follows:
	# nmcli -p connection show NEW

nmcli add static

3) Adding a connection that will use DHCP
If you wish to add a new connection that will use DHCP to configure the interface IP address, gateway
address and dns servers, all you have to do is omit the ip/gw address part of the command and Network
Manager will use DHCP to get the configuration details.

For example, to create a DHCP configured connection profile named NEW_DHCP, on device
eno16777736 you can use the following command:
	# nmcli connection add type ethernet con-name NEW_DHCP ifname eno16777736


---
http://unix.stackexchange.com/questions/80126/how-to-connect-to-internet-using-nmcli

How to connect to internet using `nmcli`?

According to this link
	nmcli dev wifi con a52c60f5-c1af-4d39-8dc8-728bd770bffc password 12345678 name dlink_home

should establish the connection, but it outputs the following error when I try to connect:
	Error: 'dev wifi' command 'con' is not valid.
	
So, how I can connect to wireless internet/network using network-manager or nmcli in command-line mode?

PS. The OS I am running is RHEL6 Server

***
Try dev wlan0 instead. – Flup Jun 20 '13 at 11:57

***
Error: 'dev' command 'wlan0' is not valid. – easl Jun 20 '13 at 11:59

***
I tried nmcli con up id dlink_home but it only works after I start GUI with startx, without starting
GUI nmcli nm's state is disabled. – easl Jun 20 '13 at 12:00

***
See my answer over here: unix.stackexchange.com/a/79434/7453 – slm♦ Jun 20 '13 at 12:10

***
it does not connect by outputting the error i had mentioned above – easl Jun 20 '13 at 12:13

***
The capability to define a new connection on the command line with nmcli dev wifi con … was added in
NetworkManager 0.9.6. (If you're using Ubuntu, that means release 12.10 or higher.) In earlier versions,
new connections can only be defined through the GUI or by editing configuration files manually (in
/etc/NetworkManager/system-connections or under ~/.gconf). You can activate an existing connection with
nmcli con up.

If you have no GUI to define connections, you can try wicd instead of NetworkManager.

***
wicd did not work either. It caused more troubles than it solved. – Lord Loh. Nov 15 '13 at 21:58

***
Using an 18-month old openSUSE with nmcli -v 0.8.2, I did the following:
	nmcli dev wifi

That gave me a list, in which I could spot my own wireless hub. The key columns are SSID and BSSID.

I then used Start Menu-->Control Center-->Network Connections-->Wireless. I had one connection there
called "Wireless connection 1". Selecting it, Edit...-->Wireless: fill in SSID and BSSID verbatim from
the nmcli command above. Then on Wireless Security page, I entered my hub's password. The "Security"
selection was based again on the nmcli output above. OK, Save...

Then (I did this as root; may not be necessary):
	nmcli con up id 'Wireless connection 1'
	
Note the "id" is NOT the SSID or BSSID; instead this is the "nickname" on your computer for this network.

As stated above, /etc/NetworkManager/system-connections holds files of which "Wireless connection 1'
is one (in my case).

I hope this helps.


---
http://www.cyberciti.biz/faq/howto-linux-renew-dhcp-client-ip-address/nmcli/

nmcli is a command-line tool for controlling NetworkManager and getting its status. It is not
meant as a replacement of nm-applet or other similar clients. Rather it’s a complementary utility to these
programs. The main nmcli’s usage is on servers, headless machines or just for power users who prefer the
command line.

Get list
	nmcli con
	
Stop interface
	nmcli con down id 'Connection'
	
Start interface
	nmcli con up id 'Connection'


---
http://www.thepromisedlan.org/archives/nmcli-is-wicked

nmcli is wicked
You don't need alttext here, this image is lame filler!
Remember how happy we were when finally got clicky with nm-applet?
I don’t know about you, but I’ve been wishing, hoping and waiting (not helping or coding of course!) a long
time for a useable command line client for network-manager. cnetworkmanager came and went without anyone
actually trying it, and then nmcli showed up.

nmcli syntax is a little less than intuitive, and if you’re like me it took you a while to notice that the
problem you were having with it was not in fact that you couldn’t figure out the syntax, it was that it would
not do the thing you were trying to get it to do!
Well eventually anyway. As it turned out it; would do 2 out of 3. That is you could:
bring up or down networks that network-manager already knew about:
	nmcli con down id NetworkImDoneWith
	nmcli con up id MyAwesomeNetwork
	
In the process of figureing that one out, we all learned to list nm’s known networks:
	nmcli con list
	
Which does’nt count as one of the three, because while it’s kind of nostalgic to see an SSID you connected to
in 2009 on that work trip to Illinois, until you’re wrestling with nmcli you’d never want to do this, it’s the
equivalent opening nm-connection-editor and opining over each tab.

But oh boy were you excited that day at the coffee shop when you were practicing running your whole system from
a framebuffer on tty1, and discovered that nmcli could list the _new_ networks available:
	nmcli dev wifi

If it can list them surely we can connect to them!

Alas, it was not to be. After plugging through all the syntactic options for nmcli and it’s dev,nm,con 
subcommands you gave up and hit ctrl+alt+f7 logged into to X and clickyclickyclickied on “aztec cafe” so easy
and so defeating.

You knew someday you would not suffer so.

That time is now!

The nmcli that comes with network-manager 0.9.6 (0.9.6.4-2 is already in debian experimental) includes the all
new “wifi connect” command:
	$ nmcli dev help
	Usage: nmcli dev { COMMAND | help }

	COMMAND := { status | list | disconnect | wifi }

	status
	list [iface ]
	disconnect iface [–nowait] [–timeout ]
	wifi [list [iface ] [bssid ]]
	wifi connect <(B)SSID> [password ] [wep-key-type key|phrase] [iface ] [bssid ][name ][–private] [–nowait]
		[–timeout ]

That mess translates into, You can now finally attach to a new network:
“Hmm are there are any networks here?”
	nmcli dev wifi
	SSID BSSID MODE FREQ RATE SIGNAL SECURITY ACTIVE
	'JoesHouse' 00:30:DE:AD:BE:EF Infrastructure 2412 MHz 54 MB/s 67 WPA WPA2 no

“Sweet, oh wait it’s wpa, ‘Hey Joe what’s your wifi password?, Cool thanks'”
nmcli dev wifi connect JoesHouse password correcthorsebatterystaple

Effing finally.

( /me is accepting wagers on whether someone mentions pkexec in the comments)


---
http://manpages.ubuntu.com/manpages/trusty/man1/nmcli.1.html

Name
Synopsis
Description
Environment Variables
Exit Status
Examples
Bugs
See Also
trusty (1) nmcli.1.gz
Provided by: network-manager_0.9.8.8-0ubuntu7_i386 bug

NAME
       nmcli - command‐line tool for controlling NetworkManager

SYNOPSIS
       nmcli  [ OPTIONS ] OBJECT { COMMAND | help }

       OBJECT := { nm | con | dev }

       OPTIONS := {
       -t[erse]
       -p[retty]
       -m[mode] tabular | multiline
       -f[ields] <field1,field2,...> | all | common
       -e[scape] yes | no
       -v[ersion]
       -h[elp]
       }

DESCRIPTION
       nmcli is a command‐line tool for controlling NetworkManager and
       reporting on its status.  It is not meant as a full replacement for nm���
       applet or other similar clients but as a complementary utility to those
       programs.  The main usage for nmcli is on servers, headless machines or
       for power users who prefer the command line.

       Typical applications include:

       —   Initscripts: ifup/ifdown can utilize NetworkManager via nmcli
           instead of having to manage connections itself and possibly
           interfere with NetworkManager.

       —   Servers, headless machines: No GUI is available; then nmcli can be
           used to activate/deactivate connections.  However, if a connection
           requires a secret in order to activate and if that secret is not
           stored at the system level, nmcli will not be able to activate it;
           it is currently unable to supply the secrets to NetworkManager.

       —   User sessions: nmcli can be used to activate/deactivate connections
           from the command line, but a client with a secret agent (like nm���
           applet) is needed for supplying secrets not stored at the system
           level. Keyring dialogs and password prompts may appear if this
           happens.

   OPTIONS
       -t, --terse
              Output is terse.  This mode is designed and suitable for
              computer (script) processing.

       -p, --pretty
              Output is pretty. This causes nmcli to produce easily readable
              outputs for humans, i.e. values are aligned, headers are
              printed, etc.

       -m, --mode tabular | multiline
              Switch between tabular and multiline output.  If omitted,
              default is tabular for most commands. For the commands producing
              more structured information, that cannot be displayed on a
              single line, default is multiline. Currenly, they are:
                'nmcli con list id|uuid <name>'
                'nmcli dev list'
              tabular   – Output is a table where each line describes a single
              entry.  Columns define particular properties of the entry.
              multiline – Each entry comprises multiple lines, each property
              on its own line. The values are prefixed with the property name.

       -f, --fields <field1,field2,...> | all | common
              This option is used to specify what fields (column names) should
              be printed.  Valid field names differ for specific commands.
              List available fields by providing an invalid value to the
              --fields option.
              all is used to print all valid field values of the command.
              common is used to print common field values of the command.  If
              omitted, default is common.  The option is mandatory when
              --terse is used.  In this case, generic values all and common
              cannot be used.  (This is to maintain compatibility when new
              fields are added in the future).

       -e, --escape yes | no
              Whether to escape ':' and '\' characters in terse tabular mode.
              The escape character is '\'.  If omitted, default is yes.

       -v, --version
              Show nmcli version.

       -h, --help
              Print help information.

   OBJECT
       nm     NetworkManager
              Use this object to inquire and change state of NetworkManager.

          COMMAND := { status | permissions | enable | sleep | wifi | wwan |
              wimax }

              status
                     Show overall status of NetworkManager. This is the
                     default action, when no command is provided to nm object.
                     Reference to D��‐Bus:
                     No simple reference.

              permissions
                     Show the permissions a caller has for various
                     authenticated operations that NetworkManager provides,
                     like enable/disable networking, changing Wi‐Fi, WWAN, and
                     WiMAX state, modifying connections, etc.
                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager
                     method:    GetPermissions
                     arguments: none

              enable [true|false]
                     Get networking‐enabled status or enable/disable
                     networking by NetworkManager.  All interfaces managed by
                     NetworkManager are deactivated when networking has been
                     disabled.
                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager
                     method:    Enable
                     arguments: TRUE or FALSE

              sleep [true|false]
                     Get sleep status or put to sleep/awake NetworkManager.
                     All interfaces managed by NetworkManager are deactivated
                     when it falls asleep. This command is not meant for user
                     to enable/disable networking, use enable for that. D‐Bus
                     Sleep method is designed to put NetworkManager to sleep
                     or awake for suspending/resuming the computer.
                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager
                     method:    Sleep
                     arguments: TRUE or FALSE

              wifi [on|off]
                     Inquire or set status of Wi‐Fi in NetworkManager. If no
                     arguments are supplied, Wi‐Fi status is printed; on
                     enables Wi‐Fi; off disables Wi‐Fi.
                     Reference to D��‐Bus:
                     No simple reference.

              wwan [on|off]
                     Inquire or set status of WWAN in NetworkManager. If no
                     arguments are supplied, WWAN status is printed; on
                     enables WWAN; off disables WWAN.
                     Reference to D��‐Bus:
                     No simple reference.

              wimax [on|off]
                     Inquire or set status of WiMAX in NetworkManager. If no
                     arguments are supplied, WiMAX status is printed; on
                     enables WiMAX; off disables WiMAX.
                     Note: WiMAX support is a compile‐time decision, so it may
                     be unavailable on some installations.
                     Reference to D��‐Bus:
                     No simple reference.

       con    Connections
              Get information about NetworkManager's connections.

          COMMAND := { list | status | up | down | delete }

              list [id <id> | uuid <id>]
                     List configured connections.  Without a parameter, all
                     connections are listed.  In order to get connection
                     details, id with connection's name or uuid with
                     connection's UUID shall be specified.  When no command is
                     given to the con object, the default action is 'nmcli con
                     list'.
                     Reference to D��‐Bus:
                     No simple reference.

              status
                     Print status of active connections.
                     Reference to D��‐Bus:
                     No simple reference.

              up id <id> | uuid <id> [iface <iface>] [ap <BSSID>] [nsp <name>]
              [--nowait] [--timeout <timeout>]
                     Activate a connection.  The connection is identified by
                     its name using id or UUID using uuid. When requiring a
                     particular device to activate the connection on, the
                     iface option with interface name should be given. In case
                     of a VPN connection, the iface option specify the device
                     of the base connection. The ap option specify what
                     particular AP should be used in case of a Wi‐Fi
                     connection.

                     Available options are:

                     iface        – interface that will be used for activation

                     ap           – BSSID of the AP which the command should
                                  connect to (for Wi‐Fi connections)

                     nsp          – NSP (Network Service Provider) which the
                                  command should connect to (for WiMAX
                                  connections)

                     --nowait     – exit immediately without waiting for
                                  command completion

                     --timeout    – how long to wait for command completion
                                  (default is 90 s)

                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager
                     method:    ActivateConnection
                     arguments: according to arguments

              down id <id> | uuid <id>
                     Deactivate a connection.  The connection is identified by
                     its name using id or UUID using uuid.
                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager
                     method:    DeactivateConnection
                     arguments: according to arguments

              delete id <id> | uuid <id>
                     Delete a configured connection. The connection to delete
                     is specified with id (connection name) or uuid
                     (connection UUID).
                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager.Settings.Connection
                     method:    Delete
                     arguments: none

       dev    Devices
              Get information about devices.

          COMMAND := { status | list | disconnect | wifi }

              status
                     Print status of devices.  This is the default action,
                     when no command is specified to dev object.
                     Reference to D��‐Bus:
                     No simple reference.

              list [iface <iface>]
                     Get detailed information about devices.  Without an
                     argument, all devices are examined. To get information
                     for a specific device, the iface argument with the
                     interface name should be provided.
                     Reference to D��‐Bus:
                     No simple reference.

              disconnect iface <iface> [--nowait] [--timeout <timeout>]
                     Disconnect a device and prevent the device from
                     automatically activating further connections without
                     user/manual intervention.

                     Available options are:

                     --nowait     – exit immediately without waiting for
                                  command completion

                     --timeout    – how long to wait for command completion
                                  (default is 10 s)

                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager.Device
                     method:    Disconnect
                     arguments: none

              wifi [list [iface <iface>] [bssid <BSSID>]]
                     List available Wi‐Fi access points. The iface and bssid
                     options can be used to list APs for a particular
                     interface or with a specific BSSID, respectively.
                     Reference to D��‐Bus:
                     No simple reference.

              wifi connect <(B)SSID> [password <password>] [wep-key-type
              key|phrase] [iface <iface>] [bssid <BSSID>] [name <name>]
              [--private] [--nowait] [--timeout <timeout>]
                     Connect to a Wi‐Fi network specified by SSID or BSSID.
                     The command creates a new connection and then activates
                     it on a device. This is a command‐line counterpart of
                     clicking an SSID in a GUI client. The command always
                     creates a new connection and thus it is mainly useful for
                     connecting to new Wi‐Fi networks. If a connection for the
                     network already exists, it's better to connect through it
                     using nmcli con up id <name>. Note that only open, WEP
                     and WPA‐PSK networks are supported at the moment. It is
                     also supposed that IP configuration is obtained via DHCP.

                     Available options are:

                     password     – password for secured networks (WEP or WPA)

                     wep-key-type – type of WEP secret, either key for
                                  ASCII/HEX key or phrase for passphrase

                     iface        – interface that will be used for activation

                     bssid        – if specified, the created connection will
                                  be restricted just for the BSSID

                     name         – if specified, the connection will use the
                                  name (else NM creates a name itself)

                     --private    – the connection will only be visible to the
                                  user who created it (else the connection is
                                  system‐wide)

                     --nowait     – exit immediately without waiting for
                                  command completion

                     --timeout    – how long to wait for command completion
                                  (default is 90 s)

                     Reference to D��‐Bus:
                     interface: org.freedesktop.NetworkManager
                     method:    AddAndActivateConnection
                     arguments: according to arguments

ENVIRONMENT VARIABLES
       nmcli's behavior is affected by the following environment variables.

       LC_ALL       If set to a non‐empty string value, it overrides the
                    values of all the other internationalization variables.

       LC_MESSAGES  Determines the locale to be used for internationalized
                    messages.

       LANG         Provides a default value for the internationalization
                    variables that are unset or null.

       Internationalization notes:
       Be aware that nmcli is localized and that's why the output depends on
       your environment. This is important to realize especially when you
       parse the output.
       Call nmcli as LC_ALL=C nmcli to be sure the locale is set to "C" while
       executing in a script.

       LC_ALL, LC_MESSAGES, LANG variables specify the LC_MESSAGES locale
       category (in that order), which determines the language that nmcli uses
       for messages.  The "C" locale is used if none of these variables are
       set, and this locale uses English messages.

EXIT STATUS
       nmcli exits with status 0 if it succeeds, a value greater than 0 is
       returned if an error occurs.

       0   Success – indicates the operation succeeded

       1   Unknown or unspecified error

       2   Invalid user input, wrong nmcli invocation

       3   Timeout expired (see commands with --timeout option)

       4   Connection activation failed

       5   Connection deactivation failed

       6   Disconnecting device failed

       7   Connection deletion failed

       8   NetworkManager is not running

       9   nmcli and NetworkManager versions mismatch

EXAMPLES
       nmcli -t -f RUNNING nm

              tells you whether NetworkManager is running or not.

       nmcli -t -f STATE nm

              shows the overall status of NetworkManager.

       nmcli nm wifi off

              switches Wi‐Fi off.

       nmcli -p con list

              lists all connections NetworkManager has.

       nmcli -f name,autoconnect con list

              lists all connections' names and their autoconnect settings.

       nmcli con list id "My wired connection"

              lists all details of the connection with "My wired connection"
              name.

       nmcli -p con up id "My wired connection" iface eth0

              activates the connection with name "My wired connection" on
              interface eth0.  The -p option makes nmcli show progress of the
              activation.

       nmcli con up uuid 6b028a27-6dc9-4411-9886-e9ad1dd43761 ap
       00:3A:98:7C:42:D3

              connects the Wi‐Fi connection with UUID
              6b028a27-6dc9-4411-9886-e9ad1dd43761 to the AP with BSSID
              00:3A:98:7C:42:D3.

       nmcli dev status

              shows the status for all devices.

       nmcli dev disconnect iface em2

              disconnects a connection on interface em2 and marks the device
              as unavailable for auto‐connecting. That's why no connection
              will automatically be activated on the device until the device's
              "autoconnect" is set to TRUE or user manually activates a
              connection.

       nmcli -f GENERAL,WIFI-PROPERTIES dev list iface wlan0

              lists details for wlan0 interface; only GENERAL and
              WIFI-PROPERTIES sections will be shown.

       nmcli dev wifi

              lists available Wi‐Fi access points known to NetworkManager.

       nmcli dev wifi con "Cafe Hotspot 1" password caffeine name "My cafe"

              creates a new connection named "My cafe" and then connects it to
              "Cafe Hotspot 1" SSID using "caffeine" password. This is mainly
              useful when connecting to "Cafe Hotspot 1" for the first time.
              Next time, it is better to use 'nmcli con up id "My cafe"' so
              that the existing connection profile can be used and no
              additional is created.

BUGS
       There are probably some bugs.  If you find a bug, please report it to
       https://bugzilla.gnome.org/ — product NetworkManager.

SEE ALSO
       nm-tool(1), nm-online(1), NetworkManager(8), nm-settings(5),
       nm...pplet(1), nm-connection-editor(1).

                                17 January 2013                       NMCLI(1)
				
				
---
https://wiki.archlinux.org/index.php/NetworkManager

NetworkManager

Category:Network configuration
NetworkManager is a program for providing detection and configuration for systems to automatically connect
to network. NetworkManager's functionality can be useful for both wireless and wired networks. For wireless
networks, NetworkManager prefers known wireless networks and has the ability to switch to the most reliable
network. NetworkManager-aware applications can switch from online and offline mode. NetworkManager also
prefers wired connections over wireless ones, has support for modem connections and certain types of
VPN. NetworkManager was originally developed by Red Hat and now is hosted by the GNOME project.
Warning: By default, Wi-Fi passwords are stored in clear text. See section #Encrypted Wi-Fi passwords

Installation
NetworkManager can be installed with the package networkmanager. The package does not include the
tray applet nm-applet which is part of the network-manager-applet. It has functionality for basic DHCP
support. For full featured DHCP and if you require IPv6 support, dhclient integrates it.
Note: You must ensure that no other service that wants to configure the network is running; in fact,
multiple networking services will conflict. You can find a list of the currently running services with
systemctl --type=service and then stop them. See #Configuration to enable the NetworkManager service.

VPN support
NetworkManager VPN support is based on a plug-in system. If you need VPN support via NetworkManager,
you have to install one of the following packages:
networkmanager-openconnect
networkmanager-openvpn
networkmanager-pptp
networkmanager-vpnc
networkmanager-l2tpAUR
Warning: VPN support is unstable, check the daemon processes options set via the GUI correctly and
double-check with each package release.[1] [2] FS#47535
PPPoE / DSL support
Install rp-pppoe for PPPoE / DSL connection support.

Front-ends
To configure and have easy access to NetworkManager, most users will want to install an applet. This
GUI front-end usually resides in the system tray (or notification area) and allows network selection
and configuration of NetworkManager. Various applets exist for different types of desktops.

GNOME
GNOME's network-manager-applet works in all environments.
To store authentication details for connections (Wireless/DSL) install and configure GNOME Keyring.
Be aware that after enabling the tick-box option Make available to other users for a connection,
NetworkManager stores the password in plain-text, though the respective file is accessible only to root
(or other users via nm-applet). See #Encrypted Wi-Fi passwords.

KDE Plasma
Install the plasma-nm applet.

Xfce
While network-manager-applet works in Xfce, in order to see notifications, including error messages,
nm-applet needs an implementation of the Freedesktop desktop notifications specification (see the Galapago
Project) to display them. To enable notifications install xfce4-notifyd, a package that provides an
implementation for the specification.
Without such a notification daemon, nm-applet outputs the following errors to stdout/stderr:
(nm-applet:24209): libnotify-WARNING **: Failed to connect to proxy
** (nm-applet:24209): WARNING **: get_all_cb: couldn't retrieve
system settings properties: (25) Launch helper exited with unknown
return code 1.
** (nm-applet:24209): WARNING **: fetch_connections_done: error
fetching connections: (25) Launch helper exited with unknown return
code 1.
** (nm-applet:24209): WARNING **: Failed to register as an agent:
(25) Launch helper exited with unknown return code 1
nm-applet will still work fine, though, but without notifications.
If nm-applet is not prompting for a password when connecting to new wifi networks, and is just disconnecting
immediately, you may need to install gnome-keyring.
Should the applet not appear, install the xfce4-indicator-pluginAUR package. [3]

Openbox
To work properly in Openbox, the GNOME applet requires the xfce4-notifyd notification daemon for the
same reason as in XFCE and the gnome-icon-theme package to be able to display the applet in the systray.
If you want to store authentication details (Wireless/DSL) install and configure gnome-keyring.
nm-applet installs the autostart file at /etc/xdg/autostart/nm-applet.desktop. If you have issues with it
(e.g. nm-applet is started twice or is not started at all), see Openbox#autostart or [4] for solution.

Other desktops and window managers
In all other scenarios it is recommended to use the GNOME applet. You will also need to be sure that
the gnome-icon-theme package is installed to be able to display the applet.
To store connection secrets install and configure GNOME Keyring.
In order to run nm-applet without a systray, you can use trayer or stalonetray. For example, you can
add a script like this one in your path:
	nmgui
	#!/bin/sh
	nm-applet    2>&1 > /dev/null &
	stalonetray  2>&1 > /dev/null
	killall nm-applet

When you close the stalonetray window, it closes nm-applet too, so no extra memory is used once you are
done with network settings.

Command line
The following applications can be useful for configuring and managing networks without X.
	nmcli
A command line frontend, nmcli, is included with networkmanager.
For usage information, see nmcli(1). Examples:
To connect to a wifi network:
	nmcli dev wifi connect <name> password <password>

To connect to a wifi on the wlan1 wifi interface:
	nmcli dev wifi connect <name> password <password> iface wlan1 [profile name]

To disconnect an interface:
	nmcli dev disconnect iface eth0

To reconnect an interface marked as disconnected:
	nmcli con up uuid <uuid>

To get a list of UUIDs:
	nmcli con show

To see a list of network devices and their state:
	nmcli dev

To turn off wifi:
	nmcli r wifi off

nmtui
A curses based graphical frontend, nmtui, is included with networkmanager.
For usage information, see nmtui(1).

nmcli-dmenu
Alternatively there is networkmanager-dmenu-gitAUR which is a small script to manage NetworkManager
connections with dmenu instead of nm-applet. It provides all essential features such as connect to
existing NetworkManager wifi or wired connections, connect to new wifi connections, requests passphrase
if required, connect to existing VPN connections, enable/disable networking, launch nm-connection-editor GUI.

Configuration
NetworkManager will require some additional steps to be able run properly. Make sure you have configured
/etc/hosts as described in Network configuration#Set the hostname section.

Enable NetworkManager
NetworkManager is controlled via NetworkManager.service. Once the NetworkManager daemon is started, it
will automatically connect to any available "system connections" that have already been configured. Any
"user connections" or unconfigured connections will need nmcli or an applet to configure and connect.
NetworkManager has a global configuration file at /etc/NetworkManager/NetworkManager.conf. Usually no
configuration needs to be done to the global defaults.
Enable NetworkManager Wait Online
If you have services which fail if they are started before the network is up, you may use
NetworkManager-wait-online.service in addition to NetworkManager.service. This is, however, rarely
necessary because most networked daemons start up okay, even if the network has not been configured yet.
In some cases, the service will still fail to start successfully on boot due to the timeout setting in
/usr/lib/systemd/system/NetworkManager-wait-online.service being too short. Change the default timeout
from 30 to a higher value.

Set up PolicyKit permissions
See General troubleshooting#Session permissions for setting up a working session.
With a working session, you have several options for granting the necessary privileges to NetworkManager:
Option 1. Run a Polkit authentication agent when you log in, such as
/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 (part of polkit-gnome). You will be prompted
for your password whenever you add or remove a network connection.
Option 2. Add yourself to the wheel group. You will not have to enter your password, but your user account
may be granted other permissions as well, such as the ability to use sudo without entering the root password.
Option 3. Add yourself to the network group and create the following file:
/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules
	polkit.addRule(function(action, subject) {
	  if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("network")) {
	    return polkit.Result.YES;
	  }
	});

All users in the network group will be able to add and remove networks without a password. This will
not work under systemd if you do not have an active session with systemd-logind.

Network services with NetworkManager dispatcher
There are quite a few network services that you will not want running until NetworkManager brings up an
interface. Good examples are NTPd and network filesystem mounts of various types (e.g. netfs). NetworkManager
has the ability to start these services when you connect to a network and stop them when you disconnect. To
activate the feature you need to start the NetworkManager-dispatcher.service.
Once the feature is active, scripts can be added to the /etc/NetworkManager/dispatcher.d directory. These
scripts must be owned by root, otherwise the dispatcher will not execute them. For added security,
set group ownership to root as well:
	# chown root:root scriptname

Also, the script must have write permission for owner only, otherwise the dispatcher will not execute them:
	# chmod 755 scriptname

The scripts will be run in alphabetical order at connection time, and in reverse alphabetical order at
disconnect time. They receive two arguments: the name of the interface (e.g. eth0) and the status (up or
down for interfaces and vpn-up or vpn-down for vpn connections). To ensure what order they come up in,
it is common to use numerical characters prior to the name of the script (e.g. 10_portmap or 30_netfs
(which ensures that the portmapper is up before NFS mounts are attempted).
Warning: If you connect to foreign or public networks, be aware of what services you are starting and
what servers you expect to be available for them to connect to. You could make a security hole by starting
the wrong services while connected to a public network

Avoiding the dispatcher timeout
If the above is working, then this section is not relevant. However, there is a general problem
related to running dispatcher scripts which take longer to be executed. Initially an internal timeout
of three seconds only was used. If the called script did not complete in time, it was killed. Later
the timeout was extended to about 20 seconds (see the Bugtracker for more information). If the
timeout still creates the problem, a work around may be to modify the dispatcher service file
/usr/lib/systemd/system/NetworkManager-dispatcher.service to remain active after exit:
	/etc/systemd/system/NetworkManager-dispatcher.service
	.include /usr/lib/systemd/system/NetworkManager-dispatcher.service
	[Service]

	RemainAfterExit=yes
	
Now start and enable the modified NetworkManager-dispatcher service.
Warning: Adding the RemainAfterExit line to it will prevent the dispatcher from closing. Unfortunately,
the dispatcher has to close before it can run your scripts again. With it the dispatcher will not time
out but it also will not close, which means that the scripts will only run once per boot. Therefore,
do not add the line unless the timeout is definitely causing a problem.

Start OpenNTPD

Install the networkmanager-dispatcher-openntpd package.

Mount remote folder with sshfs
As the script is run in a very restrictive environment, you have to export SSH_AUTH_SOCK in order to
connect to your SSH agent. There are different ways to accomplish this, see this message for more
information. The example below works with GNOME Keyring, and will ask you for the password if not
unlocked already. In case NetworkManager connects automatically on login, it is likely gnome-keyring
has not yet started and the export will fail (hence the sleep). The UUID to match can be found with the
command nmcli con status or nmcli con list.
	#!/bin/sh
	USER='username'
	REMOTE='user@host:/remote/path'
	LOCAL='/local/path'

	interface=$1 status=$2
	if [ "$CONNECTION_UUID" = "uuid" ]; then
	  case $status in
	    up)
	      export SSH_AUTH_SOCK=$(find /tmp -maxdepth 1 -type s -user "$USER" -name 'ssh')
	      su "$USER" -c "sshfs $REMOTE $LOCAL"
	      ;;
	    down)
	      fusermount -u "$LOCAL"
	      ;;
	  esac
	fi

Use dispatcher to connect to a VPN after a network connection is established
In this example we want to connect automatically to a previously defined VPN connection after connecting
to a specific Wi-Fi network. First thing to do is to create the dispatcher script that defines what to
do after we are connected to the network.
1. Create the dispatcher script:
/etc/NetworkManager/dispatcher.d/vpn-up
	#!/bin/sh
	VPN_NAME="name of VPN connection defined in NetworkManager"
	ESSID="Wi-Fi network ESSID (not connection name)"

	interface=$1 status=$2
	case $status in
	  up|vpn-down)
	    if iwgetid | grep -qs ":\"$ESSID\""; then
	      nmcli con up id "$VPN_NAME"
	    fi
	    ;;
	  down)
	    if iwgetid | grep -qs ":\"$ESSID\""; then
	      if nmcli con show --active | grep "$VPN_NAME"; then
		nmcli con down id "$VPN_NAME"
	      fi
	    fi
	    ;;
	esac

If you would like to attempt to automatically connect to VPN for all Wi-Fi networks, you can use the
following definition of the ESSID: ESSID=$(iwgetid -r). Remember to set the script's permissions accordingly.
If you require and tick the nm-applet option to Make the VPN connection available to all users, trying
to connect may still fail and NetworkManager will complain about 'no valid VPN secrets', because of the
way VPN secrets are stored, which brings us to step 2:
2. Either edit the VPN connection configuration file to make NetworkManager store the
secrets by itself rather than inside a keyring that will be inaccessible for root: open up
/etc/NetworkManager/system-connections/name of your VPN connection and change the password-flags and
secret-flags from 1 to 0.

Alternatively put the password directly in the configuration file adding the section vpn-secrets:
	 [vpn]
	 ....
	 password-flags=0

	 [vpn-secrets]
	 password=your_password
 
Note: It may now be necessary to re-open the NetworkManager connection editor and save the VPN
passwords/secrets again.

Use dispatcher to handle mounting of CIFS shares
Some CIFS shares are only available on certain networks or locations (e.g. at home). You can use the
dispatcher to only mount CIFS shares that are present at your current location.
The following script will check if we connected to a specific network and mount shares accordingly:
/etc/NetworkManager/dispatcher.d/mount_cifs
	#!/bin/bash
	if [ "$2" = "up" ]
	  if [ "$CONNECTION_UUID" = "uuid" ]
	    mount /your/mount/point &
	    # add more shares as needed
	  fi
	fi

Note: You can get a list of uuids using nmcli.
The following script will unmount all CIFS before a disconnect from a specific network:
/etc/NetworkManager/dispatcher.d/pre-down.d/mount_cifs
	#!/bin/bash
	umount -a -l -t cifs

Note: Make sure this script is located in the pre-down.d subdirectory as shown above, otherwise it will
unmount all shares on any connection state change.
Note: Ever since NetworkManager 0.9.8, the 'pre-down' and 'down' actions are not executed on shutdown
or restart, so the above script will only work if you manually disconnect from the network. See this
bug report for more info.

As before, do not forget to set the script permissions accordingly.
See also NFS#NetworkManager dispatcher for another example script that parses /etc/fstab mounts during
dispatcher actions.

Proxy settings
NetworkManager does not directly handle proxy settings, but if you are using GNOME or KDE, you could
use proxydriver wich handles proxy settings using NetworkManager's informations. proxydriver is found
in the package proxydriverAUR.
In order for proxydriver to be able to change the proxy settings, you would need to execute this command,
as part of the GNOME startup process (System -> Preferences -> Startup Applications):
	xhost +si:localuser:your_username
See: Proxy settings.

Disable NetworkManager
It might not be obvious, but the service automatically starts through dbus. To completely disable it
you can mask the services NetworkManager and NetworkManager-dispatcher.

Testing
NetworkManager applets are designed to load upon login so no further configuration should be necessary
for most users. If you have already disabled your previous network settings and disconnected from your
network, you can now test if NetworkManager will work. The first step is to start NetworkManager.service.
Some applets will provide you with a .desktop file so that the NetworkManager applet can be loaded
through the application menu. If it does not, you are going to either have to discover the command to
use or logout and login again to start the applet. Once the applet is started, it will likely begin
polling network connections with for auto-configuration with a DHCP server.
To start the GNOME applet in non-xdg-compliant window managers like awesome:
	nm-applet --sm-disable &

For static IP addresses, you will have to configure NetworkManager to understand them. The process
usually involves right-clicking the applet and selecting something like 'Edit Connections'.

Troubleshooting
No prompt for password of secured Wi-Fi networks
When trying to connect to a secured Wi-Fi network, no prompt for a password is shown and no connection
is established. This happens when no keyring package is installed. An easy solution is to install
gnome-keyring. If you want the passwords to be stored in encrypted form, follow GNOME Keyring to set up
the gnome-keyring-daemon.

No traffic via PPTP tunnel
PPTP connection logins successfully; you see a ppp0 interface with the correct VPN IP address, but you
cannot even ping the remote IP address. It is due to lack of MPPE (Microsoft Point-to-Point Encryption)
support in stock Arch pppd. It is recommended to first try with the stock Arch ppp as it may work as
intended.

To solve the problem it should be sufficient to install the ppp-mppeAUR[broken link: archived in
aur-mirror] package.
See also WPA2 Enterprise#MS-CHAPv2.

Network management disabled
When NetworkManager shuts down but the pid (state) file is not removed, you will see a Network management
disabled message. If this happens, remove the file manually:
# rm /var/lib/NetworkManager/NetworkManager.state

Problems with internal DHCP client
If you have problems with getting an IP address using the internal DHCP client, consider dhclient as
DHCP client.
After installation, update the NetworkManager config file:
/etc/NetworkManager/NetworkManager.conf
	dhcp=dhclient
	
This workaround might solve problems in big wireless networks like eduroam.

Customizing resolv.conf
See the main page: resolv.conf. If you use dhclient, you may try the networkmanager-dispatch-resolvAUR[broken
link: archived in aur-mirror] package.

DHCP problems with dhclient
If you have problems with getting an IP address via DHCP, try to add the following to your
/etc/dhclient.conf:
	 interface "eth0" {
	   send dhcp-client-identifier 01:aa:bb:cc:dd:ee:ff;
	 }
	 
Where aa:bb:cc:dd:ee:ff is the MAC address of this NIC. The MAC address can be found using the ip link
show interface command from the iproute2 package.

Hostname problems
It depends on the NetworkManager plugins used, whether the hostname is forwarded to a router on connect. The
generic "keyfile" plugin does not forward the hostname in default configuration. To make it forward the
hostname, add the following to /etc/NetworkManager/NetworkManager.conf:
	[keyfile]
	hostname=your_hostname
	
The options under [keyfile] will be applied to network connections in the default
/etc/NetworkManager/system-connections path.
Another option is to configure the DHCP client, which NetworkManager starts automatically, to forward
it. NetworkManager utilizes dhclient in default and falls back to its internal DHCP funtionality, if
the former is not installed. To make dhclient forward the hostname requires to set a non-default option,
dhcpcd forwards the hostname by default.
First, check which DHCP client is used (dhclient in this example):
	# journalctl -b | egrep "dhc"
	...
	Nov 17 21:03:20 zenbook dhclient[2949]: Nov 17 21:03:20 zenbook dhclient[2949]: Bound to *:546
	Nov 17 21:03:20 zenbook dhclient[2949]: Listening on Socket/wlan0
	Nov 17 21:03:20 zenbook dhclient[2949]: Sending on   Socket/wlan0
	Nov 17 21:03:20 zenbook dhclient[2949]: XMT: Info-Request on wlan0, interval 1020ms.
	Nov 17 21:03:20 zenbook dhclient[2949]: RCV: Reply message on wlan0 from fe80::126f:3fff:fe0c:2dc.
	
Configure dhclient to push the hostname to the DHCP server
Copy the example configuration file:
	# cp /usr/share/dhclient/dhclient.conf.example /etc/dhclient.conf
	
Take a look at the file - there will only really be one line we want to keep and dhclient will use
it's defaults (as it has been using if you did not have this file) for the other options. This is the
important line:
/etc/dhclient.conf
	send host-name = pick-first-value(gethostname(), "ISC-dhclient");
	
Force an IP address renewal by your favorite means, and you should now see your hostname on your DHCP server.
IPv6 push host name:
	# cp /usr/share/dhclient/dhclient.conf.example /etc/dhclient6.conf

/etc/dhclient6.conf
	send fqdn.fqdn = pick-first-value(gethostname(), "ISC-dhclient");

Configure NetworkManager to use a specific DHCP client
If you want to explicitly set the DHCP client used by NetworkManager, it can be set in the global
configuration:
/etc/NetworkManager/NetworkManager.conf
	dhcp=internal
	
The alternative dhcp=dhclient is used per default, if this option is not set.
Then restart NetworkManager.service.
Note: Support for dhcpcd has been disabled in networkmanager-1.0.0-2 (2015-02-14).

Missing default route
On at least one KDE4 system, no default route was created when establishing wireless connections with
NetworkManager. Changing the route settings of the wireless connection to remove the default selection
"Use only for resources on this connection" solved the issue.

3G modem not detected
See USB 3G Modem#Network Manager.

Switching off WLAN on laptops
Sometimes NetworkManager will not work when you disable your Wi-Fi adapter with a switch on your laptop and
try to enable it again afterwards. This is often a problem with rfkill. Install the rfkill package and use:
	watch -n1 rfkill list all
	
to check if the driver notifies rfkill about the wireless adapter's status. If one identifier stays
blocked after you switch on the adapter you could try to manually unblock it with (where X is the number
of the identifier provided by the above output):
	# rfkill event unblock X
	
Static IP address settings revert to DHCP
Due to an unresolved bug, when changing default connections to a static IP address, nm-applet may not
properly store the configuration change, and will revert to automatic DHCP.
To work around this issue you have to edit the default connection (e.g. "Auto eth0") in nm-applet, change
the connection name (e.g. "my eth0"), uncheck the "Available to all users" checkbox, change your static
IP address settings as desired, and click Apply. This will save a new connection with the given name.
Next, you will want to make the default connection not connect automatically. To do so, run
nm-connection-editor (not as root). In the connection editor, edit the default connection (e.g. "Auto
eth0") and uncheck "Connect automatically". Click Apply and close the connection editor.

Cannot edit connections as normal user
See #Set up PolicyKit permissions.

Forget hidden wireless network
Since hidden networks are not displayed in the selection list of the Wireless view, they cannot be
forgotten (removed) with the GUI. You can delete one with the following command:
	# rm /etc/NetworkManager/system-connections/SSID
	
This works for any other connection.

VPN not working in GNOME
When setting up OpenConnect or vpnc connections in NetworkManager while using GNOME, you will sometimes
never see the dialog box pop up and the following error appears in /var/log/errors.log:
localhost NetworkManager[399]: <error> [1361719690.10506] [nm-vpn-connection.c:1405] get_secrets_cb():
Failed to request VPN secrets #3: (6) No agents were available for this request.
This is caused by the GNOME NM Applet expecting dialog scripts to be at /usr/lib/gnome-shell, when
NetworkManager's packages put them in /usr/lib/networkmanager. As a "temporary" fix (this bug has been
around for a while now), make the following symlink(s):
For OpenConnect: ln -s /usr/lib/networkmanager/nm-openconnect-auth-dialog /usr/lib/gnome-shell/
For VPNC (i.e. Cisco VPN): ln -s /usr/lib/networkmanager/nm-vpnc-auth-dialog /usr/lib/gnome-shell/

This may need to be done for any other NM VPN plugins as well, but these are the two most common.

Unable to connect to visible European wireless networks
WLAN chips are shipped with a default regulatory domain. If your access point does not operate within
these limitations, you will not be able to connect to the network. Fixing this is easy:
	Install crda
	
Uncomment the correct Country Code in /etc/conf.d/wireless-regdom
Reboot the system, because the setting is only read on boot

Automatic connect to VPN on boot is not working
The problem occurs when the system (i.e. NetworkManager running as the root user) tries to establish
a VPN connection, but the password is not accessible because it is stored in the Gnome keyring of a
particular user.
A solution is to keep the password to your VPN in plaintext, as described in step (2.) of #Use dispatcher
to connect to a VPN after a network connection is established.
You do not need to use the dispatcher described in step (1.) to auto-connect anymore, if you use the new
"auto-connect VPN" option from the nm-applet GUI.

Systemd Bottleneck
Over time the log files (/var/log/journal) can become very large. This can have a big impact on boot
performance when using NetworkManager, see: Systemd#Boot time increasing over time.
Regular network disconnects, latency and lost packets (WiFi)

NetworkManager does a scan every 2 minutes.
Some WiFi drivers have issues when scanning for base stations whilst connected/associated. Symptoms
include VPN disconnects/reconnects and lost packets, web pages failing to load and then refresh fine.
Running journalctl -f will indicate that this is taking place, messages like the following will be
contained in the logs at regular intervals.
NetworkManager[410]: <info>  (wlp3s0): roamed from BSSID 00:14:48:11:20:CF (my-wifi-name) to (none) ((none))
There is a patched version of NetworkManager which should prevent this type of scanning:
networkmanager-noscanAUR.
Alternatively, if roaming is not important, the periodic scanning behavior can be disabled by locking
the BSSID of the access point in the WiFi connection profile.

Tips and tricks

Encrypted Wi-Fi passwords
By default, NetworkManager stores passwords in clear text in the connection files at
/etc/NetworkManager/system-connections/. To print the stored passwords, use the following command:
	# grep -H '^psk=' /etc/NetworkManager/system-connections/*
	
The passwords are accessible to the root user in the filesystem and to users with access to settings
via the GUI (e.g. nm-applet).
If it is preferable to save the passwords in encrypted form in a keyring instead of clear text. The
downside of using a keyring is that the connections have to be set up for each user.

Using Gnome-Keyring
The keyring daemon has to be started and the keyring needs to be unlocked for the following to work.
Furthermore, NetworkManager needs to be configured not to store the password for all users. Using GNOME
nm-applet, run nm-connection-editor from a terminal, select a network connection, click Edit, select
the Wifi-Security tab and click on the right icon of password and check Store the password for this user.

Using KDE Wallet
Tango-view-refresh-red.pngThis article or section is out of date.Tango-view-refresh-red.png
Reason: plasma-nm has a different interface. (Discuss in Talk:NetworkManager#)
Using KDE's kdeplasma-applets-plasma-nm[broken link: archived in aur-mirror], click the applet, click on
the top right Settings icon, double click on a network connection, in the General settings tab, untick
all users may connect to this network. If the option is ticked, the passwords will still be stored in
clear text, even if a keyring daemon is running.
If the option was selected previously and you un-tick it, you may have to use the reset option first to
make the password disappear from the file. Alternatively, delete the connection first and set it up again.
Sharing internet connection over Wi-Fi
You can share your internet connection (e.g. 3G or wired) with a few clicks using nm. You will need a
supported Wi-Fi card (Cards based on Atheros AR9xx or at least AR5xx are probably best choice). Please
note that a firewall may interfere with internet sharing.

Ad-hoc
Tango-edit-clear.pngThis article or section needs language, wiki syntax or style
improvements.Tango-edit-clear.png
Reason: "I think so"... (Discuss in Talk:NetworkManager#)
Install the dnsmasq package to be able to actually share the connection.
Custom dnsmasq.conf may interfere with NetworkManager (not sure about this, but I think so).
Click on applet and choose "Create new wireless network".
Follow wizard (if using WEP, be sure to use 5 or 13 character long password, different lengths will fail).
Settings will remain stored for the next time you need it.

Real AP
Support of infrastructure mode (which is needed by Android phones as they intentionally do not support
ad-hoc) is added by NetworkManager as of late 2012.
See Fedora's wiki.

Sharing internet connection over Ethernet
Scenario: your device has internet connection over wi-fi and you want to share the internet connection
to other devices over ethernet.
Requirements:
Install the dnsmasq package to be able to actually share the connection.
Your internet connected device and the other devices are connected over a suitable ethernet cable (this
usually means a cross over cable or a switch in between).
Internet sharing is not blocked by a firewall.
Steps:
Run nm-connection-editor from terminal.
Add a new ethernet connection.
Give it some sensible name. For example "Shared Internet"
Go to "IPv4 Settings".
For "Method:" select "Shared to other computers".
Save
Now you should have a new option "Shared Internet" under the Wired connections in NetworkManager.
Checking if networking is up inside a cron job or script
Some cron jobs require networking to be up to succeed. You may wish to avoid running these jobs when
the network is down. To accomplish this, add an if test for networking that queries NetworkManager's
nm-tool and checks the state of networking. The test shown here succeeds if any interface is up, and
fails if they are all down. This is convenient for laptops that might be hardwired, might be on wireless,
or might be off the network.
	if [ $(nm-tool|grep State|cut -f2 -d' ') == "connected" ]; then
	    #Whatever you want to do if the network is online
	else
	    #Whatever you want to do if the network is offline - note, this and the else above are optional
	fi
	
This useful for a cron.hourly script that runs fpupdate for the F-Prot virus scanner signature update,
as an example. Another way it might be useful, with a little modification, is to differentiate between
networks using various parts of the output from nm-tool; for example, since the active wireless network
is denoted with an asterisk, you could grep for the network name and then grep for a literal asterisk.

Connect to network with secret on boot
By default, NetworkManager will not connect to networks requiring a secret automatically on boot. This
is because it locks such connections to the user who makes it by default, only connecting after they
have logged in. To change this, do the following:
Right click on the nm-applet icon in your panel and select Edit Connections and open the Wireless tab
Select the connection you want to work with and click the Edit button
Check the boxes “Connect Automatically” and “Available to all users”
Log out and log back in to complete.

Automatically unlock keyring after login
NetworkManager requires access to the login keyring to connect to networks requiring a secret. Under
most circumstances, this keyring is unlocked automatically at login, but if it isn't, and NetworkManager
isn't connecting on login, you can try the following.
GNOME
Note: The following method is dated and known not to work on at least one machine!
In /etc/pam.d/gdm (or your corresponding daemon in /etc/pam.d), add these lines at the end of the "auth"
and "session" blocks if they do not exist already:
	 auth            optional        pam_gnome_keyring.so
	 session         optional        pam_gnome_keyring.so  auto_start
 
In /etc/pam.d/passwd, use this line for the 'password' block:
	password    optional    pam_gnome_keyring.so
Next time you log in, you should be asked if you want the password to be unlocked automatically on login.

SLiM login manager
See SLiM#Gnome Keyring.

Troubleshooting
While you may type both values at connection time, kdeplasma-applets-plasma-nm[broken link: archived
in aur-mirror] 0.9.3.2-1 and above are capable of retrieving OpenConnect username and password directly
from KWallet.
Open "KDE Wallet Manager" and look up your OpenConnect VPN connection under "Network Management|Maps". Click
"Show values" and enter your credentials in key "VpnSecrets" in this form (replace username and password
accordingly):
	form:main:username%SEP%username%SEP%form:main:password%SEP%password
	
Next time you connect, username and password should appear in the "VPN secrets" dialog box.

Ignore specific devices
Sometimes it may be desired that NetworkManager ignores specific devices and does not try to configure
addresses and routes for them.You can quickly and easily ignore devices by MAC or interface-name by
using the following in /etc/NetworkManager/NetworkManager.conf:
	[keyfile]
	unmanaged-devices=mac:00:22:68:1c:59:b1;mac:00:1E:65:30:D1:C4;interface-name:eth0
	
After you have put this in, restart NetworkManager, and you should be able to configure interfaces
without NetworkManager altering what you have set.

Enable DNS Caching
See dnsmasq#NetworkManager to enable the plugin that allows DNS caching using dnsmasq.

Configuring MAC Address Randomization
As of version 1.4.0, NetworkManager supports two types MAC Address Randomization: randomization
during scanning, and stable randomization. Both modes can be configured by modifying
/etc/networkManager/NetworkManager.conf.
Randomization during Wi-Fi scanning is enabled by default starting on version 1.2.0, and it can be
disabled by adding the following lines to /etc/NetworkManager/NetworkManager.conf:
	[device]
	wifi.scan-rand-mac-address=no
	
In contrast, stable randomization generates a different MAC address for each different connection. This
is specially useful when, for example, a portal remembers your login status based on your MAC address. To
enable this mode, you can use the option
	[connection]
	wifi.cloned-mac-address=random
	
or
	[connection]
	ethernet.cloned-mac-address=random
	
You can read more about it here
Enable IPv6 Privacy Extensions
See IPv6#NetworkManager
See also

NetworkManager for Administrators Part 1

---
