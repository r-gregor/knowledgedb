filename: howto_copy-directory-structure-only-multif_20190423.txt
https://unix.stackexchange.com/questions/83593/copy-specific-file-type-keeping-the-folder-structure

Copy specific file type keeping the folder structure

   I have a folder structure with a bunch of *.csv files scattered across the folders. Now I want to
   copy all *.csv files to another destination keeping the folder structure.

   It works by doing:
cp --parents *.csv /target
cp --parents */*.csv" /target
cp --parents */*/*.csv /target
cp --parents */*/*/*.csv /target
...

   and so on, but I would like to do it using one command.

***
   Is there any reason why people resist using find's -exec? It's very handy.
find . -name '*.csv' -exec cp --parents \{\} /target \;

   Know your tools. ;-)

***
       Probably because of this \{\} \;

***
       '{}' works just as well

***
       Even though -execdir is safer than -exec, simply replacing one with the other does not preserve
       the folder structure as intended.

***
   You could also use rsync for this.
$ rsync -a --prune-empty-dirs --include '*/' --include '*.csv' --exclude '*' source/ target/

   If you want to keep empty directories from the source tree, skip the --prune-empty-dirs option:
$ rsync -a --include '*/' --include '*.csv' --exclude '*' source/ target/

   If you do not want symlinks, modification dates, file permissions, owners etc. preserved, please
   replace -a with another combination of -rlptgoD. ;-)

***
       -m is a shortcut for --prune-emty-dirs.
     * Also, the -R option can be added to copy the parent directory structure of source.

***
   You can use find and cpio in pass through mode
find . -name '*.csv' | cpio -pdm  /target

   This will find all .csv files in the current directory and below and copy them to /target maintaining
   the directory structure rooted in ..

   If you use
find /path/to/files -name '*.csv' | cpio -pdm /target

   it will find all of the file in /path/to/files and below and copy them to /target/path/to/files and
   below.

***
       I tried all the answers top down up to this one, and this was the only one that worked on the
       first attempt – [60]OscarRyz Jun 24 '16 at 19:10

*** [5p]
   This one worked for me:

   find -name "*.csv" | xargs cp --parents -t /target

***
     * Best answer with most simple syntax. Works just fine and is easy to remember. In many cases find
       [things] | xargs [do stuff] is very powerfull.

***
   Assuming you want to replicate this structure from ./source to ./destination:
cd source
find . -name "*.csv" | xargs tar cvf - | (cd ../destination ; tar xfp -)

***
   From rsync's manpage:

     -R, --relative

     Use relative paths. This means that the full path names specified on the command line are sent to
     the server rather than just the last parts of the filenames. This is particularly useful when you
     want to send several different directories at the same time. For example, if you used this
     command:
rsync -av /foo/bar/baz.c remote:/tmp/

     ... this would create a file named baz.c in /tmp/ on the remote machine. If instead you used
rsync -avR /foo/bar/baz.c remote:/tmp/

     then a file named /tmp/foo/bar/baz.c would be created on the remote machine, preserving its full
     path. These extra path elements are called "implied directories" (i.e. the "foo" and the "foo/bar"
     directories in the above example).

   So, this would work, too:
rsync -armR --include="*/" --include="*.csv" --exclude="*" /full/path/to/source/file(s) destination/


---
https://askubuntu.com/questions/365877/copy-only-folders-not-files

Copy only folders not files?

   Is there a way to copy an entire directory, but only the folders? I have a corrupt file somewhere in
   my directory which is causing my hard disks to fail.

   So instead of copying the corrupt file to another hard disk, I wanted to just copy the folders,
   because I have scripts that search for hundreds of folders, and I don't want to have to manually
   create them all.

   I did search the cp manual, but couldn't see anything (I may have missed it)

   Say I have this structure on my failed HDD:
dir1
    files
    dir2
        files
        files
        dir4
dir3
files

   All I a want is the directory structure, not any files at all.

   So I'd end up with on the new HDD:
dir1
    dir2
        dir4
dir3


***
   If you want to mirror a directory skeleton and copy no files:
find -type d -links 2 -exec mkdir -p "/path/to/backup/{}" \;

   What's going on here:
     * Find is only selecting directories
     * We're using -links 2 to find the deepest possible directories.
     * mkdir -p will make any missing directories along the way.

   I've done it like this rather than find -type d -exec mkdir -p "/path/to/backup/{}" \; because it'll
   cut out on a whole buttload of mkdir calls. We can quickly prove this with a little test. Here's the
   test tree followed by what I ran to compare the two commands:
$ tree
.
├── dir1
│   ├── dir2
│   │   └── dir3
│   ├── dir7
│   └── dir8
└── dir9
    └── dir0

$ pr -m -t <(find -type d) <(find -type d -links 2)
.                               ./dir1/dir8
./dir1                          ./dir1/dir2/dir3
./dir1/dir8                     ./dir1/dir7
./dir1/dir2                     ./dir9/dir0
./dir1/dir2/dir3
./dir1/dir7
./dir9
./dir9/dir0

   And that's only going to get better in a real-word solution with thousands of directories.

***
     * If you don't specify a path, find uses the current working directory as the starting point. If
       you wish to use another path use the syntax: find /path/to/search/ -type..... –
     * So I set my directory to a certain folder that contains the skeleton I want to copy, run find
       -type d -exec mkdir -p "/media/jinglez/TVSeries/TV Series"/{}" \; and all should be okay? It
       seems to be taking a while :/
     * They're both specific to find's exec clause. {} means the current "found" filename and \; is just
       the escape to end the clause. By the looks of it, there's an extra " in your code up to no good,
       I'm sure... Should read: find -type d -links 2 -exec mkdir -p "/media/jinglez/TVSeries/TV Series/{}" \;

***
   Quite easily done with python one-liner:
bash-4.3$ tree
.
├── ABC
├── set_pathname_icon.py
├── subdir1
│   ├── file1.abc
│   └── file2.abc
├── subdir2
│   ├── file1.abc
│   └── file2.abc
└── subdir3
    └── subdir4
        └── file1.txt

4 directories, 7 files

bash-4.3$ python -c 'import os,sys;dirs=[ r for r,s,f in os.walk(".") if r != "."];\
            [os.makedirs(os.path.join(sys.argv[1],i)) for i in dirs]' ~/new_destination
            
bash-4.3$ tree ~/new_destination
/home/xieerqi/new_destination
├── subdir1
├── subdir2
└── subdir3
    └── subdir4

   As script this could be rewritten like so:
<code>
#!/usr/bin/env python
import os,sys
dirs=[ r for r,s,f in os.walk(".") if r != "."]
for i in dirs:
    os.makedirs(os.path.join(sys.argv[1],i))
</code>


---
https://www.lazysystemadmin.com/2010/07/linux-copy-only-directory-structure.html

Linux : Copy only directory structure without copying content
July 26, 2010

   Some times, In Linux and UNIX, you may want to copy only the directory structure without copying the
   content and you want to create a similar directory structure in some other place. here is the quick
   way to do that.
   
   Create the parent directory at wherever you want.
   mkdir /where/ever/you/want
   Example: mkdir /app01/data
   
   Switch to the directory from where you want to copy the directory structure.
   cd /from/where/you/want/to/copy/directory/structure
   Example: cd /app02/data
   
   Now type the following command in the server terminal
   find * -type d -exec mkdir /where/you/want/\{\} \;
   Example: find * -type d -exec mkdir /app01/data/\{\} \;
   
   Now the directory structure create in the new path where you specified as it is in the source.


---
https://www.unix.com/shell-programming-and-scripting/119654-copy-only-folder-structure.html

Copy only folder structure ?
09-21-2009

   Hello,
   I am not sure how feasible is it, but trying to copy/create the folders from one box to another. I
   dont want to copy the content of folder otherwise it'd be too much of data..
   The folder structure is quite complex (in deep hierarchy) and its a big effort manually ..
   Please suggest
   Thanks in Advance

***
   If you only want to copy the directory structure you can try this:
   Code:
cd source_dir
find . -type d -depth | cpio -dumpl destination_dir


***
   If you have rsync:
   Code:
rsync -avz -e ssh --include '*/' --exclude '*' local_source_dir user@host:/dest_dir

   Use --dry-run to test.

***
cd destination/dir
find /source/dir -type d -printf "%P\n" | xargs mkdir -p

   Be extremely careful not to overwrite source dir. Make few test first in /tmp


---
https://stackoverflow.com/questions/4073969/copy-folder-structure-sans-files-from-one-location-to-another

Copy folder structure (sans files) from one location to another

   I want to create a clone of the structure of our multi-terabyte file server. I know that cp --parents
   can move a file and it's parent structure, but is there any way to copy the directory structure
   intact?

***
   You could do something like:
find . -type d >dirs.txt

   to create the list of directories, then
xargs mkdir -p <dirs.txt

***
       This solutions won't work if you have spaces in your directory names.

***    Change the commands to find . -type d -print0 >dirs.txt and xargs -0 mkdir -p <dirs.txt.
       This will cause both commands to use nulls as separators instead of whitespace.

***
       xargs can exceed the maximum command length of the system when you start dealing with orders of
       hundreds or thousands, so use this with caution. (Find the command length limit with getconf
       ARG_MAX.) With a lot of directories, you may have to write a script to loop through the output
       instead.

***
cd /path/to/directories &&
find . -type d -exec mkdir -p -- /path/to/backup/{} \;

       -- is a standard GNU utility option terminator. It means "hey mkdir, any argument after this,
       it's not a flag, so treat it as a file argument, even if it starts with a '-' character."

***
   Here is a simple solution using rsync:
rsync -av -f"+ */" -f"- *" "$source" "$target"

     * one line
     * no problems with spaces
     * preserve permissions

***
       same but more readable rsync -a --include '*/' --exclude '*' "$source" "$target"
       
     * Problem with this solution is: my folders contain thousands of files and rsync takes ages just to
       sync a dozen of folders.

***
   I dunno if you are looking for a solution on Linux. If so, you can try this:
$ mkdir destdir
$ cd sourcedir
$ find . -type d | cpio -pdvm destdir

***

***
   This works:
find ./<SOURCE_DIR>/ -type d | sed 's/\.\/<SOURCE_DIR>//g' | xargs -I {} mkdir -p <DEST_DIR>"/{}"

   Just replace SOURCE_DIR and DEST_DIR.
 
***
   The following solution worked well for me in various environments:
sourceDir="some/directory"
targetDir="any/other/directory"

find "$sourceDir" -type d | sed -e "s?$sourceDir?$targetDir?" | xargs mkdir -p

***
   Substitute target_dir and source_dir with the appropriate values:
cd target_dir && (cd source_dir; find . -type d ! -name .) | xargs -i mkdir -p "{}"

***
   This solves even the problem with whitespaces:

   In the original/source dir:
find . -type d -exec echo "'{}'" \; > dirs2.txt

   then recreate it in the newly created dir:
mkdir -p <../<SOURCEDIR>/dirs2.txt

***
   A python script from Sergiy Kolodyazhnyy posted on Copy only folders not files?:
#!/usr/bin/env python
import os,sys
dirs=[ r for r,s,f in os.walk(".") if r != "."]
for i in dirs:
    os.makedirs(os.path.join(sys.argv[1],i))

   or from the shell:
python -c 'import os,sys;dirs=[ r for r,s,f in os.walk(".") if r != "."];[os.makedirs(os.path.join(sys.argv[1]
,i)) for i in dirs]' ~/new_destination

***

***


---
https://www.cyberciti.biz/faq/unix-linux-bsdosx-copying-directory-structures-trees-rsync/

Linux: rsync Copy Directories Structures Tree Only
January 16, 2011

   I am looking for to only sync directories structures only. How do I copy directory structure tree
   without copying any files under Linux or UNIX operating system to remove server or local directory?
   You need to use the rsync command. The rsync remote-update protocol allows rsync to transfer just

   My website is made possible by displaying online advertisements to my visitors. I get it! Ads are
   annoying but they help keep this website running. It is hard to keep the site running and producing
   new content when so many people block ads. Please consider donating money to the nixCraft via
   [19]PayPal/[20]Bitcoin, or become a [21]supporter using Patreon.

   the differences between two sets of files across the network connection, using an efficient
   checksum-search algorithm. Make sure it is installed on all servers for remote copy. The syntax is as
   follows to copy directories tree only:
rsync -av -f"+ */" -f"- *" /path/to/src /path/to/dest/
rsync -av -f"+ */" -f"- *" /path/to/apache/logs/ root@www433.nixcraft.net.in:/path/to/apache/logs/

   rsync -av -f"+ */" -f"- *" /path/to/src /path/to/dest/ rsync -av -f"+ */" -f"- *"
   /path/to/apache/logs/ root@www433.nixcraft.net.in:/path/to/apache/logs/

   If you are using an older rsync version, try:
rsync -av --include='*/' --exclude='*' /path/to/src /path/to/dest/
rsync -av --include='*/' --exclude='*' /path/to/apache/logs/ root@www433.nixcraft.net.in:/path/to/apache/logs/

   rsync -av --include='*/' --exclude='*' /path/to/src /path/to/dest/ rsync -av --include='*/'
   --exclude='*' /path/to/apache/logs/ root@www433.nixcraft.net.in:/path/to/apache/logs/

rsync Command For Directory Structures / Tree Only
   Consider the following layout in /var/logs/apache/ for each domain:
cricketnow.in/
cyberciti.biz/
hexindia.net/
io9.in/
nixcraft.com/
theos.in/

   You can sync just directories by excluding everything else. Open a command-line terminal (select
   Applications > Accessories > Terminal), and then type the following commands or login using ssh to
   the remote server. You want to copy all dirs i.e. exclude everything that is not a directory, enter:
   # cd /var/log/apache/
   # rsync -av -f"+ */" -f"- *" . root@server2.nixcraft.com:/var/log/apache/
   Sample outputs:
building file list ... done
./
cricketnow.in/
cyberciti.biz/
hexindia.net/
io9.in/
nixcraft.com/
theos.in/

sent 388 bytes  received 98 bytes  972.00 bytes/sec
total size is 0  speedup is 0.00

   You can also make local copies as follows:
   # cd /var/log/apache/
   # rsync -av -f"+ */" -f"- *" . /jailfs/apache/httpd_root/var/log/apache/

See also:
   If you need assistance with Linux / UNIX rsync command-line options, turn to the man page first. It
   will give you detailed information, parameters and switches for rsync command:
   $ man rsync


---
https://www.linuxquestions.org/questions/linux-newbie-8/copy-directory-structure-only-208796/

Copy Directory Structure Only

   Does anyone know a command that allows one to copy a directory structure to another location. The
   structure is very deep and I do not need the files in any of the directories.

***
   I don't know if there's a single command to do that... If there is, it might be some form of the find
   command. Here's a script that will work for you though.
   Code:
#!/bin/bash

old_ifs=${IFS}
IFS=$'\n'

for directory in $( find . -type d ); do
  new_directory=$( echo ${directory} | sed "s%\./%placeholder/%" )
  echo "mkdir -p \"${new_directory}\""
  #mkdir -p "${new_directory}"
done

IFS=${old_ifs}

exit 0

   A few things to note:
   1. You must be in the top-level directory of the structure you wish to copy when you run the script.
   2. You need to change the placeholder text in the script to be the directory you copy the directory
   structure to. You can use an absolute pathname if you like, but no matter what, it needs to have the
   trailing slash (which is why it's not listed in red).
   3. The script will not actually copy the structure until you remove the # character in front of the
   mkdir command above. This is a safeguard so you can actually see the commands the script will execute
   before you "cut it loose"


***
   find . -type d -exec mkdir /destination/{} \;
   example as run by me.
   
   find . -type d -exec mkdir /work/work/{} \;
   does it all, but copies hidden files in top directory only. i can't figure out why. but it's pretty
   close.
   
   cd /work/work; rm .*
   deletes the hidden files in the top.. maybe i'll figure it out later.

***
# cd /new/dir
# (cd /old/dir; find -type d ! -name .) | xargs mkdir


---
