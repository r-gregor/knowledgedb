filename: rclone_transfer-files-between-dropbox-and-google-drive_20220817.txt
https://ostechnix.com/transfer-files-between-dropbox-and-google-drive-with-rclone/

How To Transfer Files Between Dropbox And Google Drive With Rclone In Linux

Sync Files Between Dropbox And Google Drive Using Rclone
January 27, 2022

   Rclone has a wealth of features. Generally, Rclone is used to copy files from the local drive to
   a cloud storage provider like Dropbox or Google Drive and vice versa. How about copying files between
   two different cloud providers? Yes, It is also possible! In this brief guide, we will see how to
   transfer files between Dropbox and Google Drive with Rclone in Linux.

   As you may already aware, Rclone doesn't use the local drive while synchronizing files between two
   different cloud providers. Rclone employs server-side transfers to minimize the local bandwidth use
   and transfers the data from one provider to another without using local disk. Hence, it reduces disk
   writes and local network bandwidth significantly.

Configure Rclone With Dropbox And Google Drive
   In order to transfer data between two cloud providers, we need to configure Rclone with those cloud
   providers.

   We already have discussed how to mount Dropbox and Google Drive locally using Rclone and how to
   transfer files from the local system to Dropbox or Google drive and vice versa.

   Refer the following guides to know how to configure Dropbox and Google drive with rclone and them
   mount them locally using Rclone.
     * How To Mount Google Drive Locally Using Rclone In Linux
       [https://ostechnix.com/mount-google-drive-using-rclone-in-linux/]
       [**1][rclone_mount-google-drive_20220817]

     * How To Mount Dropbox Locally Using Rclone In Linux
       [https://ostechnix.com/mount-dropbox-using-rclone-in-linux/]
       [**2][rclone_mount-dropbox_20220817]

   Now, let us go ahead and sync files between Dropbox and Google Drive with Rclone in Linux.

   This procedure is not just for transferring files between Dropbox and Google drive but for any two
   cloud providers. A few steps will differ but the procedure is almost same.

Transfer Files Between Dropbox And Google Drive With Rclone
   I assume you've already configured Dropbox and Google drive with Rclone as described in the
   aforementioned links.

   Let me show you my configured remotes (Cloud providers, of course):
$> rclone listremotes
mydropbox:
mygdrive:

   As you see, I have configured Dropbox and Google drive accounts with Rclone.

   Now let us copy a folder named "Test" from Google drive to Dropbox with Rclone using the following
   command:
$> rclone copy mygdrive:Test mydropbox:Test

   Replace the name of the remote and folder in the above command with your own.

   Let us check the contents of "Test" folder on both Dropbox and Google Drive.

   View contents of Test folder in Google Drive:
$> rclone ls mygdrive:Test
    15860 ostechnix logo.png

   View the contents of Test folder in Dropbox:
$> rclone ls mydropbox:Test
    15860 ostechnix logo.png

   As you see in the output, the Test folder on both providers has the same content. This is how you
   copy files between two cloud providers using Rclone.

   If you want to keep the Test folder in sync on both providers, just replace the rclone copy command
   with rclone sync:
$> rclone sync mygdrive:Test mydropbox:Test

Useful Rclone Options
   Rclone has so many options. A few important Rclone flags that can be used in this scenario are;
    1. --dry-run : It is always recommended to do a trial run before transferring the files. The
       --dry-run option will show you which files will be copied to where, without copying anything. The
       dry-run flag is useful to verify you're not overwriting any files accidentally.
    2. --update : Skip files that are newer on the destination.
    3. --transfers : Number of file transfers to run in parallel. By default, Rclone will perform 4 file
       transfers in parallel.
    4. --retries : Number of times to retry failed operations. The default value is 3.
    5. -P, --progress - Show progress bar while transferring files.

   Let us put all these flags in our command.
$> rclone copy --update --dry-run --transfers 10 --retries 5 -P mygdrive:Test mydropbox:Test

   Please note that we used --dry-run flag in the above command, so it will not transfer files. It will
   only do the trial run. If everything went OK as the you wanted, you can start the actual file
   transfer process without --dry-run like below:
$> rclone copy --update --transfers 10 --retries 5 -P mygdrive:Test mydropbox:Test

   You can also create an alias to the above Rclone command or put it in a script to save a few key
   strokes. Just call the alias/script whenever you want to transfer files between the cloud providers.
   It is that simple!

   You can try other options that suits for you and modify the above command as per your requirement.
   The full list of available Rclone flags are given in this link - https://rclone.org/flags/.

Conclusion
   If you happen to transfer files often between two cloud storage, Rclone is a perfect choice. You
   don't have to manually download files from one provider and upload them to another. Just use Rclone
   with suitable flags and it will take care of the rest.


---
[**1]
https://ostechnix.com/mount-google-drive-using-rclone-in-linux/

How To Mount Google Drive Locally Using Rclone In Linux

Setup Rclone With Google Drive In Linux
January 20, 2022

   This guide walks you through the steps to mount Google drive locally using Rclone and then backup
   files to google drive using Rclone in Linux operating systems. This guide has been officially tested
   on Manjaro Linux, but the steps are same for all Linux and Unix distributions.

   Before getting started, make sure you've installed Rclone on your Linux machine. The following link
   contains the Rclone installation steps for Linux and Unix operating systems.
     * [https://ostechnix.com/install-rclone-in-linux/]How To Install Rclone In Linux And Unix

   In order to mount Google drive using Rclone on your local file manager, you need to get a token from
   the Google drive. You can do it in two ways, from the command line using 'rclone config' command and
   from rclone WebUI.

   Let us see the command line way first.

Configure Rclone to access Google drive from commandline
   Open the Terminal and run the following command to authorize Rclone to access your Google drive:
$> rclone config

   This will guide you through an interactive setup process.

   First, Rclone will search for a list of available remotes (i.e. Cloud providers).

   Since it is our new setup, we haven't created any remotes yet. So let us create a new remote.

   To create a new remote, simply type "n" and hit ENTER. Then type the name of the remote. Here, I am
   going to name it as "mygdrive".
2022/01/19 16:13:42 NOTICE: Config file "/home/ostechnix/.config/rclone/rclone.conf" not found - using defaults
No remotes found - make a new one
n) New remote
s) Set configuration password
q) Quit config
n/s/q> n
name> mygdrive

   A list of supported cloud providers will be displayed. Choose the cloud provider of your choice. In
   our case. it is Google drive, so I entered number 16.
Option Storage.
Type of storage to configure.
Enter a string value. Press Enter for the default ("").
Choose a number from below, or type in your own value.
 1 / 1Fichier
   \ "fichier"
 2 / Alias for an existing remote
   \ "alias"
 3 / Amazon Drive
   \ "amazon cloud drive"
 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Mi
nio, SeaweedFS, and Tencent COS
   \ "s3"
 5 / Backblaze B2
   \ "b2"
 6 / Better checksums for other remotes
   \ "hasher"
 7 / Box
   \ "box"
 8 / Cache a remote
   \ "cache"
 9 / Citrix Sharefile
   \ "sharefile"
10 / Compress a remote
   \ "compress"
11 / Dropbox
   \ "dropbox"
12 / Encrypt/Decrypt a remote
   \ "crypt"
13 / Enterprise File Fabric
   \ "filefabric"
14 / FTP Connection
   \ "ftp"
15 / Google Cloud Storage (this is not Google Drive)
   \ "google cloud storage"
16 / Google Drive
   \ "drive"
17 / Google Photos
   \ "google photos"
18 / Hadoop distributed file system
   \ "hdfs"
19 / Hubic
   \ "hubic"
20 / In memory object storage system.
   \ "memory"
21 / Jottacloud
   \ "jottacloud"
22 / Koofr
   \ "koofr"
23 / Local Disk
   \ "local"
24 / Mail.ru Cloud
   \ "mailru"
25 / Mega
   \ "mega"
26 / Microsoft Azure Blob Storage
   \ "azureblob"
27 / Microsoft OneDrive
   \ "onedrive"
28 / OpenDrive
   \ "opendrive"
29 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)
   \ "swift"
30 / Pcloud
   \ "pcloud"
31 / Put.io
   \ "putio"
32 / QingCloud Object Storage
   \ "qingstor"
33 / SSH/SFTP Connection
   \ "sftp"
34 / Sia Decentralized Cloud
   \ "sia"
35 / Sugarsync
   \ "sugarsync"
36 / Tardigrade Decentralized Cloud Storage
   \ "tardigrade"
37 / Transparently chunk/split large files
   \ "chunker"
38 / Union merges the contents of several upstream fs
   \ "union"
39 / Uptobox
   \ "uptobox"
40 / Webdav
   \ "webdav"
41 / Yandex Disk
   \ "yandex"
42 / Zoho
   \ "zoho"
43 / http Connection
   \ "http"
44 / premiumize.me
   \ "premiumizeme"
45 / seafile
   \ "seafile"
Storage> 16

   Enter your Google drive client ID and its secret if you already have them. If you don't have client
   ID, you can create a new one.

   Note: Please note that creating Google application client id is optional, but recommended. To know
   how to create your own Google drive client ID, refer
   [https://rclone.org/dropbox/#get-your-own-dropbox-app-id]this link. If you don't want to create the
   client ID, no problem! You can simply leave it blank and continue the other steps.

   I already have created Google Application Client ID and its secret, so I entered the details below.
Option client_id.
Google Application Client Id
Setting your own is recommended.
See https://rclone.org/drive/#making-your-own-client-id for how to create your own.
If you leave this blank, it will use an internal key which is low performance.
Enter a string value. Press Enter for the default ("").
client_id> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com
Option client_secret.
OAuth Client Secret.
Leave blank normally.
Enter a string value. Press Enter for the default ("").
client_secret> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

   If you don't have Google client ID, simply press ENTER to leave blank values for Google application
   client id and client secret:
Google Application Client Id - leave blank normally.
client_id>
Google Application Client Secret - leave blank normally.
client_secret>

   Type 1 (Number 1) to give full access to your Google drive files. Again, it is your choice. If you
   don't want to give full access, you can any one of other choices.
Choose a number from below, or type in your own value.
 1 / Full access all files, excluding Application Data Folder.
   \ "drive"
 2 / Read-only access to file metadata and file contents.
   \ "drive.readonly"
   / Access to files created by rclone only.
 3 | These are visible in the drive website.
   | File authorization is revoked when the user deauthorizes the app.
   \ "drive.file"
   / Allows read and write access to the Application Data folder.
 4 | This is not visible in the drive website.
   \ "drive.appfolder"
   / Allows read-only access to file metadata but
 5 | does not allow any access to read or download file content.
   \ "drive.metadata.readonly"
scope> 1


   At the "root_folder_id" and "service_account_file" prompt, just leave them blank and press ENTER to
   accept the default values.
Option root_folder_id.
ID of the root folder.
Leave blank normally.
Fill in to access "Computers" folders (see docs), or for rclone to use
a non root folder as its starting point.
Enter a string value. Press Enter for the default ("").
root_folder_id>  ##Leave blank and press ENTER
Option service_account_file.
Service Account Credentials JSON file path.
Leave blank normally.
Needed only if you want use SA instead of interactive login.
Leading `~` will be expanded in the file name as will environment variables such as `${RCLONE_CONFIG_DIR}`.
Enter a string value. Press Enter for the default ("").
service_account_file> ##Leave blank and press ENTER

   Next, you are asked if you want to edit advanced configuration file. I just don't want to edit it, so
   I entered "n" and hit ENTER to continue.
Edit advanced config?
y) Yes
n) No (default)
y/n> n

   Finally, press "Y" to use auto config (which is the default) to complete Rclone configuration task.
Use auto config?
 * Say Y if not sure
 * Say N if you are working on a remote or headless machine

y) Yes (default)
n) No
y/n> y

   Now your web browser will open and you will be prompted to choose a Google account to continue. If
   you're logged in to multiple Google accounts, choose the one that you want to allow Rclone to access
   your Google drive.

   Please note that if you newly created an app from Google API Console while creating client_id, you
   will see a security warning as shown below. It is normal. Google usually take a few weeks to verify
   the submitted app.

   You can simply go ahead by clicking "Advanced" link and then click "Go to rclone (unsafe)" link.

   Next Rclone will ask your permission to access your Google drive. Click "Continue" button to
   authorize Rclone to access your Google drive.

   You will see a success message in the browser.

   Just close the browser window and go back to the Terminal.

   Next, you're prompted if you want to make your Google drive as a shared drive. Type "n" (It is the
   default) and hit ENTER.
Configure this as a Shared Drive (Team Drive)?

y) Yes
n) No (default)
y/n> n

   The new remote details will displayed in the Terminal for verification. If everything seems OK,
   simply type "y" and press ENTER to continue creating the remote:
y) Yes this is OK
e) Edit this remote
d) Delete this remote
y/e/d> y

   Done! A new remote named "mygdrive" has just been created.

   If you wish to create another remote for different provider, click "n" and follow the same procedure
   as shown above. Or, just quit the rclone configuration wizard by pressing "q".
Current remotes:

Name                 Type
====                 ====
mygdrive             drive

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q> q

   You can view the list of configured remotes at any time by using the following command:
$> rclone listremotes

   Sample output:
mygdrive:

Mount Google Drive Locally Using Rclone

   In order to access the contents of Google drive from your file manager, you need to mount it first.

   Create a mount point to mount your google drive. I am going to create a new mount point named gdrive.
$> mkdir ~/gdrive

   Next, mount the Google drive using Rclone as shown below:
$> rclone mount mygdrive: ~/gdrive/

   Here, "mygdrive" is the remote name and "gdrive" is the mount point name. Replace them with your own
   values.

   Now, open your file manager and you will see that the gdrive folder is mounted in the left side.
   Click on it to access the contents of your Google drive.

   From now on, you can create, copy, move, rename and delete files/folders as the way you do in your
   local file manager. Anything you put in the local mount folder (i.e. ~/gdrive folder) will be
   uploaded to your Google drive.

   You can also mount a specific directory/file from the google drive like below.
$> rclone mount remote:path/to/files /path/to/local/mount

   You can do everything from commandline as well.

List google drive contents

   To view all files in your Google drive from commandline, run:
$> rclone ls mygdrive:

   Again, replace "mygdrive" using your own remote name.

   To list all directories in the top level, run:
$> rclone lsd mygdrive:

Copy files and directories to Google drive

   For example, to copy a directory from your local system, say "~/test" to a directory called
   "ostechnix" in your Google drive, run:
$> rclone copy ~/test mygdrive:ostechnix

Sync files with Google drive
   You should use this command with caution. Because, the Destination is updated to match Source,
   including deleting files if necessary.

   Since Synchronization involves deletion on destination, it is always a best practice to first test
   the Synchronization operation with the --dry-run or the --interactive/-i flag to avoid data loss.
rclone sync -i SOURCE remote:DESTINATION

   Rclone has many other command line options. We will cover them in a separate guide soon.

Unmount Google drive
   To unmount the Google drive, go to the Terminal window where you run the "rclone mount" command and
   simply press "CTRL+c" to stop the mount.

   You can also do it from the file manager as well. From the file manager, right click on the mount
   point i.e. "gdrive" and click Unmount.

   The umount operation may fail, for example when the mount point is busy. When that happens, you can
   stop the mount manually using command:
$> fusermount -u ~/gdrive

Conclusion
   In this guide, we looked at how to mount Google drive locally with Rclone in Linux, and two basic
   operations - how to copy and sync the files from local drive to Google drive.



---
[**2]
https://ostechnix.com/mount-dropbox-using-rclone-in-linux/

How To Mount Dropbox Locally Using Rclone In Linux

Setup Rclone With Dropbox In Linux
January 21, 2022

   This guide explains how to mount Dropbox locally using Rclone cloud sync tool and how to copy or
   backup files to Dropbox using Rclone in Linux operating systems.

   In order to access Dropbox using Rclone, you need to give authorization to Rclone to access your
   Dropbox account. You can do it in two ways : from Command line using "rclone config" command or from
   the Rclone Web UI. In this guide, we will see the command line way.

Configure Rclone to access Dropbox from commandline
   Start Rclone configuration wizard by running the following command:
$> rclone config

   You will see the list of currently configured remotes (i.e. Cloud providers) and the options to
   create new remote, rename remote and delete remote etc.

   To create a new remote, simply type "n" and hit ENTER. Then type the name of the remote. Here, I am
   going to name it as "mydropbox".
Current remotes:

Name                 Type
====                 ====
mygdrive             drive

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q> n
name> mydropbox

   A list of supported cloud providers will be displayed. Choose the cloud provider of your choice. In
   our case. it is Dropbox, so I entered number 11.
Option Storage.
Type of storage to configure.
Enter a string value. Press Enter for the default ("").
Choose a number from below, or type in your own value.
 1 / 1Fichier
   \ "fichier"
 2 / Alias for an existing remote
   \ "alias"
 3 / Amazon Drive
   \ "amazon cloud drive"
 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Mi
nio, SeaweedFS, and Tencent COS
   \ "s3"
 5 / Backblaze B2
   \ "b2"
 6 / Better checksums for other remotes
   \ "hasher"
 7 / Box
   \ "box"
 8 / Cache a remote
   \ "cache"
 9 / Citrix Sharefile
   \ "sharefile"
10 / Compress a remote
   \ "compress"
11 / Dropbox
   \ "dropbox"
12 / Encrypt/Decrypt a remote
   \ "crypt"
13 / Enterprise File Fabric
   \ "filefabric"
14 / FTP Connection
   \ "ftp"
15 / Google Cloud Storage (this is not Google Drive)
   \ "google cloud storage"
16 / Google Drive
   \ "drive"
17 / Google Photos
   \ "google photos"
18 / Hadoop distributed file system
   \ "hdfs"
19 / Hubic
   \ "hubic"
20 / In memory object storage system.
   \ "memory"
21 / Jottacloud
   \ "jottacloud"
22 / Koofr
   \ "koofr"
23 / Local Disk
   \ "local"
24 / Mail.ru Cloud
   \ "mailru"
25 / Mega
   \ "mega"
26 / Microsoft Azure Blob Storage
   \ "azureblob"
27 / Microsoft OneDrive
   \ "onedrive"
28 / OpenDrive
   \ "opendrive"
29 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)
   \ "swift"
30 / Pcloud
   \ "pcloud"
31 / Put.io
   \ "putio"
32 / QingCloud Object Storage
   \ "qingstor"
33 / SSH/SFTP Connection
   \ "sftp"
34 / Sia Decentralized Cloud
   \ "sia"
35 / Sugarsync
   \ "sugarsync"
36 / Tardigrade Decentralized Cloud Storage
   \ "tardigrade"
37 / Transparently chunk/split large files
   \ "chunker"
38 / Union merges the contents of several upstream fs
   \ "union"
39 / Uptobox
   \ "uptobox"
40 / Webdav
   \ "webdav"
41 / Yandex Disk
   \ "yandex"
42 / Zoho
   \ "zoho"
43 / http Connection
   \ "http"
44 / premiumize.me
   \ "premiumizeme"
45 / seafile
   \ "seafile"
Storage> 11

   Enter your Dropbox client ID and its secret if you already have them. If you don't have client ID,
   you can create a new one.

   Note: Please note that creating Dropbox application client id is optional, but recommended. To know
   how to create your own Dropbox client ID, refer
   [https://rclone.org/dropbox/#get-your-own-dropbox-app-id]this link. If you don't want to create the client
   ID, no problem! You can simply leave it blank to use rclone's App ID and continue the other steps.

   I don't have Dropbox client ID, so I simply left it blank to use Rclone's default App ID.
Option client_id.
OAuth Client Id.
Leave blank normally.
Enter a string value. Press Enter for the default ("").
client_id> ##Leave blank and press ENTER
Option client_secret.
OAuth Client Secret.
Leave blank normally.
Enter a string value. Press Enter for the default ("").
client_secret> ##Leave blank and press ENTER

   Next, you are asked if you want to edit advanced configuration file. I don't want to edit it, so I
   entered "n" and hit ENTER to continue.
Edit advanced config?
y) Yes
n) No (default)
y/n> n

   Finally, press "Y" to use auto config (which is the default) to complete Rclone configuration task.
Use auto config?
 * Say Y if not sure
 * Say N if you are working on a remote or headless machine

y) Yes (default)
n) No
y/n> y

   A new browser window will open and Rclone will ask your permission to access your Dropbox account.
   Click "Allow" button to authorize Rclone to access your Dropbox.

   You will see a success message in the browser.

   The new remote details for Dropbox will be shown in the Terminal. Review the settings and if
   everything seems OK, type "y" and hit ENTER to complete Dropbox remote creation task.
y) Yes this is OK (default)
e) Edit this remote
d) Delete this remote
y/e/d> y

   Done! A new remote named "mydropbox" is created.

   If you wish to create another remote for different provider, click "n" and follow the same procedure
   as shown above. Or, just quit the rclone configuration wizard by pressing "q".
Current remotes:

Name                 Type
====                 ====
mydropbox            dropbox
mygdrive             drive

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q> q

   You can view the list of configured remotes at any time by using the following command:
$> rclone listremotes

   Sample output:
mydropbox:
mygdrive:

   We just gave permission to Rclone to access the Dropbox. Next, we will mount the Dropbox as a
   filesystem, so we can access the contents of Dropbox right from our file manager.

Mount Dropbox Using Rclone In Linux
   First, create a mount point to mount the Dropbox in our file manager. For example, I am going to
   create a mount point named "dropbox" in my $HOME directory.
$> mkdir ~/dropbox

   Next, mount the Dropbox using Rclone as shown below:
$> rclone mount mydropbox: ~/dropbox/

   Here, "mydropbox" is the remote name and the "dropbox" is the mount point. Replace these values with
   your own.

   Don't forget to add colon (:) after the remote's name.

   Congratulations! Open the file manager and you will see the Dropbox is mounted locally in your file
   manager.

   Double click on the "dropbox" folder on the file manager to access contents of your Dropbox.

   From now on, you can create, copy, move, rename and delete files/folders from your Dropbox as the way
   you do in your local file manager. Anything you put in the local mount folder (i.e. ~/dropbox folder)
   will be uploaded to your Dropbox.

   You can also mount a specific directory/file from the Dropbox like below.
$> rclone mount remote:path/to/files /path/to/local/mount

   You can do everything from commandline as well.

View Dropbox contents
   To view all files in your Dropbox from commandline, run:
$> rclone ls mydropbox:

   Again, replace "mydropbox" using your own remote name.

   To list all directories in the top level, run:
$> rclone lsd mydropbox:

Copy files and directories to Dropbox
   For example, to copy a directory from your local system, say "~/test" to a directory called
   "ostechnix" in your Dropbox, run:
$> rclone copy ~/test mydropbox:ostechnix

   If the directory "ostechnix" does not exists in Dropbox, Rclone will create it.

   Verify if the directory "ostechnix" exists in the Dropbox by listing the directories using command:
$> rclone lsd mydropbox:
          -1 2022-01-21 17:31:29        -1 Apps
          -1 2022-01-21 17:31:29        -1 Yahoo! Mail
          -1 2022-01-21 17:31:29        -1 ostechnix

   You can view the contents of "ostechnix" directory using the following command:
$> rclone ls mydropbox:ostechnix

   Also, check the Dropbox contents from the browser to verify if the "ostechnix" exists there.

Sync files with Dropbox
   You should use this command with caution. Because, the Destination is updated to match Source,
   including deleting files if necessary.

   Since Synchronization involves deletion on destination, it is always a best practice to first test
   the Synchronization operation with the --dry-run or the --interactive/-i flag to avoid data loss.
$> rclone sync -i SOURCE remote:DESTINATION

   Rclone has many other command line options. We will cover them in a separate guide soon.

Unmount Dropbox
   Go to the Terminal window where you entered the "rclone mount" command to mount Dropbox and simply
   press "CTRL+c" to stop the mount.

   You can also do it from the file manager as well. From the file manager, right click on the mount
   point i.e. "dropbox" and click Unmount.

   The umount operation may fail, for example when the mount point is busy. When that happens, you can
   stop the mount manually using command:
$> fusermount -u ~/dropbox

Conclusion
   In this guide, we discussed how to mount Dropbox locally with Rclone in Linux, and then how to copy
   and sync the files from local drive to Dropbox from commandline using Rclone.



---

